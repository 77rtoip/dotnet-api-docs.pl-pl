<Type Name="TcpListener" FullName="System.Net.Sockets.TcpListener">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="e403c2f9f2db51ad2fe6227d0079b86dfce23711" />
    <Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="11/17/2018" />
    <Meta Name="ms.locfileid" Value="51935654" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class TcpListener" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TcpListener extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Net.Sockets.TcpListener" />
  <TypeSignature Language="VB.NET" Value="Public Class TcpListener" />
  <TypeSignature Language="C++ CLI" Value="public ref class TcpListener" />
  <TypeSignature Language="F#" Value="type TcpListener = class" />
  <AssemblyInfo>
    <AssemblyName>System.Net.Sockets</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Nasłuchuje połączeń z klientami sieci TCP.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.TcpListener> Klasy zawiera proste metody, które nasłuchiwania i akceptowania żądań połączenia przychodzących w trybie synchronicznym blokowania. Można użyć dowolnego <xref:System.Net.Sockets.TcpClient> lub <xref:System.Net.Sockets.Socket> nawiązywanie połączeń z <xref:System.Net.Sockets.TcpListener>. Tworzenie <xref:System.Net.Sockets.TcpListener> przy użyciu <xref:System.Net.IPEndPoint>, lokalny adres IP i numer portu lub po prostu numeru portu. Określ <xref:System.Net.IPAddress.Any> dla lokalnego adresu IP i numer portu lokalnego, jeśli chcesz, aby podstawowego dostawcy usług w przypisać te wartości 0. Jeśli zdecydujesz się to zrobić, możesz użyć <xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A> właściwość do identyfikacji przypisane informacje po jest połączony gniazda.  
  
 Użyj <xref:System.Net.Sockets.TcpListener.Start%2A> metodę, aby rozpocząć nasłuchuje przychodzących żądań połączeń. <xref:System.Net.Sockets.TcpListener.Start%2A> kolejki połączeń przychodzących, dopóki nie zostanie wywołana albo <xref:System.Net.Sockets.TcpListener.Stop%2A> lub metoda ma się w kolejce <xref:System.Net.Sockets.SocketOptionName.MaxConnections>. Użyj jednej <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> lub <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> ściągnąć połączenia z kolejki żądań połączenia przychodzących. Te dwie metody będzie blokować. Jeśli chcesz uniknąć blokowania, możesz użyć <xref:System.Net.Sockets.TcpListener.Pending%2A> metody, aby ustalić, czy żądania połączenia są dostępne w kolejce.  
  
 Wywołaj <xref:System.Net.Sockets.TcpListener.Stop%2A> metodę, aby zamknąć <xref:System.Net.Sockets.TcpListener>.  
  
> [!NOTE]
>  <xref:System.Net.Sockets.TcpListener.Stop%2A> Metody nie Zamknij wszystkie połączenia akceptowane. Odpowiedzialność za zamykanie je oddzielnie.  
  
   
  
## Examples  
 Poniższy przykład kodu tworzy <xref:System.Net.Sockets.TcpListener>.  
  
 [!code-cpp[System.Net.Sockets.TcpListener#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener/CPP/tcpserver.cpp#1)]
 [!code-csharp[System.Net.Sockets.TcpListener#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener/CS/tcpserver.cs#1)]
 [!code-vb[System.Net.Sockets.TcpListener#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener/VB/tcpserver.vb#1)]  
  
 Zobacz <xref:System.Net.Sockets.TcpClient> na przykład klienta.  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Net.SocketPermission">Aby ustanowić połączenia wychodzącego, lub zaakceptuj żądanie przychodzące.</permission>
    <altmember cref="T:System.Net.Sockets.TcpClient" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Net.Sockets.TcpListener" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TcpListener (int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (port As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TcpListener(int port);" />
      <MemberSignature Language="F#" Value="new System.Net.Sockets.TcpListener : int -&gt; System.Net.Sockets.TcpListener" Usage="new System.Net.Sockets.TcpListener port" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
          <AttributeName>System.Obsolete("Use TcpListener (IPAddress address, int port) instead")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;netframework-4.8">
          <AttributeName>System.Obsolete("This method has been deprecated. Please use TcpListener(IPAddress localaddr, int port) instead. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.Obsolete("Use TcpListener(IPAddress localaddr, int port).")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="port" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="port">Port do nasłuchiwania dla przychodzących próby nawiązania połączenia.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Net.Sockets.TcpListener" /> klasy, która nasłuchuje na określonym porcie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor jest przestarzały. Użyj <xref:System.Net.Sockets.TcpListener.%23ctor%28System.Net.IPAddress%2CSystem.Int32%29?displayProperty=nameWithType> lub <xref:System.Net.Sockets.TcpListener.%23ctor%28System.Net.IPEndPoint%29?displayProperty=nameWithType> konstruktorów.  
  
 Ten konstruktor pozwala określić numer portu, na którym nasłuchuje przychodzących prób nawiązania połączenia. Za pomocą tego konstruktora podstawowego dostawcy usług przypisuje najbardziej odpowiedni adres z sieci. Jeśli nie są istotne, port lokalny, który jest używany, można określić 0 dla numeru portu. W tym przypadku dostawcy usług przypisze liczbę dostępnych portów tymczasowych. Jeśli używasz tej metody, można wykryć, jakie sieci lokalnej adres i numer portu przypisany przy użyciu <xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A> właściwości.  
  
 Wywołaj <xref:System.Net.Sockets.TcpListener.Start%2A> metodę, aby rozpocząć nasłuchiwanie przychodzących prób nawiązania połączenia.  
  
   
  
## Examples  
 Poniższy przykład kodu tworzy <xref:System.Net.Sockets.TcpListener> za pomocą numeru portu lokalnego.  
  
 [!code-cpp[Classic TcpListener.PublicMethodsAndPropertiesExample#3](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/CPP/source.cpp#3)]
 [!code-csharp[Classic TcpListener.PublicMethodsAndPropertiesExample#3](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/CS/source.cs#3)]
 [!code-vb[Classic TcpListener.PublicMethodsAndPropertiesExample#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/VB/source.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="port" /> nie przypada między <see cref="F:System.Net.IPEndPoint.MinPort" /> i <see cref="F:System.Net.IPEndPoint.MaxPort" />.</exception>
        <altmember cref="M:System.Net.Sockets.TcpListener.Start" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TcpListener (System.Net.IPEndPoint localEP);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Net.IPEndPoint localEP) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPEndPoint)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (localEP As IPEndPoint)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TcpListener(System::Net::IPEndPoint ^ localEP);" />
      <MemberSignature Language="F#" Value="new System.Net.Sockets.TcpListener : System.Net.IPEndPoint -&gt; System.Net.Sockets.TcpListener" Usage="new System.Net.Sockets.TcpListener localEP" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="localEP" Type="System.Net.IPEndPoint" />
      </Parameters>
      <Docs>
        <param name="localEP">
          <see cref="T:System.Net.IPEndPoint" /> Reprezentujący lokalny punkt końcowy, do którego ma zostać powiązania odbiornika <see cref="T:System.Net.Sockets.Socket" />.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Net.Sockets.TcpListener" /> klasy przy użyciu określonego lokalny punkt końcowy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor pozwala określić lokalny adres IP i numer portu do nasłuchiwania na połączenie przychodzące próby. Przed użyciem tego konstruktora, należy utworzyć <xref:System.Net.IPEndPoint> przy użyciu żądanego adresu IP adres i port numer lokalny. Przekazać ten <xref:System.Net.IPEndPoint> do konstruktora jako `localEP` parametru.  
  
 Jeśli nie są istotne, który adres lokalny jest przypisany, można utworzyć <xref:System.Net.IPEndPoint> przy użyciu <xref:System.Net.IPAddress.Any?displayProperty=nameWithType> jako parametr adres i usłudze podstawowej dostawcy przypisze najbardziej odpowiedni adres z sieci. Może to ułatwić, Uprość aplikacji, jeśli masz wiele interfejsów sieciowych. Jeśli nie są istotne, port lokalny, który jest używany, można utworzyć <xref:System.Net.IPEndPoint> przy użyciu 0 dla numeru portu. W tym przypadku dostawcy usług przypisze liczbę dostępnych portów tymczasowych. Jeśli używasz tej metody, można wykryć, jakie sieci lokalnej adres i numer portu przypisany przy użyciu <xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A> właściwości.  
  
 Wywołaj <xref:System.Net.Sockets.TcpListener.Start%2A> metodę, aby rozpocząć nasłuchiwanie przychodzących prób nawiązania połączenia.  
  
> [!NOTE]
>  Ten element członkowski generuje informacje ze śledzenia pod warunkiem włączenia funkcji śledzenia sieci w aplikacji. Aby uzyskać więcej informacji, zobacz [Śledzenie sieci w programie .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
   
  
## Examples  
 Poniższy przykład kodu tworzy wystąpienie <xref:System.Net.Sockets.TcpListener> klasy przy użyciu lokalnego punktu końcowego.  
  
 [!code-cpp[Classic TcpListener.PublicMethodsAndPropertiesExample#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/CPP/source.cpp#1)]
 [!code-csharp[Classic TcpListener.PublicMethodsAndPropertiesExample#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/CS/source.cs#1)]
 [!code-vb[Classic TcpListener.PublicMethodsAndPropertiesExample#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="localEP" /> jest <see langword="null" />.</exception>
        <altmember cref="T:System.Net.IPEndPoint" />
        <altmember cref="M:System.Net.Sockets.TcpListener.Start" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TcpListener (System.Net.IPAddress localaddr, int port);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Net.IPAddress localaddr, int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.#ctor(System.Net.IPAddress,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (localaddr As IPAddress, port As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TcpListener(System::Net::IPAddress ^ localaddr, int port);" />
      <MemberSignature Language="F#" Value="new System.Net.Sockets.TcpListener : System.Net.IPAddress * int -&gt; System.Net.Sockets.TcpListener" Usage="new System.Net.Sockets.TcpListener (localaddr, port)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="localaddr" Type="System.Net.IPAddress" />
        <Parameter Name="port" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="localaddr">
          <see cref="T:System.Net.IPAddress" /> Reprezentujący lokalny adres IP.</param>
        <param name="port">Port do nasłuchiwania dla przychodzących próby nawiązania połączenia.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Net.Sockets.TcpListener" /> klasy, która nasłuchuje na połączenie przychodzące próby w określonym IP adres i port numer lokalny.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor pozwala określić lokalny adres IP i numer portu do nasłuchiwania na połączenie przychodzące próby. Przed wywołaniem tego konstruktora należy najpierw utworzyć <xref:System.Net.IPAddress> przy użyciu żądanego adresu lokalnego. Przekazać ten <xref:System.Net.IPAddress> do konstruktora jako `localaddr` parametru. Jeśli nie są istotne, który adres lokalny jest przypisany, należy określić <xref:System.Net.IPAddress.Any?displayProperty=nameWithType> dla `localaddr` parametr i podstawowego dostawcy usług przypisze najbardziej odpowiedni adres z sieci. Może to ułatwić, Uprość aplikacji, jeśli masz wiele interfejsów sieciowych. Jeśli nie są istotne, port lokalny, który jest używany, można określić 0 dla numeru portu. W tym przypadku dostawcy usług przypisze numeru portu dostępne od 1024 do 5000. Jeśli używasz tej metody, można wykryć, jakie sieci lokalnej adres i numer portu przypisany przy użyciu <xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A> właściwości.  
  
 Wywołaj <xref:System.Net.Sockets.TcpListener.Start%2A> metodę, aby rozpocząć nasłuchiwanie przychodzących prób nawiązania połączenia.  
  
> [!NOTE]
>  Ten element członkowski generuje informacje ze śledzenia pod warunkiem włączenia funkcji śledzenia sieci w aplikacji. Aby uzyskać więcej informacji, zobacz [Śledzenie sieci w programie .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
   
  
## Examples  
 Poniższy przykład kodu tworzy wystąpienie <xref:System.Net.Sockets.TcpListener> przy użyciu adresu IP adres i port numer lokalny.  
  
 [!code-cpp[Classic TcpListener.PublicMethodsAndPropertiesExample#2](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/CPP/source.cpp#2)]
 [!code-csharp[Classic TcpListener.PublicMethodsAndPropertiesExample#2](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/CS/source.cs#2)]
 [!code-vb[Classic TcpListener.PublicMethodsAndPropertiesExample#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/VB/source.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="localaddr" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="port" /> nie przypada między <see cref="F:System.Net.IPEndPoint.MinPort" /> i <see cref="F:System.Net.IPEndPoint.MaxPort" />.</exception>
        <altmember cref="T:System.Net.IPAddress" />
        <altmember cref="M:System.Net.Sockets.TcpListener.Start" />
      </Docs>
    </Member>
    <Member MemberName="AcceptSocket">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.Socket AcceptSocket ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.Sockets.Socket AcceptSocket() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.AcceptSocket" />
      <MemberSignature Language="VB.NET" Value="Public Function AcceptSocket () As Socket" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::Sockets::Socket ^ AcceptSocket();" />
      <MemberSignature Language="F#" Value="member this.AcceptSocket : unit -&gt; System.Net.Sockets.Socket" Usage="tcpListener.AcceptSocket " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.Socket</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Akceptuje żądanie połączenia oczekujące.</summary>
        <returns>Element <see cref="T:System.Net.Sockets.Socket" /> używany do wysyłania i odbierania danych.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> jest metodą blokowania, która zwraca <xref:System.Net.Sockets.Socket> służącego do wysyłania i odbierania danych. Aby uniknąć blokowania, należy użyć <xref:System.Net.Sockets.TcpListener.Pending%2A> metodę, aby sprawdzić, czy żądania połączenia są dostępne w kolejce połączeń przychodzących.  
  
 <xref:System.Net.Sockets.Socket> Zwracany jest inicjowany za pomocą adres i port numer IP hosta zdalnego. Można użyć dowolnego z <xref:System.Net.Sockets.Socket.Send%2A> i <xref:System.Net.Sockets.Socket.Receive%2A> metod dostępnych w <xref:System.Net.Sockets.Socket> klasy do komunikowania się z hostem zdalnym. Po zakończeniu przy użyciu <xref:System.Net.Sockets.Socket>, pamiętaj wywołać jego <xref:System.Net.Sockets.Socket.Close%2A> metody. Jeśli aplikacja jest stosunkowo prosta, należy wziąć pod uwagę przy użyciu <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> metody zamiast <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> metody. <xref:System.Net.Sockets.TcpClient> zapewnia proste metody do wysyłania i odbierania danych przez sieć w trybie synchronicznym blokowania.  
  
> [!NOTE]
>  Ten element członkowski generuje informacje ze śledzenia pod warunkiem włączenia funkcji śledzenia sieci w aplikacji. Aby uzyskać więcej informacji, zobacz [Śledzenie sieci w programie .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
   
  
## Examples  
 W poniższym przykładzie kodu <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> metoda służy do zwracania <xref:System.Net.Sockets.Socket>. To <xref:System.Net.Sockets.Socket> jest używany do komunikacji z klientem nowo połączone.  
  
 [!code-cpp[Classic TcpListener.PublicMethodsAndPropertiesExample#4](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/CPP/source.cpp#4)]
 [!code-csharp[Classic TcpListener.PublicMethodsAndPropertiesExample#4](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/CS/source.cs#4)]
 [!code-vb[Classic TcpListener.PublicMethodsAndPropertiesExample#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic TcpListener.PublicMethodsAndPropertiesExample/VB/source.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Odbiornik nie został uruchomiony z wywołaniem <see cref="M:System.Net.Sockets.TcpListener.Start" />.</exception>
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptTcpClient" />
        <altmember cref="T:System.Net.Sockets.Socket" />
        <altmember cref="M:System.Net.Sockets.TcpListener.Pending" />
      </Docs>
    </Member>
    <Member MemberName="AcceptSocketAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Sockets.Socket&gt; AcceptSocketAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Sockets.Socket&gt; AcceptSocketAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.AcceptSocketAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function AcceptSocketAsync () As Task(Of Socket)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Sockets::Socket ^&gt; ^ AcceptSocketAsync();" />
      <MemberSignature Language="F#" Value="member this.AcceptSocketAsync : unit -&gt; System.Threading.Tasks.Task&lt;System.Net.Sockets.Socket&gt;" Usage="tcpListener.AcceptSocketAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Sockets.Socket&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Akceptuje żądanie połączenia oczekujące jako operację asynchroniczną.</summary>
        <returns>Zwraca <see cref="T:System.Threading.Tasks.Task`1" />  
  
Obiekt zadania reprezentujący operację asynchroniczną. <see cref="P:System.Threading.Tasks.Task`1.Result" /> Zwraca właściwości dla obiektu task <see cref="T:System.Net.Sockets.Socket" /> używany do wysyłania i odbierania danych.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta operacja nie będzie blokować. Zwrócony <xref:System.Threading.Tasks.Task%601> obiektu zakończy się po połączenie gniazda zostało zaakceptowane.  
  
 <xref:System.Net.Sockets.Socket> Zwracane w <xref:System.Threading.Tasks.Task%601> jest inicjowany za pomocą adres i port numer IP hosta zdalnego. Można użyć dowolnego z <xref:System.Net.Sockets.Socket.Send%2A> i <xref:System.Net.Sockets.Socket.Receive%2A> metod dostępnych w <xref:System.Net.Sockets.Socket> klasy do komunikowania się z hostem zdalnym. Po zakończeniu przy użyciu <xref:System.Net.Sockets.Socket>, pamiętaj wywołać jego <xref:System.Net.Sockets.Socket.Close%2A> metody. Jeśli aplikacja jest stosunkowo prosta, należy wziąć pod uwagę przy użyciu <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> metody zamiast <xref:System.Net.Sockets.TcpListener.AcceptSocketAsync%2A> metody. <xref:System.Net.Sockets.TcpClient> zapewnia proste metody do wysyłania i odbierania danych przez sieć w trybie synchronicznym blokowania.  
  
> [!NOTE]
>  Ten element członkowski generuje informacje ze śledzenia pod warunkiem włączenia funkcji śledzenia sieci w aplikacji. Aby uzyskać więcej informacji, zobacz [Śledzenie sieci w programie .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Odbiornik nie został uruchomiony z wywołaniem <see cref="M:System.Net.Sockets.TcpListener.Start" />.</exception>
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptTcpClient" />
        <altmember cref="T:System.Net.Sockets.Socket" />
        <altmember cref="M:System.Net.Sockets.TcpListener.Pending" />
      </Docs>
    </Member>
    <Member MemberName="AcceptTcpClient">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.TcpClient AcceptTcpClient ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.Sockets.TcpClient AcceptTcpClient() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.AcceptTcpClient" />
      <MemberSignature Language="VB.NET" Value="Public Function AcceptTcpClient () As TcpClient" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::Sockets::TcpClient ^ AcceptTcpClient();" />
      <MemberSignature Language="F#" Value="member this.AcceptTcpClient : unit -&gt; System.Net.Sockets.TcpClient" Usage="tcpListener.AcceptTcpClient " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.TcpClient</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Akceptuje żądanie połączenia oczekujące.</summary>
        <returns>Element <see cref="T:System.Net.Sockets.TcpClient" /> używany do wysyłania i odbierania danych.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> jest metodą blokowania, która zwraca <xref:System.Net.Sockets.TcpClient> służącego do wysyłania i odbierania danych. Użyj <xref:System.Net.Sockets.TcpListener.Pending%2A> metodę, aby sprawdzić, czy żądania połączenia są dostępne w kolejce połączeń przychodzących, jeśli chcesz uniknąć blokowania.  
  
 Użyj <xref:System.Net.Sockets.TcpClient.GetStream%2A?displayProperty=nameWithType> metody w celu uzyskania bazowej <xref:System.Net.Sockets.NetworkStream> zwracanego <xref:System.Net.Sockets.TcpClient>. <xref:System.Net.Sockets.NetworkStream> Zapewnia metody do wysyłania i odbierania z hostem zdalnym. Po osiągnięciu przez z <xref:System.Net.Sockets.TcpClient>, pamiętaj wywołać jego <xref:System.Net.Sockets.TcpClient.Close%2A> metody. Jeśli chcesz, aby większą elastyczność niż <xref:System.Net.Sockets.TcpClient> oferty, należy wziąć pod uwagę przy użyciu <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>.  
  
> [!NOTE]
>  Ten element członkowski generuje informacje ze śledzenia pod warunkiem włączenia funkcji śledzenia sieci w aplikacji. Aby uzyskać więcej informacji, zobacz [Śledzenie sieci w programie .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
   
  
## Examples  
 W poniższym przykładzie kodu <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> metoda służy do zwracania <xref:System.Net.Sockets.TcpClient>. To <xref:System.Net.Sockets.TcpClient> jest używany do komunikacji z klientem nowo połączone.  
  
 [!code-cpp[Classic TcpListenerExample#1](~/samples/snippets/cpp/VS_Snippets_Remoting/Classic TcpListenerExample/CPP/source.cpp#1)]
 [!code-csharp[Classic TcpListenerExample#1](~/samples/snippets/csharp/VS_Snippets_Remoting/Classic TcpListenerExample/CS/source.cs#1)]
 [!code-vb[Classic TcpListenerExample#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/Classic TcpListenerExample/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Odbiornik nie został uruchomiony z wywołaniem <see cref="M:System.Net.Sockets.TcpListener.Start" />.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">Użyj <see cref="P:System.Net.Sockets.SocketException.ErrorCode" /> właściwości, aby uzyskać kod błędu. Po otrzymaniu tego kodu, możesz zapoznać się z <see href="/windows/desktop/winsock/windows-sockets-error-codes-2">kod błędu API Windows Sockets w wersji 2</see> dokumentacji, aby uzyskać szczegółowy opis błędu.</exception>
        <altmember cref="T:System.Net.Sockets.TcpClient" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptSocket" />
        <altmember cref="T:System.Net.Sockets.Socket" />
        <altmember cref="T:System.Net.Sockets.NetworkStream" />
      </Docs>
    </Member>
    <Member MemberName="AcceptTcpClientAsync">
      <MemberSignature Language="C#" Value="public System.Threading.Tasks.Task&lt;System.Net.Sockets.TcpClient&gt; AcceptTcpClientAsync ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Threading.Tasks.Task`1&lt;class System.Net.Sockets.TcpClient&gt; AcceptTcpClientAsync() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.AcceptTcpClientAsync" />
      <MemberSignature Language="VB.NET" Value="Public Function AcceptTcpClientAsync () As Task(Of TcpClient)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Threading::Tasks::Task&lt;System::Net::Sockets::TcpClient ^&gt; ^ AcceptTcpClientAsync();" />
      <MemberSignature Language="F#" Value="member this.AcceptTcpClientAsync : unit -&gt; System.Threading.Tasks.Task&lt;System.Net.Sockets.TcpClient&gt;" Usage="tcpListener.AcceptTcpClientAsync " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Net.Sockets.TcpClient&gt;</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Akceptuje żądanie połączenia oczekujące jako operację asynchroniczną.</summary>
        <returns>Zwraca <see cref="T:System.Threading.Tasks.Task`1" />  
  
Obiekt zadania reprezentujący operację asynchroniczną. <see cref="P:System.Threading.Tasks.Task`1.Result" /> Zwraca właściwości dla obiektu task <see cref="T:System.Net.Sockets.TcpClient" /> używany do wysyłania i odbierania danych.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta operacja nie będzie blokować. Zwrócony <xref:System.Threading.Tasks.Task%601> obiektu zakończy się po zaakceptowaniu połączenia TCP.  
  
 Użyj <xref:System.Net.Sockets.TcpClient.GetStream%2A?displayProperty=nameWithType> metody w celu uzyskania bazowej <xref:System.Net.Sockets.NetworkStream> zwracanego <xref:System.Net.Sockets.TcpClient> w <xref:System.Threading.Tasks.Task%601>. <xref:System.Net.Sockets.NetworkStream> Zapewnia metody do wysyłania i odbierania z hostem zdalnym. Po osiągnięciu przez z <xref:System.Net.Sockets.TcpClient>, pamiętaj wywołać jego <xref:System.Net.Sockets.TcpClient.Close%2A> metody. Jeśli chcesz, aby większą elastyczność niż <xref:System.Net.Sockets.TcpClient> oferty, należy wziąć pod uwagę przy użyciu <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> lub <xref:System.Net.Sockets.TcpListener.AcceptSocketAsync%2A>.  
  
> [!NOTE]
>  Ten element członkowski generuje informacje ze śledzenia pod warunkiem włączenia funkcji śledzenia sieci w aplikacji. Aby uzyskać więcej informacji, zobacz [Śledzenie sieci w programie .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Odbiornik nie został uruchomiony z wywołaniem <see cref="M:System.Net.Sockets.TcpListener.Start" />.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">Użyj <see cref="P:System.Net.Sockets.SocketException.ErrorCode" /> właściwości, aby uzyskać kod błędu. Po otrzymaniu tego kodu, możesz zapoznać się z <see href="/windows/desktop/winsock/windows-sockets-error-codes-2">kod błędu API Windows Sockets w wersji 2</see> dokumentacji, aby uzyskać szczegółowy opis błędu.</exception>
        <altmember cref="T:System.Net.Sockets.TcpClient" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptSocket" />
        <altmember cref="T:System.Net.Sockets.Socket" />
        <altmember cref="T:System.Net.Sockets.NetworkStream" />
      </Docs>
    </Member>
    <Member MemberName="Active">
      <MemberSignature Language="C#" Value="protected bool Active { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Active" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.TcpListener.Active" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property Active As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property bool Active { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.Active : bool" Usage="System.Net.Sockets.TcpListener.Active" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy <see cref="T:System.Net.Sockets.TcpListener" /> aktywnie nasłuchuje połączeń klientów.</summary>
        <value>
          <see langword="true" /> Jeśli <see cref="T:System.Net.Sockets.TcpListener" /> jest aktywnie nasłuchuje; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Klasy wywodzące się z <xref:System.Net.Sockets.TcpListener> ta właściwość służy do określenia, czy <xref:System.Net.Sockets.Socket> obecnie nasłuchuje przychodzących prób nawiązania połączenia. <xref:System.Net.Sockets.TcpClient.Active%2A> Właściwość może służyć do uniknięcia nadmiarowe <xref:System.Net.Sockets.TcpListener.Start%2A> prób.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Net.Sockets.TcpListener.Start" />
      </Docs>
    </Member>
    <Member MemberName="AllowNatTraversal">
      <MemberSignature Language="C#" Value="public void AllowNatTraversal (bool allowed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AllowNatTraversal(bool allowed) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AllowNatTraversal (allowed As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AllowNatTraversal(bool allowed);" />
      <MemberSignature Language="F#" Value="member this.AllowNatTraversal : bool -&gt; unit" Usage="tcpListener.AllowNatTraversal allowed" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="allowed" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="allowed">Wartość logiczna określająca, czy włączyć lub wyłączyć Przechodzenie translatora adresów Sieciowych.</param>
        <summary>Włącza lub wyłącza translacji adresów sieciowych (NAT) przechodzenie na <see cref="T:System.Net.Sockets.TcpListener" /> wystąpienia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.TcpListener.AllowNatTraversal%2A> Metoda jest używana do włączania lub wyłączania Przechodzenie translatora adresów Sieciowych dla <xref:System.Net.Sockets.TcpListener> wystąpienia. Przechodzenie translatora adresów Sieciowych, mogą być udostępniane przy użyciu protokołu Teredo, 6to4 lub tunel protokołu ISATAP.  
  
 Gdy `allowed` parametr ma wartość FAŁSZ, <xref:System.Net.Sockets.SocketOptionName.IPProtectionLevel> ustawiono opcję w gnieździe skojarzone <xref:System.Net.Sockets.IPProtectionLevel.EdgeRestricted>. Jawnie wyłącza Przechodzenie translatora adresów Sieciowych dla <xref:System.Net.Sockets.TcpListener> wystąpienia.  
  
 Gdy `allowed` parametr ma wartość true, <xref:System.Net.Sockets.SocketOptionName.IPProtectionLevel> ustawiono opcję w gnieździe skojarzone <xref:System.Net.Sockets.IPProtectionLevel.Unrestricted>. Może to umożliwić Przechodzenie translatora adresów Sieciowych dla <xref:System.Net.Sockets.TcpListener> w zależności od reguły zapory w miejscu w systemie.  
  
 <xref:System.Net.Sockets.TcpListener.AllowNatTraversal%2A> Przed wywołaniem, można wywołać metody <xref:System.Net.Sockets.TcpListener.Start%2A> metodę, aby rozpocząć nasłuchuje przychodzących żądań połączenia (przed gniazda jest powiązana). Jeśli <xref:System.Net.Sockets.TcpListener.AllowNatTraversal%2A> metoda jest wywoływana po <xref:System.Net.Sockets.TcpListener.Start%2A> metody, a następnie <xref:System.InvalidOperationException> zostanie zgłoszony.  
  
 Adres Teredo nie jest adresem IPv6 z prefiksem 2001:: / 32. Adresy protokołu Teredo można zwrócone za pośrednictwem normalne rozpoznawanie nazw DNS lub wyliczenia jako adres IPv6 przypisany do interfejsu lokalnego.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="M:System.Net.Sockets.TcpListener.AllowNatTraversal(System.Boolean)" /> Metoda została wywołana po wywołaniu <see cref="M:System.Net.Sockets.TcpListener.Start" /> — metoda</exception>
        <altmember cref="P:System.Net.IPAddress.IsIPv6Teredo" />
        <altmember cref="T:System.Net.Sockets.IPProtectionLevel" />
        <altmember cref="F:System.Net.Sockets.SocketOptionName.IPProtectionLevel" />
        <altmember cref="M:System.Net.Sockets.Socket.SetIPProtectionLevel(System.Net.Sockets.IPProtectionLevel)" />
        <altmember cref="M:System.Net.Sockets.UdpClient.AllowNatTraversal(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="BeginAcceptSocket">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginAcceptSocket (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginAcceptSocket(class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginAcceptSocket (callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginAcceptSocket(AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginAcceptSocket : AsyncCallback * obj -&gt; IAsyncResult" Usage="tcpListener.BeginAcceptSocket (callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback">
          <see cref="T:System.AsyncCallback" /> Delegata, który odwołuje się do metody do wywołania po ukończeniu operacji.</param>
        <param name="state">Zdefiniowane przez użytkownika obiekt zawierający informacje na temat operacji accept. Ten obiekt jest przekazywany do <c>wywołania zwrotnego</c> po zakończeniu operacji.</param>
        <summary>Rozpoczyna operację asynchroniczną do akceptowania przychodzących próba połączenia.</summary>
        <returns>
          <see cref="T:System.IAsyncResult" /> Odwołujący się asynchroniczne tworzenie <see cref="T:System.Net.Sockets.Socket" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Asynchroniczną <xref:System.Net.Sockets.TcpListener.BeginAcceptSocket%2A> można ukończyć operacji, przez wywołanie metody <xref:System.Net.Sockets.TcpListener.EndAcceptSocket%2A> metody. Zazwyczaj metoda jest wywoływana przez `callback` delegować.  
  
 Ta metoda nie blokuje, aż do zakończenia operacji. Aby zablokować do momentu ukończenia operacji, należy użyć <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> metody.  
  
 Aby uzyskać szczegółowe informacje dotyczące korzystania z modelu programowania asynchronicznego, zobacz [wywołanie asynchroniczne synchroniczne metody](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).  
  
> [!NOTE]
>  Możesz wywołać <xref:System.Net.Sockets.Socket.RemoteEndPoint%2A> właściwości zwracanego <xref:System.Net.Sockets.Socket> do identyfikowania hosta zdalnego sieci adres i numer portu.  
  
> [!NOTE]
>  Jeśli zostanie wyświetlony <xref:System.Net.Sockets.SocketException>, użyj <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> właściwość, aby uzyskać kod błędu i odnoszą się do dokumentacji kodów błędów systemu Windows Sockets w wersji 2 interfejsu API w bibliotece MSDN pod [ http://msdn.microsoft.com/library/ ](https://msdn.microsoft.com/library/) dla szczegółowe Opis błędu.  
  
> [!NOTE]
>  Ten element członkowski generuje informacje ze śledzenia pod warunkiem włączenia funkcji śledzenia sieci w aplikacji. Aby uzyskać więcej informacji, zobacz [Śledzenie sieci w programie .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje użycie <xref:System.Net.Sockets.TcpListener.BeginAcceptSocket%2A> metodę, aby utworzyć i połączenia gniazda. Wywołanie zwrotne delegowanie wywołań <xref:System.Net.Sockets.TcpListener.EndAcceptSocket%2A> metodę, aby zakończyć żądania asynchronicznego.  
  
 [!code-cpp[System.Net.Sockets.TcpListener1#4](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/cpp/tcpserver.cpp#4)]
 [!code-csharp[System.Net.Sockets.TcpListener1#4](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/CS/tcpserver.cs#4)]
 [!code-vb[System.Net.Sockets.TcpListener1#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/VB/tcpserver.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">Wystąpił błąd podczas próby dostęp do gniazda.</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Net.Sockets.Socket" /> Zostało zamknięte.</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginAcceptTcpClient">
      <MemberSignature Language="C#" Value="public IAsyncResult BeginAcceptTcpClient (AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IAsyncResult BeginAcceptTcpClient(class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function BeginAcceptTcpClient (callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IAsyncResult ^ BeginAcceptTcpClient(AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.BeginAcceptTcpClient : AsyncCallback * obj -&gt; IAsyncResult" Usage="tcpListener.BeginAcceptTcpClient (callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="callback">
          <see cref="T:System.AsyncCallback" /> Delegata, który odwołuje się do metody do wywołania po ukończeniu operacji.</param>
        <param name="state">Zdefiniowane przez użytkownika obiekt zawierający informacje na temat operacji accept. Ten obiekt jest przekazywany do <c>wywołania zwrotnego</c> po zakończeniu operacji.</param>
        <summary>Rozpoczyna operację asynchroniczną do akceptowania przychodzących próba połączenia.</summary>
        <returns>
          <see cref="T:System.IAsyncResult" /> Odwołujący się asynchroniczne tworzenie <see cref="T:System.Net.Sockets.TcpClient" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Asynchroniczną <xref:System.Net.Sockets.TcpListener.BeginAcceptTcpClient%2A> można ukończyć operacji, przez wywołanie metody <xref:System.Net.Sockets.TcpListener.EndAcceptTcpClient%2A> metody. Zazwyczaj metoda jest wywoływana przez `callback` delegować.  
  
 Ta metoda nie blokuje, aż do zakończenia operacji. Aby zablokować do momentu ukończenia operacji, należy użyć <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> metody.  
  
 Aby uzyskać szczegółowe informacje dotyczące korzystania z modelu programowania asynchronicznego, zobacz [wywołanie asynchroniczne synchroniczne metody](~/docs/standard/asynchronous-programming-patterns/calling-synchronous-methods-asynchronously.md).  
  
> [!NOTE]
>  Jeśli zostanie wyświetlony <xref:System.Net.Sockets.SocketException>, użyj <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> właściwość, aby uzyskać kod błędu i odnoszą się do dokumentacji kodów błędów systemu Windows Sockets w wersji 2 interfejsu API w bibliotece MSDN pod [ http://msdn.microsoft.com/library/ ](https://msdn.microsoft.com/library/) dla szczegółowe Opis błędu.  
  
> [!NOTE]
>  Ten element członkowski generuje informacje ze śledzenia pod warunkiem włączenia funkcji śledzenia sieci w aplikacji. Aby uzyskać więcej informacji, zobacz [Śledzenie sieci w programie .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje użycie <xref:System.Net.Sockets.TcpListener.BeginAcceptTcpClient%2A> metodę, aby utworzyć i połączenia gniazda. Wywołanie zwrotne delegowanie wywołań <xref:System.Net.Sockets.TcpListener.EndAcceptTcpClient%2A> metodę, aby zakończyć żądania asynchronicznego.  
  
 [!code-cpp[System.Net.Sockets.TcpListener1#5](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/cpp/tcpserver.cpp#5)]
 [!code-csharp[System.Net.Sockets.TcpListener1#5](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/CS/tcpserver.cs#5)]
 [!code-vb[System.Net.Sockets.TcpListener1#5](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/VB/tcpserver.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">Wystąpił błąd podczas próby dostęp do gniazda.</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.Net.Sockets.Socket" /> Zostało zamknięte.</exception>
      </Docs>
    </Member>
    <Member MemberName="Create">
      <MemberSignature Language="C#" Value="public static System.Net.Sockets.TcpListener Create (int port);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Net.Sockets.TcpListener Create(int32 port) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.Create(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Create (port As Integer) As TcpListener" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Net::Sockets::TcpListener ^ Create(int port);" />
      <MemberSignature Language="F#" Value="static member Create : int -&gt; System.Net.Sockets.TcpListener" Usage="System.Net.Sockets.TcpListener.Create port" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.TcpListener</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="port" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="port">Port do nasłuchiwania dla przychodzących próby nawiązania połączenia.</param>
        <summary>Tworzy nową <see cref="T:System.Net.Sockets.TcpListener" /> wystąpienia do nasłuchiwania na określonym porcie.</summary>
        <returns>Zwraca <see cref="T:System.Net.Sockets.TcpListener" />.  
  
Nowy <see cref="T:System.Net.Sockets.TcpListener" /> wystąpienia do nasłuchiwania na określonym porcie.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="EndAcceptSocket">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.Socket EndAcceptSocket (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.Sockets.Socket EndAcceptSocket(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.EndAcceptSocket(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndAcceptSocket (asyncResult As IAsyncResult) As Socket" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::Sockets::Socket ^ EndAcceptSocket(IAsyncResult ^ asyncResult);" />
      <MemberSignature Language="F#" Value="member this.EndAcceptSocket : IAsyncResult -&gt; System.Net.Sockets.Socket" Usage="tcpListener.EndAcceptSocket asyncResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.Socket</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">
          <see cref="T:System.IAsyncResult" /> Zwracany przez wywołanie <see cref="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)" /> metody.</param>
        <summary>Asynchronicznie akceptuje przychodzące próby połączenia i tworzy nową <see cref="T:System.Net.Sockets.Socket" /> do obsługi komunikacji z hostem zdalnym.</summary>
        <returns>A <see cref="T:System.Net.Sockets.Socket" />.  
  
<see cref="T:System.Net.Sockets.Socket" /> Używany do wysyłania i odbierania danych.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wykonaj to bloki metody do czasu tej operacji. Aby wykonać tę operację synchronicznie, należy użyć <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> metody.  
  
> [!NOTE]
>  Możesz wywołać <xref:System.Net.Sockets.Socket.RemoteEndPoint%2A> właściwości zwracanego <xref:System.Net.Sockets.Socket> do identyfikowania hosta zdalnego sieci adres i numer portu.  
  
> [!NOTE]
>  Jeśli zostanie wyświetlony <xref:System.Net.Sockets.SocketException>, użyj <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> właściwość, aby uzyskać kod błędu i odnoszą się do dokumentacji kodów błędów systemu Windows Sockets w wersji 2 interfejsu API w bibliotece MSDN pod [ http://msdn.microsoft.com/library/ ](https://msdn.microsoft.com/library/) dla szczegółowe Opis błędu.  
  
> [!NOTE]
>  Ten element członkowski generuje informacje ze śledzenia pod warunkiem włączenia funkcji śledzenia sieci w aplikacji. Aby uzyskać więcej informacji, zobacz [Śledzenie sieci w programie .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje użycie <xref:System.Net.Sockets.TcpListener.BeginAcceptSocket%2A> metodę, aby utworzyć i połączenia gniazda. Wywołanie zwrotne delegowanie wywołań <xref:System.Net.Sockets.TcpListener.EndAcceptSocket%2A> metodę, aby zakończyć żądania asynchronicznego.  
  
 [!code-cpp[System.Net.Sockets.TcpListener1#4](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/cpp/tcpserver.cpp#4)]
 [!code-csharp[System.Net.Sockets.TcpListener1#4](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/CS/tcpserver.cs#4)]
 [!code-vb[System.Net.Sockets.TcpListener1#4](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/VB/tcpserver.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Podstawowe <see cref="T:System.Net.Sockets.Socket" /> zostało zamknięte.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="asyncResult" /> Parametr <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="asyncResult" /> Parametr nie został utworzony przez wywołanie <see cref="M:System.Net.Sockets.TcpListener.BeginAcceptSocket(System.AsyncCallback,System.Object)" /> metody.</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="M:System.Net.Sockets.TcpListener.EndAcceptSocket(System.IAsyncResult)" /> Wcześniej wywołano metodę.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">Wystąpił błąd podczas próby uzyskania dostępu do <see cref="T:System.Net.Sockets.Socket" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="EndAcceptTcpClient">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.TcpClient EndAcceptTcpClient (IAsyncResult asyncResult);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Net.Sockets.TcpClient EndAcceptTcpClient(class System.IAsyncResult asyncResult) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.EndAcceptTcpClient(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Function EndAcceptTcpClient (asyncResult As IAsyncResult) As TcpClient" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Net::Sockets::TcpClient ^ EndAcceptTcpClient(IAsyncResult ^ asyncResult);" />
      <MemberSignature Language="F#" Value="member this.EndAcceptTcpClient : IAsyncResult -&gt; System.Net.Sockets.TcpClient" Usage="tcpListener.EndAcceptTcpClient asyncResult" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.TcpClient</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="asyncResult" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="asyncResult">
          <see cref="T:System.IAsyncResult" /> Zwracany przez wywołanie <see cref="M:System.Net.Sockets.TcpListener.BeginAcceptTcpClient(System.AsyncCallback,System.Object)" /> metody.</param>
        <summary>Asynchronicznie akceptuje przychodzące próby połączenia i tworzy nową <see cref="T:System.Net.Sockets.TcpClient" /> do obsługi komunikacji z hostem zdalnym.</summary>
        <returns>A <see cref="T:System.Net.Sockets.TcpClient" />.  
  
<see cref="T:System.Net.Sockets.TcpClient" /> Używany do wysyłania i odbierania danych.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wykonaj to bloki metody do czasu tej operacji. Aby wykonać tę operację synchronicznie, należy użyć <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> metody.  
  
> [!NOTE]
>  Możesz wywołać <xref:System.Net.Sockets.Socket.RemoteEndPoint%2A> właściwości podstawowej gniazda (<xref:System.Net.Sockets.TcpClient.Client%2A>) do identyfikowania hosta zdalnego sieci adres i numer portu.  
  
> [!NOTE]
>  Jeśli zostanie wyświetlony <xref:System.Net.Sockets.SocketException>, użyj <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> właściwość, aby uzyskać kod błędu i odnoszą się do dokumentacji kodów błędów systemu Windows Sockets w wersji 2 interfejsu API w bibliotece MSDN pod [ http://msdn.microsoft.com/library/ ](https://msdn.microsoft.com/library/) dla szczegółowe Opis błędu.  
  
> [!NOTE]
>  Ten element członkowski generuje informacje ze śledzenia pod warunkiem włączenia funkcji śledzenia sieci w aplikacji. Aby uzyskać więcej informacji, zobacz [Śledzenie sieci w programie .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje użycie <xref:System.Net.Sockets.TcpListener.BeginAcceptTcpClient%2A> metodę, aby utworzyć i połączenia gniazda. Wywołanie zwrotne delegowanie wywołań <xref:System.Net.Sockets.TcpListener.EndAcceptTcpClient%2A> metodę, aby zakończyć żądania asynchronicznego.  
  
 [!code-cpp[System.Net.Sockets.TcpListener1#5](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/cpp/tcpserver.cpp#5)]
 [!code-csharp[System.Net.Sockets.TcpListener1#5](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/CS/tcpserver.cs#5)]
 [!code-vb[System.Net.Sockets.TcpListener1#5](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/VB/tcpserver.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ExclusiveAddressUse">
      <MemberSignature Language="C#" Value="public bool ExclusiveAddressUse { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ExclusiveAddressUse" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.TcpListener.ExclusiveAddressUse" />
      <MemberSignature Language="VB.NET" Value="Public Property ExclusiveAddressUse As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ExclusiveAddressUse { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ExclusiveAddressUse : bool with get, set" Usage="System.Net.Sockets.TcpListener.ExclusiveAddressUse" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia <see cref="T:System.Boolean" /> wartość określająca, czy <see cref="T:System.Net.Sockets.TcpListener" /> zezwala na tylko jeden podstawowy gniazda do nasłuchiwania na konkretnym porcie.</summary>
        <value>
          <see langword="true" /> Jeśli <see cref="T:System.Net.Sockets.TcpListener" /> zezwala na tylko jeden <see cref="T:System.Net.Sockets.TcpListener" /> do nasłuchiwania na konkretnym porcie; w przeciwnym razie <see langword="false" />. . Wartość domyślna to <see langword="true" /> dla systemu Windows Server 2003 i Windows XP z dodatkiem Service Pack 2 lub nowszą wersją, a <see langword="false" /> dla wszystkich innych wersji.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślnie wiele odbiorników może nasłuchiwać na określonym porcie. Jednak tylko jeden odbiorniki mogą wykonywać operacje na ruch sieciowy, wysyłane do portu. Jeśli więcej niż jeden odbiornik próbuje powiązać z określonego portu, z bardziej określonego adresu IP obsługuje ruch sieciowy, wysyłane do tego portu. Możesz użyć <xref:System.Net.Sockets.Socket.ExclusiveAddressUse%2A> właściwości, aby uniemożliwić wiele odbiorników nasłuchiwania na konkretnym porcie.  
  
 Ustaw tę właściwość, przed wywołaniem <xref:System.Net.Sockets.TcpListener.Start%2A>, lub zadzwoń <xref:System.Net.Sockets.TcpListener.Stop%2A> metody i ustaw dla tej właściwości.  
  
   
  
## Examples  
 Poniższy przykładowy kod pobiera i ustawia <xref:System.Net.Sockets.TcpListener.ExclusiveAddressUse%2A> właściwości.  
  
 [!code-cpp[System.Net.Sockets.TcpListener1#2](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/cpp/tcpserver.cpp#2)]
 [!code-csharp[System.Net.Sockets.TcpListener1#2](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/CS/tcpserver.cs#2)]
 [!code-vb[System.Net.Sockets.TcpListener1#2](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/VB/tcpserver.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <see cref="T:System.Net.Sockets.TcpListener" /> Została uruchomiona. Wywołaj <see cref="M:System.Net.Sockets.TcpListener.Stop" /> metody, a następnie ustaw <see cref="P:System.Net.Sockets.Socket.ExclusiveAddressUse" /> właściwości.</exception>
        <exception cref="T:System.Net.Sockets.SocketException">Wystąpił błąd podczas próby uzyskania dostępu bazowego gniazda.</exception>
        <exception cref="T:System.ObjectDisposedException">Podstawowe <see cref="T:System.Net.Sockets.Socket" /> zostało zamknięte.</exception>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~TcpListener ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!TcpListener ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="tcpListener.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LocalEndpoint">
      <MemberSignature Language="C#" Value="public System.Net.EndPoint LocalEndpoint { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.EndPoint LocalEndpoint" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.TcpListener.LocalEndpoint" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LocalEndpoint As EndPoint" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::EndPoint ^ LocalEndpoint { System::Net::EndPoint ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LocalEndpoint : System.Net.EndPoint" Usage="System.Net.Sockets.TcpListener.LocalEndpoint" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.EndPoint</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera podstawowe <see cref="T:System.Net.EndPoint" /> bieżącego <see cref="T:System.Net.Sockets.TcpListener" />.</summary>
        <value>
          <see cref="T:System.Net.EndPoint" /> Do której <see cref="T:System.Net.Sockets.Socket" /> jest powiązany.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Możesz użyć <xref:System.Net.Sockets.TcpListener.LocalEndpoint%2A> właściwość do identyfikacji sieci lokalnej interfejsu i numer portu używany do nasłuchiwania żądań przychodzących połączeń klienta, po nawiązaniu połączenia gniazda. Należy to najpierw rzutować <xref:System.Net.EndPoint> do <xref:System.Net.IPEndPoint>. Następnie możesz wywołać <xref:System.Net.IPEndPoint.Address%2A?displayProperty=nameWithType> właściwość służąca do pobierania lokalny adres IP i <xref:System.Net.IPEndPoint.Port%2A?displayProperty=nameWithType> właściwość służąca do pobierania numer portu lokalnego.  
  
   
  
## Examples  
 Poniższy przykład kodu wyświetla lokalnego adresu IP adres i numer portu, na którym <xref:System.Net.Sockets.TcpListener> nasłuchuje przychodzących żądań połączenia.  
  
 [!code-cpp[TcpListener_Pending_LocalEndPoint#1](~/samples/snippets/cpp/VS_Snippets_Remoting/TcpListener_Pending_LocalEndPoint/CPP/source.cpp#1)]
 [!code-csharp[TcpListener_Pending_LocalEndPoint#1](~/samples/snippets/csharp/VS_Snippets_Remoting/TcpListener_Pending_LocalEndPoint/CS/source.cs#1)]
 [!code-vb[TcpListener_Pending_LocalEndPoint#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/TcpListener_Pending_LocalEndPoint/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />
        <altmember cref="T:System.Net.EndPoint" />
      </Docs>
    </Member>
    <Member MemberName="Pending">
      <MemberSignature Language="C#" Value="public bool Pending ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Pending() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.Pending" />
      <MemberSignature Language="VB.NET" Value="Public Function Pending () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Pending();" />
      <MemberSignature Language="F#" Value="member this.Pending : unit -&gt; bool" Usage="tcpListener.Pending " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Określa, czy żądania oczekujące połączenia.</summary>
        <returns>
          <see langword="true" /> w przypadku oczekujących połączenia; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda nieblokującej na poziomie określa, czy wszystkie żądania oczekujące połączenie. Ponieważ <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> i <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> metody Blokuj wykonywanie aż do <xref:System.Net.Sockets.TcpListener.Start%2A> metoda zostało w kolejce żądań połączenia przychodzących, <xref:System.Net.Sockets.TcpListener.Pending%2A> metody można sprawdzić, czy połączenia są dostępne, przed podjęciem próby je zaakceptować.  
  
   
  
## Examples  
 Poniższy kod przykładowy kontroli <xref:System.Net.Sockets.TcpListener.Pending%2A> metody. Jeśli żądanie połączenia jest oczekuje na zatwierdzenie, następnie wywołania <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> wykonano metody.  
  
 [!code-cpp[TcpListener_Pending_LocalEndPoint#1](~/samples/snippets/cpp/VS_Snippets_Remoting/TcpListener_Pending_LocalEndPoint/CPP/source.cpp#1)]
 [!code-csharp[TcpListener_Pending_LocalEndPoint#1](~/samples/snippets/csharp/VS_Snippets_Remoting/TcpListener_Pending_LocalEndPoint/CS/source.cs#1)]
 [!code-vb[TcpListener_Pending_LocalEndPoint#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/TcpListener_Pending_LocalEndPoint/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Odbiornik nie został uruchomiony z wywołaniem <see cref="M:System.Net.Sockets.TcpListener.Start" />.</exception>
        <altmember cref="M:System.Net.Sockets.TcpListener.Start" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptSocket" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptTcpClient" />
      </Docs>
    </Member>
    <Member MemberName="Server">
      <MemberSignature Language="C#" Value="public System.Net.Sockets.Socket Server { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.Sockets.Socket Server" />
      <MemberSignature Language="DocId" Value="P:System.Net.Sockets.TcpListener.Server" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Server As Socket" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Sockets::Socket ^ Server { System::Net::Sockets::Socket ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Server : System.Net.Sockets.Socket" Usage="System.Net.Sockets.TcpListener.Server" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.Sockets.Socket</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera odnośnej sieci <see cref="T:System.Net.Sockets.Socket" />.</summary>
        <value>Podstawowe <see cref="T:System.Net.Sockets.Socket" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.TcpListener> Tworzy <xref:System.Net.Sockets.Socket> nasłuchiwanie przychodzących żądań połączeń klientów. Klasy wywodzące się z <xref:System.Net.Sockets.TcpListener> można użyć tej właściwości w celu rozwiązania tego <xref:System.Net.Sockets.Socket>. Używają bazowej <xref:System.Net.Sockets.Socket> zwrócone przez <xref:System.Net.Sockets.TcpListener.Server%2A> właściwość, jeśli potrzebujesz dostępu poza tym, które <xref:System.Net.Sockets.TcpListener> udostępnia.  
  
> [!NOTE]
>  <xref:System.Net.Sockets.TcpListener.Server%2A> Zwraca tylko właściwości <xref:System.Net.Sockets.Socket> używane do nasłuchiwania żądań przychodzących połączeń klienta. Użyj <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> metodę, aby zaakceptować żądanie połączenia oczekujące i uzyskać <xref:System.Net.Sockets.Socket> do wysyłania i odbierania danych. Można również użyć <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> metodę, aby zaakceptować żądanie połączenia oczekujące i uzyskać <xref:System.Net.Sockets.TcpClient> do wysyłania i odbierania danych.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje użycie <xref:System.Net.Sockets.TcpListener.Server%2A> właściwości. Podstawowe <xref:System.Net.Sockets.Socket> są pobierane i <xref:System.Net.Sockets.SocketOptionName.Linger> <xref:System.Net.Sockets.Socket> opcja jest skonfigurowana przekroczy limit czasu po 10 sekundach, jeśli dane pozostają nadal w buforze sieciowego po zamknięciu połączenia.  
  
 [!code-csharp[TcpListenerProtectedMembers1#1](~/samples/snippets/csharp/VS_Snippets_Remoting/TcpListenerProtectedMembers1/CS/source.cs#1)]
 [!code-vb[TcpListenerProtectedMembers1#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/TcpListenerProtectedMembers1/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.Sockets.Socket" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptSocket" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptTcpClient" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Start">
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Rozpoczyna nasłuchiwanie przychodzących żądań połączenia.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.Start" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start();" />
      <MemberSignature Language="F#" Value="member this.Start : unit -&gt; unit" Usage="tcpListener.Start " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Rozpoczyna nasłuchiwanie przychodzących żądań połączenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.TcpListener.Start%2A> Metoda inicjuje, podstawowych <xref:System.Net.Sockets.Socket>wiąże ją do punktu końcowego w lokalnych i nasłuchuje przychodzących prób nawiązania połączenia. Jeśli żądanie połączenia zostanie odebrana, <xref:System.Net.Sockets.TcpListener.Start%2A> metoda będzie żądania w kolejce i Kontynuuj, nasłuchiwać żądań dodatkowych, dopóki nie zostanie wywołana <xref:System.Net.Sockets.TcpListener.Stop%2A> metody. Jeśli <xref:System.Net.Sockets.TcpListener> odbiera żądanie połączenia po zostało już w kolejce maksymalną liczbę połączeń, spowoduje zgłoszenie <xref:System.Net.Sockets.SocketException> na komputerze klienckim.  
  
 Aby usunąć połączenie z kolejki połączeń przychodzących, należy użyć <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> metody lub <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> metody. <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> Metoda spowoduje usunięcie połączenia z kolejki i zwróć <xref:System.Net.Sockets.TcpClient> służącego do wysyłania i odbierania danych. <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> Metoda zwróci <xref:System.Net.Sockets.Socket> użyć to samo. Jeśli aplikacja wymaga tylko synchroniczne operacje We/Wy, użyj <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>. Aby uzyskać bardziej szczegółową kontrolę zachowania, używać <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A>. Obie te metody blokuje, dopóki żądanie połączenia jest dostępny w kolejce.  
  
 Użyj <xref:System.Net.Sockets.TcpListener.Stop%2A> metodę, aby zamknąć <xref:System.Net.Sockets.TcpListener> i przestawaj słuchać. Odpowiedzialność za zamykanie akceptowane połączenia oddzielnie.  
  
> [!NOTE]
>  Ten element członkowski generuje informacje ze śledzenia pod warunkiem włączenia funkcji śledzenia sieci w aplikacji. Aby uzyskać więcej informacji, zobacz [Śledzenie sieci w programie .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje sposób <xref:System.Net.Sockets.TcpListener.Start%2A> służy do nasłuchiwania przychodzących próby połączenia klienta.  
  
 [!code-cpp[System.Net.Sockets.TcpListener1#3](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/cpp/tcpserver.cpp#3)]
 [!code-csharp[System.Net.Sockets.TcpListener1#3](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/CS/tcpserver.cs#3)]
 [!code-vb[System.Net.Sockets.TcpListener1#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/VB/tcpserver.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">Użyj <see cref="P:System.Net.Sockets.SocketException.ErrorCode" /> właściwości, aby uzyskać kod błędu. Po otrzymaniu tego kodu, możesz zapoznać się z <see href="/windows/desktop/winsock/windows-sockets-error-codes-2">kod błędu API Windows Sockets w wersji 2</see> dokumentacji, aby uzyskać szczegółowy opis błędu.</exception>
        <altmember cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />
        <altmember cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptTcpClient" />
        <altmember cref="M:System.Net.Sockets.TcpListener.Stop" />
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start (int backlog);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start(int32 backlog) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.Start(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start (backlog As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start(int backlog);" />
      <MemberSignature Language="F#" Value="member this.Start : int -&gt; unit" Usage="tcpListener.Start backlog" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="backlog" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="backlog">Maksymalna długość kolejki oczekiwania połączenia.</param>
        <summary>Rozpoczyna nasłuchiwanie przychodzących żądań połączenia z maksymalną liczbę oczekujących połączeń.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.TcpListener.Start%2A> Metoda inicjuje, podstawowych <xref:System.Net.Sockets.Socket>wiąże ją do punktu końcowego w lokalnych i nasłuchuje przychodzących prób nawiązania połączenia. Jeśli żądanie połączenia zostanie odebrana, <xref:System.Net.Sockets.TcpListener.Start%2A> będzie żądania w kolejce i kontynuować nasłuchiwanie żądań dodatkowych, dopóki nie zostanie wywołana <xref:System.Net.Sockets.TcpListener.Stop%2A> metody. Jeśli <xref:System.Net.Sockets.TcpListener> odbiera żądanie połączenia po już zostało w kolejce maksymalną liczbę połączeń, które będzie zgłaszać wyjątek <xref:System.Net.Sockets.SocketException> na komputerze klienckim.  
  
 Aby usunąć połączenie z kolejki połączeń przychodzących, należy użyć <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> metody lub <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> metody. <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A> Metoda spowoduje usunięcie połączenia z kolejki i zwróć <xref:System.Net.Sockets.TcpClient> służącego do wysyłania i odbierania danych. <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> Metoda zwróci <xref:System.Net.Sockets.Socket> użyć to samo. Jeśli aplikacja wymaga tylko synchroniczne operacje We/Wy, użyj <xref:System.Net.Sockets.TcpListener.AcceptTcpClient%2A>. Aby uzyskać bardziej szczegółową kontrolę zachowania, używać <xref:System.Net.Sockets.TcpListener.AcceptSocket%2A> metody. Obie te metody blokuje, dopóki żądanie połączenia jest dostępny w kolejce.  
  
 Użyj <xref:System.Net.Sockets.TcpListener.Stop%2A> metodę, aby zamknąć <xref:System.Net.Sockets.TcpListener> i przestawaj słuchać. Odpowiedzialność za zamykanie akceptowane połączenia oddzielnie.  
  
> [!NOTE]
>  Użyj <xref:System.Net.Sockets.SocketException.ErrorCode%2A?displayProperty=nameWithType> właściwość, aby uzyskać kod błędu i odnoszą się do dokumentacji kodów błędów systemu Windows Sockets w wersji 2 interfejsu API w bibliotece MSDN pod [ http://msdn.microsoft.com/library/ ](https://msdn.microsoft.com/library/) szczegółowy opis błędu.  
  
> [!NOTE]
>  Ten element członkowski generuje informacje ze śledzenia pod warunkiem włączenia funkcji śledzenia sieci w aplikacji. Aby uzyskać więcej informacji, zobacz [Śledzenie sieci w programie .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje sposób <xref:System.Net.Sockets.TcpListener.Start%2A> służy do nasłuchiwania przychodzących próby połączenia klienta.  
  
 [!code-cpp[System.Net.Sockets.TcpListener1#3](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/cpp/tcpserver.cpp#3)]
 [!code-csharp[System.Net.Sockets.TcpListener1#3](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/CS/tcpserver.cs#3)]
 [!code-vb[System.Net.Sockets.TcpListener1#3](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener1/VB/tcpserver.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">Wystąpił błąd podczas uzyskiwania dostępu do gniazda.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="backlog" /> Parametr jest mniejsza od zera lub przekracza maksymalną liczbę dozwolonych połączeń.</exception>
        <exception cref="T:System.InvalidOperationException">Podstawowe <see cref="T:System.Net.Sockets.Socket" /> ma wartość null.</exception>
        <altmember cref="M:System.Net.Sockets.Socket.Listen(System.Int32)" />
        <altmember cref="M:System.Net.Sockets.Socket.Bind(System.Net.EndPoint)" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptTcpClient" />
        <altmember cref="M:System.Net.Sockets.TcpListener.AcceptSocket" />
        <altmember cref="M:System.Net.Sockets.TcpListener.Stop" />
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Net.Sockets.TcpListener.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberSignature Language="F#" Value="member this.Stop : unit -&gt; unit" Usage="tcpListener.Stop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Net.Sockets</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zamyka odbiornik.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Net.Sockets.TcpListener.Stop%2A> Zamyka odbiornik. Wszelkie żądania połączenia niezaakceptowanych w kolejce zostaną utracone. Zgłosi hostom zdalnym oczekiwania na połączenie można zaakceptować <xref:System.Net.Sockets.SocketException>. Odpowiedzialność za zamykanie akceptowane połączenia oddzielnie.  
  
> [!NOTE]
>  Ten element członkowski generuje informacje ze śledzenia pod warunkiem włączenia funkcji śledzenia sieci w aplikacji. Aby uzyskać więcej informacji, zobacz [Śledzenie sieci w programie .NET Framework](~/docs/framework/network-programming/network-tracing.md).  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje sposób użycia <xref:System.Net.Sockets.TcpListener.Stop%2A> metodę, aby zamknąć bazowego <xref:System.Net.Sockets.Socket>.  
  
 [!code-cpp[System.Net.Sockets.TcpListener#1](~/samples/snippets/cpp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener/CPP/tcpserver.cpp#1)]
 [!code-csharp[System.Net.Sockets.TcpListener#1](~/samples/snippets/csharp/VS_Snippets_Remoting/System.Net.Sockets.TcpListener/CS/tcpserver.cs#1)]
 [!code-vb[System.Net.Sockets.TcpListener#1](~/samples/snippets/visualbasic/VS_Snippets_Remoting/System.Net.Sockets.TcpListener/VB/tcpserver.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Net.Sockets.SocketException">Użyj <see cref="P:System.Net.Sockets.SocketException.ErrorCode" /> właściwości, aby uzyskać kod błędu. Po otrzymaniu tego kodu, możesz zapoznać się z <see href="/windows/desktop/winsock/windows-sockets-error-codes-2">kod błędu API Windows Sockets w wersji 2</see> dokumentacji, aby uzyskać szczegółowy opis błędu.</exception>
        <block subset="none" type="usage">
          <para>
            <see cref="M:System.Net.Sockets.TcpListener.Stop" /> Metoda zamyka, podstawowe <see cref="T:System.Net.Sockets.Socket" />i tworzy nowy <see cref="T:System.Net.Sockets.Socket" /> dla <see cref="T:System.Net.Sockets.TcpListener" />. Jeśli ustawisz wszystkie właściwości w podstawowych <see cref="T:System.Net.Sockets.Socket" /> przed wywołaniem <see cref="M:System.Net.Sockets.TcpListener.Stop" /> metody te właściwości nie przeniosą się do nowego <see cref="T:System.Net.Sockets.Socket" />.</para>
        </block>
        <altmember cref="M:System.Net.Sockets.Socket.Close" />
      </Docs>
    </Member>
  </Members>
</Type>