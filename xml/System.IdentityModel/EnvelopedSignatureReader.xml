<Type Name="EnvelopedSignatureReader" FullName="System.IdentityModel.EnvelopedSignatureReader">
  <Metadata><Meta Name="ms.openlocfilehash" Value="1f6a5f12d13d96288c903db28dd23d06a0d29c8d" /><Meta Name="ms.sourcegitcommit" Value="9dda17222b9f7d3edf130133bfb1370d5b410a4b" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="09/22/2018" /><Meta Name="ms.locfileid" Value="46655426" /></Metadata><TypeSignature Language="C#" Value="public sealed class EnvelopedSignatureReader : System.IdentityModel.DelegatingXmlDictionaryReader" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit EnvelopedSignatureReader extends System.IdentityModel.DelegatingXmlDictionaryReader" />
  <TypeSignature Language="DocId" Value="T:System.IdentityModel.EnvelopedSignatureReader" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class EnvelopedSignatureReader&#xA;Inherits DelegatingXmlDictionaryReader" />
  <TypeSignature Language="C++ CLI" Value="public ref class EnvelopedSignatureReader sealed : System::IdentityModel::DelegatingXmlDictionaryReader" />
  <TypeSignature Language="F#" Value="type EnvelopedSignatureReader = class&#xA;    inherit DelegatingXmlDictionaryReader" />
  <AssemblyInfo>
    <AssemblyName>System.IdentityModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.IdentityModel.DelegatingXmlDictionaryReader</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Opakowuje czytnik jest wskazywane opakowany XML podpisem zapewnienie reader, który może służyć do odczytu zawartości bez konieczności przetwarzania podpis. Podpis jest automatycznie weryfikowana, po ostatnim elemencie koperty jest do odczytu. Klasa ta nie może być dziedziczona.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.IdentityModel.EnvelopedSignatureReader" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EnvelopedSignatureReader (System.Xml.XmlReader reader, System.IdentityModel.Selectors.SecurityTokenSerializer securityTokenSerializer);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.XmlReader reader, class System.IdentityModel.Selectors.SecurityTokenSerializer securityTokenSerializer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.EnvelopedSignatureReader.#ctor(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenSerializer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EnvelopedSignatureReader(System::Xml::XmlReader ^ reader, System::IdentityModel::Selectors::SecurityTokenSerializer ^ securityTokenSerializer);" />
      <MemberSignature Language="F#" Value="new System.IdentityModel.EnvelopedSignatureReader : System.Xml.XmlReader * System.IdentityModel.Selectors.SecurityTokenSerializer -&gt; System.IdentityModel.EnvelopedSignatureReader" Usage="new System.IdentityModel.EnvelopedSignatureReader (reader, securityTokenSerializer)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
        <Parameter Name="securityTokenSerializer" Type="System.IdentityModel.Selectors.SecurityTokenSerializer" />
      </Parameters>
      <Docs>
        <param name="reader">Czytnik jest wskazywane opakowany znakiem XML.</param>
        <param name="securityTokenSerializer">Serializator tokenów, które ma być używany w celu wykonania deserializacji <see cref="T:System.Security.Cryptography.Xml.KeyInfo" /> podpisu.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.IdentityModel.EnvelopedSignatureReader" /> klasy przy użyciu określonego czytnika i Serializator tokenu zabezpieczeń.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IdentityModel.EnvelopedSignatureReader.%23ctor%28System.Xml.XmlReader%2CSystem.IdentityModel.Selectors.SecurityTokenSerializer%2CSystem.IdentityModel.Selectors.SecurityTokenResolver%2CSystem.Boolean%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType> Konstruktor jest wywoływany przy użyciu następujących parametrów:  
  
|Nazwa parametru|Wartość|  
|--------------------|-----------|  
|`signingTokenResolver`|`null`|  
|`requireSignature`|`true`|  
|`automaticallyReadSignature`|`true`|  
|`resolveIntrinsicSigningKeys`|`true`|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="reader" /> jest <see langword="null" />.  
  
—lub— 
 <paramref name="securityTokenSerializer" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EnvelopedSignatureReader (System.Xml.XmlReader reader, System.IdentityModel.Selectors.SecurityTokenSerializer securityTokenSerializer, System.IdentityModel.Selectors.SecurityTokenResolver signingTokenResolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.XmlReader reader, class System.IdentityModel.Selectors.SecurityTokenSerializer securityTokenSerializer, class System.IdentityModel.Selectors.SecurityTokenResolver signingTokenResolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.EnvelopedSignatureReader.#ctor(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenSerializer,System.IdentityModel.Selectors.SecurityTokenResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EnvelopedSignatureReader(System::Xml::XmlReader ^ reader, System::IdentityModel::Selectors::SecurityTokenSerializer ^ securityTokenSerializer, System::IdentityModel::Selectors::SecurityTokenResolver ^ signingTokenResolver);" />
      <MemberSignature Language="F#" Value="new System.IdentityModel.EnvelopedSignatureReader : System.Xml.XmlReader * System.IdentityModel.Selectors.SecurityTokenSerializer * System.IdentityModel.Selectors.SecurityTokenResolver -&gt; System.IdentityModel.EnvelopedSignatureReader" Usage="new System.IdentityModel.EnvelopedSignatureReader (reader, securityTokenSerializer, signingTokenResolver)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
        <Parameter Name="securityTokenSerializer" Type="System.IdentityModel.Selectors.SecurityTokenSerializer" />
        <Parameter Name="signingTokenResolver" Type="System.IdentityModel.Selectors.SecurityTokenResolver" />
      </Parameters>
      <Docs>
        <param name="reader">Czytnik jest wskazywane opakowany znakiem XML.</param>
        <param name="securityTokenSerializer">Serializator tokenów, które ma być używany w celu wykonania deserializacji <see cref="T:System.Security.Cryptography.Xml.KeyInfo" /> podpisu.</param>
        <param name="signingTokenResolver">Program rozpoznawania tokenów ma być używany do rozwiązania podpisywania tokenu. <see langword="null" /> Określa, że powinny być używane domyślne rozpoznawania tokenu zabezpieczeń.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.IdentityModel.EnvelopedSignatureReader" /> klasy przy użyciu określonego czytnika, Serializator tokenów zabezpieczeń i program rozpoznawania tokenów.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.IdentityModel.EnvelopedSignatureReader.%23ctor%28System.Xml.XmlReader%2CSystem.IdentityModel.Selectors.SecurityTokenSerializer%2CSystem.IdentityModel.Selectors.SecurityTokenResolver%2CSystem.Boolean%2CSystem.Boolean%2CSystem.Boolean%29?displayProperty=nameWithType> Konstruktor jest wywoływany przy użyciu następujących parametrów:  
  
|Nazwa parametru|Wartość|  
|--------------------|-----------|  
|`requireSignature`|`true`|  
|`automaticallyReadSignature`|`true`|  
|`resolveIntrinsicSigningKeys`|`true`|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="reader" /> jest <see langword="null" />.  
  
—lub— 
 <paramref name="securityTokenSerializer" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public EnvelopedSignatureReader (System.Xml.XmlReader reader, System.IdentityModel.Selectors.SecurityTokenSerializer securityTokenSerializer, System.IdentityModel.Selectors.SecurityTokenResolver signingTokenResolver, bool requireSignature, bool automaticallyReadSignature, bool resolveIntrinsicSigningKeys);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.XmlReader reader, class System.IdentityModel.Selectors.SecurityTokenSerializer securityTokenSerializer, class System.IdentityModel.Selectors.SecurityTokenResolver signingTokenResolver, bool requireSignature, bool automaticallyReadSignature, bool resolveIntrinsicSigningKeys) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.EnvelopedSignatureReader.#ctor(System.Xml.XmlReader,System.IdentityModel.Selectors.SecurityTokenSerializer,System.IdentityModel.Selectors.SecurityTokenResolver,System.Boolean,System.Boolean,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; EnvelopedSignatureReader(System::Xml::XmlReader ^ reader, System::IdentityModel::Selectors::SecurityTokenSerializer ^ securityTokenSerializer, System::IdentityModel::Selectors::SecurityTokenResolver ^ signingTokenResolver, bool requireSignature, bool automaticallyReadSignature, bool resolveIntrinsicSigningKeys);" />
      <MemberSignature Language="F#" Value="new System.IdentityModel.EnvelopedSignatureReader : System.Xml.XmlReader * System.IdentityModel.Selectors.SecurityTokenSerializer * System.IdentityModel.Selectors.SecurityTokenResolver * bool * bool * bool -&gt; System.IdentityModel.EnvelopedSignatureReader" Usage="new System.IdentityModel.EnvelopedSignatureReader (reader, securityTokenSerializer, signingTokenResolver, requireSignature, automaticallyReadSignature, resolveIntrinsicSigningKeys)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
        <Parameter Name="securityTokenSerializer" Type="System.IdentityModel.Selectors.SecurityTokenSerializer" />
        <Parameter Name="signingTokenResolver" Type="System.IdentityModel.Selectors.SecurityTokenResolver" />
        <Parameter Name="requireSignature" Type="System.Boolean" />
        <Parameter Name="automaticallyReadSignature" Type="System.Boolean" />
        <Parameter Name="resolveIntrinsicSigningKeys" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="reader">Czytnik jest wskazywane opakowany znakiem XML.</param>
        <param name="securityTokenSerializer">Serializator tokenów, które ma być używany w celu wykonania deserializacji <see cref="T:System.Security.Cryptography.Xml.KeyInfo" /> podpisu.</param>
        <param name="signingTokenResolver">Program rozpoznawania tokenów ma być używany do rozwiązania podpisywania tokenu. <see langword="null" /> Określa, że powinny być używane domyślne rozpoznawania tokenu zabezpieczeń.</param>
        <param name="requireSignature"><see langword="true" /> Jeśli podpis jest wymagana. w przeciwnym razie <see langword="false" />.</param>
        <param name="automaticallyReadSignature"><see langword="true" /> Jeśli podpis powinny być odczytywane; w przeciwnym razie <see langword="false" />.</param>
        <param name="resolveIntrinsicSigningKeys"><see langword="true" /> Jeśli mają zostać rozwiązane wewnętrzne klucze podpisywania; w przeciwnym razie <see langword="false" />.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.IdentityModel.EnvelopedSignatureReader" /> przy użyciu określonego czytnika, Serializator tokenu zabezpieczeń, program rozpoznawania tokenów i zachowanie.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="reader" /> jest <see langword="null" />.  
  
—lub— 
 <paramref name="securityTokenSerializer" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.EnvelopedSignatureReader.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="envelopedSignatureReader.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public override bool Read ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Read() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.EnvelopedSignatureReader.Read" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Read () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Read();" />
      <MemberSignature Language="F#" Value="override this.Read : unit -&gt; bool" Usage="envelopedSignatureReader.Read " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Odczytuje następny węzeł ze strumienia.</summary>
        <returns><see langword="true" /> Jeśli następny węzeł został odczytany pomyślnie; <see langword="false" /> Jeśli nie ma żadnych więcej węzłów.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sprawdza, czy zostanie osiągnięty koniec koperty i weryfikuje podpis, jeśli `requireSignature` określono parametr `true` w konstruktorze. Jeśli czytnik pobiera umieszczony na `<Signature>` elementu całego podpisu mogą być odczytywane w przypadku `automaticallyReadSignature` określono parametr `true` w konstruktorze.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SigningCredentials">
      <MemberSignature Language="C#" Value="public System.IdentityModel.Tokens.SigningCredentials SigningCredentials { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IdentityModel.Tokens.SigningCredentials SigningCredentials" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.EnvelopedSignatureReader.SigningCredentials" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SigningCredentials As SigningCredentials" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IdentityModel::Tokens::SigningCredentials ^ SigningCredentials { System::IdentityModel::Tokens::SigningCredentials ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SigningCredentials : System.IdentityModel.Tokens.SigningCredentials" Usage="System.IdentityModel.EnvelopedSignatureReader.SigningCredentials" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.SigningCredentials</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera poświadczenia podpisywania, które są używane w podpisie, po koperty jest używany, a podczas weryfikowania podpisu.</summary>
        <value>Poświadczenia podpisywania.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryReadSignature">
      <MemberSignature Language="C#" Value="public bool TryReadSignature ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryReadSignature() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.EnvelopedSignatureReader.TryReadSignature" />
      <MemberSignature Language="VB.NET" Value="Public Function TryReadSignature () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryReadSignature();" />
      <MemberSignature Language="F#" Value="member this.TryReadSignature : unit -&gt; bool" Usage="envelopedSignatureReader.TryReadSignature " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Odczytuje podpisu, jeśli czytnik aktualnie znajduje się w <see langword="&lt;Signature&gt;" /> elementu.</summary>
        <returns><see langword="true" /> Jeśli pomyślnie odczytano podpis; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli czytnik aktualnie jest umieszczony na `<Signature>` wywołuje element <xref:System.IdentityModel.EnvelopedSignatureReader.Read%2A> metodę w celu odczytania podpis.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>