<Type Name="SecurityTokenService" FullName="System.IdentityModel.SecurityTokenService">
  <Metadata><Meta Name="ms.openlocfilehash" Value="098f090025956013bb455121d70f70fe58204a7d" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69118679" /></Metadata><TypeSignature Language="C#" Value="public abstract class SecurityTokenService" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit SecurityTokenService extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.IdentityModel.SecurityTokenService" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class SecurityTokenService" />
  <TypeSignature Language="C++ CLI" Value="public ref class SecurityTokenService abstract" />
  <TypeSignature Language="F#" Value="type SecurityTokenService = class" />
  <AssemblyInfo>
    <AssemblyName>System.IdentityModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Abstrakcyjna klasa bazowa, która definiuje właściwości i metody usługi tokenu zabezpieczającego (STS).</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby utworzyć usługę STS, musisz pochodzić od <xref:System.IdentityModel.SecurityTokenService> klasy. W klasie niestandardowej musisz co najmniej zastąpić <xref:System.IdentityModel.SecurityTokenService.GetScope%2A> metody i. <xref:System.IdentityModel.SecurityTokenService.GetOutputClaimsIdentity%2A> W przypadku tych zastąpień usługa STS utworzona przy użyciu domyślnej implementacji wszystkich innych metod zdefiniowanych w klasie jest w stanie wystawiać tokeny zabezpieczające w odpowiedzi na żądania tokenów zabezpieczających (RST). Oznacza to, że jest zaimplementowane powiązanie problemu zdefiniowane w specyfikacji WS-Trust. To powiązanie jest zaimplementowane w <xref:System.IdentityModel.SecurityTokenService.Issue%2A> metodzie. Żadne inne powiązania WS-Trust (Odnów, Anuluj i sprawdź poprawność) nie są implementowane w domyślnym przypadku, a obiekt wywołujący jest zwracany przez parametr RST, który odpowiada jednemu z tych powiązań. Można oczywiście zastąpić odpowiednie metody (<xref:System.IdentityModel.SecurityTokenService.Renew%2A>, <xref:System.IdentityModel.SecurityTokenService.Cancel%2A>i <xref:System.IdentityModel.SecurityTokenService.Validate%2A>), aby zaimplementować te powiązania w usłudze STS.  
  
> [!IMPORTANT]
>  Zaimplementowanie usługi STS gotowej do produkcji wiąże się z starannym planowaniem i znaczną ilość zasobów, aby ograniczyć potencjalne zagrożenia bezpieczeństwa związane z ujawnianiem takich usług. Większość deweloperów korzystających z programu Windows Identity Foundation (WIF) będzie opracowywać aplikacje, które umożliwiają zarządzanie tożsamościami w usłudze STS, a nie opracowywanie samej usługi STS. WIF udostępnia rozszerzenie programu Visual Studio, narzędzie do identyfikacji i dostępu dla programu Visual Studio 2012, aby ułatwić deweloperom testowanie rozwiązań w środowisku deweloperskim. To narzędzie obejmuje usługę STS `LocalSTS`, którą można skonfigurować w taki sposób, aby obsługiwała określone oświadczenia dla opracowywanej aplikacji. Aby uzyskać więcej informacji na temat narzędzia tożsamości i dostępu, zobacz [Narzędzie tożsamości i dostępu dla programu Visual Studio 2012](~/docs/framework/security/identity-and-access-tool-for-vs.md). W niektórych scenariuszach program `LocalSTS` może nie zapewniać funkcjonalności niezbędnej do odpowiedniego przetestowania aplikacji, na przykład w scenariuszu, który obejmuje tworzenie niestandardowego programu obsługi tokenów do użycia przez aplikację. W takich przypadkach można <xref:System.IdentityModel.SecurityTokenService> utworzyć co najmniej jeden prosty usług STS, który można wdrożyć w środowisku deweloperskim, i który może służyć do testowania takich funkcji w aplikacji. Pozostała część tej sekcji koncentruje się na metodach <xref:System.IdentityModel.SecurityTokenService> ujawnionych przez klasę, które umożliwiają wdrożenie prostej usługi STS i przeprowadzenie potoku wystawiania tokenów.  
  
 Poniższa lista zawiera krótkie omówienie metod głównych znaczenia dla deweloperów do użycia w środowisku testowym lub programistycznym.  
  
-   <xref:System.IdentityModel.SecurityTokenService.GetScope%2A> Metoda. Ta metoda zwraca <xref:System.IdentityModel.Scope> obiekt, który zawiera informacje o RP. Ten obiekt jest używany w pozostałej części potoku wystawiania tokenów i zawiera informacje o poświadczeniach podpisywania i szyfrowania do użycia w odpowiedzi, a także `AppliesTo` adresy `ReplyTo` i (jeśli są wymagane). Należy zastąpić tę metodę.  
  
-   <xref:System.IdentityModel.SecurityTokenService.GetOutputClaimsIdentity%2A> Metoda. Ta metoda zwraca <xref:System.Security.Claims.ClaimsIdentity> obiekt, który zawiera oświadczenia do zwrócenia do jednostki uzależnionej. Należy zastąpić tę metodę.  
  
-   <xref:System.IdentityModel.SecurityTokenService.Issue%2A> Metoda. Ta metoda implementuje potok żądania tokenu, który przetwarza żądanie przychodzącego tokenu zabezpieczającego (RST) i zwraca odpowiedź (RSTR) do obiektu wywołującego, który zawiera token, którego można użyć do uwierzytelniania za pomocą jednostki UZALEŻNIONej. Wiele innych metod zdefiniowanych w <xref:System.IdentityModel.SecurityTokenService> klasie są wywoływane z tej metody, w <xref:System.IdentityModel.SecurityTokenService.GetScope%2A> tym metod i <xref:System.IdentityModel.SecurityTokenService.GetOutputClaimsIdentity%2A> . Nie jest konieczne przesłonięcie tej metody, ale zrozumienie potoku żądania tokenu może być przydatne.  
  
 Usługa STS jest konfigurowana za pomocą <xref:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration> klasy.  
  
   
  
## Examples  
 Przykłady kodu, które są używane w <xref:System.IdentityModel.SecurityTokenService> tematach, są pobierane `Custom Token` z przykładu. Ten przykład zawiera klasy niestandardowe, które umożliwiają przetwarzanie prostych tokenów sieci Web (SWT) i obejmują implementację pasywnej usługi STS, która jest w stanie obsłużyć token SWT. Przykład sposobu implementacji aktywnej usługi STS można zobaczyć na `Federation Metadata` przykład. Aby uzyskać informacje o tych przykładach i innych przykładach dostępnych dla WIF i informacje o tym, gdzie je pobrać, zobacz [przykładowy indeks kodu WIF](~/docs/framework/security/wif-code-sample-index.md). Poniższy kod przedstawia implementację pasywnej usługi STS przy użyciu <xref:System.IdentityModel.SecurityTokenService> klasy.  
  
 [!code-csharp[WIFCustomTokenSTS#3](~/samples/snippets/csharp/VS_Snippets_Misc/wifcustomtokensts/cs/passivests/customsecuritytokenservice.cs#3)]  
  
 Poniższy kod pokazuje, jak wywołać niestandardową pasywną usługę STS, aby przetworzyć żądanie WS- <xref:System.IdentityModel.Services.FederatedPassiveSecurityTokenServiceOperations.ProcessRequest%28System.Web.HttpRequest%2CSystem.Security.Claims.ClaimsPrincipal%2CSystem.IdentityModel.SecurityTokenService%2CSystem.Web.HttpResponse%29?displayProperty=nameWithType> Federation przez wywołanie metody z kodu znajdującego się `default.aspx.cs` w pliku.  
  
 [!code-csharp[WIFCustomTokenSTS#1](~/samples/snippets/csharp/VS_Snippets_Misc/wifcustomtokensts/cs/passivests/default.aspx.cs#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>Należy zastępować <see cref="M:System.IdentityModel.SecurityTokenService.GetScope(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)" /> <see cref="M:System.IdentityModel.SecurityTokenService.GetOutputClaimsIdentity(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.IdentityModel.Scope)" /> metody i.</para></block>
    <altmember cref="T:System.IdentityModel.Scope" />
    <altmember cref="T:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration" />
    <altmember cref="T:System.IdentityModel.Services.FederatedPassiveSecurityTokenServiceOperations" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SecurityTokenService (System.IdentityModel.Configuration.SecurityTokenServiceConfiguration securityTokenServiceConfiguration);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.IdentityModel.Configuration.SecurityTokenServiceConfiguration securityTokenServiceConfiguration) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.SecurityTokenService.#ctor(System.IdentityModel.Configuration.SecurityTokenServiceConfiguration)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; SecurityTokenService(System::IdentityModel::Configuration::SecurityTokenServiceConfiguration ^ securityTokenServiceConfiguration);" />
      <MemberSignature Language="F#" Value="new System.IdentityModel.SecurityTokenService : System.IdentityModel.Configuration.SecurityTokenServiceConfiguration -&gt; System.IdentityModel.SecurityTokenService" Usage="new System.IdentityModel.SecurityTokenService securityTokenServiceConfiguration" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="securityTokenServiceConfiguration" Type="System.IdentityModel.Configuration.SecurityTokenServiceConfiguration" />
      </Parameters>
      <Docs>
        <param name="securityTokenServiceConfiguration">A <see cref="T:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration" /> , który zawiera ustawienia dla usługi STS.</param>
        <summary>Wywoływana z klas pochodnych w celu zainicjowania <see cref="T:System.IdentityModel.SecurityTokenService" /> klasy przy użyciu określonych ustawień konfiguracji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj tego konstruktora, aby zainicjować dostawcę zakresu i certyfikat wystawcy tokenów.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="securityTokenServiceConfiguration" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="BeginCancel">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginCancel (System.Security.Claims.ClaimsPrincipal principal, System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginCancel(class System.Security.Claims.ClaimsPrincipal principal, class System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.SecurityTokenService.BeginCancel(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function BeginCancel (principal As ClaimsPrincipal, request As RequestSecurityToken, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginCancel(System::Security::Claims::ClaimsPrincipal ^ principal, System::IdentityModel::Protocols::WSTrust::RequestSecurityToken ^ request, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginCancel : System.Security.Claims.ClaimsPrincipal * System.IdentityModel.Protocols.WSTrust.RequestSecurityToken * AsyncCallback * obj -&gt; IAsyncResult&#xA;override this.BeginCancel : System.Security.Claims.ClaimsPrincipal * System.IdentityModel.Protocols.WSTrust.RequestSecurityToken * AsyncCallback * obj -&gt; IAsyncResult" Usage="securityTokenService.BeginCancel (principal, request, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="principal" Type="System.Security.Claims.ClaimsPrincipal" />
        <Parameter Name="request" Type="System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="principal"><see cref="T:System.Security.Claims.ClaimsPrincipal" /> Reprezentuje tożsamość żądającego tokenu.</param>
        <param name="request"><see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> Reprezentuje żądanie tokenu zabezpieczającego. Obejmuje to komunikat żądania, a także inne informacje związane z klientem, takie jak kontekst autoryzacji.</param>
        <param name="callback"><see cref="T:System.AsyncCallback" /> Delegat, który odbiera powiadomienie o zakończeniu asynchronicznej operacji anulowania.</param>
        <param name="state">Obiekt, który zawiera informacje o stanie skojarzone z asynchroniczną operacją anulowania.</param>
        <summary>Gdy jest zastępowany w klasie pochodnej, rozpoczyna asynchroniczne żądanie anulowania WS-Trust.</summary>
        <returns><see cref="T:System.IAsyncResult" /> , Który odwołuje się do asynchronicznej operacji anulowania.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślna implementacja tej metody zgłasza <xref:System.IdentityModel.Protocols.WSTrust.InvalidRequestException>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginGetOutputClaimsIdentity">
      <MemberSignature Language="C#" Value="protected virtual IAsyncResult BeginGetOutputClaimsIdentity (System.Security.Claims.ClaimsPrincipal principal, System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request, System.IdentityModel.Scope scope, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.IAsyncResult BeginGetOutputClaimsIdentity(class System.Security.Claims.ClaimsPrincipal principal, class System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request, class System.IdentityModel.Scope scope, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.SecurityTokenService.BeginGetOutputClaimsIdentity(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.IdentityModel.Scope,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual IAsyncResult ^ BeginGetOutputClaimsIdentity(System::Security::Claims::ClaimsPrincipal ^ principal, System::IdentityModel::Protocols::WSTrust::RequestSecurityToken ^ request, System::IdentityModel::Scope ^ scope, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginGetOutputClaimsIdentity : System.Security.Claims.ClaimsPrincipal * System.IdentityModel.Protocols.WSTrust.RequestSecurityToken * System.IdentityModel.Scope * AsyncCallback * obj -&gt; IAsyncResult&#xA;override this.BeginGetOutputClaimsIdentity : System.Security.Claims.ClaimsPrincipal * System.IdentityModel.Protocols.WSTrust.RequestSecurityToken * System.IdentityModel.Scope * AsyncCallback * obj -&gt; IAsyncResult" Usage="securityTokenService.BeginGetOutputClaimsIdentity (principal, request, scope, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="principal" Type="System.Security.Claims.ClaimsPrincipal" />
        <Parameter Name="request" Type="System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" />
        <Parameter Name="scope" Type="System.IdentityModel.Scope" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="principal"><see cref="T:System.Security.Claims.ClaimsPrincipal" /> Reprezentuje tożsamość żądającego tokenu.</param>
        <param name="request"><see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> Reprezentuje żądanie tokenu zabezpieczającego. Obejmuje to komunikat żądania, a także inne informacje związane z klientem, takie jak kontekst autoryzacji.</param>
        <param name="scope"><see cref="T:System.IdentityModel.Scope" /> Zawiera informacje o jednostce uzależnionej skojarzonej z żądaniem.</param>
        <param name="callback"><see cref="T:System.AsyncCallback" /> Delegat, który odbiera powiadomienie o ukończeniu operacji asynchronicznej.</param>
        <param name="state">Obiekt, który zawiera informacje o stanie skojarzone z operacją asynchroniczną.</param>
        <summary>Gdy jest zastępowany w klasie pochodnej, rozpoczyna asynchroniczne wywołanie <see cref="M:System.IdentityModel.SecurityTokenService.GetOutputClaimsIdentity(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.IdentityModel.Scope)" /> metody.</summary>
        <returns><see cref="T:System.IAsyncResult" /> Odwołuje się do operacji asynchronicznej.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślna implementacja tej metody zgłasza <xref:System.NotImplementedException>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginGetScope">
      <MemberSignature Language="C#" Value="protected virtual IAsyncResult BeginGetScope (System.Security.Claims.ClaimsPrincipal principal, System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.IAsyncResult BeginGetScope(class System.Security.Claims.ClaimsPrincipal principal, class System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.SecurityTokenService.BeginGetScope(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function BeginGetScope (principal As ClaimsPrincipal, request As RequestSecurityToken, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual IAsyncResult ^ BeginGetScope(System::Security::Claims::ClaimsPrincipal ^ principal, System::IdentityModel::Protocols::WSTrust::RequestSecurityToken ^ request, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginGetScope : System.Security.Claims.ClaimsPrincipal * System.IdentityModel.Protocols.WSTrust.RequestSecurityToken * AsyncCallback * obj -&gt; IAsyncResult&#xA;override this.BeginGetScope : System.Security.Claims.ClaimsPrincipal * System.IdentityModel.Protocols.WSTrust.RequestSecurityToken * AsyncCallback * obj -&gt; IAsyncResult" Usage="securityTokenService.BeginGetScope (principal, request, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="principal" Type="System.Security.Claims.ClaimsPrincipal" />
        <Parameter Name="request" Type="System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="principal"><see cref="T:System.Security.Claims.ClaimsPrincipal" /> Reprezentuje tożsamość żądającego tokenu.</param>
        <param name="request"><see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> Reprezentuje żądanie tokenu zabezpieczającego. Obejmuje to komunikat żądania, a także inne informacje związane z klientem, takie jak kontekst autoryzacji.</param>
        <param name="callback"><see cref="T:System.AsyncCallback" /> Delegat, który odbiera powiadomienie o ukończeniu operacji asynchronicznej.</param>
        <param name="state">Obiekt, który zawiera informacje o stanie skojarzone z operacją asynchroniczną.</param>
        <summary>Gdy jest zastępowany w klasie pochodnej, rozpoczyna wywołanie asynchroniczne dla <see cref="M:System.IdentityModel.SecurityTokenService.GetScope(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)" /> metody.</summary>
        <returns><see cref="T:System.IAsyncResult" /> , Który odwołuje się do asynchronicznej operacji anulowania.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślna implementacja tej metody zgłasza <xref:System.NotImplementedException>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginIssue">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginIssue (System.Security.Claims.ClaimsPrincipal principal, System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginIssue(class System.Security.Claims.ClaimsPrincipal principal, class System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.SecurityTokenService.BeginIssue(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function BeginIssue (principal As ClaimsPrincipal, request As RequestSecurityToken, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginIssue(System::Security::Claims::ClaimsPrincipal ^ principal, System::IdentityModel::Protocols::WSTrust::RequestSecurityToken ^ request, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginIssue : System.Security.Claims.ClaimsPrincipal * System.IdentityModel.Protocols.WSTrust.RequestSecurityToken * AsyncCallback * obj -&gt; IAsyncResult&#xA;override this.BeginIssue : System.Security.Claims.ClaimsPrincipal * System.IdentityModel.Protocols.WSTrust.RequestSecurityToken * AsyncCallback * obj -&gt; IAsyncResult" Usage="securityTokenService.BeginIssue (principal, request, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="principal" Type="System.Security.Claims.ClaimsPrincipal" />
        <Parameter Name="request" Type="System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="principal"><see cref="T:System.Security.Claims.ClaimsPrincipal" /> Reprezentuje tożsamość żądającego tokenu.</param>
        <param name="request"><see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> Reprezentuje żądanie tokenu zabezpieczającego. Obejmuje to komunikat żądania, a także inne informacje związane z klientem, takie jak kontekst autoryzacji.</param>
        <param name="callback"><see cref="T:System.AsyncCallback" /> Delegat, który odbiera powiadomienie o zakończeniu asynchronicznej operacji problemu.</param>
        <param name="state">Obiekt, który zawiera informacje o stanie skojarzone z asynchronicznej operacji problemu.</param>
        <summary>Gdy jest zastępowany w klasie pochodnej, rozpoczyna asynchroniczne żądanie protokołu WS-Trust.</summary>
        <returns><see cref="T:System.IAsyncResult" /> Odwołuje się do asynchronicznej operacji problemu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślna implementacja tej metody zgłasza <xref:System.IdentityModel.Protocols.WSTrust.InvalidRequestException>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginRenew">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginRenew (System.Security.Claims.ClaimsPrincipal principal, System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginRenew(class System.Security.Claims.ClaimsPrincipal principal, class System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.SecurityTokenService.BeginRenew(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function BeginRenew (principal As ClaimsPrincipal, request As RequestSecurityToken, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginRenew(System::Security::Claims::ClaimsPrincipal ^ principal, System::IdentityModel::Protocols::WSTrust::RequestSecurityToken ^ request, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginRenew : System.Security.Claims.ClaimsPrincipal * System.IdentityModel.Protocols.WSTrust.RequestSecurityToken * AsyncCallback * obj -&gt; IAsyncResult&#xA;override this.BeginRenew : System.Security.Claims.ClaimsPrincipal * System.IdentityModel.Protocols.WSTrust.RequestSecurityToken * AsyncCallback * obj -&gt; IAsyncResult" Usage="securityTokenService.BeginRenew (principal, request, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="principal" Type="System.Security.Claims.ClaimsPrincipal" />
        <Parameter Name="request" Type="System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="principal"><see cref="T:System.Security.Claims.ClaimsPrincipal" /> Reprezentuje tożsamość żądającego tokenu.</param>
        <param name="request"><see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> Reprezentuje żądanie tokenu zabezpieczającego. Obejmuje to komunikat żądania, a także inne informacje związane z klientem, takie jak kontekst autoryzacji.</param>
        <param name="callback"><see cref="T:System.AsyncCallback" /> Delegat, który odbiera powiadomienie o zakończeniu asynchronicznej operacji odnawiania.</param>
        <param name="state">Obiekt, który zawiera informacje o stanie skojarzone z asynchroniczną operacją odnawiania.</param>
        <summary>Gdy jest zastępowany w klasie pochodnej, rozpoczyna asynchroniczne żądanie odnowienia WS-Trust.</summary>
        <returns><see cref="T:System.IAsyncResult" /> Odwołuje się do asynchronicznej operacji odnawiania.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślna implementacja tej metody zgłasza <xref:System.IdentityModel.Protocols.WSTrust.InvalidRequestException>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BeginValidate">
      <MemberSignature Language="C#" Value="public virtual IAsyncResult BeginValidate (System.Security.Claims.ClaimsPrincipal principal, System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request, AsyncCallback callback, object state);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IAsyncResult BeginValidate(class System.Security.Claims.ClaimsPrincipal principal, class System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request, class System.AsyncCallback callback, object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.SecurityTokenService.BeginValidate(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function BeginValidate (principal As ClaimsPrincipal, request As RequestSecurityToken, callback As AsyncCallback, state As Object) As IAsyncResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual IAsyncResult ^ BeginValidate(System::Security::Claims::ClaimsPrincipal ^ principal, System::IdentityModel::Protocols::WSTrust::RequestSecurityToken ^ request, AsyncCallback ^ callback, System::Object ^ state);" />
      <MemberSignature Language="F#" Value="abstract member BeginValidate : System.Security.Claims.ClaimsPrincipal * System.IdentityModel.Protocols.WSTrust.RequestSecurityToken * AsyncCallback * obj -&gt; IAsyncResult&#xA;override this.BeginValidate : System.Security.Claims.ClaimsPrincipal * System.IdentityModel.Protocols.WSTrust.RequestSecurityToken * AsyncCallback * obj -&gt; IAsyncResult" Usage="securityTokenService.BeginValidate (principal, request, callback, state)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IAsyncResult</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="principal" Type="System.Security.Claims.ClaimsPrincipal" />
        <Parameter Name="request" Type="System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" />
        <Parameter Name="callback" Type="System.AsyncCallback" />
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="principal"><see cref="T:System.Security.Claims.ClaimsPrincipal" /> Reprezentuje tożsamość żądającego tokenu.</param>
        <param name="request"><see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> Reprezentuje żądanie tokenu zabezpieczającego. Obejmuje to komunikat żądania, a także inne informacje związane z klientem, takie jak kontekst autoryzacji.</param>
        <param name="callback"><see cref="T:System.AsyncCallback" /> Delegat, który odbiera powiadomienie o zakończeniu asynchronicznej operacji walidacji.</param>
        <param name="state">Obiekt, który zawiera informacje o stanie skojarzone z asynchroniczną operacją walidacji.</param>
        <summary>Gdy jest zastępowany w klasie pochodnej, rozpoczyna asynchroniczne żądanie weryfikacji WS-Trust.</summary>
        <returns><see cref="T:System.IAsyncResult" /> Odwołuje się do asynchronicznej operacji walidacji.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślna implementacja tej metody zgłasza <xref:System.IdentityModel.Protocols.WSTrust.InvalidRequestException>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cancel">
      <MemberSignature Language="C#" Value="public virtual System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse Cancel (System.Security.Claims.ClaimsPrincipal principal, System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse Cancel(class System.Security.Claims.ClaimsPrincipal principal, class System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.SecurityTokenService.Cancel(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Cancel (principal As ClaimsPrincipal, request As RequestSecurityToken) As RequestSecurityTokenResponse" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::IdentityModel::Protocols::WSTrust::RequestSecurityTokenResponse ^ Cancel(System::Security::Claims::ClaimsPrincipal ^ principal, System::IdentityModel::Protocols::WSTrust::RequestSecurityToken ^ request);" />
      <MemberSignature Language="F#" Value="abstract member Cancel : System.Security.Claims.ClaimsPrincipal * System.IdentityModel.Protocols.WSTrust.RequestSecurityToken -&gt; System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse&#xA;override this.Cancel : System.Security.Claims.ClaimsPrincipal * System.IdentityModel.Protocols.WSTrust.RequestSecurityToken -&gt; System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" Usage="securityTokenService.Cancel (principal, request)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="principal" Type="System.Security.Claims.ClaimsPrincipal" />
        <Parameter Name="request" Type="System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" />
      </Parameters>
      <Docs>
        <param name="principal"><see cref="T:System.Security.Claims.ClaimsPrincipal" /> Reprezentuje tożsamość żądającego tokenu.</param>
        <param name="request"><see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> Reprezentuje żądanie tokenu zabezpieczającego. Obejmuje to komunikat żądania, a także inne informacje związane z klientem, takie jak kontekst autoryzacji.</param>
        <summary>Gdy jest zastępowany w klasie pochodnej, przetwarza żądanie anulowania usługi WS-Trust.</summary>
        <returns><see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> Reprezentujący RSTR do powrotu do obiektu wywołującego.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślna implementacja tej metody zgłasza <xref:System.IdentityModel.Protocols.WSTrust.InvalidRequestException>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateSecurityTokenDescriptor">
      <MemberSignature Language="C#" Value="protected virtual System.IdentityModel.Tokens.SecurityTokenDescriptor CreateSecurityTokenDescriptor (System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request, System.IdentityModel.Scope scope);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.IdentityModel.Tokens.SecurityTokenDescriptor CreateSecurityTokenDescriptor(class System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request, class System.IdentityModel.Scope scope) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.SecurityTokenService.CreateSecurityTokenDescriptor(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.IdentityModel.Scope)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::IdentityModel::Tokens::SecurityTokenDescriptor ^ CreateSecurityTokenDescriptor(System::IdentityModel::Protocols::WSTrust::RequestSecurityToken ^ request, System::IdentityModel::Scope ^ scope);" />
      <MemberSignature Language="F#" Value="abstract member CreateSecurityTokenDescriptor : System.IdentityModel.Protocols.WSTrust.RequestSecurityToken * System.IdentityModel.Scope -&gt; System.IdentityModel.Tokens.SecurityTokenDescriptor&#xA;override this.CreateSecurityTokenDescriptor : System.IdentityModel.Protocols.WSTrust.RequestSecurityToken * System.IdentityModel.Scope -&gt; System.IdentityModel.Tokens.SecurityTokenDescriptor" Usage="securityTokenService.CreateSecurityTokenDescriptor (request, scope)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.SecurityTokenDescriptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" />
        <Parameter Name="scope" Type="System.IdentityModel.Scope" />
      </Parameters>
      <Docs>
        <param name="request">Żądanie tokenu przychodzącego.</param>
        <param name="scope">Obiekt zwrócony z <see cref="M:System.IdentityModel.SecurityTokenService.GetScope(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)" />. <see cref="P:System.IdentityModel.SecurityTokenService.Scope" /></param>
        <summary>Tworzy wystąpienie elementu <see cref="P:System.IdentityModel.SecurityTokenService.SecurityTokenDescriptor" />.</summary>
        <returns><see cref="P:System.IdentityModel.SecurityTokenService.SecurityTokenDescriptor" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wywoływane podczas wystawiania <xref:System.IdentityModel.SecurityTokenService.GetScope%2A>tokenu po.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="request" />jest <see langword="null" />.  
  
—lub— 
 <paramref name="scope" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="EndCancel">
      <MemberSignature Language="C#" Value="public virtual System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse EndCancel (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse EndCancel(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.SecurityTokenService.EndCancel(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function EndCancel (result As IAsyncResult) As RequestSecurityTokenResponse" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::IdentityModel::Protocols::WSTrust::RequestSecurityTokenResponse ^ EndCancel(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="abstract member EndCancel : IAsyncResult -&gt; System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse&#xA;override this.EndCancel : IAsyncResult -&gt; System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" Usage="securityTokenService.EndCancel result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">Jest zwracany przez wywołanie <see cref="M:System.IdentityModel.SecurityTokenService.BeginCancel(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)" /> metody. <see cref="T:System.IAsyncResult" /></param>
        <summary>Gdy jest zastępowany w klasie pochodnej, kończy asynchroniczne żądanie anulowania WS-Trust.</summary>
        <returns><see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> Reprezentujący RSTR do powrotu do obiektu wywołującego.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślna implementacja tej metody zgłasza <xref:System.IdentityModel.Protocols.WSTrust.InvalidRequestException>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndGetOutputClaimsIdentity">
      <MemberSignature Language="C#" Value="protected virtual System.Security.Claims.ClaimsIdentity EndGetOutputClaimsIdentity (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Security.Claims.ClaimsIdentity EndGetOutputClaimsIdentity(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.SecurityTokenService.EndGetOutputClaimsIdentity(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function EndGetOutputClaimsIdentity (result As IAsyncResult) As ClaimsIdentity" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Security::Claims::ClaimsIdentity ^ EndGetOutputClaimsIdentity(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="abstract member EndGetOutputClaimsIdentity : IAsyncResult -&gt; System.Security.Claims.ClaimsIdentity&#xA;override this.EndGetOutputClaimsIdentity : IAsyncResult -&gt; System.Security.Claims.ClaimsIdentity" Usage="securityTokenService.EndGetOutputClaimsIdentity result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Claims.ClaimsIdentity</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">Jest zwracany przez wywołanie <see cref="M:System.IdentityModel.SecurityTokenService.BeginGetOutputClaimsIdentity(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.IdentityModel.Scope,System.AsyncCallback,System.Object)" /> metody. <see cref="T:System.IAsyncResult" /></param>
        <summary>Gdy jest zastępowany w klasie pochodnej, uzupełnia asynchroniczne wywołanie <see cref="M:System.IdentityModel.SecurityTokenService.BeginGetOutputClaimsIdentity(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.IdentityModel.Scope,System.AsyncCallback,System.Object)" /> metody.</summary>
        <returns>A <see cref="T:System.Security.Claims.ClaimsIdentity" /> , który zawiera kolekcję oświadczeń, które zostaną umieszczone w wystawionym tokenie zabezpieczającym.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślna implementacja tej metody zgłasza <xref:System.NotImplementedException>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndGetScope">
      <MemberSignature Language="C#" Value="protected virtual System.IdentityModel.Scope EndGetScope (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.IdentityModel.Scope EndGetScope(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.SecurityTokenService.EndGetScope(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function EndGetScope (result As IAsyncResult) As Scope" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::IdentityModel::Scope ^ EndGetScope(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="abstract member EndGetScope : IAsyncResult -&gt; System.IdentityModel.Scope&#xA;override this.EndGetScope : IAsyncResult -&gt; System.IdentityModel.Scope" Usage="securityTokenService.EndGetScope result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Scope</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">Jest zwracany przez wywołanie <see cref="M:System.IdentityModel.SecurityTokenService.BeginGetScope(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)" /> metody. <see cref="T:System.IAsyncResult" /></param>
        <summary>Gdy jest zastępowany w klasie pochodnej, uzupełnia asynchroniczne wywołanie <see cref="M:System.IdentityModel.SecurityTokenService.BeginGetScope(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)" /> metody.</summary>
        <returns>Obiekt <see cref="T:System.IdentityModel.Scope" /> , który hermetyzuje informacje jednostki uzależnionej (RP) skojarzone z żądaniem (RST) określonym w wywołaniu <see cref="M:System.IdentityModel.SecurityTokenService.BeginGetScope(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)" /> metody.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślna implementacja tej metody zgłasza <xref:System.NotImplementedException>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndIssue">
      <MemberSignature Language="C#" Value="public virtual System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse EndIssue (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse EndIssue(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.SecurityTokenService.EndIssue(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function EndIssue (result As IAsyncResult) As RequestSecurityTokenResponse" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::IdentityModel::Protocols::WSTrust::RequestSecurityTokenResponse ^ EndIssue(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="abstract member EndIssue : IAsyncResult -&gt; System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse&#xA;override this.EndIssue : IAsyncResult -&gt; System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" Usage="securityTokenService.EndIssue result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">Jest zwracany przez wywołanie <see cref="M:System.IdentityModel.SecurityTokenService.BeginIssue(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)" /> metody. <see cref="T:System.IAsyncResult" /></param>
        <summary>Gdy jest zastępowany w klasie pochodnej, kończy asynchroniczne żądanie problemu z WS-trustem.</summary>
        <returns><see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> Reprezentujący RSTR do powrotu do obiektu wywołującego.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślna implementacja tej metody zgłasza <xref:System.IdentityModel.Protocols.WSTrust.InvalidRequestException>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndRenew">
      <MemberSignature Language="C#" Value="public virtual System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse EndRenew (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse EndRenew(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.SecurityTokenService.EndRenew(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function EndRenew (result As IAsyncResult) As RequestSecurityTokenResponse" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::IdentityModel::Protocols::WSTrust::RequestSecurityTokenResponse ^ EndRenew(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="abstract member EndRenew : IAsyncResult -&gt; System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse&#xA;override this.EndRenew : IAsyncResult -&gt; System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" Usage="securityTokenService.EndRenew result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">Jest zwracany przez wywołanie <see cref="M:System.IdentityModel.SecurityTokenService.BeginRenew(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)" /> metody. <see cref="T:System.IAsyncResult" /></param>
        <summary>Gdy jest zastępowany w klasie pochodnej, kończy asynchroniczne żądanie odnowienia WS-Trust.</summary>
        <returns><see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> Reprezentujący RSTR do powrotu do obiektu wywołującego.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślna implementacja tej metody zgłasza <xref:System.IdentityModel.Protocols.WSTrust.InvalidRequestException>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="EndValidate">
      <MemberSignature Language="C#" Value="public virtual System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse EndValidate (IAsyncResult result);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse EndValidate(class System.IAsyncResult result) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.SecurityTokenService.EndValidate(System.IAsyncResult)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function EndValidate (result As IAsyncResult) As RequestSecurityTokenResponse" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::IdentityModel::Protocols::WSTrust::RequestSecurityTokenResponse ^ EndValidate(IAsyncResult ^ result);" />
      <MemberSignature Language="F#" Value="abstract member EndValidate : IAsyncResult -&gt; System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse&#xA;override this.EndValidate : IAsyncResult -&gt; System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" Usage="securityTokenService.EndValidate result" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="result" Type="System.IAsyncResult" />
      </Parameters>
      <Docs>
        <param name="result">Jest zwracany przez wywołanie <see cref="M:System.IdentityModel.SecurityTokenService.BeginValidate(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.AsyncCallback,System.Object)" /> metody. <see cref="T:System.IAsyncResult" /></param>
        <summary>Gdy jest zastępowany w klasie pochodnej, uzupełnia asynchroniczne żądanie weryfikacji WS-Trust.</summary>
        <returns><see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> Reprezentujący RSTR do powrotu do obiektu wywołującego.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślna implementacja tej metody zgłasza <xref:System.IdentityModel.Protocols.WSTrust.InvalidRequestException>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetIssuerName">
      <MemberSignature Language="C#" Value="protected virtual string GetIssuerName ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance string GetIssuerName() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.SecurityTokenService.GetIssuerName" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetIssuerName () As String" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::String ^ GetIssuerName();" />
      <MemberSignature Language="F#" Value="abstract member GetIssuerName : unit -&gt; string&#xA;override this.GetIssuerName : unit -&gt; string" Usage="securityTokenService.GetIssuerName " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pobiera nazwę usługi tokenu zabezpieczającego (STS).</summary>
        <returns>Nazwa wystawcy.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda jest wywoływana z domyślnego potoku wystawiania tokenów <xref:System.IdentityModel.SecurityTokenService.Issue%2A> zaimplementowanego w metodzie.  
  
 Domyślna implementacja zwraca <xref:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.TokenIssuerName%2A> właściwość z konfiguracji dostępną <xref:System.IdentityModel.SecurityTokenService.SecurityTokenServiceConfiguration%2A> za pośrednictwem właściwości.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.IdentityModel.SecurityTokenService.Issue(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)" />
      </Docs>
    </Member>
    <Member MemberName="GetOutputClaimsIdentity">
      <MemberSignature Language="C#" Value="protected abstract System.Security.Claims.ClaimsIdentity GetOutputClaimsIdentity (System.Security.Claims.ClaimsPrincipal principal, System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request, System.IdentityModel.Scope scope);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Security.Claims.ClaimsIdentity GetOutputClaimsIdentity(class System.Security.Claims.ClaimsPrincipal principal, class System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request, class System.IdentityModel.Scope scope) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.SecurityTokenService.GetOutputClaimsIdentity(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.IdentityModel.Scope)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::Security::Claims::ClaimsIdentity ^ GetOutputClaimsIdentity(System::Security::Claims::ClaimsPrincipal ^ principal, System::IdentityModel::Protocols::WSTrust::RequestSecurityToken ^ request, System::IdentityModel::Scope ^ scope);" />
      <MemberSignature Language="F#" Value="abstract member GetOutputClaimsIdentity : System.Security.Claims.ClaimsPrincipal * System.IdentityModel.Protocols.WSTrust.RequestSecurityToken * System.IdentityModel.Scope -&gt; System.Security.Claims.ClaimsIdentity" Usage="securityTokenService.GetOutputClaimsIdentity (principal, request, scope)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Claims.ClaimsIdentity</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="principal" Type="System.Security.Claims.ClaimsPrincipal" />
        <Parameter Name="request" Type="System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" />
        <Parameter Name="scope" Type="System.IdentityModel.Scope" />
      </Parameters>
      <Docs>
        <param name="principal"><see cref="T:System.Security.Claims.ClaimsPrincipal" /> Reprezentuje tożsamość żądającego tokenu.</param>
        <param name="request"><see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> Reprezentuje żądanie tokenu zabezpieczającego. Obejmuje to komunikat żądania, a także inne informacje związane z klientem, takie jak kontekst autoryzacji.</param>
        <param name="scope"><see cref="T:System.IdentityModel.Scope" /> Zawiera informacje o jednostce uzależnionej skojarzonej z żądaniem. Jest <see cref="T:System.IdentityModel.Scope" /> to obiekt, który został zwrócony <see cref="M:System.IdentityModel.SecurityTokenService.GetScope(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)" /> przez metodę.</param>
        <summary>Gdy jest zastępowany w klasie pochodnej, ta metoda zwraca kolekcję tematów wyjściowych, które mają być uwzględnione w wystawionym tokenie.</summary>
        <returns>A <see cref="T:System.Security.Claims.ClaimsIdentity" /> , który zawiera kolekcję oświadczeń, które zostaną umieszczone w wystawionym tokenie zabezpieczającym.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda jest wywoływana z potoku wystawiania tokenów, który jest implementowany <xref:System.IdentityModel.SecurityTokenService.Issue%2A> przez metodę. <xref:System.IdentityModel.SecurityTokenService.GetOutputClaimsIdentity%2A> Zwraca <xref:System.Security.Claims.ClaimsIdentity> on zawierający oświadczenia do uwzględnienia w wystawionym tokenie zabezpieczającym na podstawie żądającego tokenu `principal` (parametru), przychodzącego RST ( `request` parametru) i jednostki uzależnionej, dla której jest przeznaczony token ( `scope` parametr). Logika w tej metodzie dotyczy głównie odpowiedzi na następujące pytania:  
  
-   **Jakie typy roszczeń należy uwzględnić w odpowiedzi na podstawie jednostki UZALEŻNIONej, dla której jest zamierzona?** Zwykle jest to ustalane na podstawie listy typów roszczeń wymaganych dla każdego RP lub dla poszczególnych żądań, sprawdzając <xref:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken.Claims%2A> Właściwość żądania. Jednak logika i szczegóły dotyczące określania oświadczeń do uwzględnienia w odpowiedzi są całkowicie do Twojej implementacji.  
  
-   **Które wartości oświadczeń powinny być przypisane do oświadczeń w odpowiedzi?** W przypadku dostawcy tożsamości (IP-STS) zazwyczaj oznacza to użycie co najmniej jednego oświadczenia w żądającym <xref:System.Security.Claims.ClaimsPrincipal> (dostarczonego `principal` przez parametr) w celu uzyskania dostępu do magazynu (lub innej jednostki) w celu zwrócenia wartości dla wymaganych typów oświadczeń. W przypadku dostawcy federacyjnego (R-STS) zwykle oznacza to przeprowadzenie pewnego rodzaju przetwarzania oświadczeń przychodzących żądającego żądania; być może filtrowanie lub przekształcanie niektórych oświadczeń prezentowanych przez obiekt żądający, podczas przekazywania ich innym osobom. Oczywiście, jak w przypadku decydowania o oświadczeniach, które należy uwzględnić w odpowiedzi, szczegóły i logika określania wartości tych oświadczeń są do implementacji.  
  
   
  
## Examples  
 Przykład kodu, który jest używany w tym temacie, jest pobierany `Custom Token` z przykładu. Ten przykład zawiera klasy niestandardowe, które umożliwiają przetwarzanie prostych tokenów sieci Web (SWT) i obejmują implementację pasywnej usługi STS, która jest w stanie obsłużyć token SWT. Przykład sposobu implementacji aktywnej usługi STS można zobaczyć na `Federation Metadata` przykład. Aby uzyskać informacje o tych przykładach i innych przykładach dostępnych dla WIF i informacje o tym, gdzie je pobrać, zobacz [przykładowy indeks kodu WIF](~/docs/framework/security/wif-code-sample-index.md). Poniższy kod pokazuje, <xref:System.IdentityModel.SecurityTokenService.GetOutputClaimsIdentity%2A> jak zastąpić metodę w celu zwrócenia oświadczeń dla usługi STS. W tym przykładzie komunikat token zabezpieczeń żądania (RST) jest ignorowany i jest zwracany zbiór oświadczeń opartych na użytkowniku jako uwierzytelniony w STS.  
  
 [!code-csharp[WIFCustomTokenSTS#6](~/samples/snippets/csharp/VS_Snippets_Misc/wifcustomtokensts/cs/passivests/customsecuritytokenservice.cs#6)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Należy zastąpić tę metodę w implementacji <see cref="T:System.IdentityModel.SecurityTokenService" /> klasy.</para></block>
        <altmember cref="T:System.IdentityModel.Scope" />
        <altmember cref="M:System.IdentityModel.SecurityTokenService.Issue(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)" />
      </Docs>
    </Member>
    <Member MemberName="GetProofToken">
      <MemberSignature Language="C#" Value="protected virtual System.IdentityModel.Tokens.ProofDescriptor GetProofToken (System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request, System.IdentityModel.Scope scope);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.IdentityModel.Tokens.ProofDescriptor GetProofToken(class System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request, class System.IdentityModel.Scope scope) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.SecurityTokenService.GetProofToken(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.IdentityModel.Scope)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::IdentityModel::Tokens::ProofDescriptor ^ GetProofToken(System::IdentityModel::Protocols::WSTrust::RequestSecurityToken ^ request, System::IdentityModel::Scope ^ scope);" />
      <MemberSignature Language="F#" Value="abstract member GetProofToken : System.IdentityModel.Protocols.WSTrust.RequestSecurityToken * System.IdentityModel.Scope -&gt; System.IdentityModel.Tokens.ProofDescriptor&#xA;override this.GetProofToken : System.IdentityModel.Protocols.WSTrust.RequestSecurityToken * System.IdentityModel.Scope -&gt; System.IdentityModel.Tokens.ProofDescriptor" Usage="securityTokenService.GetProofToken (request, scope)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.ProofDescriptor</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" />
        <Parameter Name="scope" Type="System.IdentityModel.Scope" />
      </Parameters>
      <Docs>
        <param name="request"><see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> Reprezentuje żądanie tokenu przychodzącego (RST).</param>
        <param name="scope"><see cref="T:System.IdentityModel.Scope" /> Wystąpienie, które hermetyzuje informacje o jednostce uzależnionej.</param>
        <summary>Pobiera token potwierdzający, który ma zostać uwzględniony w odpowiedzi (RSTR).</summary>
        <returns><see cref="T:System.IdentityModel.Tokens.ProofDescriptor" /> Reprezentujący nowo utworzony deskryptora. Deskryptorem potwierdzającym może być asymetrycznego deskryptora potwierdzającego, symetrycznego deskryptora zaświadczania lub <see langword="null" /> w przypadku tokenu okaziciela.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda jest wywoływana z domyślnego potoku wystawiania tokenów <xref:System.IdentityModel.SecurityTokenService.Issue%2A> zaimplementowanego w metodzie.  
  
 Domyślna implementacja zwraca deskryptor dowodu lub zgłasza odpowiedni wyjątek.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="request" />jest <see langword="null" />.  
  
—lub— 
 <paramref name="scope" />jest <see langword="null" />.</exception>
        <altmember cref="M:System.IdentityModel.SecurityTokenService.Issue(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)" />
      </Docs>
    </Member>
    <Member MemberName="GetRequestorProofEncryptingCredentials">
      <MemberSignature Language="C#" Value="protected virtual System.IdentityModel.Tokens.EncryptingCredentials GetRequestorProofEncryptingCredentials (System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.IdentityModel.Tokens.EncryptingCredentials GetRequestorProofEncryptingCredentials(class System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.SecurityTokenService.GetRequestorProofEncryptingCredentials(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetRequestorProofEncryptingCredentials (request As RequestSecurityToken) As EncryptingCredentials" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::IdentityModel::Tokens::EncryptingCredentials ^ GetRequestorProofEncryptingCredentials(System::IdentityModel::Protocols::WSTrust::RequestSecurityToken ^ request);" />
      <MemberSignature Language="F#" Value="abstract member GetRequestorProofEncryptingCredentials : System.IdentityModel.Protocols.WSTrust.RequestSecurityToken -&gt; System.IdentityModel.Tokens.EncryptingCredentials&#xA;override this.GetRequestorProofEncryptingCredentials : System.IdentityModel.Protocols.WSTrust.RequestSecurityToken -&gt; System.IdentityModel.Tokens.EncryptingCredentials" Usage="securityTokenService.GetRequestorProofEncryptingCredentials request" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.EncryptingCredentials</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" />
      </Parameters>
      <Docs>
        <param name="request"><see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> Reprezentuje żądanie tokenu przychodzącego (RST).</param>
        <summary>Pobiera poświadczenia szyfrowania dowodu żądającego.</summary>
        <returns><see cref="T:System.IdentityModel.Tokens.EncryptingCredentials" /> Obiekt, który reprezentuje poświadczenia szyfrowania żądającego.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda jest wywoływana z <xref:System.IdentityModel.SecurityTokenService.GetProofToken%2A> metody.  
  
 Implementacja domyślna wykonuje następujące czynności. Zwraca `null` czy w żądaniu nie określono tokenu szyfrowania <xref:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken.ProofEncryption%2A?displayProperty=nameWithType> (Właściwość to `null`). W przeciwnym razie, jeśli może uzyskać token jako <xref:System.IdentityModel.Tokens.X509SecurityToken>, zwraca poświadczenia na podstawie tego tokenu. Jeśli nie można rozpoznać tokenu jako <xref:System.IdentityModel.Tokens.X509SecurityToken> <xref:System.IdentityModel.RequestFailedException> , zgłaszany jest wyjątek.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="request" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetResponse">
      <MemberSignature Language="C#" Value="protected virtual System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse GetResponse (System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request, System.IdentityModel.Tokens.SecurityTokenDescriptor tokenDescriptor);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse GetResponse(class System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request, class System.IdentityModel.Tokens.SecurityTokenDescriptor tokenDescriptor) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.SecurityTokenService.GetResponse(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken,System.IdentityModel.Tokens.SecurityTokenDescriptor)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetResponse (request As RequestSecurityToken, tokenDescriptor As SecurityTokenDescriptor) As RequestSecurityTokenResponse" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::IdentityModel::Protocols::WSTrust::RequestSecurityTokenResponse ^ GetResponse(System::IdentityModel::Protocols::WSTrust::RequestSecurityToken ^ request, System::IdentityModel::Tokens::SecurityTokenDescriptor ^ tokenDescriptor);" />
      <MemberSignature Language="F#" Value="abstract member GetResponse : System.IdentityModel.Protocols.WSTrust.RequestSecurityToken * System.IdentityModel.Tokens.SecurityTokenDescriptor -&gt; System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse&#xA;override this.GetResponse : System.IdentityModel.Protocols.WSTrust.RequestSecurityToken * System.IdentityModel.Tokens.SecurityTokenDescriptor -&gt; System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" Usage="securityTokenService.GetResponse (request, tokenDescriptor)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" />
        <Parameter Name="tokenDescriptor" Type="System.IdentityModel.Tokens.SecurityTokenDescriptor" />
      </Parameters>
      <Docs>
        <param name="request">Parametr RST zawierający żądanie tokenu.</param>
        <param name="tokenDescriptor">Deskryptor tokenu zawierający informacje do użycia dla wystawionego tokenu.</param>
        <summary>Tworzy odpowiedź (RSTR), która zawiera wystawiony token przy użyciu określonego żądania (RST) i deskryptora tokenu zabezpieczającego.</summary>
        <returns>Odpowiedź (RSTR) lub <see langword="null" /> Jeśli nie można utworzyć odpowiedzi z określonego żądania i deskryptora tokenu. Domyślna implementacja zwraca wartość <see langword="null" /> , <paramref name="tokenDescriptor" /> Jeśli parametr jest <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda jest wywoływana jako ostatni krok z potoku wystawiania tokenów, który jest implementowany <xref:System.IdentityModel.SecurityTokenService.Issue%2A> przez metodę. <xref:System.IdentityModel.SecurityTokenService.GetResponse%2A> Tworzy i zwraca odpowiedź (RSTR) przy użyciu oryginalnego żądania przychodzącego (RST) i deskryptora tokenu, który został skompilowany podczas poprzednich kroków potoku wystawiania tokenów.  
  
 Domyślna implementacja tworzy RSTR przez przekazanie parametru RST określonego w parametrze żądania do <xref:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse.%23ctor%28System.IdentityModel.Protocols.WSTrust.WSTrustMessage%29?displayProperty=nameWithType> konstruktora, <xref:System.IdentityModel.Tokens.SecurityTokenDescriptor.ApplyTo%2A?displayProperty=nameWithType> wywołując metodę na deskryptorze tokenu przekazywanym <xref:System.IdentityModel.SecurityTokenService.GetResponse%2A> do zastosowania do nowo utworzono RSTR, ustawiając <xref:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.AppliesTo%2A> właściwość w RSTR przy <xref:System.IdentityModel.Tokens.SecurityTokenDescriptor.AppliesToAddress%2A> użyciu właściwości deskryptora tokenu <xref:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.ReplyTo%2A> , a następnie ustawiając właściwość w RSTR zgodnie z następującą tabelą:  
  
|`RST.ReplyTo`wartość|<xref:System.IdentityModel.Tokens.SecurityTokenDescriptor.AppliesToAddress%2A?displayProperty=nameWithType>wartość.|`RSTR.ReplyTo`wartość|  
|----------------------------|--------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|-----------------------------|  
|Zbiór|Nie ustawiono|Nie ustawiono|  
|Zbiór|Zbiór|<xref:System.IdentityModel.Tokens.SecurityTokenDescriptor.AppliesToAddress%2A?displayProperty=nameWithType>|  
|Nie ustawiono|Zbiór|Nie ustawiono|  
|Nie ustawiono|Nie ustawiono|Nie ustawiono|  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.IdentityModel.SecurityTokenService.Issue(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)" />
      </Docs>
    </Member>
    <Member MemberName="GetScope">
      <MemberSignature Language="C#" Value="protected abstract System.IdentityModel.Scope GetScope (System.Security.Claims.ClaimsPrincipal principal, System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.IdentityModel.Scope GetScope(class System.Security.Claims.ClaimsPrincipal principal, class System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.SecurityTokenService.GetScope(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function GetScope (principal As ClaimsPrincipal, request As RequestSecurityToken) As Scope" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::IdentityModel::Scope ^ GetScope(System::Security::Claims::ClaimsPrincipal ^ principal, System::IdentityModel::Protocols::WSTrust::RequestSecurityToken ^ request);" />
      <MemberSignature Language="F#" Value="abstract member GetScope : System.Security.Claims.ClaimsPrincipal * System.IdentityModel.Protocols.WSTrust.RequestSecurityToken -&gt; System.IdentityModel.Scope" Usage="securityTokenService.GetScope (principal, request)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Scope</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="principal" Type="System.Security.Claims.ClaimsPrincipal" />
        <Parameter Name="request" Type="System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" />
      </Parameters>
      <Docs>
        <param name="principal"><see cref="T:System.Security.Claims.ClaimsPrincipal" /> Reprezentuje klienta wysyłającego żądanie.</param>
        <param name="request"><see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> Reprezentuje żądanie przychodzące (RST).</param>
        <summary><see cref="T:System.IdentityModel.Scope" /> Pobiera obiekt, który zawiera informacje o jednostce uzależnionej (RP) skojarzone z określonym żądaniem (RST). Należy zastąpić tę metodę w implementacji <see cref="T:System.IdentityModel.SecurityTokenService" /> klasy.</summary>
        <returns>Obiekt <see cref="T:System.IdentityModel.Scope" /> , który hermetyzuje informacje o RP skojarzone z żądaniem.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda jest wywoływana z potoku wystawiania tokenów <xref:System.IdentityModel.SecurityTokenService.ValidateRequest%2A> po <xref:System.IdentityModel.Scope> metodzie i powinna zwracać obiekt skonfigurowany dla żądania przychodzącego. <xref:System.IdentityModel.SecurityTokenService.GetScope%2A> (Potok wystawiania tokenów jest zaimplementowany <xref:System.IdentityModel.SecurityTokenService.Issue%2A> w metodzie). <xref:System.IdentityModel.Scope> Obiekt hermetyzuje informacje o RP skojarzonym z żądaniem tokenu zabezpieczającego (RST). Obejmuje to informacje o poświadczeniach szyfrowania i podpisywania, które mają być używane z RP i czy mają być szyfrowane wszystkie wystawione tokeny i/lub klucze symetryczne w odpowiedzi. Niektóre typowe zadania wykonywane w <xref:System.IdentityModel.SecurityTokenService.GetScope%2A> metodzie są następujące:  
  
-   Ustal, czy jednostka UZALEŻNIONa, dla której jest przeznaczony token, jest rozpoznawanym elementem RP. Sposób osiągnięcia tego celu zależy od implementacji. Jeśli przewidziany element RP nie jest prawidłowym RP dla tej usługi STS, metoda powinna zgłosić <xref:System.IdentityModel.Protocols.WSTrust.InvalidRequestException>.  
  
-   Określ poświadczenia podpisywania, które mają być używane w odpowiedzi (RSTR) i ustaw <xref:System.IdentityModel.Scope.SigningCredentials%2A> odpowiednio właściwość.  
  
-   Określ, czy odpowiedź i/lub wszelkie dołączone klucze symetryczne mają być szyfrowane, oraz poświadczenia, które mają być używane do szyfrowania. Ustaw odpowiednio właściwości <xref:System.IdentityModel.Scope.SymmetricKeyEncryptionRequired%2A> <xref:System.IdentityModel.Scope.EncryptingCredentials%2A> , i <xref:System.IdentityModel.Scope.TokenEncryptionRequired%2A>.  
  
    > [!IMPORTANT]
    >  Domyślnie właściwości <xref:System.IdentityModel.Scope.TokenEncryptionRequired%2A> i <xref:System.IdentityModel.Scope.SymmetricKeyEncryptionRequired%2A> są ustawione tak `true` , aby uniemożliwić usłudze STS wystawianie tokenów, które nie są bezpieczne. Zaleca się, aby `false` te właściwości nigdy nie były ustawione w środowisku produkcyjnym.  
  
-   Określ adres, na który powinna zostać zwrócona odpowiedź. Ustaw odpowiednio Właściwość <xref:System.IdentityModel.Scope.ReplyToAddress%2A>lub. <xref:System.IdentityModel.Scope.AppliesToAddress%2A>  
  
   
  
## Examples  
 Przykład kodu, który jest używany w tym temacie, jest pobierany `Custom Token` z przykładu. Ten przykład zawiera klasy niestandardowe, które umożliwiają przetwarzanie prostych tokenów sieci Web (SWT) i obejmują implementację pasywnej usługi STS, która jest w stanie obsłużyć token SWT. Przykład sposobu implementacji aktywnej usługi STS można zobaczyć na `Federation Metadata` przykład. Aby uzyskać informacje o tych przykładach i innych przykładach dostępnych dla WIF i informacje o tym, gdzie je pobrać, zobacz [przykładowy indeks kodu WIF](~/docs/framework/security/wif-code-sample-index.md).  
  
 Poniższy przykład kodu pokazuje implementację <xref:System.IdentityModel.SecurityTokenService.GetScope%2A> metody. Ta implementacja sprawdza, czy RP jest rozpoznawany przez usługę STS, sprawdza poprawność <xref:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.ReplyTo%2A> adresu w żądaniu i <xref:System.IdentityModel.Scope.ReplyToAddress%2A?displayProperty=nameWithType> ustawia odpowiednio Właściwość oraz ustawia poświadczenia podpisywania i szyfrowania do użycia z RP na podstawie certyfikatów, które są trwale kodowane w pliku.  
  
 [!code-csharp[WIFCustomTokenSTS#4](~/samples/snippets/csharp/VS_Snippets_Misc/wifcustomtokensts/cs/passivests/customsecuritytokenservice.cs#4)]  
[!code-csharp[WIFCustomTokenSTS#5](~/samples/snippets/csharp/VS_Snippets_Misc/wifcustomtokensts/cs/passivests/customsecuritytokenservice.cs#5)]  
[!code-csharp[WIFCustomTokenSTS#7](~/samples/snippets/csharp/VS_Snippets_Misc/wifcustomtokensts/cs/passivests/customsecuritytokenservice.cs#7)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Należy zastąpić tę metodę w implementacji <see cref="T:System.IdentityModel.SecurityTokenService" /> klasy.</para></block>
        <altmember cref="T:System.IdentityModel.Scope" />
        <altmember cref="M:System.IdentityModel.SecurityTokenService.Issue(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)" />
      </Docs>
    </Member>
    <Member MemberName="GetSecurityTokenHandler">
      <MemberSignature Language="C#" Value="protected virtual System.IdentityModel.Tokens.SecurityTokenHandler GetSecurityTokenHandler (string requestedTokenType);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.IdentityModel.Tokens.SecurityTokenHandler GetSecurityTokenHandler(string requestedTokenType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.SecurityTokenService.GetSecurityTokenHandler(System.String)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetSecurityTokenHandler (requestedTokenType As String) As SecurityTokenHandler" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::IdentityModel::Tokens::SecurityTokenHandler ^ GetSecurityTokenHandler(System::String ^ requestedTokenType);" />
      <MemberSignature Language="F#" Value="abstract member GetSecurityTokenHandler : string -&gt; System.IdentityModel.Tokens.SecurityTokenHandler&#xA;override this.GetSecurityTokenHandler : string -&gt; System.IdentityModel.Tokens.SecurityTokenHandler" Usage="securityTokenService.GetSecurityTokenHandler requestedTokenType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.SecurityTokenHandler</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestedTokenType" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="requestedTokenType">Ciąg zawierający żądany identyfikator URI typu tokenu.</param>
        <summary>Pobiera odpowiedni program obsługi tokenów zabezpieczających do wystawiania tokenu zabezpieczającego określonego typu.</summary>
        <returns>Reprezentuje program obsługi tokenów ,którybędzieużywanydotworzeniawystawionegotokenuzabezpieczającego.<see cref="T:System.IdentityModel.Tokens.SecurityTokenHandler" /> Zwraca <see langword="null" /> czy żądany typ tokenu nie jest obsługiwany (nie ma skonfigurowanej obsługi dla określonego typu tokenu).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W domyślnej implementacji Jeśli `requestedTokenType` jest `null` lub pusty ciąg, używany jest domyślny typ tokenu z konfiguracji. Jest to określane przez <xref:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.DefaultTokenType%2A> właściwość obiektu konfiguracji usługi STS, <xref:System.IdentityModel.SecurityTokenService.SecurityTokenServiceConfiguration%2A> do którego można uzyskać dostęp za pomocą właściwości.  
  
 Ta metoda jest wywoływana z domyślnego potoku wystawiania tokenów <xref:System.IdentityModel.SecurityTokenService.Issue%2A> zaimplementowanego w metodzie.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.IdentityModel.SecurityTokenService.Issue(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)" />
      </Docs>
    </Member>
    <Member MemberName="GetTokenLifetime">
      <MemberSignature Language="C#" Value="protected virtual System.IdentityModel.Protocols.WSTrust.Lifetime GetTokenLifetime (System.IdentityModel.Protocols.WSTrust.Lifetime requestLifetime);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.IdentityModel.Protocols.WSTrust.Lifetime GetTokenLifetime(class System.IdentityModel.Protocols.WSTrust.Lifetime requestLifetime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.SecurityTokenService.GetTokenLifetime(System.IdentityModel.Protocols.WSTrust.Lifetime)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function GetTokenLifetime (requestLifetime As Lifetime) As Lifetime" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::IdentityModel::Protocols::WSTrust::Lifetime ^ GetTokenLifetime(System::IdentityModel::Protocols::WSTrust::Lifetime ^ requestLifetime);" />
      <MemberSignature Language="F#" Value="abstract member GetTokenLifetime : System.IdentityModel.Protocols.WSTrust.Lifetime -&gt; System.IdentityModel.Protocols.WSTrust.Lifetime&#xA;override this.GetTokenLifetime : System.IdentityModel.Protocols.WSTrust.Lifetime -&gt; System.IdentityModel.Protocols.WSTrust.Lifetime" Usage="securityTokenService.GetTokenLifetime requestLifetime" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Protocols.WSTrust.Lifetime</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="requestLifetime" Type="System.IdentityModel.Protocols.WSTrust.Lifetime" />
      </Parameters>
      <Docs>
        <param name="requestLifetime"><see cref="T:System.IdentityModel.Protocols.WSTrust.Lifetime" /> Reprezentujący żądany okres istnienia.</param>
        <summary>Pobiera okres istnienia wystawionego tokenu.</summary>
        <returns><see cref="T:System.IdentityModel.Protocols.WSTrust.Lifetime" /> Reprezentujący okres istnienia.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda jest zwykle wywoływana z okresem istnienia, który został osiągnięty w RST. W domyślnej implementacji okres istnienia tokenu jest obliczany zgodnie z poniższą tabelą.  
  
|Utworzone (w)|Wygasa (w)|Utworzone (w)|Wygasa (out)|  
|--------------------|--------------------|--------------------|---------------------|  
|`null`|`null`|<xref:System.DateTime.UtcNow%2A?displayProperty=nameWithType>|<xref:System.DateTime.UtcNow%2A?displayProperty=nameWithType> + <xref:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.DefaultTokenLifetime%2A?displayProperty=nameWithType>|  
|C|`null`|C|C + <xref:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration.DefaultTokenLifetime%2A?displayProperty=nameWithType>|  
|`null`|E|<xref:System.DateTime.UtcNow%2A?displayProperty=nameWithType>|E|  
|C|E|C|E|  
  
 Ta metoda jest wywoływana z domyślnego potoku wystawiania tokenów <xref:System.IdentityModel.SecurityTokenService.Issue%2A> zaimplementowanego w metodzie.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.IdentityModel.SecurityTokenService.Issue(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)" />
      </Docs>
    </Member>
    <Member MemberName="Issue">
      <MemberSignature Language="C#" Value="public virtual System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse Issue (System.Security.Claims.ClaimsPrincipal principal, System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse Issue(class System.Security.Claims.ClaimsPrincipal principal, class System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.SecurityTokenService.Issue(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Issue (principal As ClaimsPrincipal, request As RequestSecurityToken) As RequestSecurityTokenResponse" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::IdentityModel::Protocols::WSTrust::RequestSecurityTokenResponse ^ Issue(System::Security::Claims::ClaimsPrincipal ^ principal, System::IdentityModel::Protocols::WSTrust::RequestSecurityToken ^ request);" />
      <MemberSignature Language="F#" Value="abstract member Issue : System.Security.Claims.ClaimsPrincipal * System.IdentityModel.Protocols.WSTrust.RequestSecurityToken -&gt; System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse&#xA;override this.Issue : System.Security.Claims.ClaimsPrincipal * System.IdentityModel.Protocols.WSTrust.RequestSecurityToken -&gt; System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" Usage="securityTokenService.Issue (principal, request)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="principal" Type="System.Security.Claims.ClaimsPrincipal" />
        <Parameter Name="request" Type="System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" />
      </Parameters>
      <Docs>
        <param name="principal"><see cref="T:System.Security.Claims.ClaimsPrincipal" /> Reprezentuje tożsamość żądającego tokenu.</param>
        <param name="request"><see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> Reprezentuje żądanie tokenu zabezpieczającego. Obejmuje to komunikat żądania, a także inne informacje związane z klientem, takie jak kontekst autoryzacji.</param>
        <summary>Wystawia token zabezpieczający.</summary>
        <returns>A <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> , który zawiera wystawiony token zabezpieczający.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda implementuje powiązanie problemu zdefiniowane w specyfikacji WS-Trust. Domyślna implementacja <xref:System.IdentityModel.SecurityTokenService.Issue%2A> metody przetwarza żądanie przychodzące (RST) za pomocą potoku wystawiania tokenów (wystawiania oświadczeń) i zwraca odpowiedź (RSTR), która zawiera token zabezpieczający z odpowiednimi oświadczeniami do uwierzytelnienia Obiekt żądający z RP lub właściwy wyjątek. Potok wystawiania tokenów w implementacji domyślnej obejmuje wywołania następujących metod ( <xref:System.IdentityModel.SecurityTokenService> klasy).  
  
1.  <xref:System.IdentityModel.SecurityTokenService.ValidateRequest%2A> Metoda weryfikacji żądania (RST).  
  
2.  <xref:System.IdentityModel.SecurityTokenService.GetScope%2A> Metoda<xref:System.IdentityModel.Scope> pobrania obiektu, który zawiera informacje o jednostce uzależnionej (RP) skojarzonej z żądaniem. Należy zastąpić tę metodę. Jeśli <xref:System.IdentityModel.SecurityTokenService.GetScope%2A> zwraca `null` ,<xref:System.InvalidOperationException> zostanie zgłoszony.  
  
3.  Metoda zwracająca deskryptora tokenu zabezpieczającego oparta na parametrze RST <xref:System.IdentityModel.Scope> i obiekcie zwróconym w poprzednim kroku. <xref:System.IdentityModel.SecurityTokenService.CreateSecurityTokenDescriptor%2A> Deskryptor tokenu zabezpieczającego (<xref:System.IdentityModel.Tokens.SecurityTokenDescriptor>) zawiera informacje o żądaniu w formularzu, który może być używany przez procedurę obsługi tokenu. <xref:System.IdentityModel.SecurityTokenService.SecurityTokenDescriptor%2A?displayProperty=nameWithType> Właściwość jest ustawiona na deskryptor zwracany przez wywołanie. Jeśli `null` jest zwracana lub <xref:System.IdentityModel.Tokens.SecurityTokenDescriptor.SigningCredentials%2A> Jeśli właściwość deskryptora ma `null`wartość, <xref:System.InvalidOperationException> jest zgłaszany. Wyjątek jest również zgłaszany, jeśli <xref:System.IdentityModel.Scope.TokenEncryptionRequired%2A?displayProperty=nameWithType> właściwość jest `true` , ale <xref:System.IdentityModel.Tokens.SecurityTokenDescriptor.EncryptingCredentials%2A> Właściwość zwracanego deskryptora to `null`.  
  
4.  <xref:System.IdentityModel.SecurityTokenService.GetSecurityTokenHandler%2A> Metoda pobrania odpowiedniej procedury obsługi tokenu na podstawie typu żądanego tokenu. Jeśli `null` jest zwracany <xref:System.NotImplementedException> , jest zgłaszany.  
  
5.  <xref:System.IdentityModel.SecurityTokenService.GetIssuerName%2A> Metoda pobrania nazwy wystawcy dla tokenu. Zgłasza, `null` czy nazwa jest lub <xref:System.IdentityModel.Tokens.SecurityTokenDescriptor.TokenIssuerName%2A> pusta; w przeciwnym razie ustawia właściwość deskryptora. <xref:System.InvalidOperationException>  
  
6.  Metoda uzyskiwania okresu istnienia tokenu i <xref:System.IdentityModel.Tokens.SecurityTokenDescriptor.Lifetime%2A> ustawiania właściwości deskryptora. <xref:System.IdentityModel.SecurityTokenService.GetTokenLifetime%2A>  
  
7.  Metoda pobrania tokenu potwierdzającego do uwzględnienia w wystawionym tokenie i <xref:System.IdentityModel.Tokens.SecurityTokenDescriptor.Proof%2A> ustawia właściwość deskryptora. <xref:System.IdentityModel.SecurityTokenService.GetProofToken%2A>  
  
8.  Metoda pobierania oświadczeń do uwzględnienia w wystawionym tokenie i <xref:System.IdentityModel.Tokens.SecurityTokenDescriptor.Subject%2A> ustawia właściwość deskryptora. <xref:System.IdentityModel.SecurityTokenService.GetOutputClaimsIdentity%2A> Należy zastąpić tę metodę.  
  
9. <xref:System.IdentityModel.SecurityTokenService.GetResponse%2A> Metoda tworzenia odpowiedzi (RSTR) zawierającej wystawiony token.  
  
 Można zastąpić <xref:System.IdentityModel.SecurityTokenService.Issue%2A> metodę w celu zaimplementowania niestandardowego potoku wystawiania tokenów, jednak zazwyczaj nie jest to konieczne w środowiskach deweloperskich i testowych, dla których <xref:System.IdentityModel.SecurityTokenService> zamierzone są Większość implementacji niestandardowych klasy. W wielu z tych przypadków przesłaniasz <xref:System.IdentityModel.SecurityTokenService.GetOutputClaimsIdentity%2A> <xref:System.IdentityModel.SecurityTokenService.ValidateRequest%2A> metody i <xref:System.IdentityModel.SecurityTokenService.GetScope%2A> opcjonalnie zastąpisz metodę, aby zapewnić obsługę usługi STS dla danego środowiska. Jeśli konieczne jest dalsze dostosowanie, można je często wprowadzić, zastępując metody implementujące poszczególne etapy domyślnego potoku wystawiania tokenów wymienione powyżej.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Principal">
      <MemberSignature Language="C#" Value="public System.Security.Claims.ClaimsPrincipal Principal { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Security.Claims.ClaimsPrincipal Principal" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.SecurityTokenService.Principal" />
      <MemberSignature Language="VB.NET" Value="Public Property Principal As ClaimsPrincipal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Security::Claims::ClaimsPrincipal ^ Principal { System::Security::Claims::ClaimsPrincipal ^ get(); void set(System::Security::Claims::ClaimsPrincipal ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Principal : System.Security.Claims.ClaimsPrincipal with get, set" Usage="System.IdentityModel.SecurityTokenService.Principal" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.Claims.ClaimsPrincipal</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia podmiot zabezpieczeń skojarzony z bieżącym wystąpieniem.</summary>
        <value><see cref="T:System.Security.Claims.ClaimsPrincipal" /> Reprezentujący bieżącego podmiotu zabezpieczeń.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Renew">
      <MemberSignature Language="C#" Value="public virtual System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse Renew (System.Security.Claims.ClaimsPrincipal principal, System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse Renew(class System.Security.Claims.ClaimsPrincipal principal, class System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.SecurityTokenService.Renew(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Renew (principal As ClaimsPrincipal, request As RequestSecurityToken) As RequestSecurityTokenResponse" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::IdentityModel::Protocols::WSTrust::RequestSecurityTokenResponse ^ Renew(System::Security::Claims::ClaimsPrincipal ^ principal, System::IdentityModel::Protocols::WSTrust::RequestSecurityToken ^ request);" />
      <MemberSignature Language="F#" Value="abstract member Renew : System.Security.Claims.ClaimsPrincipal * System.IdentityModel.Protocols.WSTrust.RequestSecurityToken -&gt; System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse&#xA;override this.Renew : System.Security.Claims.ClaimsPrincipal * System.IdentityModel.Protocols.WSTrust.RequestSecurityToken -&gt; System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" Usage="securityTokenService.Renew (principal, request)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="principal" Type="System.Security.Claims.ClaimsPrincipal" />
        <Parameter Name="request" Type="System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" />
      </Parameters>
      <Docs>
        <param name="principal"><see cref="T:System.Security.Claims.ClaimsPrincipal" /> Reprezentuje tożsamość żądającego tokenu.</param>
        <param name="request"><see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> Reprezentuje żądanie tokenu zabezpieczającego. Obejmuje to komunikat żądania, a także inne informacje związane z klientem, takie jak kontekst autoryzacji.</param>
        <summary>Gdy jest zastępowany w klasie pochodnej, przetwarza żądanie odnowienia WS-Trust.</summary>
        <returns><see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> Reprezentujący RSTR do powrotu do obiektu wywołującego.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślna implementacja tej metody zgłasza <xref:System.IdentityModel.Protocols.WSTrust.InvalidRequestException>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Request">
      <MemberSignature Language="C#" Value="public System.IdentityModel.Protocols.WSTrust.RequestSecurityToken Request { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IdentityModel.Protocols.WSTrust.RequestSecurityToken Request" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.SecurityTokenService.Request" />
      <MemberSignature Language="VB.NET" Value="Public Property Request As RequestSecurityToken" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IdentityModel::Protocols::WSTrust::RequestSecurityToken ^ Request { System::IdentityModel::Protocols::WSTrust::RequestSecurityToken ^ get(); void set(System::IdentityModel::Protocols::WSTrust::RequestSecurityToken ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Request : System.IdentityModel.Protocols.WSTrust.RequestSecurityToken with get, set" Usage="System.IdentityModel.SecurityTokenService.Request" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Protocols.WSTrust.RequestSecurityToken</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia żądanie tokenu zabezpieczającego (RST) skojarzone z bieżącym wystąpieniem.</summary>
        <value>A <see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> , który zawiera żądanie.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Scope">
      <MemberSignature Language="C#" Value="public System.IdentityModel.Scope Scope { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IdentityModel.Scope Scope" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.SecurityTokenService.Scope" />
      <MemberSignature Language="VB.NET" Value="Public Property Scope As Scope" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IdentityModel::Scope ^ Scope { System::IdentityModel::Scope ^ get(); void set(System::IdentityModel::Scope ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Scope : System.IdentityModel.Scope with get, set" Usage="System.IdentityModel.SecurityTokenService.Scope" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Scope</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia zakres skojarzony z bieżącym wystąpieniem.</summary>
        <value><see cref="T:System.IdentityModel.Scope" /> Reprezentuje konfigurację żądania wystawiania tokenu.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SecurityTokenDescriptor">
      <MemberSignature Language="C#" Value="protected System.IdentityModel.Tokens.SecurityTokenDescriptor SecurityTokenDescriptor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IdentityModel.Tokens.SecurityTokenDescriptor SecurityTokenDescriptor" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.SecurityTokenService.SecurityTokenDescriptor" />
      <MemberSignature Language="VB.NET" Value="Protected Property SecurityTokenDescriptor As SecurityTokenDescriptor" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property System::IdentityModel::Tokens::SecurityTokenDescriptor ^ SecurityTokenDescriptor { System::IdentityModel::Tokens::SecurityTokenDescriptor ^ get(); void set(System::IdentityModel::Tokens::SecurityTokenDescriptor ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SecurityTokenDescriptor : System.IdentityModel.Tokens.SecurityTokenDescriptor with get, set" Usage="System.IdentityModel.SecurityTokenService.SecurityTokenDescriptor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Tokens.SecurityTokenDescriptor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia <see cref="T:System.IdentityModel.Tokens.SecurityTokenDescriptor" /> skojarzenie z bieżącym wystąpieniem.</summary>
        <value>Deskryptor tokenu zabezpieczającego skojarzony z bieżącym wystąpieniem.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">Podjęto próbę ustawienia właściwości <see langword="null" /> .</exception>
      </Docs>
    </Member>
    <Member MemberName="SecurityTokenServiceConfiguration">
      <MemberSignature Language="C#" Value="public System.IdentityModel.Configuration.SecurityTokenServiceConfiguration SecurityTokenServiceConfiguration { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IdentityModel.Configuration.SecurityTokenServiceConfiguration SecurityTokenServiceConfiguration" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.SecurityTokenService.SecurityTokenServiceConfiguration" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SecurityTokenServiceConfiguration As SecurityTokenServiceConfiguration" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::IdentityModel::Configuration::SecurityTokenServiceConfiguration ^ SecurityTokenServiceConfiguration { System::IdentityModel::Configuration::SecurityTokenServiceConfiguration ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SecurityTokenServiceConfiguration : System.IdentityModel.Configuration.SecurityTokenServiceConfiguration" Usage="System.IdentityModel.SecurityTokenService.SecurityTokenServiceConfiguration" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Configuration.SecurityTokenServiceConfiguration</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wystąpienie konfiguracji właściciela.</summary>
        <value>A <see cref="T:System.IdentityModel.Configuration.SecurityTokenServiceConfiguration" /> , który zawiera konfigurację dla bieżącego wystąpienia.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public virtual System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse Validate (System.Security.Claims.ClaimsPrincipal principal, System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse Validate(class System.Security.Claims.ClaimsPrincipal principal, class System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.SecurityTokenService.Validate(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Validate (principal As ClaimsPrincipal, request As RequestSecurityToken) As RequestSecurityTokenResponse" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::IdentityModel::Protocols::WSTrust::RequestSecurityTokenResponse ^ Validate(System::Security::Claims::ClaimsPrincipal ^ principal, System::IdentityModel::Protocols::WSTrust::RequestSecurityToken ^ request);" />
      <MemberSignature Language="F#" Value="abstract member Validate : System.Security.Claims.ClaimsPrincipal * System.IdentityModel.Protocols.WSTrust.RequestSecurityToken -&gt; System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse&#xA;override this.Validate : System.Security.Claims.ClaimsPrincipal * System.IdentityModel.Protocols.WSTrust.RequestSecurityToken -&gt; System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" Usage="securityTokenService.Validate (principal, request)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="principal" Type="System.Security.Claims.ClaimsPrincipal" />
        <Parameter Name="request" Type="System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" />
      </Parameters>
      <Docs>
        <param name="principal"><see cref="T:System.Security.Claims.ClaimsPrincipal" /> Reprezentuje tożsamość żądającego tokenu.</param>
        <param name="request"><see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> Reprezentuje żądanie tokenu zabezpieczającego. Obejmuje to komunikat żądania, a także inne informacje związane z klientem, takie jak kontekst autoryzacji.</param>
        <summary>Gdy jest zastępowany w klasie pochodnej, przetwarza żądanie weryfikacji WS-Trust.</summary>
        <returns><see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityTokenResponse" /> Reprezentujący RSTR do powrotu do obiektu wywołującego.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślna implementacja tej metody zgłasza <xref:System.IdentityModel.Protocols.WSTrust.InvalidRequestException>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateRequest">
      <MemberSignature Language="C#" Value="protected virtual void ValidateRequest (System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ValidateRequest(class System.IdentityModel.Protocols.WSTrust.RequestSecurityToken request) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.SecurityTokenService.ValidateRequest(System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub ValidateRequest (request As RequestSecurityToken)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void ValidateRequest(System::IdentityModel::Protocols::WSTrust::RequestSecurityToken ^ request);" />
      <MemberSignature Language="F#" Value="abstract member ValidateRequest : System.IdentityModel.Protocols.WSTrust.RequestSecurityToken -&gt; unit&#xA;override this.ValidateRequest : System.IdentityModel.Protocols.WSTrust.RequestSecurityToken -&gt; unit" Usage="securityTokenService.ValidateRequest request" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="request" Type="System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" />
      </Parameters>
      <Docs>
        <param name="request"><see cref="T:System.IdentityModel.Protocols.WSTrust.RequestSecurityToken" /> Reprezentuje żądanie.</param>
        <summary>Sprawdza poprawność żądania tokenu zabezpieczającego hermetyzowanego przez to wystąpienie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda jest wywoływana z potoku wystawiania tokenów <xref:System.IdentityModel.SecurityTokenService.Issue%2A> (Metoda) do walidacji przychodzącego RST. <xref:System.IdentityModel.SecurityTokenService.ValidateRequest%2A> Parametr RST jest sprawdzany pod kątem wymagań (zasad) usługi STS i jest generowany odpowiedni wyjątek, jeśli jest nieprawidłowy.  
  
 Domyślna implementacja <xref:System.IdentityModel.SecurityTokenService> klasy obsługuje tylko wzorzec RST-RSTR i tylko powiązanie problemu ze specyfikacją WS-Trust <xref:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.RequestType%2A> (Właściwość żądania musi być ustawiona na <xref:System.IdentityModel.Protocols.WSTrust.RequestTypes.Issue?displayProperty=nameWithType>). Domyślna implementacja tej metody wymusza te wymagania (i inne zanotowane w sekcji wyjątki). Tę metodę można zastąpić, jeśli trzeba wymusić różne wymagania dotyczące weryfikacji dla niestandardowej usługi STS.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IdentityModel.Protocols.WSTrust.InvalidRequestException"><paramref name="request" />jest <see langword="null" />.  
  
—lub— 
Właściwość żądania nie jest ustawiona na <see cref="F:System.IdentityModel.Protocols.WSTrust.RequestTypes.Issue" />wartość. <see cref="P:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.RequestType" />  
  
—lub— 
Właściwość żądania nie <see langword="null" /> jest lub jest jedną ze stałych zdefiniowanych w <see cref="T:System.IdentityModel.Protocols.WSTrust.KeyTypes" /> klasie. <see cref="P:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.KeyType" />  
  
—lub— 
Żądanie jest <see cref="F:System.IdentityModel.Protocols.WSTrust.KeyTypes.Bearer" /> i<see langword="KeySize" /> element jest obecny, ale jego wartość nie jest równa zero. <see cref="P:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.KeyType" /></exception>
        <exception cref="T:System.IdentityModel.UnsupportedTokenTypeBadRequestException">Usługa STS nie obsługuje typu tokenu żądania (na podstawie wartości <see cref="P:System.IdentityModel.Protocols.WSTrust.WSTrustMessage.TokenType" /> właściwości żądania).</exception>
        <altmember cref="M:System.IdentityModel.SecurityTokenService.Issue(System.Security.Claims.ClaimsPrincipal,System.IdentityModel.Protocols.WSTrust.RequestSecurityToken)" />
      </Docs>
    </Member>
  </Members>
</Type>
