<Type Name="UserNamePasswordValidator" FullName="System.IdentityModel.Selectors.UserNamePasswordValidator">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ff7e43e2bd11e4d3c7f78b56bff61622938ec77b" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69283741" /></Metadata><TypeSignature Language="C#" Value="public abstract class UserNamePasswordValidator" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit UserNamePasswordValidator extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.IdentityModel.Selectors.UserNamePasswordValidator" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class UserNamePasswordValidator" />
  <TypeSignature Language="C++ CLI" Value="public ref class UserNamePasswordValidator abstract" />
  <TypeSignature Language="F#" Value="type UserNamePasswordValidator = class" />
  <AssemblyInfo>
    <AssemblyName>System.IdentityModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Sprawdza nazwę użytkownika i hasło.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj klasy <xref:System.IdentityModel.Selectors.UserNamePasswordValidator> , aby określić, jak sprawdzana jest nazwa użytkownika i hasło. Można to zrobić, wprowadzając klasę z <xref:System.IdentityModel.Selectors.UserNamePasswordValidator> i <xref:System.IdentityModel.Selectors.UserNamePasswordValidator.Validate%2A> zastępując metodę. Aby uzyskać więcej informacji na temat tworzenia niestandardowej nazwy użytkownika i modułu weryfikacji hasła [, zobacz How to: Użyj niestandardowej nazwy użytkownika i modułu sprawdzania](~/docs/framework/wcf/feature-details/how-to-use-a-custom-user-name-and-password-validator.md)haseł.  
  
   
  
## Examples  
 [!code-csharp[c_UsernameValidator#1](~/samples/snippets/csharp/VS_Snippets_CFX/c_usernamevalidator/cs/service.cs#1)]
 [!code-vb[c_UsernameValidator#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/c_usernamevalidator/vb/service.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected UserNamePasswordValidator ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Selectors.UserNamePasswordValidator.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; UserNamePasswordValidator();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.IdentityModel.Selectors.UserNamePasswordValidator" /> klasy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateMembershipProviderValidator">
      <MemberSignature Language="C#" Value="public static System.IdentityModel.Selectors.UserNamePasswordValidator CreateMembershipProviderValidator (System.Web.Security.MembershipProvider provider);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IdentityModel.Selectors.UserNamePasswordValidator CreateMembershipProviderValidator(class System.Web.Security.MembershipProvider provider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Selectors.UserNamePasswordValidator.CreateMembershipProviderValidator(System.Web.Security.MembershipProvider)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateMembershipProviderValidator (provider As MembershipProvider) As UserNamePasswordValidator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::IdentityModel::Selectors::UserNamePasswordValidator ^ CreateMembershipProviderValidator(System::Web::Security::MembershipProvider ^ provider);" />
      <MemberSignature Language="F#" Value="static member CreateMembershipProviderValidator : System.Web.Security.MembershipProvider -&gt; System.IdentityModel.Selectors.UserNamePasswordValidator" Usage="System.IdentityModel.Selectors.UserNamePasswordValidator.CreateMembershipProviderValidator provider" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Selectors.UserNamePasswordValidator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="provider" Type="System.Web.Security.MembershipProvider" />
      </Parameters>
      <Docs>
        <param name="provider">A <see cref="T:System.Web.Security.MembershipProvider" /> w celu zweryfikowania nazwy użytkownika i hasła.</param>
        <summary>Pobiera wystąpienie <see cref="T:System.IdentityModel.Selectors.UserNamePasswordValidator" /> , które sprawdza nazwę użytkownika i hasło przy użyciu określonego dostawcy członkostwa.</summary>
        <returns>, Który sprawdza poprawność nazwy użytkownika i hasła przy użyciu <paramref name="provider" />. <see cref="T:System.IdentityModel.Selectors.UserNamePasswordValidator" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość tej właściwości statycznej może być podana jako parametr do jednego z konstruktorów dla <xref:System.IdentityModel.Selectors.UserNameSecurityTokenAuthenticator> klasy.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="None">
      <MemberSignature Language="C#" Value="public static System.IdentityModel.Selectors.UserNamePasswordValidator None { get; }" />
      <MemberSignature Language="ILAsm" Value=".property class System.IdentityModel.Selectors.UserNamePasswordValidator None" />
      <MemberSignature Language="DocId" Value="P:System.IdentityModel.Selectors.UserNamePasswordValidator.None" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Property None As UserNamePasswordValidator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static property System::IdentityModel::Selectors::UserNamePasswordValidator ^ None { System::IdentityModel::Selectors::UserNamePasswordValidator ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.None : System.IdentityModel.Selectors.UserNamePasswordValidator" Usage="System.IdentityModel.Selectors.UserNamePasswordValidator.None" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IdentityModel.Selectors.UserNamePasswordValidator</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera moduł walidacji, który nie sprawdza poprawności nazwy użytkownika i hasła. W związku z tym nazwa użytkownika i hasło są zawsze uznawane za ważne.</summary>
        <value><see cref="T:System.IdentityModel.Selectors.UserNamePasswordValidator" /> To nie sprawdza poprawności nazwy użytkownika i hasła.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość tej właściwości statycznej może być podana jako parametr do jednego z konstruktorów dla <xref:System.IdentityModel.Selectors.UserNameSecurityTokenAuthenticator> klasy.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public abstract void Validate (string userName, string password);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Validate(string userName, string password) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.IdentityModel.Selectors.UserNamePasswordValidator.Validate(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub Validate (userName As String, password As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void Validate(System::String ^ userName, System::String ^ password);" />
      <MemberSignature Language="F#" Value="abstract member Validate : string * string -&gt; unit" Usage="userNamePasswordValidator.Validate (userName, password)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.IdentityModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userName" Type="System.String" />
        <Parameter Name="password" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="userName">Nazwa użytkownika do zweryfikowania.</param>
        <param name="password">Hasło do zweryfikowania.</param>
        <summary>Gdy jest zastępowany w klasie pochodnej, sprawdza poprawność określonej nazwy użytkownika i hasła.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zastąp <xref:System.IdentityModel.Selectors.UserNamePasswordValidator.Validate%2A> metodę, aby określić, jak sprawdzana jest nazwa użytkownika i hasło. Jeśli nazwa użytkownika i hasło nie przeszły walidacji, należy zgłosić <xref:System.IdentityModel.Tokens.SecurityTokenValidationException>.  
  
   
  
## Examples  
 [!code-csharp[c_UsernameValidator#2](~/samples/snippets/csharp/VS_Snippets_CFX/c_usernamevalidator/cs/service.cs#2)]
 [!code-vb[c_UsernameValidator#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/c_usernamevalidator/vb/service.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
