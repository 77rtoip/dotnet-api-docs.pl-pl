<Type Name="OleDbDataAdapter" FullName="System.Data.OleDb.OleDbDataAdapter">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="0194a2bd3b968b32577535fb7ef20df04c38b1d2" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30446817" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class OleDbDataAdapter : System.Data.Common.DbDataAdapter, ICloneable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit OleDbDataAdapter extends System.Data.Common.DbDataAdapter implements class System.Data.IDataAdapter, class System.Data.IDbDataAdapter, class System.ICloneable" />
  <TypeSignature Language="DocId" Value="T:System.Data.OleDb.OleDbDataAdapter" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class OleDbDataAdapter&#xA;Inherits DbDataAdapter&#xA;Implements ICloneable" />
  <TypeSignature Language="C++ CLI" Value="public ref class OleDbDataAdapter sealed : System::Data::Common::DbDataAdapter, ICloneable" />
  <AssemblyInfo>
    <AssemblyName>System.Data</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Data.Common.DbDataAdapter</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ICloneable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("RowUpdated")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("Microsoft.VSDesigner.Data.VS.OleDbDataAdapterDesigner, Microsoft.VSDesigner, Version=0.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.ToolboxItem("Microsoft.VSDesigner.Data.VS.OleDbDataAdapterToolboxItem, Microsoft.VSDesigner, Version=0.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Reprezentuje zestaw poleceń danych i połączenie z bazą danych, które są używane do wypełnienia <see cref="T:System.Data.DataSet" /> i zaktualizować źródła danych.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Data.OleDb.OleDbDataAdapter> Służy jako mostka między <xref:System.Data.DataSet> i źródła danych do pobierania i zapisywania danych. <xref:System.Data.OleDb.OleDbDataAdapter> Zapewnia to mostek przy użyciu <xref:System.Data.Common.DbDataAdapter.Fill%2A> do ładowania danych z źródła danych do <xref:System.Data.DataSet>i przy użyciu <xref:System.Data.Common.DbDataAdapter.Update%2A> Aby wysłać zmiany wprowadzone w <xref:System.Data.DataSet> do źródła danych.  
  
 Gdy <xref:System.Data.OleDb.OleDbDataAdapter> wypełnia <xref:System.Data.DataSet>, jeśli jeszcze nie istnieje zostanie utworzony odpowiedni tabel i kolumn dla zwracanych danych. Jednak informacje o kluczu podstawowym nie wchodzi w schemacie niejawnie tworzonych chyba że <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> właściwość jest ustawiona na <xref:System.Data.MissingSchemaAction.AddWithKey>. Może być konieczne <xref:System.Data.OleDb.OleDbDataAdapter> utworzyć schemat <xref:System.Data.DataSet>, w tym informacje o kluczu podstawowym, przed wypełnianie danych przy użyciu <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>. Aby uzyskać więcej informacji, zobacz [Dodawanie istniejących ograniczeń do zestawu danych](~/docs/framework/data/adonet/adding-existing-constraints-to-a-dataset.md).  
  
 Należy pamiętać, że niektóre dostawców OLE DB, w tym dostawcy MSDataShape nie zwrócą informacji o tabeli podstawowej lub informacje o kluczu podstawowym. W związku z tym <xref:System.Data.OleDb.OleDbDataAdapter> nie można poprawnie ustawić <xref:System.Data.DataTable.PrimaryKey%2A> właściwości na dowolnym utworzony <xref:System.Data.DataTable>. W takich sytuacjach należy jawnie określić kluczy podstawowych dla tabel w <xref:System.Data.DataSet>.  
  
 <xref:System.Data.OleDb.OleDbDataAdapter> Obejmuje również <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A>, <xref:System.Data.OleDb.OleDbDataAdapter.InsertCommand%2A>, <xref:System.Data.OleDb.OleDbDataAdapter.DeleteCommand%2A>, <xref:System.Data.OleDb.OleDbDataAdapter.UpdateCommand%2A>, i <xref:System.Data.Common.DataAdapter.TableMappings%2A> właściwości, aby ułatwić ładowanie i aktualizowania danych.  
  
 Podczas tworzenia wystąpienia <xref:System.Data.OleDb.OleDbDataAdapter>, właściwości są ustawione na wartości początkowe. Aby uzyskać listę tych wartości, zobacz <xref:System.Data.OleDb.OleDbDataAdapter> konstruktora.  
  
   
  
## Examples  
 W poniższym przykładzie użyto <xref:System.Data.OleDb.OleDbCommand>, <xref:System.Data.OleDb.OleDbDataAdapter> i <xref:System.Data.OleDb.OleDbConnection>, aby wybrać rekordy ze źródła danych programu Access i wypełnić <xref:System.Data.DataSet> z zaznaczonych wierszy. Wypełniony <xref:System.Data.DataSet> jest następnie zwracany. Aby to zrobić, metoda jest przekazywana zainicjowane <xref:System.Data.DataSet>, ciąg połączenia i ciągu zapytania, który jest instrukcję SQL SELECT.  
  
 [!code-csharp[Classic WebData OleDbDataAdapter Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData OleDbDataAdapter Example/CS/source.cs#1)]
 [!code-vb[Classic WebData OleDbDataAdapter Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData OleDbDataAdapter Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Data.OleDb.OleDbDataAdapter" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OleDbDataAdapter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbDataAdapter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; OleDbDataAdapter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Data.OleDb.OleDbDataAdapter" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podczas tworzenia wystąpienia <xref:System.Data.OleDb.OleDbDataAdapter>, następujące właściwości odczytu/zapisu są ustawione na następujące wartości początkowej.  
  
|Właściwości|Wartość początkowa|  
|----------------|-------------------|  
|<xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>|`MissingMappingAction.Passthrough`|  
|<xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>|`MissingSchemaAction.Add`|  
  
 Można zmienić wartości tych właściwości, za pomocą oddzielnego wywołania do właściwości.  
  
   
  
## Examples  
 Poniższy przykład tworzy <xref:System.Data.OleDb.OleDbDataAdapter> i ustawia niektóre jego właściwości.  
  
 [!code-csharp[Classic WebData OleDbDataAdapter.OleDbDataAdapter Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData OleDbDataAdapter.OleDbDataAdapter Example/CS/source.cs#1)]
 [!code-vb[Classic WebData OleDbDataAdapter.OleDbDataAdapter Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData OleDbDataAdapter.OleDbDataAdapter Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OleDbDataAdapter (System.Data.OleDb.OleDbCommand selectCommand);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Data.OleDb.OleDbCommand selectCommand) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbDataAdapter.#ctor(System.Data.OleDb.OleDbCommand)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (selectCommand As OleDbCommand)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; OleDbDataAdapter(System::Data::OleDb::OleDbCommand ^ selectCommand);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="selectCommand" Type="System.Data.OleDb.OleDbCommand" />
      </Parameters>
      <Docs>
        <param name="selectCommand">
          <see cref="T:System.Data.OleDb.OleDbCommand" /> Jest wybierz instrukcji lub procedury składowanej, a jest ustawiana jako <see cref="P:System.Data.OleDb.OleDbDataAdapter.SelectCommand" /> właściwość <see cref="T:System.Data.OleDb.OleDbDataAdapter" />.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Data.OleDb.OleDbDataAdapter" /> klasy z określonym <see cref="T:System.Data.OleDb.OleDbCommand" /> jako <see cref="P:System.Data.OleDb.OleDbDataAdapter.SelectCommand" /> właściwości.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta implementacja <xref:System.Data.OleDb.OleDbDataAdapter> ustawia konstruktora <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A> właściwości do wartości określonej w `selectCommand` parametru.  
  
 Podczas tworzenia wystąpienia <xref:System.Data.OleDb.OleDbDataAdapter>, następujące właściwości odczytu/zapisu są ustawione na następujące wartości początkowej.  
  
|Właściwości|Wartość początkowa|  
|----------------|-------------------|  
|<xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>|`MissingMappingAction.Passthrough`|  
|<xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>|`MissingSchemaAction.Add`|  
  
 Można zmienić wartości tych właściwości, za pomocą oddzielnego wywołania do właściwości.  
  
   
  
## Examples  
 Poniższy przykład tworzy <xref:System.Data.OleDb.OleDbDataAdapter> i ustawia niektóre jego właściwości.  
  
 [!code-csharp[Classic WebData OleDbDataAdapter.OleDbDataAdapter1 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData OleDbDataAdapter.OleDbDataAdapter1 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData OleDbDataAdapter.OleDbDataAdapter1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData OleDbDataAdapter.OleDbDataAdapter1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OleDbDataAdapter (string selectCommandText, System.Data.OleDb.OleDbConnection selectConnection);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string selectCommandText, class System.Data.OleDb.OleDbConnection selectConnection) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbDataAdapter.#ctor(System.String,System.Data.OleDb.OleDbConnection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (selectCommandText As String, selectConnection As OleDbConnection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; OleDbDataAdapter(System::String ^ selectCommandText, System::Data::OleDb::OleDbConnection ^ selectConnection);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="selectCommandText" Type="System.String" />
        <Parameter Name="selectConnection" Type="System.Data.OleDb.OleDbConnection" />
      </Parameters>
      <Docs>
        <param name="selectCommandText">Ciąg znaków będący SQL SELECT instrukcji lub procedury składowanej, który będzie używany przez <see cref="P:System.Data.OleDb.OleDbDataAdapter.SelectCommand" /> właściwość <see cref="T:System.Data.OleDb.OleDbDataAdapter" />.</param>
        <param name="selectConnection">
          <see cref="T:System.Data.OleDb.OleDbConnection" /> Reprezentujący połączenie.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Data.OleDb.OleDbDataAdapter" /> klasy z <see cref="P:System.Data.OleDb.OleDbDataAdapter.SelectCommand" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta implementacja <xref:System.Data.OleDb.OleDbDataAdapter> otwiera i zamyka <xref:System.Data.OleDb.OleDbConnection> Jeśli nie jest już otwarty. Może to być przydatne w aplikacji, który musi wywołać <xref:System.Data.Common.DbDataAdapter.Fill%2A> metodę dla co najmniej dwa <xref:System.Data.OleDb.OleDbDataAdapter> obiektów. Jeśli <xref:System.Data.OleDb.OleDbConnection> jest już otwarty, użytkownik musi jawnie wywołać <xref:System.Data.OleDb.OleDbConnection.Close%2A> lub **Dispose** go zamknąć.  
  
 Podczas tworzenia wystąpienia <xref:System.Data.OleDb.OleDbDataAdapter>, następujące właściwości odczytu/zapisu są ustawione na następujące wartości początkowej.  
  
|Właściwości|Wartość początkowa|  
|----------------|-------------------|  
|<xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>|`MissingMappingAction.Passthrough`|  
|<xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>|`MissingSchemaAction.Add`|  
  
 Można zmienić wartości tych właściwości, za pomocą oddzielnego wywołania do właściwości.  
  
   
  
## Examples  
 Poniższy przykład tworzy <xref:System.Data.OleDb.OleDbDataAdapter> i ustawia niektóre jego właściwości.  
  
 [!code-csharp[Classic WebData OleDbDataAdapter.OleDbDataAdapter3 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData OleDbDataAdapter.OleDbDataAdapter3 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData OleDbDataAdapter.OleDbDataAdapter3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData OleDbDataAdapter.OleDbDataAdapter3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OleDbDataAdapter (string selectCommandText, string selectConnectionString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string selectCommandText, string selectConnectionString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbDataAdapter.#ctor(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (selectCommandText As String, selectConnectionString As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; OleDbDataAdapter(System::String ^ selectCommandText, System::String ^ selectConnectionString);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="selectCommandText" Type="System.String" />
        <Parameter Name="selectConnectionString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="selectCommandText">Ciąg znaków będący SQL SELECT instrukcji lub procedury składowanej, który będzie używany przez <see cref="P:System.Data.OleDb.OleDbDataAdapter.SelectCommand" /> właściwość <see cref="T:System.Data.OleDb.OleDbDataAdapter" />.</param>
        <param name="selectConnectionString">Parametry połączenia.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Data.OleDb.OleDbDataAdapter" /> klasy z <see cref="P:System.Data.OleDb.OleDbDataAdapter.SelectCommand" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To przeciążenie metody <xref:System.Data.OleDb.OleDbDataAdapter> Konstruktor korzysta `selectConnectionString` parametr, aby ustawić <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A> właściwości. Połączenie nie są jednak otworzyć. Nadal trzeba jawnie otwierania połączenia.  
  
 Podczas tworzenia wystąpienia <xref:System.Data.OleDb.OleDbDataAdapter>, następujące właściwości odczytu/zapisu są ustawione na następujące wartości początkowej.  
  
|Właściwości|Wartość początkowa|  
|----------------|-------------------|  
|<xref:System.Data.Common.DataAdapter.MissingMappingAction%2A>|`MissingMappingAction.Passthrough`|  
|<xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A>|`MissingSchemaAction.Add`|  
  
 Można zmienić wartości tych właściwości, za pomocą oddzielnego wywołania do właściwości.  
  
   
  
## Examples  
 Poniższy przykład tworzy <xref:System.Data.OleDb.OleDbDataAdapter> i ustawia niektóre jego właściwości.  
  
 [!code-csharp[Classic WebData OleDbDataAdapter.OleDbDataAdapter2 Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData OleDbDataAdapter.OleDbDataAdapter2 Example/CS/source.cs#1)]
 [!code-vb[Classic WebData OleDbDataAdapter.OleDbDataAdapter2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData OleDbDataAdapter.OleDbDataAdapter2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateRowUpdatedEvent">
      <MemberSignature Language="C#" Value="protected override System.Data.Common.RowUpdatedEventArgs CreateRowUpdatedEvent (System.Data.DataRow dataRow, System.Data.IDbCommand command, System.Data.StatementType statementType, System.Data.Common.DataTableMapping tableMapping);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Data.Common.RowUpdatedEventArgs CreateRowUpdatedEvent(class System.Data.DataRow dataRow, class System.Data.IDbCommand command, valuetype System.Data.StatementType statementType, class System.Data.Common.DataTableMapping tableMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbDataAdapter.CreateRowUpdatedEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Data::Common::RowUpdatedEventArgs ^ CreateRowUpdatedEvent(System::Data::DataRow ^ dataRow, System::Data::IDbCommand ^ command, System::Data::StatementType statementType, System::Data::Common::DataTableMapping ^ tableMapping);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.RowUpdatedEventArgs</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataRow" Type="System.Data.DataRow" />
        <Parameter Name="command" Type="System.Data.IDbCommand" />
        <Parameter Name="statementType" Type="System.Data.StatementType" />
        <Parameter Name="tableMapping" Type="System.Data.Common.DataTableMapping" />
      </Parameters>
      <Docs>
        <param name="dataRow">To be added.</param>
        <param name="command">To be added.</param>
        <param name="statementType">To be added.</param>
        <param name="tableMapping">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateRowUpdatingEvent">
      <MemberSignature Language="C#" Value="protected override System.Data.Common.RowUpdatingEventArgs CreateRowUpdatingEvent (System.Data.DataRow dataRow, System.Data.IDbCommand command, System.Data.StatementType statementType, System.Data.Common.DataTableMapping tableMapping);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Data.Common.RowUpdatingEventArgs CreateRowUpdatingEvent(class System.Data.DataRow dataRow, class System.Data.IDbCommand command, valuetype System.Data.StatementType statementType, class System.Data.Common.DataTableMapping tableMapping) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbDataAdapter.CreateRowUpdatingEvent(System.Data.DataRow,System.Data.IDbCommand,System.Data.StatementType,System.Data.Common.DataTableMapping)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Data::Common::RowUpdatingEventArgs ^ CreateRowUpdatingEvent(System::Data::DataRow ^ dataRow, System::Data::IDbCommand ^ command, System::Data::StatementType statementType, System::Data::Common::DataTableMapping ^ tableMapping);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.Common.RowUpdatingEventArgs</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataRow" Type="System.Data.DataRow" />
        <Parameter Name="command" Type="System.Data.IDbCommand" />
        <Parameter Name="statementType" Type="System.Data.StatementType" />
        <Parameter Name="tableMapping" Type="System.Data.Common.DataTableMapping" />
      </Parameters>
      <Docs>
        <param name="dataRow">To be added.</param>
        <param name="command">To be added.</param>
        <param name="statementType">To be added.</param>
        <param name="tableMapping">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteCommand">
      <MemberSignature Language="C#" Value="public System.Data.OleDb.OleDbCommand DeleteCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.OleDb.OleDbCommand DeleteCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.OleDb.OleDbDataAdapter.DeleteCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property DeleteCommand As OleDbCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::OleDb::OleDbCommand ^ DeleteCommand { System::Data::OleDb::OleDbCommand ^ get(); void set(System::Data::OleDb::OleDbCommand ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("Microsoft.VSDesigner.Data.Design.DBCommandEditor, Microsoft.VSDesigner, Version=0.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.OleDb.OleDbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia instrukcję SQL lub procedurę składowaną usuwania rekordów z zestawu danych.</summary>
        <value>
          <see cref="T:System.Data.OleDb.OleDbCommand" /> Używane podczas <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> do usuwania rekordów w źródle danych, które odpowiadają usuniętych wierszy w <see cref="T:System.Data.DataSet" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podczas <xref:System.Data.Common.DbDataAdapter.Update%2A>, jeśli ta właściwość nie jest ustawiona i informacje o kluczu podstawowym znajduje się w <xref:System.Data.DataSet>, <xref:System.Data.OleDb.OleDbDataAdapter.DeleteCommand%2A> mogą być generowane automatycznie, jeśli ustawisz <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A> właściwości i użyj <xref:System.Data.OleDb.OleDbCommandBuilder>. Następnie dowolne dodatkowe polecenia, które nie zostały ustawione są generowane przez <xref:System.Data.OleDb.OleDbCommandBuilder>. Tę logikę generowania wymaga informacji o kolumnie klucza znajdować się w <xref:System.Data.DataSet>. Aby uzyskać więcej informacji, zobacz [generowania poleceń CommandBuilders](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md).  
  
 Gdy <xref:System.Data.OleDb.OleDbDataAdapter.DeleteCommand%2A> jest przypisany do wcześniej utworzonego <xref:System.Data.OleDb.OleDbCommand>, <xref:System.Data.OleDb.OleDbCommand> nie został sklonowany. <xref:System.Data.OleDb.OleDbDataAdapter.DeleteCommand%2A> Przechowuje odwołanie do utworzonego wcześniej <xref:System.Data.OleDb.OleDbCommand> obiektu.  
  
   
  
## Examples  
 Poniższy przykład tworzy <xref:System.Data.OleDb.OleDbDataAdapter> i ustawia <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A> i <xref:System.Data.OleDb.OleDbDataAdapter.DeleteCommand%2A> właściwości. Przyjęto założenie, że utworzono już <xref:System.Data.OleDb.OleDbConnection> obiektu.  
  
 [!code-csharp[Classic WebData DbDataAdapter.DeleteCommand Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.DeleteCommand Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.DeleteCommand Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.DeleteCommand Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Fill">
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Dodaje lub odświeża wierszy w <see cref="T:System.Data.DataSet" /> do odpowiadają ADO <see langword="Recordset" /> lub <see langword="Record" /> obiektu.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="public int Fill (System.Data.DataTable dataTable, object ADODBRecordSet);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Fill(class System.Data.DataTable dataTable, object ADODBRecordSet) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbDataAdapter.Fill(System.Data.DataTable,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Fill(System::Data::DataTable ^ dataTable, System::Object ^ ADODBRecordSet);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataTable" Type="System.Data.DataTable" />
        <Parameter Name="ADODBRecordSet" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="dataTable">A <see cref="T:System.Data.DataTable" /> umożliwia wypełnienie rekordów i, jeśli jest to wymagane, schematu.</param>
        <param name="ADODBRecordSet">ADO <see langword="Recordset" /> lub <see langword="Record" /> obiektu.</param>
        <summary>Dodaje lub odświeża wierszy w <see cref="T:System.Data.DataTable" /> do odpowiadają ADO <see langword="Recordset" /> lub <see langword="Record" /> przy użyciu określonego <see cref="T:System.Data.DataTable" /> oraz obiektów ADO.</summary>
        <returns>Liczba wierszy pomyślnie odświeżane <see cref="T:System.Data.DataTable" />. Nie zawiera wierszy objętych instrukcji, które niezwracanie wierszy.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Powiązanie obiektów ADO (ActiveX Data) i ADO.NET jest Operacja jednokierunkowa, w tym można skopiować danych z ADO do <xref:System.Data.DataSet>, ale wszelkie zmiany danych musi być obsługiwane przez ADO.NET.  
  
 To przeciążenie metody <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A> — metoda nie zamyka danych wejściowych `Recordset` po zakończeniu <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A> operacji.  
  
 Podczas przetwarzania wsadowego instrukcji SQL, które zwracają wiele wartości, ta implementacja <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A> i <xref:System.Data.Common.DbDataAdapter.FillSchema%2A> dla informacji o schemacie dla pierwszego wyniku pobiera OLE DB.NET Framework dostawcę danych.  
  
 <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A> Operacji dodaje wiersze do określonej lokalizacji docelowej <xref:System.Data.DataTable> obiektu w <xref:System.Data.DataSet>, tworzenie <xref:System.Data.DataTable> obiektu, jeśli go jeszcze nie istnieje. Po utworzeniu <xref:System.Data.DataTable> obiektu <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A> operacji zwykle tworzy tylko metadane nazwy kolumny. Jednak jeśli <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> właściwość jest ustawiona na `AddWithKey`, również są tworzone odpowiednie klucze podstawowe i ograniczeń.  
  
 Można użyć <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A> metody wiele razy w tym samym <xref:System.Data.DataTable>. Jeśli klucz podstawowy istnieje, przychodzących wierszy są scalane z pasujących wierszy, które już istnieją. Jeśli klucz podstawowy istnieje, przychodzących wierszy są dołączane do <xref:System.Data.DataTable>. Jeśli informacje o kluczu podstawowym jest obecny, wszystkie zduplikowane wiersze są uzgadniane i są wyświetlane tylko jeden raz w <xref:System.Data.DataTable> odpowiadający <xref:System.Data.DataSet>. Informacje o kluczu podstawowym można konfigurować za pośrednictwem <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, określając <xref:System.Data.DataTable.PrimaryKey%2A> właściwość <xref:System.Data.DataTable>, albo ustawiając <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> właściwości `AddWithKey`.  
  
 Jeśli <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A> zwraca wyniki OUTER JOIN `DataAdapter` nie ustawia <xref:System.Data.DataTable.PrimaryKey%2A> wartość powstałe w ten sposób <xref:System.Data.DataTable>. Zdefiniuj jawnie klucz podstawowy, aby upewnić się, że zduplikowane wiersze są rozpoznawane poprawnie. Aby uzyskać więcej informacji, zobacz [Definiowanie kluczy podstawowych](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md).  
  
 Do poprawnego działania z .NET Framework Data Provider for OLE DB, `AddWithKey` wymaga uzyskuje wymagane informacje o kluczu podstawowym przez ustawienie właściwości DBPROP_UNIQUEROWS macierzystych dostawców OLE DB i określa, które kolumny będą klucza podstawowego kolumny, sprawdzając DBCOLUMN_KEYCOLUMN w `IColumnsRowset`. Użytkownik może również jawnie ustawiona ograniczeń klucza podstawowego w każdym <xref:System.Data.DataTable>. Dzięki temu, że przychodzące rekordów, które spełniają istniejące rekordy są aktualizowane zamiast dołączane.  
  
 Jeśli <xref:System.Data.OleDb.OleDbDataAdapter> napotka zduplikowane kolumny podczas wypełniania <xref:System.Data.DataTable>, generuje nazwy dla kolejnych kolumn, używania wzorca "*columnname*1", "*columnname*2", "*columnname*3" i tak dalej. Pusta kolumna nazw są dodawane do <xref:System.Data.DataTable>, przy użyciu pustego ciągu dla pierwszej kolumny, a następnie "1", "2", "3" i tak dalej dla kolejnych puste kolumny.  
  
 Wartości w ADO `Recordset` lub `Record` obiekty są konwertowane na wspólnej języka typów środowiska wykonawczego dla magazynu w <xref:System.Data.DataSet>.  
  
> [!CAUTION]
>  To przeciążenie metody <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A> metoda niejawnie nie wywołuje `Close` obiektu ADO po zakończeniu operacji fill. W związku z tym wywoływanie zawsze `Close` po zakończeniu przy użyciu ADO `Recordset` lub `Record` obiektów. Dzięki temu podstawowego połączenia ze źródłem danych jest opublikowane w odpowiednim czasie i uniemożliwia także programowi naruszenia zasad dostępu możliwe z powodu niezarządzane obiekty ADO zostanie odzyskana przez wyrzucanie elementów bezużytecznych, gdy nadal istnieją odwołania istniejących.  
  
 Podczas wywoływania `TableMappings.Add` metoda `DataAdapter` i jawnie mapować parametr tabeli źródłowej na pusty ciąg, zestaw danych jest pomyślnie za pomocą tabeli źródłowej, ale zestaw danych zostanie wypełniona nothing. Na przykład w poniższym przykładzie `rDataSet` zostanie wypełniona nothing.  
  
```  
rAdapter.TableMappings.Add("source table", "");  
rAdapter.Fill(rDataSet, "source table");     
```  
  
 Ten przykład przedstawia, jak można pominąć wyniku podczas pracy nad wiele wyników.  
  
 W poniższym przykładzie użyto <xref:System.Data.OleDb.OleDbDataAdapter> do wypełnienia <xref:System.Data.DataTable> przy użyciu ADO `Recordset`. W tym przykładzie przyjęto założenie, że utworzono ADO `Recordset`.  
  
```vb  
Dim custDA As OleDbDataAdapter = New OleDbDataAdapter()  
     Dim custDS As DataSet = New DataSet  
     Dim custTable As DataTable = New DataTable("Customers")  
     custTable.Columns.Add("CustomerID", Type.GetType("System.String"))  
     custTable.Columns.Add("CompanyName", Type.GetType("System.String"))  
     custDS.Tables.Add(custTable)  
     'Use ADO objects from ADO library (msado15.dll) imported  
     ' as.NET library ADODB.dll using TlbImp.exe  
     Dim adoConn As ADODB.Connection = New ADODB.Connection()  
     Dim adoRS As ADODB.Recordset = New ADODB.Recordset()  
     adoConn.Open("Provider=SQLOLEDB;Data Source=localhost;Initial Catalog=Northwind;Integrated Security=SSPI;", "", "", -1)  
     adoRS.Open("SELECT CustomerID, CompanyName FROM Customers", adoConn, ADODB.CursorTypeEnum.adOpenForwardOnly, ADODB.LockTypeEnum.adLockReadOnly, 1)  
     custDA.Fill(custTable, adoRS)  
     adoRS.Close()  
     adoConn.Close()  
```  
  
```csharp  
OleDbDataAdapter custDA = new OleDbDataAdapter();  
     DataSet custDS = new DataSet();  
     DataTable custTable = new DataTable("Customers");  
     custTable.Columns.Add("CustomerID", typeof(String));  
     custTable.Columns.Add("CompanyName", typeof(String));  
     custDS.Tables.Add(custTable);  
     //Use ADO objects from ADO library (msado15.dll) imported  
     //  as.NET library ADODB.dll using TlbImp.exe  
     ADODB.Connection adoConn = new ADODB.Connection();  
     ADODB.Recordset adoRS = new ADODB.Recordset();  
     adoConn.Open("Provider=SQLOLEDB;Data Source=localhost;Initial Catalog=Northwind;Integrated Security=SSPI;", "", "", -1);  
     adoRS.Open("SELECT CustomerID, CompanyName FROM Customers", adoConn, ADODB.CursorTypeEnum.adOpenForwardOnly, ADODB.LockTypeEnum.adLockReadOnly, 1);  
     custDA.Fill(custTable, adoRS);  
     adoRS.Close();  
     adoConn.Close();  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Fill">
      <MemberSignature Language="C#" Value="public int Fill (System.Data.DataSet dataSet, object ADODBRecordSet, string srcTable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Fill(class System.Data.DataSet dataSet, object ADODBRecordSet, string srcTable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbDataAdapter.Fill(System.Data.DataSet,System.Object,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Fill(System::Data::DataSet ^ dataSet, System::Object ^ ADODBRecordSet, System::String ^ srcTable);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSet" Type="System.Data.DataSet" />
        <Parameter Name="ADODBRecordSet" Type="System.Object" />
        <Parameter Name="srcTable" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dataSet">A <see cref="T:System.Data.DataSet" /> umożliwia wypełnienie rekordów i, jeśli jest to wymagane, schematu.</param>
        <param name="ADODBRecordSet">ADO <see langword="Recordset" /> lub <see langword="Record" /> obiektu.</param>
        <param name="srcTable">Tabela źródłowa używany do mapowania tabeli.</param>
        <summary>Dodaje lub odświeża wierszy w <see cref="T:System.Data.DataSet" /> do odpowiadają ADO <see langword="Recordset" /> lub <see langword="Record" /> przy użyciu określonego <see cref="T:System.Data.DataSet" />, obiekt ADO i nazwy tabeli źródłowej.</summary>
        <returns>Liczba wierszy pomyślnie dodane do lub odświeżenia w <see cref="T:System.Data.DataSet" />. Nie zawiera wierszy objętych instrukcji, które niezwracanie wierszy.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Powiązanie obiektów ADO (ActiveX Data) i ADO.NET jest Operacja jednokierunkowa, w tym można skopiować danych z ADO do <xref:System.Data.DataSet>, ale wszelkie zmiany danych musi być obsługiwane przez ADO.NET.  
  
 <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A> Metody iteruje wiele wyników przez wywołanie metody `NextRecordset` metoda `Recordset`, zamykanie danych wejściowych `Recordset` po zakończeniu <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A> operacji.  
  
 <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A> Operacji dodaje wiersze do określonej lokalizacji docelowej <xref:System.Data.DataTable> obiektu w <xref:System.Data.DataSet>, tworzenie <xref:System.Data.DataTable> obiektu, jeśli go jeszcze nie istnieje. Po utworzeniu <xref:System.Data.DataTable> obiektu <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A> operacji zwykle tworzy tylko metadane nazwy kolumny. Jednak jeśli <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> właściwość jest ustawiona na `AddWithKey`, również są tworzone odpowiednie klucze podstawowe i ograniczeń.  
  
 Jeśli informacje o kluczu podstawowym jest obecny, wszystkie zduplikowane wiersze są uzgadniane i są wyświetlane tylko jeden raz w <xref:System.Data.DataTable> odpowiadający <xref:System.Data.DataSet>. Informacje o kluczu podstawowym można konfigurować za pośrednictwem <xref:System.Data.Common.DbDataAdapter.FillSchema%2A>, określając <xref:System.Data.DataTable.PrimaryKey%2A> właściwość <xref:System.Data.DataTable>, albo ustawiając <xref:System.Data.Common.DataAdapter.MissingSchemaAction%2A> właściwości `AddWithKey`.  
  
 Do poprawnego działania z .NET Framework Data Provider for OLE DB, `AddWithKey` wymaga macierzystych dostawców OLE DB uzyskać wymagane informacje o kluczu podstawowym przez ustawienie właściwości DBPROP_UNIQUEROWS, a następnie określ kolumny, które są klucza podstawowego kolumny, sprawdzając DBCOLUMN_KEYCOLUMN w **IColumnsRowset**. Użytkownik może również jawnie ustawiona ograniczeń klucza podstawowego w każdym <xref:System.Data.DataTable>. Dzięki temu, że przychodzące rekordów, które spełniają istniejące rekordy są aktualizowane zamiast dołączane.  
  
 Jeśli <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A> zwraca wyniki OUTER JOIN `DataAdapter` nie ustawia <xref:System.Data.DataTable.PrimaryKey%2A> wartość powstałe w ten sposób <xref:System.Data.DataTable>. Zdefiniuj jawnie klucz podstawowy, aby upewnić się, że zduplikowane wiersze są rozpoznawane poprawnie. Aby uzyskać więcej informacji, zobacz [Definiowanie kluczy podstawowych](~/docs/framework/data/adonet/dataset-datatable-dataview/defining-primary-keys.md).  
  
 Jeśli `Recordset` jest zamknięty przed rozpoczęciem <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A> operacja, nie zwróciło żadnych wyników błędu. Jest to wymagane do obsługi wielu wyników, ponieważ zapytań, które nie zwracają wierszy są wskazane przez zamkniętej `Recordset`. <xref:System.Data.OleDb.OleDbDataAdapter> Po prostu wywołuje `NextRecordset` na zamkniętym `Recordset` i kontynuować.  
  
 Jeśli wystąpi błąd podczas wypełniania zestawu danych, dodany przed wystąpieniem błędu wierszy pozostają w <xref:System.Data.DataSet>. Pozostałe operacja została przerwana.  
  
 Jeśli <xref:System.Data.Common.DbDataAdapter> obiektu wykryje zduplikowane kolumny podczas wypełniania <xref:System.Data.DataTable>, generuje nazwy dla kolejnych kolumn, używania wzorca "*columnname*1","*columnname*2", " *columnname*3" i tak dalej. Jeśli dane przychodzące zawiera kolumny bez nazwy, są umieszczane w <xref:System.Data.DataSet> zgodnie ze wzorcem "Kolumna1", "Column2" i tak dalej. Jeśli wiele zestawów wyników są dodawane do <xref:System.Data.DataSet> każdy zestaw wyników znajduje się w osobnej tabeli. Zestawy wyników dodatkowe są nazywane przez dołączenie wartości całkowitych na wartości do nazwy określonej tabeli (na przykład "Table", "Tabela1", "Tabela2" itd.). Aplikacje używające nazwy kolumn i tabel upewnij się, że nie występują konflikty z tych wzorców nazewnictwa.  
  
 Wartości w ADO `Recordset` lub `Record` obiekty są konwertowane na wspólnej języka typów środowiska wykonawczego dla magazynu w <xref:System.Data.DataSet>.  
  
> [!NOTE]
>  To przeciążenie metody <xref:System.Data.OleDb.OleDbDataAdapter.Fill%2A> niejawnie wywołuje metodę `Close` obiektu ADO po zakończeniu operacji fill.  
  
 W poniższym przykładzie użyto <xref:System.Data.OleDb.OleDbDataAdapter> do wypełnienia <xref:System.Data.DataSet> przy użyciu ADO `Recordset` czyli ADO `Record` obiektu. W tym przykładzie przyjęto założenie, że utworzono ADO `RecordSet` i `Record` obiektu.  
  
```vb  
Dim custDA As OleDbDataAdapter = New OleDbDataAdapter()  
     Dim custDS As DataSet = New DataSet  
     'Use ADO objects from ADO library (msado15.dll) imported  
     ' as.NET library ADODB.dll using TlbImp.exe  
     Dim adoConn As ADODB.Connection = New ADODB.Connection()  
     Dim adoRS As ADODB.Recordset = New ADODB.Recordset()  
     adoConn.Open("Provider=SQLOLEDB;Data Source=localhost;Initial Catalog=Northwind;Integrated Security=SSPI;", "", "", -1)  
     adoRS.Open("SELECT * FROM Customers", adoConn, ADODB.CursorTypeEnum.adOpenForwardOnly, ADODB.LockTypeEnum.adLockReadOnly, 1)  
     custDA.Fill(custDS, adoRS, "Customers")  
     adoConn.Close()  
```  
  
```csharp  
OleDbDataAdapter custDA = new OleDbDataAdapter();  
     DataSet custDS = new DataSet();  
     //Use ADO objects from ADO library (msado15.dll) imported  
     // as.NET library ADODB.dll using TlbImp.exe  
     ADODB.Connection adoConn = new ADODB.Connection();  
     ADODB.Recordset adoRS = new ADODB.Recordset();  
     adoConn.Open("Provider=SQLOLEDB;Data Source=localhost;Initial Catalog=Northwind;Integrated Security=SSPI;", "", "", -1);  
     adoRS.Open("SELECT * FROM Customers", adoConn, ADODB.CursorTypeEnum.adOpenForwardOnly, ADODB.LockTypeEnum.adLockReadOnly, 1);  
     custDA.Fill(custDS, adoRS, "Customers");  
     adoConn.Close();  
```  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.SystemException">Tabela źródłowa jest nieprawidłowa.</exception>
      </Docs>
    </Member>
    <Member MemberName="InsertCommand">
      <MemberSignature Language="C#" Value="public System.Data.OleDb.OleDbCommand InsertCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.OleDb.OleDbCommand InsertCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.OleDb.OleDbDataAdapter.InsertCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property InsertCommand As OleDbCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::OleDb::OleDbCommand ^ InsertCommand { System::Data::OleDb::OleDbCommand ^ get(); void set(System::Data::OleDb::OleDbCommand ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("Microsoft.VSDesigner.Data.Design.DBCommandEditor, Microsoft.VSDesigner, Version=0.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.OleDb.OleDbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia instrukcję SQL lub procedurę składowaną służy do wstawiania nowych rekordów do źródła danych.</summary>
        <value>
          <see cref="T:System.Data.OleDb.OleDbCommand" /> Używane podczas <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> do wstawiania rekordów w źródle danych, które odpowiadają nowych wierszy w <see cref="T:System.Data.DataSet" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podczas <xref:System.Data.Common.DbDataAdapter.Update%2A>, jeśli ta właściwość nie jest ustawiona i informacje o kluczu podstawowym znajduje się w <xref:System.Data.DataSet>, <xref:System.Data.OleDb.OleDbDataAdapter.InsertCommand%2A> mogą być generowane automatycznie, jeśli ustawisz <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A> właściwości i użyj <xref:System.Data.OleDb.OleDbCommandBuilder>. Następnie dowolne dodatkowe polecenia, które nie zostały ustawione są generowane przez <xref:System.Data.OleDb.OleDbCommandBuilder>. Tę logikę generowania wymaga informacji o kolumnie klucza znajdować się w <xref:System.Data.DataSet>. Aby uzyskać więcej informacji, zobacz [generowania poleceń CommandBuilders](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md).  
  
 Gdy <xref:System.Data.OleDb.OleDbDataAdapter.InsertCommand%2A> jest przypisany do wcześniej utworzonego <xref:System.Data.OleDb.OleDbCommand>, <xref:System.Data.OleDb.OleDbCommand> nie został sklonowany. <xref:System.Data.OleDb.OleDbDataAdapter.InsertCommand%2A> Przechowuje odwołanie do utworzonego wcześniej <xref:System.Data.OleDb.OleDbCommand> obiektu.  
  
> [!NOTE]
>  Jeśli wykonanie tego polecenia zwraca wiersze, te wiersze mogą być dodawane do <xref:System.Data.DataSet> w zależności od tego, jak ustawić <xref:System.Data.OleDb.OleDbCommand.UpdatedRowSource%2A> właściwość <xref:System.Data.OleDb.OleDbCommand> obiektu.  
  
   
  
## Examples  
 Poniższy przykład tworzy <xref:System.Data.OleDb.OleDbDataAdapter> i ustawia <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A> i <xref:System.Data.OleDb.OleDbDataAdapter.InsertCommand%2A> właściwości. Przyjęto założenie, że utworzono już <xref:System.Data.OleDb.OleDbConnection> obiektu.  
  
 [!code-csharp[Classic WebData DbDataAdapter.InsertCommand Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.InsertCommand Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.InsertCommand Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.InsertCommand Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnRowUpdated">
      <MemberSignature Language="C#" Value="protected override void OnRowUpdated (System.Data.Common.RowUpdatedEventArgs value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnRowUpdated(class System.Data.Common.RowUpdatedEventArgs value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbDataAdapter.OnRowUpdated(System.Data.Common.RowUpdatedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnRowUpdated (value As RowUpdatedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnRowUpdated(System::Data::Common::RowUpdatedEventArgs ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Data.Common.RowUpdatedEventArgs" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnRowUpdating">
      <MemberSignature Language="C#" Value="protected override void OnRowUpdating (System.Data.Common.RowUpdatingEventArgs value);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnRowUpdating(class System.Data.Common.RowUpdatingEventArgs value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbDataAdapter.OnRowUpdating(System.Data.Common.RowUpdatingEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnRowUpdating (value As RowUpdatingEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnRowUpdating(System::Data::Common::RowUpdatingEventArgs ^ value);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Data.Common.RowUpdatingEventArgs" />
      </Parameters>
      <Docs>
        <param name="value">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RowUpdated">
      <MemberSignature Language="C#" Value="public event System.Data.OleDb.OleDbRowUpdatedEventHandler RowUpdated;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Data.OleDb.OleDbRowUpdatedEventHandler RowUpdated" />
      <MemberSignature Language="DocId" Value="E:System.Data.OleDb.OleDbDataAdapter.RowUpdated" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event RowUpdated As OleDbRowUpdatedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Data::OleDb::OleDbRowUpdatedEventHandler ^ RowUpdated;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.OleDb.OleDbRowUpdatedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje w ciągu <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> po wykonaniu polecenia względem źródła danych. Próba aktualizacji. W związku z tym zdarzeniu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli używasz <xref:System.Data.Common.DbDataAdapter.Update%2A>, istnieją dwie zdarzeń zaktualizowany wiersz danych. Kolejność wykonywania jest następujący:  
  
1.  Wartości w <xref:System.Data.DataRow> zostaną przeniesione do wartości parametrów.  
  
2.  <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A> Zdarzenia.  
  
3.  Wykonuje polecenia.  
  
4.  Jeśli polecenie ma ustawioną wartość `FirstReturnedRecord`, pierwszy zwrócony wynik jest umieszczany w <xref:System.Data.DataRow>.  
  
5.  W przypadku parametrów wyjściowych są umieszczane w <xref:System.Data.DataRow>.  
  
6.  <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> Zdarzenia.  
  
7.  <xref:System.Data.DataRow.AcceptChanges%2A> jest wywoływana.  
  
   
  
## Examples  
 W poniższym przykładzie przedstawiono <xref:System.Data.OleDb.OleDbDataAdapter.RowUpdating> i <xref:System.Data.OleDb.OleDbDataAdapter.RowUpdated> zdarzenia używane.  
  
 [!code-csharp[Classic WebData OleDbDataAdapter.RowUpdated Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData OleDbDataAdapter.RowUpdated Example/CS/source.cs#1)]
 [!code-vb[Classic WebData OleDbDataAdapter.RowUpdated Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData OleDbDataAdapter.RowUpdated Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RowUpdating">
      <MemberSignature Language="C#" Value="public event System.Data.OleDb.OleDbRowUpdatingEventHandler RowUpdating;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Data.OleDb.OleDbRowUpdatingEventHandler RowUpdating" />
      <MemberSignature Language="DocId" Value="E:System.Data.OleDb.OleDbDataAdapter.RowUpdating" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event RowUpdating As OleDbRowUpdatingEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Data::OleDb::OleDbRowUpdatingEventHandler ^ RowUpdating;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.OleDb.OleDbRowUpdatingEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje w ciągu <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> przed wykonaniem polecenia względem źródła danych. Próba aktualizacji. W związku z tym zdarzeniu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli używasz <xref:System.Data.Common.DbDataAdapter.Update%2A>, istnieją dwie zdarzeń zaktualizowany wiersz danych. Kolejność wykonywania jest następujący:  
  
1.  Wartości w <xref:System.Data.DataRow> zostaną przeniesione do wartości parametrów.  
  
2.  <xref:System.Data.Common.DbDataAdapter.OnRowUpdating%2A> Zdarzenia.  
  
3.  Wykonuje polecenia.  
  
4.  Jeśli polecenie ma ustawioną wartość `FirstReturnedRecord`, pierwszy zwrócony wynik jest umieszczany w <xref:System.Data.DataRow>.  
  
5.  W przypadku parametrów wyjściowych są umieszczane w <xref:System.Data.DataRow>.  
  
6.  <xref:System.Data.Common.DbDataAdapter.OnRowUpdated%2A> Zdarzenia.  
  
7.  <xref:System.Data.DataRow.AcceptChanges%2A> jest wywoływana.  
  
   
  
## Examples  
 W poniższym przykładzie przedstawiono <xref:System.Data.OleDb.OleDbDataAdapter.RowUpdating> i <xref:System.Data.OleDb.OleDbDataAdapter.RowUpdated> zdarzenia używane.  
  
 [!code-csharp[Classic WebData OleDbDataAdapter.RowUpdated Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData OleDbDataAdapter.RowUpdated Example/CS/source.cs#1)]
 [!code-vb[Classic WebData OleDbDataAdapter.RowUpdated Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData OleDbDataAdapter.RowUpdated Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SelectCommand">
      <MemberSignature Language="C#" Value="public System.Data.OleDb.OleDbCommand SelectCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.OleDb.OleDbCommand SelectCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.OleDb.OleDbDataAdapter.SelectCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property SelectCommand As OleDbCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::OleDb::OleDbCommand ^ SelectCommand { System::Data::OleDb::OleDbCommand ^ get(); void set(System::Data::OleDb::OleDbCommand ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("Microsoft.VSDesigner.Data.Design.DBCommandEditor, Microsoft.VSDesigner, Version=0.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.OleDb.OleDbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia instrukcję SQL lub procedurę składowaną, aby wybrać rekordy w źródle danych.</summary>
        <value>
          <see cref="T:System.Data.OleDb.OleDbCommand" /> Używany podczas <see cref="M:System.Data.Common.DbDataAdapter.Fill(System.Data.DataSet)" /> aby wybrać rekordy ze źródła danych do umieszczenia w <see cref="T:System.Data.DataSet" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A> jest przypisany do wcześniej utworzonego <xref:System.Data.OleDb.OleDbCommand>, <xref:System.Data.OleDb.OleDbCommand> nie został sklonowany. <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A> Przechowuje odwołanie do utworzonego wcześniej <xref:System.Data.OleDb.OleDbCommand> obiektu.  
  
 Jeśli <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A> zwraca żadnych wierszy żadnych tabel są dodawane do <xref:System.Data.DataSet>, i nie jest zgłaszany wyjątek nie.  
  
   
  
## Examples  
 Poniższy przykład tworzy <xref:System.Data.OleDb.OleDbDataAdapter> i ustawia <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A> i <xref:System.Data.OleDb.OleDbDataAdapter.InsertCommand%2A> właściwości. Przyjęto założenie, że utworzono już <xref:System.Data.OleDb.OleDbConnection> obiektu.  
  
 [!code-csharp[Classic WebData DbDataAdapter.SelectCommand Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.SelectCommand Example/CS/source.cs#1)]
 [!code-vb[Classic WebData DbDataAdapter.SelectCommand Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData DbDataAdapter.SelectCommand Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.IDbDataAdapter.DeleteCommand">
      <MemberSignature Language="C#" Value="System.Data.IDbCommand System.Data.IDbDataAdapter.DeleteCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.IDbCommand System.Data.IDbDataAdapter.DeleteCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#DeleteCommand" />
      <MemberSignature Language="VB.NET" Value=" Property DeleteCommand As IDbCommand Implements IDbDataAdapter.DeleteCommand" />
      <MemberSignature Language="C++ CLI" Value="property System::Data::IDbCommand ^ System.Data.IDbDataAdapter.DeleteCommand { System::Data::IDbCommand ^ get(); void set(System::Data::IDbCommand ^ value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.IDbDataAdapter.DeleteCommand</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Opis tego elementu członkowskiego, zobacz <see cref="M:System.Data.IDbDataAdapter.DeleteCommand" />.</summary>
        <value>
          <see cref="T:System.Data.IDbCommand" /> Używane podczas aktualizacji, aby usunąć rekordy w źródle danych dla usuniętych wierszy w zestawie danych.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Można go używać tylko wtedy, gdy <xref:System.Data.OleDb.OleDbDataAdapter> wystąpienia jest rzutowane na <xref:System.Data.IDbDataAdapter> interfejsu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.IDbDataAdapter.InsertCommand">
      <MemberSignature Language="C#" Value="System.Data.IDbCommand System.Data.IDbDataAdapter.InsertCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.IDbCommand System.Data.IDbDataAdapter.InsertCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#InsertCommand" />
      <MemberSignature Language="VB.NET" Value=" Property InsertCommand As IDbCommand Implements IDbDataAdapter.InsertCommand" />
      <MemberSignature Language="C++ CLI" Value="property System::Data::IDbCommand ^ System.Data.IDbDataAdapter.InsertCommand { System::Data::IDbCommand ^ get(); void set(System::Data::IDbCommand ^ value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.IDbDataAdapter.InsertCommand</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Opis tego elementu członkowskiego, zobacz <see cref="M:System.Data.IDbDataAdapter.InsertCommand" />.</summary>
        <value>
          <see cref="T:System.Data.IDbCommand" /> Używany podczas aktualizacji do wstawiania rekordów ze źródła danych do umieszczenia w zestawie danych.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Można go używać tylko wtedy, gdy <xref:System.Data.OleDb.OleDbDataAdapter> wystąpienia jest rzutowane na <xref:System.Data.IDbDataAdapter> interfejsu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.IDbDataAdapter.SelectCommand">
      <MemberSignature Language="C#" Value="System.Data.IDbCommand System.Data.IDbDataAdapter.SelectCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.IDbCommand System.Data.IDbDataAdapter.SelectCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#SelectCommand" />
      <MemberSignature Language="VB.NET" Value=" Property SelectCommand As IDbCommand Implements IDbDataAdapter.SelectCommand" />
      <MemberSignature Language="C++ CLI" Value="property System::Data::IDbCommand ^ System.Data.IDbDataAdapter.SelectCommand { System::Data::IDbCommand ^ get(); void set(System::Data::IDbCommand ^ value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.IDbDataAdapter.SelectCommand</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Opis tego elementu członkowskiego, zobacz <see cref="M:System.Data.IDbDataAdapter.SelectCommand" />.</summary>
        <value>
          <see cref="T:System.Data.IDbCommand" /> Używany podczas operacji update, aby wybrać rekordy ze źródła danych do umieszczenia w zestawie danych.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Można go używać tylko wtedy, gdy <xref:System.Data.OleDb.OleDbDataAdapter> wystąpienia jest rzutowane na <xref:System.Data.IDbDataAdapter> interfejsu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Data.IDbDataAdapter.UpdateCommand">
      <MemberSignature Language="C#" Value="System.Data.IDbCommand System.Data.IDbDataAdapter.UpdateCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.IDbCommand System.Data.IDbDataAdapter.UpdateCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.OleDb.OleDbDataAdapter.System#Data#IDbDataAdapter#UpdateCommand" />
      <MemberSignature Language="VB.NET" Value=" Property UpdateCommand As IDbCommand Implements IDbDataAdapter.UpdateCommand" />
      <MemberSignature Language="C++ CLI" Value="property System::Data::IDbCommand ^ System.Data.IDbDataAdapter.UpdateCommand { System::Data::IDbCommand ^ get(); void set(System::Data::IDbCommand ^ value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Data.IDbDataAdapter.UpdateCommand</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Data.IDbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Opis tego elementu członkowskiego, zobacz <see cref="M:System.Data.IDbDataAdapter.UpdateCommand" />.</summary>
        <value>
          <see cref="T:System.Data.IDbCommand" /> Używane podczas aktualizacji update rekordy w źródle danych na potrzeby zmodyfikowanych wierszy w zestawie danych.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Można go używać tylko wtedy, gdy <xref:System.Data.OleDb.OleDbDataAdapter> wystąpienia jest rzutowane na <xref:System.Data.IDbDataAdapter> interfejsu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.ICloneable.Clone">
      <MemberSignature Language="C#" Value="object ICloneable.Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance object System.ICloneable.Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Data.OleDb.OleDbDataAdapter.System#ICloneable#Clone" />
      <MemberSignature Language="VB.NET" Value="Function Clone () As Object Implements ICloneable.Clone" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Object ^ System.ICloneable.Clone() = ICloneable::Clone;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ICloneable.Clone</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Opis tego elementu członkowskiego, zobacz <see cref="M:System.ICloneable.Clone" />.</summary>
        <returns>Nowy <see cref="T:System.Object" /> czyli kopię tego wystąpienia.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Można go używać tylko wtedy, gdy <xref:System.Data.OleDb.OleDbDataAdapter> wystąpienia jest rzutowane na <xref:System.ICloneable> interfejsu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateCommand">
      <MemberSignature Language="C#" Value="public System.Data.OleDb.OleDbCommand UpdateCommand { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Data.OleDb.OleDbCommand UpdateCommand" />
      <MemberSignature Language="DocId" Value="P:System.Data.OleDb.OleDbDataAdapter.UpdateCommand" />
      <MemberSignature Language="VB.NET" Value="Public Property UpdateCommand As OleDbCommand" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Data::OleDb::OleDbCommand ^ UpdateCommand { System::Data::OleDb::OleDbCommand ^ get(); void set(System::Data::OleDb::OleDbCommand ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Data</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("Microsoft.VSDesigner.Data.Design.DBCommandEditor, Microsoft.VSDesigner, Version=0.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", "System.Drawing.Design.UITypeEditor, System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Data.OleDb.OleDbCommand</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia instrukcję SQL lub procedurę składowaną używane do aktualizowania rekordów w źródle danych.</summary>
        <value>
          <see cref="T:System.Data.OleDb.OleDbCommand" /> Używane podczas <see cref="M:System.Data.Common.DbDataAdapter.Update(System.Data.DataSet)" /> do aktualizowania rekordów w źródle danych, które odpowiadają zmodyfikowanych wierszy w <see cref="T:System.Data.DataSet" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podczas <xref:System.Data.Common.DbDataAdapter.Update%2A>, jeśli ta właściwość nie jest ustawiona i informacje o kluczu podstawowym znajduje się w <xref:System.Data.DataSet>, <xref:System.Data.OleDb.OleDbDataAdapter.UpdateCommand%2A> mogą być generowane automatycznie, jeśli ustawisz <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A> właściwości i użyj <xref:System.Data.OleDb.OleDbCommandBuilder>. Następnie dowolne dodatkowe polecenia, które nie zostały ustawione są generowane przez <xref:System.Data.OleDb.OleDbCommandBuilder>. Tę logikę generowania wymaga informacji o kolumnie klucza znajdować się w <xref:System.Data.DataSet>. Aby uzyskać więcej informacji, zobacz [generowania poleceń CommandBuilders](~/docs/framework/data/adonet/generating-commands-with-commandbuilders.md).  
  
 Gdy <xref:System.Data.OleDb.OleDbDataAdapter.UpdateCommand%2A> jest przypisany do wcześniej utworzonego <xref:System.Data.OleDb.OleDbCommand>, <xref:System.Data.OleDb.OleDbCommand> nie został sklonowany. <xref:System.Data.OleDb.OleDbDataAdapter.UpdateCommand%2A> Przechowuje odwołanie do utworzonego wcześniej <xref:System.Data.OleDb.OleDbCommand> obiektu.  
  
> [!NOTE]
>  Jeśli wykonanie tego polecenia zwraca wiersze, te wiersze może być scalone z <xref:System.Data.DataSet> w zależności od tego, jak ustawić <xref:System.Data.OleDb.OleDbCommand.UpdatedRowSource%2A> właściwość <xref:System.Data.OleDb.OleDbCommand> obiektu.  
  
   
  
## Examples  
 Poniższy przykład tworzy <xref:System.Data.OleDb.OleDbDataAdapter> i ustawia <xref:System.Data.OleDb.OleDbDataAdapter.SelectCommand%2A> i <xref:System.Data.OleDb.OleDbDataAdapter.UpdateCommand%2A> właściwości. Przyjęto założenie, że utworzono już <xref:System.Data.OleDb.OleDbConnection> obiektu.  
  
 [!code-csharp[Classic WebData OleDbDataAdapter.UpdateCommand Example#1](~/samples/snippets/csharp/VS_Snippets_ADO.NET/Classic WebData OleDbDataAdapter.UpdateCommand Example/CS/source.cs#1)]
 [!code-vb[Classic WebData OleDbDataAdapter.UpdateCommand Example#1](~/samples/snippets/visualbasic/VS_Snippets_ADO.NET/Classic WebData OleDbDataAdapter.UpdateCommand Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>