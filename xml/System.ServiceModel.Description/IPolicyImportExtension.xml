<Type Name="IPolicyImportExtension" FullName="System.ServiceModel.Description.IPolicyImportExtension">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6eee719fff1036e50d9fddef949d3c8b2dfe4b65" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36616686" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IPolicyImportExtension" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IPolicyImportExtension" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Description.IPolicyImportExtension" />
  <TypeSignature Language="VB.NET" Value="Public Interface IPolicyImportExtension" />
  <TypeSignature Language="C++ CLI" Value="public interface class IPolicyImportExtension" />
  <TypeSignature Language="F#" Value="type IPolicyImportExtension = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Definiuje metodę dla obiektów, które importowanie niestandardowych asercji zasad dotyczących powiązań.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementowanie <xref:System.ServiceModel.Description.IPolicyImportExtension> interfejs do wyszukiwania informacji WSDL udostępnianych przez danego punktu końcowego dla niestandardowych asercji zasad o możliwości punktu końcowego lub wymagań. Zazwyczaj importera zasad wyszukuje określonego potwierdzenia i albo wstawia element powiązania, konfiguruje element powiązania lub modyfikuje kontraktu, aby spełnić wymagania dotyczące potwierdzenia.  
  
 W odróżnieniu od jego odpowiednik <xref:System.ServiceModel.Description.IPolicyExportExtension>, <xref:System.ServiceModel.Description.IPolicyImportExtension> nie wymaga wdrożenia przez <xref:System.ServiceModel.Channels.BindingElement> obiekt; można załadować przy użyciu sekcji konfiguracji klienta pokazano w sekcji przykładów w lub programowo, dodając ją do <xref:System.ServiceModel.Description.WsdlImporter?displayProperty=nameWithType> Konstruktor.  
  
 Windows Communication Foundation (WCF) przekazuje dwa obiekty do <xref:System.ServiceModel.Description.IPolicyImportExtension.ImportPolicy%2A> metody <xref:System.ServiceModel.Description.MetadataImporter> i <xref:System.ServiceModel.Description.PolicyConversionContext>. Zwykle <xref:System.ServiceModel.Description.PolicyConversionContext> obiekt zawiera już potwierdzeń zasad dla każdego zakresu powiązania.  
  
 <xref:System.ServiceModel.Description.IPolicyImportExtension> Implementacji wykonuje następujące czynności:  
  
1.  Lokalizuje potwierdzenia zasad niestandardowych, dla której jest odpowiedzialne wywołując jedną <xref:System.ServiceModel.Description.PolicyConversionContext.GetBindingAssertions%2A>, <xref:System.ServiceModel.Description.PolicyConversionContext.GetMessageBindingAssertions%2A>, lub <xref:System.ServiceModel.Description.PolicyConversionContext.GetOperationBindingAssertions%2A> metod, w zależności od zakresu.  
  
2.  Usuwa potwierdzenia zasad z kolekcji potwierdzenia. <xref:System.ServiceModel.Description.PolicyAssertionCollection.Remove%2A?displayProperty=nameWithType> Metody lokalizuje, zwraca i usuwa potwierdzenia w jednym kroku.  
  
3.  Zmodyfikuj stosu powiązanie lub kontrakt dodając niestandardowe wymagane <xref:System.ServiceModel.Channels.BindingElement> do <xref:System.ServiceModel.Description.PolicyConversionContext.BindingElements%2A> właściwości lub modyfikując <xref:System.ServiceModel.Description.PolicyConversionContext.Contract%2A?displayProperty=nameWithType> właściwości.  
  
 Ważne jest, krok 2. Po wywołaniu wszystkich importerów zasad WCF sprawdza istnienie żadnych potwierdzeń zasad, które pozostają. Jeśli istnieje, WCF założono, że importowanie zasad nie powiodło się i nie importuje powiązanie skojarzone.  
  
> [!IMPORTANT]
>  Dostawca metadanych złośliwego mogą próbować wysyłać nieprawidłowo sformułowany kod XML jako część metadanych w celu wykorzystania importera zasad. Zalecane jest tej zasady niestandardowe importerów być niezawodne do wszystkich formularzy XML, które mogą być przekazywane do niego.  
  
 Niestandardowe <xref:System.ServiceModel.Description.MetadataImporter> implementacje musi implementować własnych <xref:System.ServiceModel.Description.PolicyConversionContext> dołączyć obiektu, aby wyodrębnić potwierdzeń zasad do formatu niestandardowych metadanych.  
  
 Jeśli chcesz wyeksportować i zaimportować elementy WSDL niestandardowe, które nie są potwierdzeń zasad, zobacz <xref:System.ServiceModel.Description.IWsdlExportExtension?displayProperty=nameWithType> i <xref:System.ServiceModel.Description.IWsdlImportExtension?displayProperty=nameWithType>.  
  
> [!NOTE]
>  Można użyć importerów zasad niestandardowych i eksporterom [narzędzie narzędzia metadanych elementu ServiceModel (Svcutil.exe)](~/docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md) przy użyciu tych samych elementów konfiguracji w pliku konfiguracji i `/svcutilConfig:<configFile>` opcji.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano sposób użycia <xref:System.ServiceModel.Description.PolicyAssertionCollection.Remove%2A?displayProperty=nameWithType> metody, aby zlokalizować, wrócić i usunąć potwierdzenia w jednym kroku.  
  
 [!code-csharp[CustomPolicySample#1](~/samples/snippets/csharp/VS_Snippets_CFX/custompolicysample/cs/policyimporter.cs#1)]
 [!code-vb[CustomPolicySample#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/custompolicysample/vb/policyimporter.vb#1)]  
  
 Poniższy przykład kodu pokazuje klienta pliku konfiguracji aplikacji do ładowania importera zasad niestandardowych podczas <xref:System.ServiceModel.Description.MetadataResolver?displayProperty=nameWithType> jest wywoływana.  
  
 [!code-xml[CustomPolicySample#7](~/samples/snippets/csharp/VS_Snippets_CFX/custompolicysample/cs/client.exe.config#7)]   
  
 W poniższym przykładzie pokazano sposób użycia <xref:System.ServiceModel.Description.MetadataResolver> do pobrania i rozpoznania metadanych do opisu obiektów.  
  
 [!code-csharp[CustomPolicySample#10](~/samples/snippets/csharp/VS_Snippets_CFX/custompolicysample/cs/client.cs#10)]
 [!code-vb[CustomPolicySample#10](~/samples/snippets/visualbasic/VS_Snippets_CFX/custompolicysample/vb/client.vb#10)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="ImportPolicy">
      <MemberSignature Language="C#" Value="public void ImportPolicy (System.ServiceModel.Description.MetadataImporter importer, System.ServiceModel.Description.PolicyConversionContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ImportPolicy(class System.ServiceModel.Description.MetadataImporter importer, class System.ServiceModel.Description.PolicyConversionContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IPolicyImportExtension.ImportPolicy(System.ServiceModel.Description.MetadataImporter,System.ServiceModel.Description.PolicyConversionContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ImportPolicy (importer As MetadataImporter, context As PolicyConversionContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ImportPolicy(System::ServiceModel::Description::MetadataImporter ^ importer, System::ServiceModel::Description::PolicyConversionContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member ImportPolicy : System.ServiceModel.Description.MetadataImporter * System.ServiceModel.Description.PolicyConversionContext -&gt; unit" Usage="iPolicyImportExtension.ImportPolicy (importer, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="importer" Type="System.ServiceModel.Description.MetadataImporter" />
        <Parameter Name="context" Type="System.ServiceModel.Description.PolicyConversionContext" />
      </Parameters>
      <Docs>
        <param name="importer">
          <see cref="T:System.ServiceModel.Description.MetadataImporter" /> Obiektu w użyciu.</param>
        <param name="context">
          <see cref="T:System.ServiceModel.Description.PolicyConversionContext" /> Zawiera zarówno potwierdzeń zasad, które mogą być importowane i kolekcji elementów, do których mogą być dodawane Implementowanie elementy powiązania wiązania.</param>
        <summary>Definiuje metodę, która może importowanie niestandardowych asercji zasad i dodać implementującej elementy powiązania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementowanie `ImportPolicy` metody w celu uzyskania potwierdzenia zasad i wykonać niektóre modyfikacji importowanych umowy lub powiązanie do obsługi potwierdzenia. Zazwyczaj importera zasad odpowiada znajdowanie potwierdzenia zasad niestandardowych, konfigurując lub Wstawianie elementu powiązania do powiązania importowane.  
  
 Windows Communication Foundation (WCF) przekazuje dwa obiekty do <xref:System.ServiceModel.Description.IPolicyImportExtension.ImportPolicy%2A> metody <xref:System.ServiceModel.Description.MetadataImporter> i <xref:System.ServiceModel.Description.PolicyConversionContext>. Zwykle <xref:System.ServiceModel.Description.PolicyConversionContext> obiekt zawiera już potwierdzeń zasad dla każdego zakresu powiązania.  
  
 <xref:System.ServiceModel.Description.IPolicyImportExtension> Implementacji wykonuje następujące czynności:  
  
1.  Lokalizuje potwierdzenia zasad niestandardowych, dla której jest odpowiedzialne wywołując jedną <xref:System.ServiceModel.Description.PolicyConversionContext.GetBindingAssertions%2A>, <xref:System.ServiceModel.Description.PolicyConversionContext.GetMessageBindingAssertions%2A>, lub <xref:System.ServiceModel.Description.PolicyConversionContext.GetOperationBindingAssertions%2A> metod, w zależności od zakresu.  
  
2.  Usuwa potwierdzenia zasad z kolekcji potwierdzenia. <xref:System.ServiceModel.Description.PolicyAssertionCollection.Remove%2A?displayProperty=nameWithType> Metody lokalizuje, zwraca i usuwa potwierdzenia w jednym kroku.  
  
3.  Modyfikuje stosu powiązanie lub kontrakt dodając niestandardowe wymagane <xref:System.ServiceModel.Channels.BindingElement> do <xref:System.ServiceModel.Description.PolicyConversionContext.BindingElements%2A> właściwości lub modyfikując <xref:System.ServiceModel.Description.PolicyConversionContext.Contract%2A?displayProperty=nameWithType> właściwości.  
  
 Ważne jest, krok 2. Po wywołaniu wszystkich importerów zasad WCF sprawdza istnienie żadnych potwierdzeń zasad, które pozostają. Jeśli istnieje, WCF założono, że importowanie zasad nie powiodło się i nie importuje powiązanie skojarzone.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano sposób użycia <xref:System.ServiceModel.Description.PolicyAssertionCollection.Remove%2A?displayProperty=nameWithType> metody, aby zlokalizować, wrócić i usunąć potwierdzenia w jednym kroku.  
  
 [!code-csharp[CustomPolicySample#1](~/samples/snippets/csharp/VS_Snippets_CFX/custompolicysample/cs/policyimporter.cs#1)]
 [!code-vb[CustomPolicySample#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/custompolicysample/vb/policyimporter.vb#1)]  
  
 Poniższy przykład kodu pokazuje klienta pliku konfiguracji aplikacji do ładowania importera zasad niestandardowych podczas <xref:System.ServiceModel.Description.MetadataResolver?displayProperty=nameWithType> jest wywoływana.  
  
 [!code-xml[CustomPolicySample#7](~/samples/snippets/csharp/VS_Snippets_CFX/custompolicysample/cs/client.exe.config#7)]   
  
 W poniższym przykładzie pokazano sposób użycia <xref:System.ServiceModel.Description.MetadataResolver> do pobrania i rozpoznania metadanych do opisu obiektów.  
  
 [!code-csharp[CustomPolicySample#10](~/samples/snippets/csharp/VS_Snippets_CFX/custompolicysample/cs/client.cs#10)]
 [!code-vb[CustomPolicySample#10](~/samples/snippets/visualbasic/VS_Snippets_CFX/custompolicysample/vb/client.vb#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>