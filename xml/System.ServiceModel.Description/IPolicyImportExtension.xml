<Type Name="IPolicyImportExtension" FullName="System.ServiceModel.Description.IPolicyImportExtension">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="2dafea050ab8f58e92bc123d4611ca1624cfae00" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="08/24/2018" />
    <Meta Name="ms.locfileid" Value="37456527" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IPolicyImportExtension" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IPolicyImportExtension" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Description.IPolicyImportExtension" />
  <TypeSignature Language="VB.NET" Value="Public Interface IPolicyImportExtension" />
  <TypeSignature Language="C++ CLI" Value="public interface class IPolicyImportExtension" />
  <TypeSignature Language="F#" Value="type IPolicyImportExtension = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Definiuje metodę dla obiektów, które importowanie niestandardowych asercji zasad dotyczących powiązań.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementowanie <xref:System.ServiceModel.Description.IPolicyImportExtension> interfejs do wyszukiwania informacji WSDL uwidocznionych przez konkretny punkt końcowy dla niestandardowych asercji zasad o możliwości punktu końcowego lub wymagania. Zazwyczaj importera zasad wyszukuje określonego potwierdzenia i albo wstawia element powiązania, konfiguruje element powiązania lub modyfikuje Umowy, aby spełnić wymagania dotyczące potwierdzenia.  
  
 W odróżnieniu od jego odpowiednika <xref:System.ServiceModel.Description.IPolicyExportExtension>, <xref:System.ServiceModel.Description.IPolicyImportExtension> nie wymaga wdrożenia przez <xref:System.ServiceModel.Channels.BindingElement> obiektu można ładować je przy użyciu sekcji konfiguracji klienta, które są wyświetlane w sekcji przykładów lub programowo, dodając ją do <xref:System.ServiceModel.Description.WsdlImporter?displayProperty=nameWithType> Konstruktor.  
  
 Windows Communication Foundation (WCF) przekazuje dwa obiekty przeznaczone do <xref:System.ServiceModel.Description.IPolicyImportExtension.ImportPolicy%2A> metody <xref:System.ServiceModel.Description.MetadataImporter> i <xref:System.ServiceModel.Description.PolicyConversionContext>. Zazwyczaj <xref:System.ServiceModel.Description.PolicyConversionContext> obiekt zawiera już asercji zasad dla każdego zakresu powiązania.  
  
 <xref:System.ServiceModel.Description.IPolicyImportExtension> Implementacja wykonuje następujące czynności:  
  
1.  Lokalizuje asercji zasad niestandardowych, dla którego jest odpowiedzialna, wywołując jedną <xref:System.ServiceModel.Description.PolicyConversionContext.GetBindingAssertions%2A>, <xref:System.ServiceModel.Description.PolicyConversionContext.GetMessageBindingAssertions%2A>, lub <xref:System.ServiceModel.Description.PolicyConversionContext.GetOperationBindingAssertions%2A> metod, w zależności od zakresu.  
  
2.  Usuwa asercję zasad z kolekcji potwierdzenia. <xref:System.ServiceModel.Description.PolicyAssertionCollection.Remove%2A?displayProperty=nameWithType> Metoda lokalizuje, zwraca i usuwa potwierdzenia w jednym kroku.  
  
3.  Zmodyfikuj stosu powiązania lub kontrakt, dodając niestandardowe wymagane <xref:System.ServiceModel.Channels.BindingElement> do <xref:System.ServiceModel.Description.PolicyConversionContext.BindingElements%2A> właściwości lub modyfikując <xref:System.ServiceModel.Description.PolicyConversionContext.Contract%2A?displayProperty=nameWithType> właściwości.  
  
 Ważne jest, krok 2. Po wywołaniu wszystkich importerów zasad WCF sprawdza obecność dowolnej asercji zasad, które będą pozostawały. Jeśli istnieje, WCF założono, że importowanie zasad nie powiodło się i nie importuje powiązanie skojarzone.  
  
> [!IMPORTANT]
>  Dostawca metadanych złośliwego mogą próbować wysyłać nieprawidłowo sformułowany kod XML jako część metadanych w celu podjęcia próby wykorzystania importera zasad. Zdecydowanie zaleca się tej zasady niestandardowe importerów być niezawodne do wszystkich form XML, który może być przekazywany do niego.  
  
 Niestandardowe <xref:System.ServiceModel.Description.MetadataImporter> implementacje musi implementować własne <xref:System.ServiceModel.Description.PolicyConversionContext> obiekt do wyodrębnienia asercji zasad dołączony do formatu niestandardowych metadanych.  
  
 Jeśli chcesz eksportować i importować elementy niestandardowe WSDL, które nie są asercji zasad, zobacz <xref:System.ServiceModel.Description.IWsdlExportExtension?displayProperty=nameWithType> i <xref:System.ServiceModel.Description.IWsdlImportExtension?displayProperty=nameWithType>.  
  
> [!NOTE]
>  Można użyć importerów zasad niestandardowych oraz eksporterom [narzędzia narzędzie metadanych elementu ServiceModel (Svcutil.exe)](~/docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md) przy użyciu tych samych elementów konfiguracji w pliku konfiguracji i `/svcutilConfig:<configFile>` opcji.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje użycie <xref:System.ServiceModel.Description.PolicyAssertionCollection.Remove%2A?displayProperty=nameWithType> metodę, aby zlokalizować, wróć i usuń potwierdzenia w jednym kroku.  
  
 [!code-csharp[CustomPolicySample#1](~/samples/snippets/csharp/VS_Snippets_CFX/custompolicysample/cs/policyimporter.cs#1)]
 [!code-vb[CustomPolicySample#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/custompolicysample/vb/policyimporter.vb#1)]  
  
 Poniższy przykład kodu pokazuje klienta, w pliku konfiguracji aplikacji można załadować importera zasad niestandardowych po <xref:System.ServiceModel.Description.MetadataResolver?displayProperty=nameWithType> zostanie wywołana.  
  
 [!code-xml[CustomPolicySample#7](~/samples/snippets/csharp/VS_Snippets_CFX/custompolicysample/cs/client.exe.config#7)]   
  
 Poniższy przykład kodu pokazuje użycie <xref:System.ServiceModel.Description.MetadataResolver> do pobrania i rozpoznania metadanych do opisu obiektów.  
  
 [!code-csharp[CustomPolicySample#10](~/samples/snippets/csharp/VS_Snippets_CFX/custompolicysample/cs/client.cs#10)]
 [!code-vb[CustomPolicySample#10](~/samples/snippets/visualbasic/VS_Snippets_CFX/custompolicysample/vb/client.vb#10)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="ImportPolicy">
      <MemberSignature Language="C#" Value="public void ImportPolicy (System.ServiceModel.Description.MetadataImporter importer, System.ServiceModel.Description.PolicyConversionContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ImportPolicy(class System.ServiceModel.Description.MetadataImporter importer, class System.ServiceModel.Description.PolicyConversionContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IPolicyImportExtension.ImportPolicy(System.ServiceModel.Description.MetadataImporter,System.ServiceModel.Description.PolicyConversionContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ImportPolicy (importer As MetadataImporter, context As PolicyConversionContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ImportPolicy(System::ServiceModel::Description::MetadataImporter ^ importer, System::ServiceModel::Description::PolicyConversionContext ^ context);" />
      <MemberSignature Language="F#" Value="abstract member ImportPolicy : System.ServiceModel.Description.MetadataImporter * System.ServiceModel.Description.PolicyConversionContext -&gt; unit" Usage="iPolicyImportExtension.ImportPolicy (importer, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="importer" Type="System.ServiceModel.Description.MetadataImporter" />
        <Parameter Name="context" Type="System.ServiceModel.Description.PolicyConversionContext" />
      </Parameters>
      <Docs>
        <param name="importer">
          <see cref="T:System.ServiceModel.Description.MetadataImporter" /> Obiektu w użyciu.</param>
        <param name="context">
          <see cref="T:System.ServiceModel.Description.PolicyConversionContext" /> Zawierający zarówno asercji zasad, które mogą być importowane i kolekcje elementów, do których implementacja elementy powiązania można dodać wiązania.</param>
        <summary>Definiuje metodę, która może importowanie niestandardowych asercji zasad i Dodaj elementy wykonawcze powiązania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementowanie `ImportPolicy` metodę, aby uzyskać asercji zasad i wykonać wprowadzając pewne modyfikacje importowanych umowy lub powiązania do obsługi potwierdzenia. Zazwyczaj importera zasad odnosi się do znajdowania potwierdzeń niestandardowych zasad przez skonfigurowanie lub Wstawianie elementu powiązania do powiązania zostały zaimportowane.  
  
 Windows Communication Foundation (WCF) przekazuje dwa obiekty przeznaczone do <xref:System.ServiceModel.Description.IPolicyImportExtension.ImportPolicy%2A> metody <xref:System.ServiceModel.Description.MetadataImporter> i <xref:System.ServiceModel.Description.PolicyConversionContext>. Zazwyczaj <xref:System.ServiceModel.Description.PolicyConversionContext> obiekt zawiera już asercji zasad dla każdego zakresu powiązania.  
  
 <xref:System.ServiceModel.Description.IPolicyImportExtension> Implementacja wykonuje następujące czynności:  
  
1.  Lokalizuje asercji zasad niestandardowych, dla którego jest odpowiedzialna, wywołując jedną <xref:System.ServiceModel.Description.PolicyConversionContext.GetBindingAssertions%2A>, <xref:System.ServiceModel.Description.PolicyConversionContext.GetMessageBindingAssertions%2A>, lub <xref:System.ServiceModel.Description.PolicyConversionContext.GetOperationBindingAssertions%2A> metod, w zależności od zakresu.  
  
2.  Usuwa asercję zasad z kolekcji potwierdzenia. <xref:System.ServiceModel.Description.PolicyAssertionCollection.Remove%2A?displayProperty=nameWithType> Metoda lokalizuje, zwraca i usuwa potwierdzenia w jednym kroku.  
  
3.  Modyfikuje stosu powiązania lub zamówienia, dodając niestandardowe wymagane <xref:System.ServiceModel.Channels.BindingElement> do <xref:System.ServiceModel.Description.PolicyConversionContext.BindingElements%2A> właściwości lub modyfikując <xref:System.ServiceModel.Description.PolicyConversionContext.Contract%2A?displayProperty=nameWithType> właściwości.  
  
 Ważne jest, krok 2. Po wywołaniu wszystkich importerów zasad WCF sprawdza obecność dowolnej asercji zasad, które będą pozostawały. Jeśli istnieje, WCF założono, że importowanie zasad nie powiodło się i nie importuje powiązanie skojarzone.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje użycie <xref:System.ServiceModel.Description.PolicyAssertionCollection.Remove%2A?displayProperty=nameWithType> metodę, aby zlokalizować, wróć i usuń potwierdzenia w jednym kroku.  
  
 [!code-csharp[CustomPolicySample#1](~/samples/snippets/csharp/VS_Snippets_CFX/custompolicysample/cs/policyimporter.cs#1)]
 [!code-vb[CustomPolicySample#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/custompolicysample/vb/policyimporter.vb#1)]  
  
 Poniższy przykład kodu pokazuje klienta, w pliku konfiguracji aplikacji można załadować importera zasad niestandardowych po <xref:System.ServiceModel.Description.MetadataResolver?displayProperty=nameWithType> zostanie wywołana.  
  
 [!code-xml[CustomPolicySample#7](~/samples/snippets/csharp/VS_Snippets_CFX/custompolicysample/cs/client.exe.config#7)]   
  
 Poniższy przykład kodu pokazuje użycie <xref:System.ServiceModel.Description.MetadataResolver> do pobrania i rozpoznania metadanych do opisu obiektów.  
  
 [!code-csharp[CustomPolicySample#10](~/samples/snippets/csharp/VS_Snippets_CFX/custompolicysample/cs/client.cs#10)]
 [!code-vb[CustomPolicySample#10](~/samples/snippets/visualbasic/VS_Snippets_CFX/custompolicysample/vb/client.vb#10)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>