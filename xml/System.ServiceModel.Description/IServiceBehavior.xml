<Type Name="IServiceBehavior" FullName="System.ServiceModel.Description.IServiceBehavior">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="dc4826e93543f6c304bfab86dfb9281a94dd76ba" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36417909" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IServiceBehavior" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IServiceBehavior" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Description.IServiceBehavior" />
  <TypeSignature Language="VB.NET" Value="Public Interface IServiceBehavior" />
  <TypeSignature Language="C++ CLI" Value="public interface class IServiceBehavior" />
  <TypeSignature Language="F#" Value="type IServiceBehavior = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Udostępnia mechanizm do modyfikacji lub Wstaw niestandardowych rozszerzeń w całej usługi, w tym <see cref="T:System.ServiceModel.ServiceHostBase" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementowanie <xref:System.ServiceModel.Description.IServiceBehavior> do zmodyfikowania, przeglądanie i rozszerzać niektórych aspektów wykonanie całej usługi na poziomie aplikacji:  
  
-   Użyj <xref:System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior%2A> metoda zmiany wartości właściwości czasu wykonywania, lub Wstaw rozszerzenie niestandardowe obiekty, takie jak programy obsługi błędów, interceptory wiadomości lub parametr rozszerzeń zabezpieczeń i inne obiekty rozszerzenia niestandardowego.  
  
-   Użyj <xref:System.ServiceModel.Description.IServiceBehavior.Validate%2A> metody do sprawdzenia opis przed Windows Communication Foundation (WCF) tworzy wykonywania usługi, aby upewnić się, że można wykonać poprawnie.  
  
-   Użyj <xref:System.ServiceModel.Description.IServiceBehavior.AddBindingParameters%2A> metody do przekazania do elementu powiązania niestandardowych informacji dla usługi, aby poprawnie obsługuje usługę.  
  
 <xref:System.ServiceModel.Description.IServiceBehavior> obiekty można wprowadzać użyć dowolnej z tych metod, ale często jest tylko jeden ważne; w takich przypadkach nieużywane metody może zwracać wartości.  
  
> [!NOTE]
>  Wszystkie <xref:System.ServiceModel.Description.IServiceBehavior> przekazać metody <xref:System.ServiceModel.Description.ServiceDescription?displayProperty=nameWithType> i <xref:System.ServiceModel.ServiceHostBase?displayProperty=nameWithType> obiektów jako parametry. <xref:System.ServiceModel.Description.ServiceDescription> Parametr jest używany tylko badania; w przypadku modyfikowania tych obiektów sposób wykonywania jest niezdefiniowana.  
  
 Do wykonania zadania dostosowania, dla których ma mieć miejsce, <xref:System.ServiceModel.Description.IServiceBehavior> można dodać obiektu do <xref:System.ServiceModel.Description.ServiceDescription.Behaviors%2A> właściwości przed konstrukcji środowiska uruchomieniowego usługi. Istnieją trzy sposoby, w tym:  
  
-   Programowo dodać zachowanie usługi niestandardowej w <xref:System.ServiceModel.Description.ServiceDescription.Behaviors%2A> właściwości przed punkt gdzie <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType> wywoływana jest metoda <xref:System.ServiceModel.ServiceHost?displayProperty=nameWithType> obiektu.  
  
-   Tworzenie niestandardowego atrybutu, który implementuje <xref:System.ServiceModel.Description.IServiceBehavior> i użyj go, aby oznaczyć klasy usługi, które mają być modyfikowane. Gdy <xref:System.ServiceModel.ServiceHost> konstruowania obiektu, usługi WCF używa odbicia do odnajdywania atrybutów dla typu usługi. Jeśli wdrożenie żadnych atrybutów <xref:System.ServiceModel.Description.IServiceBehavior>, są one dodawane do kolekcji zachowań na <xref:System.ServiceModel.Description.ServiceDescription>.  
  
-   Rozszerzanie <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType> klasę, aby obsłużyć specyfikacji zachowania w aplikacji lub pliku konfiguracji komputera. Zobacz sekcję przykład, aby uzyskać więcej informacji.  
  
 Przykłady zachowania usługi programu WCF <xref:System.ServiceModel.ServiceBehaviorAttribute> atrybutu <xref:System.ServiceModel.Description.ServiceThrottlingBehavior?displayProperty=nameWithType>, <xref:System.ServiceModel.Description.ServiceDebugBehavior?displayProperty=nameWithType> i <xref:System.ServiceModel.Description.ServiceMetadataBehavior?displayProperty=nameWithType> zachowanie.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano sposób użycia zachowania usługi określony w pliku konfiguracji, który będzie wprowadzany obsługi błędów niestandardowych aplikacji usługi. W tym przykładzie program obsługi błędów przechwytuje wszystkie wyjątki i konwertuje je na niestandardowego `GreetingFault` błędu protokołu SOAP, który jest następnie zwracany do klienta.  
  
 Następujące <xref:System.ServiceModel.Description.IServiceBehavior> implementacji dodaje żadne obiekty parametru wiązania, dodaje niestandardowego <xref:System.ServiceModel.Dispatcher.IErrorHandler?displayProperty=nameWithType> obiektu do każdego <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A?displayProperty=nameWithType> właściwości i sprawdza, czy każdej operacji usługi, do którego jest stosowane zachowanie usługi i ma <xref:System.ServiceModel.FaultContractAttribute?displayProperty=nameWithType>typu `GreetingFault`.  
  
 [!code-csharp[IErrorHandler#7](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/ierrorhandler.cs#7)]
 [!code-vb[IErrorHandler#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/ierrorhandler/vb/ierrorhandler.vb#7)]  
  
 W tym przykładzie również implementuje klasy zachowanie <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType>, które umożliwia zachowanie usługi, która ma zostać wstawiony przez użyciem jej w pliku konfiguracyjnym aplikacji, jak pokazano w poniższym przykładzie kodu.  
  
 [!code-xml[IErrorHandler#4](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/hostapplication.exe.config#4)]   
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddBindingParameters">
      <MemberSignature Language="C#" Value="public void AddBindingParameters (System.ServiceModel.Description.ServiceDescription serviceDescription, System.ServiceModel.ServiceHostBase serviceHostBase, System.Collections.ObjectModel.Collection&lt;System.ServiceModel.Description.ServiceEndpoint&gt; endpoints, System.ServiceModel.Channels.BindingParameterCollection bindingParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddBindingParameters(class System.ServiceModel.Description.ServiceDescription serviceDescription, class System.ServiceModel.ServiceHostBase serviceHostBase, class System.Collections.ObjectModel.Collection`1&lt;class System.ServiceModel.Description.ServiceEndpoint&gt; endpoints, class System.ServiceModel.Channels.BindingParameterCollection bindingParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IServiceBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddBindingParameters(System::ServiceModel::Description::ServiceDescription ^ serviceDescription, System::ServiceModel::ServiceHostBase ^ serviceHostBase, System::Collections::ObjectModel::Collection&lt;System::ServiceModel::Description::ServiceEndpoint ^&gt; ^ endpoints, System::ServiceModel::Channels::BindingParameterCollection ^ bindingParameters);" />
      <MemberSignature Language="F#" Value="abstract member AddBindingParameters : System.ServiceModel.Description.ServiceDescription * System.ServiceModel.ServiceHostBase * System.Collections.ObjectModel.Collection&lt;System.ServiceModel.Description.ServiceEndpoint&gt; * System.ServiceModel.Channels.BindingParameterCollection -&gt; unit" Usage="iServiceBehavior.AddBindingParameters (serviceDescription, serviceHostBase, endpoints, bindingParameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceDescription" Type="System.ServiceModel.Description.ServiceDescription" />
        <Parameter Name="serviceHostBase" Type="System.ServiceModel.ServiceHostBase" />
        <Parameter Name="endpoints" Type="System.Collections.ObjectModel.Collection&lt;System.ServiceModel.Description.ServiceEndpoint&gt;" />
        <Parameter Name="bindingParameters" Type="System.ServiceModel.Channels.BindingParameterCollection" />
      </Parameters>
      <Docs>
        <param name="serviceDescription">Opis usługi usługi.</param>
        <param name="serviceHostBase">Host usługi.</param>
        <param name="endpoints">Punkty końcowe usługi.</param>
        <param name="bindingParameters">Niestandardowe obiekty do powiązania, które elementy mają dostęp.</param>
        <summary>Udostępnia możliwość przekazania danych niestandardowych do powiązania elementów do obsługi implementacji kontraktu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.ServiceModel.Description.IServiceBehavior.AddBindingParameters%2A> metody w celu dodania niestandardowych danych obiekty do `parameters` kolekcji elementów wiązania można użyć, aby uzyskać dodatkowe informacje, aby umożliwić im obsługuje kontraktu.  
  
 Ta metoda jest wywoływana raz dla każdego identyfikatora URI nasłuchiwania. Na przykład jeśli usługa ma cztery punkty końcowe i dwa z nich jest taki sam identyfikator URI nasłuchiwania, a następnie ta metoda jest wywoływana trzy razy. Przyczyną jest to, że `bindingParameters` docelową każdego stosu kanału i jeden stos kanał dla każdego identyfikatora URI nasłuchiwania. Ponieważ każde wywołanie otrzymuje te punkty końcowe w tym identyfikatora URI nasłuchiwania, dwa wywołuje get każdego pojedynczego <xref:System.ServiceModel.Description.ServiceEndpoint?displayProperty=nameWithType>, i jedno wywołanie pobiera kolekcję dwóch <xref:System.ServiceModel.Description.ServiceEndpoint?displayProperty=nameWithType> obiektów.  
  
> [!NOTE]
>  Wszystkie <xref:System.ServiceModel.Description.IServiceBehavior> przekazać metody <xref:System.ServiceModel.Description.ServiceDescription?displayProperty=nameWithType> i <xref:System.ServiceModel.ServiceHostBase?displayProperty=nameWithType> obiektów jako parametry. <xref:System.ServiceModel.Description.ServiceDescription> Parametr jest badania i wstawiania tylko dostosowania; Jeśli inny sposób zmodyfikować te obiekty sposób wykonywania jest niezdefiniowana.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyDispatchBehavior">
      <MemberSignature Language="C#" Value="public void ApplyDispatchBehavior (System.ServiceModel.Description.ServiceDescription serviceDescription, System.ServiceModel.ServiceHostBase serviceHostBase);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyDispatchBehavior(class System.ServiceModel.Description.ServiceDescription serviceDescription, class System.ServiceModel.ServiceHostBase serviceHostBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ApplyDispatchBehavior(System::ServiceModel::Description::ServiceDescription ^ serviceDescription, System::ServiceModel::ServiceHostBase ^ serviceHostBase);" />
      <MemberSignature Language="F#" Value="abstract member ApplyDispatchBehavior : System.ServiceModel.Description.ServiceDescription * System.ServiceModel.ServiceHostBase -&gt; unit" Usage="iServiceBehavior.ApplyDispatchBehavior (serviceDescription, serviceHostBase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceDescription" Type="System.ServiceModel.Description.ServiceDescription" />
        <Parameter Name="serviceHostBase" Type="System.ServiceModel.ServiceHostBase" />
      </Parameters>
      <Docs>
        <param name="serviceDescription">Opis usługi.</param>
        <param name="serviceHostBase">Host, który jest obecnie tworzony.</param>
        <summary>Zapewnia możliwość zmiany wartości właściwości w czasie wykonywania, lub Wstaw rozszerzenie niestandardowe obiekty, takie jak programy obsługi błędów, wiadomości lub parametr interceptory rozszerzeń zabezpieczeń i inne obiekty niestandardowego rozszerzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementowanie <xref:System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior%2A> metodę inspekcja lub modyfikowanie <xref:System.ServiceModel.ServiceHostBase> obiekt, który jest tworzona w celu obsługi niektórych scenariuszy wykonywanie niestandardowe.  
  
> [!NOTE]
>  Wszystkie <xref:System.ServiceModel.Description.IServiceBehavior> przekazać metody <xref:System.ServiceModel.Description.ServiceDescription?displayProperty=nameWithType> i <xref:System.ServiceModel.ServiceHostBase?displayProperty=nameWithType> obiektów jako parametry. <xref:System.ServiceModel.Description.ServiceDescription> Parametr jest badania i wstawiania tylko dostosowania; Jeśli inny sposób zmodyfikować te obiekty sposób wykonywania jest niezdefiniowana.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano sposób użycia zachowania usługi określony w pliku konfiguracji, który będzie wprowadzany obsługi błędów niestandardowych aplikacji usługi. W tym przykładzie program obsługi błędów przechwytuje wszystkie wyjątki i konwertuje je na niestandardowego `GreetingFault` błędu protokołu SOAP, który jest następnie zwracany do klienta.  
  
 Następujące <xref:System.ServiceModel.Description.IServiceBehavior> implementacji dodaje żadne obiekty parametru wiązania, dodaje niestandardowego <xref:System.ServiceModel.Dispatcher.IErrorHandler?displayProperty=nameWithType> obiektu do każdego <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A?displayProperty=nameWithType> właściwości i sprawdza, czy każdej operacji usługi, do którego jest stosowane zachowanie usługi i ma <xref:System.ServiceModel.FaultContractAttribute?displayProperty=nameWithType>typu `GreetingFault`.  
  
 [!code-csharp[IErrorHandler#7](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/ierrorhandler.cs#7)]
 [!code-vb[IErrorHandler#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/ierrorhandler/vb/ierrorhandler.vb#7)]  
  
 W tym przykładzie również implementuje klasy zachowanie <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType>, które umożliwia zachowanie usługi, która ma zostać wstawiony przez użyciem jej w pliku konfiguracyjnym aplikacji, jak pokazano w poniższym przykładzie kodu.  
  
 [!code-xml[IErrorHandler#4](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/hostapplication.exe.config#4)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public void Validate (System.ServiceModel.Description.ServiceDescription serviceDescription, System.ServiceModel.ServiceHostBase serviceHostBase);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Validate(class System.ServiceModel.Description.ServiceDescription serviceDescription, class System.ServiceModel.ServiceHostBase serviceHostBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IServiceBehavior.Validate(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Validate(System::ServiceModel::Description::ServiceDescription ^ serviceDescription, System::ServiceModel::ServiceHostBase ^ serviceHostBase);" />
      <MemberSignature Language="F#" Value="abstract member Validate : System.ServiceModel.Description.ServiceDescription * System.ServiceModel.ServiceHostBase -&gt; unit" Usage="iServiceBehavior.Validate (serviceDescription, serviceHostBase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceDescription" Type="System.ServiceModel.Description.ServiceDescription" />
        <Parameter Name="serviceHostBase" Type="System.ServiceModel.ServiceHostBase" />
      </Parameters>
      <Docs>
        <param name="serviceDescription">Opis usługi.</param>
        <param name="serviceHostBase">Host usługi, który jest obecnie tworzona.</param>
        <summary>Zapewnia możliwość sprawdzić hosta usługi i opisu usługi, aby upewnić się, że usługa może działać pomyślnie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.ServiceModel.Description.IServiceBehavior.Validate%2A> metodę, aby potwierdzić, czy bieżąca usługa może zostać wykonany prawidłowo zgodnie z danego scenariusza.  
  
> [!NOTE]
>  Wszystkie <xref:System.ServiceModel.Description.IServiceBehavior> przekazać metody <xref:System.ServiceModel.Description.ServiceDescription?displayProperty=nameWithType> i <xref:System.ServiceModel.ServiceHostBase?displayProperty=nameWithType> obiektów jako parametry. <xref:System.ServiceModel.Description.ServiceDescription> Parametr jest badania i wstawiania tylko dostosowania; Jeśli inny sposób zmodyfikować te obiekty sposób wykonywania jest niezdefiniowana.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano sposób użycia zachowania usługi określony w pliku konfiguracji, który będzie wprowadzany obsługi błędów niestandardowych aplikacji usługi. W tym przykładzie program obsługi błędów przechwytuje wszystkie wyjątki i konwertuje je na niestandardowego `GreetingFault` błędu protokołu SOAP, który jest następnie zwracany do klienta.  
  
 Następujące <xref:System.ServiceModel.Description.IServiceBehavior> implementacji dodaje żadne obiekty parametru wiązania, dodaje niestandardowego <xref:System.ServiceModel.Dispatcher.IErrorHandler?displayProperty=nameWithType> obiektu do każdego <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A?displayProperty=nameWithType> właściwości i sprawdza, czy każdej operacji usługi, do którego jest stosowane zachowanie usługi i ma <xref:System.ServiceModel.FaultContractAttribute?displayProperty=nameWithType>typu `GreetingFault`.  
  
 [!code-csharp[IErrorHandler#7](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/ierrorhandler.cs#7)]
 [!code-vb[IErrorHandler#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/ierrorhandler/vb/ierrorhandler.vb#7)]  
  
 W tym przykładzie również implementuje klasy zachowanie <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType>, które umożliwia zachowanie usługi, która ma zostać wstawiony przez użyciem jej w pliku konfiguracyjnym aplikacji, jak pokazano w poniższym przykładzie kodu.  
  
 [!code-xml[IErrorHandler#4](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/hostapplication.exe.config#4)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>