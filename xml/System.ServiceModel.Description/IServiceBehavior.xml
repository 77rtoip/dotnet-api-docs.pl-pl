<Type Name="IServiceBehavior" FullName="System.ServiceModel.Description.IServiceBehavior">
  <Metadata><Meta Name="ms.openlocfilehash" Value="8f180c5c844145924ad16b66d821004bfbce2f07" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69152694" /></Metadata><TypeSignature Language="C#" Value="public interface IServiceBehavior" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IServiceBehavior" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Description.IServiceBehavior" />
  <TypeSignature Language="VB.NET" Value="Public Interface IServiceBehavior" />
  <TypeSignature Language="C++ CLI" Value="public interface class IServiceBehavior" />
  <TypeSignature Language="F#" Value="type IServiceBehavior = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Oferuje mechanizm modyfikowania lub wstawiania rozszerzeń niestandardowych w całej usłudze, w tym <see cref="T:System.ServiceModel.ServiceHostBase" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zaimplementuj <xref:System.ServiceModel.Description.IServiceBehavior> , aby zmodyfikować, przeanalizować lub rozłożyć pewne aspekty wykonania usługi na poziomie aplikacji:  
  
-   Użyj metody <xref:System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior%2A> , aby zmienić wartości właściwości czasu wykonywania lub wstawić niestandardowe obiekty rozszerzeń, takie jak programy obsługi błędów, przechwycenia komunikatów lub parametrów, rozszerzenia zabezpieczeń i inne niestandardowe obiekty rozszerzeń.  
  
-   <xref:System.ServiceModel.Description.IServiceBehavior.Validate%2A> Użyj metody, aby sprawdzić opis przed Windows Communication Foundation (WCF) konstruuje uruchomioną usługę, aby potwierdzić, że może ona działać prawidłowo.  
  
-   <xref:System.ServiceModel.Description.IServiceBehavior.AddBindingParameters%2A> Użyj metody, aby przekazać elementowi powiązania informacje niestandardowe dotyczące usługi, dzięki czemu może ona prawidłowo obsługiwać usługę.  
  
 <xref:System.ServiceModel.Description.IServiceBehavior>obiekty mogą korzystać z dowolnej z tych metod, ale często tylko jeden jest ważny; w takich przypadkach nieużywane metody mogą zwracać bez wartości.  
  
> [!NOTE]
>  Wszystkie metody są <xref:System.ServiceModel.Description.IServiceBehavior> przekazywane <xref:System.ServiceModel.Description.ServiceDescription?displayProperty=nameWithType> i <xref:System.ServiceModel.ServiceHostBase?displayProperty=nameWithType> obiekty jako parametry. <xref:System.ServiceModel.Description.ServiceDescription> Parametr służy wyłącznie do celów egzaminacyjnych. w przypadku modyfikacji tych obiektów zachowanie wykonywania nie jest zdefiniowane.  
  
 Aby wykonać zadanie dostosowania, dla którego jest zamierzone, <xref:System.ServiceModel.Description.IServiceBehavior> należy dodać obiekt <xref:System.ServiceModel.Description.ServiceDescription.Behaviors%2A> do właściwości przed konstrukcją środowiska uruchomieniowego usługi. Istnieją trzy sposoby, aby to zrobić:  
  
-   Programowo Dodaj zachowanie usługi niestandardowej do <xref:System.ServiceModel.Description.ServiceDescription.Behaviors%2A> właściwości przed punktem, w <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType> którym <xref:System.ServiceModel.ServiceHost?displayProperty=nameWithType> Metoda jest wywoływana dla obiektu.  
  
-   Utwórz atrybut niestandardowy, który implementuje <xref:System.ServiceModel.Description.IServiceBehavior> i użyje go, aby oznaczyć klasy usług, które mają zostać zmodyfikowane. <xref:System.ServiceModel.ServiceHost> Gdy obiekt jest skonstruowany, WCF używa odbicia w celu odnajdywania atrybutów typu usługi. Jeśli wszystkie atrybuty zaimplementują <xref:System.ServiceModel.Description.IServiceBehavior>, są dodawane do kolekcji zachowań w. <xref:System.ServiceModel.Description.ServiceDescription>  
  
-   <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType> Rozwiń klasę, aby obsłużyć specyfikację zachowania w pliku konfiguracji aplikacji lub komputera. Zobacz sekcję przykładową, aby uzyskać więcej informacji.  
  
 Przykłady zachowań usługi w programie WCF <xref:System.ServiceModel.ServiceBehaviorAttribute> obejmują atrybut <xref:System.ServiceModel.Description.ServiceThrottlingBehavior?displayProperty=nameWithType>, <xref:System.ServiceModel.Description.ServiceDebugBehavior?displayProperty=nameWithType> a i <xref:System.ServiceModel.Description.ServiceMetadataBehavior?displayProperty=nameWithType> zachowanie.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje użycie zachowania usługi określonego w pliku konfiguracyjnym do wstawienia niestandardowego programu obsługi błędów w aplikacji usługi. W tym przykładzie program obsługi błędów przechwytuje wszystkie wyjątki i konwertuje je na niestandardowy `GreetingFault` błąd protokołu SOAP, który jest następnie zwracany do klienta.  
  
 Następująca <xref:System.ServiceModel.Description.IServiceBehavior> implementacja nie dodaje obiektów parametrów powiązania, dodaje obiekt niestandardowy <xref:System.ServiceModel.Dispatcher.IErrorHandler?displayProperty=nameWithType> do każdej <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A?displayProperty=nameWithType> właściwości i sprawdza, czy każda operacja usługi, do której zastosowano zachowanie usługi, ma <xref:System.ServiceModel.FaultContractAttribute?displayProperty=nameWithType> typu`GreetingFault`.  
  
 [!code-csharp[IErrorHandler#7](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/ierrorhandler.cs#7)]
 [!code-vb[IErrorHandler#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/ierrorhandler/vb/ierrorhandler.vb#7)]  
  
 W tym przykładzie zaimplementowano <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType>również klasę Behavior, która umożliwia wstawianie zachowania usługi przy użyciu go w pliku konfiguracyjnym aplikacji, jak pokazano w poniższym przykładzie kodu.  
  
 [!code-xml[IErrorHandler#4](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/hostapplication.exe.config#4)]   
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddBindingParameters">
      <MemberSignature Language="C#" Value="public void AddBindingParameters (System.ServiceModel.Description.ServiceDescription serviceDescription, System.ServiceModel.ServiceHostBase serviceHostBase, System.Collections.ObjectModel.Collection&lt;System.ServiceModel.Description.ServiceEndpoint&gt; endpoints, System.ServiceModel.Channels.BindingParameterCollection bindingParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddBindingParameters(class System.ServiceModel.Description.ServiceDescription serviceDescription, class System.ServiceModel.ServiceHostBase serviceHostBase, class System.Collections.ObjectModel.Collection`1&lt;class System.ServiceModel.Description.ServiceEndpoint&gt; endpoints, class System.ServiceModel.Channels.BindingParameterCollection bindingParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IServiceBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddBindingParameters(System::ServiceModel::Description::ServiceDescription ^ serviceDescription, System::ServiceModel::ServiceHostBase ^ serviceHostBase, System::Collections::ObjectModel::Collection&lt;System::ServiceModel::Description::ServiceEndpoint ^&gt; ^ endpoints, System::ServiceModel::Channels::BindingParameterCollection ^ bindingParameters);" />
      <MemberSignature Language="F#" Value="abstract member AddBindingParameters : System.ServiceModel.Description.ServiceDescription * System.ServiceModel.ServiceHostBase * System.Collections.ObjectModel.Collection&lt;System.ServiceModel.Description.ServiceEndpoint&gt; * System.ServiceModel.Channels.BindingParameterCollection -&gt; unit" Usage="iServiceBehavior.AddBindingParameters (serviceDescription, serviceHostBase, endpoints, bindingParameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceDescription" Type="System.ServiceModel.Description.ServiceDescription" />
        <Parameter Name="serviceHostBase" Type="System.ServiceModel.ServiceHostBase" />
        <Parameter Name="endpoints" Type="System.Collections.ObjectModel.Collection&lt;System.ServiceModel.Description.ServiceEndpoint&gt;" />
        <Parameter Name="bindingParameters" Type="System.ServiceModel.Channels.BindingParameterCollection" />
      </Parameters>
      <Docs>
        <param name="serviceDescription">Opis usługi usługi.</param>
        <param name="serviceHostBase">Host usługi.</param>
        <param name="endpoints">Punkty końcowe usługi.</param>
        <param name="bindingParameters">Obiekty niestandardowe, do których elementy powiązania mają dostęp.</param>
        <summary>Zapewnia możliwość przekazywania niestandardowych danych do elementów powiązania w celu obsługi implementacji kontraktu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj metody, aby dodać `parameters` do kolekcji niestandardowe obiekty danych, których elementy powiązania mogą użyć do uzyskania dodatkowych informacji, aby umożliwić im obsługę kontraktu. <xref:System.ServiceModel.Description.IServiceBehavior.AddBindingParameters%2A>  
  
 Ta metoda jest wywoływana jednokrotnie dla każdego identyfikatora URI nasłuchiwania. Na przykład jeśli usługa ma cztery punkty końcowe, a dwa z nich mają ten sam identyfikator URI nasłuchiwania, ta metoda jest wywoływana trzy razy. Przyczyną jest to, że `bindingParameters` docelowy Każdy stos kanałów i istnieje jeden stos kanału dla każdego identyfikatora URI nasłuchiwania. Ponieważ każde wywołanie odbiera te punkty końcowe przy użyciu identyfikatora URI nasłuchiwania, dwa wywołania <xref:System.ServiceModel.Description.ServiceEndpoint?displayProperty=nameWithType>każdy uzyskują jeden, a jedno wywołanie pobiera <xref:System.ServiceModel.Description.ServiceEndpoint?displayProperty=nameWithType> kolekcję dwóch obiektów.  
  
> [!NOTE]
>  Wszystkie metody są <xref:System.ServiceModel.Description.IServiceBehavior> przekazywane <xref:System.ServiceModel.Description.ServiceDescription?displayProperty=nameWithType> i <xref:System.ServiceModel.ServiceHostBase?displayProperty=nameWithType> obiekty jako parametry. <xref:System.ServiceModel.Description.ServiceDescription> Parametr służy do badania i wstawiania tylko dostosowań. w przypadku zmodyfikowania tych obiektów zachowanie wykonywania nie jest zdefiniowane.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyDispatchBehavior">
      <MemberSignature Language="C#" Value="public void ApplyDispatchBehavior (System.ServiceModel.Description.ServiceDescription serviceDescription, System.ServiceModel.ServiceHostBase serviceHostBase);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyDispatchBehavior(class System.ServiceModel.Description.ServiceDescription serviceDescription, class System.ServiceModel.ServiceHostBase serviceHostBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ApplyDispatchBehavior(System::ServiceModel::Description::ServiceDescription ^ serviceDescription, System::ServiceModel::ServiceHostBase ^ serviceHostBase);" />
      <MemberSignature Language="F#" Value="abstract member ApplyDispatchBehavior : System.ServiceModel.Description.ServiceDescription * System.ServiceModel.ServiceHostBase -&gt; unit" Usage="iServiceBehavior.ApplyDispatchBehavior (serviceDescription, serviceHostBase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceDescription" Type="System.ServiceModel.Description.ServiceDescription" />
        <Parameter Name="serviceHostBase" Type="System.ServiceModel.ServiceHostBase" />
      </Parameters>
      <Docs>
        <param name="serviceDescription">Opis usługi.</param>
        <param name="serviceHostBase">Host, który jest aktualnie skompilowany.</param>
        <summary>Zapewnia możliwość zmiany wartości właściwości czasu wykonywania lub wstawiania niestandardowych obiektów rozszerzeń, takich jak programy obsługi błędów, Interceptory komunikatów lub parametrów, rozszerzenia zabezpieczeń i inne niestandardowe obiekty rozszerzeń.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zaimplementuj <xref:System.ServiceModel.ServiceHostBase> metodę w celu sprawdzenia lub modyfikacji obiektu, który jest konstruowany w celu obsługi pewnego niestandardowego scenariusza wykonywania. <xref:System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior%2A>  
  
> [!NOTE]
>  Wszystkie metody są <xref:System.ServiceModel.Description.IServiceBehavior> przekazywane <xref:System.ServiceModel.Description.ServiceDescription?displayProperty=nameWithType> i <xref:System.ServiceModel.ServiceHostBase?displayProperty=nameWithType> obiekty jako parametry. <xref:System.ServiceModel.Description.ServiceDescription> Parametr służy do badania i wstawiania tylko dostosowań. w przypadku zmodyfikowania tych obiektów zachowanie wykonywania nie jest zdefiniowane.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje użycie zachowania usługi określonego w pliku konfiguracyjnym do wstawienia niestandardowego programu obsługi błędów w aplikacji usługi. W tym przykładzie program obsługi błędów przechwytuje wszystkie wyjątki i konwertuje je na niestandardowy `GreetingFault` błąd protokołu SOAP, który jest następnie zwracany do klienta.  
  
 Następująca <xref:System.ServiceModel.Description.IServiceBehavior> implementacja nie dodaje obiektów parametrów powiązania, dodaje obiekt niestandardowy <xref:System.ServiceModel.Dispatcher.IErrorHandler?displayProperty=nameWithType> do każdej <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A?displayProperty=nameWithType> właściwości i sprawdza, czy każda operacja usługi, do której zastosowano zachowanie usługi, ma <xref:System.ServiceModel.FaultContractAttribute?displayProperty=nameWithType> typu`GreetingFault`.  
  
 [!code-csharp[IErrorHandler#7](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/ierrorhandler.cs#7)]
 [!code-vb[IErrorHandler#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/ierrorhandler/vb/ierrorhandler.vb#7)]  
  
 W tym przykładzie zaimplementowano <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType>również klasę Behavior, która umożliwia wstawianie zachowania usługi przy użyciu go w pliku konfiguracyjnym aplikacji, jak pokazano w poniższym przykładzie kodu.  
  
 [!code-xml[IErrorHandler#4](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/hostapplication.exe.config#4)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public void Validate (System.ServiceModel.Description.ServiceDescription serviceDescription, System.ServiceModel.ServiceHostBase serviceHostBase);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Validate(class System.ServiceModel.Description.ServiceDescription serviceDescription, class System.ServiceModel.ServiceHostBase serviceHostBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IServiceBehavior.Validate(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Validate(System::ServiceModel::Description::ServiceDescription ^ serviceDescription, System::ServiceModel::ServiceHostBase ^ serviceHostBase);" />
      <MemberSignature Language="F#" Value="abstract member Validate : System.ServiceModel.Description.ServiceDescription * System.ServiceModel.ServiceHostBase -&gt; unit" Usage="iServiceBehavior.Validate (serviceDescription, serviceHostBase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceDescription" Type="System.ServiceModel.Description.ServiceDescription" />
        <Parameter Name="serviceHostBase" Type="System.ServiceModel.ServiceHostBase" />
      </Parameters>
      <Docs>
        <param name="serviceDescription">Opis usługi.</param>
        <param name="serviceHostBase">Aktualnie tworzony Host usługi.</param>
        <summary>Zapewnia możliwość sprawdzenia hosta usługi i opisu usługi w celu potwierdzenia, że usługa może zostać pomyślnie uruchomiona.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj metody <xref:System.ServiceModel.Description.IServiceBehavior.Validate%2A> , aby upewnić się, czy bieżąca usługa może działać prawidłowo zgodnie z Twoim scenariuszem.  
  
> [!NOTE]
>  Wszystkie metody są <xref:System.ServiceModel.Description.IServiceBehavior> przekazywane <xref:System.ServiceModel.Description.ServiceDescription?displayProperty=nameWithType> i <xref:System.ServiceModel.ServiceHostBase?displayProperty=nameWithType> obiekty jako parametry. <xref:System.ServiceModel.Description.ServiceDescription> Parametr służy do badania i wstawiania tylko dostosowań. w przypadku zmodyfikowania tych obiektów zachowanie wykonywania nie jest zdefiniowane.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje użycie zachowania usługi określonego w pliku konfiguracyjnym do wstawienia niestandardowego programu obsługi błędów w aplikacji usługi. W tym przykładzie program obsługi błędów przechwytuje wszystkie wyjątki i konwertuje je na niestandardowy `GreetingFault` błąd protokołu SOAP, który jest następnie zwracany do klienta.  
  
 Następująca <xref:System.ServiceModel.Description.IServiceBehavior> implementacja nie dodaje obiektów parametrów powiązania, dodaje obiekt niestandardowy <xref:System.ServiceModel.Dispatcher.IErrorHandler?displayProperty=nameWithType> do każdej <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A?displayProperty=nameWithType> właściwości i sprawdza, czy każda operacja usługi, do której zastosowano zachowanie usługi, ma <xref:System.ServiceModel.FaultContractAttribute?displayProperty=nameWithType> typu`GreetingFault`.  
  
 [!code-csharp[IErrorHandler#7](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/ierrorhandler.cs#7)]
 [!code-vb[IErrorHandler#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/ierrorhandler/vb/ierrorhandler.vb#7)]  
  
 W tym przykładzie zaimplementowano <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType>również klasę Behavior, która umożliwia wstawianie zachowania usługi przy użyciu go w pliku konfiguracyjnym aplikacji, jak pokazano w poniższym przykładzie kodu.  
  
 [!code-xml[IErrorHandler#4](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/hostapplication.exe.config#4)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
