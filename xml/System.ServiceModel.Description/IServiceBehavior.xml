<Type Name="IServiceBehavior" FullName="System.ServiceModel.Description.IServiceBehavior">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="8f26cbbfb79ab6e7cd4db524dfccbb6a72e11474" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="08/24/2018" />
    <Meta Name="ms.locfileid" Value="37617246" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IServiceBehavior" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IServiceBehavior" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Description.IServiceBehavior" />
  <TypeSignature Language="VB.NET" Value="Public Interface IServiceBehavior" />
  <TypeSignature Language="C++ CLI" Value="public interface class IServiceBehavior" />
  <TypeSignature Language="F#" Value="type IServiceBehavior = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Udostępnia mechanizm do modyfikacji lub wstawianie niestandardowych rozszerzeń w całej usługi, w tym <see cref="T:System.ServiceModel.ServiceHostBase" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementowanie <xref:System.ServiceModel.Description.IServiceBehavior> do zmodyfikowania, sprawdź, lub rozszerzać niektórych aspektów wykonywania całej usługi na poziomie aplikacji:  
  
-   Użyj <xref:System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior%2A> metodę, aby zmienić wartości właściwości czasu wykonywania lub wstawić rozszerzenia niestandardowe obiekty, takie jak procedury obsługi błędów, wiadomości lub parametr interceptory, rozszerzeń zabezpieczeń i innych obiektów niestandardowego rozszerzenia.  
  
-   Użyj <xref:System.ServiceModel.Description.IServiceBehavior.Validate%2A> metodę, aby zbadać opis przed Windows Communication Foundation (WCF) tworzy wykonywanie usługi, aby upewnić się, że może on wykonać prawidłowo.  
  
-   Użyj <xref:System.ServiceModel.Description.IServiceBehavior.AddBindingParameters%2A> metody do przekazania do elementu powiązania niestandardowych informacji dla usługi, aby usługa może obsługiwać poprawnie.  
  
 <xref:System.ServiceModel.Description.IServiceBehavior> obiekty można wprowadzać użyć dowolnego z tych metod, ale często jest tylko jeden ważny; w takich przypadkach nieużywane metody może zwrócić bez wartości.  
  
> [!NOTE]
>  Wszystkie <xref:System.ServiceModel.Description.IServiceBehavior> metody zakończyły się pomyślnie <xref:System.ServiceModel.Description.ServiceDescription?displayProperty=nameWithType> i <xref:System.ServiceModel.ServiceHostBase?displayProperty=nameWithType> obiektów jako parametrów. <xref:System.ServiceModel.Description.ServiceDescription> Parametr jest używany tylko badania; w przypadku zmodyfikowania tych obiektów zachowanie wykonywania jest niezdefiniowana.  
  
 Do wykonania zadania dostosowywania, do którego jest przeznaczony <xref:System.ServiceModel.Description.IServiceBehavior> można dodać obiektu do <xref:System.ServiceModel.Description.ServiceDescription.Behaviors%2A> właściwości przed konstrukcji środowiska uruchomieniowego usługi. Istnieją trzy sposoby, w tym celu:  
  
-   Programowe Dodawanie niestandardowego zachowania do <xref:System.ServiceModel.Description.ServiceDescription.Behaviors%2A> właściwości przed gdzie <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType> wywoływana jest metoda <xref:System.ServiceModel.ServiceHost?displayProperty=nameWithType> obiektu.  
  
-   Tworzenie niestandardowego atrybutu, który implementuje <xref:System.ServiceModel.Description.IServiceBehavior> i użyj go, aby oznaczyć klas usług, które mają zostać zmodyfikowane. Gdy <xref:System.ServiceModel.ServiceHost> obiekt jest konstruowany, WCF używa odbicia, aby odnaleźć atrybutów w typie usługi. Jeśli jakiekolwiek atrybuty wdrożenia <xref:System.ServiceModel.Description.IServiceBehavior>, są one dodawane do kolekcji zachowań na <xref:System.ServiceModel.Description.ServiceDescription>.  
  
-   Rozszerzanie <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType> klasy umożliwiają określenie zachowania w aplikacji lub plik konfiguracji maszyny. Zobacz części przykładu, aby uzyskać więcej informacji.  
  
 Przykłady usługi zachowań w programie WCF <xref:System.ServiceModel.ServiceBehaviorAttribute> atrybutu <xref:System.ServiceModel.Description.ServiceThrottlingBehavior?displayProperty=nameWithType>, <xref:System.ServiceModel.Description.ServiceDebugBehavior?displayProperty=nameWithType> i <xref:System.ServiceModel.Description.ServiceMetadataBehavior?displayProperty=nameWithType> zachowanie.  
  
   
  
## Examples  
 W poniższym przykładzie kodu pokazano sposób użycia zachowanie usługi, określone w pliku konfiguracji, aby wstawić obsługi błędów niestandardowych aplikacji usługi. W tym przykładzie program obsługi błędów przechwytuje wszystkie wyjątki i konwertuje je na niestandardowy `GreetingFault` błąd protokołu SOAP, która jest zwracana do klienta.  
  
 Następujące <xref:System.ServiceModel.Description.IServiceBehavior> implementacji dodaje żadne obiekty nie parametrze powiązania, dodaje niestandardową <xref:System.ServiceModel.Dispatcher.IErrorHandler?displayProperty=nameWithType> obiektu do każdego <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A?displayProperty=nameWithType> właściwości i sprawdza, czy każda operacja usługi, do którego zastosowano zachowanie usługi i ma <xref:System.ServiceModel.FaultContractAttribute?displayProperty=nameWithType>typu `GreetingFault`.  
  
 [!code-csharp[IErrorHandler#7](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/ierrorhandler.cs#7)]
 [!code-vb[IErrorHandler#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/ierrorhandler/vb/ierrorhandler.vb#7)]  
  
 W tym przykładzie również implementuje klasa behavior <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType>, które umożliwia zachowanie usługi, która ma zostać wstawiony przez używanie go w pliku konfiguracyjnym aplikacji, tak jak pokazano w poniższym przykładzie kodu.  
  
 [!code-xml[IErrorHandler#4](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/hostapplication.exe.config#4)]   
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddBindingParameters">
      <MemberSignature Language="C#" Value="public void AddBindingParameters (System.ServiceModel.Description.ServiceDescription serviceDescription, System.ServiceModel.ServiceHostBase serviceHostBase, System.Collections.ObjectModel.Collection&lt;System.ServiceModel.Description.ServiceEndpoint&gt; endpoints, System.ServiceModel.Channels.BindingParameterCollection bindingParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddBindingParameters(class System.ServiceModel.Description.ServiceDescription serviceDescription, class System.ServiceModel.ServiceHostBase serviceHostBase, class System.Collections.ObjectModel.Collection`1&lt;class System.ServiceModel.Description.ServiceEndpoint&gt; endpoints, class System.ServiceModel.Channels.BindingParameterCollection bindingParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IServiceBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase,System.Collections.ObjectModel.Collection{System.ServiceModel.Description.ServiceEndpoint},System.ServiceModel.Channels.BindingParameterCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddBindingParameters(System::ServiceModel::Description::ServiceDescription ^ serviceDescription, System::ServiceModel::ServiceHostBase ^ serviceHostBase, System::Collections::ObjectModel::Collection&lt;System::ServiceModel::Description::ServiceEndpoint ^&gt; ^ endpoints, System::ServiceModel::Channels::BindingParameterCollection ^ bindingParameters);" />
      <MemberSignature Language="F#" Value="abstract member AddBindingParameters : System.ServiceModel.Description.ServiceDescription * System.ServiceModel.ServiceHostBase * System.Collections.ObjectModel.Collection&lt;System.ServiceModel.Description.ServiceEndpoint&gt; * System.ServiceModel.Channels.BindingParameterCollection -&gt; unit" Usage="iServiceBehavior.AddBindingParameters (serviceDescription, serviceHostBase, endpoints, bindingParameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceDescription" Type="System.ServiceModel.Description.ServiceDescription" />
        <Parameter Name="serviceHostBase" Type="System.ServiceModel.ServiceHostBase" />
        <Parameter Name="endpoints" Type="System.Collections.ObjectModel.Collection&lt;System.ServiceModel.Description.ServiceEndpoint&gt;" />
        <Parameter Name="bindingParameters" Type="System.ServiceModel.Channels.BindingParameterCollection" />
      </Parameters>
      <Docs>
        <param name="serviceDescription">Opis usługi usługi.</param>
        <param name="serviceHostBase">Host usługi.</param>
        <param name="endpoints">Punkty końcowe usługi.</param>
        <param name="bindingParameters">Powiązanie, które elementy mają dostęp do obiektów niestandardowych.</param>
        <summary>Udostępnia możliwość przekazania danych niestandardowych do elementów, aby obsługiwać implementację kontraktu wiązania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.ServiceModel.Description.IServiceBehavior.AddBindingParameters%2A> metodę, aby dodać dane niestandardowe obiekty do `parameters` kolekcję elementów wiązania można użyć w celu uzyskania dodatkowych informacji, aby umożliwić im umowy dotyczącej pomocy technicznej.  
  
 Ta metoda jest wywoływana jeden raz dla każdego identyfikatora URI nasłuchiwania. Na przykład jeśli usługa ma cztery punkty końcowe, a dwa z nich ma takie same nasłuchiwać identyfikatora URI, a następnie ta metoda jest wywoływana trzy razy. Przyczyną jest fakt, że `bindingParameters` docelowe poszczególnych stosów kanału i ma jednego stosu kanał dla każdego identyfikatora URI nasłuchiwania. Ponieważ każde wywołanie otrzymuje tych punktów końcowych w tym identyfikatora URI nasłuchiwania, dwa wywołuje get każdego pojedynczego <xref:System.ServiceModel.Description.ServiceEndpoint?displayProperty=nameWithType>, oraz jedno wywołanie pobiera kolekcję dwa <xref:System.ServiceModel.Description.ServiceEndpoint?displayProperty=nameWithType> obiektów.  
  
> [!NOTE]
>  Wszystkie <xref:System.ServiceModel.Description.IServiceBehavior> metody zakończyły się pomyślnie <xref:System.ServiceModel.Description.ServiceDescription?displayProperty=nameWithType> i <xref:System.ServiceModel.ServiceHostBase?displayProperty=nameWithType> obiektów jako parametrów. <xref:System.ServiceModel.Description.ServiceDescription> Parametr służy do badania i wstawiania tylko dostosowania na; w przeciwnym razie zmodyfikowania tych obiektów zachowanie wykonywania jest niezdefiniowana.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyDispatchBehavior">
      <MemberSignature Language="C#" Value="public void ApplyDispatchBehavior (System.ServiceModel.Description.ServiceDescription serviceDescription, System.ServiceModel.ServiceHostBase serviceHostBase);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyDispatchBehavior(class System.ServiceModel.Description.ServiceDescription serviceDescription, class System.ServiceModel.ServiceHostBase serviceHostBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ApplyDispatchBehavior(System::ServiceModel::Description::ServiceDescription ^ serviceDescription, System::ServiceModel::ServiceHostBase ^ serviceHostBase);" />
      <MemberSignature Language="F#" Value="abstract member ApplyDispatchBehavior : System.ServiceModel.Description.ServiceDescription * System.ServiceModel.ServiceHostBase -&gt; unit" Usage="iServiceBehavior.ApplyDispatchBehavior (serviceDescription, serviceHostBase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceDescription" Type="System.ServiceModel.Description.ServiceDescription" />
        <Parameter Name="serviceHostBase" Type="System.ServiceModel.ServiceHostBase" />
      </Parameters>
      <Docs>
        <param name="serviceDescription">Opis usługi.</param>
        <param name="serviceHostBase">Host, który jest aktualnie kompilowana.</param>
        <summary>Oferuje możliwość zmiany wartości właściwości czasu wykonywania, lub wstawić rozszerzenia niestandardowe obiekty, takie jak procedury obsługi błędów, wiadomości lub parametr interceptory, rozszerzeń zabezpieczeń i innych obiektów niestandardowego rozszerzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementowanie <xref:System.ServiceModel.Description.IServiceBehavior.ApplyDispatchBehavior%2A> metodę, aby inspekcja lub modyfikowanie <xref:System.ServiceModel.ServiceHostBase> obiektu, który jest generowany w celu obsługi niektórych scenariuszy wykonywania niestandardowych.  
  
> [!NOTE]
>  Wszystkie <xref:System.ServiceModel.Description.IServiceBehavior> metody zakończyły się pomyślnie <xref:System.ServiceModel.Description.ServiceDescription?displayProperty=nameWithType> i <xref:System.ServiceModel.ServiceHostBase?displayProperty=nameWithType> obiektów jako parametrów. <xref:System.ServiceModel.Description.ServiceDescription> Parametr służy do badania i wstawiania tylko dostosowania na; w przeciwnym razie zmodyfikowania tych obiektów zachowanie wykonywania jest niezdefiniowana.  
  
   
  
## Examples  
 W poniższym przykładzie kodu pokazano sposób użycia zachowanie usługi, określone w pliku konfiguracji, aby wstawić obsługi błędów niestandardowych aplikacji usługi. W tym przykładzie program obsługi błędów przechwytuje wszystkie wyjątki i konwertuje je na niestandardowy `GreetingFault` błąd protokołu SOAP, która jest zwracana do klienta.  
  
 Następujące <xref:System.ServiceModel.Description.IServiceBehavior> implementacji dodaje żadne obiekty nie parametrze powiązania, dodaje niestandardową <xref:System.ServiceModel.Dispatcher.IErrorHandler?displayProperty=nameWithType> obiektu do każdego <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A?displayProperty=nameWithType> właściwości i sprawdza, czy każda operacja usługi, do którego zastosowano zachowanie usługi i ma <xref:System.ServiceModel.FaultContractAttribute?displayProperty=nameWithType>typu `GreetingFault`.  
  
 [!code-csharp[IErrorHandler#7](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/ierrorhandler.cs#7)]
 [!code-vb[IErrorHandler#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/ierrorhandler/vb/ierrorhandler.vb#7)]  
  
 W tym przykładzie również implementuje klasa behavior <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType>, które umożliwia zachowanie usługi, która ma zostać wstawiony przez używanie go w pliku konfiguracyjnym aplikacji, tak jak pokazano w poniższym przykładzie kodu.  
  
 [!code-xml[IErrorHandler#4](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/hostapplication.exe.config#4)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public void Validate (System.ServiceModel.Description.ServiceDescription serviceDescription, System.ServiceModel.ServiceHostBase serviceHostBase);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Validate(class System.ServiceModel.Description.ServiceDescription serviceDescription, class System.ServiceModel.ServiceHostBase serviceHostBase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IServiceBehavior.Validate(System.ServiceModel.Description.ServiceDescription,System.ServiceModel.ServiceHostBase)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Validate(System::ServiceModel::Description::ServiceDescription ^ serviceDescription, System::ServiceModel::ServiceHostBase ^ serviceHostBase);" />
      <MemberSignature Language="F#" Value="abstract member Validate : System.ServiceModel.Description.ServiceDescription * System.ServiceModel.ServiceHostBase -&gt; unit" Usage="iServiceBehavior.Validate (serviceDescription, serviceHostBase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="serviceDescription" Type="System.ServiceModel.Description.ServiceDescription" />
        <Parameter Name="serviceHostBase" Type="System.ServiceModel.ServiceHostBase" />
      </Parameters>
      <Docs>
        <param name="serviceDescription">Opis usługi.</param>
        <param name="serviceHostBase">Host usługi, który jest obecnie tworzony.</param>
        <summary>Zapewnia możliwość kontroli hosta usługi oraz opis usługi, aby upewnić się, że usługa może działać pomyślnie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.ServiceModel.Description.IServiceBehavior.Validate%2A> metody, aby upewnić się, czy bieżąca usługa może wykonać prawidłowo zgodnie z danego scenariusza.  
  
> [!NOTE]
>  Wszystkie <xref:System.ServiceModel.Description.IServiceBehavior> metody zakończyły się pomyślnie <xref:System.ServiceModel.Description.ServiceDescription?displayProperty=nameWithType> i <xref:System.ServiceModel.ServiceHostBase?displayProperty=nameWithType> obiektów jako parametrów. <xref:System.ServiceModel.Description.ServiceDescription> Parametr służy do badania i wstawiania tylko dostosowania na; w przeciwnym razie zmodyfikowania tych obiektów zachowanie wykonywania jest niezdefiniowana.  
  
   
  
## Examples  
 W poniższym przykładzie kodu pokazano sposób użycia zachowanie usługi, określone w pliku konfiguracji, aby wstawić obsługi błędów niestandardowych aplikacji usługi. W tym przykładzie program obsługi błędów przechwytuje wszystkie wyjątki i konwertuje je na niestandardowy `GreetingFault` błąd protokołu SOAP, która jest zwracana do klienta.  
  
 Następujące <xref:System.ServiceModel.Description.IServiceBehavior> implementacji dodaje żadne obiekty nie parametrze powiązania, dodaje niestandardową <xref:System.ServiceModel.Dispatcher.IErrorHandler?displayProperty=nameWithType> obiektu do każdego <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A?displayProperty=nameWithType> właściwości i sprawdza, czy każda operacja usługi, do którego zastosowano zachowanie usługi i ma <xref:System.ServiceModel.FaultContractAttribute?displayProperty=nameWithType>typu `GreetingFault`.  
  
 [!code-csharp[IErrorHandler#7](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/ierrorhandler.cs#7)]
 [!code-vb[IErrorHandler#7](~/samples/snippets/visualbasic/VS_Snippets_CFX/ierrorhandler/vb/ierrorhandler.vb#7)]  
  
 W tym przykładzie również implementuje klasa behavior <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType>, które umożliwia zachowanie usługi, która ma zostać wstawiony przez używanie go w pliku konfiguracyjnym aplikacji, tak jak pokazano w poniższym przykładzie kodu.  
  
 [!code-xml[IErrorHandler#4](~/samples/snippets/csharp/VS_Snippets_CFX/ierrorhandler/cs/hostapplication.exe.config#4)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>