<Type Name="IContractBehavior" FullName="System.ServiceModel.Description.IContractBehavior">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="e17c6844d617cd3c0a5098ea52e8b8f222b39f89" />
    <Meta Name="ms.sourcegitcommit" Value="3907f9a5780957d9c85af2e54c0a5bc2a5bf19ab" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/14/2018" />
    <Meta Name="ms.locfileid" Value="34316765" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IContractBehavior" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IContractBehavior" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Description.IContractBehavior" />
  <TypeSignature Language="VB.NET" Value="Public Interface IContractBehavior" />
  <TypeSignature Language="C++ CLI" Value="public interface class IContractBehavior" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Implementuje metody, które mogą służyć do rozszerzenia zachowania w czasie wykonywania dla kontraktu w jednej aplikacji usługi lub klienta.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementowanie <xref:System.ServiceModel.Description.IContractBehavior> interfejsu zmodyfikować, sprawdź lub rozszerzyć pewien aspekt wykonanie całej kontraktu na poziomie aplikacji. W odróżnieniu od <xref:System.ServiceModel.Description.IServiceBehavior> i <xref:System.ServiceModel.Description.IEndpointBehavior> obiektów, <xref:System.ServiceModel.Description.IContractBehavior> tylko może można dodać programistycznie; nie można dodać obiekty do środowiska wykonawczego przy użyciu pliku konfiguracji aplikacji lub przy użyciu atrybutu.  
  
 Aby uzyskać więcej informacji o wybieraniu między usługą, punktu końcowego i kontrakt zachowania, zobacz [Konfigurowanie i rozszerzanie środowiska uruchomieniowego za pomocą zachowań](~/docs/framework/wcf/extending/configuring-and-extending-the-runtime-with-behaviors.md).  
  
-   Użyj <xref:System.ServiceModel.Description.IContractBehavior.AddBindingParameters%2A> metodę w celu zapewnienia elementy wiązania z danymi niestandardowych w celu obsługi zachowanie.  
  
-   Użyj <xref:System.ServiceModel.Description.IContractBehavior.ApplyClientBehavior%2A> metodę, aby zmodyfikować, sprawdź lub Wstaw rozszerzenia do kontraktu w aplikacji klienckiej.  
  
-   Użyj <xref:System.ServiceModel.Description.IContractBehavior.ApplyDispatchBehavior%2A> metodę, aby zmodyfikować, sprawdź lub Wstaw rozszerzenia do kontraktu w aplikacji usługi.  
  
-   Użyj <xref:System.ServiceModel.Description.IContractBehavior.Validate%2A> metody, aby upewnić się, że kontrakt może obsługiwać poszczególnych funkcji.  
  
 <xref:System.ServiceModel.Description.IContractBehavior> obiekty można wprowadzać użyć dowolnej z tych metod, ale często jest tylko jeden ważne; w takich przypadkach nieużywane metody może zwrócić bez wartości.  
  
> [!NOTE]
>  Wszystkie <xref:System.ServiceModel.Description.IContractBehavior> przekazać metody <xref:System.ServiceModel.Description.ContractDescription?displayProperty=nameWithType> i <xref:System.ServiceModel.Description.ServiceEndpoint?displayProperty=nameWithType> jako parametry. Te parametry są przeznaczone dla badania; Jeśli zmodyfikujesz obiekty sposób wykonywania jest niezdefiniowana.  
  
 <xref:System.ServiceModel.Description.IContractBehavior> można używać typów na usługi lub klienta lub obie. Do wykonywania zadań dostosowania w usłudze <xref:System.ServiceModel.Description.IContractBehavior> można dodać obiektu do <xref:System.ServiceModel.Description.ContractDescription.Behaviors%2A> właściwości przed konstrukcji środowiska uruchomieniowego usługi, która występuje podczas <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType> wywoływana jest metoda <xref:System.ServiceModel.ServiceHost?displayProperty=nameWithType> obiektu. Istnieją dwa sposoby, w tym celu.  
  
 Pierwsze rozwiązanie polega na programowane Dodawanie zachowania niestandardowych kontraktu <xref:System.ServiceModel.Description.ContractDescription.Behaviors%2A> właściwości przed punktem podczas <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType> wywoływana jest metoda <xref:System.ServiceModel.ServiceHost?displayProperty=nameWithType> obiektu. Po zastosowaniu w ten sposób zachowanie jest stosowany dla wszystkich wiadomości przepływających przez tego kontraktu w dowolnym punkcie końcowym.  
  
> [!NOTE]
>  Zachowanie jest stosowany do wszystkich umów tego samego typu. Na przykład jeśli programowo ten sam typ kontraktu należy dodać do więcej niż jeden punkt końcowy, zachowanie modyfikuje wszystkie punkty końcowe, które odwołują się do tego samego obiektu kontraktu.  
  
 Drugi sposób polega na tworzenie niestandardowego atrybutu, który implementuje <xref:System.ServiceModel.Description.IContractBehavior> i że w celu zastosowania:  
  
-   Interfejs kontraktu. W takim przypadku zachowanie jest stosowane do wszystkich umów tego typu dowolnego punktu końcowego.  
  
-   Klasa usługi.  W takim przypadku zachowanie jest stosowane do wszystkich punktów końcowych, niezależnie od tego kontraktu.  
  
-   Klasa wywołania zwrotnego.  W takim przypadku zachowanie jest stosowane do punktu końcowego dupleksu klienta.  
  
 Zachowanie drugiej metody różni się nieco, jeśli atrybut niestandardowy implementuje również <xref:System.ServiceModel.Description.IContractBehaviorAttribute?displayProperty=nameWithType>. W takim przypadku zachowanie jest następujący:  
  
-   Interfejs kontraktu. W takim przypadku zachowanie jest stosowany do wszystkich umów tego typu dowolnego punktu końcowego i Windows Communication Foundation (WCF) ignoruje wartość <xref:System.ServiceModel.Description.IContractBehaviorAttribute.TargetContract%2A?displayProperty=nameWithType> właściwości.  
  
-   Klasa usługi.  W takim przypadku zachowanie jest stosowane tylko do punktów końcowych z kontraktem jest wartością <xref:System.ServiceModel.Description.IContractBehaviorAttribute.TargetContract%2A?displayProperty=nameWithType> właściwości.  
  
-   Klasa wywołania zwrotnego.  W takim przypadku zachowanie jest stosowany do punktu końcowego dupleksu klienta i WCF ignoruje wartość <xref:System.ServiceModel.Description.IContractBehaviorAttribute.TargetContract%2A?displayProperty=nameWithType> właściwości.  
  
 Do wykonania zadania dostosowywania na komputerze klienckim, dla których ma mieć miejsce, <xref:System.ServiceModel.Description.IContractBehavior> można dodać obiektu do <xref:System.ServiceModel.Description.ContractDescription.Behaviors%2A> właściwości przed konstrukcji środowiska uruchomieniowego klienta, która występuje podczas <xref:System.ServiceModel.ChannelFactory%601.CreateChannel%2A?displayProperty=nameWithType> jest wywoływana. Istnieją dwa sposoby wykonania tej czynności:  
  
-   Programowe Dodawanie zachowania kontraktu niestandardowych do <xref:System.ServiceModel.Description.ContractDescription.Behaviors%2A> właściwości przed punktem podczas <xref:System.ServiceModel.ChannelFactory%601.CreateChannel%2A?displayProperty=nameWithType> jest wywoływana.  
  
-   Tworzenie niestandardowego atrybutu to również implementuje <xref:System.ServiceModel.Description.IContractBehavior>.  
  
 Aby uzyskać więcej informacji na temat dodawania programowo <xref:System.ServiceModel.Description.IContractBehavior> typy aplikacji klienta lub usługi, zobacz [Konfigurowanie i rozszerzanie środowiska uruchomieniowego za pomocą zachowań](~/docs/framework/wcf/extending/configuring-and-extending-the-runtime-with-behaviors.md).  
  
   
  
## Examples  
 Poniższy przykład kodu zakłada niestandardowego <xref:System.ServiceModel.Dispatcher.IInstanceProvider> implementacja wywołuje `ObjectProviderBehavior` zapewnia zachowanie "singleton"; zawsze zwraca tego samego wystąpienia usługi i nie jest odtwarzana.  
  
 Aby wstawić Dostosowywanie dostawcy wystąpienia, w przykładzie przedstawiono sposób do zaimplementowania atrybutu niestandardowego (`SingletonBehaviorAttribute`), który zawiera <xref:System.ServiceModel.Description.IContractBehavior> do wstawienia niestandardowych wystąpienie usługodawcy. Implementuje również <xref:System.ServiceModel.Description.IContractBehaviorAttribute>, który wiąże jego użycie do `ISampleService` kontraktu.  
  
 [!code-csharp[IContractBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#2)]
 [!code-vb[IContractBehavior#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddBindingParameters">
      <MemberSignature Language="C#" Value="public void AddBindingParameters (System.ServiceModel.Description.ContractDescription contractDescription, System.ServiceModel.Description.ServiceEndpoint endpoint, System.ServiceModel.Channels.BindingParameterCollection bindingParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddBindingParameters(class System.ServiceModel.Description.ContractDescription contractDescription, class System.ServiceModel.Description.ServiceEndpoint endpoint, class System.ServiceModel.Channels.BindingParameterCollection bindingParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IContractBehavior.AddBindingParameters(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Channels.BindingParameterCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddBindingParameters(System::ServiceModel::Description::ContractDescription ^ contractDescription, System::ServiceModel::Description::ServiceEndpoint ^ endpoint, System::ServiceModel::Channels::BindingParameterCollection ^ bindingParameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contractDescription" Type="System.ServiceModel.Description.ContractDescription" />
        <Parameter Name="endpoint" Type="System.ServiceModel.Description.ServiceEndpoint" />
        <Parameter Name="bindingParameters" Type="System.ServiceModel.Channels.BindingParameterCollection" />
      </Parameters>
      <Docs>
        <param name="contractDescription">Opis kontraktu, aby zmodyfikować.</param>
        <param name="endpoint">Punkt końcowy do zmodyfikowania.</param>
        <param name="bindingParameters">Obiekty, które wymagają elementy powiązania do obsługi zachowanie.</param>
        <summary>Konfiguruje elementów powiązania do obsługi zachowanie kontraktu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementowanie <xref:System.ServiceModel.Description.IContractBehavior.AddBindingParameters%2A> metodę w celu zapewnienia elementy powiązania z dodatkowe obiekty, które wymagają obsługi zachowanie kontraktu.  
  
 Ta metoda jest wywoływana, gdy dla każdego punktu końcowego, który używa kontraktu określonej usługi.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyClientBehavior">
      <MemberSignature Language="C#" Value="public void ApplyClientBehavior (System.ServiceModel.Description.ContractDescription contractDescription, System.ServiceModel.Description.ServiceEndpoint endpoint, System.ServiceModel.Dispatcher.ClientRuntime clientRuntime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyClientBehavior(class System.ServiceModel.Description.ContractDescription contractDescription, class System.ServiceModel.Description.ServiceEndpoint endpoint, class System.ServiceModel.Dispatcher.ClientRuntime clientRuntime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IContractBehavior.ApplyClientBehavior(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.ClientRuntime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ApplyClientBehavior(System::ServiceModel::Description::ContractDescription ^ contractDescription, System::ServiceModel::Description::ServiceEndpoint ^ endpoint, System::ServiceModel::Dispatcher::ClientRuntime ^ clientRuntime);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contractDescription" Type="System.ServiceModel.Description.ContractDescription" />
        <Parameter Name="endpoint" Type="System.ServiceModel.Description.ServiceEndpoint" />
        <Parameter Name="clientRuntime" Type="System.ServiceModel.Dispatcher.ClientRuntime" />
      </Parameters>
      <Docs>
        <param name="contractDescription">Opis kontraktu, dla którego ma rozszerzenie.</param>
        <param name="endpoint">Punkt końcowy.</param>
        <param name="clientRuntime">Środowisko uruchomieniowe klienta.</param>
        <summary>Implementuje modyfikacji lub rozszerzenia klienta przez kontrakt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementowanie <xref:System.ServiceModel.Description.IContractBehavior.ApplyClientBehavior%2A> metodę, aby wyświetlić, modyfikowanie lub dodawanie niestandardowych rozszerzeń do środowiska uruchomieniowego klienta, przez wszystkie komunikaty lub dla jednego określonej operacji. Aby uzyskać więcej informacji o dostosowywaniu, jakie można zrobić za pomocą obiektu środowiska wykonawczego klienta, zobacz <xref:System.ServiceModel.Dispatcher.ClientRuntime> i <xref:System.ServiceModel.Dispatcher.ClientOperation>.  
  
 <xref:System.ServiceModel.Description.IContractBehavior.ApplyClientBehavior%2A> Metody może zgłosić <xref:System.NotImplementedException> wyjątek, jeśli zachowanie jest przeznaczona tylko do użytku w aplikacji usługi.  
  
 Ta metoda jest wywoływana, gdy dla każdego punktu końcowego, który używa kontraktu określonej usługi.  
  
 Należy pamiętać, że może być dwóch operacji o tej samej nazwie w opisie (po jednym w każdym kierunku), dlatego należy wykonać iterację operacje, w przypadku kontraktu dupleksowego, musi mieć związek kierunek wiadomości między punktem końcowym <xref:System.ServiceModel.Dispatcher.ClientRuntime> i zwróconą przez <xref:System.ServiceModel.Dispatcher.ClientRuntime.CallbackDispatchRuntime%2A> właściwości.  
  
 Ponieważ innych zachowań może już dodane lub usunięte niektóre operacje z środowiska uruchomieniowego, nie ma żadnej gwarancji, że istnieją taką samą liczbę operacji w opisie są <xref:System.ServiceModel.Dispatcher.ClientOperation> obiekty w <xref:System.ServiceModel.Dispatcher.ClientRuntime.Operations%2A> właściwości.  
  
   
  
## Examples  
 Poniższy przykład kodu zakłada niestandardowego <xref:System.ServiceModel.Dispatcher.IInstanceProvider> implementacja wywołuje `ObjectProviderBehavior` zapewnia zachowanie "singleton"; zawsze zwraca tego samego wystąpienia usługi i nie jest odtwarzana.  
  
 Aby wstawić Dostosowywanie dostawcy wystąpienia, w przykładzie przedstawiono sposób do zaimplementowania atrybutu niestandardowego (`SingletonBehaviorAttribute`), który zawiera <xref:System.ServiceModel.Description.IContractBehavior> do wstawienia niestandardowych wystąpienie usługodawcy. Implementuje również <xref:System.ServiceModel.Description.IContractBehaviorAttribute>, który wiąże jego użycie do `ISampleService` kontraktu.  
  
 [!code-csharp[IContractBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#2)]
 [!code-vb[IContractBehavior#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyDispatchBehavior">
      <MemberSignature Language="C#" Value="public void ApplyDispatchBehavior (System.ServiceModel.Description.ContractDescription contractDescription, System.ServiceModel.Description.ServiceEndpoint endpoint, System.ServiceModel.Dispatcher.DispatchRuntime dispatchRuntime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyDispatchBehavior(class System.ServiceModel.Description.ContractDescription contractDescription, class System.ServiceModel.Description.ServiceEndpoint endpoint, class System.ServiceModel.Dispatcher.DispatchRuntime dispatchRuntime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IContractBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.DispatchRuntime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ApplyDispatchBehavior(System::ServiceModel::Description::ContractDescription ^ contractDescription, System::ServiceModel::Description::ServiceEndpoint ^ endpoint, System::ServiceModel::Dispatcher::DispatchRuntime ^ dispatchRuntime);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contractDescription" Type="System.ServiceModel.Description.ContractDescription" />
        <Parameter Name="endpoint" Type="System.ServiceModel.Description.ServiceEndpoint" />
        <Parameter Name="dispatchRuntime" Type="System.ServiceModel.Dispatcher.DispatchRuntime" />
      </Parameters>
      <Docs>
        <param name="contractDescription">Opis kontraktu, który ma być zmodyfikowana.</param>
        <param name="endpoint">Punkt końcowy, który udostępnia kontraktu.</param>
        <param name="dispatchRuntime">Środowisko uruchomieniowe wysyłania, które kontroluje wykonanie usługi.</param>
        <summary>Implementuje modyfikacji lub rozszerzenia klienta przez kontrakt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementowanie <xref:System.ServiceModel.Description.IContractBehavior.ApplyDispatchBehavior%2A> do wyświetlania, zmodyfikować lub dodać niestandardowe rozszerzenia do środowiska uruchomieniowego usługi przez wszystkie wiadomości w określonej kontraktu lub dla jednej operacji w tej Umowy. Aby uzyskać więcej informacji o dostosowywaniu, jakie można wykonywać w aplikacji usługi, zobacz <xref:System.ServiceModel.Dispatcher.DispatchRuntime> i <xref:System.ServiceModel.Dispatcher.DispatchOperation>.  
  
 <xref:System.ServiceModel.Description.IContractBehavior.ApplyDispatchBehavior%2A> Metody może zgłosić <xref:System.NotImplementedException> wyjątek, jeśli zachowanie jest przeznaczona tylko do użytku w aplikacji klienckiej.  
  
 Ta metoda jest wywoływana, gdy dla każdego punktu końcowego, który używa kontraktu określonej usługi.  
  
 Należy pamiętać, że może być dwóch operacji o tej samej nazwie w opisie (po jednym w każdym kierunku), dlatego należy wykonać iterację operacje, w przypadku kontraktu dupleksowego, musi mieć związek kierunek wiadomości między punktem końcowym <xref:System.ServiceModel.Dispatcher.DispatchRuntime> i zwróconą przez <xref:System.ServiceModel.Dispatcher.DispatchRuntime.CallbackClientRuntime%2A> właściwości.  
  
 Ponadto, ponieważ inne zachowania może już dodane lub usunięte niektóre operacje z środowiska uruchomieniowego, nie ma żadnej gwarancji, czy taką samą liczbę operacji w opisie są <xref:System.ServiceModel.Dispatcher.DispatchOperation> obiekty w <xref:System.ServiceModel.Dispatcher.DispatchRuntime.Operations%2A> właściwości.  
  
   
  
## Examples  
 Poniższy przykład kodu zakłada niestandardowego <xref:System.ServiceModel.Dispatcher.IInstanceProvider> implementacja wywołuje `ObjectProviderBehavior` zapewnia zachowanie "singleton"; zawsze zwraca tego samego wystąpienia usługi i nie jest odtwarzana.  
  
 Aby wstawić Dostosowywanie dostawcy wystąpienia, w przykładzie przedstawiono sposób do zaimplementowania atrybutu niestandardowego (`SingletonBehaviorAttribute`), który zawiera <xref:System.ServiceModel.Description.IContractBehavior> do wstawienia niestandardowych wystąpienie usługodawcy. Implementuje również <xref:System.ServiceModel.Description.IContractBehaviorAttribute>, który wiąże jego użycie do `ISampleService` kontraktu.  
  
 [!code-csharp[IContractBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#2)]
 [!code-vb[IContractBehavior#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public void Validate (System.ServiceModel.Description.ContractDescription contractDescription, System.ServiceModel.Description.ServiceEndpoint endpoint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Validate(class System.ServiceModel.Description.ContractDescription contractDescription, class System.ServiceModel.Description.ServiceEndpoint endpoint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IContractBehavior.Validate(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Validate(System::ServiceModel::Description::ContractDescription ^ contractDescription, System::ServiceModel::Description::ServiceEndpoint ^ endpoint);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contractDescription" Type="System.ServiceModel.Description.ContractDescription" />
        <Parameter Name="endpoint" Type="System.ServiceModel.Description.ServiceEndpoint" />
      </Parameters>
      <Docs>
        <param name="contractDescription">Kontrakt do sprawdzania poprawności.</param>
        <param name="endpoint">Punkt końcowy do sprawdzania poprawności.</param>
        <summary>Wdrożenie, aby upewnić się, że kontrakt i punktu końcowego może obsługiwać zachowanie kontraktu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementowanie <xref:System.ServiceModel.Description.IContractBehavior.Validate%2A> metodę, aby potwierdzić, że opis kontraktu jest wystarczające do obsługi zachowanie niestandardowych kontraktu. Implementacje sprawdzić opis i albo zgłosić lub zwraca żadnej wartości.  
  
 Ta metoda jest wywoływana, gdy dla każdego punktu końcowego, który używa kontraktu określonej usługi.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>