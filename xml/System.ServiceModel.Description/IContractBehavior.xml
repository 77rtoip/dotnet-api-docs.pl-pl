<Type Name="IContractBehavior" FullName="System.ServiceModel.Description.IContractBehavior">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4e230854b8d92649d93bfd16f0c13ff1c71e48d2" /><Meta Name="ms.sourcegitcommit" Value="220917117f9d774aaa482439aa7324e39dc1f5b6" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="02/25/2019" /><Meta Name="ms.locfileid" Value="56772989" /></Metadata><TypeSignature Language="C#" Value="public interface IContractBehavior" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IContractBehavior" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Description.IContractBehavior" />
  <TypeSignature Language="VB.NET" Value="Public Interface IContractBehavior" />
  <TypeSignature Language="C++ CLI" Value="public interface class IContractBehavior" />
  <TypeSignature Language="F#" Value="type IContractBehavior = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.5.0.1</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Implementuje metody, które mogą służyć do rozszerzenia zachowania w czasie wykonywania dla kontraktu w jednej usłudze lub aplikacji klienckiej.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementowanie <xref:System.ServiceModel.Description.IContractBehavior> interfejsu modyfikacji, sprawdź lub rozszerzenia niektóre aspekty wykonania całego zamówienia na poziomie aplikacji. W odróżnieniu od <xref:System.ServiceModel.Description.IServiceBehavior> i <xref:System.ServiceModel.Description.IEndpointBehavior> obiektów <xref:System.ServiceModel.Description.IContractBehavior> obiektów nie można dodać do środowiska uruchomieniowego przy użyciu pliku konfiguracji aplikacji; one mogą być dodawane tylko programowo lub za pomocą atrybutu.  
  
 Aby uzyskać więcej informacji o wybieraniu między usługą, punktu końcowego i kontrakt zachowań, zobacz [Konfigurowanie i rozszerzanie środowiska uruchomieniowego za pomocą zachowań](~/docs/framework/wcf/extending/configuring-and-extending-the-runtime-with-behaviors.md).  
  
-   Użyj <xref:System.ServiceModel.Description.IContractBehavior.AddBindingParameters%2A> metody w celu zapewnienia elementy powiązania przy użyciu niestandardowych danych do obsługi zachowanie.  
  
-   Użyj <xref:System.ServiceModel.Description.IContractBehavior.ApplyClientBehavior%2A> metodę, aby zmodyfikować, sprawdź lub Wstaw rozszerzenia kontrakt w aplikacji klienckiej.  
  
-   Użyj <xref:System.ServiceModel.Description.IContractBehavior.ApplyDispatchBehavior%2A> metodę, aby zmodyfikować, sprawdź lub Wstaw rozszerzenia kontrakt w aplikacji usługi.  
  
-   Użyj <xref:System.ServiceModel.Description.IContractBehavior.Validate%2A> metodę, aby upewnić się, że kontrakt może obsługiwać poszczególnych funkcji.  
  
 <xref:System.ServiceModel.Description.IContractBehavior> obiekty można wprowadzać użyć dowolnego z tych metod, ale często jest tylko jeden ważny; w takich przypadkach nieużywane metody mogą powrócić bez żadnej wartości.  
  
> [!NOTE]
>  Wszystkie <xref:System.ServiceModel.Description.IContractBehavior> metody zakończyły się pomyślnie <xref:System.ServiceModel.Description.ContractDescription?displayProperty=nameWithType> i <xref:System.ServiceModel.Description.ServiceEndpoint?displayProperty=nameWithType> jako parametry. Te parametry są do badania; Jeśli zmodyfikujesz obiekty zachowanie wykonywania jest niezdefiniowane.  
  
 <xref:System.ServiceModel.Description.IContractBehavior> typy mogą być używane na usługi lub klienta lub obu. Do wykonania zadania dostosowywania w usłudze <xref:System.ServiceModel.Description.IContractBehavior> można dodać obiektu do <xref:System.ServiceModel.Description.ContractDescription.Behaviors%2A> właściwości przed konstrukcji środowiska uruchomieniowego usługi, co ma miejsce, gdy <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType> metoda jest wywoływana w <xref:System.ServiceModel.ServiceHost?displayProperty=nameWithType> obiektu. Istnieją dwa sposoby, aby to zrobić.  
  
 Pierwsza metoda jest aby programowo dodać zachowanie niestandardowe kontraktu w celu <xref:System.ServiceModel.Description.ContractDescription.Behaviors%2A> właściwości przed podczas <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType> wywoływana jest metoda <xref:System.ServiceModel.ServiceHost?displayProperty=nameWithType> obiektu. Po zastosowaniu w ten sposób, zachowanie jest stosowana dla wszystkich wiadomości przepływają przez umowy w dowolnym punkcie końcowym.  
  
> [!NOTE]
>  To zachowanie jest stosowany do wszystkich zamówień tego samego typu. Na przykład jeśli ten sam typ kontraktu jest programowo dodać do więcej niż jeden punkt końcowy, zachowanie modyfikuje wszystkie punkty końcowe, które odwołują się do tego samego obiektu kontraktu.  
  
 Druga metoda jest utworzenie atrybutu niestandardowego, który implementuje <xref:System.ServiceModel.Description.IContractBehavior> i zastosuj ją do:  
  
-   Interfejs kontraktu. W takim przypadku zachowanie jest stosowane do wszystkich umów w dowolnym punkcie końcowym tego typu.  
  
-   Klasa usługi.  W takim przypadku zachowanie jest stosowane do wszystkich punktów końcowych, niezależnie od tego, umowy.  
  
-   Klasa wywołania zwrotnego.  W takim przypadku zachowanie dotyczy punkt końcowy klienta dwukierunkowego.  
  
 Zachowanie drugiego podejścia różni się nieco, jeśli atrybut niestandardowy implementuje również <xref:System.ServiceModel.Description.IContractBehaviorAttribute?displayProperty=nameWithType>. W takim przypadku zachowanie jest następujący:  
  
-   Interfejs kontraktu. W takim przypadku zachowanie jest stosowany do wszystkich zamówień tego typu w dowolnym punkcie końcowym i Windows Communication Foundation (WCF) ignoruje wartość <xref:System.ServiceModel.Description.IContractBehaviorAttribute.TargetContract%2A?displayProperty=nameWithType> właściwości.  
  
-   Klasa usługi.  W takim przypadku zachowanie jest stosowane tylko do punktów końcowych kontrakt jest wartością <xref:System.ServiceModel.Description.IContractBehaviorAttribute.TargetContract%2A?displayProperty=nameWithType> właściwości.  
  
-   Klasa wywołania zwrotnego.  W takim przypadku zachowanie jest stosowany do punktu końcowego dwukierunkowego klienta i WCF ignoruje wartość <xref:System.ServiceModel.Description.IContractBehaviorAttribute.TargetContract%2A?displayProperty=nameWithType> właściwości.  
  
 Do wykonania zadania dostosowywania na komputerze klienckim, do którego jest przeznaczony <xref:System.ServiceModel.Description.IContractBehavior> można dodać obiektu do <xref:System.ServiceModel.Description.ContractDescription.Behaviors%2A> właściwości przed konstrukcji środowiska uruchomieniowego klienta, co ma miejsce, gdy <xref:System.ServiceModel.ChannelFactory%601.CreateChannel%2A?displayProperty=nameWithType> nosi nazwę. Istnieją dwa sposoby wykonania tej czynności:  
  
-   Programowo dodać zachowanie niestandardowe kontraktu w celu <xref:System.ServiceModel.Description.ContractDescription.Behaviors%2A> właściwości przed podczas <xref:System.ServiceModel.ChannelFactory%601.CreateChannel%2A?displayProperty=nameWithType> jest wywoływana.  
  
-   Tworzenie atrybutu niestandardowego, który także implementuje <xref:System.ServiceModel.Description.IContractBehavior>.  
  
 Aby uzyskać więcej informacji na temat dodawania programowo <xref:System.ServiceModel.Description.IContractBehavior> typów do klienta lub usługi aplikacji, zobacz [Konfigurowanie i rozszerzanie środowiska uruchomieniowego za pomocą zachowań](~/docs/framework/wcf/extending/configuring-and-extending-the-runtime-with-behaviors.md).  
  
   
  
## Examples  
 Poniższy przykład kodu zakłada niestandardowego <xref:System.ServiceModel.Dispatcher.IInstanceProvider> wdrożenia o nazwie `ObjectProviderBehavior` zapewniający zachowanie "singleton"; zawsze zwraca to samo wystąpienie usługi i nie Kosza.  
  
 Aby wstawić Dostosowywanie dostawcy wystąpienia, w przykładzie pokazano sposób implementacji atrybut niestandardowy (`SingletonBehaviorAttribute`), który zawiera <xref:System.ServiceModel.Description.IContractBehavior> do wstawienia niestandardowe wystąpienie usługodawcy. Implementuje także <xref:System.ServiceModel.Description.IContractBehaviorAttribute>, który wiąże jego użycia, aby `ISampleService` kontraktu.  
  
 [!code-csharp[IContractBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#2)]
 [!code-vb[IContractBehavior#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddBindingParameters">
      <MemberSignature Language="C#" Value="public void AddBindingParameters (System.ServiceModel.Description.ContractDescription contractDescription, System.ServiceModel.Description.ServiceEndpoint endpoint, System.ServiceModel.Channels.BindingParameterCollection bindingParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddBindingParameters(class System.ServiceModel.Description.ContractDescription contractDescription, class System.ServiceModel.Description.ServiceEndpoint endpoint, class System.ServiceModel.Channels.BindingParameterCollection bindingParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IContractBehavior.AddBindingParameters(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Channels.BindingParameterCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddBindingParameters(System::ServiceModel::Description::ContractDescription ^ contractDescription, System::ServiceModel::Description::ServiceEndpoint ^ endpoint, System::ServiceModel::Channels::BindingParameterCollection ^ bindingParameters);" />
      <MemberSignature Language="F#" Value="abstract member AddBindingParameters : System.ServiceModel.Description.ContractDescription * System.ServiceModel.Description.ServiceEndpoint * System.ServiceModel.Channels.BindingParameterCollection -&gt; unit" Usage="iContractBehavior.AddBindingParameters (contractDescription, endpoint, bindingParameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contractDescription" Type="System.ServiceModel.Description.ContractDescription" />
        <Parameter Name="endpoint" Type="System.ServiceModel.Description.ServiceEndpoint" />
        <Parameter Name="bindingParameters" Type="System.ServiceModel.Channels.BindingParameterCollection" />
      </Parameters>
      <Docs>
        <param name="contractDescription">Opis kontraktu, aby zmodyfikować.</param>
        <param name="endpoint">Punkt końcowy do zmodyfikowania.</param>
        <param name="bindingParameters">Obiekty, które elementy powiązania wymagane w celu obsługi zachowanie.</param>
        <summary>Konfiguruje dowolne elementy powiązania do obsługi zachowanie kontraktu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementowanie <xref:System.ServiceModel.Description.IContractBehavior.AddBindingParameters%2A> metodę, aby zapewnić dodatkowe obiekty, które potrzebują obsługi zachowanie kontraktu elementy powiązania.  
  
 Ta metoda jest wywoływana, gdy dla każdego punktu końcowego, który używa kontraktu określonej usługi.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyClientBehavior">
      <MemberSignature Language="C#" Value="public void ApplyClientBehavior (System.ServiceModel.Description.ContractDescription contractDescription, System.ServiceModel.Description.ServiceEndpoint endpoint, System.ServiceModel.Dispatcher.ClientRuntime clientRuntime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyClientBehavior(class System.ServiceModel.Description.ContractDescription contractDescription, class System.ServiceModel.Description.ServiceEndpoint endpoint, class System.ServiceModel.Dispatcher.ClientRuntime clientRuntime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IContractBehavior.ApplyClientBehavior(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.ClientRuntime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ApplyClientBehavior(System::ServiceModel::Description::ContractDescription ^ contractDescription, System::ServiceModel::Description::ServiceEndpoint ^ endpoint, System::ServiceModel::Dispatcher::ClientRuntime ^ clientRuntime);" />
      <MemberSignature Language="F#" Value="abstract member ApplyClientBehavior : System.ServiceModel.Description.ContractDescription * System.ServiceModel.Description.ServiceEndpoint * System.ServiceModel.Dispatcher.ClientRuntime -&gt; unit" Usage="iContractBehavior.ApplyClientBehavior (contractDescription, endpoint, clientRuntime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contractDescription" Type="System.ServiceModel.Description.ContractDescription" />
        <Parameter Name="endpoint" Type="System.ServiceModel.Description.ServiceEndpoint" />
        <Parameter Name="clientRuntime" Type="System.ServiceModel.Dispatcher.ClientRuntime" />
      </Parameters>
      <Docs>
        <param name="contractDescription">Opis umowy, dla których przeznaczony jest rozszerzeniem.</param>
        <param name="endpoint">Punkt końcowy.</param>
        <param name="clientRuntime">Środowiska uruchomieniowego klienta.</param>
        <summary>Implementuje modyfikacji lub rozszerzenia klienta dla kontraktu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementowanie <xref:System.ServiceModel.Description.IContractBehavior.ApplyClientBehavior%2A> metodę, aby wyświetlić, zmodyfikować lub dodać niestandardowe rozszerzenia do środowiska uruchomieniowego klienta, we wszystkich wiadomości lub jednego z konkretną operacją. Aby uzyskać szczegółowe informacje o dostosowywaniu, jakie można zrobić za pomocą obiektu środowiska wykonawczego klienta, zobacz <xref:System.ServiceModel.Dispatcher.ClientRuntime> i <xref:System.ServiceModel.Dispatcher.ClientOperation>.  
  
 <xref:System.ServiceModel.Description.IContractBehavior.ApplyClientBehavior%2A> Metoda może zgłosić <xref:System.NotImplementedException> wyjątek, jeśli zachowanie jest przeznaczona tylko do użytku w aplikacji usługi.  
  
 Ta metoda jest wywoływana, gdy dla każdego punktu końcowego, który używa kontraktu określonej usługi.  
  
 Należy pamiętać, że mogą być dwie operacje o takiej samej nazwie w opisie (po jednym w każdym kierunku), więc jeśli musi wykonać iterację operacji, gdy kontrakt jest kontrakt dupleksowy, należy skorelować kierunek wiadomości między punktem końcowym <xref:System.ServiceModel.Dispatcher.ClientRuntime> i zwracany przez <xref:System.ServiceModel.Dispatcher.ClientRuntime.CallbackDispatchRuntime%2A> właściwości.  
  
 Ponieważ innych zachowań może zostały już dodane lub usunięte niektóre operacje ze środowiska wykonawczego, nie ma żadnej gwarancji, że istnieją taką samą liczbę operacji w opisie są <xref:System.ServiceModel.Dispatcher.ClientOperation> obiekty w <xref:System.ServiceModel.Dispatcher.ClientRuntime.Operations%2A> właściwości.  
  
   
  
## Examples  
 Poniższy przykład kodu zakłada niestandardowego <xref:System.ServiceModel.Dispatcher.IInstanceProvider> wdrożenia o nazwie `ObjectProviderBehavior` zapewniający zachowanie "singleton"; zawsze zwraca to samo wystąpienie usługi i nie Kosza.  
  
 Aby wstawić Dostosowywanie dostawcy wystąpienia, w przykładzie pokazano sposób implementacji atrybut niestandardowy (`SingletonBehaviorAttribute`), który zawiera <xref:System.ServiceModel.Description.IContractBehavior> do wstawienia niestandardowe wystąpienie usługodawcy. Implementuje także <xref:System.ServiceModel.Description.IContractBehaviorAttribute>, który wiąże jego użycia, aby `ISampleService` kontraktu.  
  
 [!code-csharp[IContractBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#2)]
 [!code-vb[IContractBehavior#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyDispatchBehavior">
      <MemberSignature Language="C#" Value="public void ApplyDispatchBehavior (System.ServiceModel.Description.ContractDescription contractDescription, System.ServiceModel.Description.ServiceEndpoint endpoint, System.ServiceModel.Dispatcher.DispatchRuntime dispatchRuntime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyDispatchBehavior(class System.ServiceModel.Description.ContractDescription contractDescription, class System.ServiceModel.Description.ServiceEndpoint endpoint, class System.ServiceModel.Dispatcher.DispatchRuntime dispatchRuntime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IContractBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.DispatchRuntime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ApplyDispatchBehavior(System::ServiceModel::Description::ContractDescription ^ contractDescription, System::ServiceModel::Description::ServiceEndpoint ^ endpoint, System::ServiceModel::Dispatcher::DispatchRuntime ^ dispatchRuntime);" />
      <MemberSignature Language="F#" Value="abstract member ApplyDispatchBehavior : System.ServiceModel.Description.ContractDescription * System.ServiceModel.Description.ServiceEndpoint * System.ServiceModel.Dispatcher.DispatchRuntime -&gt; unit" Usage="iContractBehavior.ApplyDispatchBehavior (contractDescription, endpoint, dispatchRuntime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contractDescription" Type="System.ServiceModel.Description.ContractDescription" />
        <Parameter Name="endpoint" Type="System.ServiceModel.Description.ServiceEndpoint" />
        <Parameter Name="dispatchRuntime" Type="System.ServiceModel.Dispatcher.DispatchRuntime" />
      </Parameters>
      <Docs>
        <param name="contractDescription">Opis kontraktu, który ma zostać zmodyfikowana.</param>
        <param name="endpoint">Punkt końcowy, który udostępnia umowy.</param>
        <param name="dispatchRuntime">Środowisko uruchomieniowe wysyłania, który kontroluje wykonania usługi.</param>
        <summary>Implementuje modyfikacji lub rozszerzenia klienta dla kontraktu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementowanie <xref:System.ServiceModel.Description.IContractBehavior.ApplyDispatchBehavior%2A> można wyświetlić, zmodyfikować lub dodać niestandardowe rozszerzenia do środowiska uruchomieniowego usługi między wszystkie wiadomości w określonej umowy lub dla jednej operacji w tej Umowy. Aby uzyskać szczegółowe informacje o dostosowywaniu, jakie można wykonywać w aplikacji usługi, zobacz <xref:System.ServiceModel.Dispatcher.DispatchRuntime> i <xref:System.ServiceModel.Dispatcher.DispatchOperation>.  
  
 <xref:System.ServiceModel.Description.IContractBehavior.ApplyDispatchBehavior%2A> Metoda może zgłosić <xref:System.NotImplementedException> wyjątek, jeśli zachowanie jest przeznaczona tylko do użytku w aplikacji klienckiej.  
  
 Ta metoda jest wywoływana, gdy dla każdego punktu końcowego, który używa kontraktu określonej usługi.  
  
 Należy pamiętać, że mogą być dwie operacje o takiej samej nazwie w opisie (po jednym w każdym kierunku), więc jeśli musi wykonać iterację operacji, gdy kontrakt jest kontrakt dupleksowy, należy skorelować kierunek wiadomości między punktem końcowym <xref:System.ServiceModel.Dispatcher.DispatchRuntime> i zwracany przez <xref:System.ServiceModel.Dispatcher.DispatchRuntime.CallbackClientRuntime%2A> właściwości.  
  
 Ponadto, ponieważ innych zachowań może zostały już dodane lub usunięte niektóre operacje ze środowiska wykonawczego, nie ma żadnej gwarancji, że istnieją taką samą liczbę operacji w opisie są <xref:System.ServiceModel.Dispatcher.DispatchOperation> obiekty w <xref:System.ServiceModel.Dispatcher.DispatchRuntime.Operations%2A> właściwości.  
  
   
  
## Examples  
 Poniższy przykład kodu zakłada niestandardowego <xref:System.ServiceModel.Dispatcher.IInstanceProvider> wdrożenia o nazwie `ObjectProviderBehavior` zapewniający zachowanie "singleton"; zawsze zwraca to samo wystąpienie usługi i nie Kosza.  
  
 Aby wstawić Dostosowywanie dostawcy wystąpienia, w przykładzie pokazano sposób implementacji atrybut niestandardowy (`SingletonBehaviorAttribute`), który zawiera <xref:System.ServiceModel.Description.IContractBehavior> do wstawienia niestandardowe wystąpienie usługodawcy. Implementuje także <xref:System.ServiceModel.Description.IContractBehaviorAttribute>, który wiąże jego użycia, aby `ISampleService` kontraktu.  
  
 [!code-csharp[IContractBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#2)]
 [!code-vb[IContractBehavior#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public void Validate (System.ServiceModel.Description.ContractDescription contractDescription, System.ServiceModel.Description.ServiceEndpoint endpoint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Validate(class System.ServiceModel.Description.ContractDescription contractDescription, class System.ServiceModel.Description.ServiceEndpoint endpoint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IContractBehavior.Validate(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Validate(System::ServiceModel::Description::ContractDescription ^ contractDescription, System::ServiceModel::Description::ServiceEndpoint ^ endpoint);" />
      <MemberSignature Language="F#" Value="abstract member Validate : System.ServiceModel.Description.ContractDescription * System.ServiceModel.Description.ServiceEndpoint -&gt; unit" Usage="iContractBehavior.Validate (contractDescription, endpoint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contractDescription" Type="System.ServiceModel.Description.ContractDescription" />
        <Parameter Name="endpoint" Type="System.ServiceModel.Description.ServiceEndpoint" />
      </Parameters>
      <Docs>
        <param name="contractDescription">Kontrakt do sprawdzania poprawności.</param>
        <param name="endpoint">Punkt końcowy do sprawdzania poprawności.</param>
        <summary>Implementowanie, aby upewnić się, że kontraktu i punktu końcowego może obsługiwać zachowanie kontraktu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementowanie <xref:System.ServiceModel.Description.IContractBehavior.Validate%2A> metodę, aby potwierdzić, że opis kontraktu jest wystarczające do obsługi zachowanie niestandardowe kontraktu. Implementacje można sprawdzić, opis, a następnie throw lub nie wartości zwracanej.  
  
 Ta metoda jest wywoływana, gdy dla każdego punktu końcowego, który używa kontraktu określonej usługi.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>