<Type Name="IContractBehavior" FullName="System.ServiceModel.Description.IContractBehavior">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ea01f7803f38f9d1582cc92b41d3a67095124d7d" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69104877" /></Metadata><TypeSignature Language="C#" Value="public interface IContractBehavior" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IContractBehavior" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Description.IContractBehavior" />
  <TypeSignature Language="VB.NET" Value="Public Interface IContractBehavior" />
  <TypeSignature Language="C++ CLI" Value="public interface class IContractBehavior" />
  <TypeSignature Language="F#" Value="type IContractBehavior = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.5.0.1</AssemblyVersion>
    <AssemblyVersion>4.5.0.3</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Implementuje metody, których można użyć, aby zwiększyć zachowanie w czasie wykonywania dla kontraktu w usłudze lub aplikacji klienckiej.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zaimplementuj <xref:System.ServiceModel.Description.IContractBehavior> interfejs, aby zmodyfikować, przeanalizować lub rozciągnąć pewne aspekty wykonania kontraktu na poziomie aplikacji. W przeciwieństwie <xref:System.ServiceModel.Description.IServiceBehavior> do obiektów <xref:System.ServiceModel.Description.IContractBehavior> i <xref:System.ServiceModel.Description.IEndpointBehavior> , obiekty nie mogą być dodawane do środowiska uruchomieniowego przy użyciu pliku konfiguracji aplikacji; mogą być dodawane tylko programowo lub przy użyciu atrybutu.  
  
 Aby uzyskać więcej informacji na temat wybierania między zachowaniem usług, punktów końcowych i kontraktów, zobacz [Konfigurowanie i rozszerzanie środowiska uruchomieniowego za pomocą zachowań](~/docs/framework/wcf/extending/configuring-and-extending-the-runtime-with-behaviors.md).  
  
-   Użyj metody <xref:System.ServiceModel.Description.IContractBehavior.AddBindingParameters%2A> , aby dostarczyć elementy powiązania z danymi niestandardowymi w celu obsługi zachowania.  
  
-   <xref:System.ServiceModel.Description.IContractBehavior.ApplyClientBehavior%2A> Użyj metody, aby zmodyfikować, przejrzeć lub wstawić rozszerzenia do kontraktu w aplikacji klienckiej.  
  
-   <xref:System.ServiceModel.Description.IContractBehavior.ApplyDispatchBehavior%2A> Użyj metody, aby zmodyfikować, przejrzeć lub wstawić rozszerzenia do kontraktu w aplikacji usługi.  
  
-   <xref:System.ServiceModel.Description.IContractBehavior.Validate%2A> Użyj metody, aby upewnić się, że kontrakt może obsługiwać konkretną funkcję.  
  
 <xref:System.ServiceModel.Description.IContractBehavior>obiekty mogą korzystać z dowolnej z tych metod, ale często tylko jeden jest ważny; w takich przypadkach nieużywane metody mogą zwracać bez żadnej wartości.  
  
> [!NOTE]
>  Wszystkie metody są <xref:System.ServiceModel.Description.IContractBehavior> przekazywane <xref:System.ServiceModel.Description.ContractDescription?displayProperty=nameWithType> i <xref:System.ServiceModel.Description.ServiceEndpoint?displayProperty=nameWithType> jako parametry. Parametry te służą do badania; Jeśli zmodyfikujesz obiekty, zachowanie wykonywania nie jest zdefiniowane.  
  
 <xref:System.ServiceModel.Description.IContractBehavior>typy mogą być używane zarówno dla usługi, jak i dla klienta. Aby wykonać zadanie <xref:System.ServiceModel.Description.IContractBehavior> dostosowania w usłudze, należy dodać obiekt <xref:System.ServiceModel.Description.ContractDescription.Behaviors%2A> do właściwości przed konstrukcją środowiska uruchomieniowego usługi <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType> , która występuje, gdy metoda jest wywoływana dla <xref:System.ServiceModel.ServiceHost?displayProperty=nameWithType> obiektu. Istnieją dwa sposoby, aby to zrobić.  
  
 Pierwsza metoda polega na programistycznym dodawaniu zachowania niestandardowej kontraktu do <xref:System.ServiceModel.Description.ContractDescription.Behaviors%2A> właściwości przed punktem, <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType> gdy <xref:System.ServiceModel.ServiceHost?displayProperty=nameWithType> Metoda jest wywoływana w obiekcie. Po zastosowaniu tej metody zachowanie jest stosowane dla wszystkich komunikatów przepływających przez ten kontrakt na dowolnym punkcie końcowym.  
  
> [!NOTE]
>  Zachowanie jest stosowane do wszystkich kontraktów tego samego typu. Na przykład w przypadku programistycznego dodawania tego samego typu kontraktu do więcej niż jednego punktu końcowego zachowanie modyfikuje wszystkie punkty końcowe odwołujące się do tego samego obiektu kontraktu.  
  
 Druga metoda polega na utworzeniu niestandardowego atrybutu, który implementuje <xref:System.ServiceModel.Description.IContractBehavior> i ma zastosowanie do:  
  
-   Interfejs kontraktu. W takim przypadku zachowanie jest stosowane do wszystkich kontraktów tego typu w dowolnym punkcie końcowym.  
  
-   Klasa usługi.  W takim przypadku zachowanie jest stosowane do wszystkich punktów końcowych, niezależnie od kontraktu.  
  
-   Klasa wywołania zwrotnego.  W takim przypadku zachowanie jest stosowane do punktu końcowego klienta dupleksowego.  
  
 Zachowanie drugiego podejścia różni się nieco w zależności od tego, czy atrybut niestandardowy również <xref:System.ServiceModel.Description.IContractBehaviorAttribute?displayProperty=nameWithType>implementuje. W takim przypadku zachowanie jest następujące:  
  
-   Interfejs kontraktu. W takim przypadku zachowanie jest stosowane do wszystkich kontraktów tego typu w dowolnym punkcie końcowym, a Windows Communication Foundation (WCF) ignoruje wartość <xref:System.ServiceModel.Description.IContractBehaviorAttribute.TargetContract%2A?displayProperty=nameWithType> właściwości.  
  
-   Klasa usługi.  W takim przypadku zachowanie jest stosowane tylko do punktów końcowych, których kontrakt jest wartością <xref:System.ServiceModel.Description.IContractBehaviorAttribute.TargetContract%2A?displayProperty=nameWithType> właściwości.  
  
-   Klasa wywołania zwrotnego.  W takim przypadku zachowanie jest stosowane do punktu końcowego klienta dupleksowego i WCF ignoruje wartość <xref:System.ServiceModel.Description.IContractBehaviorAttribute.TargetContract%2A?displayProperty=nameWithType> właściwości.  
  
 Aby wykonać zadanie dostosowywania na kliencie, dla którego jest zamierzone, <xref:System.ServiceModel.Description.IContractBehavior> należy dodać obiekt <xref:System.ServiceModel.Description.ContractDescription.Behaviors%2A> do właściwości przed konstrukcją środowiska uruchomieniowego klienta, która występuje po <xref:System.ServiceModel.ChannelFactory%601.CreateChannel%2A?displayProperty=nameWithType> wywołaniu. Istnieją dwa sposoby wykonania tej czynności:  
  
-   Programowo Dodaj zachowanie niestandardowej kontraktu do <xref:System.ServiceModel.Description.ContractDescription.Behaviors%2A> właściwości przed punktem, <xref:System.ServiceModel.ChannelFactory%601.CreateChannel%2A?displayProperty=nameWithType> gdy jest wywoływana.  
  
-   Utwórz atrybut niestandardowy, który również implementuje <xref:System.ServiceModel.Description.IContractBehavior>.  
  
 Aby uzyskać więcej informacji na temat <xref:System.ServiceModel.Description.IContractBehavior> programistycznego dodawania typów do aplikacji klienta lub usługi, zobacz [Konfigurowanie i rozszerzanie środowiska uruchomieniowego za pomocą zachowań](~/docs/framework/wcf/extending/configuring-and-extending-the-runtime-with-behaviors.md).  
  
   
  
## Examples  
 Poniższy przykład kodu zakłada, że została <xref:System.ServiceModel.Dispatcher.IInstanceProvider> wywołana `ObjectProviderBehavior` implementacja niestandardowa, która zapewnia "pojedyncze" zachowanie; zawsze zwraca to samo wystąpienie usługi i nie odtwarza go.  
  
 Aby wstawić dostosowanie dostawcy wystąpień, w przykładzie pokazano, jak zaimplementować niestandardowy atrybut (`SingletonBehaviorAttribute`), który implementuje <xref:System.ServiceModel.Description.IContractBehavior> , aby wstawić niestandardowego dostawcę wystąpienia usługi. Implementuje <xref:System.ServiceModel.Description.IContractBehaviorAttribute>także program, który wiąże jego użycie `ISampleService` z umową.  
  
 [!code-csharp[IContractBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#2)]
 [!code-vb[IContractBehavior#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddBindingParameters">
      <MemberSignature Language="C#" Value="public void AddBindingParameters (System.ServiceModel.Description.ContractDescription contractDescription, System.ServiceModel.Description.ServiceEndpoint endpoint, System.ServiceModel.Channels.BindingParameterCollection bindingParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddBindingParameters(class System.ServiceModel.Description.ContractDescription contractDescription, class System.ServiceModel.Description.ServiceEndpoint endpoint, class System.ServiceModel.Channels.BindingParameterCollection bindingParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IContractBehavior.AddBindingParameters(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Channels.BindingParameterCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddBindingParameters(System::ServiceModel::Description::ContractDescription ^ contractDescription, System::ServiceModel::Description::ServiceEndpoint ^ endpoint, System::ServiceModel::Channels::BindingParameterCollection ^ bindingParameters);" />
      <MemberSignature Language="F#" Value="abstract member AddBindingParameters : System.ServiceModel.Description.ContractDescription * System.ServiceModel.Description.ServiceEndpoint * System.ServiceModel.Channels.BindingParameterCollection -&gt; unit" Usage="iContractBehavior.AddBindingParameters (contractDescription, endpoint, bindingParameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contractDescription" Type="System.ServiceModel.Description.ContractDescription" />
        <Parameter Name="endpoint" Type="System.ServiceModel.Description.ServiceEndpoint" />
        <Parameter Name="bindingParameters" Type="System.ServiceModel.Channels.BindingParameterCollection" />
      </Parameters>
      <Docs>
        <param name="contractDescription">Opis kontraktu do zmodyfikowania.</param>
        <param name="endpoint">Punkt końcowy do zmodyfikowania.</param>
        <param name="bindingParameters">Obiekty, których elementy powiązania wymagają do obsługi zachowania.</param>
        <summary>Konfiguruje wszystkie elementy powiązania do obsługi zachowania kontraktu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zaimplementuj <xref:System.ServiceModel.Description.IContractBehavior.AddBindingParameters%2A> metodę, aby zapewnić powiązanie elementów z dodatkowymi obiektami wymaganymi do obsługi zachowania kontraktu.  
  
 Ta metoda jest wywoływana jednokrotnie dla każdego punktu końcowego, który używa określonego kontraktu usługi.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyClientBehavior">
      <MemberSignature Language="C#" Value="public void ApplyClientBehavior (System.ServiceModel.Description.ContractDescription contractDescription, System.ServiceModel.Description.ServiceEndpoint endpoint, System.ServiceModel.Dispatcher.ClientRuntime clientRuntime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyClientBehavior(class System.ServiceModel.Description.ContractDescription contractDescription, class System.ServiceModel.Description.ServiceEndpoint endpoint, class System.ServiceModel.Dispatcher.ClientRuntime clientRuntime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IContractBehavior.ApplyClientBehavior(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.ClientRuntime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ApplyClientBehavior(System::ServiceModel::Description::ContractDescription ^ contractDescription, System::ServiceModel::Description::ServiceEndpoint ^ endpoint, System::ServiceModel::Dispatcher::ClientRuntime ^ clientRuntime);" />
      <MemberSignature Language="F#" Value="abstract member ApplyClientBehavior : System.ServiceModel.Description.ContractDescription * System.ServiceModel.Description.ServiceEndpoint * System.ServiceModel.Dispatcher.ClientRuntime -&gt; unit" Usage="iContractBehavior.ApplyClientBehavior (contractDescription, endpoint, clientRuntime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contractDescription" Type="System.ServiceModel.Description.ContractDescription" />
        <Parameter Name="endpoint" Type="System.ServiceModel.Description.ServiceEndpoint" />
        <Parameter Name="clientRuntime" Type="System.ServiceModel.Dispatcher.ClientRuntime" />
      </Parameters>
      <Docs>
        <param name="contractDescription">Opis kontraktu, dla którego ma zostać zamierzone rozszerzenie.</param>
        <param name="endpoint">Punkt końcowy.</param>
        <param name="clientRuntime">Środowisko uruchomieniowe klienta programu.</param>
        <summary>Implementuje modyfikację lub rozszerzenie klienta w ramach kontraktu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zaimplementuj <xref:System.ServiceModel.Description.IContractBehavior.ApplyClientBehavior%2A> metodę, aby wyświetlać, modyfikować lub dodawać niestandardowe rozszerzenia do środowiska uruchomieniowego klienta w ramach wszystkich komunikatów lub dla jednej konkretnej operacji. Aby uzyskać szczegółowe informacje na temat dostosowań, które można wykonać z obiektem wykonawczym <xref:System.ServiceModel.Dispatcher.ClientRuntime> klienta <xref:System.ServiceModel.Dispatcher.ClientOperation>, zobacz i.  
  
 <xref:System.ServiceModel.Description.IContractBehavior.ApplyClientBehavior%2A> Metoda może<xref:System.NotImplementedException> zgłosić wyjątek, jeśli zachowanie jest przeznaczone wyłącznie do użytku w aplikacji usługi.  
  
 Ta metoda jest wywoływana jednokrotnie dla każdego punktu końcowego, który używa określonego kontraktu usługi.  
  
 Należy zauważyć, że w opisie mogą istnieć dwie operacje o tej samej nazwie (jeden w każdym kierunku), więc jeśli trzeba wykonać iterację operacji, gdy kontrakt jest umową dupleksową, należy skorelować kierunek komunikatów między punktem końcowym <xref:System.ServiceModel.Dispatcher.ClientRuntime> a zwrócone przez <xref:System.ServiceModel.Dispatcher.ClientRuntime.CallbackDispatchRuntime%2A> właściwość.  
  
 Ponieważ inne zachowania mogły już dodać lub usunąć niektóre operacje z środowiska uruchomieniowego, nie ma gwarancji, że istnieje taka sama liczba operacji w opisie, ponieważ <xref:System.ServiceModel.Dispatcher.ClientOperation> istnieją obiekty <xref:System.ServiceModel.Dispatcher.ClientRuntime.Operations%2A> we właściwości.  
  
   
  
## Examples  
 Poniższy przykład kodu zakłada, że została <xref:System.ServiceModel.Dispatcher.IInstanceProvider> wywołana `ObjectProviderBehavior` implementacja niestandardowa, która zapewnia "pojedyncze" zachowanie; zawsze zwraca to samo wystąpienie usługi i nie odtwarza go.  
  
 Aby wstawić dostosowanie dostawcy wystąpień, w przykładzie pokazano, jak zaimplementować niestandardowy atrybut (`SingletonBehaviorAttribute`), który implementuje <xref:System.ServiceModel.Description.IContractBehavior> , aby wstawić niestandardowego dostawcę wystąpienia usługi. Implementuje <xref:System.ServiceModel.Description.IContractBehaviorAttribute>także program, który wiąże jego użycie `ISampleService` z umową.  
  
 [!code-csharp[IContractBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#2)]
 [!code-vb[IContractBehavior#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyDispatchBehavior">
      <MemberSignature Language="C#" Value="public void ApplyDispatchBehavior (System.ServiceModel.Description.ContractDescription contractDescription, System.ServiceModel.Description.ServiceEndpoint endpoint, System.ServiceModel.Dispatcher.DispatchRuntime dispatchRuntime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyDispatchBehavior(class System.ServiceModel.Description.ContractDescription contractDescription, class System.ServiceModel.Description.ServiceEndpoint endpoint, class System.ServiceModel.Dispatcher.DispatchRuntime dispatchRuntime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IContractBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.DispatchRuntime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ApplyDispatchBehavior(System::ServiceModel::Description::ContractDescription ^ contractDescription, System::ServiceModel::Description::ServiceEndpoint ^ endpoint, System::ServiceModel::Dispatcher::DispatchRuntime ^ dispatchRuntime);" />
      <MemberSignature Language="F#" Value="abstract member ApplyDispatchBehavior : System.ServiceModel.Description.ContractDescription * System.ServiceModel.Description.ServiceEndpoint * System.ServiceModel.Dispatcher.DispatchRuntime -&gt; unit" Usage="iContractBehavior.ApplyDispatchBehavior (contractDescription, endpoint, dispatchRuntime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contractDescription" Type="System.ServiceModel.Description.ContractDescription" />
        <Parameter Name="endpoint" Type="System.ServiceModel.Description.ServiceEndpoint" />
        <Parameter Name="dispatchRuntime" Type="System.ServiceModel.Dispatcher.DispatchRuntime" />
      </Parameters>
      <Docs>
        <param name="contractDescription">Opis kontraktu, który ma zostać zmodyfikowany.</param>
        <param name="endpoint">Punkt końcowy, który uwidacznia kontrakt.</param>
        <param name="dispatchRuntime">Środowisko uruchomieniowe wysyłania, które kontroluje wykonywanie usługi.</param>
        <summary>Implementuje modyfikację lub rozszerzenie klienta w ramach kontraktu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zaimplementuj <xref:System.ServiceModel.Description.IContractBehavior.ApplyDispatchBehavior%2A> do wyświetlania, modyfikowania lub dodawania rozszerzeń niestandardowych do środowiska uruchomieniowego usługi dla wszystkich wiadomości w określonej umowie lub dla jednej konkretnej operacji w tym kontrakcie. Aby uzyskać szczegółowe informacje na temat dostosowań, które można wykonać w aplikacji <xref:System.ServiceModel.Dispatcher.DispatchRuntime> usługi <xref:System.ServiceModel.Dispatcher.DispatchOperation>, zobacz i.  
  
 <xref:System.ServiceModel.Description.IContractBehavior.ApplyDispatchBehavior%2A> Metoda może<xref:System.NotImplementedException> zgłosić wyjątek, jeśli zachowanie jest przeznaczone wyłącznie do użytku w aplikacji klienckiej.  
  
 Ta metoda jest wywoływana jednokrotnie dla każdego punktu końcowego, który używa określonego kontraktu usługi.  
  
 Należy zauważyć, że w opisie mogą istnieć dwie operacje o tej samej nazwie (jeden w każdym kierunku), więc jeśli trzeba wykonać iterację operacji, gdy kontrakt jest umową dupleksową, należy skorelować kierunek komunikatów między punktem końcowym <xref:System.ServiceModel.Dispatcher.DispatchRuntime> a zwrócone przez <xref:System.ServiceModel.Dispatcher.DispatchRuntime.CallbackClientRuntime%2A> właściwość.  
  
 Ponadto, ponieważ inne zachowania mogły już dodać lub usunąć niektóre operacje z środowiska uruchomieniowego, nie ma gwarancji, że istnieje taka sama liczba operacji w opisie, ponieważ <xref:System.ServiceModel.Dispatcher.DispatchOperation> istnieją obiekty <xref:System.ServiceModel.Dispatcher.DispatchRuntime.Operations%2A> we właściwości.  
  
   
  
## Examples  
 Poniższy przykład kodu zakłada, że została <xref:System.ServiceModel.Dispatcher.IInstanceProvider> wywołana `ObjectProviderBehavior` implementacja niestandardowa, która zapewnia "pojedyncze" zachowanie; zawsze zwraca to samo wystąpienie usługi i nie odtwarza go.  
  
 Aby wstawić dostosowanie dostawcy wystąpień, w przykładzie pokazano, jak zaimplementować niestandardowy atrybut (`SingletonBehaviorAttribute`), który implementuje <xref:System.ServiceModel.Description.IContractBehavior> , aby wstawić niestandardowego dostawcę wystąpienia usługi. Implementuje <xref:System.ServiceModel.Description.IContractBehaviorAttribute>także program, który wiąże jego użycie `ISampleService` z umową.  
  
 [!code-csharp[IContractBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/icontractbehavior/cs/objectproviderbehavior.cs#2)]
 [!code-vb[IContractBehavior#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/icontractbehavior/vb/objectproviderbehavior.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public void Validate (System.ServiceModel.Description.ContractDescription contractDescription, System.ServiceModel.Description.ServiceEndpoint endpoint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Validate(class System.ServiceModel.Description.ContractDescription contractDescription, class System.ServiceModel.Description.ServiceEndpoint endpoint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IContractBehavior.Validate(System.ServiceModel.Description.ContractDescription,System.ServiceModel.Description.ServiceEndpoint)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Validate(System::ServiceModel::Description::ContractDescription ^ contractDescription, System::ServiceModel::Description::ServiceEndpoint ^ endpoint);" />
      <MemberSignature Language="F#" Value="abstract member Validate : System.ServiceModel.Description.ContractDescription * System.ServiceModel.Description.ServiceEndpoint -&gt; unit" Usage="iContractBehavior.Validate (contractDescription, endpoint)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="contractDescription" Type="System.ServiceModel.Description.ContractDescription" />
        <Parameter Name="endpoint" Type="System.ServiceModel.Description.ServiceEndpoint" />
      </Parameters>
      <Docs>
        <param name="contractDescription">Kontrakt do zweryfikowania.</param>
        <param name="endpoint">Punkt końcowy do zweryfikowania.</param>
        <summary>Zaimplementuj, aby upewnić się, że kontrakt i punkt końcowy mogą obsługiwać zachowanie kontraktu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zaimplementuj <xref:System.ServiceModel.Description.IContractBehavior.Validate%2A> metodę, aby upewnić się, że opis kontraktu jest wystarczający do obsługi niestandardowego zachowania kontraktu. Implementacje mogą sprawdzać opis i generować lub zwracać wartość bez wartości.  
  
 Ta metoda jest wywoływana jednokrotnie dla każdego punktu końcowego, który używa określonego kontraktu usługi.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
