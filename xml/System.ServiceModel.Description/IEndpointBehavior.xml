<Type Name="IEndpointBehavior" FullName="System.ServiceModel.Description.IEndpointBehavior">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ed946c9933074308b7cb870bd65f32f243d797f4" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36417646" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IEndpointBehavior" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IEndpointBehavior" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Description.IEndpointBehavior" />
  <TypeSignature Language="VB.NET" Value="Public Interface IEndpointBehavior" />
  <TypeSignature Language="C++ CLI" Value="public interface class IEndpointBehavior" />
  <TypeSignature Language="F#" Value="type IEndpointBehavior = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Implementuje metody, które mogą służyć do rozszerzenia zachowania w czasie wykonywania dla punktu końcowego w jednej aplikacji usługi lub klienta.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementowanie <xref:System.ServiceModel.Description.IEndpointBehavior> interfejsu zmodyfikować, sprawdź lub rozszerzyć pewien aspekt wykonanie całej punktu końcowego na poziomie aplikacji dla aplikacji, klienta lub usługi.  
  
-   Użyj <xref:System.ServiceModel.Description.IEndpointBehavior.AddBindingParameters%2A> metodę, aby przekazać niestandardowe dane w czasie wykonywania, aby włączyć powiązań, aby obsługiwać niestandardowe zachowanie.  
  
-   Użyj <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior%2A> metodę, aby zmodyfikować, sprawdź lub Wstaw rozszerzenia do punktu końcowego w aplikacji klienckiej.  
  
-   Użyj <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior%2A> metodę, aby zmodyfikować, sprawdź lub Wstaw rozszerzenia umożliwiają wykonanie całej punktu końcowego w aplikacji usługi.  
  
-   Użyj <xref:System.ServiceModel.Description.IEndpointBehavior.Validate%2A> metodę, aby potwierdzić, że <xref:System.ServiceModel.Description.ServiceEndpoint> spełnia określone wymagania. Może to służyć do zapewnienia, że punkt końcowy ma włączone pewne ustawienia konfiguracji, obsługuje poszczególnych funkcji i inne wymagania.  
  
 <xref:System.ServiceModel.Description.IEndpointBehavior> obiekty można wprowadzać użyć dowolnej z tych metod, ale często jest tylko jeden ważne; w takich przypadkach może zwracać nieużywane metody, zostanie wykonana żadna akcja.  
  
> [!NOTE]
>  Wszystkie <xref:System.ServiceModel.Description.IEndpointBehavior> przekazać metody <xref:System.ServiceModel.Description.ServiceEndpoint> obiektu jako parametr. Ten parametr jest do zbadania. Jeśli zmodyfikujesz <xref:System.ServiceModel.Description.ServiceEndpoint> obiektu sposób wykonywania jest niezdefiniowana.  
  
 <xref:System.ServiceModel.Description.IEndpointBehavior> obiekty są zwykle używane do dostępu różne właściwości <xref:System.ServiceModel.Dispatcher.DispatchRuntime?displayProperty=nameWithType>, <xref:System.ServiceModel.Dispatcher.DispatchOperation?displayProperty=nameWithType>, <xref:System.ServiceModel.Dispatcher.EndpointDispatcher?displayProperty=nameWithType>, i <xref:System.ServiceModel.Dispatcher.ChannelDispatcher?displayProperty=nameWithType> obiektów w aplikacji usługi i <xref:System.ServiceModel.Dispatcher.ClientRuntime?displayProperty=nameWithType> i <xref:System.ServiceModel.Dispatcher.ClientOperation?displayProperty=nameWithType> w aplikacji klienckiej. Ponadto można uzyskać dostęp do właściwości dupleksu klientów i usług przy użyciu <xref:System.ServiceModel.Dispatcher.ClientRuntime.CallbackDispatchRuntime%2A?displayProperty=nameWithType> i <xref:System.ServiceModel.Dispatcher.DispatchRuntime.CallbackClientRuntime%2A?displayProperty=nameWithType> właściwości, odpowiednio.  
  
 Opis różnych właściwości i dostosowania dostępności, zobacz [rozszerzanie elementu ServiceHost i warstwy modelu usług](~/docs/framework/wcf/extending/extending-servicehost-and-the-service-model-layer.md).  
  
 Po dostosowaniu została podjęta na (i interfejs dostosowywania wdrożone w razie potrzeby) i <xref:System.ServiceModel.Description.IEndpointBehavior> została podjęta jest odpowiedni zakres dostosowania, muszą być wstawiane dostosowań do komunikacji z systemem Windows Środowisko uruchomieniowe Foundation (WCF) przez zaimplementowanie <xref:System.ServiceModel.Description.IEndpointBehavior> i Dodawanie zachowania punktu końcowego do środowiska wykonawczego.  
  
 Istnieją dwa sposoby dodawania zachowania do środowiska wykonawczego:  
  
-   Programowane Dodawanie zachowania punktu końcowego niestandardowych <xref:System.ServiceModel.Description.ServiceEndpoint.Behaviors%2A> właściwości przed otwarciem hosta usługi (w aplikacji usługi) lub fabryki kanałów (w aplikacji klienta).  
  
-   Konfigurowanie zachowań przy użyciu pliku konfiguracji aplikacji. Aby uzyskać więcej informacji, zobacz [ &lt;behaviorExtensions&gt;](~/docs/framework/configure-apps/file-schema/wcf/behaviorextensions.md).  
  
 Do wykonania zadania dostosowywania usługi, dla których ma mieć miejsce, <xref:System.ServiceModel.Description.IEndpointBehavior> można dodać obiektu do <xref:System.ServiceModel.Description.ServiceEndpoint.Behaviors%2A?displayProperty=nameWithType> właściwości przed konstrukcji środowiska uruchomieniowego usługi, która występuje podczas <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType> wywoływana jest metoda <xref:System.ServiceModel.ServiceHost?displayProperty=nameWithType>. Do wykonywania zadań dostosowania klienta, <xref:System.ServiceModel.Description.IEndpointBehavior> można dodać obiektu do <xref:System.ServiceModel.Description.ServiceEndpoint.Behaviors%2A?displayProperty=nameWithType> właściwość przed wywołaniem <xref:System.ServiceModel.ChannelFactory%601.CreateChannel%2A?displayProperty=nameWithType> metody lub <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType> metoda <xref:System.ServiceModel.ChannelFactory%601>.  
  
   
  
## Examples  
 Poniższy przykładowy kod przedstawia implementację zachowania punktu końcowego, który dodaje <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector?displayProperty=nameWithType> obiektów w aplikacji usługi. W takim przypadku `EndpointBehaviorMessageInspector` klasa implementuje <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector?displayProperty=nameWithType> do zbadania komunikat przychodzący i wychodzący <xref:System.ServiceModel.Description.IEndpointBehavior> interfejsu można wstawić klasy inspektora do systemu kontroli dla wszystkich punktów końcowych, do których ma zastosowanie zachowania i <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType>umożliwia zachowanie inspektora komunikatów przy użyciu pliku konfiguracji aplikacji.  
  
 Pierwszym krokiem jest wdrożenie inspektora wiadomości.  
  
 [!code-csharp[IEndpointBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/iendpointbehavior/cs/iendpointbehaviormessageinspector.cs#2)]  
  
 W następnym przykładzie kodu pokazano sposób użycia <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior%2A> metody w celu dodania inspektora komunikat <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType> właściwości.  
  
 [!code-csharp[IEndpointBehavior#4](~/samples/snippets/csharp/VS_Snippets_CFX/iendpointbehavior/cs/iendpointbehaviormessageinspector.cs#4)]  
  
 Poniższy przykładowy kod przedstawia implementację <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType> aby umożliwić użycie zachowanie inspektora komunikatów z pliku konfiguracji.  
  
 [!code-csharp[IEndpointBehavior#3](~/samples/snippets/csharp/VS_Snippets_CFX/iendpointbehavior/cs/iendpointbehaviormessageinspector.cs#3)]  
  
 Na koniec następującego pliku konfiguracji zawiera poprzednim przykładzie możliwości korzystania z konfiguracji.  
  
 [!code-xml[IEndpointBehavior#5](~/samples/snippets/csharp/VS_Snippets_CFX/iendpointbehavior/cs/hostapplication.exe.config#5)]   
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddBindingParameters">
      <MemberSignature Language="C#" Value="public void AddBindingParameters (System.ServiceModel.Description.ServiceEndpoint endpoint, System.ServiceModel.Channels.BindingParameterCollection bindingParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddBindingParameters(class System.ServiceModel.Description.ServiceEndpoint endpoint, class System.ServiceModel.Channels.BindingParameterCollection bindingParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IEndpointBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Channels.BindingParameterCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddBindingParameters (endpoint As ServiceEndpoint, bindingParameters As BindingParameterCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddBindingParameters(System::ServiceModel::Description::ServiceEndpoint ^ endpoint, System::ServiceModel::Channels::BindingParameterCollection ^ bindingParameters);" />
      <MemberSignature Language="F#" Value="abstract member AddBindingParameters : System.ServiceModel.Description.ServiceEndpoint * System.ServiceModel.Channels.BindingParameterCollection -&gt; unit" Usage="iEndpointBehavior.AddBindingParameters (endpoint, bindingParameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endpoint" Type="System.ServiceModel.Description.ServiceEndpoint" />
        <Parameter Name="bindingParameters" Type="System.ServiceModel.Channels.BindingParameterCollection" />
      </Parameters>
      <Docs>
        <param name="endpoint">Punkt końcowy do zmodyfikowania.</param>
        <param name="bindingParameters">Obiekty, które wymagają elementy powiązania do obsługi zachowanie.</param>
        <summary>Implementuje do przekazywania danych w czasie wykonywania do wiązania, aby obsługiwać niestandardowe zachowanie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementowanie <xref:System.ServiceModel.Description.IEndpointBehavior.AddBindingParameters%2A> metodę w celu zapewnienia elementy powiązania z dodatkowe obiekty, które wymagają obsługi zachowania punktu końcowego. Po dodaniu Parametry wiążące tutaj powiązania mogą znaleźć tych obiektów, po utworzeniu odbiornika kanału lub fabryki kanałów. Zazwyczaj zaimplementować <xref:System.ServiceModel.Description.IEndpointBehavior.AddBindingParameters%2A> można przekazać informacji na temat punktu końcowego element niestandardowego powiązania, dzięki czemu można tworzyć, Obsługa kanału poprawnie. Zwraca żadnej wartości, jeśli są wymagane nie zmiany.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyClientBehavior">
      <MemberSignature Language="C#" Value="public void ApplyClientBehavior (System.ServiceModel.Description.ServiceEndpoint endpoint, System.ServiceModel.Dispatcher.ClientRuntime clientRuntime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyClientBehavior(class System.ServiceModel.Description.ServiceEndpoint endpoint, class System.ServiceModel.Dispatcher.ClientRuntime clientRuntime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.ClientRuntime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ApplyClientBehavior(System::ServiceModel::Description::ServiceEndpoint ^ endpoint, System::ServiceModel::Dispatcher::ClientRuntime ^ clientRuntime);" />
      <MemberSignature Language="F#" Value="abstract member ApplyClientBehavior : System.ServiceModel.Description.ServiceEndpoint * System.ServiceModel.Dispatcher.ClientRuntime -&gt; unit" Usage="iEndpointBehavior.ApplyClientBehavior (endpoint, clientRuntime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endpoint" Type="System.ServiceModel.Description.ServiceEndpoint" />
        <Parameter Name="clientRuntime" Type="System.ServiceModel.Dispatcher.ClientRuntime" />
      </Parameters>
      <Docs>
        <param name="endpoint">Punkt końcowy, który można dostosować.</param>
        <param name="clientRuntime">Środowisko uruchomieniowe klienta do dostosowania.</param>
        <summary>Implementuje modyfikacji lub rozszerzenia klienta w punkcie końcowym.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementowanie <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior%2A> metodę, aby wyświetlić, modyfikowanie lub Dodawanie niestandardowego rozszerzenia do środowiska uruchomieniowego klienta, we wszystkich wiadomości z punktem końcowym lub dla określonej operacji. Aby uzyskać więcej informacji o dostosowywaniu, jakie można zrobić za pomocą obiektu środowiska wykonawczego klienta, zobacz <xref:System.ServiceModel.Dispatcher.ClientRuntime> i <xref:System.ServiceModel.Dispatcher.ClientOperation>.  
  
 Zalecane jest <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior%2A> throw metody <xref:System.NotImplementedException> Jeśli zachowanie jest przeznaczona tylko do użytku w aplikacji usługi.  
  
 Ponieważ innych zachowań może już dodane lub usunięte niektóre operacje z środowiska uruchomieniowego nie ma żadnej gwarancji, że istnieją taką samą liczbę operacji w opisie są <xref:System.ServiceModel.Dispatcher.DispatchOperation> obiekty w <xref:System.ServiceModel.Dispatcher.DispatchRuntime.Operations%2A> właściwości.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyDispatchBehavior">
      <MemberSignature Language="C#" Value="public void ApplyDispatchBehavior (System.ServiceModel.Description.ServiceEndpoint endpoint, System.ServiceModel.Dispatcher.EndpointDispatcher endpointDispatcher);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyDispatchBehavior(class System.ServiceModel.Description.ServiceEndpoint endpoint, class System.ServiceModel.Dispatcher.EndpointDispatcher endpointDispatcher) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.EndpointDispatcher)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ApplyDispatchBehavior(System::ServiceModel::Description::ServiceEndpoint ^ endpoint, System::ServiceModel::Dispatcher::EndpointDispatcher ^ endpointDispatcher);" />
      <MemberSignature Language="F#" Value="abstract member ApplyDispatchBehavior : System.ServiceModel.Description.ServiceEndpoint * System.ServiceModel.Dispatcher.EndpointDispatcher -&gt; unit" Usage="iEndpointBehavior.ApplyDispatchBehavior (endpoint, endpointDispatcher)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endpoint" Type="System.ServiceModel.Description.ServiceEndpoint" />
        <Parameter Name="endpointDispatcher" Type="System.ServiceModel.Dispatcher.EndpointDispatcher" />
      </Parameters>
      <Docs>
        <param name="endpoint">Punkt końcowy, który udostępnia kontraktu.</param>
        <param name="endpointDispatcher">Dyspozytor punktu końcowego modyfikację lub rozszerzony.</param>
        <summary>Implementuje modyfikacji lub rozszerzenia usługi przez punkt końcowy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementowanie <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior%2A> metodę, aby wyświetlać, modyfikować i rozszerzanie środowiska uruchomieniowego usługi między wszystkie komunikaty lub dla określonych operacji w punkcie końcowym. Aby uzyskać więcej informacji o dostosowywaniu, jakie można zrobić w aplikacji usługi, zobacz <xref:System.ServiceModel.Dispatcher.DispatchRuntime?displayProperty=nameWithType> i <xref:System.ServiceModel.Dispatcher.DispatchOperation?displayProperty=nameWithType>.  
  
 Zalecane jest <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior%2A> throw metody <xref:System.NotImplementedException> wyjątek, jeśli zachowanie jest przeznaczona tylko do użytku w aplikacji klienckiej.  
  
 Należy pamiętać, że może być dwóch operacji o tej samej nazwie w opisie przy użyciu kontrakt wywołania zwrotnego (jedną operację w każdym kierunku). Operacje są iteracji, musi mieć związek kierunek wiadomości między punktem końcowym <xref:System.ServiceModel.Dispatcher.DispatchRuntime?displayProperty=nameWithType> i zwracane przez <xref:System.ServiceModel.Dispatcher.DispatchRuntime.CallbackClientRuntime%2A?displayProperty=nameWithType> właściwości.  
  
 Ponadto, ponieważ inne zachowania może już dodane lub usunięte niektóre operacje z środowiska uruchomieniowego, nie ma żadnej gwarancji, czy taką samą liczbę operacji w opisie są <xref:System.ServiceModel.Dispatcher.DispatchOperation?displayProperty=nameWithType> obiekty w <xref:System.ServiceModel.Dispatcher.DispatchRuntime.Operations%2A?displayProperty=nameWithType> właściwości.  
  
   
  
## Examples  
 Poniższy przykładowy kod przedstawia implementację zachowania punktu końcowego, który dodaje <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector?displayProperty=nameWithType> obiektów w aplikacji usługi. W takim przypadku `EndpointBehaviorMessageInspector` klasa implementuje <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector?displayProperty=nameWithType> do zbadania komunikat przychodzący i wychodzący <xref:System.ServiceModel.Description.IEndpointBehavior> interfejsu można wstawić klasy inspektora do systemu kontroli dla wszystkich punktów końcowych, do których ma zastosowanie zachowania i <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType>umożliwia zachowanie inspektora komunikatów przy użyciu pliku konfiguracji aplikacji.  
  
 Pierwszym krokiem jest wdrożenie inspektora wiadomości.  
  
 [!code-csharp[IEndpointBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/iendpointbehavior/cs/iendpointbehaviormessageinspector.cs#2)]  
  
 W następnym przykładzie kodu pokazano sposób użycia <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior%2A> metody w celu dodania inspektora komunikat <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType> właściwości.  
  
 [!code-csharp[IEndpointBehavior#4](~/samples/snippets/csharp/VS_Snippets_CFX/iendpointbehavior/cs/iendpointbehaviormessageinspector.cs#4)]  
  
 Poniższy przykładowy kod przedstawia implementację <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType> aby umożliwić użycie zachowanie inspektora komunikatów z pliku konfiguracji.  
  
 [!code-csharp[IEndpointBehavior#3](~/samples/snippets/csharp/VS_Snippets_CFX/iendpointbehavior/cs/iendpointbehaviormessageinspector.cs#3)]  
  
 Na koniec następującego pliku konfiguracji zawiera poprzednim przykładzie możliwości korzystania z konfiguracji.  
  
 [!code-xml[IEndpointBehavior#5](~/samples/snippets/csharp/VS_Snippets_CFX/iendpointbehavior/cs/hostapplication.exe.config#5)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public void Validate (System.ServiceModel.Description.ServiceEndpoint endpoint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Validate(class System.ServiceModel.Description.ServiceEndpoint endpoint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IEndpointBehavior.Validate(System.ServiceModel.Description.ServiceEndpoint)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Validate (endpoint As ServiceEndpoint)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Validate(System::ServiceModel::Description::ServiceEndpoint ^ endpoint);" />
      <MemberSignature Language="F#" Value="abstract member Validate : System.ServiceModel.Description.ServiceEndpoint -&gt; unit" Usage="iEndpointBehavior.Validate endpoint" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endpoint" Type="System.ServiceModel.Description.ServiceEndpoint" />
      </Parameters>
      <Docs>
        <param name="endpoint">Punkt końcowy do sprawdzania poprawności.</param>
        <summary>Wdrożenie, aby upewnić się, czy punkt końcowy spełnia niektóre przeznaczony kryteriów.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementowanie <xref:System.ServiceModel.Description.IEndpointBehavior.Validate%2A> metody do sprawdzenia struktury, aby potwierdzić wszystkie określone kryteria. Nie jest konieczne przeprowadzenie wszelkie dostosowania w <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior%2A> lub <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior%2A> Aby użyć tej metody. Jeśli punkt końcowy pozytywnej weryfikacji, zwracany; w przeciwnym razie Zgłoś wyjątek.  
  
 Na przykład <xref:System.ServiceModel.Description.IEndpointBehavior.Validate%2A> metody umożliwiają upewnij się, że wszystkie punkty końcowe używać zatwierdzonych powiązanie firmowych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>