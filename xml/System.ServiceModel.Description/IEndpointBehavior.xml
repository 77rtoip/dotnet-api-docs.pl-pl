<Type Name="IEndpointBehavior" FullName="System.ServiceModel.Description.IEndpointBehavior">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c8a65dcfec67e27f6c7d4724a93a280d05dfadfd" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69104816" /></Metadata><TypeSignature Language="C#" Value="public interface IEndpointBehavior" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IEndpointBehavior" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Description.IEndpointBehavior" />
  <TypeSignature Language="VB.NET" Value="Public Interface IEndpointBehavior" />
  <TypeSignature Language="C++ CLI" Value="public interface class IEndpointBehavior" />
  <TypeSignature Language="F#" Value="type IEndpointBehavior = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.5.0.1</AssemblyVersion>
    <AssemblyVersion>4.5.0.3</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Implementuje metody, których można użyć, aby zwiększyć zachowanie w czasie wykonywania dla punktu końcowego w aplikacji usługi lub klienta.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementowanie <xref:System.ServiceModel.Description.IEndpointBehavior> interfejsu w celu modyfikowania, badania lub rozbudowywania niektórych aspektów wykonywania całego punktu końcowego na poziomie aplikacji dla aplikacji klienta lub usług.  
  
-   Użyj metody <xref:System.ServiceModel.Description.IEndpointBehavior.AddBindingParameters%2A> , aby przekazać dane niestandardowe w czasie wykonywania, aby włączyć powiązania obsługujące zachowanie niestandardowe.  
  
-   <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior%2A> Użyj metody, aby modyfikować, testować lub wstawiać rozszerzenia do punktu końcowego w aplikacji klienckiej.  
  
-   <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior%2A> Użyj metody, aby modyfikować, testować lub wstawiać rozszerzenia do wykonywania w ramach całego punktu końcowego w aplikacji usługi.  
  
-   Użyj metody, aby upewnić się <xref:System.ServiceModel.Description.ServiceEndpoint> , że spełnia określone wymagania. <xref:System.ServiceModel.Description.IEndpointBehavior.Validate%2A> Można go użyć, aby upewnić się, że punkt końcowy ma włączone określone ustawienie konfiguracji, obsługuje konkretną funkcję i inne wymagania.  
  
 <xref:System.ServiceModel.Description.IEndpointBehavior>obiekty mogą korzystać z dowolnej z tych metod, ale często tylko jeden jest ważny; w takich przypadkach nieużywane metody mogą zwrócić, wykonanie nie działa.  
  
> [!NOTE]
>  Wszystkie metody przekazują <xref:System.ServiceModel.Description.ServiceEndpoint>obiektjakoparametr. <xref:System.ServiceModel.Description.IEndpointBehavior> Ten parametr służy tylko do celów badania; Jeśli zmodyfikujesz <xref:System.ServiceModel.Description.ServiceEndpoint> obiekt, zachowanie wykonywania jest niezdefiniowane.  
  
 <xref:System.ServiceModel.Description.IEndpointBehavior>obiekty są zwykle używane do uzyskiwania <xref:System.ServiceModel.Dispatcher.DispatchRuntime?displayProperty=nameWithType>dostępu do różnych właściwości obiektów <xref:System.ServiceModel.Dispatcher.EndpointDispatcher?displayProperty=nameWithType>, <xref:System.ServiceModel.Dispatcher.DispatchOperation?displayProperty=nameWithType>, <xref:System.ServiceModel.Dispatcher.ClientRuntime?displayProperty=nameWithType> , i <xref:System.ServiceModel.Dispatcher.ChannelDispatcher?displayProperty=nameWithType> w aplikacji usługi oraz <xref:System.ServiceModel.Dispatcher.ClientOperation?displayProperty=nameWithType> w aplikacji klienckiej. Ponadto można uzyskać dostęp do właściwości klienta dupleksowego i usług przy użyciu <xref:System.ServiceModel.Dispatcher.ClientRuntime.CallbackDispatchRuntime%2A?displayProperty=nameWithType> odpowiednio właściwości i. <xref:System.ServiceModel.Dispatcher.DispatchRuntime.CallbackClientRuntime%2A?displayProperty=nameWithType>  
  
 Opis różnych dostępnych właściwości i dostosowań znajduje się w temacie Rozszerzanie elementu [ServiceHost i warstwy modelu usług](~/docs/framework/wcf/extending/extending-servicehost-and-the-service-model-layer.md).  
  
 Po decyzji o dostosowaniu (wraz z zaimplementowanym interfejsem dostosowania w razie potrzeby) <xref:System.ServiceModel.Description.IEndpointBehavior> , który został poddany odpowiednim zakresem dostosowywania, dostosowanie musi zostać wstawione do komunikacji z systemem Windows. Środowisko uruchomieniowe programu Foundation (WCF <xref:System.ServiceModel.Description.IEndpointBehavior> ) przez implementację i dodanie zachowania punktu końcowego do środowiska uruchomieniowego.  
  
 Istnieją dwa sposoby dodawania zachowania do środowiska uruchomieniowego:  
  
-   Programistyczne Dodawanie zachowania niestandardowego punktu końcowego do <xref:System.ServiceModel.Description.ServiceEndpoint.Behaviors%2A> właściwości przed otwarciem hosta usługi (w aplikacji usługi) lub fabryki kanałów (w aplikacji klienckiej).  
  
-   Skonfiguruj zachowanie przy użyciu pliku konfiguracji aplikacji. Aby uzyskać szczegółowe informacje, zobacz [ &lt;BehaviorExtensions&gt;](~/docs/framework/configure-apps/file-schema/wcf/behaviorextensions.md).  
  
 Aby wykonać zadanie dostosowywania usługi, <xref:System.ServiceModel.Description.IEndpointBehavior> dla którego jest zamierzone, należy dodać obiekt <xref:System.ServiceModel.Description.ServiceEndpoint.Behaviors%2A?displayProperty=nameWithType> do właściwości przed konstrukcją środowiska uruchomieniowego usługi, która występuje, gdy <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType> Metoda jest wywoływana w <xref:System.ServiceModel.ServiceHost?displayProperty=nameWithType>. Aby wykonać zadanie dostosowywania <xref:System.ServiceModel.Description.IEndpointBehavior> klienta, należy dodać obiekt <xref:System.ServiceModel.Description.ServiceEndpoint.Behaviors%2A?displayProperty=nameWithType> do właściwości przed <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType> wywołaniem <xref:System.ServiceModel.ChannelFactory%601.CreateChannel%2A?displayProperty=nameWithType> metody lub metody w <xref:System.ServiceModel.ChannelFactory%601>.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje implementację zachowania punktu końcowego, który dodaje <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector?displayProperty=nameWithType> obiekt w aplikacji usługi. W tym przypadku `EndpointBehaviorMessageInspector` Klasa implementuje <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector?displayProperty=nameWithType> , aby sprawdzić komunikat przychodzący <xref:System.ServiceModel.Description.IEndpointBehavior> i wychodzący, interfejs do wstawienia klasy inspektora do systemu inspekcji dla wszystkich punktów końcowych, których dotyczy zachowanie, oraz <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType>aby włączyć zachowanie inspektora komunikatów przy użyciu pliku konfiguracyjnego aplikacji.  
  
 Pierwszym krokiem jest zaimplementowanie inspektora komunikatów.  
  
 [!code-csharp[IEndpointBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/iendpointbehavior/cs/iendpointbehaviormessageinspector.cs#2)]  
  
 Następny przykład kodu pokazuje użycie <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior%2A> metody do dodania inspektora komunikatów <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType> do właściwości.  
  
 [!code-csharp[IEndpointBehavior#4](~/samples/snippets/csharp/VS_Snippets_CFX/iendpointbehavior/cs/iendpointbehaviormessageinspector.cs#4)]  
  
 Poniższy przykład kodu pokazuje implementację <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType> programu, aby umożliwić korzystanie z Inspektora komunikatów z pliku konfiguracji.  
  
 [!code-csharp[IEndpointBehavior#3](~/samples/snippets/csharp/VS_Snippets_CFX/iendpointbehavior/cs/iendpointbehaviormessageinspector.cs#3)]  
  
 Na koniec następujący plik konfiguracji pokazuje, jak powyższy przykład może być używany z poziomu konfiguracji.  
  
 [!code-xml[IEndpointBehavior#5](~/samples/snippets/csharp/VS_Snippets_CFX/iendpointbehavior/cs/hostapplication.exe.config#5)]   
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddBindingParameters">
      <MemberSignature Language="C#" Value="public void AddBindingParameters (System.ServiceModel.Description.ServiceEndpoint endpoint, System.ServiceModel.Channels.BindingParameterCollection bindingParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddBindingParameters(class System.ServiceModel.Description.ServiceEndpoint endpoint, class System.ServiceModel.Channels.BindingParameterCollection bindingParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IEndpointBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Channels.BindingParameterCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddBindingParameters (endpoint As ServiceEndpoint, bindingParameters As BindingParameterCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddBindingParameters(System::ServiceModel::Description::ServiceEndpoint ^ endpoint, System::ServiceModel::Channels::BindingParameterCollection ^ bindingParameters);" />
      <MemberSignature Language="F#" Value="abstract member AddBindingParameters : System.ServiceModel.Description.ServiceEndpoint * System.ServiceModel.Channels.BindingParameterCollection -&gt; unit" Usage="iEndpointBehavior.AddBindingParameters (endpoint, bindingParameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endpoint" Type="System.ServiceModel.Description.ServiceEndpoint" />
        <Parameter Name="bindingParameters" Type="System.ServiceModel.Channels.BindingParameterCollection" />
      </Parameters>
      <Docs>
        <param name="endpoint">Punkt końcowy do zmodyfikowania.</param>
        <param name="bindingParameters">Obiekty, których elementy powiązania wymagają do obsługi zachowania.</param>
        <summary>Zaimplementuj, aby przekazać dane w czasie wykonywania do powiązań w celu obsługi zachowania niestandardowego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zaimplementuj <xref:System.ServiceModel.Description.IEndpointBehavior.AddBindingParameters%2A> metodę, aby zapewnić elementy powiązania z dodatkowymi obiektami wymaganymi do obsługi zachowania punktu końcowego. Po dodaniu parametrów powiązania, powiązanie może lokalizować te obiekty podczas tworzenia odbiornika kanału lub fabryki kanałów. Zazwyczaj należy zaimplementować <xref:System.ServiceModel.Description.IEndpointBehavior.AddBindingParameters%2A> metodę w celu przekazania informacji o punkcie końcowym do niestandardowego elementu powiązania, aby można było poprawnie utworzyć kanał pomocniczy. Nie zwracaj żadnej wartości, jeśli nie są wymagane żadne modyfikacje.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyClientBehavior">
      <MemberSignature Language="C#" Value="public void ApplyClientBehavior (System.ServiceModel.Description.ServiceEndpoint endpoint, System.ServiceModel.Dispatcher.ClientRuntime clientRuntime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyClientBehavior(class System.ServiceModel.Description.ServiceEndpoint endpoint, class System.ServiceModel.Dispatcher.ClientRuntime clientRuntime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.ClientRuntime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ApplyClientBehavior(System::ServiceModel::Description::ServiceEndpoint ^ endpoint, System::ServiceModel::Dispatcher::ClientRuntime ^ clientRuntime);" />
      <MemberSignature Language="F#" Value="abstract member ApplyClientBehavior : System.ServiceModel.Description.ServiceEndpoint * System.ServiceModel.Dispatcher.ClientRuntime -&gt; unit" Usage="iEndpointBehavior.ApplyClientBehavior (endpoint, clientRuntime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endpoint" Type="System.ServiceModel.Description.ServiceEndpoint" />
        <Parameter Name="clientRuntime" Type="System.ServiceModel.Dispatcher.ClientRuntime" />
      </Parameters>
      <Docs>
        <param name="endpoint">Punkt końcowy, który ma zostać dostosowany.</param>
        <param name="clientRuntime">Środowisko uruchomieniowe klienta do dostosowania.</param>
        <summary>Implementuje modyfikację lub rozszerzenie klienta w punkcie końcowym.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zaimplementuj <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior%2A> metodę, aby wyświetlać, modyfikować lub dodawać niestandardowe rozszerzenia do środowiska uruchomieniowego klienta we wszystkich komunikatach używanych z punktem końcowym lub dla określonych operacji. Aby uzyskać szczegółowe informacje na temat dostosowań, które można wykonać z obiektem wykonawczym <xref:System.ServiceModel.Dispatcher.ClientRuntime> klienta <xref:System.ServiceModel.Dispatcher.ClientOperation>, zobacz i.  
  
 Zaleca się, aby <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior%2A> Metoda <xref:System.NotImplementedException> zgłosiła, czy zachowanie jest przeznaczone wyłącznie do użytku w aplikacji usługi.  
  
 Ponieważ inne zachowania mogły już dodać lub usunąć niektóre operacje z środowiska uruchomieniowego, nie ma gwarancji, że istnieje taka sama liczba operacji w opisie, ponieważ <xref:System.ServiceModel.Dispatcher.DispatchOperation> istnieją obiekty <xref:System.ServiceModel.Dispatcher.DispatchRuntime.Operations%2A> we właściwości.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyDispatchBehavior">
      <MemberSignature Language="C#" Value="public void ApplyDispatchBehavior (System.ServiceModel.Description.ServiceEndpoint endpoint, System.ServiceModel.Dispatcher.EndpointDispatcher endpointDispatcher);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyDispatchBehavior(class System.ServiceModel.Description.ServiceEndpoint endpoint, class System.ServiceModel.Dispatcher.EndpointDispatcher endpointDispatcher) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.EndpointDispatcher)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ApplyDispatchBehavior(System::ServiceModel::Description::ServiceEndpoint ^ endpoint, System::ServiceModel::Dispatcher::EndpointDispatcher ^ endpointDispatcher);" />
      <MemberSignature Language="F#" Value="abstract member ApplyDispatchBehavior : System.ServiceModel.Description.ServiceEndpoint * System.ServiceModel.Dispatcher.EndpointDispatcher -&gt; unit" Usage="iEndpointBehavior.ApplyDispatchBehavior (endpoint, endpointDispatcher)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endpoint" Type="System.ServiceModel.Description.ServiceEndpoint" />
        <Parameter Name="endpointDispatcher" Type="System.ServiceModel.Dispatcher.EndpointDispatcher" />
      </Parameters>
      <Docs>
        <param name="endpoint">Punkt końcowy, który uwidacznia kontrakt.</param>
        <param name="endpointDispatcher">Dyspozytor punktu końcowego do modyfikacji lub przedłużony.</param>
        <summary>Implementuje modyfikację lub rozszerzenie usługi w punkcie końcowym.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zaimplementuj <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior%2A> metodę, aby wyświetlić, zmodyfikować lub zwiększyć środowisko uruchomieniowe usługi dla wszystkich komunikatów lub dla określonych operacji w punkcie końcowym. Aby uzyskać szczegółowe informacje na temat dostosowań, które można wykonać w aplikacji <xref:System.ServiceModel.Dispatcher.DispatchRuntime?displayProperty=nameWithType> usługi <xref:System.ServiceModel.Dispatcher.DispatchOperation?displayProperty=nameWithType>, zobacz i.  
  
 Zaleca się, aby <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior%2A> Metoda <xref:System.NotImplementedException> zgłosiła wyjątek, jeśli zachowanie jest przeznaczone wyłącznie do użytku w aplikacji klienckiej.  
  
 Należy pamiętać, że podczas korzystania z kontraktu wywołania zwrotnego w opisie mogą istnieć dwie operacje o tej samej nazwie. W przypadku iteracji przez operacje należy skorelować kierunek komunikatów między punktem końcowym <xref:System.ServiceModel.Dispatcher.DispatchRuntime?displayProperty=nameWithType> i zakresem zwracanym <xref:System.ServiceModel.Dispatcher.DispatchRuntime.CallbackClientRuntime%2A?displayProperty=nameWithType> przez właściwość.  
  
 Ponadto, ponieważ inne zachowania mogły już dodać lub usunąć niektóre operacje z środowiska uruchomieniowego, nie ma gwarancji, że istnieje taka sama liczba operacji w opisie, ponieważ <xref:System.ServiceModel.Dispatcher.DispatchOperation?displayProperty=nameWithType> istnieją obiekty <xref:System.ServiceModel.Dispatcher.DispatchRuntime.Operations%2A?displayProperty=nameWithType> we właściwości.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje implementację zachowania punktu końcowego, który dodaje <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector?displayProperty=nameWithType> obiekt w aplikacji usługi. W tym przypadku `EndpointBehaviorMessageInspector` Klasa implementuje <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector?displayProperty=nameWithType> , aby sprawdzić komunikat przychodzący <xref:System.ServiceModel.Description.IEndpointBehavior> i wychodzący, interfejs do wstawienia klasy inspektora do systemu inspekcji dla wszystkich punktów końcowych, których dotyczy zachowanie, oraz <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType>aby włączyć zachowanie inspektora komunikatów przy użyciu pliku konfiguracyjnego aplikacji.  
  
 Pierwszym krokiem jest zaimplementowanie inspektora komunikatów.  
  
 [!code-csharp[IEndpointBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/iendpointbehavior/cs/iendpointbehaviormessageinspector.cs#2)]  
  
 Następny przykład kodu pokazuje użycie <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior%2A> metody do dodania inspektora komunikatów <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType> do właściwości.  
  
 [!code-csharp[IEndpointBehavior#4](~/samples/snippets/csharp/VS_Snippets_CFX/iendpointbehavior/cs/iendpointbehaviormessageinspector.cs#4)]  
  
 Poniższy przykład kodu pokazuje implementację <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType> programu, aby umożliwić korzystanie z Inspektora komunikatów z pliku konfiguracji.  
  
 [!code-csharp[IEndpointBehavior#3](~/samples/snippets/csharp/VS_Snippets_CFX/iendpointbehavior/cs/iendpointbehaviormessageinspector.cs#3)]  
  
 Na koniec następujący plik konfiguracji pokazuje, jak powyższy przykład może być używany z poziomu konfiguracji.  
  
 [!code-xml[IEndpointBehavior#5](~/samples/snippets/csharp/VS_Snippets_CFX/iendpointbehavior/cs/hostapplication.exe.config#5)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public void Validate (System.ServiceModel.Description.ServiceEndpoint endpoint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Validate(class System.ServiceModel.Description.ServiceEndpoint endpoint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IEndpointBehavior.Validate(System.ServiceModel.Description.ServiceEndpoint)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Validate (endpoint As ServiceEndpoint)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Validate(System::ServiceModel::Description::ServiceEndpoint ^ endpoint);" />
      <MemberSignature Language="F#" Value="abstract member Validate : System.ServiceModel.Description.ServiceEndpoint -&gt; unit" Usage="iEndpointBehavior.Validate endpoint" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endpoint" Type="System.ServiceModel.Description.ServiceEndpoint" />
      </Parameters>
      <Docs>
        <param name="endpoint">Punkt końcowy do zweryfikowania.</param>
        <summary>Zaimplementuj, aby upewnić się, że punkt końcowy spełnia pewne zamierzone kryteria.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zaimplementuj <xref:System.ServiceModel.Description.IEndpointBehavior.Validate%2A> metodę, aby sprawdzić strukturę w celu potwierdzenia dowolnego zestawu kryteriów. Nie jest konieczne wykonywanie jakichkolwiek dostosowań w programie <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior%2A> ani <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior%2A> do korzystania z tej metody. Jeśli punkt końcowy przejdzie walidację, Wróć; w przeciwnym razie Zgłoś wyjątek.  
  
 Na przykład <xref:System.ServiceModel.Description.IEndpointBehavior.Validate%2A> można użyć metody, aby upewnić się, że wszystkie punkty końcowe używają zatwierdzonego powiązania firmowego.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
