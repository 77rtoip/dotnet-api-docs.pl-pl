<Type Name="IEndpointBehavior" FullName="System.ServiceModel.Description.IEndpointBehavior">
  <Metadata><Meta Name="ms.openlocfilehash" Value="56717b15a48dcbf3c245a67f6ee66d0ccf41e8bb" /><Meta Name="ms.sourcegitcommit" Value="7461f9e28c2f184bd1596e6f07c25a3f34984516" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="03/28/2019" /><Meta Name="ms.locfileid" Value="58548162" /></Metadata><TypeSignature Language="C#" Value="public interface IEndpointBehavior" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IEndpointBehavior" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Description.IEndpointBehavior" />
  <TypeSignature Language="VB.NET" Value="Public Interface IEndpointBehavior" />
  <TypeSignature Language="C++ CLI" Value="public interface class IEndpointBehavior" />
  <TypeSignature Language="F#" Value="type IEndpointBehavior = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.5.0.1</AssemblyVersion>
    <AssemblyVersion>4.5.0.3</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Implementuje metody, które mogą służyć do rozszerzenia zachowania w czasie wykonywania dla punktu końcowego w jednej usłudze lub aplikacji klienckiej.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementowanie <xref:System.ServiceModel.Description.IEndpointBehavior> interfejsu modyfikacji, sprawdź lub rozszerzenia niektóre aspekty wykonania całego punktu końcowego na poziomie aplikacji dla aplikacji klienckich lub usługi.  
  
-   Użyj <xref:System.ServiceModel.Description.IEndpointBehavior.AddBindingParameters%2A> metodę, aby przekazać niestandardowe dane w czasie wykonywania, aby włączyć powiązania do obsługi niestandardowe zachowanie.  
  
-   Użyj <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior%2A> metodę, aby zmodyfikować, sprawdź lub Wstaw rozszerzenia do punktu końcowego w aplikacji klienckiej.  
  
-   Użyj <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior%2A> metodę, aby zmodyfikować, sprawdź lub Wstaw rozszerzenia do wykonania całego punktu końcowego w aplikacji usługi.  
  
-   Użyj <xref:System.ServiceModel.Description.IEndpointBehavior.Validate%2A> metodę, aby potwierdzić, że <xref:System.ServiceModel.Description.ServiceEndpoint> spełnia określone wymagania. Może to służyć do zapewnienia, że punkt końcowy ma włączone pewne ustawienia konfiguracji, obsługuje określonej funkcji, jak i inne wymagania.  
  
 <xref:System.ServiceModel.Description.IEndpointBehavior> obiekty można wprowadzać użyć dowolnego z tych metod, ale często jest tylko jeden ważny; w takich przypadkach może zwrócić nieużywane metody, wykonanie żadnej akcji.  
  
> [!NOTE]
>  Wszystkie <xref:System.ServiceModel.Description.IEndpointBehavior> metody zakończyły się pomyślnie <xref:System.ServiceModel.Description.ServiceEndpoint> obiektu jako parametr. Ten parametr jest do zbadania. Jeśli zmodyfikujesz <xref:System.ServiceModel.Description.ServiceEndpoint> obiektu zachowanie wykonywania jest niezdefiniowana.  
  
 <xref:System.ServiceModel.Description.IEndpointBehavior> obiekty są zazwyczaj używane do dostępu do różnych właściwości obiektu <xref:System.ServiceModel.Dispatcher.DispatchRuntime?displayProperty=nameWithType>, <xref:System.ServiceModel.Dispatcher.DispatchOperation?displayProperty=nameWithType>, <xref:System.ServiceModel.Dispatcher.EndpointDispatcher?displayProperty=nameWithType>, i <xref:System.ServiceModel.Dispatcher.ChannelDispatcher?displayProperty=nameWithType> obiektów w aplikacji usługi i <xref:System.ServiceModel.Dispatcher.ClientRuntime?displayProperty=nameWithType> i <xref:System.ServiceModel.Dispatcher.ClientOperation?displayProperty=nameWithType> w aplikacji klienckiej. Ponadto można uzyskać dostęp do właściwości dwukierunkowego klientów i usług przy użyciu <xref:System.ServiceModel.Dispatcher.ClientRuntime.CallbackDispatchRuntime%2A?displayProperty=nameWithType> i <xref:System.ServiceModel.Dispatcher.DispatchRuntime.CallbackClientRuntime%2A?displayProperty=nameWithType> właściwości, odpowiednio.  
  
 Aby uzyskać opis różnych właściwości i dostosowania dostępne, zobacz [rozszerzanie elementu ServiceHost i warstwy modelu usług](~/docs/framework/wcf/extending/extending-servicehost-and-the-service-model-layer.md).  
  
 Po dostosowaniu została podjęta na (i interfejs dostosowywania implementowany w razie potrzeby) i <xref:System.ServiceModel.Description.IEndpointBehavior> została podjęta odpowiedniego zakresu dostosowywania, dostosowanie musi zostać wstawiony do komunikacji Windows Środowisko uruchomieniowe Foundation (WCF), implementując <xref:System.ServiceModel.Description.IEndpointBehavior> i dodać zachowanie punktu końcowego do środowiska uruchomieniowego.  
  
 Istnieją dwa sposoby na dodanie zachowania do środowiska uruchomieniowego:  
  
-   Programowe Dodawanie zachowanie niestandardowy punkt końcowy, aby <xref:System.ServiceModel.Description.ServiceEndpoint.Behaviors%2A> właściwości przed otwarcie fabryki kanałów (w aplikacji klienckiej) lub hosta usługi (w aplikacji usługi).  
  
-   Skonfiguruj zachowanie przy użyciu pliku konfiguracji aplikacji. Aby uzyskać więcej informacji, zobacz [ &lt;behaviorExtensions&gt;](~/docs/framework/configure-apps/file-schema/wcf/behaviorextensions.md).  
  
 Do wykonania zadania dostosowywania usługi, do którego jest przeznaczony <xref:System.ServiceModel.Description.IEndpointBehavior> można dodać obiektu do <xref:System.ServiceModel.Description.ServiceEndpoint.Behaviors%2A?displayProperty=nameWithType> właściwości przed konstrukcji środowiska uruchomieniowego usługi, co ma miejsce, gdy <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType> metoda jest wywoływana w <xref:System.ServiceModel.ServiceHost?displayProperty=nameWithType>. Do wykonania zadania dostosowywania klienta, <xref:System.ServiceModel.Description.IEndpointBehavior> można dodać obiektu do <xref:System.ServiceModel.Description.ServiceEndpoint.Behaviors%2A?displayProperty=nameWithType> właściwości przed wywołaniem <xref:System.ServiceModel.ChannelFactory%601.CreateChannel%2A?displayProperty=nameWithType> metody lub <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType> metody <xref:System.ServiceModel.ChannelFactory%601>.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje implementację zachowanie punktu końcowego, który dodaje <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector?displayProperty=nameWithType> obiektu w aplikacji usługi. W tym przypadku `EndpointBehaviorMessageInspector` klasy implementuje <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector?displayProperty=nameWithType> do wglądu wiadomości przychodzących i wychodzących <xref:System.ServiceModel.Description.IEndpointBehavior> interfejsu, aby wstawić klasy inspektora do systemu kontroli dla wszystkich punktów końcowych, do których zostanie zastosowana zachowanie i <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType>umożliwia zachowanie Inspektor komunikatów przy użyciu pliku konfiguracji aplikacji.  
  
 Pierwszym krokiem jest do zaimplementowania Inspektor wiadomości.  
  
 [!code-csharp[IEndpointBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/iendpointbehavior/cs/iendpointbehaviormessageinspector.cs#2)]  
  
 W kolejnym przykładzie kodu pokazano użycie <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior%2A> metody w celu dodania inspektora komunikat <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType> właściwości.  
  
 [!code-csharp[IEndpointBehavior#4](~/samples/snippets/csharp/VS_Snippets_CFX/iendpointbehavior/cs/iendpointbehaviormessageinspector.cs#4)]  
  
 Poniższy przykład kodu pokazuje implementację <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType> w celu umożliwienia użycia zachowanie Inspektor komunikatów z pliku konfiguracji.  
  
 [!code-csharp[IEndpointBehavior#3](~/samples/snippets/csharp/VS_Snippets_CFX/iendpointbehavior/cs/iendpointbehaviormessageinspector.cs#3)]  
  
 Na koniec następujący plik konfiguracji pokazuje, jak poprzedni przykład można używać z konfiguracji.  
  
 [!code-xml[IEndpointBehavior#5](~/samples/snippets/csharp/VS_Snippets_CFX/iendpointbehavior/cs/hostapplication.exe.config#5)]   
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddBindingParameters">
      <MemberSignature Language="C#" Value="public void AddBindingParameters (System.ServiceModel.Description.ServiceEndpoint endpoint, System.ServiceModel.Channels.BindingParameterCollection bindingParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddBindingParameters(class System.ServiceModel.Description.ServiceEndpoint endpoint, class System.ServiceModel.Channels.BindingParameterCollection bindingParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IEndpointBehavior.AddBindingParameters(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Channels.BindingParameterCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddBindingParameters (endpoint As ServiceEndpoint, bindingParameters As BindingParameterCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddBindingParameters(System::ServiceModel::Description::ServiceEndpoint ^ endpoint, System::ServiceModel::Channels::BindingParameterCollection ^ bindingParameters);" />
      <MemberSignature Language="F#" Value="abstract member AddBindingParameters : System.ServiceModel.Description.ServiceEndpoint * System.ServiceModel.Channels.BindingParameterCollection -&gt; unit" Usage="iEndpointBehavior.AddBindingParameters (endpoint, bindingParameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endpoint" Type="System.ServiceModel.Description.ServiceEndpoint" />
        <Parameter Name="bindingParameters" Type="System.ServiceModel.Channels.BindingParameterCollection" />
      </Parameters>
      <Docs>
        <param name="endpoint">Punkt końcowy do zmodyfikowania.</param>
        <param name="bindingParameters">Obiekty, które elementy powiązania wymagane w celu obsługi zachowanie.</param>
        <summary>Wdrożenia, aby przekazać dane w czasie wykonywania do powiązania z obsługuje niestandardowe zachowanie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementowanie <xref:System.ServiceModel.Description.IEndpointBehavior.AddBindingParameters%2A> metodę, aby zapewnić elementy powiązania dodatkowe obiekty, które potrzebują obsługi zachowanie punktu końcowego. Po dodaniu Parametry wiążące tutaj powiązania mogą zlokalizować te obiekty, po utworzeniu odbiornika kanału lub fabryki kanałów. Zazwyczaj należy zaimplementować <xref:System.ServiceModel.Description.IEndpointBehavior.AddBindingParameters%2A> metody do przekazywania informacji na temat punktu końcowego element niestandardowego powiązania, dzięki czemu można tworzyć, obsługujący kanału poprawnie. Zwraca żadnej wartości, jeśli wymagane są żadnych modyfikacji.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyClientBehavior">
      <MemberSignature Language="C#" Value="public void ApplyClientBehavior (System.ServiceModel.Description.ServiceEndpoint endpoint, System.ServiceModel.Dispatcher.ClientRuntime clientRuntime);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyClientBehavior(class System.ServiceModel.Description.ServiceEndpoint endpoint, class System.ServiceModel.Dispatcher.ClientRuntime clientRuntime) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.ClientRuntime)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ApplyClientBehavior(System::ServiceModel::Description::ServiceEndpoint ^ endpoint, System::ServiceModel::Dispatcher::ClientRuntime ^ clientRuntime);" />
      <MemberSignature Language="F#" Value="abstract member ApplyClientBehavior : System.ServiceModel.Description.ServiceEndpoint * System.ServiceModel.Dispatcher.ClientRuntime -&gt; unit" Usage="iEndpointBehavior.ApplyClientBehavior (endpoint, clientRuntime)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endpoint" Type="System.ServiceModel.Description.ServiceEndpoint" />
        <Parameter Name="clientRuntime" Type="System.ServiceModel.Dispatcher.ClientRuntime" />
      </Parameters>
      <Docs>
        <param name="endpoint">Punkt końcowy, który ma zostać dostosowana.</param>
        <param name="clientRuntime">Środowiska uruchomieniowego klienta do dostosowania.</param>
        <summary>Implementuje modyfikacji lub rozszerzenia klienta w punkcie końcowym.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementowanie <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior%2A> metodę, aby wyświetlić, modyfikowanie lub Dodawanie niestandardowego rozszerzenia do środowiska uruchomieniowego klienta między wszystkie komunikaty z punktem końcowym usługi lub dla określonych operacji. Aby uzyskać szczegółowe informacje o dostosowywaniu, jakie można zrobić za pomocą obiektu środowiska wykonawczego klienta, zobacz <xref:System.ServiceModel.Dispatcher.ClientRuntime> i <xref:System.ServiceModel.Dispatcher.ClientOperation>.  
  
 Zalecane jest, <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior%2A> throw metoda <xref:System.NotImplementedException> Jeśli zachowanie jest przeznaczona tylko do użytku w aplikacji usługi.  
  
 Ponieważ innych zachowań może zostały już dodane lub usunięte niektóre operacje ze środowiska wykonawczego nie ma żadnej gwarancji, że istnieją taką samą liczbę operacji w opisie są <xref:System.ServiceModel.Dispatcher.DispatchOperation> obiekty w <xref:System.ServiceModel.Dispatcher.DispatchRuntime.Operations%2A> właściwości.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyDispatchBehavior">
      <MemberSignature Language="C#" Value="public void ApplyDispatchBehavior (System.ServiceModel.Description.ServiceEndpoint endpoint, System.ServiceModel.Dispatcher.EndpointDispatcher endpointDispatcher);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyDispatchBehavior(class System.ServiceModel.Description.ServiceEndpoint endpoint, class System.ServiceModel.Dispatcher.EndpointDispatcher endpointDispatcher) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.ServiceEndpoint,System.ServiceModel.Dispatcher.EndpointDispatcher)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ApplyDispatchBehavior(System::ServiceModel::Description::ServiceEndpoint ^ endpoint, System::ServiceModel::Dispatcher::EndpointDispatcher ^ endpointDispatcher);" />
      <MemberSignature Language="F#" Value="abstract member ApplyDispatchBehavior : System.ServiceModel.Description.ServiceEndpoint * System.ServiceModel.Dispatcher.EndpointDispatcher -&gt; unit" Usage="iEndpointBehavior.ApplyDispatchBehavior (endpoint, endpointDispatcher)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endpoint" Type="System.ServiceModel.Description.ServiceEndpoint" />
        <Parameter Name="endpointDispatcher" Type="System.ServiceModel.Dispatcher.EndpointDispatcher" />
      </Parameters>
      <Docs>
        <param name="endpoint">Punkt końcowy, który udostępnia umowy.</param>
        <param name="endpointDispatcher">Dyspozytor punktu końcowego modyfikację lub rozszerzone.</param>
        <summary>Implementuje modyfikacji lub rozszerzenia usługi w punkcie końcowym.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementowanie <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior%2A> metodę, aby wyświetlić, zmodyfikować lub rozszerzanie środowiska uruchomieniowego usługi we wszystkich wiadomości lub dla określonych operacji w punkcie końcowym. Aby uzyskać szczegółowe informacje o jakie dostosowania, możesz zrobić w aplikacji usługi, zobacz <xref:System.ServiceModel.Dispatcher.DispatchRuntime?displayProperty=nameWithType> i <xref:System.ServiceModel.Dispatcher.DispatchOperation?displayProperty=nameWithType>.  
  
 Zalecane jest, <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior%2A> throw metoda <xref:System.NotImplementedException> wyjątek, jeśli zachowanie jest przeznaczona tylko do użytku w aplikacji klienckiej.  
  
 Należy pamiętać, że może być dwóch operacji o tej samej nazwie w opisie przy użyciu kontrakt wywołania zwrotnego (jednej operacji w każdym kierunku). Jeśli operacje są iteracji, należy skorelować kierunek wiadomości między punktem końcowym <xref:System.ServiceModel.Dispatcher.DispatchRuntime?displayProperty=nameWithType> i zwracany przez <xref:System.ServiceModel.Dispatcher.DispatchRuntime.CallbackClientRuntime%2A?displayProperty=nameWithType> właściwości.  
  
 Ponadto, ponieważ innych zachowań może zostały już dodane lub usunięte niektóre operacje ze środowiska wykonawczego, nie ma żadnej gwarancji, że istnieją taką samą liczbę operacji w opisie są <xref:System.ServiceModel.Dispatcher.DispatchOperation?displayProperty=nameWithType> obiekty w <xref:System.ServiceModel.Dispatcher.DispatchRuntime.Operations%2A?displayProperty=nameWithType> właściwości.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje implementację zachowanie punktu końcowego, który dodaje <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector?displayProperty=nameWithType> obiektu w aplikacji usługi. W tym przypadku `EndpointBehaviorMessageInspector` klasy implementuje <xref:System.ServiceModel.Dispatcher.IDispatchMessageInspector?displayProperty=nameWithType> do wglądu wiadomości przychodzących i wychodzących <xref:System.ServiceModel.Description.IEndpointBehavior> interfejsu, aby wstawić klasy inspektora do systemu kontroli dla wszystkich punktów końcowych, do których zostanie zastosowana zachowanie i <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType>umożliwia zachowanie Inspektor komunikatów przy użyciu pliku konfiguracji aplikacji.  
  
 Pierwszym krokiem jest do zaimplementowania Inspektor wiadomości.  
  
 [!code-csharp[IEndpointBehavior#2](~/samples/snippets/csharp/VS_Snippets_CFX/iendpointbehavior/cs/iendpointbehaviormessageinspector.cs#2)]  
  
 W kolejnym przykładzie kodu pokazano użycie <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior%2A> metody w celu dodania inspektora komunikat <xref:System.ServiceModel.Dispatcher.DispatchRuntime.MessageInspectors%2A?displayProperty=nameWithType> właściwości.  
  
 [!code-csharp[IEndpointBehavior#4](~/samples/snippets/csharp/VS_Snippets_CFX/iendpointbehavior/cs/iendpointbehaviormessageinspector.cs#4)]  
  
 Poniższy przykład kodu pokazuje implementację <xref:System.ServiceModel.Configuration.BehaviorExtensionElement?displayProperty=nameWithType> w celu umożliwienia użycia zachowanie Inspektor komunikatów z pliku konfiguracji.  
  
 [!code-csharp[IEndpointBehavior#3](~/samples/snippets/csharp/VS_Snippets_CFX/iendpointbehavior/cs/iendpointbehaviormessageinspector.cs#3)]  
  
 Na koniec następujący plik konfiguracji pokazuje, jak poprzedni przykład można używać z konfiguracji.  
  
 [!code-xml[IEndpointBehavior#5](~/samples/snippets/csharp/VS_Snippets_CFX/iendpointbehavior/cs/hostapplication.exe.config#5)]   
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public void Validate (System.ServiceModel.Description.ServiceEndpoint endpoint);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Validate(class System.ServiceModel.Description.ServiceEndpoint endpoint) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IEndpointBehavior.Validate(System.ServiceModel.Description.ServiceEndpoint)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Validate (endpoint As ServiceEndpoint)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Validate(System::ServiceModel::Description::ServiceEndpoint ^ endpoint);" />
      <MemberSignature Language="F#" Value="abstract member Validate : System.ServiceModel.Description.ServiceEndpoint -&gt; unit" Usage="iEndpointBehavior.Validate endpoint" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="endpoint" Type="System.ServiceModel.Description.ServiceEndpoint" />
      </Parameters>
      <Docs>
        <param name="endpoint">Punkt końcowy do sprawdzania poprawności.</param>
        <summary>Implementowanie, aby upewnić się, że punkt końcowy spełnia wymagania dotyczące niektórych przeznaczona do kryteriów.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementowanie <xref:System.ServiceModel.Description.IEndpointBehavior.Validate%2A> metodę, aby sprawdzić strukturę, aby upewnić się, każdy zestaw kryteriów. Nie jest konieczne przeprowadzenie wszelkie dostosowania w <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyClientBehavior%2A> lub <xref:System.ServiceModel.Description.IEndpointBehavior.ApplyDispatchBehavior%2A> Aby użyć tej metody. Jeśli punkt końcowy pozytywnie zweryfikowane, zwracana; w przeciwnym razie Zgłoś wyjątek.  
  
 Na przykład <xref:System.ServiceModel.Description.IEndpointBehavior.Validate%2A> metoda umożliwia upewnij się, że wszystkie punkty końcowe używają powiązanie firmowych zatwierdzone.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>