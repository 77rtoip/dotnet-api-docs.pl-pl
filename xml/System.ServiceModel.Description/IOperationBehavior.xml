<Type Name="IOperationBehavior" FullName="System.ServiceModel.Description.IOperationBehavior">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c732ce96a8a54292f54ffa327ffe74131f357db0" /><Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="11/20/2018" /><Meta Name="ms.locfileid" Value="52235025" /></Metadata><TypeSignature Language="C#" Value="public interface IOperationBehavior" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IOperationBehavior" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Description.IOperationBehavior" />
  <TypeSignature Language="VB.NET" Value="Public Interface IOperationBehavior" />
  <TypeSignature Language="C++ CLI" Value="public interface class IOperationBehavior" />
  <TypeSignature Language="F#" Value="type IOperationBehavior = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Implementuje metody, które mogą służyć do rozszerzenia zachowania w czasie wykonywania operacji w jednej usłudze lub aplikacji klienckiej.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementowanie <xref:System.ServiceModel.Description.IOperationBehavior> interfejsu, aby zmodyfikować, sprawdź lub rozszerzać niektórych aspektów wykonywania całej operacji na poziomie aplikacji dla aplikacji klienckich lub usługi.  
  
-   Użyj <xref:System.ServiceModel.Description.IOperationBehavior.AddBindingParameters%2A> metodę, aby przekazać niestandardowe dane w czasie wykonywania, aby włączyć powiązania do obsługi niestandardowe zachowanie.  
  
-   Użyj <xref:System.ServiceModel.Description.IOperationBehavior.ApplyClientBehavior%2A> metodę, aby zmodyfikować, sprawdź lub Wstaw rozszerzenia do dyspozytora klienta w aplikacji klienckiej.  
  
-   Użyj <xref:System.ServiceModel.Description.IOperationBehavior.ApplyDispatchBehavior%2A> metodę, aby zmodyfikować, sprawdź lub wstawić rozszerzenia do wykonywania operacji na poziomie aplikacji usługi.  
  
-   Użyj <xref:System.ServiceModel.Description.IOperationBehavior.Validate%2A> metodę, aby potwierdzić, że <xref:System.ServiceModel.Description.OperationDescription> spełnia określone wymagania. Może to służyć do zapewnienia, że operacja ma włączone pewne ustawienia konfiguracji, obsługuje określonej funkcji, jak i inne wymagania.  
  
 <xref:System.ServiceModel.Description.IOperationBehavior> obiekty można wprowadzać użyć dowolnego z tych metod, ale często jest tylko jeden ważny; w takich przypadkach może zwrócić nieużywane metody, wykonanie żadnej akcji.  
  
> [!NOTE]
>  Wszystkie <xref:System.ServiceModel.Description.IOperationBehavior> metody zakończyły się pomyślnie <xref:System.ServiceModel.Description.OperationDescription> obiektu jako parametr. Ten parametr jest do zbadania. Jeśli zmodyfikujesz <xref:System.ServiceModel.Description.OperationDescription> obiektu zachowanie wykonywania jest niezdefiniowana.  
  
 <xref:System.ServiceModel.Description.IOperationBehavior> obiekty są zazwyczaj używane do dostępu do różnych właściwości obiektu <xref:System.ServiceModel.Dispatcher.DispatchOperation?displayProperty=nameWithType> obiektu w aplikacji usługi i <xref:System.ServiceModel.Dispatcher.ClientOperation?displayProperty=nameWithType> obiektu w aplikacji klienckiej.  
  
 Zazwyczaj przeglądy pierwszy developer punkty rozszerzeń, aby określić, która opcja dostosowywania pasujące do scenariusza aplikacji, a następnie implementuje dostosowania w zakresie odpowiednie. Na przykład <xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType> obiektów można wstawić dostosowania dla wszystkich komunikatów w całej usługi i <xref:System.ServiceModel.Description.IContractBehavior?displayProperty=nameWithType> obiektów można wstawić dostosowania dla wszystkich komunikatów w określonym kontraktu i tak dalej. Aby uzyskać opis różnych właściwości i dostosowania dostępne, zobacz [rozszerzanie elementu ServiceHost i warstwy modelu usług](~/docs/framework/wcf/extending/extending-servicehost-and-the-service-model-layer.md).  
  
 Po dostosowaniu została podjęta na (i interfejs dostosowywania implementowany w razie potrzeby) i <xref:System.ServiceModel.Description.IOperationBehavior> jest odpowiednim rozwiązaniem dostosowania, dostosowanie muszą być wstawiane do środowiska wykonawczego Windows Communication Foundation (WCF) implementując <xref:System.ServiceModel.Description.IOperationBehavior> i dodanie zachowania operacji do środowiska uruchomieniowego.  
  
 Istnieją dwa sposoby dodawania <xref:System.ServiceModel.Description.IOperationBehavior> do środowiska uruchomieniowego:  
  
-   Programowo dodać zachowanie niestandardowe działania w celu <xref:System.ServiceModel.Description.OperationDescription.Behaviors%2A?displayProperty=nameWithType> właściwości przed otwarcie fabryki kanałów (w aplikacji klienckiej) lub hosta usługi (w aplikacji usługi).  
  
-   Dodaj zachowanie za pomocą atrybutu niestandardowego.  
  
 Do wykonania zadania dostosowywania usługi, do którego jest przeznaczony <xref:System.ServiceModel.Description.IOperationBehavior> można dodać obiektu do <xref:System.ServiceModel.Description.OperationDescription.Behaviors%2A?displayProperty=nameWithType> właściwości przed konstrukcji środowiska uruchomieniowego usługi, co ma miejsce, gdy <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType> metoda jest wywoływana w <xref:System.ServiceModel.ServiceHost?displayProperty=nameWithType>. Do wykonania zadania dostosowywania klienta, <xref:System.ServiceModel.Description.IOperationBehavior> można dodać obiektu do <xref:System.ServiceModel.Description.OperationDescription.Behaviors%2A?displayProperty=nameWithType> właściwości przed wywołaniem <xref:System.ServiceModel.ChannelFactory%601.CreateChannel%2A?displayProperty=nameWithType> metody lub <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType> metody <xref:System.ServiceModel.ChannelFactory%601>.  
  
 Mimo że zachowanie operacji jest przeznaczona dla łatwy dostęp do środowiska uruchomieniowego w zakresie poszczególnych operacji, możesz uzyskać dostęp środowiska uruchomieniowego w większym zakresie, uzyskując dostęp do środowiska uruchomieniowego obiektu nadrzędnego.  
  
   
  
## Examples  
 Poniższy przykład kodu przedstawia implementację <xref:System.ServiceModel.Dispatcher.IParameterInspector?displayProperty=nameWithType> , zapisuje do konsoli, gdy inspektor jest wywoływany w przypadku operacji. To dostosowanie może zostać dołączona tyko do <xref:System.ServiceModel.Dispatcher.DispatchOperation?displayProperty=nameWithType> lub <xref:System.ServiceModel.Dispatcher.ClientOperation?displayProperty=nameWithType> i w związku z tym zazwyczaj dodaje się przez zachowanie operacji.  
  
 [!code-csharp[Interceptors#4](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#4)]
 [!code-vb[Interceptors#4](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#4)]  
  
 Poniższy przykład kodu pokazuje, jak zachowanie operacja dołącza Inspektor parametr do środowiska uruchomieniowego.  
  
 [!code-csharp[Interceptors#6](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#6)]
 [!code-vb[Interceptors#6](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#6)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddBindingParameters">
      <MemberSignature Language="C#" Value="public void AddBindingParameters (System.ServiceModel.Description.OperationDescription operationDescription, System.ServiceModel.Channels.BindingParameterCollection bindingParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddBindingParameters(class System.ServiceModel.Description.OperationDescription operationDescription, class System.ServiceModel.Channels.BindingParameterCollection bindingParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IOperationBehavior.AddBindingParameters(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Channels.BindingParameterCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddBindingParameters(System::ServiceModel::Description::OperationDescription ^ operationDescription, System::ServiceModel::Channels::BindingParameterCollection ^ bindingParameters);" />
      <MemberSignature Language="F#" Value="abstract member AddBindingParameters : System.ServiceModel.Description.OperationDescription * System.ServiceModel.Channels.BindingParameterCollection -&gt; unit" Usage="iOperationBehavior.AddBindingParameters (operationDescription, bindingParameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationDescription" Type="System.ServiceModel.Description.OperationDescription" />
        <Parameter Name="bindingParameters" Type="System.ServiceModel.Channels.BindingParameterCollection" />
      </Parameters>
      <Docs>
        <param name="operationDescription">Limit czasu operacji sprawdzane. Na użytek tylko badania. W przypadku modyfikowania opis operacji wyniki są niezdefiniowane.</param>
        <param name="bindingParameters">Kolekcja obiektów, które elementy powiązania wymagają obsługi zachowanie.</param>
        <summary>Wdrożenia, aby przekazać dane w czasie wykonywania do powiązania z obsługuje niestandardowe zachowanie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementowanie <xref:System.ServiceModel.Description.IOperationBehavior.AddBindingParameters%2A> metodę, aby zapewnić dodatkowe obiekty, które potrzebują obsługi zachowanie operacji elementy powiązania. Po dodaniu tutaj Parametry wiążące, powiązania można zlokalizować i przetworzyć te obiekty, gdy tworzony jest odbiornik kanału lub fabryki kanałów. Zazwyczaj należy zaimplementować <xref:System.ServiceModel.Description.IOperationBehavior.AddBindingParameters%2A> metodę, aby przekazać informacje na temat operacji do elementu niestandardowego powiązania, dzięki czemu można tworzyć, obsługujący kanału poprawnie. Zwraca żadnej wartości, jeśli wymagane są żadnych modyfikacji.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyClientBehavior">
      <MemberSignature Language="C#" Value="public void ApplyClientBehavior (System.ServiceModel.Description.OperationDescription operationDescription, System.ServiceModel.Dispatcher.ClientOperation clientOperation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyClientBehavior(class System.ServiceModel.Description.OperationDescription operationDescription, class System.ServiceModel.Dispatcher.ClientOperation clientOperation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IOperationBehavior.ApplyClientBehavior(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Dispatcher.ClientOperation)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ApplyClientBehavior(System::ServiceModel::Description::OperationDescription ^ operationDescription, System::ServiceModel::Dispatcher::ClientOperation ^ clientOperation);" />
      <MemberSignature Language="F#" Value="abstract member ApplyClientBehavior : System.ServiceModel.Description.OperationDescription * System.ServiceModel.Dispatcher.ClientOperation -&gt; unit" Usage="iOperationBehavior.ApplyClientBehavior (operationDescription, clientOperation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationDescription" Type="System.ServiceModel.Description.OperationDescription" />
        <Parameter Name="clientOperation" Type="System.ServiceModel.Dispatcher.ClientOperation" />
      </Parameters>
      <Docs>
        <param name="operationDescription">Limit czasu operacji sprawdzane. Na użytek tylko badania. W przypadku modyfikowania opis operacji wyniki są niezdefiniowane.</param>
        <param name="clientOperation">Obiekt środowiska wykonawczego, który opisuje właściwości dostosowywania operacji opisanych przez <paramref name="operationDescription" />.</param>
        <summary>Implementuje modyfikacji lub rozszerzenia klienta w różnych operacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementowanie <xref:System.ServiceModel.Description.IOperationBehavior.ApplyClientBehavior%2A> metodę, aby wyświetlić, zmodyfikować lub dodać niestandardowe rozszerzenia środowiska uruchomieniowego klienta we wszystkich komunikatów używane z konkretną operacją. Aby uzyskać szczegółowe informacje o dostosowywaniu, jakie można zrobić za pomocą obiektu środowiska wykonawczego klienta, zobacz <xref:System.ServiceModel.Dispatcher.ClientRuntime> i <xref:System.ServiceModel.Dispatcher.ClientOperation>.  
  
 Zalecane jest, <xref:System.ServiceModel.Description.IOperationBehavior.ApplyClientBehavior%2A> throw metoda <xref:System.NotImplementedException> Jeśli zachowanie jest przeznaczona tylko do użytku w aplikacji usługi.  
  
   
  
## Examples  
 Poniższy przykład kodu przedstawia implementację <xref:System.ServiceModel.Dispatcher.IParameterInspector?displayProperty=nameWithType> , zapisuje do konsoli, gdy inspektor jest wywoływany w przypadku operacji. To dostosowanie może zostać dołączona tyko do <xref:System.ServiceModel.Dispatcher.DispatchOperation?displayProperty=nameWithType> lub <xref:System.ServiceModel.Dispatcher.ClientOperation?displayProperty=nameWithType> i w związku z tym zazwyczaj dodaje się przez zachowanie operacji.  
  
 [!code-csharp[Interceptors#4](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#4)]
 [!code-vb[Interceptors#4](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#4)]  
  
 Poniższy przykład kodu pokazuje, jak zachowanie operacja dołącza Inspektor parametr do środowiska uruchomieniowego.  
  
 [!code-csharp[Interceptors#6](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#6)]
 [!code-vb[Interceptors#6](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyDispatchBehavior">
      <MemberSignature Language="C#" Value="public void ApplyDispatchBehavior (System.ServiceModel.Description.OperationDescription operationDescription, System.ServiceModel.Dispatcher.DispatchOperation dispatchOperation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyDispatchBehavior(class System.ServiceModel.Description.OperationDescription operationDescription, class System.ServiceModel.Dispatcher.DispatchOperation dispatchOperation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IOperationBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Dispatcher.DispatchOperation)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ApplyDispatchBehavior(System::ServiceModel::Description::OperationDescription ^ operationDescription, System::ServiceModel::Dispatcher::DispatchOperation ^ dispatchOperation);" />
      <MemberSignature Language="F#" Value="abstract member ApplyDispatchBehavior : System.ServiceModel.Description.OperationDescription * System.ServiceModel.Dispatcher.DispatchOperation -&gt; unit" Usage="iOperationBehavior.ApplyDispatchBehavior (operationDescription, dispatchOperation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationDescription" Type="System.ServiceModel.Description.OperationDescription" />
        <Parameter Name="dispatchOperation" Type="System.ServiceModel.Dispatcher.DispatchOperation" />
      </Parameters>
      <Docs>
        <param name="operationDescription">Limit czasu operacji sprawdzane. Na użytek tylko badania. W przypadku modyfikowania opis operacji wyniki są niezdefiniowane.</param>
        <param name="dispatchOperation">Obiekt środowiska wykonawczego, który opisuje właściwości dostosowywania operacji opisanych przez <paramref name="operationDescription" />.</param>
        <summary>Implementuje modyfikacji lub rozszerzenia usługi różnych operacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementowanie <xref:System.ServiceModel.Description.IOperationBehavior.ApplyDispatchBehavior%2A> metodę, aby wyświetlić, zmodyfikować lub rozszerzanie środowiska uruchomieniowego usługi we wszystkich wiadomości lub dla określonej operacji. Aby uzyskać szczegółowe informacje o jakie dostosowania, możesz zrobić w aplikacji usługi, zobacz <xref:System.ServiceModel.Dispatcher.DispatchRuntime?displayProperty=nameWithType> i <xref:System.ServiceModel.Dispatcher.DispatchOperation?displayProperty=nameWithType>.  
  
 Zalecane jest, <xref:System.ServiceModel.Description.IOperationBehavior.ApplyDispatchBehavior%2A> throw metoda <xref:System.NotImplementedException> wyjątek, jeśli zachowanie jest przeznaczona tylko do użytku w aplikacji klienckiej.  
  
   
  
## Examples  
 Poniższy przykład kodu przedstawia implementację <xref:System.ServiceModel.Dispatcher.IParameterInspector?displayProperty=nameWithType> , zapisuje do konsoli, gdy inspektor jest wywoływany w przypadku operacji. To dostosowanie może zostać dołączona tyko do <xref:System.ServiceModel.Dispatcher.DispatchOperation?displayProperty=nameWithType> lub <xref:System.ServiceModel.Dispatcher.ClientOperation?displayProperty=nameWithType> i w związku z tym zazwyczaj dodaje się przez zachowanie operacji.  
  
 [!code-csharp[Interceptors#4](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#4)]
 [!code-vb[Interceptors#4](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#4)]  
  
 Poniższy przykład kodu pokazuje, jak zachowanie operacja dołącza Inspektor parametr do środowiska uruchomieniowego.  
  
 [!code-csharp[Interceptors#6](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#6)]
 [!code-vb[Interceptors#6](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public void Validate (System.ServiceModel.Description.OperationDescription operationDescription);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Validate(class System.ServiceModel.Description.OperationDescription operationDescription) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IOperationBehavior.Validate(System.ServiceModel.Description.OperationDescription)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Validate(System::ServiceModel::Description::OperationDescription ^ operationDescription);" />
      <MemberSignature Language="F#" Value="abstract member Validate : System.ServiceModel.Description.OperationDescription -&gt; unit" Usage="iOperationBehavior.Validate operationDescription" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationDescription" Type="System.ServiceModel.Description.OperationDescription" />
      </Parameters>
      <Docs>
        <param name="operationDescription">Limit czasu operacji sprawdzane. Na użytek tylko badania. W przypadku modyfikowania opis operacji wyniki są niezdefiniowane.</param>
        <summary>Implementowanie, aby upewnić się, czy operacja spełnia niektóre przeznaczona do kryteriów.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementowanie <xref:System.ServiceModel.Description.IOperationBehavior.Validate%2A> metodę, aby sprawdzić strukturę, aby upewnić się, każdy zestaw kryteriów. Nie jest konieczne przeprowadzenie wszelkie dostosowania w <xref:System.ServiceModel.Description.IOperationBehavior.ApplyClientBehavior%2A> lub <xref:System.ServiceModel.Description.IOperationBehavior.ApplyDispatchBehavior%2A> Aby użyć tej metody. Jeśli operacja zakończy się pomyślnie weryfikacji, zwracana; w przeciwnym razie Zgłoś wyjątek.  
  
 Na przykład <xref:System.ServiceModel.Description.IOperationBehavior.Validate%2A> metody, można użyć do zapewnienia, że operacja jest autoryzowana.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>