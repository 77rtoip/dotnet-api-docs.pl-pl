<Type Name="IOperationBehavior" FullName="System.ServiceModel.Description.IOperationBehavior">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="fe4bf52d76d6d7f16802046d1eb95dcfa6a38315" />
    <Meta Name="ms.sourcegitcommit" Value="3907f9a5780957d9c85af2e54c0a5bc2a5bf19ab" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/14/2018" />
    <Meta Name="ms.locfileid" Value="34317025" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IOperationBehavior" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IOperationBehavior" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Description.IOperationBehavior" />
  <TypeSignature Language="VB.NET" Value="Public Interface IOperationBehavior" />
  <TypeSignature Language="C++ CLI" Value="public interface class IOperationBehavior" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Implementuje metody, które mogą służyć do rozszerzenia zachowania w czasie wykonywania operacji w jednej aplikacji usługi lub klienta.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementowanie <xref:System.ServiceModel.Description.IOperationBehavior> interfejsu zmodyfikować, sprawdź lub rozszerzyć pewien aspekt wykonanie całej operacji na poziomie aplikacji dla aplikacji, klienta lub usługi.  
  
-   Użyj <xref:System.ServiceModel.Description.IOperationBehavior.AddBindingParameters%2A> metodę, aby przekazać niestandardowe dane w czasie wykonywania, aby włączyć powiązań, aby obsługiwać niestandardowe zachowanie.  
  
-   Użyj <xref:System.ServiceModel.Description.IOperationBehavior.ApplyClientBehavior%2A> metodę, aby zmodyfikować, sprawdź lub Wstaw rozszerzenia do dyspozytora klienta w aplikacji klienckiej.  
  
-   Użyj <xref:System.ServiceModel.Description.IOperationBehavior.ApplyDispatchBehavior%2A> metodę, aby zmodyfikować, sprawdź lub wstawić rozszerzenia do wykonywania operacji na poziomie aplikacji usługi.  
  
-   Użyj <xref:System.ServiceModel.Description.IOperationBehavior.Validate%2A> metodę, aby potwierdzić, że <xref:System.ServiceModel.Description.OperationDescription> spełnia określone wymagania. Może to służyć do zapewnienia, że operacja ma włączone pewne ustawienia konfiguracji, obsługuje poszczególnych funkcji i inne wymagania.  
  
 <xref:System.ServiceModel.Description.IOperationBehavior> obiekty można wprowadzać użyć dowolnej z tych metod, ale często jest tylko jeden ważne; w takich przypadkach może zwracać nieużywane metody, zostanie wykonana żadna akcja.  
  
> [!NOTE]
>  Wszystkie <xref:System.ServiceModel.Description.IOperationBehavior> przekazać metody <xref:System.ServiceModel.Description.OperationDescription> obiektu jako parametr. Ten parametr jest do zbadania. Jeśli zmodyfikujesz <xref:System.ServiceModel.Description.OperationDescription> obiektu sposób wykonywania jest niezdefiniowana.  
  
 <xref:System.ServiceModel.Description.IOperationBehavior> obiekty są zwykle używane do dostępu różne właściwości <xref:System.ServiceModel.Dispatcher.DispatchOperation?displayProperty=nameWithType> obiektów w aplikacji usługi i <xref:System.ServiceModel.Dispatcher.ClientOperation?displayProperty=nameWithType> obiektu w aplikacji klienta.  
  
 Zazwyczaj przeglądami pierwszy developer punkty rozszerzeń, aby określić, która opcja dostosowania pasujące do scenariusza aplikacji, a następnie implementuje dostosowywania na odpowiedni zakres. Na przykład <xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType> obiektów można wstawić dostosowań dla wszystkich wiadomości w całej usługi i <xref:System.ServiceModel.Description.IContractBehavior?displayProperty=nameWithType> obiektów można wstawić dostosowań dla wszystkich komunikatów w określonym kontraktu i tak dalej. Opis różnych właściwości i dostosowania dostępności, zobacz [rozszerzanie elementu ServiceHost i warstwy modelu usług](~/docs/framework/wcf/extending/extending-servicehost-and-the-service-model-layer.md).  
  
 Po dostosowaniu została podjęta na (i interfejs dostosowywania wdrożone w razie potrzeby) i <xref:System.ServiceModel.Description.IOperationBehavior> jest odpowiedni zakres Dostosowywanie dostosowań muszą być wstawiane do środowiska wykonawczego systemu Windows Communication Foundation (WCF) zaimplementowanie <xref:System.ServiceModel.Description.IOperationBehavior> i dodawanie zachowanie operacji do środowiska wykonawczego.  
  
 Istnieją dwa sposoby dodawania <xref:System.ServiceModel.Description.IOperationBehavior> do środowiska wykonawczego:  
  
-   Programowane Dodawanie zachowanie operacja niestandardowa w celu <xref:System.ServiceModel.Description.OperationDescription.Behaviors%2A?displayProperty=nameWithType> właściwości przed otwarciem hosta usługi (w aplikacji usługi) lub fabryki kanałów (w aplikacji klienta).  
  
-   Dodaj zachowanie przy użyciu atrybutu niestandardowego.  
  
 Do wykonania zadania dostosowywania usługi, dla których ma mieć miejsce, <xref:System.ServiceModel.Description.IOperationBehavior> można dodać obiektu do <xref:System.ServiceModel.Description.OperationDescription.Behaviors%2A?displayProperty=nameWithType> właściwości przed konstrukcji środowiska uruchomieniowego usługi, która występuje podczas <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType> wywoływana jest metoda <xref:System.ServiceModel.ServiceHost?displayProperty=nameWithType>. Do wykonywania zadań dostosowania klienta, <xref:System.ServiceModel.Description.IOperationBehavior> można dodać obiektu do <xref:System.ServiceModel.Description.OperationDescription.Behaviors%2A?displayProperty=nameWithType> właściwość przed wywołaniem <xref:System.ServiceModel.ChannelFactory%601.CreateChannel%2A?displayProperty=nameWithType> metody lub <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType> metoda <xref:System.ServiceModel.ChannelFactory%601>.  
  
 Chociaż zachowanie operacja jest zaprojektowana by mieć łatwy dostęp do środowiska wykonawczego w zakresie poszczególnych operacji, uzyskać dostęp do środowiska wykonawczego w większego zakresu, uzyskiwanie dostępu do nadrzędnego obiektu środowiska wykonawczego.  
  
   
  
## Examples  
 Poniższy przykładowy kod przedstawia implementację <xref:System.ServiceModel.Dispatcher.IParameterInspector?displayProperty=nameWithType> zapisuje do konsoli po wywołaniu inspektor na operację. Takie dostosowanie może zostać dołączona tyko do <xref:System.ServiceModel.Dispatcher.DispatchOperation?displayProperty=nameWithType> lub <xref:System.ServiceModel.Dispatcher.ClientOperation?displayProperty=nameWithType> i w związku z tym zazwyczaj dodaje się przez działanie operacji.  
  
 [!code-csharp[Interceptors#4](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#4)]
 [!code-vb[Interceptors#4](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#4)]  
  
 Poniższy przykład kodu pokazuje, jak zachowanie operacji dołącza inspektora parametru do środowiska wykonawczego.  
  
 [!code-csharp[Interceptors#6](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#6)]
 [!code-vb[Interceptors#6](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#6)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddBindingParameters">
      <MemberSignature Language="C#" Value="public void AddBindingParameters (System.ServiceModel.Description.OperationDescription operationDescription, System.ServiceModel.Channels.BindingParameterCollection bindingParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddBindingParameters(class System.ServiceModel.Description.OperationDescription operationDescription, class System.ServiceModel.Channels.BindingParameterCollection bindingParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IOperationBehavior.AddBindingParameters(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Channels.BindingParameterCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddBindingParameters(System::ServiceModel::Description::OperationDescription ^ operationDescription, System::ServiceModel::Channels::BindingParameterCollection ^ bindingParameters);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationDescription" Type="System.ServiceModel.Description.OperationDescription" />
        <Parameter Name="bindingParameters" Type="System.ServiceModel.Channels.BindingParameterCollection" />
      </Parameters>
      <Docs>
        <param name="operationDescription">Operacja sprawdzone. Służy do badania tylko. W przypadku modyfikacji opis operacji wyniki są niezdefiniowane.</param>
        <param name="bindingParameters">Kolekcja obiektów, które wymagają elementy powiązania do obsługi zachowanie.</param>
        <summary>Implementuje do przekazywania danych w czasie wykonywania do wiązania, aby obsługiwać niestandardowe zachowanie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementowanie <xref:System.ServiceModel.Description.IOperationBehavior.AddBindingParameters%2A> metodę w celu zapewnienia elementy powiązania z dodatkowe obiekty wymagają do obsługi operacji zachowanie. Po dodaniu w tym miejscu Parametry wiążące, powiązania można zlokalizować i przetworzyć te obiekty po utworzeniu odbiornika kanału lub fabryki kanałów. Zazwyczaj zaimplementować <xref:System.ServiceModel.Description.IOperationBehavior.AddBindingParameters%2A> metodę, aby przekazać informacje na temat operacji element niestandardowego powiązania, dzięki czemu można tworzyć, Obsługa kanału poprawnie. Zwraca żadnej wartości, jeśli są wymagane nie zmiany.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyClientBehavior">
      <MemberSignature Language="C#" Value="public void ApplyClientBehavior (System.ServiceModel.Description.OperationDescription operationDescription, System.ServiceModel.Dispatcher.ClientOperation clientOperation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyClientBehavior(class System.ServiceModel.Description.OperationDescription operationDescription, class System.ServiceModel.Dispatcher.ClientOperation clientOperation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IOperationBehavior.ApplyClientBehavior(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Dispatcher.ClientOperation)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ApplyClientBehavior(System::ServiceModel::Description::OperationDescription ^ operationDescription, System::ServiceModel::Dispatcher::ClientOperation ^ clientOperation);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationDescription" Type="System.ServiceModel.Description.OperationDescription" />
        <Parameter Name="clientOperation" Type="System.ServiceModel.Dispatcher.ClientOperation" />
      </Parameters>
      <Docs>
        <param name="operationDescription">Operacja sprawdzone. Służy do badania tylko. W przypadku modyfikacji opis operacji wyniki są niezdefiniowane.</param>
        <param name="clientOperation">Obiekt środowiska wykonawczego, który udostępnia właściwości dostosowywania dla operacji opisanego przez <c>operationDescription</c>.</param>
        <summary>Implementuje modyfikacji lub rozszerzenia klienta przez operację.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementowanie <xref:System.ServiceModel.Description.IOperationBehavior.ApplyClientBehavior%2A> metodę, aby wyświetlić, modyfikowanie lub Dodawanie niestandardowego rozszerzenia do środowiska uruchomieniowego klienta, we wszystkich wiadomości używane z określoną operacją. Aby uzyskać więcej informacji o dostosowywaniu, jakie można zrobić za pomocą obiektu środowiska wykonawczego klienta, zobacz <xref:System.ServiceModel.Dispatcher.ClientRuntime> i <xref:System.ServiceModel.Dispatcher.ClientOperation>.  
  
 Zalecane jest <xref:System.ServiceModel.Description.IOperationBehavior.ApplyClientBehavior%2A> throw metody <xref:System.NotImplementedException> Jeśli zachowanie jest przeznaczona tylko do użytku w aplikacji usługi.  
  
   
  
## Examples  
 Poniższy przykładowy kod przedstawia implementację <xref:System.ServiceModel.Dispatcher.IParameterInspector?displayProperty=nameWithType> zapisuje do konsoli po wywołaniu inspektor na operację. Takie dostosowanie może zostać dołączona tyko do <xref:System.ServiceModel.Dispatcher.DispatchOperation?displayProperty=nameWithType> lub <xref:System.ServiceModel.Dispatcher.ClientOperation?displayProperty=nameWithType> i w związku z tym zazwyczaj dodaje się przez działanie operacji.  
  
 [!code-csharp[Interceptors#4](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#4)]
 [!code-vb[Interceptors#4](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#4)]  
  
 Poniższy przykład kodu pokazuje, jak zachowanie operacji dołącza inspektora parametru do środowiska wykonawczego.  
  
 [!code-csharp[Interceptors#6](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#6)]
 [!code-vb[Interceptors#6](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyDispatchBehavior">
      <MemberSignature Language="C#" Value="public void ApplyDispatchBehavior (System.ServiceModel.Description.OperationDescription operationDescription, System.ServiceModel.Dispatcher.DispatchOperation dispatchOperation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyDispatchBehavior(class System.ServiceModel.Description.OperationDescription operationDescription, class System.ServiceModel.Dispatcher.DispatchOperation dispatchOperation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IOperationBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Dispatcher.DispatchOperation)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ApplyDispatchBehavior(System::ServiceModel::Description::OperationDescription ^ operationDescription, System::ServiceModel::Dispatcher::DispatchOperation ^ dispatchOperation);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationDescription" Type="System.ServiceModel.Description.OperationDescription" />
        <Parameter Name="dispatchOperation" Type="System.ServiceModel.Dispatcher.DispatchOperation" />
      </Parameters>
      <Docs>
        <param name="operationDescription">Operacja sprawdzone. Służy do badania tylko. W przypadku modyfikacji opis operacji wyniki są niezdefiniowane.</param>
        <param name="dispatchOperation">Obiekt środowiska wykonawczego, który udostępnia właściwości dostosowywania dla operacji opisanego przez <c>operationDescription</c>.</param>
        <summary>Implementuje modyfikacji lub rozszerzenia usługi przez operację.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementowanie <xref:System.ServiceModel.Description.IOperationBehavior.ApplyDispatchBehavior%2A> metodę, aby wyświetlać, modyfikować i rozszerzanie środowiska uruchomieniowego usługi między wszystkie komunikaty lub dla określonej operacji. Aby uzyskać więcej informacji o dostosowywaniu, jakie można zrobić w aplikacji usługi, zobacz <xref:System.ServiceModel.Dispatcher.DispatchRuntime?displayProperty=nameWithType> i <xref:System.ServiceModel.Dispatcher.DispatchOperation?displayProperty=nameWithType>.  
  
 Zalecane jest <xref:System.ServiceModel.Description.IOperationBehavior.ApplyDispatchBehavior%2A> throw metody <xref:System.NotImplementedException> wyjątek, jeśli zachowanie jest przeznaczona tylko do użytku w aplikacji klienckiej.  
  
   
  
## Examples  
 Poniższy przykładowy kod przedstawia implementację <xref:System.ServiceModel.Dispatcher.IParameterInspector?displayProperty=nameWithType> zapisuje do konsoli po wywołaniu inspektor na operację. Takie dostosowanie może zostać dołączona tyko do <xref:System.ServiceModel.Dispatcher.DispatchOperation?displayProperty=nameWithType> lub <xref:System.ServiceModel.Dispatcher.ClientOperation?displayProperty=nameWithType> i w związku z tym zazwyczaj dodaje się przez działanie operacji.  
  
 [!code-csharp[Interceptors#4](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#4)]
 [!code-vb[Interceptors#4](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#4)]  
  
 Poniższy przykład kodu pokazuje, jak zachowanie operacji dołącza inspektora parametru do środowiska wykonawczego.  
  
 [!code-csharp[Interceptors#6](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#6)]
 [!code-vb[Interceptors#6](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public void Validate (System.ServiceModel.Description.OperationDescription operationDescription);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Validate(class System.ServiceModel.Description.OperationDescription operationDescription) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IOperationBehavior.Validate(System.ServiceModel.Description.OperationDescription)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Validate(System::ServiceModel::Description::OperationDescription ^ operationDescription);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationDescription" Type="System.ServiceModel.Description.OperationDescription" />
      </Parameters>
      <Docs>
        <param name="operationDescription">Operacja sprawdzone. Służy do badania tylko. W przypadku modyfikacji opis operacji wyniki są niezdefiniowane.</param>
        <summary>Wdrożenie, aby upewnić się, czy operacja spełnia niektóre przeznaczony kryteriów.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementowanie <xref:System.ServiceModel.Description.IOperationBehavior.Validate%2A> metody do sprawdzenia struktury, aby potwierdzić wszystkie określone kryteria. Nie jest konieczne przeprowadzenie wszelkie dostosowania w <xref:System.ServiceModel.Description.IOperationBehavior.ApplyClientBehavior%2A> lub <xref:System.ServiceModel.Description.IOperationBehavior.ApplyDispatchBehavior%2A> Aby użyć tej metody. Jeśli operacja zakończy się pomyślnie weryfikacji zwracanego; w przeciwnym razie Zgłoś wyjątek.  
  
 Na przykład <xref:System.ServiceModel.Description.IOperationBehavior.Validate%2A> metody można użyć do zapewnienia, że operacja jest autoryzowany.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>