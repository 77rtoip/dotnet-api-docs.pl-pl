<Type Name="IOperationBehavior" FullName="System.ServiceModel.Description.IOperationBehavior">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d2f195f38b2a9f71c444f7c1736f6ade9c35e8f8" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69104801" /></Metadata><TypeSignature Language="C#" Value="public interface IOperationBehavior" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IOperationBehavior" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Description.IOperationBehavior" />
  <TypeSignature Language="VB.NET" Value="Public Interface IOperationBehavior" />
  <TypeSignature Language="C++ CLI" Value="public interface class IOperationBehavior" />
  <TypeSignature Language="F#" Value="type IOperationBehavior = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.5.0.1</AssemblyVersion>
    <AssemblyVersion>4.5.0.3</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Implementuje metody, których można użyć, aby zwiększyć zachowanie w czasie wykonywania dla operacji w usłudze lub aplikacji klienckiej.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementowanie <xref:System.ServiceModel.Description.IOperationBehavior> interfejsu w celu modyfikowania, badania lub rozbudowywania niektórych aspektów wykonywania operacji na poziomie aplikacji dla aplikacji klienta lub usług.  
  
-   Użyj metody <xref:System.ServiceModel.Description.IOperationBehavior.AddBindingParameters%2A> , aby przekazać dane niestandardowe w czasie wykonywania, aby włączyć powiązania obsługujące zachowanie niestandardowe.  
  
-   <xref:System.ServiceModel.Description.IOperationBehavior.ApplyClientBehavior%2A> Użyj metody, aby zmodyfikować, przeanalizować lub wstawić rozszerzenia do dyspozytora klienta w aplikacji klienckiej.  
  
-   <xref:System.ServiceModel.Description.IOperationBehavior.ApplyDispatchBehavior%2A> Użyj metody, aby modyfikować, testować lub wstawiać rozszerzenia do wykonywania operacji w aplikacji usługi.  
  
-   Użyj metody, aby upewnić się <xref:System.ServiceModel.Description.OperationDescription> , że spełnia określone wymagania. <xref:System.ServiceModel.Description.IOperationBehavior.Validate%2A> Można go użyć, aby upewnić się, że operacja ma włączone określone ustawienie konfiguracji, obsługuje konkretną funkcję i inne wymagania.  
  
 <xref:System.ServiceModel.Description.IOperationBehavior>obiekty mogą korzystać z dowolnej z tych metod, ale często tylko jeden jest ważny; w takich przypadkach nieużywane metody mogą zwrócić, wykonanie nie działa.  
  
> [!NOTE]
>  Wszystkie metody przekazują <xref:System.ServiceModel.Description.OperationDescription>obiektjakoparametr. <xref:System.ServiceModel.Description.IOperationBehavior> Ten parametr służy tylko do celów badania; Jeśli zmodyfikujesz <xref:System.ServiceModel.Description.OperationDescription> obiekt, zachowanie wykonywania jest niezdefiniowane.  
  
 <xref:System.ServiceModel.Description.IOperationBehavior>obiekty są zwykle używane do uzyskiwania dostępu do różnych właściwości <xref:System.ServiceModel.Dispatcher.DispatchOperation?displayProperty=nameWithType> obiektu w aplikacji usługi <xref:System.ServiceModel.Dispatcher.ClientOperation?displayProperty=nameWithType> i obiektu w aplikacji klienckiej.  
  
 Zazwyczaj deweloper najpierw przegląda punkty rozszerzalności, aby określić, która opcja dostosowania jest zgodna ze scenariuszem aplikacji, a następnie implementuje dostosowanie w odpowiednim zakresie. Na przykład <xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType> obiekty mogą wstawiać dostosowania dla wszystkich komunikatów w całej usłudze, a <xref:System.ServiceModel.Description.IContractBehavior?displayProperty=nameWithType> obiekty mogą wstawiać dostosowania dla wszystkich komunikatów w ramach konkretnej kontraktu itd. Opis różnych dostępnych właściwości i dostosowań znajduje się w temacie Rozszerzanie elementu [ServiceHost i warstwy modelu usług](~/docs/framework/wcf/extending/extending-servicehost-and-the-service-model-layer.md).  
  
 Po decyzji o dostosowaniu (i interfejsie dostosowania zaimplementowane w razie potrzeby) i <xref:System.ServiceModel.Description.IOperationBehavior> jest odpowiednim zakresem dostosowywania, dostosowanie musi zostać wstawione do środowiska uruchomieniowego Windows Communication Foundation (WCF) przez zaimplementowanie <xref:System.ServiceModel.Description.IOperationBehavior> i dodanie zachowania operacji do środowiska uruchomieniowego.  
  
 Istnieją dwa sposoby dodawania <xref:System.ServiceModel.Description.IOperationBehavior> do środowiska uruchomieniowego:  
  
-   Programowo Dodaj zachowanie niestandardowej operacji do <xref:System.ServiceModel.Description.OperationDescription.Behaviors%2A?displayProperty=nameWithType> właściwości przed otwarciem hosta usługi (w aplikacji usługi) lub fabryki kanałów (w aplikacji klienckiej).  
  
-   Dodaj zachowanie przy użyciu atrybutu niestandardowego.  
  
 Aby wykonać zadanie dostosowywania usługi, <xref:System.ServiceModel.Description.IOperationBehavior> dla którego jest zamierzone, należy dodać obiekt <xref:System.ServiceModel.Description.OperationDescription.Behaviors%2A?displayProperty=nameWithType> do właściwości przed konstrukcją środowiska uruchomieniowego usługi, która występuje, gdy <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType> Metoda jest wywoływana w <xref:System.ServiceModel.ServiceHost?displayProperty=nameWithType>. Aby wykonać zadanie dostosowywania <xref:System.ServiceModel.Description.IOperationBehavior> klienta, należy dodać obiekt <xref:System.ServiceModel.Description.OperationDescription.Behaviors%2A?displayProperty=nameWithType> do właściwości przed <xref:System.ServiceModel.ICommunicationObject.Open%2A?displayProperty=nameWithType> wywołaniem <xref:System.ServiceModel.ChannelFactory%601.CreateChannel%2A?displayProperty=nameWithType> metody lub metody w <xref:System.ServiceModel.ChannelFactory%601>.  
  
 Chociaż zachowanie operacji zostało zaprojektowane w celu łatwego dostępu do środowiska uruchomieniowego w zakresie poszczególnych operacji, można uzyskać dostęp do środowiska uruchomieniowego w większym zakresie, uzyskując dostęp do nadrzędnego obiektu środowiska uruchomieniowego.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje implementację <xref:System.ServiceModel.Dispatcher.IParameterInspector?displayProperty=nameWithType> zapisu do konsoli po wywołaniu inspektora w operacji. Takie dostosowanie może być dołączone tylko do <xref:System.ServiceModel.Dispatcher.DispatchOperation?displayProperty=nameWithType> lub <xref:System.ServiceModel.Dispatcher.ClientOperation?displayProperty=nameWithType> i jest zazwyczaj wstawiane przez zachowanie operacji.  
  
 [!code-csharp[Interceptors#4](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#4)]
 [!code-vb[Interceptors#4](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#4)]  
  
 Poniższy przykład kodu pokazuje, jak zachowanie operacji dołącza inspektora parametrów do środowiska uruchomieniowego.  
  
 [!code-csharp[Interceptors#6](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#6)]
 [!code-vb[Interceptors#6](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#6)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AddBindingParameters">
      <MemberSignature Language="C#" Value="public void AddBindingParameters (System.ServiceModel.Description.OperationDescription operationDescription, System.ServiceModel.Channels.BindingParameterCollection bindingParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddBindingParameters(class System.ServiceModel.Description.OperationDescription operationDescription, class System.ServiceModel.Channels.BindingParameterCollection bindingParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IOperationBehavior.AddBindingParameters(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Channels.BindingParameterCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddBindingParameters(System::ServiceModel::Description::OperationDescription ^ operationDescription, System::ServiceModel::Channels::BindingParameterCollection ^ bindingParameters);" />
      <MemberSignature Language="F#" Value="abstract member AddBindingParameters : System.ServiceModel.Description.OperationDescription * System.ServiceModel.Channels.BindingParameterCollection -&gt; unit" Usage="iOperationBehavior.AddBindingParameters (operationDescription, bindingParameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationDescription" Type="System.ServiceModel.Description.OperationDescription" />
        <Parameter Name="bindingParameters" Type="System.ServiceModel.Channels.BindingParameterCollection" />
      </Parameters>
      <Docs>
        <param name="operationDescription">Sprawdzana jest operacja. Służy wyłącznie do badania. Jeśli opis operacji jest modyfikowany, wyniki są niezdefiniowane.</param>
        <param name="bindingParameters">Kolekcja obiektów, których elementy powiązania wymagają do obsługi zachowania.</param>
        <summary>Zaimplementuj, aby przekazać dane w czasie wykonywania do powiązań w celu obsługi zachowania niestandardowego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zaimplementuj <xref:System.ServiceModel.Description.IOperationBehavior.AddBindingParameters%2A> metodę, aby zapewnić elementy powiązania z dodatkowymi obiektami wymaganymi do obsługi zachowania operacji. Po dodaniu parametrów wiązania w tym miejscu powiązanie może zlokalizować i przetworzyć te obiekty podczas tworzenia odbiornika kanału lub fabryki kanałów. Zazwyczaj należy zaimplementować <xref:System.ServiceModel.Description.IOperationBehavior.AddBindingParameters%2A> metodę w celu przekazania informacji o operacji do niestandardowego elementu powiązania, aby można było poprawnie utworzyć kanał pomocniczy. Nie zwracaj żadnej wartości, jeśli nie są wymagane żadne modyfikacje.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyClientBehavior">
      <MemberSignature Language="C#" Value="public void ApplyClientBehavior (System.ServiceModel.Description.OperationDescription operationDescription, System.ServiceModel.Dispatcher.ClientOperation clientOperation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyClientBehavior(class System.ServiceModel.Description.OperationDescription operationDescription, class System.ServiceModel.Dispatcher.ClientOperation clientOperation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IOperationBehavior.ApplyClientBehavior(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Dispatcher.ClientOperation)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ApplyClientBehavior(System::ServiceModel::Description::OperationDescription ^ operationDescription, System::ServiceModel::Dispatcher::ClientOperation ^ clientOperation);" />
      <MemberSignature Language="F#" Value="abstract member ApplyClientBehavior : System.ServiceModel.Description.OperationDescription * System.ServiceModel.Dispatcher.ClientOperation -&gt; unit" Usage="iOperationBehavior.ApplyClientBehavior (operationDescription, clientOperation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationDescription" Type="System.ServiceModel.Description.OperationDescription" />
        <Parameter Name="clientOperation" Type="System.ServiceModel.Dispatcher.ClientOperation" />
      </Parameters>
      <Docs>
        <param name="operationDescription">Sprawdzana jest operacja. Służy wyłącznie do badania. Jeśli opis operacji jest modyfikowany, wyniki są niezdefiniowane.</param>
        <param name="clientOperation">Obiekt czasu wykonywania, który uwidacznia właściwości dostosowania dla operacji opisanej przez <paramref name="operationDescription" />.</param>
        <summary>Implementuje modyfikację lub rozszerzenie klienta w ramach operacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zaimplementuj <xref:System.ServiceModel.Description.IOperationBehavior.ApplyClientBehavior%2A> metodę, aby wyświetlać, modyfikować lub dodawać niestandardowe rozszerzenia do środowiska uruchomieniowego klienta we wszystkich komunikatach używanych z określoną operacją. Aby uzyskać szczegółowe informacje na temat dostosowań, które można wykonać z obiektem wykonawczym <xref:System.ServiceModel.Dispatcher.ClientRuntime> klienta <xref:System.ServiceModel.Dispatcher.ClientOperation>, zobacz i.  
  
 Zaleca się, aby <xref:System.ServiceModel.Description.IOperationBehavior.ApplyClientBehavior%2A> Metoda <xref:System.NotImplementedException> zgłosiła, czy zachowanie jest przeznaczone wyłącznie do użytku w aplikacji usługi.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje implementację <xref:System.ServiceModel.Dispatcher.IParameterInspector?displayProperty=nameWithType> zapisu do konsoli po wywołaniu inspektora w operacji. Takie dostosowanie może być dołączone tylko do <xref:System.ServiceModel.Dispatcher.DispatchOperation?displayProperty=nameWithType> lub <xref:System.ServiceModel.Dispatcher.ClientOperation?displayProperty=nameWithType> i jest zazwyczaj wstawiane przez zachowanie operacji.  
  
 [!code-csharp[Interceptors#4](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#4)]
 [!code-vb[Interceptors#4](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#4)]  
  
 Poniższy przykład kodu pokazuje, jak zachowanie operacji dołącza inspektora parametrów do środowiska uruchomieniowego.  
  
 [!code-csharp[Interceptors#6](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#6)]
 [!code-vb[Interceptors#6](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ApplyDispatchBehavior">
      <MemberSignature Language="C#" Value="public void ApplyDispatchBehavior (System.ServiceModel.Description.OperationDescription operationDescription, System.ServiceModel.Dispatcher.DispatchOperation dispatchOperation);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyDispatchBehavior(class System.ServiceModel.Description.OperationDescription operationDescription, class System.ServiceModel.Dispatcher.DispatchOperation dispatchOperation) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IOperationBehavior.ApplyDispatchBehavior(System.ServiceModel.Description.OperationDescription,System.ServiceModel.Dispatcher.DispatchOperation)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ApplyDispatchBehavior(System::ServiceModel::Description::OperationDescription ^ operationDescription, System::ServiceModel::Dispatcher::DispatchOperation ^ dispatchOperation);" />
      <MemberSignature Language="F#" Value="abstract member ApplyDispatchBehavior : System.ServiceModel.Description.OperationDescription * System.ServiceModel.Dispatcher.DispatchOperation -&gt; unit" Usage="iOperationBehavior.ApplyDispatchBehavior (operationDescription, dispatchOperation)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationDescription" Type="System.ServiceModel.Description.OperationDescription" />
        <Parameter Name="dispatchOperation" Type="System.ServiceModel.Dispatcher.DispatchOperation" />
      </Parameters>
      <Docs>
        <param name="operationDescription">Sprawdzana jest operacja. Służy wyłącznie do badania. Jeśli opis operacji jest modyfikowany, wyniki są niezdefiniowane.</param>
        <param name="dispatchOperation">Obiekt czasu wykonywania, który uwidacznia właściwości dostosowania dla operacji opisanej przez <paramref name="operationDescription" />.</param>
        <summary>Implementuje modyfikację lub rozszerzenie usługi w ramach operacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zaimplementuj <xref:System.ServiceModel.Description.IOperationBehavior.ApplyDispatchBehavior%2A> metodę, aby wyświetlić, zmodyfikować lub zwiększyć środowisko uruchomieniowe usługi dla wszystkich komunikatów lub dla określonej operacji. Aby uzyskać szczegółowe informacje na temat dostosowań, które można wykonać w aplikacji <xref:System.ServiceModel.Dispatcher.DispatchRuntime?displayProperty=nameWithType> usługi <xref:System.ServiceModel.Dispatcher.DispatchOperation?displayProperty=nameWithType>, zobacz i.  
  
 Zaleca się, aby <xref:System.ServiceModel.Description.IOperationBehavior.ApplyDispatchBehavior%2A> Metoda <xref:System.NotImplementedException> zgłosiła wyjątek, jeśli zachowanie jest przeznaczone wyłącznie do użytku w aplikacji klienckiej.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje implementację <xref:System.ServiceModel.Dispatcher.IParameterInspector?displayProperty=nameWithType> zapisu do konsoli po wywołaniu inspektora w operacji. Takie dostosowanie może być dołączone tylko do <xref:System.ServiceModel.Dispatcher.DispatchOperation?displayProperty=nameWithType> lub <xref:System.ServiceModel.Dispatcher.ClientOperation?displayProperty=nameWithType> i jest zazwyczaj wstawiane przez zachowanie operacji.  
  
 [!code-csharp[Interceptors#4](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/interceptors.cs#4)]
 [!code-vb[Interceptors#4](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/interceptors.vb#4)]  
  
 Poniższy przykład kodu pokazuje, jak zachowanie operacji dołącza inspektora parametrów do środowiska uruchomieniowego.  
  
 [!code-csharp[Interceptors#6](~/samples/snippets/csharp/VS_Snippets_CFX/interceptors/cs/insertingbehaviors.cs#6)]
 [!code-vb[Interceptors#6](~/samples/snippets/visualbasic/VS_Snippets_CFX/interceptors/vb/insertingbehaviors.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Validate">
      <MemberSignature Language="C#" Value="public void Validate (System.ServiceModel.Description.OperationDescription operationDescription);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Validate(class System.ServiceModel.Description.OperationDescription operationDescription) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Description.IOperationBehavior.Validate(System.ServiceModel.Description.OperationDescription)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Validate(System::ServiceModel::Description::OperationDescription ^ operationDescription);" />
      <MemberSignature Language="F#" Value="abstract member Validate : System.ServiceModel.Description.OperationDescription -&gt; unit" Usage="iOperationBehavior.Validate operationDescription" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationDescription" Type="System.ServiceModel.Description.OperationDescription" />
      </Parameters>
      <Docs>
        <param name="operationDescription">Sprawdzana jest operacja. Służy wyłącznie do badania. Jeśli opis operacji jest modyfikowany, wyniki są niezdefiniowane.</param>
        <summary>Zaimplementuj, aby upewnić się, że operacja spełnia pewne zamierzone kryteria.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zaimplementuj <xref:System.ServiceModel.Description.IOperationBehavior.Validate%2A> metodę, aby sprawdzić strukturę w celu potwierdzenia dowolnego zestawu kryteriów. Nie jest konieczne wykonywanie jakichkolwiek dostosowań w programie <xref:System.ServiceModel.Description.IOperationBehavior.ApplyClientBehavior%2A> ani <xref:System.ServiceModel.Description.IOperationBehavior.ApplyDispatchBehavior%2A> do korzystania z tej metody. Jeśli operacja przejdzie walidację, zwróć; w przeciwnym razie Zgłoś wyjątek.  
  
 Na przykład <xref:System.ServiceModel.Description.IOperationBehavior.Validate%2A> można użyć metody, aby upewnić się, że operacja jest autoryzowana.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
