<Type Name="ResourceSet" FullName="System.Resources.ResourceSet">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="a1c004c2cbe90a3788b82697a631822576eef92f" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30564562" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ResourceSet : IDisposable, System.Collections.IEnumerable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable beforefieldinit ResourceSet extends System.Object implements class System.Collections.IEnumerable, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Resources.ResourceSet" />
  <TypeSignature Language="VB.NET" Value="Public Class ResourceSet&#xA;Implements IDisposable, IEnumerable" />
  <TypeSignature Language="C++ CLI" Value="public ref class ResourceSet : IDisposable, System::Collections::IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Resources.ResourceManager</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Przechowuje wszystkie zasoby zlokalizowane dla jednego określonej kultury, ignorowanie innych kultur, łącznie z wszystkimi regułami rezerwowego.  
  
 **Uwaga dotycząca zabezpieczeń**: wywołanie metody tej klasy z niezaufanych danych stanowi zagrożenie bezpieczeństwa. Wywołanie metody w klasie tylko z zaufanych danych. Aby uzyskać więcej informacji, zobacz [niezaufanych zagrożenia bezpieczeństwa danych](https://docs.com/rick-anderson-1/8710/untrusted-data-security-risks).</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Resources.ResourceSet> Klasy wylicza za pośrednictwem <xref:System.Resources.IResourceReader>ładowania co nazwą i wartością i przechowywanie ich w <xref:System.Collections.Hashtable>. Niestandardowy <xref:System.Resources.IResourceReader> mogą być używane.  
  
 Można utworzyć wystąpienia <xref:System.Resources.ResourceSet> obiekt, który reprezentuje zasoby określoną kulturę, wywołując <xref:System.Resources.ResourceManager.GetResourceSet%2A?displayProperty=nameWithType> metody.  
  
> [!IMPORTANT]
>  Ten typ implementuje <xref:System.IDisposable> interfejsu. Po zakończeniu przy użyciu typu bezpośrednio lub pośrednio należy usunąć z niego. Do usuwania tego typu, należy wywołać jej <xref:System.IDisposable.Dispose%2A> metody w `try` / `catch` bloku. Do usunięcia ich pośrednio, użyj konstrukcji języka takiego jak `using` (w języku C#) lub `Using` (w języku Visual Basic). Aby uzyskać więcej informacji, zobacz sekcję "Przy użyciu obiektu który implementuje interfejs IDisposable" w <xref:System.IDisposable> interfejsu tematu.  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>Klasy pochodnej <see cref="T:System.Resources.ResourceSet" /> używający czytnik własnych zasobów i modułu zapisującego powinny zastępować <see cref="M:System.Resources.ResourceSet.GetDefaultReader" />, i <see cref="M:System.Resources.ResourceSet.GetDefaultWriter" />w celu zapewnienia odpowiedniej funkcji dla interpretowanie zestawu zasobów.</para>
    </block>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Tworzy nowe wystąpienie klasy <see cref="T:System.Resources.ResourceSet" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ResourceSet ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceSet.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ResourceSet();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Resources.ResourceSet" /> klasy przy użyciu domyślnej właściwości.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ResourceSet (System.IO.Stream stream);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream stream) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceSet.#ctor(System.IO.Stream)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ResourceSet(System::IO::Stream ^ stream);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="stream" Type="System.IO.Stream" />
      </Parameters>
      <Docs>
        <param name="stream">
          <see cref="T:System.IO.Stream" /> Zasobów do odczytu. Strumień powinien odwoływać się do istniejącego pliku zasobów.</param>
        <summary>Tworzy nowe wystąpienie klasy <see cref="T:System.Resources.ResourceSet" /> przy użyciu domyślnego systemu <see cref="T:System.Resources.ResourceReader" /> które odczytuje zasoby z danego strumienia.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="stream" /> Nie jest do odczytu.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="stream" /> Parametr jest <see langword="null" />.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">w celu świadczenia usług serializacji. Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.SerializationFormatter" /> akcji zabezpieczeń: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" /></permission>
        <permission cref="T:System.Security.SecurityCriticalAttribute">Wymaga pełnego zaufania do bezpośredniego obiektu wywołującego. Ten element członkowski nie może być używany przez częściowo zaufany lub przejrzysty kod.</permission>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ResourceSet (System.Resources.IResourceReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Resources.IResourceReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceSet.#ctor(System.Resources.IResourceReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (reader As IResourceReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ResourceSet(System::Resources::IResourceReader ^ reader);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="reader" Type="System.Resources.IResourceReader" />
      </Parameters>
      <Docs>
        <param name="reader">Czytnik, który będzie używany.</param>
        <summary>Tworzy nowe wystąpienie klasy <see cref="T:System.Resources.ResourceSet" /> przy użyciu czytnika określonego zasobu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor służy do obsługi formatów zasobów niestandardowych przy użyciu określonego przez użytkownika <xref:System.Resources.IResourceReader>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="reader" /> Parametr jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ResourceSet (string fileName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string fileName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceSet.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (fileName As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ResourceSet(System::String ^ fileName);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="fileName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="fileName">Plik zasobów do odczytu.</param>
        <summary>Tworzy nowe wystąpienie klasy <see cref="T:System.Resources.ResourceSet" /> przy użyciu domyślnego systemu <see cref="T:System.Resources.ResourceReader" /> który otwiera i odczytuje zasoby z danego pliku.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu Określa nowe wystąpienie klasy <xref:System.Resources.ResourceSet> klasy dla określonego pliku, iteruje zasoby używane przez ten plik i wyświetla jego zawartość do konsoli.  
  
 [!code-cpp[System.Resources.ResourceSet.GetEnumerator#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Resources.ResourceSet.GetEnumerator/CPP/getenumerator.cpp#1)]
 [!code-csharp[System.Resources.ResourceSet.GetEnumerator#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Resources.ResourceSet.GetEnumerator/CS/getenumerator.cs#1)]
 [!code-vb[System.Resources.ResourceSet.GetEnumerator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Resources.ResourceSet.GetEnumerator/VB/getenumerator.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="fileName" /> Parametr jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public virtual void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceSet.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Close();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zamyka i zwalnia wszystkie zasoby używane przez to <see cref="T:System.Resources.ResourceSet" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wszystkie wywołania metody <xref:System.Resources.ResourceSet> po wywołaniu tej metody może zakończyć się niepowodzeniem.  
  
 <xref:System.Resources.ResourceSet.Close%2A> można bezpiecznie wywoływać wielokrotnie.  
  
> [!NOTE]
>  Bieżąca implementacja <xref:System.Resources.ResourceSet.Close%2A> wywołania <xref:System.Resources.ResourceSet.Dispose%2A> (`true`).  
  
   
  
## Examples  
 Poniższy przykład kodu wykorzystuje <xref:System.Resources.ResourceSet.Close%2A> metodę, aby zwolnić wszystkie zasoby używane przez wywołujący <xref:System.Resources.ResourceSet> wystąpienia.  
  
 [!code-cpp[System.Resources.ResourceSet.GetEnumerator#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Resources.ResourceSet.GetEnumerator/CPP/getenumerator.cpp#1)]
 [!code-csharp[System.Resources.ResourceSet.GetEnumerator#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Resources.ResourceSet.GetEnumerator/CS/getenumerator.cs#1)]
 [!code-vb[System.Resources.ResourceSet.GetEnumerator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Resources.ResourceSet.GetEnumerator/VB/getenumerator.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwalnia zasoby używane przez bieżące <see cref="T:System.Resources.ResourceSet" /> wystąpienia.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceSet.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Usuwa zasoby (inne niż pamięć) używane przez bieżące wystąpienie klasy <see cref="T:System.Resources.ResourceSet" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wywołanie <xref:System.Resources.ResourceSet.Dispose%2A> po zakończeniu przy użyciu <xref:System.Resources.ResourceSet>. <xref:System.Resources.ResourceSet.Dispose%2A> Pozostawia metody <xref:System.Resources.ResourceSet> w stanie uniemożliwiającym jego używanie. Po wywołaniu <xref:System.Resources.ResourceSet.Dispose%2A>, konieczne jest zwolnienie wszystkich odwołań do <xref:System.Resources.ResourceSet> , można odzyskać pamięci, jej klasy przez wyrzucanie elementów bezużytecznych.  
  
> [!NOTE]
>  Bieżąca metoda jest implementacją <xref:System.IDisposable.Dispose%2A?displayProperty=nameWithType>. Ta implementacja wywołuje <xref:System.Resources.ResourceSet.Dispose%2A> (`true`).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceSet.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">Wskazuje, czy obiekty należące do bieżącego wystąpienia powinien zostać jawnie zamknięty.</param>
        <summary>Zwalnia zasoby (inne niż pamięci), które zostały skojarzone z bieżącym wystąpieniem zamknięcia wewnętrzny zarządzanych obiektów na żądanie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `dispose` parametr jest `true`, bieżąca metoda zwalnia wszystkie zasoby, które są skojarzone z nim, a także wszystkie obiekty skojarzone z nim. Jeśli `dispose` jest `false`, bieżąca metoda zwalnia zasoby przydzielone do niego i ignoruje wszelkie obiekty skojarzone z nim.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDefaultReader">
      <MemberSignature Language="C#" Value="public virtual Type GetDefaultReader ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetDefaultReader() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceSet.GetDefaultReader" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDefaultReader () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ GetDefaultReader();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca Preferowany zasób klasy czytnik dla tego rodzaju <see cref="T:System.Resources.ResourceSet" />.</summary>
        <returns>Zwraca <see cref="T:System.Type" /> dla czytnika preferowanych zasobów dla tego rodzaju z <see cref="T:System.Resources.ResourceSet" />.</returns>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>Klasy pochodnej <see cref="T:System.Resources.ResourceSet" /> za pomocą ich własnych czytnik zasobów powinny zastępować <see cref="M:System.Resources.ResourceSet.GetDefaultReader" />, i <see cref="M:System.Resources.ResourceSet.GetDefaultWriter" />.</para>
        </block>
        <altmember cref="T:System.Resources.IResourceReader" />
      </Docs>
    </Member>
    <Member MemberName="GetDefaultWriter">
      <MemberSignature Language="C#" Value="public virtual Type GetDefaultWriter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetDefaultWriter() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceSet.GetDefaultWriter" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetDefaultWriter () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Type ^ GetDefaultWriter();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca Preferowany zasób klasy modułu zapisującego dla tego rodzaju <see cref="T:System.Resources.ResourceSet" />.</summary>
        <returns>Zwraca <see cref="T:System.Type" /> dla edytora preferowanych zasobów dla tego rodzaju z <see cref="T:System.Resources.ResourceSet" />.</returns>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>Klasy pochodnej <see cref="T:System.Resources.ResourceSet" /> za pomocą ich własnych czytnik zasobów powinny zastępować <see cref="M:System.Resources.ResourceSet.GetDefaultReader" />, i <see cref="M:System.Resources.ResourceSet.GetDefaultWriter" />.</para>
        </block>
        <altmember cref="T:System.Resources.IResourceWriter" />
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public virtual System.Collections.IDictionaryEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IDictionaryEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceSet.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEnumerator () As IDictionaryEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IDictionaryEnumerator ^ GetEnumerator();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.IDictionaryEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca <see cref="T:System.Collections.IDictionaryEnumerator" /> który można wykonać iterację <see cref="T:System.Resources.ResourceSet" />.</summary>
        <returns>
          <see cref="T:System.Collections.IDictionaryEnumerator" /> Dla tego <see cref="T:System.Resources.ResourceSet" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Moduły wyliczające Zezwalaj tylko na odczytywanie danych w kolekcji. Wyliczenia nie można zmodyfikować kolekcji źródłowej.  
  
 Początkowo moduł wyliczający jest umieszczony przed pierwszym elementem w kolekcji. <xref:System.Collections.IEnumerator.Reset%2A> również wprowadzono moduł wyliczający wróć do tej pozycji. At to pozycja, wywoływania <xref:System.Collections.IEnumerator.Current%2A> zgłasza wyjątek. W związku z tym należy wywołać <xref:System.Collections.IEnumerator.MoveNext%2A> można poprawić modułu wyliczającego pierwszy element do kolekcji przed odczytywania wartości <xref:System.Collections.IEnumerator.Current%2A>.  
  
 <xref:System.Collections.IEnumerator.Current%2A> zwraca ten sam obiekt do momentu <xref:System.Collections.IEnumerator.MoveNext%2A> lub <xref:System.Collections.IEnumerator.Reset%2A> jest wywoływana. <xref:System.Collections.IEnumerator.MoveNext%2A> Ustawia <xref:System.Collections.IEnumerator.Current%2A> do następnego elementu.  
  
 Po zakończeniu kolekcji jest moduł wyliczający jest rozmieszczanych za ostatnim elementem w kolekcji i wywoływania <xref:System.Collections.IEnumerator.MoveNext%2A> zwraca `false`. Jeśli przez ostatnie wywołanie <xref:System.Collections.IEnumerator.MoveNext%2A> zwrócił `false`, wywoływania <xref:System.Collections.IEnumerator.Current%2A> zgłasza wyjątek. Aby ustawić <xref:System.Collections.IEnumerator.Current%2A> aby pierwszym elementem kolekcji ponownie, należy wywołać <xref:System.Collections.IEnumerator.Reset%2A> następuje <xref:System.Collections.IEnumerator.MoveNext%2A>.  
  
 Moduł wyliczający zachowuje ważność tak długo, jak długo kolekcja pozostaje niezmieniona. Jeśli wprowadzono zmiany w kolekcji, takie jak dodawanie, modyfikowanie lub usuwanie elementów, moduł wyliczający jest bezpowrotnie nieważne, a następne wywołanie <xref:System.Collections.IEnumerator.MoveNext%2A> lub <xref:System.Collections.IEnumerator.Reset%2A> zgłasza <xref:System.InvalidOperationException>. Jeśli kolekcja jest zmodyfikowany między <xref:System.Collections.IEnumerator.MoveNext%2A> i <xref:System.Collections.IEnumerator.Current%2A>, <xref:System.Collections.IEnumerator.Current%2A> zwróci element, który ma ustawioną, nawet wtedy, gdy moduł wyliczający jest już unieważnione.  
  
 Można użyć <xref:System.Collections.IDictionaryEnumerator.Entry%2A?displayProperty=nameWithType> właściwość, aby uzyskać dostęp do wartości przechowywanej w bieżącym elemencie. Użyj <xref:System.Collections.IDictionaryEnumerator.Key%2A?displayProperty=nameWithType> właściwości dostępu do klucza bieżącego elementu. Użyj <xref:System.Collections.IDictionaryEnumerator.Value%2A?displayProperty=nameWithType> właściwość, aby uzyskać dostęp do wartości bieżącego elementu.  
  
 Moduł wyliczający nie ma wyłącznego dostępu do kolekcji, w związku z tym wyliczanie w kolekcji nie jest wewnętrznie procedurą odporną na wielowątkowość. Nawet jeśli kolekcja jest synchronizowane, inne wątki nadal można zmodyfikować kolekcji, co powoduje, że moduł wyliczający, który ma zostać zgłoszony wyjątek. Aby zagwarantować bezpieczeństwo wątków podczas wyliczania, można zablokować kolekcję podczas całego procesu wyliczania albo rejestrować wyjątki wynikłe ze zmian wprowadzanych przez inne wątków.  
  
   
  
## Examples  
 Poniższy przykład przedstawia sposób tworzenia <xref:System.Resources.ResourceSet> `rs` pliku `items.resources`. Następnie <xref:System.Resources.ResourceSet.GetEnumerator%2A> metoda służy do tworzenia <xref:System.Collections.IDictionaryEnumerator> dla `rs`. <xref:System.Collections.IDictionaryEnumerator> Iteruje `rs` i wyświetla zawartość do konsoli.  
  
 [!code-cpp[System.Resources.ResourceSet.GetEnumerator#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Resources.ResourceSet.GetEnumerator/CPP/getenumerator.cpp#1)]
 [!code-csharp[System.Resources.ResourceSet.GetEnumerator#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Resources.ResourceSet.GetEnumerator/CS/getenumerator.cs#1)]
 [!code-vb[System.Resources.ResourceSet.GetEnumerator#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Resources.ResourceSet.GetEnumerator/VB/getenumerator.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Zestaw zasobów został zamknięty lub usunięty.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetObject">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwraca obiekt zasobów o określonej nazwie.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetObject">
      <MemberSignature Language="C#" Value="public virtual object GetObject (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetObject(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceSet.GetObject(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetObject (name As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetObject(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Uwzględniana wielkość liter nazwy zasobu do wyszukania.</param>
        <summary>Wyszukiwanie obiektu zasobów o określonej nazwie.</summary>
        <returns>Żądany zasób.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nazwa obiektu zasobów jest uwzględniana wielkość liter. Wyszukiwania bez uwzględniania wielkości liter, użyj <xref:System.Resources.ResourceSet.GetObject%2A>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> Parametr jest <see langword="null" />.</exception>
        <exception cref="T:System.ObjectDisposedException">Obiekt został zamknięty lub usunięty.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetObject">
      <MemberSignature Language="C#" Value="public virtual object GetObject (string name, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetObject(string name, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceSet.GetObject(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetObject (name As String, ignoreCase As Boolean) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Object ^ GetObject(System::String ^ name, bool ignoreCase);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">Nazwa zasobu do wyszukania.</param>
        <param name="ignoreCase">Wskazuje, czy należy ją ignorować w przypadku określonej nazwy.</param>
        <summary>Wyszukiwanie obiektu zasobów o określonej nazwie w sposób, bez uwzględniania wielkości liter, jeśli jest to wymagane.</summary>
        <returns>Żądany zasób.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli wartość `ignoreCase` parametr jest `true`, zasób o nazwie "Zasobu" jest odpowiednikiem zasobu o nazwie "zasobu". Należy jednak pamiętać, że ta metoda zawsze przeprowadza porównania bez uwzględniania wielkości liter ciągu przy użyciu <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType>. Zaletą jest to, że wyniki porównania bez uwzględniania wielkości liter ciąg wykonywane przez tę metodę są takie same na wszystkich komputerach niezależnie od kultury. Wadą jest to, że wyniki nie są zgodne z zasadami wielkości liter wszystkich języków.  
  
 Na przykład turecki alfabetu ma dwie wersje znaku I: jedną z kropką, a drugi bez kropki. W turecki znak (Unicode 0049) I jest uznawany za wielkie wersja innego znaku ı (Unicode 0131). Znak (Unicode 0069) i jest uznawany za małe wersji kolejnego znaku İ (Unicode 0130). Zgodnie z następującymi regułami wielkości liter, porównania bez uwzględniania wielkości liter ciągów znaków i (Unicode 0069) oraz (Unicode 0049) powinna zakończyć się niepowodzeniem dla kultury "tr-TR" (turecki w Turcja). Przy użyciu `GetObject` metody z `ignoreCase` ustawioną `true`, to porównanie zakończy się pomyślnie.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> Parametr jest <see langword="null" />.</exception>
        <exception cref="T:System.ObjectDisposedException">Obiekt został zamknięty lub usunięty.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetString">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwraca <see cref="T:System.String" /> zasobów o określonej nazwie.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetString">
      <MemberSignature Language="C#" Value="public virtual string GetString (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetString(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceSet.GetString(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetString (name As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ GetString(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Nazwa zasobu do wyszukania.</param>
        <summary>Wyszukuje <see cref="T:System.String" /> zasobów o określonej nazwie.</summary>
        <returns>Wartość zasobu, jeśli wartość jest <see cref="T:System.String" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> Parametr jest <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Zasobu określonego przez <paramref name="name" /> nie jest <see cref="T:System.String" />.</exception>
        <exception cref="T:System.ObjectDisposedException">Obiekt został zamknięty lub usunięty.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetString">
      <MemberSignature Language="C#" Value="public virtual string GetString (string name, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string GetString(string name, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceSet.GetString(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetString (name As String, ignoreCase As Boolean) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::String ^ GetString(System::String ^ name, bool ignoreCase);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">Nazwa zasobu do wyszukania.</param>
        <param name="ignoreCase">Wskazuje, czy należy ją ignorować wielkość liter w przypadku określonej nazwy.</param>
        <summary>Wyszukuje <see cref="T:System.String" /> zasobów o określonej nazwie w sposób bez uwzględniania wielkości liter, jeśli jest to wymagane.</summary>
        <returns>Wartość zasobu, jeśli wartość jest <see cref="T:System.String" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli wartość `ignoreCase` parametr jest `true`, zasób o nazwie "Zasobu" jest odpowiednikiem zasobu o nazwie "zasobu". Należy jednak pamiętać, że ta metoda zawsze przeprowadza porównania bez uwzględniania wielkości liter ciągu przy użyciu <xref:System.Globalization.CultureInfo.InvariantCulture%2A?displayProperty=nameWithType>. Zaletą jest to, że wyniki porównania bez uwzględniania wielkości liter ciąg wykonywane przez tę metodę są takie same na wszystkich komputerach niezależnie od kultury. Wadą jest to, że wyniki nie są zgodne z zasadami wielkości liter wszystkich języków.  
  
 Na przykład turecki alfabetu ma dwie wersje znaku I: jedną z kropką, a drugi bez kropki. W turecki znak (Unicode 0049) I jest uznawany za wielkie wersja innego znaku ı (Unicode 0131). Znak (Unicode 0069) i jest uznawany za małe wersji kolejnego znaku İ (Unicode 0130). Zgodnie z następującymi regułami wielkości liter, porównania bez uwzględniania wielkości liter ciągów znaków i (Unicode 0069) oraz (Unicode 0049) powinna zakończyć się niepowodzeniem dla kultury "tr-TR" (turecki w Turcja). Przy użyciu `GetString` metody z `ignoreCase` ustawioną `true`, to porównanie zakończy się pomyślnie.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="name" /> Parametr jest <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Zasobu określonego przez <paramref name="name" /> nie jest <see cref="T:System.String" />.</exception>
        <exception cref="T:System.ObjectDisposedException">Obiekt został zamknięty lub usunięty.</exception>
      </Docs>
    </Member>
    <Member MemberName="Reader">
      <MemberSignature Language="C#" Value="protected System.Resources.IResourceReader Reader;" />
      <MemberSignature Language="ILAsm" Value=".field family class System.Resources.IResourceReader Reader" />
      <MemberSignature Language="DocId" Value="F:System.Resources.ResourceSet.Reader" />
      <MemberSignature Language="VB.NET" Value="Protected Reader As IResourceReader " />
      <MemberSignature Language="C++ CLI" Value="protected: System::Resources::IResourceReader ^ Reader;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Resources.IResourceReader</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Wskazuje <see cref="T:System.Resources.IResourceReader" /> używany do odczytu zasobów.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Resources.IResourceReader" />
      </Docs>
    </Member>
    <Member MemberName="ReadResources">
      <MemberSignature Language="C#" Value="protected virtual void ReadResources ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ReadResources() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceSet.ReadResources" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub ReadResources ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void ReadResources();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Wszystkie zasoby odczytuje i zapisuje je w <see cref="T:System.Collections.Hashtable" /> wskazane <see cref="F:System.Resources.ResourceSet.Table" /> właściwości.</summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides">
          <para>Klasy pochodnej <see cref="T:System.Resources.ResourceSet" /> należy jawnie wywołać <see cref="M:System.Resources.ResourceSet.ReadResources" /> załadować wszystkie zasoby z <see cref="T:System.Resources.IResourceReader" /> do <see cref="F:System.Resources.ResourceSet.Table" />, zazwyczaj w konstruktorze lub opóźnieniem pierwszego wywołania jako <see cref="M:System.Resources.ResourceSet.GetString(System.String)" /> lub <see cref="M:System.Resources.ResourceSet.GetObject(System.String)" />. Jeśli Twoje zestawu zasobów i IResourceReader już ma informacje o sobie nawzajem i mają bardziej wydajny sposób załadować kilka Wybierz zasoby, ten krok można pominąć. Aby zminimalizować zestaw roboczy, zapisać zasobu ustawić w taki sposób, wysyła IResourceReader Twojego tylko wartości zasobów wymaganych przez aplikację.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Resources.ResourceSet.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Resources.ResourceManager</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca <see cref="T:System.Collections.IEnumerator" /> obiekt, aby uniknąć sytuacji wyścigu z <see langword="Dispose" />. Ten element członkowski nie jest przeznaczona do użycia bezpośrednio w kodzie.</summary>
        <returns>Moduł wyliczający dla bieżącego <see cref="T:System.Resources.ResourceSet" /> obiektu.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Table">
      <MemberSignature Language="C#" Value="protected System.Collections.Hashtable Table;" />
      <MemberSignature Language="ILAsm" Value=".field family class System.Collections.Hashtable Table" />
      <MemberSignature Language="DocId" Value="F:System.Resources.ResourceSet.Table" />
      <MemberSignature Language="VB.NET" Value="Protected Table As Hashtable " />
      <MemberSignature Language="C++ CLI" Value="protected: System::Collections::Hashtable ^ Table;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Hashtable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <see cref="T:System.Collections.Hashtable" /> , W którym są przechowywane zasoby.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Collections.Hashtable" />
      </Docs>
    </Member>
  </Members>
</Type>