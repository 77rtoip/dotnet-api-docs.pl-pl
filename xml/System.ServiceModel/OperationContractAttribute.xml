<Type Name="OperationContractAttribute" FullName="System.ServiceModel.OperationContractAttribute">
  <Metadata><Meta Name="ms.openlocfilehash" Value="2c645cc5c1a22c19e3e0ba3c71e0c283cbc6c285" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69232489" /></Metadata><TypeSignature Language="C#" Value="public sealed class OperationContractAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit OperationContractAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.OperationContractAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class OperationContractAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class OperationContractAttribute sealed : Attribute" />
  <TypeSignature Language="F#" Value="type OperationContractAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.5.0.1</AssemblyVersion>
    <AssemblyVersion>4.5.0.3</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-uwp-10.0;dotnet-plat-ext-3.0">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Method)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Wskazuje, że metoda definiuje operację, która jest częścią kontraktu usługi w aplikacji Windows Communication Foundation (WCF).</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zastosuj do metody, aby wskazać, że metoda implementuje operację usługi w ramach kontraktu usługi (określony <xref:System.ServiceModel.ServiceContractAttribute> przez atrybut). <xref:System.ServiceModel.OperationContractAttribute>  
  
 <xref:System.ServiceModel.OperationContractAttribute> Użyj właściwości, aby kontrolować strukturę operacji i wartości wyrażone w metadanych:  
  
-   <xref:System.ServiceModel.OperationContractAttribute.Action%2A> Właściwość określa akcję, która jednoznacznie identyfikuje tę operację. Funkcja WCF wysyła komunikaty żądania do metod w oparciu o ich działania.  
  
-   <xref:System.ServiceModel.OperationContractAttribute.AsyncPattern%2A> Właściwość wskazuje, że operacja jest zaimplementowana lub może być wywoływana asynchronicznie przy użyciu pary metod begin/end.  
  
-   Właściwość wskazuje, <xref:System.ServiceModel.OperationContractAttribute.ProtectionLevel%2A> czy właściwość została ustawiona jawnie. <xref:System.ServiceModel.OperationContractAttribute.HasProtectionLevel%2A>  
  
-   <xref:System.ServiceModel.OperationContractAttribute.IsOneWay%2A> Właściwość wskazuje, że operacja składa się tylko z pojedynczego komunikatu wejściowego. Operacja nie ma skojarzonego komunikatu wyjściowego.  
  
-   <xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A> Właściwość określa, czy ta operacja może być operacją początkową w sesji.  
  
-   Właściwość <xref:System.ServiceModel.OperationContractAttribute.IsTerminating%2A> określa, czy funkcja WCF próbuje zakończyć bieżącą sesję po zakończeniu operacji.  
  
-   <xref:System.ServiceModel.OperationContractAttribute.ProtectionLevel%2A> Właściwość określa zabezpieczenia na poziomie komunikatów, które są wymagane przez operację w czasie wykonywania.  
  
-   <xref:System.ServiceModel.OperationContractAttribute.ReplyAction%2A> Właściwość określa akcję odpowiedzi dla operacji.  
  
 Ten <xref:System.ServiceModel.OperationContractAttribute> atrybut deklaruje, że metoda jest operacją w kontrakcie usługi. Tylko metody z <xref:System.ServiceModel.OperationContractAttribute> atrybutami są udostępniane jako operacje usługi. Kontrakt usługi bez żadnej metody oznaczonej <xref:System.ServiceModel.OperationContractAttribute> brakiem żadnych operacji.  
  
 `Begin` `End` Właściwośćwskazuje\<, że\<para *MethodName*> i MethodName > metody tworzą pojedynczą operację zaimplementowaną asynchronicznie (czy na kliencie ** <xref:System.ServiceModel.OperationContractAttribute.AsyncPattern%2A> lub usługi). Zdolność usługi do implementowania operacji asynchronicznych jest szczegółami implementacji usługi i nie jest ujawniana w metadanych (na przykład Web Services Description Language (WSDL)).  
  
 Podobnie klienci mogą wybrać opcję wywołania operacji asynchronicznie niezależnie od sposobu implementacji metody usługi. Asynchroniczne wywoływanie operacji usługi na kliencie jest zalecane, gdy metoda usługi zajmuje jakiś czas, ale musi zwrócić informacje bezpośrednio do klienta. Aby uzyskać szczegółowe informacje <xref:System.ServiceModel.OperationContractAttribute.AsyncPattern%2A>, zobacz.  
  
 <xref:System.ServiceModel.OperationContractAttribute.IsOneWay%2A> Właściwość wskazuje, że metoda nie zwraca żadnej wartości, łącznie z pustym podstawowym komunikatem odpowiedzi. Ten typ metody jest przydatny w przypadku powiadomień lub komunikacji w stylu zdarzenia. Metody tego rodzaju nie mogą zwracać komunikatu odpowiedzi, więc Deklaracja metody musi zwracać `void`wartość.  
  
> [!IMPORTANT]
>  Podczas programowego pobierania magazynu informacji w tym atrybucie Użyj <xref:System.ServiceModel.Description.ContractDescription> klasy zamiast odbicia.  
  
> [!NOTE]
>  Jeśli właściwość jest ustawiona na `false`, (wartość domyślna), nawet metody, które zwracają `void` są metodami dwukierunkowymi na podstawowym poziomie komunikatów. <xref:System.ServiceModel.OperationContractAttribute.IsOneWay%2A> W takim przypadku infrastruktura tworzy i wysyła pustą wiadomość, aby wskazać obiekt wywołujący, który zwrócił metodę. Zastosowanie tej metody umożliwia aplikacji i infrastrukturze wysyłanie informacji o błędach (takich jak błąd protokołu SOAP) z powrotem do klienta programu. Ustawienie <xref:System.ServiceModel.OperationContractAttribute.IsOneWay%2A> na`true` jest jedynym sposobem, aby zapobiec utworzeniu i wysłaniu wiadomości odpowiedzi. Aby uzyskać więcej informacji, zobacz jednokierunkowe [usługi](~/docs/framework/wcf/feature-details/one-way-services.md).  
  
 Właściwości <xref:System.ServiceModel.OperationContractAttribute.Action%2A> i<xref:System.ServiceModel.OperationContractAttribute.ReplyAction%2A> mogą być używane nie tylko do modyfikacji domyślnej akcji komunikatów protokołu SOAP, ale również do tworzenia programów obsługi dla nierozpoznanych komunikatów lub do wyłączania dodawania akcji do bezpośredniego programowania komunikatów. Użyj właściwości <xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A> , aby uniemożliwić klientom wywoływanie określonej usługi przed innymi operacjami. Użyj właściwości <xref:System.ServiceModel.OperationContractAttribute.IsTerminating%2A> , aby usługa WCF mogła zamknąć kanał, gdy klienci wywołują określoną operację usługi. Aby uzyskać więcej informacji, zobacz [Korzystanie z sesji](~/docs/framework/wcf/using-sessions.md).  
  
 <xref:System.ServiceModel.OperationContractAttribute.ProtectionLevel%2A> Właściwość umożliwia określenie kontraktu operacji niezależnie od tego, czy komunikaty operacji są podpisane, zaszyfrowane, czy podpisane i szyfrowane. Jeśli powiązanie nie może zapewnić poziomu zabezpieczeń wymaganego przez umowę, wyjątek jest zgłaszany w czasie wykonywania. Aby uzyskać więcej informacji, <xref:System.ServiceModel.OperationContractAttribute.ProtectionLevel%2A> Zobacz i [Omówienie poziomu ochrony](~/docs/framework/wcf/understanding-protection-level.md).  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje prosty kontrakt usługi z jedną operacją.  
  
 [!code-csharp[OperationContractAttribute#1](~/samples/snippets/csharp/VS_Snippets_CFX/operationcontractattribute/cs/services.cs#1)]
 [!code-vb[OperationContractAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/operationcontractattribute/vb/services.vb#1)]  
  
 Poniższy przykład to usługa implementująca niejawny kontrakt usługi, który określa trzy operacje. Dwie operacje są operacjami dwukierunkowymi, które zwracają podstawowe komunikaty odpowiedzi do obiektu wywołującego niezależnie od tego, co zwraca wartość. Trzecia operacja odbiera wywołanie, podstawowy komunikat przychodzący, ale nie zwraca podstawowego komunikatu odpowiedzi.  
  
```csharp  
[ServiceContractAttribute]  
public class OneAndTwoWay  
{  
  // The client waits until a response message appears.  
  [OperationContractAttribute]  
  public int MethodOne (int x, out int y)  
  {  
    y = 34;  
    return 0;  
  }  
  
  // The client waits until an empty response message appears.  
  [OperationContractAttribute]  
  public void MethodTwo (int x)  
  {  
    return;  
  }  
  
  // The client returns as soon as an outbound message  
  // is dispatched to the service; no response  
  // message is generated or sent from the service.  
  [OperationContractAttribute(IsOneWay=true)]  
  public void MethodThree (int x)  
  {  
    return;  
  }  
}  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OperationContractAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.OperationContractAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; OperationContractAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.ServiceModel.OperationContractAttribute" /> klasy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Action">
      <MemberSignature Language="C#" Value="public string Action { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Action" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.OperationContractAttribute.Action" />
      <MemberSignature Language="VB.NET" Value="Public Property Action As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Action { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Action : string with get, set" Usage="System.ServiceModel.OperationContractAttribute.Action" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia akcję WS-Addressing komunikatu żądania.</summary>
        <value>Akcja do użycia podczas generowania nagłówka akcji WS-Addressing.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceModel.OperationContractAttribute.Action%2A> Użyj właściwości, aby sterować akcją komunikatu wejściowego metody. Ponieważ WCF używa tej akcji do wysyłania komunikatu przychodzącego do odpowiedniej metody, komunikaty używane w ramach operacji kontraktu muszą mieć unikatowe akcje. Domyślna wartość działania to kombinacja przestrzeni nazw kontraktu (wartość domyślna to `"http://tempuri.org/"`), nazwy kontraktu (nazwy interfejsu lub klasy, jeśli nie jest używany żaden jawny interfejs usługi), nazwa operacji i dodatkowy ciąg ("odpowiedź"), jeśli komunikat jest skorelowanej odpowiedzi. Można zastąpić to ustawienie domyślne <xref:System.ServiceModel.OperationContractAttribute.Action%2A> właściwością.  
  
 Aby wskazać, że operacja usługi obsługuje wszystkie wiadomości odbierane przez usługę, ale nie może zostać skierowana do operacji usługi, określ wartość "*" (gwiazdka). Ten typ operacji, o nazwie niedopasowany program obsługi komunikatów, musi mieć jeden z następujących sygnatur metod lub <xref:System.InvalidOperationException> został zgłoszony:  
  
-   Operacja usługi może przyjmować tylko <xref:System.ServiceModel.Channels.Message> obiekt i <xref:System.ServiceModel.Channels.Message> zwracać obiekt.  
  
-   Operacja usługi może przyjmować tylko obiekt i <xref:System.ServiceModel.Channels.Message> zwracać wartość Nothing (oznacza to, że zwracana `void`jest wartość).  
  
> [!NOTE]
>  Kontrakt usługi może mieć tylko jedną operację usługi z <xref:System.ServiceModel.OperationContractAttribute.Action%2A> właściwością ustawioną na wartość "*". Każda grupa kontraktów usługi hostowana w tym samym adresie ListenUri, który implementuje Klasa usługi, może mieć wiele <xref:System.ServiceModel.OperationContractAttribute.Action%2A> operacji usługi z właściwością ustawioną <xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A> na "\*", `false`gdy właściwość jest ustawiona na. Jednak tylko jedna z tych operacji usługi może mieć <xref:System.ServiceModel.OperationContractAttribute.Action%2A> właściwość o wartości "\*", a <xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A> właściwość ma wartość true. Aby uzyskać więcej informacji, <xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A>Zobacz.  
  
   
  
## Examples  
 Poniższy przykład to usługa, która używa <xref:System.ServiceModel.OperationContractAttribute.Action%2A> właściwości i <xref:System.ServiceModel.OperationContractAttribute.ReplyAction%2A> , aby jawnie kontrolować akcje protokołu SOAP zarówno w wiadomościach wejściowych, jak i wyjściowych (lub odpowiedzi <xref:System.ServiceModel.OperationContractAttribute.Name%2A> ) oraz właściwość służąca do sterowania nazwą operacji w metadanych. Na koniec aplikacja używa <xref:System.ServiceModel.OperationContractAttribute.Action%2A> również wartości "*", aby wskazać metodę, która obsługuje nierozpoznane komunikaty.  
  
 [!code-csharp[OperationContractAttribute_Properties#1](~/samples/snippets/csharp/VS_Snippets_CFX/operationcontractattribute_properties/cs/services.cs#1)]
 [!code-vb[OperationContractAttribute_Properties#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/operationcontractattribute_properties/vb/services.vb#1)]  
  
 Usługa implementująca ten kontrakt wysyła komunikaty, które wyglądają jak w poniższym przykładzie:  
  
 [!code-csharp[OperationContractAttribute_Properties#2](~/samples/snippets/csharp/VS_Snippets_CFX/operationcontractattribute_properties/cs/services.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Wartość to <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AsyncPattern">
      <MemberSignature Language="C#" Value="public bool AsyncPattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AsyncPattern" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.OperationContractAttribute.AsyncPattern" />
      <MemberSignature Language="VB.NET" Value="Public Property AsyncPattern As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AsyncPattern { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AsyncPattern : bool with get, set" Usage="System.ServiceModel.OperationContractAttribute.AsyncPattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Wskazuje, że operacja jest zaimplementowana asynchronicznie przy <see langword="End" />użyciu&gt; &lt; <see langword="Begin" />pary metod *MethodName* i &lt; *MethodName* &gt; w kontrakcie usługi.</summary>
        <value><see langword="true" /><see langword="Begin" />Jeślimetoda&gt; ** MethodNamejest&gt; ** zgodna zmetodąMethodNameimożebyćtraktowanaprzezinfrastrukturęjakozaimplementowanąoperację<see langword="End" /> &lt; &lt; jako para metod asynchronicznych w interfejsie usługi; w przeciwnym razie. <see langword="false" /> Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceModel.OperationContractAttribute.AsyncPattern%2A> Użyj właściwości, aby skompilować operacje usługi, które mogą być wywoływana asynchronicznie na serwerze, kliencie lub obu. Właściwość informuje środowisko uruchomieniowe `Begin` , że metoda ma dopasowaną metodę, `End` która jest zgodna ze wzorcem projektu metody asynchronicznej .NET Framework. <xref:System.ServiceModel.OperationContractAttribute.AsyncPattern%2A> Kompilowanie metod asynchronicznych serwera implementujących operację usługi zwiększa skalowalność i wydajność serwera bez wpływu na klientów usługi i jest zalecane, gdy operacja usługi musi zwrócić coś do klienta po wykonaniu długotrwała operacja, którą można wykonać asynchronicznie.  
  
 Klienci pozostają bez zmian, ponieważ para metod asynchronicznych na serwerze jest szczegółami implementacji, które nie wpływają na podstawowy opis Web Services Description Language (WSDL) operacji. Takie metody są wyświetlane klientom jako pojedyncza operacja z `<input>` i `<output>` skorelowanymi komunikatami. Funkcja WCF automatycznie kieruje komunikaty przychodzące `Begin`do \< `End` \<metody *MethodName*> i kieruje wyniki wywołania *MethodName*> do wiadomości wychodzącej. Kanały klienta, w związku z tym, mogą reprezentować parę metod jako pojedynczą operację synchroniczną lub jako parę operacji asynchronicznych. W żadnym przypadku reprezentacja klienta ma wpływ na implementację asynchroniczną na serwerze w dowolny sposób.  
  
 Kontrakty klienta mogą używać <xref:System.ServiceModel.OperationContractAttribute.AsyncPattern%2A> właściwości, aby wskazać parę metod asynchronicznych, która może być używana przez klienta do asynchronicznego wywołania operacji. Zazwyczaj aplikacje klienckie używają narzędzia do tworzenia \< `/async` `Begin` [metadanych (Svcutil. exe)](~/docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md) narzędzia i opcji generowania *MethodName*> i `End` \< ** para metod methodName >, której klient może użyć do wywołania operacji asynchronicznie.  
  
> [!NOTE]
>  Jeśli operacja usługi ma zarówno asynchroniczną, jak i synchroniczną wersję, domyślne zachowanie usługi ma na celu wywołanie wersji synchronicznej.  
  
   
  
## Examples  
 Poniższy przykład kodu przedstawia kanał klienta do kontraktu usługi, który obejmuje zarówno wersję `Add` synchroniczną, jak i wersję asynchroniczną. Jeśli na kliencie jest używany interfejs kontraktu, zarówno `BeginAdd` , `Add` jak i operacja wywołuje metodę na serwerze, który może lub nie może być synchronicznie. Jeśli kontrakt jest używany do implementowania usługi, domyślnie żądania przychodzące są wysyłane do metody synchronicznej.  
  
```csharp  
[ServiceContract]  
public interface IAddTwoNumbers  
{  
    // If the asynchronous method pair  
    // appears on the client channel, the client can call   
    // them asynchronously to prevent blocking.  
    [OperationContract (AsyncPattern=true)]  
    IAsyncResult BeginAdd(int a, int b, AsyncCallback cb, AsyncState s);  
  
    [OperationContract]  
    int EndAdd(IAsyncResult r);  
  
    // This is a synchronous version of the BeginAdd/EndAdd pair.  
    // It appears in the client channel code by default.   
    [OperationContract]  
    int Add(int a, int b);  
   }  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasProtectionLevel">
      <MemberSignature Language="C#" Value="public bool HasProtectionLevel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasProtectionLevel" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.OperationContractAttribute.HasProtectionLevel" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasProtectionLevel As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasProtectionLevel { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasProtectionLevel : bool" Usage="System.ServiceModel.OperationContractAttribute.HasProtectionLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy komunikaty dla tej operacji muszą być szyfrowane, podpisane lub oba.</summary>
        <value><see langword="true" />Jeśli właściwość jest ustawiona na wartość inną niż <see cref="F:System.Net.Security.ProtectionLevel.None" />; w przeciwnym razie, <see langword="false" />. <see cref="P:System.ServiceModel.OperationContractAttribute.ProtectionLevel" /> Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj właściwości <xref:System.ServiceModel.OperationContractAttribute.HasProtectionLevel%2A> , aby określić, czy określony poziom ochrony jest wymagany przez komunikaty tej operacji.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInitiating">
      <MemberSignature Language="C#" Value="public bool IsInitiating { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInitiating" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.OperationContractAttribute.IsInitiating" />
      <MemberSignature Language="VB.NET" Value="Public Property IsInitiating As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsInitiating { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsInitiating : bool with get, set" Usage="System.ServiceModel.OperationContractAttribute.IsInitiating" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy metoda implementuje operację, która może inicjować sesję na serwerze (jeśli taka sesja istnieje).</summary>
        <value><see langword="true" />Jeśli operacja może inicjować sesję na serwerze, w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A> Właściwość określa, czy operacja może być pierwszą operacją wywoływaną podczas tworzenia sesji.  
  
> [!NOTE]
>  Wartość <xref:System.ServiceModel.ServiceContractAttribute.SessionMode%2A?displayProperty=nameWithType> musi <xref:System.ServiceModel.SessionMode.Required> być albo <xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A> lub, a w używanym powiązaniu musi być wymagane lub zezwalać na prawidłowe działanie tej właściwości. <xref:System.ServiceModel.SessionMode.Allowed>  
  
 Wartość domyślna to `true`, co oznacza, że operacja może być pierwszym z nich wywołana w kanale. Kolejne wywołania metody inicjującej nie mają wpływu, inne niż wywołanie metody. Nie są tworzone żadne inne sesje. Jeśli kontrakt nie korzysta z sesji, ustawienie <xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A> `false` jest ignorowane.  
  
 Zazwyczaj ustawia <xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A> `false` się, aby wymusić wywoływanie przez klientów innej metody w usłudze przed wywołaniem tej usługi. Na przykład jeśli usługa ma serię operacji zależnych od numeru identyfikacyjnego zamówienia, można <xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A> ustawić na `true` dla `GetOrderId` operacji usługi i ustawić wszystkie pozostałe operacje usługi na `false`. Dzięki temu każdy nowy klient uzyskuje identyfikator zamówienia przed użyciem innych metod udostępnianych przez usługę.  
  
> [!NOTE]
>  Istnieje interakcja między <xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A> <xref:System.ServiceModel.OperationContractAttribute.Action%2A> i właściwością. Kontrakt usługi może mieć tylko jedną operację usługi z <xref:System.ServiceModel.OperationContractAttribute.Action%2A> właściwością ustawioną na wartość "*". Każda grupa kontraktów usługi hostowana w ramach tego samego identyfikatora URI nasłuchiwania, który implementuje Klasa usługi, może <xref:System.ServiceModel.OperationContractAttribute.Action%2A> mieć wiele operacji usługi\*z właściwością <xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A> ustawioną na " `false`", gdy właściwość jest ustawiona na. Jednak tylko jedna z tych metod usługi może <xref:System.ServiceModel.OperationContractAttribute.Action%2A> mieć Właściwość ustawioną na "\*" i <xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A> Właściwość ustawioną na `true`.  
  
 Jeśli usługa odbierze komunikat o nieinicjującej operacji, usługa zwróci błąd protokołu SOAP ActionNotSupported. Klient środowiska to <xref:System.ServiceModel.FaultException>. Jeśli klient wywoła najpierw nieinicjującą operację, środowisko uruchomieniowe klienta wygeneruje <xref:System.InvalidOperationException?displayProperty=nameWithType>.  
  
 Aby uzyskać więcej informacji, zobacz [Korzystanie z sesji](~/docs/framework/wcf/using-sessions.md).  
  
   
  
## Examples  
 Poniższy przykład to usługa implementująca kontrakt usługi, który określa trzy metody. Usługa wymaga sesji. Jeśli wywołanie wywoływane przez wywołującego jest operacją inną niż `MethodOne`, kanał zostanie odrzucony i zostanie zgłoszony wyjątek. Gdy obiekt wywołujący inicjuje sesję przez wywołanie `MethodOne`, ten obiekt wywołujący może przerwać sesję komunikacji w dowolnym momencie, wywołując `MethodThree`polecenie. `MethodTwo`może być wywoływana dowolną liczbę razy podczas sesji.  
  
```csharp  
[ServiceContract(SessionMode=SessionMode.Required)]  
public class InitializeAndTerminateService  
{  
  [OperationContract(  
    IsOneWay=true,  
    IsInitiating=true,  
    IsTerminating=false  
  )]  
  public void MethodOne()  
  {  
    return;  
  }  
  
  [OperationContract(  
    IsInitiating=false,  
    IsTerminating=false  
  )]  
  public int MethodTwo(int x, out int y)  
  {  
    y = 34;  
    return 0;  
  }  
  
  [OperationContract(  
    IsOneWay=true,  
    IsInitiating=false,  
    IsTerminating=true  
  )]  
  public void MethodThree()  
  {  
    return;  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsOneWay">
      <MemberSignature Language="C#" Value="public bool IsOneWay { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsOneWay" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.OperationContractAttribute.IsOneWay" />
      <MemberSignature Language="VB.NET" Value="Public Property IsOneWay As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsOneWay { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsOneWay : bool with get, set" Usage="System.ServiceModel.OperationContractAttribute.IsOneWay" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy operacja zwraca komunikat odpowiedzi.</summary>
        <value><see langword="true" />Jeśli ta metoda odbiera komunikat żądania i nie zwraca komunikatu odpowiedzi; w przeciwnym razie. <see langword="false" /> Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceModel.OperationContractAttribute.IsOneWay%2A> Użyj właściwości, aby wskazać, że operacja nie zwraca komunikatu odpowiedzi. Ten typ operacji jest przydatny w przypadku powiadomień lub komunikacji w stylu zdarzenia, szczególnie w przypadku komunikacji dwukierunkowej. Bez oczekiwania na podstawowy komunikat odpowiedzi obiekty wywołujące operacji jednokierunkowych nie mają bezpośredniego sposobu na wykrycie błędu podczas przetwarzania komunikatu żądania. (Aplikacje usługi korzystające z niezawodnych kanałów i operacji jednokierunkowych mogą wykryć błąd dostarczania komunikatów na poziomie kanału. Aby uzyskać szczegółowe informacje, zobacz [Omówienie sesji](~/docs/framework/wcf/feature-details/reliable-sessions-overview.md)niezawodnych.  
  
 W dupleksowej (lub dwukierunkowej) aplikacji zorientowanych na usługę, w których klient i serwer komunikują się ze sobą niezależnie, kanał klienta może użyć <xref:System.ServiceModel.OperationContractAttribute.IsOneWay%2A> właściwości w metodach, aby wskazać, że usługa może nawiązywać jednokierunkowe wywołania do klienta, który Klient może traktować jako zdarzenia. Wywołanie zwrotne lub komunikat nie jest generowany, ponieważ usługa nie oczekuje żadnego komunikatu odpowiedzi.  
  
 Jeśli właściwość jest ustawiona na `false` (wartość domyślna), nawet metody, które zwracają `void` wynik w komunikacie odpowiedzi. <xref:System.ServiceModel.OperationContractAttribute.IsOneWay%2A> W takim przypadku infrastruktura tworzy i wysyła pustą wiadomość, aby wskazać obiekt wywołujący, który zwrócił metodę. (Użycie tego podejścia umożliwia infrastrukturze wysyłanie błędów SOAP z powrotem do klienta). Ustawienie <xref:System.ServiceModel.OperationContractAttribute.IsOneWay%2A> na`true` jest jedynym sposobem anulowania tworzenia i wysyłania komunikatu odpowiedzi.  
  
 Jednokierunkowe metody nie mogą zwracać wartości ani mieć `ref` `out` parametrów, w przeciwnym razie <xref:System.InvalidOperationException?displayProperty=nameWithType> zgłaszany jest wyjątek.  
  
 Określenie, że operacja jest operacją jednokierunkową, oznacza tylko, że nie ma komunikatu odpowiedzi. Można zablokować, jeśli nie można nawiązać połączenia, lub komunikat wychodzący jest bardzo duży lub usługa nie może szybko odczytać informacji przychodzących. Jeśli klient wymaga wywołania nieblokującego, Generuj <xref:System.ServiceModel.OperationContractAttribute.AsyncPattern%2A> operacje. Aby uzyskać więcej informacji, zobacz jednokierunkowe [usługi](~/docs/framework/wcf/feature-details/one-way-services.md) i [dostęp do usług przy użyciu klienta WCF](~/docs/framework/wcf/feature-details/accessing-services-using-a-client.md).  
  
   
  
## Examples  
 Poniższy przykład to usługa implementująca kontrakt usługi, który określa trzy operacje. Dwie metody implementują operacje dwukierunkowe, które zwracają podstawowe komunikaty odpowiedzi do obiektu wywołującego niezależnie od tego, co zwraca wartość. Trzecia metoda implementuje operację, która odbiera wywołanie (podstawowy komunikat przychodzący), ale nie zwraca podstawowego komunikatu odpowiedzi.  
  
```csharp  
[ServiceContract]  
public class OneAndTwoWay  
{  
  // The client waits until a response message appears.  
  [OperationContract]  
  public int MethodOne (int x, out int y)  
  {  
    y = 34;  
    return 0;  
  }  
  
  // The client waits until an empty response message appears.  
  [OperationContract]  
  public void MethodTwo (int x)  
  {  
    return;  
  }  
  
  // The client returns as soon as an outbound message  
  // is queued for dispatch to the service; no response  
  // message is generated or sent.  
  [OperationContract(IsOneWay=true)]  
  public void MethodThree (int x)  
  {  
    return;  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTerminating">
      <MemberSignature Language="C#" Value="public bool IsTerminating { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsTerminating" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.OperationContractAttribute.IsTerminating" />
      <MemberSignature Language="VB.NET" Value="Public Property IsTerminating As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsTerminating { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsTerminating : bool with get, set" Usage="System.ServiceModel.OperationContractAttribute.IsTerminating" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy operacja usługi powoduje, że serwer zamyka sesję po wysłaniu komunikatu odpowiedzi (jeśli istnieje).</summary>
        <value><see langword="true" />Jeśli operacja spowoduje, że serwer zamknie sesję, w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceModel.OperationContractAttribute.IsTerminating%2A> Użyj właściwości, aby wskazać, że wywołanie operacji usługi kończy sesję komunikacji.  
  
 W aplikacji klienckiej wartość <xref:System.ServiceModel.OperationContractAttribute.IsTerminating%2A> ustawioną na `true` nakazuje programowi WCF zamknięcie kanału po nadejściu odpowiedzi.  
  
 W usłudze jest ustawiany czasomierz, a kanał zostaje przerwany, jeśli klient nie zamknie kanału w tym okresie.  
  
 Aby uzyskać więcej informacji na temat używania tej właściwości z sesjami, zobacz [using Sessions](~/docs/framework/wcf/using-sessions.md).  
  
> [!NOTE]
>  Jeśli obiekt wywołujący nasłuchuje <xref:System.ServiceModel.OperationContext.OperationCompleted?displayProperty=nameWithType> zdarzenia <xref:System.ServiceModel.OperationContractAttribute.IsTerminating%2A?displayProperty=nameWithType> dla operacji, można zablokować po odebraniu odpowiedzi. Prawidłowym sposobem obsługi jest zaplanowanie pracy w innym wątku, gdy <xref:System.ServiceModel.OperationContext.OperationCompleted> jest wywoływany, a następnie natychmiast powrót z tego programu obsługi zdarzeń.  
  
   
  
## Examples  
 Poniższy przykład to usługa implementująca kontrakt usługi, który określa trzy operacje. Usługa wymaga połączenia stanowego. Jeśli wywołanie wywoływane przez wywołującego jest operacją inną niż `MethodOne`, kanał zostanie odrzucony i zostanie zgłoszony wyjątek. Gdy obiekt wywołujący inicjuje sesję przez wywołanie `MethodOne`, ten obiekt wywołujący może przerwać sesję komunikacji w dowolnym momencie, wywołując `MethodThree`polecenie. `MethodTwo`może być wywoływana dowolną liczbę razy podczas sesji.  
  
```csharp  
[ServiceContractAttribute(SessionMode=SessionMode.Required)]  
public class InitializeAndTerminateService  
{  
  [OperationContract(  
    IsOneWay=true,  
    IsInitiating=true,  
    IsTerminating=false  
  )]  
  public void MethodOne()  
  {  
    return;  
  }  
  
  [OperationContract(  
    IsInitiating=false,  
    IsTerminating=false  
  )]  
  public int MethodTwo(int x, out int y)  
  {  
    y = 34;  
    return 0;  
  }  
  
  [OperationContract(  
    IsOneWay=true,  
    IsInitiating=false  
    IsTerminating=true  
  )]  
  public void MethodThree()  
  {  
    return;  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.OperationContractAttribute.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.ServiceModel.OperationContractAttribute.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia nazwę operacji.</summary>
        <value>Nazwa operacji.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj właściwości, aby zastąpić nazwę `<operation>` elementu w języku WSDL. <xref:System.ServiceModel.OperationContractAttribute.Name%2A> Domyślna nazwa operacji to nazwa metody implementującej.  
  
   
  
## Examples  
 Poniższy przykład kodu używa <xref:System.ServiceModel.OperationContractAttribute.Name%2A> właściwości, aby zadeklarować nazwę operacji jako uwidocznioną w metadanych.  
  
 [!code-csharp[OperationContractAttribute_Properties#1](~/samples/snippets/csharp/VS_Snippets_CFX/operationcontractattribute_properties/cs/services.cs#1)]
 [!code-vb[OperationContractAttribute_Properties#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/operationcontractattribute_properties/vb/services.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><see cref="P:System.ServiceModel.OperationContractAttribute.Name" />jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Wartość jest ciągiem pustym.</exception>
      </Docs>
    </Member>
    <Member MemberName="ProtectionLevel">
      <MemberSignature Language="C#" Value="public System.Net.Security.ProtectionLevel ProtectionLevel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Net.Security.ProtectionLevel ProtectionLevel" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.OperationContractAttribute.ProtectionLevel" />
      <MemberSignature Language="VB.NET" Value="Public Property ProtectionLevel As ProtectionLevel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Security::ProtectionLevel ProtectionLevel { System::Net::Security::ProtectionLevel get(); void set(System::Net::Security::ProtectionLevel value); };" />
      <MemberSignature Language="F#" Value="member this.ProtectionLevel : System.Net.Security.ProtectionLevel with get, set" Usage="System.ServiceModel.OperationContractAttribute.ProtectionLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.Security.ProtectionLevel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość określającą, czy komunikaty operacji muszą być szyfrowane, podpisane lub oba.</summary>
        <value>Jedna z <see cref="T:System.Net.Security.ProtectionLevel" /> wartości. Wartość domyślna to <see cref="F:System.Net.Security.ProtectionLevel.None" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceModel.OperationContractAttribute.ProtectionLevel%2A> Użyj właściwości, aby określić, czy komunikaty operacji muszą być szyfrowane, podpisane lub oba. Ustawiona w tym miejscu wartość jest wartością domyślną dla wszystkich komunikatów określonych dla tej operacji, chyba że węższy zakres przesłania tę wartość.  
  
 Należy pamiętać, że zachowanie ochrony w czasie wykonywania jest kombinacją wartości poziomu ochrony ustawionych dla następujących właściwości. Te właściwości mają hierarchiczną strukturę. Ustawienie skrajnej wartości określa ustawienie domyślne dla wszystkich zakresów węższych, chyba że zostanie jawnie ustawiona inna wartość dla węższego zakresu. W takim przypadku wartość zewnętrzna pozostaje wartością domyślną dla wszystkich zakresów węższych, z wyjątkiem tego, które zostały określone.  
  
 Na przykład jeśli <xref:System.ServiceModel.ServiceContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType> jest ustawiona na <xref:System.Net.Security.ProtectionLevel.EncryptAndSign?displayProperty=nameWithType> , a żadne inne węższe zakresy nie mają ustawień poziomu ochrony, wszystkie komunikaty w kontrakcie operacji są szyfrowane i podpisane. Jeśli jednak jedna z tych operacji ma <xref:System.ServiceModel.OperationContractAttribute.ProtectionLevel%2A> <xref:System.Net.Security.ProtectionLevel.Sign?displayProperty=nameWithType>ustawioną wartość, wówczas komunikaty dla tej operacji są podpisane, ale wszystkie inne komunikaty w kontrakcie są szyfrowane i podpisane.  
  
 Aby uzyskać szczegółowe informacje o poziomach ochrony i ich założeniach i zakresach, zobacz [Opis poziomu ochrony](~/docs/framework/wcf/understanding-protection-level.md).  
  
 Zakresy, w których są ustawiane te wartości:  
  
 <xref:System.ServiceModel.ServiceContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType>  
  
 <xref:System.ServiceModel.OperationContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType>  
  
 <xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType>  
  
 <xref:System.ServiceModel.MessageContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType>  
  
 <xref:System.ServiceModel.MessageContractMemberAttribute.ProtectionLevel%2A?displayProperty=nameWithType> Właściwość w<xref:System.ServiceModel.MessageHeaderAttribute?displayProperty=nameWithType>.  
  
 <xref:System.ServiceModel.MessageContractMemberAttribute.ProtectionLevel%2A?displayProperty=nameWithType> Właściwość w<xref:System.ServiceModel.MessageBodyMemberAttribute?displayProperty=nameWithType>.  
  
 Jeśli w umowie nie określono żadnego poziomu ochrony, a powiązanie bazowe obsługuje zabezpieczenia (na poziomie transportu lub wiadomości), obowiązuje poziom ochrony dla całego kontraktu <xref:System.Net.Security.ProtectionLevel.EncryptAndSign?displayProperty=nameWithType>. Jeśli powiązanie nie obsługuje zabezpieczeń (np <xref:System.ServiceModel.BasicHttpBinding>.), <xref:System.Net.Security.ProtectionLevel.None?displayProperty=nameWithType> obowiązuje <xref:System.Net.Security.ProtectionLevel?displayProperty=nameWithType> dla całego kontraktu. Wynika to z tego, że w zależności od powiązania punktu końcowego klienci mogą wymagać innej ochrony komunikatów lub zabezpieczeń na poziomie transportu nawet wtedy, <xref:System.Net.Security.ProtectionLevel.None?displayProperty=nameWithType>gdy kontrakt określi.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Wartość nie jest jedną z <see cref="T:System.Net.Security.ProtectionLevel" /> wartości.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReplyAction">
      <MemberSignature Language="C#" Value="public string ReplyAction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ReplyAction" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.OperationContractAttribute.ReplyAction" />
      <MemberSignature Language="VB.NET" Value="Public Property ReplyAction As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ReplyAction { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ReplyAction : string with get, set" Usage="System.ServiceModel.OperationContractAttribute.ReplyAction" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość akcji protokołu SOAP dla komunikatu odpowiedzi operacji.</summary>
        <value>Wartość akcji protokołu SOAP dla wiadomości odpowiedzi.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Oprócz określania określonej wartości dla nagłówka akcji komunikatu odpowiedzi można także określić ciąg "*" (gwiazdka). Określenie gwiazdki w usłudze powoduje, że usługa WCF nie dodaje akcji odpowiedzi do wiadomości, co jest przydatne, jeśli program korzysta bezpośrednio z komunikatów. Określenie gwiazdki w aplikacji klienckiej powoduje, że usługa WCF nie sprawdza poprawności akcji odpowiedzi.  
  
   
  
## Examples  
 Poniższy przykład to usługa, która używa <xref:System.ServiceModel.OperationContractAttribute.Action%2A> właściwości i <xref:System.ServiceModel.OperationContractAttribute.ReplyAction%2A> , aby jawnie kontrolować akcje protokołu SOAP zarówno dla komunikatów wejściowych, jak i wyjściowych (lub odpowiedzi). Używa <xref:System.ServiceModel.OperationContractAttribute.Name%2A> również właściwości, aby zadeklarować nazwę operacji jako uwidocznioną w metadanych.  
  
 [!code-csharp[OperationContractAttribute_Properties#1](~/samples/snippets/csharp/VS_Snippets_CFX/operationcontractattribute_properties/cs/services.cs#1)]
 [!code-vb[OperationContractAttribute_Properties#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/operationcontractattribute_properties/vb/services.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><see cref="P:System.ServiceModel.OperationContractAttribute.ReplyAction" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
