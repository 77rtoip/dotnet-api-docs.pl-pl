<Type Name="OperationContractAttribute" FullName="System.ServiceModel.OperationContractAttribute">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="24d299999e4ff11d9e24a5dd7f0e8c01a8576bfe" />
    <Meta Name="ms.sourcegitcommit" Value="cc0c87a2e12b0fb9ba9ecdd3d4950f0572524db8" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="05/03/2018" />
    <Meta Name="ms.locfileid" Value="32694831" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class OperationContractAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit OperationContractAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.OperationContractAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class OperationContractAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class OperationContractAttribute sealed : Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Method)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Wskazuje, że metoda definiuje operację, która jest częścią kontraktu usługi w aplikacji Windows Communication Foundation (WCF).</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zastosuj <xref:System.ServiceModel.OperationContractAttribute> do metody, aby wskazać, czy metoda implementuje operację usługi jako części kontraktu usługi (określonego przez <xref:System.ServiceModel.ServiceContractAttribute> atrybutu).  
  
 Użyj <xref:System.ServiceModel.OperationContractAttribute> właściwości, aby kontrolować struktury operacji oraz wartości wyrażone w metadanych:  
  
-   <xref:System.ServiceModel.OperationContractAttribute.Action%2A> Właściwość określa akcji, który unikatowo identyfikuje tę operację. Usługi WCF komunikaty będą rozsyłane żądanie do metody oparte na ich działanie.  
  
-   <xref:System.ServiceModel.OperationContractAttribute.AsyncPattern%2A> Właściwość wskazuje, że operacja jest zaimplementowana lub może być wywołany asynchronicznie za pomocą pary metod Begin/End.  
  
-   <xref:System.ServiceModel.OperationContractAttribute.HasProtectionLevel%2A> Właściwość wskazuje, czy <xref:System.ServiceModel.OperationContractAttribute.ProtectionLevel%2A> jawnie ustaw właściwość.  
  
-   <xref:System.ServiceModel.OperationContractAttribute.IsOneWay%2A> Właściwość wskazuje, że operacja składa się tylko z jednego komunikatu wejściowego. Operacja ma żaden komunikat skojarzone dane wyjściowe.  
  
-   <xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A> Właściwość określa, czy ta operacja może być początkowej operacji w sesji.  
  
-   <xref:System.ServiceModel.OperationContractAttribute.IsTerminating%2A> Właściwość określa, czy WCF próbuje przerwanie bieżącej sesji, po zakończeniu operacji.  
  
-   <xref:System.ServiceModel.OperationContractAttribute.ProtectionLevel%2A> Właściwość określa zabezpieczenia na poziomie komunikatu operacja wymaga, aby w czasie wykonywania.  
  
-   <xref:System.ServiceModel.OperationContractAttribute.ReplyAction%2A> Właściwość określa akcji komunikatu odpowiedzi dla operacji.  
  
 <xref:System.ServiceModel.OperationContractAttribute> Atrybut deklaruje, że metoda jest operacją w kontrakcie usługi. Atrybut tylko metody <xref:System.ServiceModel.OperationContractAttribute> są widoczne jako operacji usługi. Kontraktu usługi bez żadnych metod oznaczonych <xref:System.ServiceModel.OperationContractAttribute> ujawnia żadnych operacji.  
  
 <xref:System.ServiceModel.OperationContractAttribute.AsyncPattern%2A> Właściwość wskazuje, że para `Begin` \< *methodName*> i `End` \< *methodName*> metody tworzą pojedynczej operacja implementowane asynchronicznie, (zarówno po stronie klienta lub usługi). Możliwość wdrażania asynchroniczne operacje usługi jest szczegóły implementacji usługi i nie jest widoczna w metadanych (np. sieci Web Services Description Language (WSDL)).  
  
 Podobnie klientów można wywoływać operacje asynchroniczne niezależnie od implementowania metody usługi. Asynchroniczne wywoływanie operacji usługi w klienta jest zalecane, gdy metody usługi dopiero po pewnym czasie, ale musi zwracać informacje bezpośrednio do klienta. Aby uzyskać więcej informacji, zobacz <xref:System.ServiceModel.OperationContractAttribute.AsyncPattern%2A>.  
  
 <xref:System.ServiceModel.OperationContractAttribute.IsOneWay%2A> Właściwość wskazuje, czy metoda nie zwraca żadnej wartości na wszystkich tym pusty komunikat odpowiedzi podstawowej. Ten typ metody jest przydatne w przypadku powiadomień lub komunikacji typu zdarzenia. Metody tego typu nie mogą zwracać komunikat odpowiedzi, więc deklaracji metody musi zwracać `void`.  
  
> [!IMPORTANT]
>  Podczas pobierania programowo Magazyn informacji w tym atrybucie, użyj <xref:System.ServiceModel.Description.ContractDescription> klasy zamiast odbicia.  
  
> [!NOTE]
>  Jeśli <xref:System.ServiceModel.OperationContractAttribute.IsOneWay%2A> właściwość jest ustawiona na `false`, (ustawienie domyślne), nawet metody, które zwracają `void` metodami dwukierunkowe na poziomie podstawowym wiadomości. W takim przypadku infrastruktury tworzy i wysyła komunikat puste, aby powiadomić wywołującego zwróciła metodę. Przy użyciu tej metody umożliwia aplikacji i infrastruktury do odesłania do klienta informacje o błędzie (na przykład błąd protokołu SOAP). Ustawienie <xref:System.ServiceModel.OperationContractAttribute.IsOneWay%2A> do `true` jest jedynym sposobem, aby uniknąć tworzenia i wysyłania komunikatu odpowiedzi. Aby uzyskać więcej informacji, zobacz [usług One-Way](~/docs/framework/wcf/feature-details/one-way-services.md).  
  
 <xref:System.ServiceModel.OperationContractAttribute.Action%2A> i <xref:System.ServiceModel.OperationContractAttribute.ReplyAction%2A> właściwości mogą być używane nie tylko do modyfikowania domyślne działanie wiadomości SOAP, ale także do tworzenia programy obsługi komunikatów nierozpoznany lub Wyłącz dodawanie akcji do komunikatów bezpośrednich programowania. Użyj <xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A> właściwości, aby uniemożliwić klientom wywoływanie operacji usługi określonego przed innymi operacjami. Użyj <xref:System.ServiceModel.OperationContractAttribute.IsTerminating%2A> właściwości, aby zamknąć kanał po klientów wywołaj operację określonej usługi WCF. Aby uzyskać więcej informacji, zobacz [sesji przy użyciu](~/docs/framework/wcf/using-sessions.md).  
  
 <xref:System.ServiceModel.OperationContractAttribute.ProtectionLevel%2A> Właściwości można określić na kontrakt operacji, czy komunikaty operacji są podpisane, szyfrowane, lub podpisane i zaszyfrowane. Jeśli powiązanie nie może dostarczyć poziom zabezpieczeń wymagane przez umowy, zwracany jest wyjątek w czasie wykonywania. Aby uzyskać więcej informacji, zobacz <xref:System.ServiceModel.OperationContractAttribute.ProtectionLevel%2A> i [poziom ochrony opis](~/docs/framework/wcf/understanding-protection-level.md).  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje kontrakt usługi simple z jednej operacji.  
  
 [!code-csharp[OperationContractAttribute#1](~/samples/snippets/csharp/VS_Snippets_CFX/operationcontractattribute/cs/services.cs#1)]
 [!code-vb[OperationContractAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/operationcontractattribute/vb/services.vb#1)]  
  
 Poniższy przykład jest to usługa, która implementuje kontraktu usługi niejawne, który określa trzy operacje. Dwóch operacji są dwukierunkowe działań, które zwraca podstawowej wiadomości odpowiedzi do wywołującego niezależnie od tego, co to jest zwracana wartość. Operacja trzeci odbiera połączenie, wiadomości przychodzącej podstawowej, ale zwraca komunikat odpowiedzi nie podstawowej.  
  
```csharp  
[ServiceContractAttribute]  
public class OneAndTwoWay  
{  
  // The client waits until a response message appears.  
  [OperationContractAttribute]  
  public int MethodOne (int x, out int y)  
  {  
    y = 34;  
    return 0;  
  }  
  
  // The client waits until an empty response message appears.  
  [OperationContractAttribute]  
  public void MethodTwo (int x)  
  {  
    return;  
  }  
  
  // The client returns as soon as an outbound message  
  // is dispatched to the service; no response  
  // message is generated or sent from the service.  
  [OperationContractAttribute(IsOneWay=true)]  
  public void MethodThree (int x)  
  {  
    return;  
  }  
}  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OperationContractAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.OperationContractAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; OperationContractAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.ServiceModel.OperationContractAttribute" /> klasy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Action">
      <MemberSignature Language="C#" Value="public string Action { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Action" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.OperationContractAttribute.Action" />
      <MemberSignature Language="VB.NET" Value="Public Property Action As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Action { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia akcję WS-Addressing komunikatu żądania.</summary>
        <value>Akcję do użycia podczas generowania nagłówka akcji WS-Addressing.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.ServiceModel.OperationContractAttribute.Action%2A> właściwość, aby kontrolować działań metody wejściowych wiadomości. Ponieważ WCF używa tej akcji do wysyłania wiadomości przychodzących do odpowiedniej metody, wiadomości używane w ramach operacji kontraktu musi mieć unikatowy akcje. Wartość domyślna akcja to kombinacja przestrzeni nazw kontraktu (wartość domyślna to "http://tempuri.org/"), Nazwa kontraktu (nazwa interfejsu lub nazwy klasy, jeśli jest używana bez interfejsu jawnego service), nazwa operacji i dodatkowy ciąg ("odpowiedź") Jeśli komunikat jest skorelowany odpowiedzi. Można zastąpić to ustawienie domyślne z <xref:System.ServiceModel.OperationContractAttribute.Action%2A> właściwości.  
  
 Aby wskazać, że operacji usługi obsługuje wszystkie komunikaty, które usługa odbiera, ale nie może zostać skierowany do operacji usługi, określ wartość "*" (gwiazdkę). Ten typ operacji wywołuje program obsługi komunikatów niedopasowane, musi mieć jeden z następującego sygnaturami metod lub <xref:System.InvalidOperationException> jest zgłaszany:  
  
-   Operacja usługi może potrwać tylko <xref:System.ServiceModel.Channels.Message> obiektu i zwraca <xref:System.ServiceModel.Channels.Message> obiektu.  
  
-   Operacja usługi może potrwać tylko <xref:System.ServiceModel.Channels.Message> obiektu i zwraca nothing (oznacza to, zwróć `void`).  
  
> [!NOTE]
>  Kontrakt usługi może mieć tylko jedną operację usługi o <xref:System.ServiceModel.OperationContractAttribute.Action%2A> właściwości jest równa "*". Każda Grupa kontraktów usług hostowanych na ten sam identyfikator listenUri, która implementuje klasy usługi może mieć wiele operacji usługi z <xref:System.ServiceModel.OperationContractAttribute.Action%2A> ustawioną właściwość "\*" gdy <xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A> właściwość jest ustawiona na `false`. Jednak może mieć tylko jeden z tych operacji usługi <xref:System.ServiceModel.OperationContractAttribute.Action%2A> ustawioną właściwość "\*" i <xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A> właściwością o wartości true. Aby uzyskać więcej informacji, zobacz <xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A>.  
  
   
  
## Examples  
 Poniższy przykład to usługa, która używa <xref:System.ServiceModel.OperationContractAttribute.Action%2A> i <xref:System.ServiceModel.OperationContractAttribute.ReplyAction%2A> właściwości, aby jawnie kontrolowanie akcji SOAP obu danych wejściowych i wyjściowych (lub odpowiedzi) komunikatów i <xref:System.ServiceModel.OperationContractAttribute.Name%2A> właściwości do kontrolowania Nazwa operacji w metadanych. Ponadto aplikacja używa również <xref:System.ServiceModel.OperationContractAttribute.Action%2A> wartość "*" wskaż metodę, która obsługuje nierozpoznany wiadomości.  
  
 [!code-csharp[OperationContractAttribute_Properties#1](~/samples/snippets/csharp/VS_Snippets_CFX/operationcontractattribute_properties/cs/services.cs#1)]
 [!code-vb[OperationContractAttribute_Properties#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/operationcontractattribute_properties/vb/services.vb#1)]  
  
 Usługa, która implementuje tego kontraktu wysyła komunikaty, które wyglądają jak w następującym przykładzie:  
  
 [!code-csharp[OperationContractAttribute_Properties#2](~/samples/snippets/csharp/VS_Snippets_CFX/operationcontractattribute_properties/cs/services.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Wartość jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AsyncPattern">
      <MemberSignature Language="C#" Value="public bool AsyncPattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AsyncPattern" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.OperationContractAttribute.AsyncPattern" />
      <MemberSignature Language="VB.NET" Value="Public Property AsyncPattern As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AsyncPattern { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Wskazuje, że operacja jest zaimplementowana asynchronicznie za pomocą <see langword="Begin" /> &lt; *methodName* &gt; i <see langword="End" /> &lt; *methodName* &gt; pary metod w kontrakcie usługi.</summary>
        <value>
          <see langword="true" /> Jeśli <see langword="Begin" /> &lt; *methodName*&gt;metody jest uwzględniony przez <see langword="End" /> &lt; *methodName* &gt; — metoda i może być traktowana przez Infrastruktura jako operację, która jest zaimplementowany jako pary metod asynchronicznych w interfejsie usługi; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.ServiceModel.OperationContractAttribute.AsyncPattern%2A> właściwości do utworzenia operacji usługi, które mogą być wywoływane asynchronicznie na serwerze, kliencie lub obu. <xref:System.ServiceModel.OperationContractAttribute.AsyncPattern%2A> Właściwości środowisko uruchomieniowe informuje o tym że `Begin` metoda ma dopasowywany `End` metodę, która odpowiada wzorca projektowego metod asynchronicznych .NET Framework. Tworzenie serwera metod asynchronicznych, które implementuje operację usługi zwiększa wydajność i skalowalność serwera bez wpływu na klientach usługi i jest zalecana w przypadku operacji usługi musi zwracać coś do klienta po wykonaniu długotrwałej operacji, które mogą być wykonywane asynchronicznie.  
  
 Klienci pozostaną niezmienione, ponieważ nie ma wpływu na podstawowe opisu usługi sieci Web Services Description Language (WSDL) operacji szczegółów implementacji jest pary metod asynchronicznych na serwerze. Takie metody widoczny dla klientów jako jednej operacji z `<input>` i skorelowane `<output>` wiadomości. WCF automatycznie rozsyła wiadomości przychodzących `Begin` \< *methodName*> Metoda i kieruje wyniki `End` \< *methodName*> wywołania komunikat wychodzący. Kanały klienta, w związku z tym może reprezentować pary metod jako albo jednej operacji synchronicznych lub parę operację asynchroniczną. W żadnym przypadku reprezentacji klienta wpływa na asynchroniczne wykonania na serwerze w dowolny sposób.  
  
 Kontrakty klienta można użyć <xref:System.ServiceModel.OperationContractAttribute.AsyncPattern%2A> Właściwość wskazująca pary metod asynchronicznych używanego przez klienta do wywołania operacji asynchronicznie. Zwykle użyć, aplikacje klienckie [narzędzie narzędzia metadanych elementu ServiceModel (Svcutil.exe)](~/docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md) narzędzia i `/async` opcję, aby wygenerować `Begin` \< *methodName*> i `End` \< *methodName*> pary metod, który klient może używać do asynchronicznego wywołania operacji.  
  
> [!NOTE]
>  Jeśli operacji usługi ma asynchroniczne i synchroniczne wersji, domyślne zachowanie usługi jest to wersja synchroniczna wywołania.  
  
   
  
## Examples  
 Poniższy przykładowy kod przedstawia kanał klienta służący do umowy serwisowej, która obejmuje zarówno synchroniczne wersji systemu `Add` i wersja asynchroniczna. Użycie interfejsu kontraktu na kliencie, zarówno `BeginAdd` i `Add` metody na serwerze, który może lub nie może być synchroniczne wywołanie operacji. Jeśli kontrakt jest używany do wdrażania usługi, wartość domyślna to, czy żądania przychodzące są wysyłane do metoda synchroniczna.  
  
```csharp  
[ServiceContract]  
public interface IAddTwoNumbers  
{  
    // If the asynchronous method pair  
    // appears on the client channel, the client can call   
    // them asynchronously to prevent blocking.  
    [OperationContract (AsyncPattern=true)]  
    IAsyncResult BeginAdd(int a, int b, AsyncCallback cb, AsyncState s);  
  
    [OperationContract]  
    int EndAdd(IAsyncResult r);  
  
    // This is a synchronous version of the BeginAdd/EndAdd pair.  
    // It appears in the client channel code by default.   
    [OperationContract]  
    int Add(int a, int b);  
   }  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasProtectionLevel">
      <MemberSignature Language="C#" Value="public bool HasProtectionLevel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasProtectionLevel" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.OperationContractAttribute.HasProtectionLevel" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasProtectionLevel As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasProtectionLevel { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy komunikaty dla tej operacji musi być zaszyfrowany, podpisany, lub obie.</summary>
        <value>
          <see langword="true" /> Jeśli <see cref="P:System.ServiceModel.OperationContractAttribute.ProtectionLevel" /> wartość właściwości jest równa wartości innych niż <see cref="F:System.Net.Security.ProtectionLevel.None" />; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.ServiceModel.OperationContractAttribute.HasProtectionLevel%2A> właściwości w celu określenia, czy poziom ochrony określonych jest wymagane przez komunikaty o tej operacji.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInitiating">
      <MemberSignature Language="C#" Value="public bool IsInitiating { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInitiating" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.OperationContractAttribute.IsInitiating" />
      <MemberSignature Language="VB.NET" Value="Public Property IsInitiating As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsInitiating { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy metoda implementuje operację umożliwiającą inicjację sesji na serwerze (jeśli istnieje sesji programu).</summary>
        <value>
          <see langword="true" /> Jeśli operacja jest dozwolona w zainicjowaniu sesji na serwerze, w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A> Właściwość określa, czy operacja może być pierwszą operacją wywoływana podczas tworzenia sesji.  
  
> [!NOTE]
>  Wartość <xref:System.ServiceModel.ServiceContractAttribute.SessionMode%2A?displayProperty=nameWithType> musi być równa albo <xref:System.ServiceModel.SessionMode.Allowed> lub <xref:System.ServiceModel.SessionMode.Required> i powiązania używanego musi wymagać lub zezwolić sesji dla <xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A> właściwości działała poprawnie.  
  
 Wartość domyślna to `true`, co oznacza, że operacja może być pierwszą wywołano kanału. Kolejne wywołania metody inicjujący nie mają wpływu, inne niż do wywoływania metody. Nie innych sesji są tworzone. Jeśli kontrakt nie oznacza, że korzystanie z sesji, ustawienie <xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A> do `false` jest ignorowana.  
  
 Zwykle ustawić <xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A> do `false` wymusić klientom wywoływać innej metody w usłudze przed ich można wywołać tego. Na przykład, jeśli usługa ma czynności, które są zależne od Identyfikatora zamówienia, można ustawić <xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A> do `true` dla `GetOrderId` operacji usługi i ustawić wszystkie pozostałe operacje usług `false`. Dzięki temu, że każdego nowego klienta uzyskuje identyfikator zamówienia przed przy użyciu innych metod udostępnianych przez usługę.  
  
> [!NOTE]
>  Brak interakcji między <xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A> i <xref:System.ServiceModel.OperationContractAttribute.Action%2A> właściwości. Kontrakt usługi może mieć tylko jedną operację usługi o <xref:System.ServiceModel.OperationContractAttribute.Action%2A> właściwości jest równa "*". Każda Grupa kontraktów usług hostowanych na tym samym nasłuchiwania URI, który implementuje klasy usługi może mieć wiele operacji usługi z <xref:System.ServiceModel.OperationContractAttribute.Action%2A> ustawioną właściwość "\*" gdy <xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A> właściwość jest ustawiona na `false`. Jednak może mieć tylko jeden z tych metod usługi <xref:System.ServiceModel.OperationContractAttribute.Action%2A> ustawioną właściwość "\*" i <xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A> ustawioną właściwość `true`.  
  
 Jeśli usługa odbiera wiadomości-Inicjowanie operacji, usługa zwraca błąd ActionNotSupported protokołu SOAP. Klient napotyka jako <xref:System.ServiceModel.FaultException>. Jeśli klient wywołuje operację — inicjowanie najpierw, środowiska uruchomieniowego klienta zgłasza <xref:System.InvalidOperationException?displayProperty=nameWithType>.  
  
 Aby uzyskać więcej informacji, zobacz [sesji przy użyciu](~/docs/framework/wcf/using-sessions.md).  
  
   
  
## Examples  
 Poniższy przykład jest to usługa, która implementuje kontraktu usługi, która określa trzy metody. Usługa wymaga sesji. Jeśli obiekt wywołujący pierwsze wywołanie do żadnej operacji innych niż `MethodOne`, kanału zostało odrzucone i jest zgłaszany wyjątek. Gdy obiekt wywołujący inicjuje sesję przez wywołanie metody `MethodOne`, ten obiekt wywołujący może zakończyć sesję komunikacji w dowolnym momencie przez wywołanie metody `MethodThree`. `MethodTwo` można wywołać dowolną liczbę razy podczas sesji.  
  
```csharp  
[ServiceContract(SessionMode=SessionMode.Required)]  
public class InitializeAndTerminateService  
{  
  [OperationContract(  
    IsOneWay=true,  
    IsInitiating=true,  
    IsTerminating=false  
  )]  
  public void MethodOne()  
  {  
    return;  
  }  
  
  [OperationContract(  
    IsInitiating=false,  
    IsTerminating=false  
  )]  
  public int MethodTwo(int x, out int y)  
  {  
    y = 34;  
    return 0;  
  }  
  
  [OperationContract(  
    IsOneWay=true,  
    IsInitiating=false,  
    IsTerminating=true  
  )]  
  public void MethodThree()  
  {  
    return;  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsOneWay">
      <MemberSignature Language="C#" Value="public bool IsOneWay { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsOneWay" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.OperationContractAttribute.IsOneWay" />
      <MemberSignature Language="VB.NET" Value="Public Property IsOneWay As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsOneWay { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy operacja zwraca komunikat odpowiedzi.</summary>
        <value>
          <see langword="true" /> Jeśli ta metoda odbiera komunikat żądania i zwraca żaden komunikat odpowiedzi; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.ServiceModel.OperationContractAttribute.IsOneWay%2A> Właściwość wskazująca, czy operacja zwraca komunikat odpowiedzi. Ten typ operacji jest przydatne w przypadku powiadomień lub komunikacji typu zdarzenia, szczególnie w dwukierunkowej komunikacji. Bez oczekiwania na podstawowym komunikat odpowiedzi, wywoływania operacji jednokierunkowych nie ma bezpośredniego możliwości wykrywania awarii podczas przetwarzania komunikatu żądania. (Aplikacji usługi, które używają niezawodnych kanałów i operacji jednokierunkowych pozwala na wykrycie awarii dostarczania wiadomości na poziomie kanału. Aby uzyskać więcej informacji, zobacz [omówienie sesji niezawodnych](~/docs/framework/wcf/feature-details/reliable-sessions-overview.md).)  
  
 W dupleksu (lub dwukierunkowe) zorientowane na usługę aplikacje w których klient i serwer komunikują się ze sobą niezależnie, można użyć kanału klienta <xref:System.ServiceModel.OperationContractAttribute.IsOneWay%2A> właściwości na jego metody, aby wskazać, że usługa może wywołań jednokierunkowe klientowi który klienta można traktować jako zdarzenia. Nie wywołanie zwrotne lub wiadomości jest generowany, ponieważ usługa nie oczekuje żadnych komunikat odpowiedzi.  
  
 Jeśli <xref:System.ServiceModel.OperationContractAttribute.IsOneWay%2A> właściwość jest ustawiona na `false` (ustawienie domyślne), nawet metody, które zwracają `void` spowodować komunikatu odpowiedzi. W takim przypadku infrastruktury tworzy i wysyła komunikat puste, aby powiadomić wywołującego zwróciła metodę. (Przy użyciu tej metody umożliwia infrastruktury do odesłania do klienta błędach SOAP). Ustawienie <xref:System.ServiceModel.OperationContractAttribute.IsOneWay%2A> do `true` jest jedynym sposobem na anulowanie tworzenia i wysyłania komunikatu odpowiedzi.  
  
 Metody jednokierunkowe nie musi zwracać wartość lub mieć `ref` lub `out` parametrów; w przeciwnym razie <xref:System.InvalidOperationException?displayProperty=nameWithType> wyjątku.  
  
 Określanie, czy operacja jest Operacja jednokierunkowa oznacza tylko, że nie ma odpowiedzi. Prawdopodobnie do bloku, jeśli nie można nawiązać połączenia lub wiadomości wychodzącej jest bardzo duży, czy usługi nie można odczytać informacji dla ruchu przychodzącego tyle szybko. Jeśli klient wymaga nieblokujące wywołania, generowanie <xref:System.ServiceModel.OperationContractAttribute.AsyncPattern%2A> operacji. Aby uzyskać więcej informacji, zobacz [usług One-Way](~/docs/framework/wcf/feature-details/one-way-services.md) i [dostęp do usług za pomocą klienta WCF](~/docs/framework/wcf/feature-details/accessing-services-using-a-client.md).  
  
   
  
## Examples  
 Poniższy przykład jest to usługa, która implementuje kontraktu usługi, która określa trzy operacje. Implementuje dwóch metod dwukierunkowe działań, które zwraca podstawowej wiadomości odpowiedzi do wywołującego niezależnie od tego, co to jest zwracana wartość. Trzeci metoda implementuje operację, która odbiera połączenie (podstawowe wiadomości przychodzącej), ale zwraca komunikat odpowiedzi nie podstawowej.  
  
```csharp  
[ServiceContract]  
public class OneAndTwoWay  
{  
  // The client waits until a response message appears.  
  [OperationContract]  
  public int MethodOne (int x, out int y)  
  {  
    y = 34;  
    return 0;  
  }  
  
  // The client waits until an empty response message appears.  
  [OperationContract]  
  public void MethodTwo (int x)  
  {  
    return;  
  }  
  
  // The client returns as soon as an outbound message  
  // is queued for dispatch to the service; no response  
  // message is generated or sent.  
  [OperationContract(IsOneWay=true)]  
  public void MethodThree (int x)  
  {  
    return;  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTerminating">
      <MemberSignature Language="C#" Value="public bool IsTerminating { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsTerminating" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.OperationContractAttribute.IsTerminating" />
      <MemberSignature Language="VB.NET" Value="Public Property IsTerminating As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsTerminating { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy operacji usługi powoduje serwer Zamknij sesję po komunikat odpowiedzi, jeśli istnieje, jest wysyłane.</summary>
        <value>
          <see langword="true" /> Jeśli operacja powoduje, że serwer zamknąć sesji, w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.ServiceModel.OperationContractAttribute.IsTerminating%2A> właściwości, aby wskazać, że wywoływanie operacji usługi kończy się sesja komunikacji.  
  
 W aplikacji klienta, wartość <xref:System.ServiceModel.OperationContractAttribute.IsTerminating%2A> ustawioną `true` nakazuje WCF zamknięcia kanału po odebraniu odpowiedzi.  
  
 W usłudze czasomierz jest ustawiona, i kanału przerywa, jeśli klient nie zamyka kanał w tym okresie.  
  
 Aby uzyskać więcej informacji o korzystaniu z tej właściwości z sesji, zobacz [sesji przy użyciu](~/docs/framework/wcf/using-sessions.md).  
  
> [!NOTE]
>  Jeśli obiekt wywołujący nasłuchuje <xref:System.ServiceModel.OperationContext.OperationCompleted?displayProperty=nameWithType> zdarzenia dla <xref:System.ServiceModel.OperationContractAttribute.IsTerminating%2A?displayProperty=nameWithType> operacji, możliwe jest blok po odebraniu odpowiedzi. Odpowiednie sposobem obsługi to jest harmonogramu pracy na innym wątku, gdy <xref:System.ServiceModel.OperationContext.OperationCompleted> jest zostaje zgłoszone, a następnie natychmiast zwrócone z tej obsługi zdarzeń.  
  
   
  
## Examples  
 Poniższy przykład jest to usługa, która implementuje kontraktu usługi, która określa trzy operacje. Usługa wymaga stanowych połączeń. Jeśli obiekt wywołujący pierwsze wywołanie do żadnej operacji innych niż `MethodOne`, kanału zostało odrzucone i jest zgłaszany wyjątek. Gdy obiekt wywołujący inicjuje sesję przez wywołanie metody `MethodOne`, ten obiekt wywołujący może zakończyć sesję komunikacji w dowolnym momencie przez wywołanie metody `MethodThree`. `MethodTwo` można wywołać dowolną liczbę razy podczas sesji.  
  
```csharp  
[ServiceContractAttribute(SessionMode=SessionMode.Required)]  
public class InitializeAndTerminateService  
{  
  [OperationContract(  
    IsOneWay=true,  
    IsInitiating=true,  
    IsTerminating=false  
  )]  
  public void MethodOne()  
  {  
    return;  
  }  
  
  [OperationContract(  
    IsInitiating=false,  
    IsTerminating=false  
  )]  
  public int MethodTwo(int x, out int y)  
  {  
    y = 34;  
    return 0;  
  }  
  
  [OperationContract(  
    IsOneWay=true,  
    IsInitiating=false  
    IsTerminating=true  
  )]  
  public void MethodThree()  
  {  
    return;  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.OperationContractAttribute.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia nazwę operacji.</summary>
        <value>Nazwa operacji.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.ServiceModel.OperationContractAttribute.Name%2A> właściwość, aby pominąć <`operation`> Nazwa elementu w języku WSDL. Domyślna nazwa operacji to nazwa implementującej metody.  
  
   
  
## Examples  
 Poniższy przykład kodu wykorzystuje <xref:System.ServiceModel.OperationContractAttribute.Name%2A> właściwości, aby zadeklarować Nazwa operacji zgodnie z ujawniony w metadanych.  
  
 [!code-csharp[OperationContractAttribute_Properties#1](~/samples/snippets/csharp/VS_Snippets_CFX/operationcontractattribute_properties/cs/services.cs#1)]
 [!code-vb[OperationContractAttribute_Properties#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/operationcontractattribute_properties/vb/services.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <see cref="P:System.ServiceModel.OperationContractAttribute.Name" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Wartość jest ciągiem pustym.</exception>
      </Docs>
    </Member>
    <Member MemberName="ProtectionLevel">
      <MemberSignature Language="C#" Value="public System.Net.Security.ProtectionLevel ProtectionLevel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Net.Security.ProtectionLevel ProtectionLevel" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.OperationContractAttribute.ProtectionLevel" />
      <MemberSignature Language="VB.NET" Value="Public Property ProtectionLevel As ProtectionLevel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Security::ProtectionLevel ProtectionLevel { System::Net::Security::ProtectionLevel get(); void set(System::Net::Security::ProtectionLevel value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Security.ProtectionLevel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość określającą, czy komunikaty operacji musi być zaszyfrowany, podpisany, lub obie.</summary>
        <value>Jeden z <see cref="T:System.Net.Security.ProtectionLevel" /> wartości. Wartość domyślna to <see cref="F:System.Net.Security.ProtectionLevel.None" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.ServiceModel.OperationContractAttribute.ProtectionLevel%2A> właściwości do kontrolowania, czy komunikaty operacji musi być zaszyfrowany, podpisany, lub obie. W tym miejscu wartość jest wartością domyślną dla wszystkich wiadomości określonych dla tej operacji, chyba że ta wartość zastępuje węższego zakresu.  
  
 Należy pamiętać, że zachowania ochrony w czasie wykonywania jest kombinacja wartości poziomu ochrony na następujących właściwości. Te właściwości mają strukturę hierarchiczną. Ustawienie wartości peryferyjnych ustanawia ustawieniem domyślnym dla wszystkich zakresów mniejszą niż, chyba że jawnie ustawiono inną wartość mniejszą niż zakres. W takim przypadku wartość zewnętrzne pozostaje domyślnego dla wszystkich mniejszą niż zakresów z wyjątkiem obsługującej ustawione.  
  
 Na przykład jeśli <xref:System.ServiceModel.ServiceContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType> ustawiono <xref:System.Net.Security.ProtectionLevel.EncryptAndSign?displayProperty=nameWithType> i nie mniejszą niż zakresy mają ustawienia poziomu ochrony, wszystkie wiadomości w kontrakt operacji są zaszyfrowana i podpisana. Jeśli jednak jeden z tych działań ma <xref:System.ServiceModel.OperationContractAttribute.ProtectionLevel%2A> ustawioną <xref:System.Net.Security.ProtectionLevel.Sign?displayProperty=nameWithType>, następnie komunikatów dla tej operacji jest zarejestrowany, ale wszystkie inne komunikaty w kontrakcie są zaszyfrowana i podpisana.  
  
 Aby uzyskać więcej informacji dotyczących poziomów ochrony i założenia i zakresy, zobacz [poziom ochrony opis](~/docs/framework/wcf/understanding-protection-level.md).  
  
 Zakresy, w których te wartości są ustawiane są:  
  
 <xref:System.ServiceModel.ServiceContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType>  
  
 <xref:System.ServiceModel.OperationContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType>  
  
 <xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType>  
  
 <xref:System.ServiceModel.MessageContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType>  
  
 <xref:System.ServiceModel.MessageContractMemberAttribute.ProtectionLevel%2A?displayProperty=nameWithType> Właściwość <xref:System.ServiceModel.MessageHeaderAttribute?displayProperty=nameWithType>.  
  
 <xref:System.ServiceModel.MessageContractMemberAttribute.ProtectionLevel%2A?displayProperty=nameWithType> Właściwość <xref:System.ServiceModel.MessageBodyMemberAttribute?displayProperty=nameWithType>.  
  
 Gdy nie poziomu ochrony, nie jawnie określone w umowie a podstawowej powiązanie obsługuje zabezpieczeń, (zarówno na poziomie transportu lub komunikat), poziom skutecznej ochrony dla całej umowy jest <xref:System.Net.Security.ProtectionLevel.EncryptAndSign?displayProperty=nameWithType>. Jeśli powiązanie nie obsługuje zabezpieczeń (takich jak <xref:System.ServiceModel.BasicHttpBinding>), obowiązującą <xref:System.Net.Security.ProtectionLevel?displayProperty=nameWithType> jest <xref:System.Net.Security.ProtectionLevel.None?displayProperty=nameWithType> dla całej umowy. Wynik jest, w zależności od powiązanie punktu końcowego, klienci mogą wymagają różnych ochrony zabezpieczeń na poziomie komunikatu i transportu, nawet wtedy, gdy kontrakt Określa <xref:System.Net.Security.ProtectionLevel.None?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Wartość nie jest jednym z <see cref="T:System.Net.Security.ProtectionLevel" /> wartości.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReplyAction">
      <MemberSignature Language="C#" Value="public string ReplyAction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ReplyAction" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.OperationContractAttribute.ReplyAction" />
      <MemberSignature Language="VB.NET" Value="Public Property ReplyAction As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ReplyAction { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość akcji SOAP dla komunikatu odpowiedzi operacji.</summary>
        <value>Wartość akcji SOAP dla komunikatu odpowiedzi.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Oprócz określenia wartości określonej dla nagłówka action komunikatu odpowiedzi, można również określić ciąg "*" (gwiazdkę). Wpisz znak gwiazdki w usłudze nakazuje WCF nie, aby dodać akcję odpowiedzi na wiadomość, co jest przydatne, jeśli użytkownik są Programowanie w odniesieniu do wiadomości bezpośrednio. Wpisz znak gwiazdki w aplikacji klienckiej nakazuje WCF nie, aby sprawdzić poprawność akcji odpowiedzi.  
  
   
  
## Examples  
 Poniższy przykład to usługa, która używa <xref:System.ServiceModel.OperationContractAttribute.Action%2A> i <xref:System.ServiceModel.OperationContractAttribute.ReplyAction%2A> właściwości, aby jawnie kontrolowanie akcji SOAP komunikatów danych wejściowych i wyjściowych (lub odpowiedzi). Ponadto użyto <xref:System.ServiceModel.OperationContractAttribute.Name%2A> właściwości, aby zadeklarować Nazwa operacji zgodnie z ujawniony w metadanych.  
  
 [!code-csharp[OperationContractAttribute_Properties#1](~/samples/snippets/csharp/VS_Snippets_CFX/operationcontractattribute_properties/cs/services.cs#1)]
 [!code-vb[OperationContractAttribute_Properties#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/operationcontractattribute_properties/vb/services.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <see cref="P:System.ServiceModel.OperationContractAttribute.ReplyAction" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>