<Type Name="OperationContractAttribute" FullName="System.ServiceModel.OperationContractAttribute">
  <Metadata><Meta Name="ms.openlocfilehash" Value="584da6f8b7e39199bf3d1b5b9dbb26e1e7a3d504" /><Meta Name="ms.sourcegitcommit" Value="6b9d64332f31de312efea785fbb19e4d80f544d5" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="06/12/2019" /><Meta Name="ms.locfileid" Value="67027331" /></Metadata><TypeSignature Language="C#" Value="public sealed class OperationContractAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit OperationContractAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.OperationContractAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class OperationContractAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class OperationContractAttribute sealed : Attribute" />
  <TypeSignature Language="F#" Value="type OperationContractAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.5.0.1</AssemblyVersion>
    <AssemblyVersion>4.5.0.3</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-uwp-10.0;dotnet-plat-ext-3.0">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Method)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Wskazuje, że metoda definiuje operacją, która jest częścią kontraktu usługi w aplikacji Windows Communication Foundation (WCF).</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zastosuj <xref:System.ServiceModel.OperationContractAttribute> do metody, aby wskazać, że metoda implementuje operację usługi w ramach kontraktu usługi (określony przez <xref:System.ServiceModel.ServiceContractAttribute> atrybutu).  
  
 Użyj <xref:System.ServiceModel.OperationContractAttribute> właściwości w celu kontrolowania struktury operacji oraz wartości wyrażone w metadanych:  
  
-   <xref:System.ServiceModel.OperationContractAttribute.Action%2A> Właściwości określa akcję, która jednoznacznie identyfikuje tę operację. Usługi WCF komunikaty będą rozsyłane żądanie do metody oparte na ich działanie.  
  
-   <xref:System.ServiceModel.OperationContractAttribute.AsyncPattern%2A> Właściwość wskazuje, że operacja jest zaimplementowana lub może być wywoływana asynchronicznie przy użyciu pary metoda początek/koniec.  
  
-   <xref:System.ServiceModel.OperationContractAttribute.HasProtectionLevel%2A> Właściwość wskazuje, czy <xref:System.ServiceModel.OperationContractAttribute.ProtectionLevel%2A> jawnie ustawić właściwość.  
  
-   <xref:System.ServiceModel.OperationContractAttribute.IsOneWay%2A> Właściwość wskazuje, że operacja składa się tylko z jednego komunikatu wejściowego. Operacja ma Brak komunikatu wyjściowego skojarzone.  
  
-   <xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A> Właściwość określa, czy ta operacja może być początkowej operacji w sesji.  
  
-   <xref:System.ServiceModel.OperationContractAttribute.IsTerminating%2A> Właściwość określa, czy WCF próbuje zakończyć w bieżącej sesji, po zakończeniu operacji.  
  
-   <xref:System.ServiceModel.OperationContractAttribute.ProtectionLevel%2A> Właściwość określa zabezpieczenia na poziomie komunikatu operacja wymaga, aby w czasie wykonywania.  
  
-   <xref:System.ServiceModel.OperationContractAttribute.ReplyAction%2A> Właściwość określa akcję komunikat odpowiedzi dla operacji.  
  
 <xref:System.ServiceModel.OperationContractAttribute> Atrybut deklaruje, że metoda jest operacją w kontrakcie usługi. Tylko metody opartego na atrybutach z <xref:System.ServiceModel.OperationContractAttribute> są widoczne jako operacji usługi. Kontrakt usługi, bez żadnych metody oznaczone atrybutami <xref:System.ServiceModel.OperationContractAttribute> ujawnia żadnych operacji.  
  
 <xref:System.ServiceModel.OperationContractAttribute.AsyncPattern%2A> Właściwość wskazuje, że pary `Begin` \< *methodName*> i `End` \< *methodName*> metody stanowią jeden operacja implementowane asynchronicznie, (zarówno po stronie klienta lub usługi). Możliwość implementowania operacji asynchronicznie usługę szczegółów implementacji usługi i nie jest widoczne w metadanych (takich jak Web Services Description Language (WSDL)).  
  
 Podobnie klientów można wywoływać operacje asynchroniczne niezależne od implementacji metody usługi. Asynchroniczne wywoływanie operacji usługi w kliencie programu jest zalecane, gdy metoda usługi zajmuje trochę czasu, ale trzeba zwrócić informacje bezpośrednio do klienta. Aby uzyskać więcej informacji, zobacz <xref:System.ServiceModel.OperationContractAttribute.AsyncPattern%2A>.  
  
 <xref:System.ServiceModel.OperationContractAttribute.IsOneWay%2A> Właściwość wskazuje, że metoda nie zwraca żadnej wartości na wszystkich tym pusty komunikat odpowiedzi podstawowego. Tego rodzaju metody jest przydatne w przypadku powiadomień lub komunikacji typu zdarzenia. Metody tego typu nie można zwrócić komunikat odpowiedzi, dlatego deklaracja metody musi zwracać `void`.  
  
> [!IMPORTANT]
>  Podczas pobierania programowo Magazyn informacji w tym atrybucie, użyj <xref:System.ServiceModel.Description.ContractDescription> klasy zamiast odbicia.  
  
> [!NOTE]
>  Jeśli <xref:System.ServiceModel.OperationContractAttribute.IsOneWay%2A> właściwość jest ustawiona na `false`, (ustawienie domyślne), nawet metody, które zwracają `void` są dwukierunkowe metod na podstawowym poziomie wiadomości. W tym przypadku infrastruktury tworzy i wysyła komunikat puste, aby wskazać obiektowi wywołującemu, że metoda zwróciła. Takie podejście umożliwia aplikacji i infrastruktury wysłać informacje o błędach (na przykład błąd protokołu SOAP) do klienta. Ustawienie <xref:System.ServiceModel.OperationContractAttribute.IsOneWay%2A> do `true` jest jedynym sposobem, aby uniknąć tworzenia i wysyłania komunikatu odpowiedzi. Aby uzyskać więcej informacji, zobacz [usług One-Way](~/docs/framework/wcf/feature-details/one-way-services.md).  
  
 <xref:System.ServiceModel.OperationContractAttribute.Action%2A> i <xref:System.ServiceModel.OperationContractAttribute.ReplyAction%2A> właściwości mogą być używane nie tylko po to, aby zmodyfikować domyślną akcję komunikaty protokołu SOAP, ale także aby utworzyć procedury obsługi komunikatów nierozpoznany lub wyłączyć dodawanie akcji dla programowania wiadomości bezpośrednich. Użyj <xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A> właściwości, aby uniemożliwić klientom wywołanie operacji określonej usługi, przed innych operacji. Użyj <xref:System.ServiceModel.OperationContractAttribute.IsTerminating%2A> właściwości Zamknij kanał po klienci wywołują operację określonej usługi WCF. Aby uzyskać więcej informacji, zobacz [przy użyciu sesji](~/docs/framework/wcf/using-sessions.md).  
  
 <xref:System.ServiceModel.OperationContractAttribute.ProtectionLevel%2A> Właściwość pozwala na określenie na kontrakt operacji, czy komunikaty operacji są podpisane, szyfrowane, lub podpisane i szyfrowane. Jeśli powiązanie nie może zapewnić poziom zabezpieczeń wymagane przez umowy, zwracany jest wyjątek w czasie wykonywania. Aby uzyskać więcej informacji, zobacz <xref:System.ServiceModel.OperationContractAttribute.ProtectionLevel%2A> i [zrozumieć poziom ochrony](~/docs/framework/wcf/understanding-protection-level.md).  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje kontrakt prostą usługę za pomocą jednej operacji.  
  
 [!code-csharp[OperationContractAttribute#1](~/samples/snippets/csharp/VS_Snippets_CFX/operationcontractattribute/cs/services.cs#1)]
 [!code-vb[OperationContractAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/operationcontractattribute/vb/services.vb#1)]  
  
 Poniższy przykład jest to usługa, która implementuje niejawne serwisową, który określa trzy operacje. Dwie operacje to dwukierunkowe operacje, które zwraca bazowego wiadomości odpowiedzi do obiektu wywołującego, niezależnie od tego, co to jest wartość zwracaną. Trzeci operacja odbiera połączenie, podstawowej wiadomości przychodzących, ale zwraca nie bazowego komunikat odpowiedzi.  
  
```csharp  
[ServiceContractAttribute]  
public class OneAndTwoWay  
{  
  // The client waits until a response message appears.  
  [OperationContractAttribute]  
  public int MethodOne (int x, out int y)  
  {  
    y = 34;  
    return 0;  
  }  
  
  // The client waits until an empty response message appears.  
  [OperationContractAttribute]  
  public void MethodTwo (int x)  
  {  
    return;  
  }  
  
  // The client returns as soon as an outbound message  
  // is dispatched to the service; no response  
  // message is generated or sent from the service.  
  [OperationContractAttribute(IsOneWay=true)]  
  public void MethodThree (int x)  
  {  
    return;  
  }  
}  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OperationContractAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.OperationContractAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; OperationContractAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.ServiceModel.OperationContractAttribute" /> klasy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Action">
      <MemberSignature Language="C#" Value="public string Action { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Action" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.OperationContractAttribute.Action" />
      <MemberSignature Language="VB.NET" Value="Public Property Action As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Action { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Action : string with get, set" Usage="System.ServiceModel.OperationContractAttribute.Action" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia akcję WS-Addressing komunikatu żądania.</summary>
        <value>Akcja do użycia podczas generowania nagłówka Action WS-Addressing.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.ServiceModel.OperationContractAttribute.Action%2A> właściwości do kontrolowania działania metody dane wejściowe podane przez komunikat. Ponieważ WCF za pomocą tej akcji wysyłania wiadomości przychodzących do odpowiedniej metody, wiadomości używane w ramach operacji kontraktu musi mieć unikatowy akcji. Wartość domyślna akcja składa się z przestrzeni nazw kontraktu (wartość domyślna to "http://tempuri.org/"), Nazwa kontraktu (nazwa interfejsu lub nazwy klasy, jeśli jest używany bez interfejsu jawnego usługi), nazwy operacji i dodatkowe parametry ("Response") jeżeli komunikat jest skorelowany odpowiedzi. Można zastąpić to ustawienie domyślne z <xref:System.ServiceModel.OperationContractAttribute.Action%2A> właściwości.  
  
 Aby wskazać, że operacja usługi obsługuje wszystkie komunikaty, które usługa odbiera, ale nie mogą być kierowane do operacji usługi, określ wartość "*" (gwiazdka). Ten typ operacji, o nazwie do obsługi wiadomości niedopasowane musi mieć jeden z następującego podpisy metod lub <xref:System.InvalidOperationException> jest generowany:  
  
-   Operacja usługi może potrwać tylko <xref:System.ServiceModel.Channels.Message> obiektu i zwraca <xref:System.ServiceModel.Channels.Message> obiektu.  
  
-   Operacja usługi może potrwać tylko <xref:System.ServiceModel.Channels.Message> obiektu i zwrócenia żadnych wyników (czyli zwracają `void`).  
  
> [!NOTE]
>  Kontrakt usługi może mieć tylko jedną operację usługi z <xref:System.ServiceModel.OperationContractAttribute.Action%2A> ustawioną na "*". Jakakolwiek grupa kontraktów usług hostowanych w tym samym identyfikatorze listenUri, który implementuje klasa usługi może mieć wiele operacji usługi za pomocą <xref:System.ServiceModel.OperationContractAttribute.Action%2A> ustawioną na "\*" podczas <xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A> właściwość jest ustawiona na `false`. Jednak może mieć tylko jeden z tych operacji usługi <xref:System.ServiceModel.OperationContractAttribute.Action%2A> ustawioną na "\*" i <xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A> właściwość ma wartość true. Aby uzyskać więcej informacji, zobacz <xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A>.  
  
   
  
## Examples  
 Poniższy przykład jest to usługa, która używa <xref:System.ServiceModel.OperationContractAttribute.Action%2A> i <xref:System.ServiceModel.OperationContractAttribute.ReplyAction%2A> właściwości, aby jawnie kontrolować działania protokołu SOAP, zarówno dane wejściowe i dane wyjściowe (lub odpowiedzi) komunikatów, a <xref:System.ServiceModel.OperationContractAttribute.Name%2A> właściwości do kontrolowania Nazwa operacji w metadanych. Na koniec aplikacja używa również <xref:System.ServiceModel.OperationContractAttribute.Action%2A> wartość "*" Aby wskazać, metoda, która obsługuje nierozpoznane wiadomości.  
  
 [!code-csharp[OperationContractAttribute_Properties#1](~/samples/snippets/csharp/VS_Snippets_CFX/operationcontractattribute_properties/cs/services.cs#1)]
 [!code-vb[OperationContractAttribute_Properties#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/operationcontractattribute_properties/vb/services.vb#1)]  
  
 To usługa, która implementuje ten kontrakt wysyła komunikaty, które wyglądają jak w poniższym przykładzie:  
  
 [!code-csharp[OperationContractAttribute_Properties#2](~/samples/snippets/csharp/VS_Snippets_CFX/operationcontractattribute_properties/cs/services.cs#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Wartość jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="AsyncPattern">
      <MemberSignature Language="C#" Value="public bool AsyncPattern { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AsyncPattern" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.OperationContractAttribute.AsyncPattern" />
      <MemberSignature Language="VB.NET" Value="Public Property AsyncPattern As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AsyncPattern { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AsyncPattern : bool with get, set" Usage="System.ServiceModel.OperationContractAttribute.AsyncPattern" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Wskazuje, że operacja jest wykonywane asynchronicznie za pomocą <see langword="Begin" /> &lt; *methodName* &gt; i <see langword="End" /> &lt; *methodName* &gt; pary metod w kontrakcie usługi.</summary>
        <value><see langword="true" /> Jeśli <see langword="Begin" /> &lt; *methodName*&gt;dorównuje metoda <see langword="End" /> &lt; *methodName* &gt; metody i mogą być traktowane przez Infrastruktura jako operacja, która jest implementowany jako pary metod asynchronicznych w interfejsie usługi; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.ServiceModel.OperationContractAttribute.AsyncPattern%2A> właściwości kompilacji operacje usług, które mogą być wywoływane asynchronicznie na serwerze i/lub klienta. <xref:System.ServiceModel.OperationContractAttribute.AsyncPattern%2A> Właściwość informuje środowisko uruchomieniowe, `Begin` metoda zawiera dopasowany `End` metodę, która jest zgodny ze wzorca projektowego asynchronicznej metody .NET Framework. Tworzenie serwera metod asynchronicznych, które implementują operacji usługi zwiększa wydajność i skalowalność serwera bez wywierania wpływu na klientów usługi i jest zalecana w przypadku operacji usługi musi zwrócić coś do klienta po wykonaniu długotrwałej operacji, które mogą być wykonywane asynchronicznie.  
  
 Klienci pozostaną niezmienione, ponieważ pary metod asynchronicznych na serwerze jest szczegółowo opisuje implementacja nie ma wpływu na podstawowy opis usługi sieci Web Services Description Language (WSDL) operacji. Takie metody widoczny dla klientów w jednej operacji o `<input>` i skorelowane `<output>` wiadomości. WCF automatycznie kieruje wiadomości przychodzących `Begin` \< *methodName*> Metoda i kieruje wyniki `End` \< *methodName*> wywołania wychodzący komunikat. Kanały klientów, w związku z tym, może reprezentować pary metod albo jednej operacji synchronicznych lub jako parę operację asynchroniczną. W żadnym przypadku nie ma reprezentacji klienta wpływu na implementacji asynchronicznego w żaden sposób na serwerze.  
  
 Kontrakty klienta można użyć <xref:System.ServiceModel.OperationContractAttribute.AsyncPattern%2A> właściwości do wskazania pary metod asynchronicznych, używanego przez klienta do wywołania operacji asynchronicznie. Zazwyczaj korzystają z aplikacji klienckich [narzędzia narzędzie metadanych elementu ServiceModel (Svcutil.exe)](~/docs/framework/wcf/servicemodel-metadata-utility-tool-svcutil-exe.md) narzędzia i `/async` opcję, aby wygenerować `Begin` \< *methodName*> i `End` \< *methodName*> pary metod, używanego przez klienta do wywołania operacji asynchronicznie.  
  
> [!NOTE]
>  Jeśli operacja usługi ma asynchronicznego i wersja synchroniczna, domyślne zachowanie usługi jest wywołania to wersja synchroniczna.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje kanału klienta do kontraktu usługi, która obejmuje zarówno synchroniczna wersja `Add` i asynchroniczna wersja. Jeśli na komputerze klienckim, używany jest interfejs kontraktu zarówno `BeginAdd` i `Add` operacji wywoływanie metody na serwerze, który może lub nie może być synchroniczne. Jeśli umowa jest używany do wdrażania usługi, wartość domyślna to, czy żądania przychodzące są wysyłane do metody synchronicznej.  
  
```csharp  
[ServiceContract]  
public interface IAddTwoNumbers  
{  
    // If the asynchronous method pair  
    // appears on the client channel, the client can call   
    // them asynchronously to prevent blocking.  
    [OperationContract (AsyncPattern=true)]  
    IAsyncResult BeginAdd(int a, int b, AsyncCallback cb, AsyncState s);  
  
    [OperationContract]  
    int EndAdd(IAsyncResult r);  
  
    // This is a synchronous version of the BeginAdd/EndAdd pair.  
    // It appears in the client channel code by default.   
    [OperationContract]  
    int Add(int a, int b);  
   }  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasProtectionLevel">
      <MemberSignature Language="C#" Value="public bool HasProtectionLevel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasProtectionLevel" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.OperationContractAttribute.HasProtectionLevel" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasProtectionLevel As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasProtectionLevel { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasProtectionLevel : bool" Usage="System.ServiceModel.OperationContractAttribute.HasProtectionLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy komunikaty dla tej operacji musi być szyfrowana, podpisany, lub obu.</summary>
        <value><see langword="true" /> Jeśli <see cref="P:System.ServiceModel.OperationContractAttribute.ProtectionLevel" /> właściwości jest równa wartości innych niż <see cref="F:System.Net.Security.ProtectionLevel.None" />; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.ServiceModel.OperationContractAttribute.HasProtectionLevel%2A> właściwości w celu określenia, czy poziom ochrony określonych jest wymagane przez komunikaty o tej operacji.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInitiating">
      <MemberSignature Language="C#" Value="public bool IsInitiating { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInitiating" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.OperationContractAttribute.IsInitiating" />
      <MemberSignature Language="VB.NET" Value="Public Property IsInitiating As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsInitiating { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsInitiating : bool with get, set" Usage="System.ServiceModel.OperationContractAttribute.IsInitiating" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy metoda implementuje operację, która może zainicjować sesji na serwerze (jeśli takie sesji istnieje).</summary>
        <value><see langword="true" /> Jeśli operacja jest dozwolona, aby zainicjować sesję na serwerze, w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A> Właściwość określa, czy operacja może być pierwszą operacją, które są wywoływane, gdy zostanie utworzona sesja.  
  
> [!NOTE]
>  Wartość <xref:System.ServiceModel.ServiceContractAttribute.SessionMode%2A?displayProperty=nameWithType> musi być albo <xref:System.ServiceModel.SessionMode.Allowed> lub <xref:System.ServiceModel.SessionMode.Required> i powiązania używanego muszą wymagać lub zezwolić na sesji dla <xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A> właściwości, aby zapewnić prawidłowe działanie.  
  
 Wartość domyślna to `true`, co oznacza, że operacja może być pierwszy z nich o nazwie w kanale. Kolejne wywołania do metody inicjujący nie mają wpływu innych niż do wywoływania metody. Brak innych sesji są tworzone. Jeśli umowa nie oznacza, że korzystanie z sesji, ustawienie <xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A> do `false` jest ignorowana.  
  
 Zwykle ustawiasz <xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A> do `false` Wymuś na klientach do wywoływania innej metody w usłudze przed wywołują ten zestaw. Na przykład, jeśli usługa ma szereg operacji, które są zależne od Identyfikatora zamówienia, można ustawić <xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A> do `true` dla `GetOrderId` operacji usługi i ustaw wszystkie pozostałe operacje usługi `false`. Daje to gwarancję, że każdy nowy klient uzyskuje identyfikator zamówienia przed przy użyciu innych metod udostępnianych przez usługę.  
  
> [!NOTE]
>  Brak interakcji między <xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A> i <xref:System.ServiceModel.OperationContractAttribute.Action%2A> właściwości. Kontrakt usługi może mieć tylko jedną operację usługi z <xref:System.ServiceModel.OperationContractAttribute.Action%2A> ustawioną na "*". Jakakolwiek grupa kontraktów usług hostowanych na tej samej operacji listen identyfikatora URI, który implementuje klasa usługi może mieć wiele operacji usługi za pomocą <xref:System.ServiceModel.OperationContractAttribute.Action%2A> ustawioną na "\*" podczas <xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A> właściwość jest ustawiona na `false`. Jednak może mieć tylko jeden z tych metod usługi <xref:System.ServiceModel.OperationContractAttribute.Action%2A> ustawioną na "\*" i <xref:System.ServiceModel.OperationContractAttribute.IsInitiating%2A> właściwością `true`.  
  
 Jeśli usługa odbiera komunikat — Inicjowanie operacji, usługa zwraca błąd ActionNotSupported protokołu SOAP. Klient napotyka jako <xref:System.ServiceModel.FaultException>. Jeśli klient wywołuje operację — inicjowanie najpierw, środowiska uruchomieniowego klienta zgłasza <xref:System.InvalidOperationException?displayProperty=nameWithType>.  
  
 Aby uzyskać więcej informacji, zobacz [przy użyciu sesji](~/docs/framework/wcf/using-sessions.md).  
  
   
  
## Examples  
 Poniższy przykład jest to usługa, która implementuje kontraktu usługi, która określa trzy metody. Usługa wymaga sesji. Jeśli obiekt wywołujący pierwsze wywołanie do dowolnej operacji innych niż `MethodOne`kanał zostało odrzucone i zostanie zgłoszony wyjątek. Gdy obiekt wywołujący inicjuje sesję przez wywołanie metody `MethodOne`, że obiekt wywołujący może zakończyć sesji komunikacji w dowolnym momencie przez wywołanie metody `MethodThree`. `MethodTwo` można wywołać dowolną liczbę razy podczas sesji.  
  
```csharp  
[ServiceContract(SessionMode=SessionMode.Required)]  
public class InitializeAndTerminateService  
{  
  [OperationContract(  
    IsOneWay=true,  
    IsInitiating=true,  
    IsTerminating=false  
  )]  
  public void MethodOne()  
  {  
    return;  
  }  
  
  [OperationContract(  
    IsInitiating=false,  
    IsTerminating=false  
  )]  
  public int MethodTwo(int x, out int y)  
  {  
    y = 34;  
    return 0;  
  }  
  
  [OperationContract(  
    IsOneWay=true,  
    IsInitiating=false,  
    IsTerminating=true  
  )]  
  public void MethodThree()  
  {  
    return;  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsOneWay">
      <MemberSignature Language="C#" Value="public bool IsOneWay { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsOneWay" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.OperationContractAttribute.IsOneWay" />
      <MemberSignature Language="VB.NET" Value="Public Property IsOneWay As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsOneWay { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsOneWay : bool with get, set" Usage="System.ServiceModel.OperationContractAttribute.IsOneWay" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy operacja zwraca komunikat odpowiedzi.</summary>
        <value><see langword="true" /> Jeśli ta metoda odbiera komunikat żądania i zwraca żadnej wiadomości odpowiedzi; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.ServiceModel.OperationContractAttribute.IsOneWay%2A> właściwości, aby wskazać, że operacją nie zwraca komunikat odpowiedzi. Ten typ operacji jest przydatne w przypadku powiadomień lub komunikacji typu zdarzenia, szczególnie w przypadku dwukierunkowej komunikacji. Bez oczekiwania na komunikat odpowiedzi podstawowego, wywoływania operacji jednokierunkowych mają ma bezpośredniego sposobu, aby wykryć błąd podczas przetwarzania komunikatu żądania. (Aplikacje usługi, które używają niezawodne kanałów i operacji jednokierunkowych może wykryć błąd dostarczania wiadomości na poziomie kanału. Aby uzyskać więcej informacji, zobacz [omówienie sesji niezawodnych](~/docs/framework/wcf/feature-details/reliable-sessions-overview.md).)  
  
 W dwukierunkowe (lub dwukierunkowe) aplikacji usługowych w których klient i serwer komunikują się ze sobą niezależnie, można użyć kanału klienta <xref:System.ServiceModel.OperationContractAttribute.IsOneWay%2A> właściwość jego metod, aby wskazać, że usługa może wykonywać wywołania jednokierunkowe do klienta, klienta można traktować jako zdarzeń. Nie wywołanie zwrotne lub komunikat jest generowany, ponieważ usługa nie oczekuje żadnych komunikat odpowiedzi.  
  
 Jeśli <xref:System.ServiceModel.OperationContractAttribute.IsOneWay%2A> właściwość jest ustawiona na `false` (ustawienie domyślne), nawet metody, które zwracają `void` spowodować komunikatu odpowiedzi. W tym przypadku infrastruktury tworzy i wysyła komunikat puste, aby wskazać obiektowi wywołującemu, że metoda zwróciła. (To podejście umożliwia infrastruktury w celu wysłania błędach SOAP do klienta). Ustawienie <xref:System.ServiceModel.OperationContractAttribute.IsOneWay%2A> do `true` jest jedynym sposobem, aby anulować tworzenia i wysyłania komunikatu odpowiedzi.  
  
 Metody jednokierunkowe musi zwracać wartość lub nie masz `ref` lub `out` parametry; w przeciwnym razie <xref:System.InvalidOperationException?displayProperty=nameWithType> jest zgłaszany wyjątek.  
  
 Określanie, czy operacją jest Operacja jednokierunkowa oznacza tylko, że nie ma odpowiedzi. Istnieje możliwość bloku, jeśli nie można nawiązać połączenia lub wiadomości wychodzących jest bardzo duża lub jeśli usługa nie może odczytać informacji o ruchu przychodzącego wystarczająco szybko. Jeśli klient wymaga wywołania bez blokowania, wygeneruj <xref:System.ServiceModel.OperationContractAttribute.AsyncPattern%2A> operacji. Aby uzyskać więcej informacji, zobacz [usług One-Way](~/docs/framework/wcf/feature-details/one-way-services.md) i [uzyskiwanie dostępu do usług za pomocą klienta WCF](~/docs/framework/wcf/feature-details/accessing-services-using-a-client.md).  
  
   
  
## Examples  
 Poniższy przykład jest to usługa, która implementuje kontraktu usługi, która określa trzy operacje. Dwóch metod zaimplementować dwukierunkowe operacje, które zwraca bazowego wiadomości odpowiedzi do obiektu wywołującego, niezależnie od tego, co to jest wartość zwracaną. Trzecia metoda implementuje operację, która odbiera połączenie (podstawowy wiadomości przychodzącej), ale zwraca Brak podstawowej komunikatu odpowiedzi.  
  
```csharp  
[ServiceContract]  
public class OneAndTwoWay  
{  
  // The client waits until a response message appears.  
  [OperationContract]  
  public int MethodOne (int x, out int y)  
  {  
    y = 34;  
    return 0;  
  }  
  
  // The client waits until an empty response message appears.  
  [OperationContract]  
  public void MethodTwo (int x)  
  {  
    return;  
  }  
  
  // The client returns as soon as an outbound message  
  // is queued for dispatch to the service; no response  
  // message is generated or sent.  
  [OperationContract(IsOneWay=true)]  
  public void MethodThree (int x)  
  {  
    return;  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsTerminating">
      <MemberSignature Language="C#" Value="public bool IsTerminating { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsTerminating" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.OperationContractAttribute.IsTerminating" />
      <MemberSignature Language="VB.NET" Value="Public Property IsTerminating As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsTerminating { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsTerminating : bool with get, set" Usage="System.ServiceModel.OperationContractAttribute.IsTerminating" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy operacja usługi powoduje serwer Zamknij sesję po komunikat odpowiedzi, jeśli istnieje, zostanie wysłany.</summary>
        <value><see langword="true" /> Jeśli operacja powoduje, że serwer Zamknij sesję, w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.ServiceModel.OperationContractAttribute.IsTerminating%2A> właściwości, aby wskazać, że podczas wywoływania operacji usługi kończy się sesja komunikacji.  
  
 W aplikacji klienckiej, wartość <xref:System.ServiceModel.OperationContractAttribute.IsTerminating%2A> równa `true` powoduje, że WCF zamknięcie kanału po nadejściu odpowiedzi.  
  
 W usłudze czasomierz jest ustawiona, a kanał przerywa, jeśli klient nie zamyka kanał w tym okresie.  
  
 Aby uzyskać więcej informacji o korzystaniu z tej właściwości z sesji, zobacz [przy użyciu sesji](~/docs/framework/wcf/using-sessions.md).  
  
> [!NOTE]
>  Jeśli obiekt wywołujący nasłuchuje <xref:System.ServiceModel.OperationContext.OperationCompleted?displayProperty=nameWithType> zdarzenie <xref:System.ServiceModel.OperationContractAttribute.IsTerminating%2A?displayProperty=nameWithType> operacji, możliwe jest blok po otrzymaniu odpowiedzi. Prawidłowego sposobu obsługi, to jest harmonogramu pracy nad innym wątku, kiedy <xref:System.ServiceModel.OperationContext.OperationCompleted> jest zostaje zgłoszone, a następnie natychmiast zwracane z tej obsługi zdarzeń.  
  
   
  
## Examples  
 Poniższy przykład jest to usługa, która implementuje kontraktu usługi, która określa trzy operacje. Usługa wymaga stanowych połączeń. Jeśli obiekt wywołujący pierwsze wywołanie do dowolnej operacji innych niż `MethodOne`kanał zostało odrzucone i zostanie zgłoszony wyjątek. Gdy obiekt wywołujący inicjuje sesję przez wywołanie metody `MethodOne`, że obiekt wywołujący może zakończyć sesji komunikacji w dowolnym momencie przez wywołanie metody `MethodThree`. `MethodTwo` można wywołać dowolną liczbę razy podczas sesji.  
  
```csharp  
[ServiceContractAttribute(SessionMode=SessionMode.Required)]  
public class InitializeAndTerminateService  
{  
  [OperationContract(  
    IsOneWay=true,  
    IsInitiating=true,  
    IsTerminating=false  
  )]  
  public void MethodOne()  
  {  
    return;  
  }  
  
  [OperationContract(  
    IsInitiating=false,  
    IsTerminating=false  
  )]  
  public int MethodTwo(int x, out int y)  
  {  
    y = 34;  
    return 0;  
  }  
  
  [OperationContract(  
    IsOneWay=true,  
    IsInitiating=false  
    IsTerminating=true  
  )]  
  public void MethodThree()  
  {  
    return;  
  }  
}  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.OperationContractAttribute.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.ServiceModel.OperationContractAttribute.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia nazwę operacji.</summary>
        <value>Nazwa operacji.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.ServiceModel.OperationContractAttribute.Name%2A> właściwość, aby pominąć `<operation>` nazwa elementu w języku WSDL. Domyślna nazwa operacji jest nazwa metody wykonawcze.  
  
   
  
## Examples  
 Poniższy przykład kodu wykorzystuje <xref:System.ServiceModel.OperationContractAttribute.Name%2A> właściwości, aby zadeklarować nazwą operacji, ponieważ widoczne w metadanych.  
  
 [!code-csharp[OperationContractAttribute_Properties#1](~/samples/snippets/csharp/VS_Snippets_CFX/operationcontractattribute_properties/cs/services.cs#1)]
 [!code-vb[OperationContractAttribute_Properties#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/operationcontractattribute_properties/vb/services.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><see cref="P:System.ServiceModel.OperationContractAttribute.Name" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Wartość jest ciągiem pustym.</exception>
      </Docs>
    </Member>
    <Member MemberName="ProtectionLevel">
      <MemberSignature Language="C#" Value="public System.Net.Security.ProtectionLevel ProtectionLevel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Net.Security.ProtectionLevel ProtectionLevel" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.OperationContractAttribute.ProtectionLevel" />
      <MemberSignature Language="VB.NET" Value="Public Property ProtectionLevel As ProtectionLevel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Security::ProtectionLevel ProtectionLevel { System::Net::Security::ProtectionLevel get(); void set(System::Net::Security::ProtectionLevel value); };" />
      <MemberSignature Language="F#" Value="member this.ProtectionLevel : System.Net.Security.ProtectionLevel with get, set" Usage="System.ServiceModel.OperationContractAttribute.ProtectionLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.Security.ProtectionLevel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość określającą, czy komunikaty operacji musi być szyfrowana, podpisany, lub obu.</summary>
        <value>Jedną z <see cref="T:System.Net.Security.ProtectionLevel" /> wartości. Wartość domyślna to <see cref="F:System.Net.Security.ProtectionLevel.None" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.ServiceModel.OperationContractAttribute.ProtectionLevel%2A> właściwości do kontrolowania, czy komunikaty operacji musi być szyfrowana, podpisany, lub obu. Wartość ustawiona w tym miejscu jest wartością domyślną dla wszystkich komunikatów o określonych dla tej operacji, chyba że węższy zakres zastępuje tę wartość.  
  
 Należy pamiętać, że zachowania w zakresie ochrony w czasie wykonywania jest kombinacją wartości poziomu ochrony, ustaw następujące właściwości. Te właściwości mają hierarchiczną strukturę. Ustawienie wartości peryferyjnych ustanawia ustawienie domyślne dla wszystkich zakresów mniejszą niż, chyba że jawnie ustawiono inną wartość dla węższy zakres. W tym przypadku zewnętrzny wartość pozostaje domyślnego dla wszystkich mniejszą niż zakresów, z wyjątkiem ustawione to inaczej.  
  
 Na przykład jeśli <xref:System.ServiceModel.ServiceContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType> ustawiono <xref:System.Net.Security.ProtectionLevel.EncryptAndSign?displayProperty=nameWithType> i inne zakresy mniejszą niż ma ustawienia poziomu ochrony, wszystkie komunikaty w kontrakt operacji czy zaszyfrowana i podpisana. Jeśli jednak ma jedną z tych operacji <xref:System.ServiceModel.OperationContractAttribute.ProtectionLevel%2A> równa <xref:System.Net.Security.ProtectionLevel.Sign?displayProperty=nameWithType>, następnie komunikatów dla tej operacji są podpisane, ale wszystkie inne komunikaty w kontrakcie czy zaszyfrowana i podpisana.  
  
 Aby uzyskać szczegółowe informacje dotyczące poziomów ochrony i ich wartości domyślne i zakresów, zobacz [zrozumieć poziom ochrony](~/docs/framework/wcf/understanding-protection-level.md).  
  
 Zakresy, w których te wartości są ustawiane są następujące:  
  
 <xref:System.ServiceModel.ServiceContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType>  
  
 <xref:System.ServiceModel.OperationContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType>  
  
 <xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType>  
  
 <xref:System.ServiceModel.MessageContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType>  
  
 <xref:System.ServiceModel.MessageContractMemberAttribute.ProtectionLevel%2A?displayProperty=nameWithType> Właściwość <xref:System.ServiceModel.MessageHeaderAttribute?displayProperty=nameWithType>.  
  
 <xref:System.ServiceModel.MessageContractMemberAttribute.ProtectionLevel%2A?displayProperty=nameWithType> Właściwość <xref:System.ServiceModel.MessageBodyMemberAttribute?displayProperty=nameWithType>.  
  
 Jeśli występuje żaden poziom ochrony jawnie określone w umowie bazowego powiązanie obsługuje zabezpieczenia, (zarówno na poziomie transportu lub wiadomości), poziom skuteczną ochronę całej umowy jest <xref:System.Net.Security.ProtectionLevel.EncryptAndSign?displayProperty=nameWithType>. Jeśli wiązanie nie obsługuje zabezpieczeń (takich jak <xref:System.ServiceModel.BasicHttpBinding>), obowiązującą <xref:System.Net.Security.ProtectionLevel?displayProperty=nameWithType> jest <xref:System.Net.Security.ProtectionLevel.None?displayProperty=nameWithType> dla całej umowy. Wynik jest, że zależą od powiązania punktu końcowego, klienci mogą wymagają różnych ochrony zabezpieczeń na poziomie komunikatu lub transportu, nawet wtedy, gdy kontrakt Określa <xref:System.Net.Security.ProtectionLevel.None?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Wartość nie jest jednym z <see cref="T:System.Net.Security.ProtectionLevel" /> wartości.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReplyAction">
      <MemberSignature Language="C#" Value="public string ReplyAction { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string ReplyAction" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.OperationContractAttribute.ReplyAction" />
      <MemberSignature Language="VB.NET" Value="Public Property ReplyAction As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ ReplyAction { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ReplyAction : string with get, set" Usage="System.ServiceModel.OperationContractAttribute.ReplyAction" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość Akcja SOAP komunikat odpowiedzi operacji.</summary>
        <value>Wartość akcji SOAP dla komunikatu odpowiedzi.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Oprócz określenia określoną wartość dla nagłówka action komunikatu odpowiedzi, można również określić ciąg "*" (gwiazdka). Znak gwiazdki w usłudze powoduje, że usługi WCF nie można dodać akcji odpowiedzi na wiadomość, co jest przydatne, jeśli programujesz przed komunikatami bezpośrednio. Znak gwiazdki w aplikacji klienckiej powoduje, że usługi WCF nie można zweryfikować akcji odpowiedzi.  
  
   
  
## Examples  
 Poniższy przykład jest to usługa, która używa <xref:System.ServiceModel.OperationContractAttribute.Action%2A> i <xref:System.ServiceModel.OperationContractAttribute.ReplyAction%2A> właściwości, aby jawnie kontrolować działania protokołu SOAP wiadomości dane wejściowe i dane wyjściowe (lub odpowiedzi). Korzysta również <xref:System.ServiceModel.OperationContractAttribute.Name%2A> właściwości, aby zadeklarować nazwą operacji, ponieważ widoczne w metadanych.  
  
 [!code-csharp[OperationContractAttribute_Properties#1](~/samples/snippets/csharp/VS_Snippets_CFX/operationcontractattribute_properties/cs/services.cs#1)]
 [!code-vb[OperationContractAttribute_Properties#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/operationcontractattribute_properties/vb/services.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><see cref="P:System.ServiceModel.OperationContractAttribute.ReplyAction" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>