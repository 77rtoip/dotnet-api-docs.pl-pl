<Type Name="OperationContextScope" FullName="System.ServiceModel.OperationContextScope">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6ddf8cf5d00ac6a6c698efe3f32c5be9413cc807" />
    <Meta Name="ms.sourcegitcommit" Value="3907f9a5780957d9c85af2e54c0a5bc2a5bf19ab" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/14/2018" />
    <Meta Name="ms.locfileid" Value="34313996" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class OperationContextScope : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit OperationContextScope extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.OperationContextScope" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class OperationContextScope&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class OperationContextScope sealed : IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Tworzy blok, w którym <see cref="T:System.ServiceModel.OperationContext" /> obiekt znajduje się w zakresie.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.ServiceModel.OperationContextScope> klasy w celu utworzenia zakresu dla określonego <xref:System.ServiceModel.OperationContext> obiektu lub zakres dla nowej <xref:System.ServiceModel.OperationContext> przy użyciu określonej <xref:System.ServiceModel.IContextChannel> obiektu. <xref:System.ServiceModel.OperationContextScope> Mogą być używane w usługi Windows Communication Foundation (WCF) lub aplikacji klienta WCF.  
  
 Raz <xref:System.ServiceModel.OperationContextScope> obiektu przejęło bieżącego kontekstu operacji, możesz użyć <xref:System.ServiceModel.OperationContext> do:  
  
-   Dostęp i modyfikować nagłówki komunikatów przychodzących i wychodzących i inne właściwości.  
  
-   Dostęp do środowiska wykonawczego, w tym dyspozytorów hosta, kanału i rozszerzenia.  
  
-   Dostęp do innych typów kontekstów, takie jak zabezpieczenia, wystąpienia i konteksty żądania.  
  
-   Dostęp do kanału skojarzone z <xref:System.ServiceModel.OperationContext> obiektu lub (jeśli implementuje kanału <xref:System.ServiceModel.Channels.ISession?displayProperty=nameWithType>) kanału skojarzony identyfikator sesji.  
  
 Gdy <xref:System.ServiceModel.OperationContextScope> utworzeniu bieżącego <xref:System.ServiceModel.OperationContext> są przechowywane i nowych <xref:System.ServiceModel.OperationContext> staje się jeden zwrócony przez <xref:System.ServiceModel.OperationContext.Current%2A> właściwości. Gdy <xref:System.ServiceModel.OperationContextScope> usunięciu oryginalnej <xref:System.ServiceModel.OperationContext> przywróceniu.  
  
> [!WARNING]
>  Nie należy używać asynchroniczny wzorzec "await" w bloku OperationContextScope. W przypadku kontynuacji może działać w innym wątku i OperationContextScope jest określonego wątku. Jeśli należy wywołać "await" wywołania asynchronicznego, użyj jej poza blokiem OperationContextScope.  
  
   
  
## Examples  
 Poniższy przykład przedstawia użycie <xref:System.ServiceModel.OperationContextScope> Aby utworzyć nowy kontekst w aplikacji klienckiej, aby dodać niestandardowego nagłówka do komunikatu wychodzącego.  
  
 [!code-csharp[OperationContextScope#3](~/samples/snippets/csharp/VS_Snippets_CFX/operationcontextscope/cs/client.cs#3)]
 [!code-vb[OperationContextScope#3](~/samples/snippets/visualbasic/VS_Snippets_CFX/operationcontextscope/vb/client.vb#3)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.ServiceModel.OperationContextScope" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OperationContextScope (System.ServiceModel.IContextChannel channel);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.ServiceModel.IContextChannel channel) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.OperationContextScope.#ctor(System.ServiceModel.IContextChannel)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (channel As IContextChannel)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; OperationContextScope(System::ServiceModel::IContextChannel ^ channel);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="channel" Type="System.ServiceModel.IContextChannel" />
      </Parameters>
      <Docs>
        <param name="channel">Kanału do użycia podczas tworzenia zakresu nowej <see cref="T:System.ServiceModel.OperationContext" />.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.ServiceModel.OperationContextScope" /> klasy, która używa określonego <see cref="T:System.ServiceModel.IContextChannel" /> do tworzenia nowego <see cref="T:System.ServiceModel.OperationContext" /> dla zakresu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.ServiceModel.OperationContextScope.%23ctor%2A> konstruktora, aby utworzyć nową <xref:System.ServiceModel.OperationContext> dla kanału klienta, który może służyć do dodawania lub modyfikowania nagłówki komunikatów wychodzących, nagłówki komunikatów przychodzących do odczytu lub dostępu do innych właściwości czasu wykonywania <xref:System.ServiceModel.OperationContext>.  
  
 Nagłówki dodane do <xref:System.ServiceModel.OperationContext.IncomingMessageHeaders%2A?displayProperty=nameWithType> właściwość nowo utworzony <xref:System.ServiceModel.OperationContext> mają zastosowanie tylko do kanału, który został przekazany do <xref:System.ServiceModel.OperationContextScope.%23ctor%2A> konstruktora. Jeśli użytkownik tworzy nowy kanał w jego zakresie nagłówki nie są stosowane do komunikaty wysyłane na nowy kanał.  
  
   
  
## Examples  
 Poniższy przykład przedstawia użycie <xref:System.ServiceModel.OperationContextScope> Aby utworzyć nowy kontekst w aplikacji klienta, aby można było dodać niestandardowego nagłówka do wysyłanej wiadomości.  
  
 [!code-csharp[OperationContextScope#4](~/samples/snippets/csharp/VS_Snippets_CFX/operationcontextscope/cs/client.cs#4)]
 [!code-vb[OperationContextScope#4](~/samples/snippets/visualbasic/VS_Snippets_CFX/operationcontextscope/vb/client.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OperationContextScope (System.ServiceModel.OperationContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.ServiceModel.OperationContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.OperationContextScope.#ctor(System.ServiceModel.OperationContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (context As OperationContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; OperationContextScope(System::ServiceModel::OperationContext ^ context);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="context" Type="System.ServiceModel.OperationContext" />
      </Parameters>
      <Docs>
        <param name="context">Aktywne <see cref="T:System.ServiceModel.OperationContext" /> w zakresie utworzony.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.ServiceModel.OperationContextScope" /> klasy w celu utworzenia zakresu dla określonego <see cref="T:System.ServiceModel.OperationContext" /> obiektu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.ServiceModel.OperationContextScope.%23ctor%2A> konstruktora w celu utworzenia blok kodu, w którym określonego <xref:System.ServiceModel.OperationContextScope> obiekt jest w bieżącym zakresie.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.OperationContextScope.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Przywraca oryginalny <see cref="T:System.ServiceModel.OperationContext" /> active kontekstu i odtwarza <see cref="T:System.ServiceModel.OperationContextScope" /> obiektu.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>