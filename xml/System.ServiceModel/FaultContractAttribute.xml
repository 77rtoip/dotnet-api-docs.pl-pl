<Type Name="FaultContractAttribute" FullName="System.ServiceModel.FaultContractAttribute">
  <Metadata><Meta Name="ms.openlocfilehash" Value="258dde72e7912d28ac6a726677683455fbada41b" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69102495" /></Metadata><TypeSignature Language="C#" Value="public sealed class FaultContractAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit FaultContractAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.FaultContractAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class FaultContractAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class FaultContractAttribute sealed : Attribute" />
  <TypeSignature Language="F#" Value="type FaultContractAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.5.0.1</AssemblyVersion>
    <AssemblyVersion>4.5.0.3</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;dotnet-plat-ext-2.1;dotnet-plat-ext-2.2;dotnet-uwp-10.0;dotnet-plat-ext-3.0">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Method, AllowMultiple=true, Inherited=false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Określa co najmniej jeden błąd protokołu SOAP, który jest zwracany, gdy operacja usługi napotka błędy przetwarzania.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Oznacz operację z <xref:System.ServiceModel.FaultContractAttribute> atrybutem, aby zadeklarować co najmniej jeden warunek wyjątku, który jest dodawany do opisu języka Web Service Description Language (WSDL) dla operacji usługi jako jawnych komunikatów o błędach SOAP zwracanych przez operację.  
  
 W przypadku wszystkich aplikacji zarządzanych błędy przetwarzania są reprezentowane przez <xref:System.Exception> obiekty. W aplikacjach opartych na protokole SOAP, takich jak aplikacje Windows Communication Foundation (WCF), metody usługi komunikują się z informacjami o błędach przy użyciu komunikatów błędów protokołu SOAP. Ponieważ aplikacje WCF działają w obu typach systemów błędów, wszelkie zarządzane informacje o wyjątkach, które muszą być wysłane do klienta, muszą być konwertowane z wyjątków na błędy protokołu SOAP. Można użyć domyślnych zachowań wyjątku usługi lub można jawnie kontrolować, czy--i jak wyjątki są mapowane na komunikaty o błędach. Omówienie wyjątków i błędów SOAP w aplikacjach WCF znajduje się w temacie [określanie i obsługa błędów w kontraktach i usługach](~/docs/framework/wcf/specifying-and-handling-faults-in-contracts-and-services.md).  
  
 Zaleca się, aby operacje usług używały <xref:System.ServiceModel.FaultContractAttribute> do formalnego określenia wszystkich błędów protokołu SOAP, które klient może oczekiwać w normalnym przebiegu operacji. Zalecane jest również, aby tylko te informacje, które klient musi znać, zostały zwrócone w błąd protokołu SOAP, aby zminimalizować ujawnienie informacji.  
  
-   <xref:System.ServiceModel.FaultContractAttribute.Action%2A> Właściwość kontroluje akcję komunikatu o błędzie.  
  
-   <xref:System.ServiceModel.FaultContractAttribute.DetailType%2A> Właściwość pobiera typ serializowanego obiektu szczegółowego w komunikacie o błędzie.  
  
-   Właściwości <xref:System.ServiceModel.FaultContractAttribute.Name%2A> i<xref:System.ServiceModel.FaultContractAttribute.Namespace%2A> kontrolują odpowiednio nazwę i przestrzeń nazw komunikatu o błędzie.  
  
-   Wskazuje, czy komunikat o błędzie ma określony poziom ochrony, a jeśli tak <xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A> , Właściwość kontroluje ten poziom ochrony. <xref:System.ServiceModel.FaultContractAttribute.HasProtectionLevel%2A>  
  
> [!CAUTION]
>  Jeśli komunikat o błędzie zawiera informacje, które są poufne lub mogą prowadzić do problemów z zabezpieczeniami, zdecydowanie zaleca <xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A> się ustawienie właściwości.  
  
-   W <xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A> przypadku ustawienia jawnie na albo <xref:System.Net.Security.ProtectionLevel.Sign?displayProperty=nameWithType> lub <xref:System.Net.Security.ProtectionLevel.EncryptAndSign?displayProperty=nameWithType>, należy <xref:System.ServiceModel.SecurityMode?displayProperty=nameWithType> użyć powiązania z włączonymi zabezpieczeniami przy użyciu właściwości w powiązaniu lub wyrzucany jest wyjątek.  
  
-   W przypadku wybrania powiązania, które umożliwia zabezpieczenia i nie ustawisz <xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A> właściwości w dowolnym miejscu kontraktu, wszystkie dane aplikacji zostaną zaszyfrowane i podpisane.  
  
-   W przypadku wybrania powiązania, które nie ma włączonej zabezpieczeń (na przykład <xref:System.ServiceModel.BasicHttpBinding?displayProperty=nameWithType> ma zabezpieczenia wyłączone domyślnie) <xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A> i nie jest jawnie ustawione, żadna z danych aplikacji nie będzie chroniona.  
  
 W przypadku wielu scenariuszy <xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A> ustawienie <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> dla komunikatów o błędach jest wystarczające. Aby uzyskać więcej informacji, zobacz [Opis poziomu ochrony](~/docs/framework/wcf/understanding-protection-level.md).  
  
 Aby zwrócić określony błąd z operacji oznaczonej przez <xref:System.ServiceModel.FaultContractAttribute>, throw a <xref:System.ServiceModel.FaultException%601> (gdzie parametr typu jest możliwy do serializacji informacjami o błędzie), gdy zarządzany wyjątek występuje podczas operacji. Aplikacje klienckie programu WCF przestawią błąd protokołu SOAP jako ten sam typ, który został zgłoszony w implementacji klienta — to jest, <xref:System.ServiceModel.FaultException%601> jako (gdzie typeparameter to informacje o błędzie możliwym do serializacji). Można jej używać tylko do określania błędów SOAP dla operacji dwukierunkowej usługi i dla par operacji asynchronicznych; operacje jednokierunkowe nie obsługują błędów SOAP i dlatego nie są obsługiwane <xref:System.ServiceModel.FaultContractAttribute>. <xref:System.ServiceModel.FaultContractAttribute>  
  
> [!NOTE]
>  Do przekazywania informacji o błędach można użyć dowolnego typu możliwego do serializacji. Jedynym ograniczeniem w tej wersji programu WCF jest to, że typy określone <xref:System.ServiceModel.FaultContractAttribute> w elemencie musi być możliwy <xref:System.Runtime.Serialization.DataContractSerializer?displayProperty=nameWithType>do serializacji przez. Aby uzyskać pomoc <xref:System.Runtime.Serialization.DataContractSerializer> dotyczącą serializacji, zobacz [serializator kontraktu danych](~/docs/framework/wcf/feature-details/data-contract-serializer.md).  
  
 Na przykład, aby określić, że klienci mogą oczekiwać błędu protokołu SOAP, który <xref:System.Int32>zawiera, należy umieścić ten parametr typu <xref:System.ServiceModel.FaultContractAttribute> w metodzie usługi.  
  
> [!NOTE]
>  Poniższe przykłady kodu nie ustawiają <xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A>właściwości, <xref:System.ServiceModel.FaultContractAttribute.Name%2A>, ani <xref:System.ServiceModel.FaultContractAttribute.Namespace%2A> .  
  
 [!code-csharp[C_FCA#1](~/samples/snippets/csharp/VS_Snippets_CFX/c_fca/cs/fcademo.cs#1)]
 [!code-vb[C_FCA#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/c_fca/vb/fcademo.vb#1)]  
  
 Następnie w metodzie usługi throw nowe <xref:System.ServiceModel.FaultException%601> miejsce, gdzie parametr typu jest typem zawierającym informacje o błędzie (w powyższym przypadku, a <xref:System.Int32>). Na przykład:  
  
 [!code-csharp[C_FCA#2](~/samples/snippets/csharp/VS_Snippets_CFX/c_fca/cs/fcademo.cs#2)]
 [!code-vb[C_FCA#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/c_fca/vb/fcademo.vb#2)]  
  
 Poprzedni przykład jest bardzo podstawowy; prawie wszystkie informacje mogą być przesyłane przy użyciu <xref:System.Int32?displayProperty=nameWithType> kodu, więc ten typ szczegółów nie jest najbardziej użyteczny. Zazwyczaj aplikacje WCF określają błędy protokołu SOAP z typami szczegółowymi specyficznymi dla wymagań dotyczących informacji o błędach klienta. Aby zapoznać się z bardziej kompletnym przykładem, zapoznaj się z sekcją przykładową.  
  
> [!NOTE]
>  W przypadku określenia <xref:System.ServiceModel.FaultException%601> , gdzie parametr typu to a <xref:System.String?displayProperty=nameWithType>, wartość ciągu jest przypisywana do właściwości detail w aplikacji klienckiej. klienci nie mogą pobrać <xref:System.ServiceModel.FaultException%601.ToString%2A?displayProperty=nameWithType> tego ciągu przez wywołanie metody. Aby wartość ciągu była zwracana podczas wywoływania <xref:System.Exception.ToString%2A?displayProperty=nameWithType>aplikacji klienckiej, <xref:System.ServiceModel.FaultException?displayProperty=nameWithType> Zgłoś wyjątek wewnątrz operacji i przekaż ciąg do konstruktora.  
  
 Aby jawnie kontrolować zachowanie aplikacji w przypadku zgłoszenia <xref:System.ServiceModel.FaultException%601> wyjątku lub zgłaszania, należy <xref:System.ServiceModel.Dispatcher.IErrorHandler?displayProperty=nameWithType> zaimplementować interfejs <xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType>w <xref:System.ServiceModel.Description.IContractBehavior?displayProperty=nameWithType> lub <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType> i przypisać go do <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A?displayProperty=nameWithType> właściwości. <xref:System.ServiceModel.Dispatcher.IErrorHandler>umożliwia jawne sterowanie błędem protokołu SOAP, który jest generowany i czy ma być wysyłany z powrotem do klienta.  
  
 Aby ułatwić debugowanie, należy ustawić <xref:System.ServiceModel.ServiceBehaviorAttribute.IncludeExceptionDetailInFaults%2A?displayProperty=nameWithType> na `true` wartość w kodzie <xref:System.ServiceModel.Description.ServiceDebugBehavior.IncludeExceptionDetailInFaults%2A?displayProperty=nameWithType> lub użyć w pliku konfiguracyjnym aplikacji. Po włączeniu usługa automatycznie zwraca informacje o wyjątku do obiektu wywołującego. Te błędy pojawiają się na kliencie jako <xref:System.ServiceModel.FaultException> wyjątki.  
  
> [!IMPORTANT]
>  Ponieważ zarządzane wyjątki mogą uwidaczniać wewnętrzne informacje o aplikacji <xref:System.ServiceModel.ServiceBehaviorAttribute.IncludeExceptionDetailInFaults%2A?displayProperty=nameWithType> , <xref:System.ServiceModel.Description.ServiceDebugBehavior.IncludeExceptionDetailInFaults%2A?displayProperty=nameWithType> ustawienie `true` lub zezwalanie klientom WCF na uzyskanie informacji o wyjątkach operacji usługi wewnętrznej, w tym osobiście identyfikowalne lub inne poufne informacje.  
>   
>  W związku z <xref:System.ServiceModel.ServiceBehaviorAttribute.IncludeExceptionDetailInFaults%2A?displayProperty=nameWithType> tym <xref:System.ServiceModel.Description.ServiceDebugBehavior.IncludeExceptionDetailInFaults%2A?displayProperty=nameWithType> ustawienie `true` lub do jest zalecane tylko jako sposób tymczasowego debugowania aplikacji usługi. Ponadto WSDL dla metody, która zwraca Nieobsłużone wyjątki zarządzane w ten sposób, nie zawiera kontraktu dla <xref:System.ServiceModel.FaultException%601> typu. <xref:System.String> Klienci muszą oczekiwać wystąpienia nieznanego błędu protokołu SOAP (zwracanego do klientów programu <xref:System.ServiceModel.FaultException?displayProperty=nameWithType> WCF jako obiektów) w celu poprawnego uzyskania informacji o debugowaniu.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje użycie <xref:System.ServiceModel.FaultContractAttribute> , aby określić `SampleMethod` , że operacja może zwrócić błąd protokołu SOAP `GreetingFault`z typem szczegółowym.  
  
 [!code-csharp[FaultContractAttribute#1](~/samples/snippets/csharp/VS_Snippets_CFX/faultcontractattribute/cs/services.cs#1)]
 [!code-vb[FaultContractAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/faultcontractattribute/vb/services.vb#1)]  
  
 Poniższy przykład kodu pokazuje, że klienci programu WCF `ISampleService` widzą ten błąd protokołu SOAP <xref:System.ServiceModel.FaultException%601> jako typ `GreetingFault`.  
  
 [!code-csharp[FaultContractAttribute#3](~/samples/snippets/csharp/VS_Snippets_CFX/faultcontractattribute/cs/client.cs#3)]
 [!code-vb[FaultContractAttribute#3](~/samples/snippets/visualbasic/VS_Snippets_CFX/faultcontractattribute/vb/client.vb#3)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FaultContractAttribute (Type detailType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type detailType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.FaultContractAttribute.#ctor(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (detailType As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FaultContractAttribute(Type ^ detailType);" />
      <MemberSignature Language="F#" Value="new System.ServiceModel.FaultContractAttribute : Type -&gt; System.ServiceModel.FaultContractAttribute" Usage="new System.ServiceModel.FaultContractAttribute detailType" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="detailType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="detailType">Typ możliwy do serializacji, który zawiera informacje o błędzie dla obiektu wywołującego.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.ServiceModel.FaultContractAttribute" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Konstruktor jest zwykle wykonywany przez zastosowanie atrybutu do metody usługi i określenie typu jako argumentu w atrybucie.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje użycie <xref:System.ServiceModel.FaultContractAttribute> , aby określić `SampleMethod` , że operacja może zwrócić błąd protokołu SOAP `GreetingFault`z typem szczegółowym.  
  
 [!code-csharp[FaultContractAttribute#1](~/samples/snippets/csharp/VS_Snippets_CFX/faultcontractattribute/cs/services.cs#1)]
 [!code-vb[FaultContractAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/faultcontractattribute/vb/services.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Argument ma wartość <see langword="null" />. <paramref name="detailType" /></exception>
      </Docs>
    </Member>
    <Member MemberName="Action">
      <MemberSignature Language="C#" Value="public string Action { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Action" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.FaultContractAttribute.Action" />
      <MemberSignature Language="VB.NET" Value="Public Property Action As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Action { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Action : string with get, set" Usage="System.ServiceModel.FaultContractAttribute.Action" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia akcję komunikatu o błędzie protokołu SOAP, która jest określona jako część kontraktu operacji.</summary>
        <value>Wartość akcji dla komunikatu o błędzie protokołu SOAP.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Służy do sterowania akcją komunikatu o błędzie protokołu SOAP.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DetailType">
      <MemberSignature Language="C#" Value="public Type DetailType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type DetailType" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.FaultContractAttribute.DetailType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DetailType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ DetailType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DetailType : Type" Usage="System.ServiceModel.FaultContractAttribute.DetailType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera typ obiektu możliwego do serializacji, który zawiera informacje o błędzie.</summary>
        <value>Typ, który reprezentuje klasę błędu serializacji.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu pokazuje użycie <xref:System.ServiceModel.FaultContractAttribute> , aby określić `SampleMethod` , że operacja może zwrócić błąd protokołu SOAP `GreetingFault`z typem szczegółowym.  
  
 [!code-csharp[FaultContractAttribute#1](~/samples/snippets/csharp/VS_Snippets_CFX/faultcontractattribute/cs/services.cs#1)]
 [!code-vb[FaultContractAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/faultcontractattribute/vb/services.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasProtectionLevel">
      <MemberSignature Language="C#" Value="public bool HasProtectionLevel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasProtectionLevel" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.FaultContractAttribute.HasProtectionLevel" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasProtectionLevel As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasProtectionLevel { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasProtectionLevel : bool" Usage="System.ServiceModel.FaultContractAttribute.HasProtectionLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy komunikat o błędzie protokołu SOAP ma przypisany poziom ochrony.</summary>
        <value><see langword="true" />Jeśli komunikat o błędzie ma poziom ochrony; w przeciwnym razie. <see langword="false" /> Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceModel.FaultContractAttribute.HasProtectionLevel%2A> Użyj właściwości, aby określić, czy komunikat o błędzie protokołu SOAP musi być zaszyfrowany, podpisany lub oba. Aby uzyskać <xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A> szczegółowe informacje, zobacz Właściwość.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.FaultContractAttribute.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.ServiceModel.FaultContractAttribute.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia nazwę komunikatu o błędzie w Web Services Description Language (WSDL).</summary>
        <value>Nazwa komunikatu o błędzie. Wartość domyślna to nazwa typu używanego jako szczegóły błędu.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public string Namespace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Namespace" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.FaultContractAttribute.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public Property Namespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Namespace { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Namespace : string with get, set" Usage="System.ServiceModel.FaultContractAttribute.Namespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.5.0.1</AssemblyVersion>
        <AssemblyVersion>4.5.0.3</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia przestrzeń nazw SOAP Fault.</summary>
        <value>Przestrzeń nazw protokołu SOAP.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProtectionLevel">
      <MemberSignature Language="C#" Value="public System.Net.Security.ProtectionLevel ProtectionLevel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Net.Security.ProtectionLevel ProtectionLevel" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.FaultContractAttribute.ProtectionLevel" />
      <MemberSignature Language="VB.NET" Value="Public Property ProtectionLevel As ProtectionLevel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Security::ProtectionLevel ProtectionLevel { System::Net::Security::ProtectionLevel get(); void set(System::Net::Security::ProtectionLevel value); };" />
      <MemberSignature Language="F#" Value="member this.ProtectionLevel : System.Net.Security.ProtectionLevel with get, set" Usage="System.ServiceModel.FaultContractAttribute.ProtectionLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.Security.ProtectionLevel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Określa poziom ochrony wymagany przez błąd protokołu SOAP z powiązania.</summary>
        <value>Jedna z <see cref="T:System.Net.Security.ProtectionLevel" /> wartości. Wartość domyślna to <see cref="F:System.Net.Security.ProtectionLevel.None" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj właściwości <xref:System.ServiceModel.Description.FaultDescription.ProtectionLevel%2A?displayProperty=nameWithType> , aby określić stopień, w jakim powiązanie musi być szyfrowane, podpisywanie lub oba podczas wysyłania błędu SOAP. Zdecydowanie zaleca się, aby błąd operacji jawnie decydować o wymaganiach dotyczących poziomu ochrony zabezpieczeń w ramach kontraktu. Domyślnym poziomem ochrony jest <xref:System.Net.Security.ProtectionLevel.None?displayProperty=nameWithType>, co oznacza, że definiowany przez użytkownika komunikat o błędzie protokołu SOAP nie wymaga szyfrowania ani podpisu cyfrowego (mimo że powiązanie może zapewnić tę pomoc, jeśli jest ono skonfigurowane w ten sposób). Jeśli komunikat o błędzie zawiera informacje, które są poufne lub mogą prowadzić do problemów z zabezpieczeniami, zdecydowanie zaleca <xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A> się, aby właściwość została ustawiona na. <xref:System.Net.Security.ProtectionLevel.EncryptAndSign?displayProperty=nameWithType> Aby uzyskać więcej informacji o problemach z zabezpieczeniami, zobacz [Opis poziomu ochrony](~/docs/framework/wcf/understanding-protection-level.md).  
  
 Zachowanie ochrony w czasie wykonywania jest kombinacją właściwości poziomu ochrony, które mają hierarchiczną strukturę. Ustawienie skrajnej wartości określa ustawienie domyślne dla wszystkich zakresów węższych, chyba że zostanie jawnie ustawiona inna wartość dla węższego zakresu. W takim przypadku wartość zewnętrzna pozostaje wartością domyślną dla wszystkich zakresów węższych, z wyjątkiem tego, które zostały określone.  
  
 Na przykład jeśli <xref:System.ServiceModel.ServiceContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType> jest ustawiona na <xref:System.Net.Security.ProtectionLevel.EncryptAndSign?displayProperty=nameWithType> , a żadne inne węższe zakresy nie mają ustawień poziomu ochrony, wszystkie komunikaty w kontrakcie operacji są szyfrowane i podpisane, w tym komunikaty o błędach. Jeśli jednak jedna z tych operacji ma <xref:System.ServiceModel.OperationContractAttribute> <xref:System.Net.Security.ProtectionLevel.Sign?displayProperty=nameWithType>ustawioną wartość, wówczas komunikaty dla tej operacji są podpisane, ale wszystkie inne komunikaty w kontrakcie są szyfrowane i podpisywane, w tym komunikaty o błędach.  
  
 Zakresy, w których są ustawiane te wartości:  
  
 <xref:System.ServiceModel.ServiceContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType>  
  
 <xref:System.ServiceModel.OperationContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType>  
  
 <xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType>  
  
 <xref:System.ServiceModel.MessageContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType>  
  
 <xref:System.ServiceModel.MessageContractMemberAttribute.ProtectionLevel%2A?displayProperty=nameWithType> Właściwość w<xref:System.ServiceModel.MessageHeaderAttribute?displayProperty=nameWithType>.  
  
 <xref:System.ServiceModel.MessageContractMemberAttribute.ProtectionLevel%2A?displayProperty=nameWithType> Właściwość w<xref:System.ServiceModel.MessageBodyMemberAttribute?displayProperty=nameWithType>.  
  
 Jeśli w umowie nie określono żadnego poziomu ochrony, a powiązanie bazowe obsługuje zabezpieczenia (na poziomie transportu lub wiadomości), obowiązuje poziom ochrony dla całego kontraktu <xref:System.Net.Security.ProtectionLevel.EncryptAndSign?displayProperty=nameWithType>. Jeśli powiązanie nie obsługuje zabezpieczeń (np <xref:System.ServiceModel.BasicHttpBinding>.), <xref:System.Net.Security.ProtectionLevel.None?displayProperty=nameWithType> obowiązuje <xref:System.Net.Security.ProtectionLevel?displayProperty=nameWithType> dla całego kontraktu. Wynika to z tego, że w zależności od powiązania punktu końcowego klienci mogą wymagać innej ochrony komunikatów lub zabezpieczeń na poziomie transportu nawet wtedy, <xref:System.Net.Security.ProtectionLevel.None?displayProperty=nameWithType>gdy kontrakt określi.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
