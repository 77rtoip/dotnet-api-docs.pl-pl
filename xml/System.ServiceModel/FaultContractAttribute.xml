<Type Name="FaultContractAttribute" FullName="System.ServiceModel.FaultContractAttribute">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="da23cb7f48282db4b2d167dc90f5f9052c7c6dbd" />
    <Meta Name="ms.sourcegitcommit" Value="0d6aa6694f157a08fe52cd25b4d9d3dcf913e812" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="10/12/2018" />
    <Meta Name="ms.locfileid" Value="49157384" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class FaultContractAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit FaultContractAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.FaultContractAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class FaultContractAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class FaultContractAttribute sealed : Attribute" />
  <TypeSignature Language="F#" Value="type FaultContractAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;dotnet-plat-ext-2.1">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Method, AllowMultiple=true, Inherited=false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Określa błędach SOAP, które są zwracane, gdy operacja usługi napotka błędy przetwarzania.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Oznacz operację, używając <xref:System.ServiceModel.FaultContractAttribute> Zadeklaruj jeden atrybut lub bardziej szczegółowe warunków wyjątków, które są dodawane do usługi Web Service Description Language (WSDL) opis operacji usługi jako jawne SOAP błędów komunikaty zwracane przez operację.  
  
 We wszystkich aplikacjach zarządzanych błędy przetwarzania są reprezentowane przez <xref:System.Exception> obiektów. W aplikacji opartej na protokole SOAP, takich jak aplikacje Windows Communication Foundation (WCF) metody usługi komunikują się przy użyciu protokołu SOAP wiadomości błędu informacje o błędzie przetwarzania. Ponieważ aplikacji WCF w ramach obu rodzajów błędów systemów, informacje o zarządzanym wyjątku, który należy wysłać do klienta należy przekonwertować z wyjątków w błędach SOAP. Możesz użyć zachowań wyjątek usługi domyślne lub jawnie kontrolować, czy — i w jaki sposób — wyjątki są mapowane na komunikaty o błędach. Omówienie wyjątków i błędów protokołu SOAP w aplikacjach usługi WCF, zobacz [określanie i obsługa błędów w kontraktach i usługach](~/docs/framework/wcf/specifying-and-handling-faults-in-contracts-and-services.md).  
  
 Zalecane jest, że operacje usług używać <xref:System.ServiceModel.FaultContractAttribute> formalnie określić wszystkie błędy protokołu SOAP, które klient może oczekiwać w trakcie normalnego przebiegu operacji. Zalecane jest również, że te informacje, które klient musi wiedzieć, jest zwracany w błąd protokołu SOAP, aby zminimalizować ujawnienie informacji.  
  
-   <xref:System.ServiceModel.FaultContractAttribute.Action%2A> Właściwość kontroluje akcji komunikat o błędzie.  
  
-   <xref:System.ServiceModel.FaultContractAttribute.DetailType%2A> Właściwości pobiera typ obiektu szczegóły zserializowane w komunikat o błędzie.  
  
-   <xref:System.ServiceModel.FaultContractAttribute.Name%2A> i <xref:System.ServiceModel.FaultContractAttribute.Namespace%2A> właściwości formantu nazwę i przestrzeń nazw, odpowiednio, z komunikat o błędzie.  
  
-   <xref:System.ServiceModel.FaultContractAttribute.HasProtectionLevel%2A> Wskazuje, czy komunikat o błędzie zawiera określony poziom ochrony i <xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A> właściwość określa, że poziom ochrony.  
  
> [!CAUTION]
>  Jeśli komunikat o błędzie niesie ze sobą informacje poufne lub może prowadzić do problemów z bezpieczeństwem, zdecydowanie zalecane jest <xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A> można ustawić właściwości.  
  
-   Jeśli ustawisz <xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A> jawnie na wartość <xref:System.Net.Security.ProtectionLevel.Sign?displayProperty=nameWithType> lub <xref:System.Net.Security.ProtectionLevel.EncryptAndSign?displayProperty=nameWithType>, należy użyć powiązania z zabezpieczeniami, włączone za pomocą <xref:System.ServiceModel.SecurityMode?displayProperty=nameWithType> właściwości binding lub wyjątek jest zgłaszany.  
  
-   Po wybraniu powiązanie, które zapewnia bezpieczeństwo i nie należy ustawiać <xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A> właściwość dowolne miejsce na kontrakt wszystkich aplikacji, danych zostanie zaszyfrowana i podpisana.  
  
-   W przypadku wybrania powiązania, który nie ma włączoną obsługą zabezpieczeń (na przykład <xref:System.ServiceModel.BasicHttpBinding?displayProperty=nameWithType> ma zabezpieczenia domyślnie wyłączone) i <xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A> nie jest jawnie określona, a następnie żadne dane aplikacji będą chronione.  
  
 Umożliwia obsługę wielu scenariuszy ustawienie <xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A> do <xref:System.Net.Security.ProtectionLevel.EncryptAndSign> winy wiadomości jest wystarczająca. Aby uzyskać więcej informacji, zobacz [zrozumieć poziom ochrony](~/docs/framework/wcf/understanding-protection-level.md).  
  
 Do zwrócenia określonego błędu z operacją oznaczone <xref:System.ServiceModel.FaultContractAttribute>, throw <xref:System.ServiceModel.FaultException%601> (gdzie parametr typu jest informacje o błędzie do serializacji) gdy zarządzany wyjątek występuje podczas operacji. Aplikacje klienta WCF powierzchni błąd protokołu SOAP jako ten sam typ, jak został zgłoszony w implementacji klienta — oznacza to, jak <xref:System.ServiceModel.FaultException%601> (gdzie typeparameter to informacje o błędzie do serializacji). <xref:System.ServiceModel.FaultContractAttribute> Mogą być używane tylko do określenia SOAP błędów dla operacji dwukierunkowe usługi i operacji asynchronicznej pary; operacje jednokierunkowe nie obsługują błędach SOAP i dlatego nie obsługują <xref:System.ServiceModel.FaultContractAttribute>.  
  
> [!NOTE]
>  Można użyć dowolnego typu serializacji w celu przekazania informacji o błędzie. Jedynym ograniczeniem w tej wersji programu WCF jest, czy typy określone w <xref:System.ServiceModel.FaultContractAttribute> muszą podlegać serializacji przez <xref:System.Runtime.Serialization.DataContractSerializer?displayProperty=nameWithType>. Obsługa serializacji <xref:System.Runtime.Serialization.DataContractSerializer> udostępnia, zobacz [serializator kontraktu danych](~/docs/framework/wcf/feature-details/data-contract-serializer.md).  
  
 Na przykład, aby określić, czy klienci mogą oczekiwać błędów protokołu SOAP, który zawiera <xref:System.Int32>, umieść ten parametr typu w <xref:System.ServiceModel.FaultContractAttribute> na metodę usługi.  
  
> [!NOTE]
>  Poniższe przykłady kodu nie należy ustawiać <xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A>, <xref:System.ServiceModel.FaultContractAttribute.Name%2A>, lub <xref:System.ServiceModel.FaultContractAttribute.Namespace%2A> właściwości.  
  
 [!code-csharp[C_FCA#1](~/samples/snippets/csharp/VS_Snippets_CFX/c_fca/cs/fcademo.cs#1)]
 [!code-vb[C_FCA#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/c_fca/vb/fcademo.vb#1)]  
  
 Następnie, w metodzie usługi, generują nowy <xref:System.ServiceModel.FaultException%601> gdzie parametr typu jest typ, który zawiera informacje o błędzie (w przypadku powyższych <xref:System.Int32>). Na przykład:  
  
 [!code-csharp[C_FCA#2](~/samples/snippets/csharp/VS_Snippets_CFX/c_fca/cs/fcademo.cs#2)]
 [!code-vb[C_FCA#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/c_fca/vb/fcademo.vb#2)]  
  
 Poprzedni przykład jest bardzo podstawowy; niemal dowolne informacje mogą być przekazywane za pomocą <xref:System.Int32?displayProperty=nameWithType> kod, dlatego ten typ szczegółów nie jest najbardziej przydatne. Zazwyczaj aplikacji WCF Określ błędach SOAP z typami szczegóły specyficzne dla wymagań dotyczących informacji błąd klienta. Bardziej kompletny przykład znajduje się w sekcji przykład.  
  
> [!NOTE]
>  Jeśli określisz <xref:System.ServiceModel.FaultException%601> gdzie parametr typu jest <xref:System.String?displayProperty=nameWithType>, wartość ciągu jest przypisywane do właściwości szczegółów w aplikacji klienckiej; klienci nie mogą pobrać ciąg przez wywołanie metody <xref:System.ServiceModel.FaultException%601.ToString%2A?displayProperty=nameWithType> metody. Powoduje, że wartość ciągu zwracane, gdy aplikacja klient wywołuje <xref:System.Exception.ToString%2A?displayProperty=nameWithType>, throw <xref:System.ServiceModel.FaultException?displayProperty=nameWithType> wyjątek w operacji i przekazać ciągu do konstruktora.  
  
 Aby jawnie kontrolować zachowanie aplikacji, gdy wyjątek lub <xref:System.ServiceModel.FaultException%601> jest zgłaszany, implementować <xref:System.ServiceModel.Dispatcher.IErrorHandler?displayProperty=nameWithType> interfejsu na <xref:System.ServiceModel.Description.IServiceBehavior?displayProperty=nameWithType>, <xref:System.ServiceModel.Description.IContractBehavior?displayProperty=nameWithType> lub <xref:System.ServiceModel.Description.IEndpointBehavior?displayProperty=nameWithType> i przypisz ją do <xref:System.ServiceModel.Dispatcher.ChannelDispatcher.ErrorHandlers%2A?displayProperty=nameWithType> właściwości. <xref:System.ServiceModel.Dispatcher.IErrorHandler> Umożliwia, aby jawnie kontrolować błąd protokołu SOAP, który jest generowany i czy do wysłania do klienta.  
  
 W celu ułatwienia debugowania, ustaw <xref:System.ServiceModel.ServiceBehaviorAttribute.IncludeExceptionDetailInFaults%2A?displayProperty=nameWithType> do `true` w kodzie, lub możesz użyć <xref:System.ServiceModel.Description.ServiceDebugBehavior.IncludeExceptionDetailInFaults%2A?displayProperty=nameWithType> w pliku konfiguracji aplikacji. Po włączeniu usługa automatycznie zwraca informacje o wyjątku do obiektu wywołującego. Te błędy są wyświetlane do klienta jako <xref:System.ServiceModel.FaultException> wyjątków.  
  
> [!IMPORTANT]
>  Ponieważ zarządzane wyjątki mogą ujawniać informacje o wewnętrznych aplikacji, ustawienie <xref:System.ServiceModel.ServiceBehaviorAttribute.IncludeExceptionDetailInFaults%2A?displayProperty=nameWithType> lub <xref:System.ServiceModel.Description.ServiceDebugBehavior.IncludeExceptionDetailInFaults%2A?displayProperty=nameWithType> do `true` może pozwolić na WCF klientom uzyskanie informacji o wyjątkach operację usługi wewnętrznej, w tym osobiście danych osobowych lub inne poufne informacje.  
>   
>  W związku z tym, ustawienie <xref:System.ServiceModel.ServiceBehaviorAttribute.IncludeExceptionDetailInFaults%2A?displayProperty=nameWithType> lub <xref:System.ServiceModel.Description.ServiceDebugBehavior.IncludeExceptionDetailInFaults%2A?displayProperty=nameWithType> do `true` jest zalecane tylko jako sposób tymczasowo debugowania aplikacji usługi. Ponadto pliku WSDL dla zarządzanych przy użyciu metody, która zwraca nieobsługiwanych wyjątków w ten sposób nie zawiera kontrakt dla <xref:System.ServiceModel.FaultException%601> typu <xref:System.String>. Klienci muszą oczekują możliwości nieznany błąd protokołu SOAP (zwracane do klientów programu WCF jako <xref:System.ServiceModel.FaultException?displayProperty=nameWithType> obiektów) Aby uzyskać informacje o debugowaniu prawidłowo.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje użycie <xref:System.ServiceModel.FaultContractAttribute> Aby określić, że `SampleMethod` operacji może zwrócić błąd protokołu SOAP z typem szczegółów `GreetingFault`.  
  
 [!code-csharp[FaultContractAttribute#1](~/samples/snippets/csharp/VS_Snippets_CFX/faultcontractattribute/cs/services.cs#1)]
 [!code-vb[FaultContractAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/faultcontractattribute/vb/services.vb#1)]  
  
 Poniższy przykład kodu pokazuje, że klienci WCF `ISampleService` występuje ten błąd protokołu SOAP, jako <xref:System.ServiceModel.FaultException%601> typu `GreetingFault`.  
  
 [!code-csharp[FaultContractAttribute#3](~/samples/snippets/csharp/VS_Snippets_CFX/faultcontractattribute/cs/client.cs#3)]
 [!code-vb[FaultContractAttribute#3](~/samples/snippets/visualbasic/VS_Snippets_CFX/faultcontractattribute/vb/client.vb#3)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public FaultContractAttribute (Type detailType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type detailType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.FaultContractAttribute.#ctor(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (detailType As Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; FaultContractAttribute(Type ^ detailType);" />
      <MemberSignature Language="F#" Value="new System.ServiceModel.FaultContractAttribute : Type -&gt; System.ServiceModel.FaultContractAttribute" Usage="new System.ServiceModel.FaultContractAttribute detailType" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="detailType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="detailType">Można serializować typu, który zawiera informacje o błędzie do obiektu wywołującego.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.ServiceModel.FaultContractAttribute" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Konstruktor jest zwykle wykonywany stosowanie atrybutu do metody usługi i określając typ jako argument w atrybucie.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje użycie <xref:System.ServiceModel.FaultContractAttribute> Aby określić, że `SampleMethod` operacji może zwrócić błąd protokołu SOAP z typem szczegółów `GreetingFault`.  
  
 [!code-csharp[FaultContractAttribute#1](~/samples/snippets/csharp/VS_Snippets_CFX/faultcontractattribute/cs/services.cs#1)]
 [!code-vb[FaultContractAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/faultcontractattribute/vb/services.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="detailType" /> Argument jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Action">
      <MemberSignature Language="C#" Value="public string Action { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Action" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.FaultContractAttribute.Action" />
      <MemberSignature Language="VB.NET" Value="Public Property Action As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Action { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Action : string with get, set" Usage="System.ServiceModel.FaultContractAttribute.Action" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia akcję komunikat o błędzie protokołu SOAP, który jest określony jako część kontrakt operacji.</summary>
        <value>Wartość akcji dla komunikatu błędu SOAP.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Służy do sterowania akcji komunikat o błędzie protokołu SOAP.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DetailType">
      <MemberSignature Language="C#" Value="public Type DetailType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type DetailType" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.FaultContractAttribute.DetailType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DetailType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ DetailType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DetailType : Type" Usage="System.ServiceModel.FaultContractAttribute.DetailType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera typ obiektu podlegającego serializacji, który zawiera informacje o błędzie.</summary>
        <value>Typ, który reprezentuje klasę błędu serializacji.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu pokazuje użycie <xref:System.ServiceModel.FaultContractAttribute> Aby określić, że `SampleMethod` operacji może zwrócić błąd protokołu SOAP z typem szczegółów `GreetingFault`.  
  
 [!code-csharp[FaultContractAttribute#1](~/samples/snippets/csharp/VS_Snippets_CFX/faultcontractattribute/cs/services.cs#1)]
 [!code-vb[FaultContractAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/faultcontractattribute/vb/services.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasProtectionLevel">
      <MemberSignature Language="C#" Value="public bool HasProtectionLevel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasProtectionLevel" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.FaultContractAttribute.HasProtectionLevel" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasProtectionLevel As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasProtectionLevel { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasProtectionLevel : bool" Usage="System.ServiceModel.FaultContractAttribute.HasProtectionLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy komunikat o błędzie protokołu SOAP ma przypisany poziom ochrony.</summary>
        <value>
          <see langword="true" /> Jeśli komunikat o błędzie ma poziom ochrony; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.ServiceModel.FaultContractAttribute.HasProtectionLevel%2A> właściwości w celu określenia, czy komunikat o błędzie protokołu SOAP musi być szyfrowana, podpisany, lub obu. Zobacz <xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A> właściwości, aby uzyskać szczegółowe informacje.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.FaultContractAttribute.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.ServiceModel.FaultContractAttribute.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia nazwę komunikat o błędzie w sieci Web Services Description Language (WSDL).</summary>
        <value>Nazwa komunikatu błędu. Wartość domyślna to nazwa typu, używany jako szczegóły błędów.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public string Namespace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Namespace" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.FaultContractAttribute.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public Property Namespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Namespace { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Namespace : string with get, set" Usage="System.ServiceModel.FaultContractAttribute.Namespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia obszar nazw błąd protokołu SOAP.</summary>
        <value>Przestrzeń nazw błąd protokołu SOAP.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ProtectionLevel">
      <MemberSignature Language="C#" Value="public System.Net.Security.ProtectionLevel ProtectionLevel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Net.Security.ProtectionLevel ProtectionLevel" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.FaultContractAttribute.ProtectionLevel" />
      <MemberSignature Language="VB.NET" Value="Public Property ProtectionLevel As ProtectionLevel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Security::ProtectionLevel ProtectionLevel { System::Net::Security::ProtectionLevel get(); void set(System::Net::Security::ProtectionLevel value); };" />
      <MemberSignature Language="F#" Value="member this.ProtectionLevel : System.Net.Security.ProtectionLevel with get, set" Usage="System.ServiceModel.FaultContractAttribute.ProtectionLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.Security.ProtectionLevel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Określa poziom ochrony, wymaganych przez błąd protokołu SOAP z wiązania.</summary>
        <value>Jedną z <see cref="T:System.Net.Security.ProtectionLevel" /> wartości. Wartość domyślna to <see cref="F:System.Net.Security.ProtectionLevel.None" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.ServiceModel.Description.FaultDescription.ProtectionLevel%2A?displayProperty=nameWithType> właściwość, aby określić stopień, w której powiązanie należy szyfrować, zaloguj się i / lub wysyłając błąd protokołu SOAP. Zdecydowanie zaleca się, błąd operacji jawnie zdecydować ochrony poziomu wymagania dotyczące zabezpieczeń w umowie. Domyślny poziom ochrony jest <xref:System.Net.Security.ProtectionLevel.None?displayProperty=nameWithType>, co oznacza, że komunikat o błędzie protokołu SOAP, definiujesz nie wymaga szyfrowania lub podpis cyfrowy (chociaż Twoje powiązanie może dostarczyć tej obsługi, jeśli jest skonfigurowana, aby to zrobić). Jeśli komunikat o błędzie niesie ze sobą informacje poufne lub może prowadzić do problemów z bezpieczeństwem, zdecydowanie zalecane jest, <xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A> można ustawić właściwości <xref:System.Net.Security.ProtectionLevel.EncryptAndSign?displayProperty=nameWithType>. Aby uzyskać więcej informacji dotyczących problemów z zabezpieczeniami, zobacz [zrozumieć poziom ochrony](~/docs/framework/wcf/understanding-protection-level.md).  
  
 Zachowania w zakresie ochrony w czasie wykonywania jest kombinacją właściwości poziomu ochrony, które mają strukturę hierarchiczną. Ustawienie wartości peryferyjnych ustanawia ustawienie domyślne dla wszystkich zakresów mniejszą niż, chyba że jawnie ustawiono inną wartość dla węższy zakres. W tym przypadku zewnętrzny wartość pozostaje domyślnego dla wszystkich mniejszą niż zakresów, z wyjątkiem ustawione to inaczej.  
  
 Na przykład jeśli <xref:System.ServiceModel.ServiceContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType> ustawiono <xref:System.Net.Security.ProtectionLevel.EncryptAndSign?displayProperty=nameWithType> i inne zakresy mniejszą niż ma ustawienia poziomu ochrony, wszystkie komunikaty w kontrakt operacji czy zaszyfrowana i podpisana, w tym komunikaty o błędach. Jeśli jednak ma jedną z tych operacji <xref:System.ServiceModel.OperationContractAttribute> równa <xref:System.Net.Security.ProtectionLevel.Sign?displayProperty=nameWithType>, następnie komunikatów dla tej operacji są podpisane, ale wszystkie inne komunikaty w kontrakcie czy zaszyfrowana i podpisana, w tym komunikaty o błędach.  
  
 Zakresy, w których te wartości są ustawiane są następujące:  
  
 <xref:System.ServiceModel.ServiceContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType>  
  
 <xref:System.ServiceModel.OperationContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType>  
  
 <xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType>  
  
 <xref:System.ServiceModel.MessageContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType>  
  
 <xref:System.ServiceModel.MessageContractMemberAttribute.ProtectionLevel%2A?displayProperty=nameWithType> Właściwość <xref:System.ServiceModel.MessageHeaderAttribute?displayProperty=nameWithType>.  
  
 <xref:System.ServiceModel.MessageContractMemberAttribute.ProtectionLevel%2A?displayProperty=nameWithType> Właściwość <xref:System.ServiceModel.MessageBodyMemberAttribute?displayProperty=nameWithType>.  
  
 Jeśli występuje żaden poziom ochrony jawnie określone w umowie bazowego powiązanie obsługuje zabezpieczenia, (zarówno na poziomie transportu lub wiadomości), poziom skuteczną ochronę całej umowy jest <xref:System.Net.Security.ProtectionLevel.EncryptAndSign?displayProperty=nameWithType>. Jeśli wiązanie nie obsługuje zabezpieczeń (takich jak <xref:System.ServiceModel.BasicHttpBinding>), obowiązującą <xref:System.Net.Security.ProtectionLevel?displayProperty=nameWithType> jest <xref:System.Net.Security.ProtectionLevel.None?displayProperty=nameWithType> dla całej umowy. Wynik jest, że zależą od powiązania punktu końcowego, klienci mogą wymagają różnych ochrony zabezpieczeń na poziomie komunikatu lub transportu, nawet wtedy, gdy kontrakt Określa <xref:System.Net.Security.ProtectionLevel.None?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>