<Type Name="ConcurrencyMode" FullName="System.ServiceModel.ConcurrencyMode">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b0587fcb8009be11754769f2ed4c60a6553c4d22" />
    <Meta Name="ms.sourcegitcommit" Value="3907f9a5780957d9c85af2e54c0a5bc2a5bf19ab" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/14/2018" />
    <Meta Name="ms.locfileid" Value="34313853" />
  </Metadata>
  <TypeSignature Language="C#" Value="public enum ConcurrencyMode" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ConcurrencyMode extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.ConcurrencyMode" />
  <TypeSignature Language="VB.NET" Value="Public Enum ConcurrencyMode" />
  <TypeSignature Language="C++ CLI" Value="public enum class ConcurrencyMode" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary>
      <span data-ttu-id="baddc-101">Określa, czy klasa usługi obsługuje jednowątkowe lub wielowątkowych tryby pracy.</span>
      <span class="sxs-lookup">
        <span data-stu-id="baddc-101">Specifies whether a service class supports single-threaded or multi-threaded modes of operation.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="baddc-102"><xref:System.ServiceModel.ConcurrencyMode> jest używany w połączeniu z <xref:System.ServiceModel.ServiceBehaviorAttribute.ConcurrencyMode%2A> właściwości w celu określenia, czy klasa usługi obsługuje jednowątkowe lub wielowątkowych tryby pracy.</span><span class="sxs-lookup"><span data-stu-id="baddc-102"><xref:System.ServiceModel.ConcurrencyMode> is used in conjunction with the <xref:System.ServiceModel.ServiceBehaviorAttribute.ConcurrencyMode%2A> property to specify whether a service class supports single-threaded or multi-threaded modes of operation.</span></span> <span data-ttu-id="baddc-103">Operacji jednowątkowej może być współużytkowane ani nie obsługującą.</span><span class="sxs-lookup"><span data-stu-id="baddc-103">A single-threaded operation can be either reentrant or non-reentrant.</span></span>  
  
 <span data-ttu-id="baddc-104">W poniższej tabeli przedstawiono po Windows Communication Foundation (WCF) zezwala na operację wywoływanej podczas innego jedną jest w toku, w zależności od <xref:System.ServiceModel.ConcurrencyMode>.</span><span class="sxs-lookup"><span data-stu-id="baddc-104">The following table shows when Windows Communication Foundation (WCF) permits an operation to be invoked while another one is in progress, depending upon the <xref:System.ServiceModel.ConcurrencyMode>.</span></span>  
  
|<span data-ttu-id="baddc-105">Wartość ConcurrencyMode</span><span class="sxs-lookup"><span data-stu-id="baddc-105">ConcurrencyMode Value</span></span>|<span data-ttu-id="baddc-106">Może być wywoływany nową operację?</span><span class="sxs-lookup"><span data-stu-id="baddc-106">Can a new operation be invoked?</span></span>|  
|---------------------------|-------------------------------------|  
|<span data-ttu-id="baddc-107">Single</span><span class="sxs-lookup"><span data-stu-id="baddc-107">Single</span></span>|<span data-ttu-id="baddc-108">Nigdy nie.</span><span class="sxs-lookup"><span data-stu-id="baddc-108">Never.</span></span>|  
|<span data-ttu-id="baddc-109">Procedura wielobieżna</span><span class="sxs-lookup"><span data-stu-id="baddc-109">Reentrant</span></span>|<span data-ttu-id="baddc-110">Tylko podczas wywoływania inną usługę lub wywołania zwrotnego.</span><span class="sxs-lookup"><span data-stu-id="baddc-110">Only while invoking another service or a callback.</span></span>|  
|<span data-ttu-id="baddc-111">Wielokrotne</span><span class="sxs-lookup"><span data-stu-id="baddc-111">Multiple</span></span>|<span data-ttu-id="baddc-112">Zawsze.</span><span class="sxs-lookup"><span data-stu-id="baddc-112">Always.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="baddc-113">Poniższy przykład kodu pokazuje różnic między przy użyciu pojedynczej, współużytkowanej współbieżności i wielu.</span><span class="sxs-lookup"><span data-stu-id="baddc-113">The following code example demonstrates the different between using Single, Reentrant, and Multiple.</span></span> <span data-ttu-id="baddc-114">W tym przykładzie nie kompiluje się bez rzeczywistego wykonania za nią, ale pokazują rodzaj wątkowość gwarantuje, że ułatwia WCF i który znaczenia dla kodu operacji.</span><span class="sxs-lookup"><span data-stu-id="baddc-114">This sample does not compile without a real implementation behind it, but does demonstrate the kind of threading guarantees that WCF makes and what that means for your operation code.</span></span>  
  
 [!code-csharp[C_BestPractices-Concurrency#1](~/samples/snippets/csharp/VS_Snippets_CFX/c_bestpractices-concurrency/cs/reentrantandmultiple.cs#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Multiple">
      <MemberSignature Language="C#" Value="Multiple" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.ServiceModel.ConcurrencyMode Multiple = int32(2)" />
      <MemberSignature Language="DocId" Value="F:System.ServiceModel.ConcurrencyMode.Multiple" />
      <MemberSignature Language="VB.NET" Value="Multiple" />
      <MemberSignature Language="C++ CLI" Value="Multiple" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.ConcurrencyMode</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>
          <span data-ttu-id="baddc-115">Wystąpienie usługi będzie wielowątkowych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="baddc-115">The service instance is multi-threaded.</span>
          </span>
          <span data-ttu-id="baddc-116">Nie gwarantuje synchronizacji zostały wprowadzone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="baddc-116">No synchronization guarantees are made.</span>
          </span>
          <span data-ttu-id="baddc-117">Nie ma innych wątków można zmienić obiektu usługi w dowolnym momencie, musi obsługiwać synchronizacji i stan spójności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="baddc-117">Because other threads can change your service object at any time, you must handle synchronization and state consistency at all times.</span>
          </span>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Reentrant">
      <MemberSignature Language="C#" Value="Reentrant" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.ServiceModel.ConcurrencyMode Reentrant = int32(1)" />
      <MemberSignature Language="DocId" Value="F:System.ServiceModel.ConcurrencyMode.Reentrant" />
      <MemberSignature Language="VB.NET" Value="Reentrant" />
      <MemberSignature Language="C++ CLI" Value="Reentrant" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.ConcurrencyMode</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>
          <span data-ttu-id="baddc-118">Wystąpienie usługi jest jednowątkowy i akceptuje wywołania współużytkowane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="baddc-118">The service instance is single-threaded and accepts reentrant calls.</span>
          </span>
          <span data-ttu-id="baddc-119">Usługa współużytkowane akceptuje wywołań podczas wywoływania innego usługi; Dlatego obowiązek pozostaw Nazwa stanu obiektu spójne przed objaśnienia i musisz potwierdzić, że dane lokalne operacji jest ważne po objaśnienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="baddc-119">The reentrant service accepts calls when you call another service; it is therefore your responsibility to leave your object state consistent before callouts and you must confirm that operation-local data is valid after callouts.</span>
          </span>
          <span data-ttu-id="baddc-120">Należy pamiętać, że wystąpienie usługi jest odblokowana tylko wywołując innej usługi za pośrednictwem kanału WCF.</span>
          <span class="sxs-lookup">
            <span data-stu-id="baddc-120">Note that the service instance is unlocked only by calling another service over a WCF channel.</span>
          </span>
          <span data-ttu-id="baddc-121">W takim przypadku usługa o nazwie można ponownie pierwszej usługi za pośrednictwem wywołania zwrotnego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="baddc-121">In this case, the called service can reenter the first service via a callback.</span>
          </span>
          <span data-ttu-id="baddc-122">Jeśli pierwsza usługa nie jest współużytkowane, sekwencję wywołań powoduje zakleszczenie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="baddc-122">If the first service is not reentrant, the sequence of calls results in a deadlock.</span>
          </span>
          <span data-ttu-id="baddc-123">Aby uzyskać więcej informacji, zobacz <see cref="P:System.ServiceModel.ServiceBehaviorAttribute.ConcurrencyMode" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="baddc-123">For details, see <see cref="P:System.ServiceModel.ServiceBehaviorAttribute.ConcurrencyMode" />.</span>
          </span>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Single">
      <MemberSignature Language="C#" Value="Single" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.ServiceModel.ConcurrencyMode Single = int32(0)" />
      <MemberSignature Language="DocId" Value="F:System.ServiceModel.ConcurrencyMode.Single" />
      <MemberSignature Language="VB.NET" Value="Single" />
      <MemberSignature Language="C++ CLI" Value="Single" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.ConcurrencyMode</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>
          <span data-ttu-id="baddc-124">Wystąpienie usługi jest jednowątkowy i nie akceptuje wywołania współużytkowane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="baddc-124">The service instance is single-threaded and does not accept reentrant calls.</span>
          </span>
          <span data-ttu-id="baddc-125">Jeśli <see cref="P:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode" /> właściwość jest <see cref="F:System.ServiceModel.InstanceContextMode.Single" />i dodatkowych komunikatów przychodzących podczas, gdy wystąpienie usługi wywołanie, te komunikaty musi poczekać, aż usługa jest dostępna aż lub limit czasu wiadomości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="baddc-125">If the <see cref="P:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode" /> property is <see cref="F:System.ServiceModel.InstanceContextMode.Single" />, and additional messages arrive while the instance services a call, these messages must wait until the service is available or until the messages time out.</span>
          </span>
        </summary>
      </Docs>
    </Member>
  </Members>
</Type>