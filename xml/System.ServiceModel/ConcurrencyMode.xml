<Type Name="ConcurrencyMode" FullName="System.ServiceModel.ConcurrencyMode">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b794f216ceaa7c6fce1828d6ee563ec907867be6" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="08/24/2018" />
    <Meta Name="ms.locfileid" Value="37451376" />
  </Metadata>
  <TypeSignature Language="C#" Value="public enum ConcurrencyMode" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ConcurrencyMode extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.ConcurrencyMode" />
  <TypeSignature Language="VB.NET" Value="Public Enum ConcurrencyMode" />
  <TypeSignature Language="C++ CLI" Value="public enum class ConcurrencyMode" />
  <TypeSignature Language="F#" Value="type ConcurrencyMode = " />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary>Określa, czy klasa usługi obsługuje jednowątkowe lub wielowątkowych tryby działania.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceModel.ConcurrencyMode> jest używana w połączeniu z <xref:System.ServiceModel.ServiceBehaviorAttribute.ConcurrencyMode%2A> właściwości w celu określenia, czy klasa usługi obsługuje jednowątkowe lub wielowątkowych tryby działania. Jednowątkowe operacji może być współużytkowane lub nie obsługującą.  
  
 W poniższej tabeli przedstawiono, kiedy usług Windows Communication Foundation (WCF) zezwala na operację do wywołania podczas drugiego jednym jest w toku, w zależności od <xref:System.ServiceModel.ConcurrencyMode>.  
  
|Wartość przed|Można wywołać nową operację?|  
|---------------------------|-------------------------------------|  
|Single|Nigdy nie.|  
|Wielobieżna ConcurrencyMode|Tylko podczas wywoływania innej usługi lub wywołanie zwrotne.|  
|Wielokrotne|Zawsze.|  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje różnic między za pomocą pojedynczej, wielobieżna ConcurrencyMode i wielu. W tym przykładzie nie kompiluje się bez rzeczywistego wykonania związanych z nim, ale pokazują rodzaj wątkowości gwarantuje, że sprawia, że usługi WCF i co to oznacza dla kodu operacji.  
  
 [!code-csharp[C_BestPractices-Concurrency#1](~/samples/snippets/csharp/VS_Snippets_CFX/c_bestpractices-concurrency/cs/reentrantandmultiple.cs#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Multiple">
      <MemberSignature Language="C#" Value="Multiple" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.ServiceModel.ConcurrencyMode Multiple = int32(2)" />
      <MemberSignature Language="DocId" Value="F:System.ServiceModel.ConcurrencyMode.Multiple" />
      <MemberSignature Language="VB.NET" Value="Multiple" />
      <MemberSignature Language="C++ CLI" Value="Multiple" />
      <MemberSignature Language="F#" Value="Multiple = 2" Usage="System.ServiceModel.ConcurrencyMode.Multiple" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.ConcurrencyMode</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>Wystąpienie usługi jest wielowątkowych. Nie gwarancji synchronizacji zostały wprowadzone. Ponieważ innych wątków można zmienić obiektu usługi w dowolnym momencie, należy obsłużyć synchronizację i stan spójności.</summary>
      </Docs>
    </Member>
    <Member MemberName="Reentrant">
      <MemberSignature Language="C#" Value="Reentrant" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.ServiceModel.ConcurrencyMode Reentrant = int32(1)" />
      <MemberSignature Language="DocId" Value="F:System.ServiceModel.ConcurrencyMode.Reentrant" />
      <MemberSignature Language="VB.NET" Value="Reentrant" />
      <MemberSignature Language="C++ CLI" Value="Reentrant" />
      <MemberSignature Language="F#" Value="Reentrant = 1" Usage="System.ServiceModel.ConcurrencyMode.Reentrant" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.ConcurrencyMode</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>Wystąpienie usługi jest jednowątkowym i akceptuje wywołania współużytkowane. Współużytkowane usługa akceptuje wywołań podczas wywoływania innej usługi; Dlatego jest odpowiedzialny za pozostaw spójne przed objaśnienia swoje stan obiektu i należy potwierdzić, czy dane lokalne operacja jest prawidłowa, po objaśnienia. Należy pamiętać, że wystąpienie usługi jest odblokowana tylko przez za pośrednictwem kanału WCF podczas wywoływania innej usługi. W tym przypadku usługa o nazwie wprowadzić ponownie pierwszej usługi za pośrednictwem wywołania zwrotnego. Jeśli pierwsza usługa nie jest współużytkowane, sekwencja wywołań powoduje zakleszczenia. Aby uzyskać więcej informacji, zobacz <see cref="P:System.ServiceModel.ServiceBehaviorAttribute.ConcurrencyMode" />.</summary>
      </Docs>
    </Member>
    <Member MemberName="Single">
      <MemberSignature Language="C#" Value="Single" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.ServiceModel.ConcurrencyMode Single = int32(0)" />
      <MemberSignature Language="DocId" Value="F:System.ServiceModel.ConcurrencyMode.Single" />
      <MemberSignature Language="VB.NET" Value="Single" />
      <MemberSignature Language="C++ CLI" Value="Single" />
      <MemberSignature Language="F#" Value="Single = 0" Usage="System.ServiceModel.ConcurrencyMode.Single" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.ConcurrencyMode</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>Wystąpienie usługi jest jednowątkowym i nie akceptuje wywołania współużytkowane. Jeśli <see cref="P:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode" /> właściwość <see cref="F:System.ServiceModel.InstanceContextMode.Single" />oraz dodatkowe nadejścia podczas, gdy wystąpienie usługi wywołanie, te komunikaty musi poczekać, aż usługa stanie się dostępna aż lub przekraczają limit czasu wiadomości.</summary>
      </Docs>
    </Member>
  </Members>
</Type>