<Type Name="ConcurrencyMode" FullName="System.ServiceModel.ConcurrencyMode">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b794f216ceaa7c6fce1828d6ee563ec907867be6" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37451376" />
  </Metadata>
  <TypeSignature Language="C#" Value="public enum ConcurrencyMode" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ConcurrencyMode extends System.Enum" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.ConcurrencyMode" />
  <TypeSignature Language="VB.NET" Value="Public Enum ConcurrencyMode" />
  <TypeSignature Language="C++ CLI" Value="public enum class ConcurrencyMode" />
  <TypeSignature Language="F#" Value="type ConcurrencyMode = " />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Enum</BaseTypeName>
  </Base>
  <Docs>
    <summary>
      <span data-ttu-id="341a8-101">Określa, czy klasa usługi obsługuje jednowątkowe lub wielowątkowych tryby działania.</span>
      <span class="sxs-lookup">
        <span data-stu-id="341a8-101">Specifies whether a service class supports single-threaded or multi-threaded modes of operation.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="341a8-102"><xref:System.ServiceModel.ConcurrencyMode> jest używana w połączeniu z <xref:System.ServiceModel.ServiceBehaviorAttribute.ConcurrencyMode%2A> właściwości w celu określenia, czy klasa usługi obsługuje jednowątkowe lub wielowątkowych tryby działania.</span><span class="sxs-lookup"><span data-stu-id="341a8-102"><xref:System.ServiceModel.ConcurrencyMode> is used in conjunction with the <xref:System.ServiceModel.ServiceBehaviorAttribute.ConcurrencyMode%2A> property to specify whether a service class supports single-threaded or multi-threaded modes of operation.</span></span> <span data-ttu-id="341a8-103">Jednowątkowe operacji może być współużytkowane lub nie obsługującą.</span><span class="sxs-lookup"><span data-stu-id="341a8-103">A single-threaded operation can be either reentrant or non-reentrant.</span></span>  
  
 <span data-ttu-id="341a8-104">W poniższej tabeli przedstawiono, kiedy usług Windows Communication Foundation (WCF) zezwala na operację do wywołania podczas drugiego jednym jest w toku, w zależności od <xref:System.ServiceModel.ConcurrencyMode>.</span><span class="sxs-lookup"><span data-stu-id="341a8-104">The following table shows when Windows Communication Foundation (WCF) permits an operation to be invoked while another one is in progress, depending upon the <xref:System.ServiceModel.ConcurrencyMode>.</span></span>  
  
|<span data-ttu-id="341a8-105">Wartość przed</span><span class="sxs-lookup"><span data-stu-id="341a8-105">ConcurrencyMode Value</span></span>|<span data-ttu-id="341a8-106">Można wywołać nową operację?</span><span class="sxs-lookup"><span data-stu-id="341a8-106">Can a new operation be invoked?</span></span>|  
|---------------------------|-------------------------------------|  
|<span data-ttu-id="341a8-107">Single</span><span class="sxs-lookup"><span data-stu-id="341a8-107">Single</span></span>|<span data-ttu-id="341a8-108">Nigdy nie.</span><span class="sxs-lookup"><span data-stu-id="341a8-108">Never.</span></span>|  
|<span data-ttu-id="341a8-109">Wielobieżna ConcurrencyMode</span><span class="sxs-lookup"><span data-stu-id="341a8-109">Reentrant</span></span>|<span data-ttu-id="341a8-110">Tylko podczas wywoływania innej usługi lub wywołanie zwrotne.</span><span class="sxs-lookup"><span data-stu-id="341a8-110">Only while invoking another service or a callback.</span></span>|  
|<span data-ttu-id="341a8-111">Wielokrotne</span><span class="sxs-lookup"><span data-stu-id="341a8-111">Multiple</span></span>|<span data-ttu-id="341a8-112">Zawsze.</span><span class="sxs-lookup"><span data-stu-id="341a8-112">Always.</span></span>|  
  
   
  
## Examples  
 <span data-ttu-id="341a8-113">Poniższy przykład kodu demonstruje różnic między za pomocą pojedynczej, wielobieżna ConcurrencyMode i wielu.</span><span class="sxs-lookup"><span data-stu-id="341a8-113">The following code example demonstrates the different between using Single, Reentrant, and Multiple.</span></span> <span data-ttu-id="341a8-114">W tym przykładzie nie kompiluje się bez rzeczywistego wykonania związanych z nim, ale pokazują rodzaj wątkowości gwarantuje, że sprawia, że usługi WCF i co to oznacza dla kodu operacji.</span><span class="sxs-lookup"><span data-stu-id="341a8-114">This sample does not compile without a real implementation behind it, but does demonstrate the kind of threading guarantees that WCF makes and what that means for your operation code.</span></span>  
  
 [!code-csharp[C_BestPractices-Concurrency#1](~/samples/snippets/csharp/VS_Snippets_CFX/c_bestpractices-concurrency/cs/reentrantandmultiple.cs#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Multiple">
      <MemberSignature Language="C#" Value="Multiple" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.ServiceModel.ConcurrencyMode Multiple = int32(2)" />
      <MemberSignature Language="DocId" Value="F:System.ServiceModel.ConcurrencyMode.Multiple" />
      <MemberSignature Language="VB.NET" Value="Multiple" />
      <MemberSignature Language="C++ CLI" Value="Multiple" />
      <MemberSignature Language="F#" Value="Multiple = 2" Usage="System.ServiceModel.ConcurrencyMode.Multiple" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.ConcurrencyMode</ReturnType>
      </ReturnValue>
      <MemberValue>2</MemberValue>
      <Docs>
        <summary>
          <span data-ttu-id="341a8-115">Wystąpienie usługi jest wielowątkowych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="341a8-115">The service instance is multi-threaded.</span>
          </span>
          <span data-ttu-id="341a8-116">Nie gwarancji synchronizacji zostały wprowadzone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="341a8-116">No synchronization guarantees are made.</span>
          </span>
          <span data-ttu-id="341a8-117">Ponieważ innych wątków można zmienić obiektu usługi w dowolnym momencie, należy obsłużyć synchronizację i stan spójności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="341a8-117">Because other threads can change your service object at any time, you must handle synchronization and state consistency at all times.</span>
          </span>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Reentrant">
      <MemberSignature Language="C#" Value="Reentrant" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.ServiceModel.ConcurrencyMode Reentrant = int32(1)" />
      <MemberSignature Language="DocId" Value="F:System.ServiceModel.ConcurrencyMode.Reentrant" />
      <MemberSignature Language="VB.NET" Value="Reentrant" />
      <MemberSignature Language="C++ CLI" Value="Reentrant" />
      <MemberSignature Language="F#" Value="Reentrant = 1" Usage="System.ServiceModel.ConcurrencyMode.Reentrant" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.ConcurrencyMode</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>
          <span data-ttu-id="341a8-118">Wystąpienie usługi jest jednowątkowym i akceptuje wywołania współużytkowane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="341a8-118">The service instance is single-threaded and accepts reentrant calls.</span>
          </span>
          <span data-ttu-id="341a8-119">Współużytkowane usługa akceptuje wywołań podczas wywoływania innej usługi; Dlatego jest odpowiedzialny za pozostaw spójne przed objaśnienia swoje stan obiektu i należy potwierdzić, czy dane lokalne operacja jest prawidłowa, po objaśnienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="341a8-119">The reentrant service accepts calls when you call another service; it is therefore your responsibility to leave your object state consistent before callouts and you must confirm that operation-local data is valid after callouts.</span>
          </span>
          <span data-ttu-id="341a8-120">Należy pamiętać, że wystąpienie usługi jest odblokowana tylko przez za pośrednictwem kanału WCF podczas wywoływania innej usługi.</span>
          <span class="sxs-lookup">
            <span data-stu-id="341a8-120">Note that the service instance is unlocked only by calling another service over a WCF channel.</span>
          </span>
          <span data-ttu-id="341a8-121">W tym przypadku usługa o nazwie wprowadzić ponownie pierwszej usługi za pośrednictwem wywołania zwrotnego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="341a8-121">In this case, the called service can reenter the first service via a callback.</span>
          </span>
          <span data-ttu-id="341a8-122">Jeśli pierwsza usługa nie jest współużytkowane, sekwencja wywołań powoduje zakleszczenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="341a8-122">If the first service is not reentrant, the sequence of calls results in a deadlock.</span>
          </span>
          <span data-ttu-id="341a8-123">Aby uzyskać więcej informacji, zobacz <see cref="P:System.ServiceModel.ServiceBehaviorAttribute.ConcurrencyMode" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="341a8-123">For details, see <see cref="P:System.ServiceModel.ServiceBehaviorAttribute.ConcurrencyMode" />.</span>
          </span>
        </summary>
      </Docs>
    </Member>
    <Member MemberName="Single">
      <MemberSignature Language="C#" Value="Single" />
      <MemberSignature Language="ILAsm" Value=".field public static literal valuetype System.ServiceModel.ConcurrencyMode Single = int32(0)" />
      <MemberSignature Language="DocId" Value="F:System.ServiceModel.ConcurrencyMode.Single" />
      <MemberSignature Language="VB.NET" Value="Single" />
      <MemberSignature Language="C++ CLI" Value="Single" />
      <MemberSignature Language="F#" Value="Single = 0" Usage="System.ServiceModel.ConcurrencyMode.Single" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ServiceModel.ConcurrencyMode</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>
          <span data-ttu-id="341a8-124">Wystąpienie usługi jest jednowątkowym i nie akceptuje wywołania współużytkowane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="341a8-124">The service instance is single-threaded and does not accept reentrant calls.</span>
          </span>
          <span data-ttu-id="341a8-125">Jeśli <see cref="P:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode" /> właściwość <see cref="F:System.ServiceModel.InstanceContextMode.Single" />oraz dodatkowe nadejścia podczas, gdy wystąpienie usługi wywołanie, te komunikaty musi poczekać, aż usługa stanie się dostępna aż lub przekraczają limit czasu wiadomości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="341a8-125">If the <see cref="P:System.ServiceModel.ServiceBehaviorAttribute.InstanceContextMode" /> property is <see cref="F:System.ServiceModel.InstanceContextMode.Single" />, and additional messages arrive while the instance services a call, these messages must wait until the service is available or until the messages time out.</span>
          </span>
        </summary>
      </Docs>
    </Member>
  </Members>
</Type>