<Type Name="ServiceAuthorizationManager" FullName="System.ServiceModel.ServiceAuthorizationManager">
  <Metadata><Meta Name="ms.openlocfilehash" Value="dabac9b426fe5b947f596cfd5e79305a6b24d2dd" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69101236" /></Metadata><TypeSignature Language="C#" Value="public class ServiceAuthorizationManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ServiceAuthorizationManager extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.ServiceAuthorizationManager" />
  <TypeSignature Language="VB.NET" Value="Public Class ServiceAuthorizationManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class ServiceAuthorizationManager" />
  <TypeSignature Language="F#" Value="type ServiceAuthorizationManager = class" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Zapewnia sprawdzanie dostępu do autoryzacji dla operacji usługi.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta klasa jest odpowiedzialna za ocenianie wszystkich zasad (reguł definiujących, co użytkownik może robić), porównywanie zasad z oświadczeniami podejmowanymi przez klienta, Ustawianie wyników <xref:System.IdentityModel.Policy.AuthorizationContext> <xref:System.ServiceModel.ServiceSecurityContext>dla i świadczenie autoryzacji, czy Zezwalanie lub odmawianie dostępu dla danej operacji usługi dla obiektu wywołującego.  
  
 <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A> Metoda jest wywoływana przez infrastrukturę Windows Communication Foundation (WCF) przy każdej próbie uzyskania dostępu do zasobu. Metoda zwraca `true` lub `false` zezwala na dostęp, odpowiednio.  
  
 Jest częścią infrastruktury*modelu tożsamości* WCF. <xref:System.ServiceModel.ServiceAuthorizationManager> Model tożsamości umożliwia tworzenie niestandardowych zasad autoryzacji i niestandardowych schematów autoryzacji. Aby uzyskać więcej informacji o działaniu modelu tożsamości, zobacz [Zarządzanie oświadczeniami i autoryzacją za pomocą modelu tożsamości](~/docs/framework/wcf/feature-details/managing-claims-and-authorization-with-the-identity-model.md).  
  
## <a name="custom-authorization"></a>Autoryzacja niestandardowa  
 Ta klasa nie wykonuje żadnych autoryzacji i umożliwia użytkownikom dostęp do wszystkich operacji usługi. Aby zapewnić bardziej restrykcyjną autoryzację, należy utworzyć niestandardowego Menedżera autoryzacji, który sprawdza zasady niestandardowe. Aby to zrobić, Dziedzicz z tej klasy i Zastąp <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A> metodę. Określ wystąpienie klasy pochodnej przy użyciu <xref:System.ServiceModel.Dispatcher.DispatchRuntime.ServiceAuthorizationManager%2A> właściwości.  
  
 W <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A>programie aplikacja może <xref:System.ServiceModel.OperationContext> używać obiektu do uzyskiwania dostępu do tożsamości obiektu wywołującego<xref:System.ServiceModel.OperationContext.ServiceSecurityContext%2A>().  
  
 Pobierając właściwość, która <xref:System.ServiceModel.Channels.MessageHeaders> zwraca obiekt, aplikacja może uzyskać dostęp do usługi (<xref:System.ServiceModel.Channels.MessageHeaders.To%2A>) i operacji (<xref:System.ServiceModel.Channels.MessageHeaders.Action%2A>). <xref:System.ServiceModel.OperationContext.IncomingMessageHeaders%2A>  
  
 Pobierając właściwość, która <xref:System.ServiceModel.Channels.RequestContext> zwraca obiekt, aplikacja może uzyskać dostęp do całego komunikatu żądania (<xref:System.ServiceModel.Channels.RequestContext.RequestMessage%2A>) i odpowiednio wykonać decyzję dotyczącą autoryzacji. <xref:System.ServiceModel.OperationContext.RequestContext%2A>  
  
 Aby zapoznać się z przykładem, zobacz [How to: Tworzenie niestandardowego Menedżera autoryzacji dla usługi](~/docs/framework/wcf/extending/how-to-create-a-custom-authorization-manager-for-a-service.md).  
  
 Aby utworzyć niestandardowe zasady autoryzacji, zaimplementuj <xref:System.IdentityModel.Policy.IAuthorizationPolicy> klasę.  Aby zapoznać się z przykładem, zobacz [How to: Utwórz niestandardowe zasady](~/docs/framework/wcf/extending/how-to-create-a-custom-authorization-policy.md)autoryzacji.  
  
 Aby utworzyć niestandardową, należy użyć <xref:System.IdentityModel.Claims.Claim> klasy.  Aby zapoznać się z przykładem, zobacz [How to: Utwórz niestandardową](~/docs/framework/wcf/extending/how-to-create-a-custom-claim.md)wartość. Aby porównać oświadczenia niestandardowe, należy porównać oświadczenia, jak pokazano w poniższej [tabeli: Porównaj oświadczenia](~/docs/framework/wcf/extending/how-to-compare-claims.md).  
  
 Aby uzyskać więcej informacji, [](~/docs/framework/wcf/extending/custom-authorization.md)Zobacz temat autoryzacja niestandardowa.  
  
 Możesz ustawić typ niestandardowego Menedżera autoryzacji przy użyciu [ &lt;ServiceAuthorization&gt; ](~/docs/framework/configure-apps/file-schema/wcf/serviceauthorization-element.md) w pliku konfiguracji aplikacji klienckiej.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano klasę o nazwie `MyServiceAuthorizationManager` , która dziedziczy <xref:System.ServiceModel.ServiceAuthorizationManager> z i przesłania <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A> metodę.  
  
 [!code-csharp[c_CustomAuthMgr#2](~/samples/snippets/csharp/VS_Snippets_CFX/c_customauthmgr/cs/c_customauthmgr.cs#2)]
 [!code-vb[c_CustomAuthMgr#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/c_customauthmgr/vb/c_customauthmgr.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IdentityModel.Claims.ClaimSet" />
    <altmember cref="T:System.IdentityModel.Claims.Claim" />
    <related type="Article" href="https://msdn.microsoft.com/library/4f90311a-2593-462e-9174-2f7ac78217b9">Autoryzacja niestandardowa</related>
    <related type="Article" href="https://msdn.microsoft.com/library/6214afde-44c1-4bf5-ba07-5ad6493620ea">Instrukcje: Tworzenie niestandardowego elementu autoryzacji dla usługi</related>
    <related type="Article" href="https://msdn.microsoft.com/library/05b0549b-882d-4660-b6f0-5678543e5475">Instrukcje: tworzenie niestandardowych zasad autoryzacji</related>
    <related type="Article" href="https://msdn.microsoft.com/library/d619976b-eda3-475e-ac23-c7988a2dceb0">Instrukcje: tworzenie oświadczenia niestandardowego</related>
    <related type="Article" href="https://msdn.microsoft.com/library/0c4ec84d-53df-408f-8953-9bc437f56c28">Instrukcje: porównywanie oświadczeń</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ServiceAuthorizationManager ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.ServiceAuthorizationManager.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ServiceAuthorizationManager();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.ServiceModel.ServiceAuthorizationManager" /> klasy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CheckAccess">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Sprawdza autoryzację dla danego kontekstu operacji i opcjonalnego komunikatu.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CheckAccess">
      <MemberSignature Language="C#" Value="public virtual bool CheckAccess (System.ServiceModel.OperationContext operationContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CheckAccess(class System.ServiceModel.OperationContext operationContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.ServiceAuthorizationManager.CheckAccess(System.ServiceModel.OperationContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CheckAccess(System::ServiceModel::OperationContext ^ operationContext);" />
      <MemberSignature Language="F#" Value="abstract member CheckAccess : System.ServiceModel.OperationContext -&gt; bool&#xA;override this.CheckAccess : System.ServiceModel.OperationContext -&gt; bool" Usage="serviceAuthorizationManager.CheckAccess operationContext" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationContext" Type="System.ServiceModel.OperationContext" />
      </Parameters>
      <Docs>
        <param name="operationContext"><see cref="T:System.ServiceModel.OperationContext" />.</param>
        <summary>Sprawdza autoryzację dla danego kontekstu operacji.</summary>
        <returns><see langword="true" />w przypadku udzielenia dostępu; w przeciwnym razie. <see langword="false" /> Wartość domyślna to <see langword="true" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ogólnie rzecz biorąc, aplikacje powinny <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A> zastąpić zamiast tej metody.  
  
 Zastąp <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccess%2A> , jeśli aplikacja kojarzy lub wprowadza inny zestaw zasad dla wyników <xref:System.ServiceModel.ServiceSecurityContext> lub podaj inny model oceny zasad (łańcucha).  
  
 Ta metoda jest odpowiedzialna za <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A>wywoływanie.  
  
   
  
## Examples  
 Poniższy kod przedstawia sposób przesłania tej metody w celu wymuszenia wymagań niestandardowych kontroli dostępu.  
  
 [!code-csharp[c_Federation#1](~/samples/snippets/csharp/VS_Snippets_CFX/c_federation/cs/source.cs#1)]
 [!code-vb[c_Federation#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/c_federation/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckAccess">
      <MemberSignature Language="C#" Value="public virtual bool CheckAccess (System.ServiceModel.OperationContext operationContext, ref System.ServiceModel.Channels.Message message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CheckAccess(class System.ServiceModel.OperationContext operationContext, class System.ServiceModel.Channels.Message&amp; message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.ServiceAuthorizationManager.CheckAccess(System.ServiceModel.OperationContext,System.ServiceModel.Channels.Message@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CheckAccess(System::ServiceModel::OperationContext ^ operationContext, System::ServiceModel::Channels::Message ^ % message);" />
      <MemberSignature Language="F#" Value="abstract member CheckAccess : System.ServiceModel.OperationContext *  -&gt; bool&#xA;override this.CheckAccess : System.ServiceModel.OperationContext *  -&gt; bool" Usage="serviceAuthorizationManager.CheckAccess (operationContext, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationContext" Type="System.ServiceModel.OperationContext" />
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="operationContext"><see cref="T:System.ServiceModel.OperationContext" />.</param>
        <param name="message">Do <see cref="T:System.ServiceModel.Channels.Message" /> sprawdzenia, aby określić autoryzację.</param>
        <summary>Sprawdza autoryzację dla danego kontekstu operacji, gdy wymagany jest dostęp do komunikatu.</summary>
        <returns><see langword="true" />w przypadku udzielenia dostępu; w przeciwnym razie. <see langword="false" /> Wartość domyślna to <see langword="true" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ogólnie rzecz biorąc, aplikacje powinny <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A> przesłonić zamiast tej metody, która powinna być używana tylko wtedy, gdy decyzja o autoryzacji zależy od treści komunikatu. Ze względu na problemy z wydajnością, jeśli to możliwe, należy ponownie zaprojektować aplikację, tak aby decyzja o autoryzacji nie wymagała dostępu do treści komunikatu.  
  
 Zastąp tę metodę, jeśli aplikacja skojarzy lub poda inny zestaw zasad dla wyników <xref:System.ServiceModel.ServiceSecurityContext> i <xref:System.ServiceModel.Channels.Message> lub podaj inny model oceny zasad (łańcucha).  
  
 Ta metoda jest odpowiedzialna za <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A>wywoływanie.  
  
   
  
## Examples  
 Poniższy kod pokazuje, jak zastąpić tę metodę, aby wymusić niestandardowe wymagania kontroli dostępu, które wymagają dostępu do treści wiadomości.  
  
 [!code-csharp[c_Federation#6](~/samples/snippets/csharp/VS_Snippets_CFX/c_federation/cs/source.cs#6)]
 [!code-vb[c_Federation#6](~/samples/snippets/visualbasic/VS_Snippets_CFX/c_federation/vb/source.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckAccessCore">
      <MemberSignature Language="C#" Value="protected virtual bool CheckAccessCore (System.ServiceModel.OperationContext operationContext);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool CheckAccessCore(class System.ServiceModel.OperationContext operationContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore(System.ServiceModel.OperationContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool CheckAccessCore(System::ServiceModel::OperationContext ^ operationContext);" />
      <MemberSignature Language="F#" Value="abstract member CheckAccessCore : System.ServiceModel.OperationContext -&gt; bool&#xA;override this.CheckAccessCore : System.ServiceModel.OperationContext -&gt; bool" Usage="serviceAuthorizationManager.CheckAccessCore operationContext" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationContext" Type="System.ServiceModel.OperationContext" />
      </Parameters>
      <Docs>
        <param name="operationContext"><see cref="T:System.ServiceModel.OperationContext" /> Dla bieżącego żądania autoryzacji.</param>
        <summary>Sprawdza autoryzację dla danego kontekstu operacji na podstawie domyślnej oceny zasad.</summary>
        <returns><see langword="true" />w przypadku udzielenia dostępu; w przeciwnym razie. <see langword="false" /> Wartość domyślna to <see langword="true" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceModel.OperationContext.ServiceSecurityContext%2A>zwykle wynika z domyślnej oceny zasad.  
  
 Zastąp tę metodę, aby zapewnić niestandardowe decyzje dotyczące autoryzacji.  
  
 Tej metody można użyć do podejmowania decyzji dotyczących autoryzacji na podstawie zestawów, które są wywnioskowane w oparciu o przychodzące tokeny lub dodane za pośrednictwem zewnętrznych zasad autoryzacji. Może również podejmować decyzje dotyczące autoryzacji na podstawie właściwości wiadomości przychodzącej: na przykład nagłówka akcji.  
  
 W tej metodzie aplikacja może użyć `operationContext` parametru, aby uzyskać dostęp do tożsamości obiektu wywołującego (<xref:System.ServiceModel.OperationContext.ServiceSecurityContext%2A>). Zwracając <xref:System.ServiceModel.Channels.RequestContext> obiekt<xref:System.ServiceModel.Channels.RequestContext.RequestMessage%2A>z właściwości, aplikacja może uzyskać dostęp do całego komunikatu żądania (). <xref:System.ServiceModel.OperationContext.RequestContext%2A> Zwracając <xref:System.ServiceModel.Channels.MessageHeaders> obiekt<xref:System.ServiceModel.Channels.MessageHeaders.To%2A>z właściwości, aplikacja może uzyskać dostęp do adresu URL usługi () i operacji (<xref:System.ServiceModel.Channels.MessageHeaders.Action%2A>). <xref:System.ServiceModel.OperationContext.IncomingMessageHeaders%2A> Dzięki tym informacjom aplikacja może odpowiednio wykonać decyzję dotyczącą autoryzacji.  
  
 Oświadczenia dokonane przez użytkownika znajdują się w <xref:System.IdentityModel.Claims.ClaimSet> zwracanych <xref:System.IdentityModel.Policy.AuthorizationContext.ClaimSets%2A> przez właściwość `AuthorizationContext`obiektu. Bieżąca `AuthorizationContext` jest zwracana <xref:System.ServiceModel.OperationContext.ServiceSecurityContext%2A> przez właściwość <xref:System.ServiceModel.OperationContext> klasy.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano przesłonięcie <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A> metody.  
  
 [!code-csharp[c_CustomAuthMgr#6](~/samples/snippets/csharp/VS_Snippets_CFX/c_customauthmgr/cs/c_customauthmgr.cs#6)]
 [!code-vb[c_CustomAuthMgr#6](~/samples/snippets/visualbasic/VS_Snippets_CFX/c_customauthmgr/vb/c_customauthmgr.vb#6)]  
  
 Aby uzyskać inny przykład, [zobacz How to: Tworzenie niestandardowego Menedżera autoryzacji dla usługi](~/docs/framework/wcf/extending/how-to-create-a-custom-authorization-manager-for-a-service.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAuthorizationPolicies">
      <MemberSignature Language="C#" Value="protected virtual System.Collections.ObjectModel.ReadOnlyCollection&lt;System.IdentityModel.Policy.IAuthorizationPolicy&gt; GetAuthorizationPolicies (System.ServiceModel.OperationContext operationContext);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.IdentityModel.Policy.IAuthorizationPolicy&gt; GetAuthorizationPolicies(class System.ServiceModel.OperationContext operationContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.ServiceAuthorizationManager.GetAuthorizationPolicies(System.ServiceModel.OperationContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Collections::ObjectModel::ReadOnlyCollection&lt;System::IdentityModel::Policy::IAuthorizationPolicy ^&gt; ^ GetAuthorizationPolicies(System::ServiceModel::OperationContext ^ operationContext);" />
      <MemberSignature Language="F#" Value="abstract member GetAuthorizationPolicies : System.ServiceModel.OperationContext -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;System.IdentityModel.Policy.IAuthorizationPolicy&gt;&#xA;override this.GetAuthorizationPolicies : System.ServiceModel.OperationContext -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;System.IdentityModel.Policy.IAuthorizationPolicy&gt;" Usage="serviceAuthorizationManager.GetAuthorizationPolicies operationContext" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.IdentityModel.Policy.IAuthorizationPolicy&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationContext" Type="System.ServiceModel.OperationContext" />
      </Parameters>
      <Docs>
        <param name="operationContext"><see cref="T:System.ServiceModel.OperationContext" /> Bieżące żądanie autoryzacji.</param>
        <summary>Pobiera zestaw zasad, które uczestniczą w ocenie zasad.</summary>
        <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> typu .<see cref="T:System.IdentityModel.Policy.IAuthorizationPolicy" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementacja Windows Communication Foundation (WCF) zawiera domyślny zestaw zasad autoryzacji. Obejmują one podstawowy token, który zawiera poświadczenia żądającego oraz wszystkie tokeny pomocnicze, tokeny transportowe i zasady zewnętrzne, jeśli zostały określone.  
  
 Można zastąpić tę implementację i udostępnić inny zestaw zasad.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
