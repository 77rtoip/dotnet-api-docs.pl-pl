<Type Name="ServiceAuthorizationManager" FullName="System.ServiceModel.ServiceAuthorizationManager">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ea4ab264823f51a0d481c091ab54b0a15507fb7f" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37452667" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ServiceAuthorizationManager" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ServiceAuthorizationManager extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.ServiceAuthorizationManager" />
  <TypeSignature Language="VB.NET" Value="Public Class ServiceAuthorizationManager" />
  <TypeSignature Language="C++ CLI" Value="public ref class ServiceAuthorizationManager" />
  <TypeSignature Language="F#" Value="type ServiceAuthorizationManager = class" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Zapewnia dostęp autoryzacji sprawdzania pod kątem operacji usługi.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta klasa jest odpowiedzialny za dokonanie oceny oprogramowania wszystkich zasad (zasad, które definiują, co użytkownik może wykonywać) porównywanie zasady, aby oświadczenia wprowadzone przez klienta, ustawiając wartość wynikowa <xref:System.IdentityModel.Policy.AuthorizationContext> do <xref:System.ServiceModel.ServiceSecurityContext>i podając czy decyzję dotyczącą autoryzacji Aby udzielić lub odmówić dostępu dla operacji danej usługi, dla obiektu wywołującego.  
  
 <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A> Metoda jest wywoływana przez infrastrukturę usług Windows Communication Foundation (WCF) za każdym razem, podejmowana jest próba uzyskania dostępu do zasobu. Metoda ta zwraca `true` lub `false` do zezwolenia lub odmowy dostępu, odpowiednio.  
  
 <xref:System.ServiceModel.ServiceAuthorizationManager> Wchodzi w skład WCF*modelu tożsamości* infrastruktury. Model tożsamości umożliwia tworzenie zasad niestandardowych autoryzacji i schematy autoryzacja niestandardowa. Aby uzyskać więcej informacji na temat współdziałania modelu tożsamości, zobacz [Zarządzanie oświadczeniami i autoryzacją za pomocą modelu tożsamości](~/docs/framework/wcf/feature-details/managing-claims-and-authorization-with-the-identity-model.md).  
  
## <a name="custom-authorization"></a>Autoryzacja niestandardowa  
 Ta klasa nie wykonuje żadnych autoryzacji i umożliwia użytkownikom dostęp do wszystkich operacji usługi. Aby zapewnić bardziej restrykcyjne autoryzacji, należy utworzyć niestandardowe autoryzacji Menedżera, która sprawdza, czy zasady niestandardowe. Aby to zrobić, dziedziczą z tej klasy, a następnie zastąpić <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A> metody. Określ wystąpienie klasy pochodnej za pośrednictwem <xref:System.ServiceModel.Dispatcher.DispatchRuntime.ServiceAuthorizationManager%2A> właściwości.  
  
 W <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A>, aplikacja może używać <xref:System.ServiceModel.OperationContext> obiekt dostępu do usługi identity obiektu wywołującego (<xref:System.ServiceModel.OperationContext.ServiceSecurityContext%2A>).  
  
 Uzyskując <xref:System.ServiceModel.OperationContext.IncomingMessageHeaders%2A> właściwość, która zwraca <xref:System.ServiceModel.Channels.MessageHeaders> obiektu aplikacji można uzyskać dostęp do usługi (<xref:System.ServiceModel.Channels.MessageHeaders.To%2A>), a operacja (<xref:System.ServiceModel.Channels.MessageHeaders.Action%2A>).  
  
 Uzyskując <xref:System.ServiceModel.OperationContext.RequestContext%2A> właściwość, która zwraca <xref:System.ServiceModel.Channels.RequestContext> obiektu dostęp komunikatu żądania całej aplikacji (<xref:System.ServiceModel.Channels.RequestContext.RequestMessage%2A>) i w związku z tym wykonaj decyzję dotyczącą autoryzacji.  
  
 Aby uzyskać przykład, zobacz [porady: tworzenie Menedżera autoryzacji niestandardowej dla usługi](~/docs/framework/wcf/extending/how-to-create-a-custom-authorization-manager-for-a-service.md).  
  
 Aby utworzyć zasady niestandardowe autoryzacji, należy zaimplementować <xref:System.IdentityModel.Policy.IAuthorizationPolicy> klasy.  Aby uzyskać przykład, zobacz [porady: Tworzenie niestandardowych zasad autoryzacji](~/docs/framework/wcf/extending/how-to-create-a-custom-authorization-policy.md).  
  
 Aby utworzyć oświadczenia niestandardowego, użyj <xref:System.IdentityModel.Claims.Claim> klasy.  Aby uzyskać przykład, zobacz [porady: tworzenie oświadczenia niestandardowego](~/docs/framework/wcf/extending/how-to-create-a-custom-claim.md). Aby porównać oświadczenia niestandardowe, należy porównać oświadczeń, tożsamości, jak pokazano na [porady: porównywanie oświadczeń](~/docs/framework/wcf/extending/how-to-compare-claims.md).  
  
 Aby uzyskać więcej informacji, zobacz [autoryzacji niestandardowe](~/docs/framework/wcf/extending/custom-authorization.md).  
  
 Można ustawić typu przy użyciu Menedżera autoryzacji niestandardowej [ &lt;serviceAuthorization&gt; ](~/docs/framework/configure-apps/file-schema/wcf/serviceauthorization-element.md) w pliku konfiguracyjnym aplikacji klienta.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano klasę o nazwie `MyServiceAuthorizationManager` tej, która dziedziczy <xref:System.ServiceModel.ServiceAuthorizationManager> i zastępuje <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A> metody.  
  
 [!code-csharp[c_CustomAuthMgr#2](~/samples/snippets/csharp/VS_Snippets_CFX/c_customauthmgr/cs/c_customauthmgr.cs#2)]
 [!code-vb[c_CustomAuthMgr#2](~/samples/snippets/visualbasic/VS_Snippets_CFX/c_customauthmgr/vb/c_customauthmgr.vb#2)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.IdentityModel.Claims.ClaimSet" />
    <altmember cref="T:System.IdentityModel.Claims.Claim" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ServiceAuthorizationManager ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.ServiceAuthorizationManager.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ServiceAuthorizationManager();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.ServiceModel.ServiceAuthorizationManager" /> klasy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CheckAccess">
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Sprawdza, czy autoryzacji w kontekście danej operacji i opcjonalną wiadomość.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CheckAccess">
      <MemberSignature Language="C#" Value="public virtual bool CheckAccess (System.ServiceModel.OperationContext operationContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CheckAccess(class System.ServiceModel.OperationContext operationContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.ServiceAuthorizationManager.CheckAccess(System.ServiceModel.OperationContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CheckAccess(System::ServiceModel::OperationContext ^ operationContext);" />
      <MemberSignature Language="F#" Value="abstract member CheckAccess : System.ServiceModel.OperationContext -&gt; bool&#xA;override this.CheckAccess : System.ServiceModel.OperationContext -&gt; bool" Usage="serviceAuthorizationManager.CheckAccess operationContext" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationContext" Type="System.ServiceModel.OperationContext" />
      </Parameters>
      <Docs>
        <param name="operationContext">
          <see cref="T:System.ServiceModel.OperationContext" />.</param>
        <summary>Sprawdza, czy autoryzacji w kontekście danej operacji.</summary>
        <returns>
          <see langword="true" /> Jeśli dostęp jest udzielany; w przeciwnym razie; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="true" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ogólnie rzecz biorąc, należy zastąpić aplikacje <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A> zamiast tej metody.  
  
 Zastąp <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccess%2A> czy aplikacji kojarzy wprowadza inny zbiór zasad wynikowy <xref:System.ServiceModel.ServiceSecurityContext> lub podaj inne zasady modelu oceny (łańcuch).  
  
 Ta metoda jest odpowiedzialna za wywołanie <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A>.  
  
   
  
## Examples  
 Poniższy kod przedstawia sposób przesłonięcia tej metody, aby wymusić wymaganiami dotyczącymi kontroli dostępu niestandardowych.  
  
 [!code-csharp[c_Federation#1](~/samples/snippets/csharp/VS_Snippets_CFX/c_federation/cs/source.cs#1)]
 [!code-vb[c_Federation#1](~/samples/snippets/visualbasic/VS_Snippets_CFX/c_federation/vb/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckAccess">
      <MemberSignature Language="C#" Value="public virtual bool CheckAccess (System.ServiceModel.OperationContext operationContext, ref System.ServiceModel.Channels.Message message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool CheckAccess(class System.ServiceModel.OperationContext operationContext, class System.ServiceModel.Channels.Message&amp; message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.ServiceAuthorizationManager.CheckAccess(System.ServiceModel.OperationContext,System.ServiceModel.Channels.Message@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool CheckAccess(System::ServiceModel::OperationContext ^ operationContext, System::ServiceModel::Channels::Message ^ % message);" />
      <MemberSignature Language="F#" Value="abstract member CheckAccess : System.ServiceModel.OperationContext *  -&gt; bool&#xA;override this.CheckAccess : System.ServiceModel.OperationContext *  -&gt; bool" Usage="serviceAuthorizationManager.CheckAccess (operationContext, message)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationContext" Type="System.ServiceModel.OperationContext" />
        <Parameter Name="message" Type="System.ServiceModel.Channels.Message&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="operationContext">
          <see cref="T:System.ServiceModel.OperationContext" />.</param>
        <param name="message">
          <see cref="T:System.ServiceModel.Channels.Message" /> Do badania, określa autoryzację.</param>
        <summary>Sprawdza autoryzacji w kontekście danej operacji, gdy wymagany jest dostęp do wiadomości.</summary>
        <returns>
          <see langword="true" /> Jeśli dostęp jest udzielany; w przeciwnym razie; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="true" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ogólnie rzecz biorąc, należy zastąpić aplikacje <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A> zamiast tej metody, które należy używać tylko jeśli decyzja zależy od treści komunikatu. Ze względu na problemy z wydajnością Jeśli jest to możliwe należy ponownie zaprojektować aplikację tak, aby decyzję dotyczącą autoryzacji nie wymaga dostępu do treści wiadomości.  
  
 Przesłonić tę metodę, jeśli aplikacja kojarzy lub wprowadza inny zbiór zasad wynikowy <xref:System.ServiceModel.ServiceSecurityContext> i <xref:System.ServiceModel.Channels.Message> lub podaj inne zasady modelu oceny (łańcuch).  
  
 Ta metoda jest odpowiedzialna za wywołanie <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A>.  
  
   
  
## Examples  
 Poniższy kod przedstawia sposób przesłonięcia tej metody, aby wymusić wymagania dotyczące kontroli dostępu niestandardowych, które wymagają dostępu do treści wiadomości.  
  
 [!code-csharp[c_Federation#6](~/samples/snippets/csharp/VS_Snippets_CFX/c_federation/cs/source.cs#6)]
 [!code-vb[c_Federation#6](~/samples/snippets/visualbasic/VS_Snippets_CFX/c_federation/vb/source.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckAccessCore">
      <MemberSignature Language="C#" Value="protected virtual bool CheckAccessCore (System.ServiceModel.OperationContext operationContext);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool CheckAccessCore(class System.ServiceModel.OperationContext operationContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore(System.ServiceModel.OperationContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual bool CheckAccessCore(System::ServiceModel::OperationContext ^ operationContext);" />
      <MemberSignature Language="F#" Value="abstract member CheckAccessCore : System.ServiceModel.OperationContext -&gt; bool&#xA;override this.CheckAccessCore : System.ServiceModel.OperationContext -&gt; bool" Usage="serviceAuthorizationManager.CheckAccessCore operationContext" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationContext" Type="System.ServiceModel.OperationContext" />
      </Parameters>
      <Docs>
        <param name="operationContext">
          <see cref="T:System.ServiceModel.OperationContext" /> Dla bieżącego żądania autoryzacji.</param>
        <summary>Sprawdza, czy autoryzacji w kontekście danej operacji, oparte na ocenie zasady domyślne.</summary>
        <returns>
          <see langword="true" /> Jeśli dostęp jest udzielany; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="true" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ServiceModel.OperationContext.ServiceSecurityContext%2A> Ogólnie jest wynikiem oceny zasad domyślne.  
  
 Zastępuje tę metodę w celu zapewnienia decyzji dotyczących autoryzacji niestandardowej.  
  
 Ta metoda mogą być używane w zapewnienie autoryzacji decyzje na podstawie w oświadczenie zestawów, które są wnioskowane oparta na tokenach przychodzących lub dodane przy użyciu zasad autoryzacji zewnętrznych. Może również sprawić, że decyzji dotyczących autoryzacji na podstawie właściwości wiadomości przychodzącej: na przykład nagłówek akcji.  
  
 W przypadku tej metody można użyć aplikacji `operationContext` parametr dostępu do usługi identity obiektu wywołującego (<xref:System.ServiceModel.OperationContext.ServiceSecurityContext%2A>). Zwracając <xref:System.ServiceModel.Channels.RequestContext> obiektu z <xref:System.ServiceModel.OperationContext.RequestContext%2A> właściwości komunikatu żądania cały dostęp aplikacji (<xref:System.ServiceModel.Channels.RequestContext.RequestMessage%2A>). Zwracając <xref:System.ServiceModel.Channels.MessageHeaders> obiektu z <xref:System.ServiceModel.OperationContext.IncomingMessageHeaders%2A> właściwości, aplikacja może uzyskiwać dostęp do adresu URL usługi (<xref:System.ServiceModel.Channels.MessageHeaders.To%2A>) oraz działania (<xref:System.ServiceModel.Channels.MessageHeaders.Action%2A>). Dzięki tym informacjom aplikacja może wykonywać decyzję dotyczącą autoryzacji odpowiednio.  
  
 Oświadczenia wprowadzone przez użytkownika znajdują się w <xref:System.IdentityModel.Claims.ClaimSet> zwrócone przez <xref:System.IdentityModel.Policy.AuthorizationContext.ClaimSets%2A> właściwość `AuthorizationContext`. Bieżący `AuthorizationContext` jest zwracany przez <xref:System.ServiceModel.OperationContext.ServiceSecurityContext%2A> właściwość <xref:System.ServiceModel.OperationContext> klasy.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano nadpisanie <xref:System.ServiceModel.ServiceAuthorizationManager.CheckAccessCore%2A> metody.  
  
 [!code-csharp[c_CustomAuthMgr#6](~/samples/snippets/csharp/VS_Snippets_CFX/c_customauthmgr/cs/c_customauthmgr.cs#6)]
 [!code-vb[c_CustomAuthMgr#6](~/samples/snippets/visualbasic/VS_Snippets_CFX/c_customauthmgr/vb/c_customauthmgr.vb#6)]  
  
 Inny przykład, zobacz [porady: tworzenie Menedżera autoryzacji niestandardowej dla usługi](~/docs/framework/wcf/extending/how-to-create-a-custom-authorization-manager-for-a-service.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAuthorizationPolicies">
      <MemberSignature Language="C#" Value="protected virtual System.Collections.ObjectModel.ReadOnlyCollection&lt;System.IdentityModel.Policy.IAuthorizationPolicy&gt; GetAuthorizationPolicies (System.ServiceModel.OperationContext operationContext);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.IdentityModel.Policy.IAuthorizationPolicy&gt; GetAuthorizationPolicies(class System.ServiceModel.OperationContext operationContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.ServiceAuthorizationManager.GetAuthorizationPolicies(System.ServiceModel.OperationContext)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual System::Collections::ObjectModel::ReadOnlyCollection&lt;System::IdentityModel::Policy::IAuthorizationPolicy ^&gt; ^ GetAuthorizationPolicies(System::ServiceModel::OperationContext ^ operationContext);" />
      <MemberSignature Language="F#" Value="abstract member GetAuthorizationPolicies : System.ServiceModel.OperationContext -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;System.IdentityModel.Policy.IAuthorizationPolicy&gt;&#xA;override this.GetAuthorizationPolicies : System.ServiceModel.OperationContext -&gt; System.Collections.ObjectModel.ReadOnlyCollection&lt;System.IdentityModel.Policy.IAuthorizationPolicy&gt;" Usage="serviceAuthorizationManager.GetAuthorizationPolicies operationContext" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.IdentityModel.Policy.IAuthorizationPolicy&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationContext" Type="System.ServiceModel.OperationContext" />
      </Parameters>
      <Docs>
        <param name="operationContext">
          <see cref="T:System.ServiceModel.OperationContext" /> Bieżącego żądania autoryzacji.</param>
        <summary>Pobiera zestaw zasad, które uczestniczą w oceny zasad.</summary>
        <returns>A <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" /> typu <see cref="T:System.IdentityModel.Policy.IAuthorizationPolicy" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementacja usługi Windows Communication Foundation (WCF) zawiera domyślny zestaw zasad autoryzacji. Należą do głównej token, który zawiera poświadczenia, które osoby żądającej i wszystkie pomocnicze tokenów, tokeny transportu i zewnętrznych zasad, jeśli określony.  
  
 Można zastąpić tę implementację i podaj innego zestawu zasad.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>