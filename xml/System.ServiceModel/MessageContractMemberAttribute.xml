<Type Name="MessageContractMemberAttribute" FullName="System.ServiceModel.MessageContractMemberAttribute">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="8bd7dd5ba88b9904b8ea869d643e4d030ff67158" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36610667" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class MessageContractMemberAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit MessageContractMemberAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.MessageContractMemberAttribute" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class MessageContractMemberAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class MessageContractMemberAttribute abstract : Attribute" />
  <TypeSignature Language="F#" Value="type MessageContractMemberAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Deklaruje podstawowe elementy <see cref="T:System.ServiceModel.MessageBodyMemberAttribute" /> i <see cref="T:System.ServiceModel.MessageHeaderAttribute" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta klasa zawiera właściwości wspólne dla wszystkich części komunikatu protokołu SOAP. Na przykład wszystkie części mieć nazwę i przestrzeń nazw i potencjalnie poziomu zastosowano zabezpieczenia.  
  
 Uzyskać informacji na temat kontrolowania serializacji zawartość treści protokołu SOAP bez modyfikowania samego koperty protokołu SOAP domyślne, zobacz <xref:System.Runtime.Serialization.DataContractAttribute?displayProperty=nameWithType>, [Określanie transferu danych w kontraktach usług](~/docs/framework/wcf/feature-details/specifying-data-transfer-in-service-contracts.md), i [przy użyciu danych Kontrakty](~/docs/framework/wcf/feature-details/using-data-contracts.md).  
  
 Aby uzyskać więcej informacji o tworzeniu kontrakty komunikatów, zobacz [za pomocą kontraktów komunikatu](~/docs/framework/wcf/feature-details/using-message-contracts.md).  
  
   
  
## Examples  
 W poniższych przykładach kodu pokazano kontraktu niestandardowy komunikat, który używa <xref:System.ServiceModel.MessageContractAttribute>, <xref:System.ServiceModel.MessageHeaderAttribute>, i <xref:System.ServiceModel.MessageBodyMemberAttribute> atrybutów (który wszystkich dziedziczy po <xref:System.ServiceModel.MessageContractMemberAttribute>) do tworzenia niestandardowych komunikatów typu można używać w operacjach. W takim przypadku istnieją trzy elementy członkowskie, które są serializowane w elemencie treści komunikatu protokołu SOAP: `sourceAccount`, `targetAccount`i `amount` wartość (która jest zserializowane do elementu o nazwie `transactionAmount`). Ponadto `IsAudited` element nagłówka SOAP znajduje się w `http://schemas.contosobank.com/auditing/2005` przestrzeni nazw i `sourceAccount` zostaje zaszyfrowany i podpisany cyfrowo.  
  
> [!NOTE]
>  `Operation` i `Account` typy muszą mieć kontraktu danych.  
  
```csharp  
[MessageContract]  
public class BankingTransaction  
{  
  [MessageHeader]   
  public Operation operation;  
  [MessageHeader(Namespace="http://schemas.contosobank.com/auditing/2005")]   
  public bool IsAudited;  
  [MessageBody(ProtectionLevel=ProtectionLevel.EncryptAndSign)]   
  public Account sourceAccount;  
  [MessageBody]   
  public Account targetAccount;  
  [MessageBody(Name="transactionAmount")]   
  public int amount;  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MessageContractMemberAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.MessageContractMemberAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; MessageContractMemberAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.ServiceModel.MessageContractMemberAttribute" /> klasy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasProtectionLevel">
      <MemberSignature Language="C#" Value="public bool HasProtectionLevel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasProtectionLevel" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.MessageContractMemberAttribute.HasProtectionLevel" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasProtectionLevel As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasProtectionLevel { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasProtectionLevel : bool" Usage="System.ServiceModel.MessageContractMemberAttribute.HasProtectionLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>W przypadku przesłonięcia w klasie pochodnej pobiera wartość wskazującą, czy element członkowski ma przypisano poziomu ochrony.</summary>
        <value>
          <see langword="true" /> Jeśli element członkowski ma poziom ochrony; w przeciwnym razie <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.MessageContractMemberAttribute.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.ServiceModel.MessageContractMemberAttribute.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Określa nazwę elementu, do którego odnosi się do tego elementu członkowskiego.</summary>
        <value>Nazwa elementu, do którego odnosi się do tego elementu członkowskiego. Ten ciąg musi być prawidłową nazwą elementu XML.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 W poniższych przykładach kodu pokazano kontraktu niestandardowy komunikat, który używa <xref:System.ServiceModel.MessageContractAttribute>, <xref:System.ServiceModel.MessageHeaderAttribute>, i <xref:System.ServiceModel.MessageBodyMemberAttribute> atrybuty do tworzenia niestandardowych, silnie typizowanych komunikatów do użycia jako parametry. W takim przypadku istnieją trzy elementy członkowskie danych, które są serializowane w elemencie treści komunikatu protokołu SOAP: `sourceAccount`, `targetAccount`i `amount` wartość (która jest zserializowane do elementu o nazwie `transactionAmount`). Ponadto `IsAudited` element nagłówka SOAP znajduje się w `http://schemas.contosobank.com/auditing/2005` przestrzeni nazw.  
  
> [!NOTE]
>  `Operation` i `Account` typów musi mieć również kontraktu danych.  
  
```csharp  
[MessageContract]  
public class BankingTransaction  
{  
  [MessageHeader] public Operation operation;  
  [MessageHeader(Namespace="http://schemas.contosobank.com/auditing/2005")] public bool IsAudited;  
  [MessageBody] public Account sourceAccount;  
  [MessageBody] public Account targetAccount;  
  [MessageBody(Name="transactionAmount")] public int amount;  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public string Namespace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Namespace" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.MessageContractMemberAttribute.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public Property Namespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Namespace { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Namespace : string with get, set" Usage="System.ServiceModel.MessageContractMemberAttribute.Namespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Określa przestrzeń nazw elementu, do którego odnosi się do tego elementu członkowskiego.</summary>
        <value>Identyfikator URI przestrzeni nazw z elementu, do którego odnosi się do tego elementu członkowskiego.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 W poniższych przykładach kodu pokazano kontraktu niestandardowy komunikat, który używa <xref:System.ServiceModel.MessageContractAttribute>, <xref:System.ServiceModel.MessageHeaderAttribute>, i <xref:System.ServiceModel.MessageBodyMemberAttribute> atrybutów (który wszystkich dziedziczy po <xref:System.ServiceModel.MessageContractMemberAttribute>) do tworzenia niestandardowych komunikatów typu można używać w operacjach. W takim przypadku istnieją trzy elementy członkowskie, które są serializowane w elemencie treści komunikatu protokołu SOAP: `sourceAccount`, `targetAccount`i `amount` wartość (która jest zserializowane do elementu o nazwie `transactionAmount`). Ponadto `IsAudited` element nagłówka SOAP znajduje się w `http://schemas.contosobank.com/auditing/2005` przestrzeni nazw i `sourceAccount` zostaje zaszyfrowany i podpisany cyfrowo.  
  
> [!NOTE]
>  `Operation` i `Account` typy muszą mieć kontraktu danych.  
  
```csharp  
[MessageContract]  
public class BankingTransaction  
{  
  [MessageHeader] public Operation operation;  
  [MessageHeader(Namespace="http://schemas.contosobank.com/auditing/2005")] public bool IsAudited;  
  [MessageBody] public Account sourceAccount;  
  [MessageBody] public Account targetAccount;  
  [MessageBody(Name="transactionAmount")] public int amount;  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProtectionLevel">
      <MemberSignature Language="C#" Value="public System.Net.Security.ProtectionLevel ProtectionLevel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Net.Security.ProtectionLevel ProtectionLevel" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.MessageContractMemberAttribute.ProtectionLevel" />
      <MemberSignature Language="VB.NET" Value="Public Property ProtectionLevel As ProtectionLevel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Security::ProtectionLevel ProtectionLevel { System::Net::Security::ProtectionLevel get(); void set(System::Net::Security::ProtectionLevel value); };" />
      <MemberSignature Language="F#" Value="member this.ProtectionLevel : System.Net.Security.ProtectionLevel with get, set" Usage="System.ServiceModel.MessageContractMemberAttribute.ProtectionLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Security.ProtectionLevel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Określa, czy mają być przekazywane jako element członkowski-podpisany, lub podpisane i zaszyfrowane.</summary>
        <value>Jeden z <see cref="T:System.Net.Security.ProtectionLevel" /> wartości. Wartość domyślna to <see cref="F:System.Net.Security.ProtectionLevel.None" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby korzystać z <xref:System.ServiceModel.MessageContractMemberAttribute.ProtectionLevel%2A> właściwości albo <xref:System.ServiceModel.MessageHeaderAttribute> lub <xref:System.ServiceModel.MessageBodyMemberAttribute> atrybutów należy prawidłowo skonfigurować powiązania i zachowania. Jeśli te funkcje zabezpieczeń są używane bez odpowiedniej konfiguracji (na przykład za pomocą <xref:System.Net.Security.ProtectionLevel.Sign?displayProperty=nameWithType> z częścią określającą wiadomość bez podawania poświadczeń zabezpieczeń) jest zwracany wyjątek w czasie wykonywania.  
  
 Ponadto poziom ochrony jest określany na każdy nagłówek pojedynczo. Jednak treści protokołu SOAP ma ochrony tylko jeden poziom, niezależnie od liczby części treści. Poziom ochrony treści jest określany przez najwyższą <xref:System.ServiceModel.MessageContractMemberAttribute.ProtectionLevel%2A> wartość właściwości wszystkie części treści. Rozważmy na przykład następującej klasy:  
  
```csharp  
[MessageContract]  
public class PatientRecord  
{  
   [MessageHeader(ProtectionLevel=None)] public int recordID;  
   [MessageHeader(ProtectionLevel=Sign)] public string patientName;  
   [MessageHeader(ProtectionLevel=EncryptAndSign)] public string SSN;  
   [MessageBody(ProtectionLevel=None)] public string comments;  
   [MessageBody(ProtectionLevel=Sign)] public string diagnosis;  
   [MessageBody(ProtectionLevel=EncryptAndSign)] public string medicalHistory;  
}  
```  
  
 W tym przykładzie `recordID` nagłówka nie jest chroniony, `patientName` jest podpisany, a `SSN` jest zaszyfrowana i podpisana. Brak co najmniej jednej części, `medicalHistory`, z <xref:System.Net.Security.ProtectionLevel.EncryptAndSign?displayProperty=nameWithType> i w związku z tym cała treść zostaje zaszyfrowany i podpisany, nawet jeśli `comments` i `diagnosis` części treści Określ niższe poziomy ochrony.  
  
 Zachowania ochrony w czasie wykonywania jest kombinacją wartościom poziomu ochrony na następujących właściwości. Te właściwości mają strukturę hierarchiczną. Ustawienie wartości peryferyjnych ustanawia ustawieniem domyślnym dla wszystkich zakresów mniejszą niż, chyba że jawnie ustawiono inną wartość mniejszą niż zakres. W takim przypadku wartość zewnętrzne pozostaje domyślnego dla wszystkich mniejszą niż zakresów z wyjątkiem obsługującej ustawione.  
  
 Na przykład jeśli <xref:System.ServiceModel.ServiceContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType> ustawiono <xref:System.Net.Security.ProtectionLevel.EncryptAndSign?displayProperty=nameWithType> i nie mniejszą niż zakresy mają ustawienia poziomu ochrony, wszystkie wiadomości w kontrakt operacji są zaszyfrowana i podpisana. Jeśli jednak jeden z tych działań ma <xref:System.ServiceModel.OperationContractAttribute> ustawioną <xref:System.Net.Security.ProtectionLevel.Sign?displayProperty=nameWithType>, następnie komunikatów dla tej operacji jest zarejestrowany, ale wszystkie inne komunikaty w kontrakcie są zaszyfrowana i podpisana.  
  
 Aby uzyskać więcej informacji dotyczących poziomów ochrony i założenia i zakresy, zobacz [poziom ochrony opis](~/docs/framework/wcf/understanding-protection-level.md).  
  
 Zakresy, w których te wartości są ustawiane są:  
  
 <xref:System.ServiceModel.ServiceContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType>  
  
 <xref:System.ServiceModel.OperationContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType>  
  
 <xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType>  
  
 <xref:System.ServiceModel.MessageContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType>  
  
 <xref:System.ServiceModel.MessageContractMemberAttribute.ProtectionLevel%2A?displayProperty=nameWithType> Właściwość <xref:System.ServiceModel.MessageHeaderAttribute?displayProperty=nameWithType>.  
  
 <xref:System.ServiceModel.MessageContractMemberAttribute.ProtectionLevel%2A?displayProperty=nameWithType> Właściwość <xref:System.ServiceModel.MessageBodyMemberAttribute?displayProperty=nameWithType>.  
  
 Gdy nie poziomu ochrony, nie jawnie określone w umowie a podstawowej powiązanie obsługuje zabezpieczeń, (zarówno na poziomie transportu lub komunikat), poziom skutecznej ochrony dla całej umowy jest <xref:System.Net.Security.ProtectionLevel.EncryptAndSign?displayProperty=nameWithType>. Jeśli powiązanie nie obsługuje zabezpieczeń (takich jak <xref:System.ServiceModel.BasicHttpBinding>), obowiązującą <xref:System.Net.Security.ProtectionLevel?displayProperty=nameWithType> jest <xref:System.Net.Security.ProtectionLevel.None?displayProperty=nameWithType> dla całej umowy. Wynik jest, w zależności od powiązanie punktu końcowego, klienci mogą wymagają różnych ochrony zabezpieczeń na poziomie komunikatu i transportu, nawet wtedy, gdy kontrakt Określa <xref:System.Net.Security.ProtectionLevel.None?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>