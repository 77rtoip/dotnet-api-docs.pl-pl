<Type Name="MessageContractMemberAttribute" FullName="System.ServiceModel.MessageContractMemberAttribute">
  <TypeSignature Language="C#" Value="public abstract class MessageContractMemberAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit MessageContractMemberAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.MessageContractMemberAttribute" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class MessageContractMemberAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class MessageContractMemberAttribute abstract : Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="5d202-101">Deklaruje podstawowe elementy <see cref="T:System.ServiceModel.MessageBodyMemberAttribute" /> i <see cref="T:System.ServiceModel.MessageHeaderAttribute" />.</span><span class="sxs-lookup"><span data-stu-id="5d202-101">Declares the base members for <see cref="T:System.ServiceModel.MessageBodyMemberAttribute" /> and <see cref="T:System.ServiceModel.MessageHeaderAttribute" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d202-102">Ta klasa zawiera właściwości wspólne dla wszystkich części komunikatu protokołu SOAP.</span><span class="sxs-lookup"><span data-stu-id="5d202-102">This class contains properties common to all parts of a SOAP message.</span></span> <span data-ttu-id="5d202-103">Na przykład wszystkie części mieć nazwę i przestrzeń nazw i potencjalnie poziomu zastosowano zabezpieczenia.</span><span class="sxs-lookup"><span data-stu-id="5d202-103">For example, all parts have a name and a namespace, and potentially a level of security applied.</span></span>  
  
 <span data-ttu-id="5d202-104">Uzyskać informacji na temat kontrolowania serializacji zawartość treści protokołu SOAP bez modyfikowania samego koperty protokołu SOAP domyślne, zobacz <xref:System.Runtime.Serialization.DataContractAttribute?displayProperty=nameWithType>, [Określanie transferu danych w kontraktach usług](~/docs/framework/wcf/feature-details/specifying-data-transfer-in-service-contracts.md), i [przy użyciu danych Kontrakty](~/docs/framework/wcf/feature-details/using-data-contracts.md).</span><span class="sxs-lookup"><span data-stu-id="5d202-104">For information on controlling the serialization of the contents of a SOAP body without modifying the default SOAP envelope itself, see <xref:System.Runtime.Serialization.DataContractAttribute?displayProperty=nameWithType>, [Specifying Data Transfer in Service Contracts](~/docs/framework/wcf/feature-details/specifying-data-transfer-in-service-contracts.md), and [Using Data Contracts](~/docs/framework/wcf/feature-details/using-data-contracts.md).</span></span>  
  
 <span data-ttu-id="5d202-105">Aby uzyskać więcej informacji o tworzeniu kontrakty komunikatów, zobacz [za pomocą kontraktów komunikatu](~/docs/framework/wcf/feature-details/using-message-contracts.md).</span><span class="sxs-lookup"><span data-stu-id="5d202-105">For more information about creating message contracts, see [Using Message Contracts](~/docs/framework/wcf/feature-details/using-message-contracts.md).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="5d202-106">W poniższych przykładach kodu pokazano kontraktu niestandardowy komunikat, który używa <xref:System.ServiceModel.MessageContractAttribute>, <xref:System.ServiceModel.MessageHeaderAttribute>, i <xref:System.ServiceModel.MessageBodyMemberAttribute> atrybutów (który wszystkich dziedziczy po <xref:System.ServiceModel.MessageContractMemberAttribute>) do tworzenia niestandardowych komunikatów typu można używać w operacjach.</span><span class="sxs-lookup"><span data-stu-id="5d202-106">The following code examples demonstrate a custom message contract that uses the <xref:System.ServiceModel.MessageContractAttribute>, <xref:System.ServiceModel.MessageHeaderAttribute>, and <xref:System.ServiceModel.MessageBodyMemberAttribute> attributes (which all inherit from <xref:System.ServiceModel.MessageContractMemberAttribute>)to create custom typed messages to use in operations.</span></span> <span data-ttu-id="5d202-107">W takim przypadku istnieją trzy elementy członkowskie, które są serializowane w elemencie treści komunikatu protokołu SOAP: `sourceAccount`, `targetAccount`i `amount` wartość (która jest zserializowane do elementu o nazwie `transactionAmount`).</span><span class="sxs-lookup"><span data-stu-id="5d202-107">In this case, there are three members that are serialized into the body element of the SOAP message: `sourceAccount`, `targetAccount`, and the `amount` value, (which is serialized into an element with the name `transactionAmount`).</span></span> <span data-ttu-id="5d202-108">Ponadto `IsAudited` element nagłówka SOAP znajduje się w `http://schemas.contosobank.com/auditing/2005` przestrzeni nazw i `sourceAccount` zostaje zaszyfrowany i podpisany cyfrowo.</span><span class="sxs-lookup"><span data-stu-id="5d202-108">In addition, the `IsAudited` SOAP header element resides in the `http://schemas.contosobank.com/auditing/2005` namespace, and `sourceAccount` is encrypted and digitally signed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5d202-109">`Operation` i `Account` typy muszą mieć kontraktu danych.</span><span class="sxs-lookup"><span data-stu-id="5d202-109">The `Operation` and `Account` types must have a data contract.</span></span>  
  
```csharp  
[MessageContract]  
public class BankingTransaction  
{  
  [MessageHeader]   
  public Operation operation;  
  [MessageHeader(Namespace="http://schemas.contosobank.com/auditing/2005")]   
  public bool IsAudited;  
  [MessageBody(ProtectionLevel=ProtectionLevel.EncryptAndSign)]   
  public Account sourceAccount;  
  [MessageBody]   
  public Account targetAccount;  
  [MessageBody(Name="transactionAmount")]   
  public int amount;  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MessageContractMemberAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.MessageContractMemberAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; MessageContractMemberAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="5d202-110">Inicjuje nowe wystąpienie klasy <see cref="T:System.ServiceModel.MessageContractMemberAttribute" /> klasy.</span><span class="sxs-lookup"><span data-stu-id="5d202-110">Initializes a new instance of the <see cref="T:System.ServiceModel.MessageContractMemberAttribute" /> class.</span></span></summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasProtectionLevel">
      <MemberSignature Language="C#" Value="public bool HasProtectionLevel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasProtectionLevel" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.MessageContractMemberAttribute.HasProtectionLevel" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasProtectionLevel As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasProtectionLevel { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d202-111">W przypadku przesłonięcia w klasie pochodnej pobiera wartość wskazującą, czy element członkowski ma przypisano poziomu ochrony.</span><span class="sxs-lookup"><span data-stu-id="5d202-111">When overridden in a derived class, gets a value that indicates whether the member has a protection level assigned.</span></span></summary>
        <value>
          <span data-ttu-id="5d202-112"><see langword="true" /> Jeśli element członkowski ma poziom ochrony; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="5d202-112"><see langword="true" /> if the member has a protection level; otherwise, <see langword="false" />.</span></span></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.MessageContractMemberAttribute.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d202-113">Określa nazwę elementu, do którego odnosi się do tego elementu członkowskiego.</span><span class="sxs-lookup"><span data-stu-id="5d202-113">Specifies the name of the element that corresponds to this member.</span></span></summary>
        <value><span data-ttu-id="5d202-114">Nazwa elementu, do którego odnosi się do tego elementu członkowskiego.</span><span class="sxs-lookup"><span data-stu-id="5d202-114">The name of the element that corresponds to this member.</span></span> <span data-ttu-id="5d202-115">Ten ciąg musi być prawidłową nazwą elementu XML.</span><span class="sxs-lookup"><span data-stu-id="5d202-115">This string must be a valid XML element name.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="5d202-116">W poniższych przykładach kodu pokazano kontraktu niestandardowy komunikat, który używa <xref:System.ServiceModel.MessageContractAttribute>, <xref:System.ServiceModel.MessageHeaderAttribute>, i <xref:System.ServiceModel.MessageBodyMemberAttribute> atrybuty do tworzenia niestandardowych, silnie typizowanych komunikatów do użycia jako parametry.</span><span class="sxs-lookup"><span data-stu-id="5d202-116">The following code examples demonstrate a custom message contract that uses the <xref:System.ServiceModel.MessageContractAttribute>, <xref:System.ServiceModel.MessageHeaderAttribute>, and <xref:System.ServiceModel.MessageBodyMemberAttribute> attributes to create custom, strongly-typed messages to use as parameters.</span></span> <span data-ttu-id="5d202-117">W takim przypadku istnieją trzy elementy członkowskie danych, które są serializowane w elemencie treści komunikatu protokołu SOAP: `sourceAccount`, `targetAccount`i `amount` wartość (która jest zserializowane do elementu o nazwie `transactionAmount`).</span><span class="sxs-lookup"><span data-stu-id="5d202-117">In this case, there are three data members that are serialized into the body element of the SOAP message: `sourceAccount`, `targetAccount`, and the `amount` value, (which is serialized into an element with the name `transactionAmount`).</span></span> <span data-ttu-id="5d202-118">Ponadto `IsAudited` element nagłówka SOAP znajduje się w `http://schemas.contosobank.com/auditing/2005` przestrzeni nazw.</span><span class="sxs-lookup"><span data-stu-id="5d202-118">In addition, the `IsAudited` SOAP header element resides in the `http://schemas.contosobank.com/auditing/2005` namespace.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5d202-119">`Operation` i `Account` typów musi mieć również kontraktu danych.</span><span class="sxs-lookup"><span data-stu-id="5d202-119">The `Operation` and `Account` types must also have a data contract.</span></span>  
  
```csharp  
[MessageContract]  
public class BankingTransaction  
{  
  [MessageHeader] public Operation operation;  
  [MessageHeader(Namespace="http://schemas.contosobank.com/auditing/2005")] public bool IsAudited;  
  [MessageBody] public Account sourceAccount;  
  [MessageBody] public Account targetAccount;  
  [MessageBody(Name="transactionAmount")] public int amount;  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public string Namespace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Namespace" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.MessageContractMemberAttribute.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public Property Namespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Namespace { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d202-120">Określa przestrzeń nazw elementu, do którego odnosi się do tego elementu członkowskiego.</span><span class="sxs-lookup"><span data-stu-id="5d202-120">Specifies the namespace of the element that corresponds to this member.</span></span></summary>
        <value><span data-ttu-id="5d202-121">Identyfikator URI przestrzeni nazw z elementu, do którego odnosi się do tego elementu członkowskiego.</span><span class="sxs-lookup"><span data-stu-id="5d202-121">A namespace URI of the element that corresponds to this member.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="5d202-122">W poniższych przykładach kodu pokazano kontraktu niestandardowy komunikat, który używa <xref:System.ServiceModel.MessageContractAttribute>, <xref:System.ServiceModel.MessageHeaderAttribute>, i <xref:System.ServiceModel.MessageBodyMemberAttribute> atrybutów (który wszystkich dziedziczy po <xref:System.ServiceModel.MessageContractMemberAttribute>) do tworzenia niestandardowych komunikatów typu można używać w operacjach.</span><span class="sxs-lookup"><span data-stu-id="5d202-122">The following code examples demonstrate a custom message contract that uses the <xref:System.ServiceModel.MessageContractAttribute>, <xref:System.ServiceModel.MessageHeaderAttribute>, and <xref:System.ServiceModel.MessageBodyMemberAttribute> attributes (which all inherit from <xref:System.ServiceModel.MessageContractMemberAttribute>)to create custom typed messages to use in operations.</span></span> <span data-ttu-id="5d202-123">W takim przypadku istnieją trzy elementy członkowskie, które są serializowane w elemencie treści komunikatu protokołu SOAP: `sourceAccount`, `targetAccount`i `amount` wartość (która jest zserializowane do elementu o nazwie `transactionAmount`).</span><span class="sxs-lookup"><span data-stu-id="5d202-123">In this case, there are three members that are serialized into the body element of the SOAP message: `sourceAccount`, `targetAccount`, and the `amount` value, (which is serialized into an element with the name `transactionAmount`).</span></span> <span data-ttu-id="5d202-124">Ponadto `IsAudited` element nagłówka SOAP znajduje się w `http://schemas.contosobank.com/auditing/2005` przestrzeni nazw i `sourceAccount` zostaje zaszyfrowany i podpisany cyfrowo.</span><span class="sxs-lookup"><span data-stu-id="5d202-124">In addition, the `IsAudited` SOAP header element resides in the `http://schemas.contosobank.com/auditing/2005` namespace, and `sourceAccount` is encrypted and digitally signed.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="5d202-125">`Operation` i `Account` typy muszą mieć kontraktu danych.</span><span class="sxs-lookup"><span data-stu-id="5d202-125">The `Operation` and `Account` types must have a data contract.</span></span>  
  
```csharp  
[MessageContract]  
public class BankingTransaction  
{  
  [MessageHeader] public Operation operation;  
  [MessageHeader(Namespace="http://schemas.contosobank.com/auditing/2005")] public bool IsAudited;  
  [MessageBody] public Account sourceAccount;  
  [MessageBody] public Account targetAccount;  
  [MessageBody(Name="transactionAmount")] public int amount;  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProtectionLevel">
      <MemberSignature Language="C#" Value="public System.Net.Security.ProtectionLevel ProtectionLevel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Net.Security.ProtectionLevel ProtectionLevel" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.MessageContractMemberAttribute.ProtectionLevel" />
      <MemberSignature Language="VB.NET" Value="Public Property ProtectionLevel As ProtectionLevel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Security::ProtectionLevel ProtectionLevel { System::Net::Security::ProtectionLevel get(); void set(System::Net::Security::ProtectionLevel value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Security.ProtectionLevel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="5d202-126">Określa, czy mają być przekazywane jako element członkowski-podpisany, lub podpisane i zaszyfrowane.</span><span class="sxs-lookup"><span data-stu-id="5d202-126">Specifies whether the member is to be transmitted as-is, signed, or signed and encrypted.</span></span></summary>
        <value><span data-ttu-id="5d202-127">Jeden z <see cref="T:System.Net.Security.ProtectionLevel" /> wartości.</span><span class="sxs-lookup"><span data-stu-id="5d202-127">One of the <see cref="T:System.Net.Security.ProtectionLevel" /> values.</span></span> <span data-ttu-id="5d202-128">Wartość domyślna to <see cref="F:System.Net.Security.ProtectionLevel.None" />.</span><span class="sxs-lookup"><span data-stu-id="5d202-128">The default is <see cref="F:System.Net.Security.ProtectionLevel.None" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="5d202-129">Aby korzystać z <xref:System.ServiceModel.MessageContractMemberAttribute.ProtectionLevel%2A> właściwości albo <xref:System.ServiceModel.MessageHeaderAttribute> lub <xref:System.ServiceModel.MessageBodyMemberAttribute> atrybutów należy prawidłowo skonfigurować powiązania i zachowania.</span><span class="sxs-lookup"><span data-stu-id="5d202-129">To make use of the <xref:System.ServiceModel.MessageContractMemberAttribute.ProtectionLevel%2A> property in either the <xref:System.ServiceModel.MessageHeaderAttribute> or <xref:System.ServiceModel.MessageBodyMemberAttribute> attributes you must properly configure the binding and behaviors.</span></span> <span data-ttu-id="5d202-130">Jeśli te funkcje zabezpieczeń są używane bez odpowiedniej konfiguracji (na przykład za pomocą <xref:System.Net.Security.ProtectionLevel.Sign?displayProperty=nameWithType> z częścią określającą wiadomość bez podawania poświadczeń zabezpieczeń) jest zwracany wyjątek w czasie wykonywania.</span><span class="sxs-lookup"><span data-stu-id="5d202-130">If these security features are used without a proper configuration (for example, using <xref:System.Net.Security.ProtectionLevel.Sign?displayProperty=nameWithType> with a message part without supplying security credentials) an exception is thrown at run time.</span></span>  
  
 <span data-ttu-id="5d202-131">Ponadto poziom ochrony jest określany na każdy nagłówek pojedynczo.</span><span class="sxs-lookup"><span data-stu-id="5d202-131">In addition, the protection level is determined for each header individually.</span></span> <span data-ttu-id="5d202-132">Jednak treści protokołu SOAP ma ochrony tylko jeden poziom, niezależnie od liczby części treści.</span><span class="sxs-lookup"><span data-stu-id="5d202-132">However, the SOAP body has only one protection level, regardless of the number of body parts.</span></span> <span data-ttu-id="5d202-133">Poziom ochrony treści jest określany przez najwyższą <xref:System.ServiceModel.MessageContractMemberAttribute.ProtectionLevel%2A> wartość właściwości wszystkie części treści.</span><span class="sxs-lookup"><span data-stu-id="5d202-133">The protection level of the body is determined by the highest <xref:System.ServiceModel.MessageContractMemberAttribute.ProtectionLevel%2A> property value of all the body parts.</span></span> <span data-ttu-id="5d202-134">Rozważmy na przykład następującej klasy:</span><span class="sxs-lookup"><span data-stu-id="5d202-134">For example, consider the following class:</span></span>  
  
```csharp  
[MessageContract]  
public class PatientRecord  
{  
   [MessageHeader(ProtectionLevel=None)] public int recordID;  
   [MessageHeader(ProtectionLevel=Sign)] public string patientName;  
   [MessageHeader(ProtectionLevel=EncryptAndSign)] public string SSN;  
   [MessageBody(ProtectionLevel=None)] public string comments;  
   [MessageBody(ProtectionLevel=Sign)] public string diagnosis;  
   [MessageBody(ProtectionLevel=EncryptAndSign)] public string medicalHistory;  
}  
```  
  
 <span data-ttu-id="5d202-135">W tym przykładzie `recordID` nagłówka nie jest chroniony, `patientName` jest podpisany, a `SSN` jest zaszyfrowana i podpisana.</span><span class="sxs-lookup"><span data-stu-id="5d202-135">In this example, the `recordID` header is not protected, `patientName` is signed, and `SSN` is encrypted and signed.</span></span> <span data-ttu-id="5d202-136">Brak co najmniej jednej części, `medicalHistory`, z <xref:System.Net.Security.ProtectionLevel.EncryptAndSign?displayProperty=nameWithType> i w związku z tym cała treść zostaje zaszyfrowany i podpisany, nawet jeśli `comments` i `diagnosis` części treści Określ niższe poziomy ochrony.</span><span class="sxs-lookup"><span data-stu-id="5d202-136">There is at least one body part, `medicalHistory`, with <xref:System.Net.Security.ProtectionLevel.EncryptAndSign?displayProperty=nameWithType> and thus the entire message body is encrypted and signed, even though the `comments` and `diagnosis` body parts specify lower protection levels.</span></span>  
  
 <span data-ttu-id="5d202-137">Zachowania ochrony w czasie wykonywania jest kombinacją wartościom poziomu ochrony na następujących właściwości.</span><span class="sxs-lookup"><span data-stu-id="5d202-137">The protection behavior at runtime is the combination of the protection-level values set on the following properties.</span></span> <span data-ttu-id="5d202-138">Te właściwości mają strukturę hierarchiczną.</span><span class="sxs-lookup"><span data-stu-id="5d202-138">These properties have a hierarchical structure.</span></span> <span data-ttu-id="5d202-139">Ustawienie wartości peryferyjnych ustanawia ustawieniem domyślnym dla wszystkich zakresów mniejszą niż, chyba że jawnie ustawiono inną wartość mniejszą niż zakres.</span><span class="sxs-lookup"><span data-stu-id="5d202-139">Setting the outermost value establishes the default setting for all narrower scopes unless a different value for a narrower scope is explicitly set.</span></span> <span data-ttu-id="5d202-140">W takim przypadku wartość zewnętrzne pozostaje domyślnego dla wszystkich mniejszą niż zakresów z wyjątkiem obsługującej ustawione.</span><span class="sxs-lookup"><span data-stu-id="5d202-140">In this case, the outer value remains the default for all narrower scopes with the exception of that specifically set.</span></span>  
  
 <span data-ttu-id="5d202-141">Na przykład jeśli <xref:System.ServiceModel.ServiceContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType> ustawiono <xref:System.Net.Security.ProtectionLevel.EncryptAndSign?displayProperty=nameWithType> i nie mniejszą niż zakresy mają ustawienia poziomu ochrony, wszystkie wiadomości w kontrakt operacji są zaszyfrowana i podpisana.</span><span class="sxs-lookup"><span data-stu-id="5d202-141">For example, if <xref:System.ServiceModel.ServiceContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType> is set to <xref:System.Net.Security.ProtectionLevel.EncryptAndSign?displayProperty=nameWithType> and no other narrower scopes have protection level settings, all messages in an operation contract are encrypted and signed.</span></span> <span data-ttu-id="5d202-142">Jeśli jednak jeden z tych działań ma <xref:System.ServiceModel.OperationContractAttribute> ustawioną <xref:System.Net.Security.ProtectionLevel.Sign?displayProperty=nameWithType>, następnie komunikatów dla tej operacji jest zarejestrowany, ale wszystkie inne komunikaty w kontrakcie są zaszyfrowana i podpisana.</span><span class="sxs-lookup"><span data-stu-id="5d202-142">If, however, one of those operations has the <xref:System.ServiceModel.OperationContractAttribute> set to <xref:System.Net.Security.ProtectionLevel.Sign?displayProperty=nameWithType>, then the messages for that operation are signed but all other messages in the contract are encrypted and signed.</span></span>  
  
 <span data-ttu-id="5d202-143">Aby uzyskać więcej informacji dotyczących poziomów ochrony i założenia i zakresy, zobacz [poziom ochrony opis](~/docs/framework/wcf/understanding-protection-level.md).</span><span class="sxs-lookup"><span data-stu-id="5d202-143">For details about protection levels and their assumptions and scopes, see [Understanding Protection Level](~/docs/framework/wcf/understanding-protection-level.md).</span></span>  
  
 <span data-ttu-id="5d202-144">Zakresy, w których te wartości są ustawiane są:</span><span class="sxs-lookup"><span data-stu-id="5d202-144">The scopes at which these values are set are:</span></span>  
  
 <xref:System.ServiceModel.ServiceContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType>  
  
 <xref:System.ServiceModel.OperationContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType>  
  
 <xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType>  
  
 <xref:System.ServiceModel.MessageContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType>  
  
 <span data-ttu-id="5d202-145"><xref:System.ServiceModel.MessageContractMemberAttribute.ProtectionLevel%2A?displayProperty=nameWithType> Właściwość <xref:System.ServiceModel.MessageHeaderAttribute?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="5d202-145">The <xref:System.ServiceModel.MessageContractMemberAttribute.ProtectionLevel%2A?displayProperty=nameWithType> property on <xref:System.ServiceModel.MessageHeaderAttribute?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="5d202-146"><xref:System.ServiceModel.MessageContractMemberAttribute.ProtectionLevel%2A?displayProperty=nameWithType> Właściwość <xref:System.ServiceModel.MessageBodyMemberAttribute?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="5d202-146">The <xref:System.ServiceModel.MessageContractMemberAttribute.ProtectionLevel%2A?displayProperty=nameWithType> property on <xref:System.ServiceModel.MessageBodyMemberAttribute?displayProperty=nameWithType>.</span></span>  
  
 <span data-ttu-id="5d202-147">Gdy nie poziomu ochrony, nie jawnie określone w umowie a podstawowej powiązanie obsługuje zabezpieczeń, (zarówno na poziomie transportu lub komunikat), poziom skutecznej ochrony dla całej umowy jest <xref:System.Net.Security.ProtectionLevel.EncryptAndSign?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="5d202-147">When there is no protection level explicitly specified on the contract and the underlying binding supports security (whether at the transport or message level), the effective protection level for the whole contract is <xref:System.Net.Security.ProtectionLevel.EncryptAndSign?displayProperty=nameWithType>.</span></span> <span data-ttu-id="5d202-148">Jeśli powiązanie nie obsługuje zabezpieczeń (takich jak <xref:System.ServiceModel.BasicHttpBinding>), obowiązującą <xref:System.Net.Security.ProtectionLevel?displayProperty=nameWithType> jest <xref:System.Net.Security.ProtectionLevel.None?displayProperty=nameWithType> dla całej umowy.</span><span class="sxs-lookup"><span data-stu-id="5d202-148">If the binding does not support security (such as <xref:System.ServiceModel.BasicHttpBinding>), the effective <xref:System.Net.Security.ProtectionLevel?displayProperty=nameWithType> is <xref:System.Net.Security.ProtectionLevel.None?displayProperty=nameWithType> for the whole contract.</span></span> <span data-ttu-id="5d202-149">Wynik jest, w zależności od powiązanie punktu końcowego, klienci mogą wymagają różnych ochrony zabezpieczeń na poziomie komunikatu i transportu, nawet wtedy, gdy kontrakt Określa <xref:System.Net.Security.ProtectionLevel.None?displayProperty=nameWithType>.</span><span class="sxs-lookup"><span data-stu-id="5d202-149">The result is that depending upon the endpoint binding, clients can require different message or transport level security protection even when the contract specifies <xref:System.Net.Security.ProtectionLevel.None?displayProperty=nameWithType>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>