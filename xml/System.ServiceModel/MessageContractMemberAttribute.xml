<Type Name="MessageContractMemberAttribute" FullName="System.ServiceModel.MessageContractMemberAttribute">
  <Metadata><Meta Name="ms.openlocfilehash" Value="358722c2a653580cd2a564670fb9ef8d514a7333" /><Meta Name="ms.sourcegitcommit" Value="0d6aa6694f157a08fe52cd25b4d9d3dcf913e812" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="10/12/2018" /><Meta Name="ms.locfileid" Value="49150053" /></Metadata><TypeSignature Language="C#" Value="public abstract class MessageContractMemberAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit MessageContractMemberAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.MessageContractMemberAttribute" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class MessageContractMemberAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class MessageContractMemberAttribute abstract : Attribute" />
  <TypeSignature Language="F#" Value="type MessageContractMemberAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Deklaruje podstawowy elementy <see cref="T:System.ServiceModel.MessageBodyMemberAttribute" /> i <see cref="T:System.ServiceModel.MessageHeaderAttribute" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta klasa zawiera właściwości wspólne dla wszystkich części komunikatu protokołu SOAP. Na przykład wszystkie części ma nazwę i obszar nazw i potencjalnie stopień zastosowano zabezpieczenia.  
  
 Aby uzyskać informacji na temat kontrolowania serializacji zawartość treści protokołu SOAP bez modyfikowania samego koperty protokołu SOAP domyślne, zobacz <xref:System.Runtime.Serialization.DataContractAttribute?displayProperty=nameWithType>, [Określanie transferu danych w kontraktach usług](~/docs/framework/wcf/feature-details/specifying-data-transfer-in-service-contracts.md), i [przy użyciu danych Kontrakty](~/docs/framework/wcf/feature-details/using-data-contracts.md).  
  
 Aby uzyskać więcej informacji na temat tworzenia kontrakty komunikatów, zobacz [za pomocą kontraktów komunikatu](~/docs/framework/wcf/feature-details/using-message-contracts.md).  
  
   
  
## Examples  
 Poniższe przykłady kodu ilustrują kontraktu niestandardowy komunikat, który używa <xref:System.ServiceModel.MessageContractAttribute>, <xref:System.ServiceModel.MessageHeaderAttribute>, i <xref:System.ServiceModel.MessageBodyMemberAttribute> atrybutów (której wszystkie dziedziczyć <xref:System.ServiceModel.MessageContractMemberAttribute>) do tworzenia niestandardowych wpisane wiadomości do użycia w ramach operacji. W tym przypadku istnieją trzy elementy członkowskie, które są serializowane w treści elementu komunikatu protokołu SOAP: `sourceAccount`, `targetAccount`i `amount` wartości (który jest serializowany do elementu o nazwie `transactionAmount`). Ponadto `IsAudited` element nagłówka SOAP znajduje się w `http://schemas.contosobank.com/auditing/2005` przestrzeni nazw i `sourceAccount` zostaje zaszyfrowany i podpisany cyfrowo.  
  
> [!NOTE]
>  `Operation` i `Account` typy muszą mieć kontraktu danych.  
  
```csharp  
[MessageContract]  
public class BankingTransaction  
{  
  [MessageHeader]   
  public Operation operation;  
  [MessageHeader(Namespace="http://schemas.contosobank.com/auditing/2005")]   
  public bool IsAudited;  
  [MessageBody(ProtectionLevel=ProtectionLevel.EncryptAndSign)]   
  public Account sourceAccount;  
  [MessageBody]   
  public Account targetAccount;  
  [MessageBody(Name="transactionAmount")]   
  public int amount;  
```  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected MessageContractMemberAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.MessageContractMemberAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; MessageContractMemberAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.ServiceModel.MessageContractMemberAttribute" /> klasy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasProtectionLevel">
      <MemberSignature Language="C#" Value="public bool HasProtectionLevel { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasProtectionLevel" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.MessageContractMemberAttribute.HasProtectionLevel" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasProtectionLevel As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasProtectionLevel { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasProtectionLevel : bool" Usage="System.ServiceModel.MessageContractMemberAttribute.HasProtectionLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>W przypadku przesłonięcia w klasie pochodnej pobiera wartość wskazującą, czy element członkowski ma przypisany poziom ochrony.</summary>
        <value><see langword="true" /> Jeśli element członkowski ma poziom ochrony; w przeciwnym razie <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.MessageContractMemberAttribute.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.ServiceModel.MessageContractMemberAttribute.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Określa nazwę elementu, który odnosi się do tego elementu członkowskiego.</summary>
        <value>Nazwa elementu, który odnosi się do tego elementu członkowskiego. Ten ciąg musi być prawidłową nazwą elementu XML.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższe przykłady kodu ilustrują kontraktu niestandardowy komunikat, który używa <xref:System.ServiceModel.MessageContractAttribute>, <xref:System.ServiceModel.MessageHeaderAttribute>, i <xref:System.ServiceModel.MessageBodyMemberAttribute> atrybutów do tworzenia niestandardowych, silnie typizowane wiadomości do użycia jako parametry. W tym przypadku istnieją trzy elementy członkowskie danych, które są serializowane w treści elementu komunikatu protokołu SOAP: `sourceAccount`, `targetAccount`i `amount` wartości (który jest serializowany do elementu o nazwie `transactionAmount`). Ponadto `IsAudited` element nagłówka SOAP znajduje się w `http://schemas.contosobank.com/auditing/2005` przestrzeni nazw.  
  
> [!NOTE]
>  `Operation` i `Account` typy muszą również mieć kontraktu danych.  
  
```csharp  
[MessageContract]  
public class BankingTransaction  
{  
  [MessageHeader] public Operation operation;  
  [MessageHeader(Namespace="http://schemas.contosobank.com/auditing/2005")] public bool IsAudited;  
  [MessageBody] public Account sourceAccount;  
  [MessageBody] public Account targetAccount;  
  [MessageBody(Name="transactionAmount")] public int amount;  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public string Namespace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Namespace" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.MessageContractMemberAttribute.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public Property Namespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Namespace { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Namespace : string with get, set" Usage="System.ServiceModel.MessageContractMemberAttribute.Namespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Określa przestrzeń nazw elementu, który odnosi się do tego elementu członkowskiego.</summary>
        <value>Identyfikator URI przestrzeni nazw elementu, który odnosi się do tego elementu członkowskiego.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższe przykłady kodu ilustrują kontraktu niestandardowy komunikat, który używa <xref:System.ServiceModel.MessageContractAttribute>, <xref:System.ServiceModel.MessageHeaderAttribute>, i <xref:System.ServiceModel.MessageBodyMemberAttribute> atrybutów (której wszystkie dziedziczyć <xref:System.ServiceModel.MessageContractMemberAttribute>) do tworzenia niestandardowych wpisane wiadomości do użycia w ramach operacji. W tym przypadku istnieją trzy elementy członkowskie, które są serializowane w treści elementu komunikatu protokołu SOAP: `sourceAccount`, `targetAccount`i `amount` wartości (który jest serializowany do elementu o nazwie `transactionAmount`). Ponadto `IsAudited` element nagłówka SOAP znajduje się w `http://schemas.contosobank.com/auditing/2005` przestrzeni nazw i `sourceAccount` zostaje zaszyfrowany i podpisany cyfrowo.  
  
> [!NOTE]
>  `Operation` i `Account` typy muszą mieć kontraktu danych.  
  
```csharp  
[MessageContract]  
public class BankingTransaction  
{  
  [MessageHeader] public Operation operation;  
  [MessageHeader(Namespace="http://schemas.contosobank.com/auditing/2005")] public bool IsAudited;  
  [MessageBody] public Account sourceAccount;  
  [MessageBody] public Account targetAccount;  
  [MessageBody(Name="transactionAmount")] public int amount;  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProtectionLevel">
      <MemberSignature Language="C#" Value="public System.Net.Security.ProtectionLevel ProtectionLevel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Net.Security.ProtectionLevel ProtectionLevel" />
      <MemberSignature Language="DocId" Value="P:System.ServiceModel.MessageContractMemberAttribute.ProtectionLevel" />
      <MemberSignature Language="VB.NET" Value="Public Property ProtectionLevel As ProtectionLevel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Security::ProtectionLevel ProtectionLevel { System::Net::Security::ProtectionLevel get(); void set(System::Net::Security::ProtectionLevel value); };" />
      <MemberSignature Language="F#" Value="member this.ProtectionLevel : System.Net.Security.ProtectionLevel with get, set" Usage="System.ServiceModel.MessageContractMemberAttribute.ProtectionLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Primitives</AssemblyName>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Net.Security.ProtectionLevel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Określa, czy mają być przekazywane jako element członkowski — podpisane, lub podpisane i szyfrowane.</summary>
        <value>Jedną z <see cref="T:System.Net.Security.ProtectionLevel" /> wartości. Wartość domyślna to <see cref="F:System.Net.Security.ProtectionLevel.None" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby korzystanie z <xref:System.ServiceModel.MessageContractMemberAttribute.ProtectionLevel%2A> właściwości albo <xref:System.ServiceModel.MessageHeaderAttribute> lub <xref:System.ServiceModel.MessageBodyMemberAttribute> atrybutów należy poprawnie skonfigurować powiązania i zachowania. Jeśli te funkcje zabezpieczeń są używane bez odpowiedniej konfiguracji (na przykład za pomocą <xref:System.Net.Security.ProtectionLevel.Sign?displayProperty=nameWithType> z części komunikatu, bez podawania poświadczeń zabezpieczeń) w czasie wykonywania jest zgłaszany wyjątek.  
  
 Ponadto poziom ochrony jest określany dla każdego nagłówka indywidualnie. Jednak treści protokołu SOAP ma poziom ochrony tylko jeden, niezależnie od liczby części treści. Poziom ochrony treści jest określana przez najwyższy <xref:System.ServiceModel.MessageContractMemberAttribute.ProtectionLevel%2A> wartość właściwości wszystkie części treści. Na przykład rozważmy następujące klasy:  
  
```csharp  
[MessageContract]  
public class PatientRecord  
{  
   [MessageHeader(ProtectionLevel=None)] public int recordID;  
   [MessageHeader(ProtectionLevel=Sign)] public string patientName;  
   [MessageHeader(ProtectionLevel=EncryptAndSign)] public string SSN;  
   [MessageBody(ProtectionLevel=None)] public string comments;  
   [MessageBody(ProtectionLevel=Sign)] public string diagnosis;  
   [MessageBody(ProtectionLevel=EncryptAndSign)] public string medicalHistory;  
}  
```  
  
 W tym przykładzie `recordID` nagłówka nie są chronione, `patientName` jest podpisany, a `SSN` zostaje zaszyfrowany i podpisany. Brak części treści co najmniej jeden `medicalHistory`, za pomocą <xref:System.Net.Security.ProtectionLevel.EncryptAndSign?displayProperty=nameWithType> i w związku z tym treść cały komunikat zostaje zaszyfrowany i podpisany, nawet jeśli `comments` i `diagnosis` części treści Określ niższe poziomy ochrony.  
  
 Zachowania w zakresie ochrony w czasie wykonywania jest kombinacją wartości poziomu ochrony, ustaw następujące właściwości. Te właściwości mają hierarchiczną strukturę. Ustawienie wartości peryferyjnych ustanawia ustawienie domyślne dla wszystkich zakresów mniejszą niż, chyba że jawnie ustawiono inną wartość dla węższy zakres. W tym przypadku zewnętrzny wartość pozostaje domyślnego dla wszystkich mniejszą niż zakresów, z wyjątkiem ustawione to inaczej.  
  
 Na przykład jeśli <xref:System.ServiceModel.ServiceContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType> ustawiono <xref:System.Net.Security.ProtectionLevel.EncryptAndSign?displayProperty=nameWithType> i inne zakresy mniejszą niż ma ustawienia poziomu ochrony, wszystkie komunikaty w kontrakt operacji czy zaszyfrowana i podpisana. Jeśli jednak ma jedną z tych operacji <xref:System.ServiceModel.OperationContractAttribute> równa <xref:System.Net.Security.ProtectionLevel.Sign?displayProperty=nameWithType>, następnie komunikatów dla tej operacji są podpisane, ale wszystkie inne komunikaty w kontrakcie czy zaszyfrowana i podpisana.  
  
 Aby uzyskać szczegółowe informacje dotyczące poziomów ochrony i ich wartości domyślne i zakresów, zobacz [zrozumieć poziom ochrony](~/docs/framework/wcf/understanding-protection-level.md).  
  
 Zakresy, w których te wartości są ustawiane są następujące:  
  
 <xref:System.ServiceModel.ServiceContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType>  
  
 <xref:System.ServiceModel.OperationContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType>  
  
 <xref:System.ServiceModel.FaultContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType>  
  
 <xref:System.ServiceModel.MessageContractAttribute.ProtectionLevel%2A?displayProperty=nameWithType>  
  
 <xref:System.ServiceModel.MessageContractMemberAttribute.ProtectionLevel%2A?displayProperty=nameWithType> Właściwość <xref:System.ServiceModel.MessageHeaderAttribute?displayProperty=nameWithType>.  
  
 <xref:System.ServiceModel.MessageContractMemberAttribute.ProtectionLevel%2A?displayProperty=nameWithType> Właściwość <xref:System.ServiceModel.MessageBodyMemberAttribute?displayProperty=nameWithType>.  
  
 Jeśli występuje żaden poziom ochrony jawnie określone w umowie bazowego powiązanie obsługuje zabezpieczenia, (zarówno na poziomie transportu lub wiadomości), poziom skuteczną ochronę całej umowy jest <xref:System.Net.Security.ProtectionLevel.EncryptAndSign?displayProperty=nameWithType>. Jeśli wiązanie nie obsługuje zabezpieczeń (takich jak <xref:System.ServiceModel.BasicHttpBinding>), obowiązującą <xref:System.Net.Security.ProtectionLevel?displayProperty=nameWithType> jest <xref:System.Net.Security.ProtectionLevel.None?displayProperty=nameWithType> dla całej umowy. Wynik jest, że zależą od powiązania punktu końcowego, klienci mogą wymagają różnych ochrony zabezpieczeń na poziomie komunikatu lub transportu, nawet wtedy, gdy kontrakt Określa <xref:System.Net.Security.ProtectionLevel.None?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>