<Type Name="DataflowBlock" FullName="System.Threading.Tasks.Dataflow.DataflowBlock">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b1681b37f6256a345cba5980d6dd8e36899a63b3" />
    <Meta Name="ms.sourcegitcommit" Value="44933aff38db926168781f50300446344189a04d" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="07/16/2018" />
    <Meta Name="ms.locfileid" Value="39064913" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class DataflowBlock" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit DataflowBlock extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Threading.Tasks.Dataflow.DataflowBlock" />
  <TypeSignature Language="VB.NET" Value="Public Module DataflowBlock" />
  <TypeSignature Language="C++ CLI" Value="public ref class DataflowBlock abstract sealed" />
  <TypeSignature Language="F#" Value="type DataflowBlock = class" />
  <AssemblyInfo>
    <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
    <AssemblyVersion>4.6.0.0</AssemblyVersion>
    <AssemblyVersion>4.6.1.0</AssemblyVersion>
    <AssemblyVersion>4.6.2.0</AssemblyVersion>
    <AssemblyVersion>4.6.3.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="e6ce2-101">Zawiera zestaw metody statyczne (Shared w języku Visual Basic) do pracy z bloków przepływu danych.</span>
      <span class="sxs-lookup">
        <span data-stu-id="e6ce2-101">Provides a set of static (Shared in Visual Basic) methods for working with dataflow blocks.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
[!INCLUDE [tpl-install-instructions](~/includes/tpl-install-instructions.md)]
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="AsObservable&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static IObservable&lt;TOutput&gt; AsObservable&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IObservable`1&lt;!!TOutput&gt; AsObservable&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.AsObservable``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsObservable(Of TOutput) (source As ISourceBlock(Of TOutput)) As IObservable(Of TOutput)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static IObservable&lt;TOutput&gt; ^ AsObservable(System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member AsObservable : System.Threading.Tasks.Dataflow.ISourceBlock&lt;'Output&gt; -&gt; IObservable&lt;'Output&gt;" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.AsObservable source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IObservable&lt;TOutput&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput">
          <span data-ttu-id="e6ce2-102">Określa typ danych znajdujących się w źródle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-102">Specifies the type of data contained in the source.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e6ce2-103">Źródło do opakowania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-103">The source to wrap.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e6ce2-104">Tworzy nową <see cref="T:System.IObservable`1" /> abstrakcji <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-104">Creates a new <see cref="T:System.IObservable`1" /> abstraction over the <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e6ce2-105">
            <see cref="T:System.IObservable`1" /> Umożliwiającej obserwatorów do subskrypcji źródłowej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-105">An <see cref="T:System.IObservable`1" /> that enables observers to be subscribed to the source.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e6ce2-106">
            <paramref name="source" /> Jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-106">The <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="AsObserver&lt;TInput&gt;">
      <MemberSignature Language="C#" Value="public static IObserver&lt;TInput&gt; AsObserver&lt;TInput&gt; (this System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt; target);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IObserver`1&lt;!!TInput&gt; AsObserver&lt;TInput&gt;(class System.Threading.Tasks.Dataflow.ITargetBlock`1&lt;!!TInput&gt; target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.AsObserver``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsObserver(Of TInput) (target As ITargetBlock(Of TInput)) As IObserver(Of TInput)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TInput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static IObserver&lt;TInput&gt; ^ AsObserver(System::Threading::Tasks::Dataflow::ITargetBlock&lt;TInput&gt; ^ target);" />
      <MemberSignature Language="F#" Value="static member AsObserver : System.Threading.Tasks.Dataflow.ITargetBlock&lt;'Input&gt; -&gt; IObserver&lt;'Input&gt;" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.AsObserver target" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IObserver&lt;TInput&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TInput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TInput">
          <span data-ttu-id="e6ce2-107">Określa typ danych wejściowych zaakceptowane przez blok docelowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-107">Specifies the type of input accepted by the target block.</span>
          </span>
        </typeparam>
        <param name="target">
          <span data-ttu-id="e6ce2-108">Miejsce docelowe do opakowania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-108">The target to wrap.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e6ce2-109">Tworzy nową <see cref="T:System.IObserver`1" /> abstrakcji <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-109">Creates a new <see cref="T:System.IObserver`1" /> abstraction over the  <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e6ce2-110">Obserwatora, który otacza blok docelowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-110">An observer that wraps the target block.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Choose&lt;T1,T2&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;int&gt; Choose&lt;T1,T2&gt; (System.Threading.Tasks.Dataflow.ISourceBlock&lt;T1&gt; source1, Action&lt;T1&gt; action1, System.Threading.Tasks.Dataflow.ISourceBlock&lt;T2&gt; source2, Action&lt;T2&gt; action2);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;int32&gt; Choose&lt;T1, T2&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!T1&gt; source1, class System.Action`1&lt;!!T1&gt; action1, class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!T2&gt; source2, class System.Action`1&lt;!!T2&gt; action2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.Choose``2(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``1})" />
      <MemberSignature Language="VB.NET" Value="Public Function Choose(Of T1, T2) (source1 As ISourceBlock(Of T1), action1 As Action(Of T1), source2 As ISourceBlock(Of T2), action2 As Action(Of T2)) As Task(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T1, typename T2&gt;&#xA; static System::Threading::Tasks::Task&lt;int&gt; ^ Choose(System::Threading::Tasks::Dataflow::ISourceBlock&lt;T1&gt; ^ source1, Action&lt;T1&gt; ^ action1, System::Threading::Tasks::Dataflow::ISourceBlock&lt;T2&gt; ^ source2, Action&lt;T2&gt; ^ action2);" />
      <MemberSignature Language="F#" Value="static member Choose : System.Threading.Tasks.Dataflow.ISourceBlock&lt;'T1&gt; * Action&lt;'T1&gt; * System.Threading.Tasks.Dataflow.ISourceBlock&lt;'T2&gt; * Action&lt;'T2&gt; -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.Choose (source1, action1, source2, action2)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source1" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;T1&gt;" />
        <Parameter Name="action1" Type="System.Action&lt;T1&gt;" />
        <Parameter Name="source2" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;T2&gt;" />
        <Parameter Name="action2" Type="System.Action&lt;T2&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T1">
          <span data-ttu-id="e6ce2-111">Określa typ danych zawartych w pierwsze źródło.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-111">Specifies type of data contained in the first source.</span>
          </span>
        </typeparam>
        <typeparam name="T2">
          <span data-ttu-id="e6ce2-112">Określa typ danych zawartych w drugie źródło.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-112">Specifies type of data contained in the second source.</span>
          </span>
        </typeparam>
        <param name="source1">
          <span data-ttu-id="e6ce2-113">Pierwsze źródło.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-113">The first source.</span>
          </span>
        </param>
        <param name="action1">
          <span data-ttu-id="e6ce2-114">Program obsługi do wykonania na danych z pierwszego źródła.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-114">The handler to execute on data from the first source.</span>
          </span>
        </param>
        <param name="source2">
          <span data-ttu-id="e6ce2-115">Drugie źródło.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-115">The second source.</span>
          </span>
        </param>
        <param name="action2">
          <span data-ttu-id="e6ce2-116">Program obsługi do wykonania na danych z drugiego źródła.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-116">The handler to execute on data from the second source.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e6ce2-117">Monitoruje dwóch źródeł przepływu danych w celu wywoływania podana Obsługa niezależnie od źródła udostępnia dane najpierw.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-117">Monitors two dataflow sources, invoking the provided handler for whichever source makes data available first.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e6ce2-118">A <see cref="T:System.Threading.Tasks.Task`1" /> reprezentujący wybór asynchronicznego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-118">A  <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous choice.</span>
          </span>
          <span data-ttu-id="e6ce2-119">Jeśli oba źródła zostaną ukończone przed ukończenie wybór, wynikowe zadanie zostanie anulowane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-119">If both sources are completed prior to the choice completing, the resulting task will be canceled.</span>
          </span>
          <span data-ttu-id="e6ce2-120">Jeśli jedno ze źródeł ma dostępnych danych, a pomyślnie propaguje do wyboru, wynikowe zadanie zostanie ukończone, po zakończeniu obsługi; Jeśli program obsługi zgłasza wyjątek, zadanie zakończy się w <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> stanu i będzie zawierać nieobsługiwany wyjątek.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-120">When one of the sources has data available and successfully propagates it to the choice, the resulting task will complete when the handler completes; if the handler throws an exception, the task will end in the <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> state and will contain the unhandled exception.</span>
          </span>
          <span data-ttu-id="e6ce2-121">W przeciwnym razie zadanie zakończy się za pomocą jego <see cref="P:System.Threading.Tasks.Task`1.Result" /> równa 0 lub 1 do reprezentowania źródła pierwszej lub drugiej, odpowiednio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-121">Otherwise, the task will end with its <see cref="P:System.Threading.Tasks.Task`1.Result" /> set to either 0 or 1 to represent the first or second source, respectively.</span>
          </span>
          <span data-ttu-id="e6ce2-122">Ta metoda zajmie tylko element z jednego z dwóch źródeł danych, nigdy nie oba.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-122">This method will only consume an element from one of the two data sources, never both.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e6ce2-123">
            <paramref name="source1" /> Jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-123">The <paramref name="source1" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="e6ce2-124">- lub - <paramref name="action1" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-124">-or-  The  <paramref name="action1" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="e6ce2-125">- lub - <paramref name="source2" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-125">-or-  The <paramref name="source2" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="e6ce2-126">- lub - <paramref name="action2" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-126">-or-  The <paramref name="action2" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Choose&lt;T1,T2&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;int&gt; Choose&lt;T1,T2&gt; (System.Threading.Tasks.Dataflow.ISourceBlock&lt;T1&gt; source1, Action&lt;T1&gt; action1, System.Threading.Tasks.Dataflow.ISourceBlock&lt;T2&gt; source2, Action&lt;T2&gt; action2, System.Threading.Tasks.Dataflow.DataflowBlockOptions dataflowBlockOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;int32&gt; Choose&lt;T1, T2&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!T1&gt; source1, class System.Action`1&lt;!!T1&gt; action1, class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!T2&gt; source2, class System.Action`1&lt;!!T2&gt; action2, class System.Threading.Tasks.Dataflow.DataflowBlockOptions dataflowBlockOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.Choose``2(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``1},System.Threading.Tasks.Dataflow.DataflowBlockOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T1, typename T2&gt;&#xA; static System::Threading::Tasks::Task&lt;int&gt; ^ Choose(System::Threading::Tasks::Dataflow::ISourceBlock&lt;T1&gt; ^ source1, Action&lt;T1&gt; ^ action1, System::Threading::Tasks::Dataflow::ISourceBlock&lt;T2&gt; ^ source2, Action&lt;T2&gt; ^ action2, System::Threading::Tasks::Dataflow::DataflowBlockOptions ^ dataflowBlockOptions);" />
      <MemberSignature Language="F#" Value="static member Choose : System.Threading.Tasks.Dataflow.ISourceBlock&lt;'T1&gt; * Action&lt;'T1&gt; * System.Threading.Tasks.Dataflow.ISourceBlock&lt;'T2&gt; * Action&lt;'T2&gt; * System.Threading.Tasks.Dataflow.DataflowBlockOptions -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.Choose (source1, action1, source2, action2, dataflowBlockOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source1" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;T1&gt;" />
        <Parameter Name="action1" Type="System.Action&lt;T1&gt;" />
        <Parameter Name="source2" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;T2&gt;" />
        <Parameter Name="action2" Type="System.Action&lt;T2&gt;" />
        <Parameter Name="dataflowBlockOptions" Type="System.Threading.Tasks.Dataflow.DataflowBlockOptions" />
      </Parameters>
      <Docs>
        <typeparam name="T1">
          <span data-ttu-id="e6ce2-127">Określa typ danych zawartych w pierwsze źródło.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-127">Specifies type of data contained in the first source.</span>
          </span>
        </typeparam>
        <typeparam name="T2">
          <span data-ttu-id="e6ce2-128">Określa typ danych zawartych w drugie źródło.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-128">Specifies type of data contained in the second source.</span>
          </span>
        </typeparam>
        <param name="source1">
          <span data-ttu-id="e6ce2-129">Pierwsze źródło.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-129">The first source.</span>
          </span>
        </param>
        <param name="action1">
          <span data-ttu-id="e6ce2-130">Program obsługi do wykonania na danych z pierwszego źródła.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-130">The handler to execute on data from the first source.</span>
          </span>
        </param>
        <param name="source2">
          <span data-ttu-id="e6ce2-131">Drugie źródło.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-131">The second source.</span>
          </span>
        </param>
        <param name="action2">
          <span data-ttu-id="e6ce2-132">Program obsługi do wykonania na danych z drugiego źródła.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-132">The handler to execute on data from the second source.</span>
          </span>
        </param>
        <param name="dataflowBlockOptions">
          <span data-ttu-id="e6ce2-133">Opcje, z którego chcesz skonfigurować ten wybór.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-133">The options with which to configure this choice.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e6ce2-134">Monitoruje dwóch źródeł przepływu danych w celu wywoływania podana Obsługa niezależnie od źródła udostępnia dane najpierw.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-134">Monitors two dataflow sources, invoking the provided handler for whichever source makes data available first.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e6ce2-135">A <see cref="T:System.Threading.Tasks.Task`1" /> reprezentujący wybór asynchronicznego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-135">A  <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous choice.</span>
          </span>
          <span data-ttu-id="e6ce2-136">Jeśli oba źródła są wykonywane przed ukończenie wybór lub <see cref="T:System.Threading.CancellationToken" /> w ramach <paramref name="dataflowBlockOptions" /> zostanie anulowane przed ukończenie wybór, wynikowe zadanie zostanie anulowane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-136">If both sources are completed prior to the choice completing, or if the <see cref="T:System.Threading.CancellationToken" /> provided as part of <paramref name="dataflowBlockOptions" /> is canceled prior to the choice completing, the resulting task will be canceled.</span>
          </span>
          <span data-ttu-id="e6ce2-137">Jeśli jedno ze źródeł ma dostępnych danych, a pomyślnie propaguje do wyboru, wynikowe zadanie zostanie ukończone, po zakończeniu obsługi; Jeśli program obsługi zgłasza wyjątek, zadanie zakończy się w <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> stanu i będzie zawierać nieobsługiwany wyjątek.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-137">When one of the sources has data available and successfully propagates it to the choice, the resulting task will complete when the handler completes; if the handler throws an exception, the task will end in the <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> state and will contain the unhandled exception.</span>
          </span>
          <span data-ttu-id="e6ce2-138">W przeciwnym razie zadanie zakończy się za pomocą jego <see cref="P:System.Threading.Tasks.Task`1.Result" /> równa 0 lub 1 do reprezentowania źródła pierwszej lub drugiej, odpowiednio.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-138">Otherwise, the task will end with its <see cref="P:System.Threading.Tasks.Task`1.Result" /> set to either 0 or 1 to represent the first or second source, respectively.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e6ce2-139">
            <paramref name="source1" /> Jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-139">The <paramref name="source1" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="e6ce2-140">- lub - <paramref name="action1" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-140">-or-  The <paramref name="action1" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="e6ce2-141">- lub - <paramref name="source2" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-141">-or-  The <paramref name="source2" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="e6ce2-142">- lub - <paramref name="action2" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-142">-or-  The <paramref name="action2" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="e6ce2-143">- lub - <paramref name="dataflowBlockOptions" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-143">-or-  The <paramref name="dataflowBlockOptions" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Choose&lt;T1,T2,T3&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;int&gt; Choose&lt;T1,T2,T3&gt; (System.Threading.Tasks.Dataflow.ISourceBlock&lt;T1&gt; source1, Action&lt;T1&gt; action1, System.Threading.Tasks.Dataflow.ISourceBlock&lt;T2&gt; source2, Action&lt;T2&gt; action2, System.Threading.Tasks.Dataflow.ISourceBlock&lt;T3&gt; source3, Action&lt;T3&gt; action3);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;int32&gt; Choose&lt;T1, T2, T3&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!T1&gt; source1, class System.Action`1&lt;!!T1&gt; action1, class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!T2&gt; source2, class System.Action`1&lt;!!T2&gt; action2, class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!T3&gt; source3, class System.Action`1&lt;!!T3&gt; action3) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.Choose``3(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``1},System.Threading.Tasks.Dataflow.ISourceBlock{``2},System.Action{``2})" />
      <MemberSignature Language="VB.NET" Value="Public Function Choose(Of T1, T2, T3) (source1 As ISourceBlock(Of T1), action1 As Action(Of T1), source2 As ISourceBlock(Of T2), action2 As Action(Of T2), source3 As ISourceBlock(Of T3), action3 As Action(Of T3)) As Task(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T1, typename T2, typename T3&gt;&#xA; static System::Threading::Tasks::Task&lt;int&gt; ^ Choose(System::Threading::Tasks::Dataflow::ISourceBlock&lt;T1&gt; ^ source1, Action&lt;T1&gt; ^ action1, System::Threading::Tasks::Dataflow::ISourceBlock&lt;T2&gt; ^ source2, Action&lt;T2&gt; ^ action2, System::Threading::Tasks::Dataflow::ISourceBlock&lt;T3&gt; ^ source3, Action&lt;T3&gt; ^ action3);" />
      <MemberSignature Language="F#" Value="static member Choose : System.Threading.Tasks.Dataflow.ISourceBlock&lt;'T1&gt; * Action&lt;'T1&gt; * System.Threading.Tasks.Dataflow.ISourceBlock&lt;'T2&gt; * Action&lt;'T2&gt; * System.Threading.Tasks.Dataflow.ISourceBlock&lt;'T3&gt; * Action&lt;'T3&gt; -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.Choose (source1, action1, source2, action2, source3, action3)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
        <TypeParameter Name="T3" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source1" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;T1&gt;" />
        <Parameter Name="action1" Type="System.Action&lt;T1&gt;" />
        <Parameter Name="source2" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;T2&gt;" />
        <Parameter Name="action2" Type="System.Action&lt;T2&gt;" />
        <Parameter Name="source3" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;T3&gt;" />
        <Parameter Name="action3" Type="System.Action&lt;T3&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T1">
          <span data-ttu-id="e6ce2-144">Określa typ danych zawartych w pierwsze źródło.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-144">Specifies type of data contained in the first source.</span>
          </span>
        </typeparam>
        <typeparam name="T2">
          <span data-ttu-id="e6ce2-145">Określa typ danych zawartych w drugie źródło.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-145">Specifies type of data contained in the second source.</span>
          </span>
        </typeparam>
        <typeparam name="T3">
          <span data-ttu-id="e6ce2-146">Określa typ danych zawartych w trzecim źródła.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-146">Specifies type of data contained in the third source.</span>
          </span>
        </typeparam>
        <param name="source1">
          <span data-ttu-id="e6ce2-147">Pierwsze źródło.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-147">The first source.</span>
          </span>
        </param>
        <param name="action1">
          <span data-ttu-id="e6ce2-148">Program obsługi do wykonania na danych z pierwszego źródła.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-148">The handler to execute on data from the first source.</span>
          </span>
        </param>
        <param name="source2">
          <span data-ttu-id="e6ce2-149">Drugie źródło.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-149">The second source.</span>
          </span>
        </param>
        <param name="action2">
          <span data-ttu-id="e6ce2-150">Program obsługi do wykonania na danych z drugiego źródła.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-150">The handler to execute on data from the second source.</span>
          </span>
        </param>
        <param name="source3">
          <span data-ttu-id="e6ce2-151">Trzeci źródło.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-151">The third source.</span>
          </span>
        </param>
        <param name="action3">
          <span data-ttu-id="e6ce2-152">Program obsługi do wykonania na danych z trzeciej źródła.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-152">The handler to execute on data from the third source.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e6ce2-153">Monitoruje trzech źródeł przepływu danych w celu wywoływania podana Obsługa niezależnie od źródła udostępnia dane najpierw.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-153">Monitors three dataflow sources, invoking the provided handler for whichever source makes data available first.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e6ce2-154">A <see cref="T:System.Threading.Tasks.Task`1" /> reprezentujący wybór asynchronicznego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-154">A  <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous choice.</span>
          </span>
          <span data-ttu-id="e6ce2-155">Jeśli wszystkie źródła są wykonywane przed ukończenie wybór, wynikowe zadanie zostanie anulowane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-155">If all sources are completed prior to the choice completing, the resulting task will be canceled.</span>
          </span>
          <span data-ttu-id="e6ce2-156">Jeśli jedno ze źródeł ma dostępnych danych, a pomyślnie propaguje do wyboru, wynikowe zadanie zostanie ukończone, po zakończeniu obsługi; Jeśli program obsługi zgłasza wyjątek, zadanie zakończy się w <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> stanu i będzie zawierać nieobsługiwany wyjątek.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-156">When one of the sources has data available and successfully propagates it to the choice, the resulting task will complete when the handler completes; if the handler throws an exception, the task will end in the <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> state and will contain the unhandled exception.</span>
          </span>
          <span data-ttu-id="e6ce2-157">W przeciwnym razie zadanie zakończy się za pomocą jego <see cref="P:System.Threading.Tasks.Task`1.Result" /> ustawiona na indeks oparty na 0 źródła.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-157">Otherwise, the task will end with its <see cref="P:System.Threading.Tasks.Task`1.Result" /> set to the 0-based index of the source.</span>
          </span>
          <span data-ttu-id="e6ce2-158">Ta metoda tylko zużyje nigdy nie więcej niż jeden element z jednego ze źródeł danych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-158">This method will only consume an element from one of the data sources, never more than one.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e6ce2-159">
            <paramref name="source1" /> Jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-159">The <paramref name="source1" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="e6ce2-160">- lub - <paramref name="action1" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-160">-or-  The <paramref name="action1" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="e6ce2-161">- lub - <paramref name="source2" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-161">-or-  The <paramref name="source2" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="e6ce2-162">- lub - <paramref name="action2" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-162">-or-  The <paramref name="action2" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="e6ce2-163">- lub - <paramref name="source3" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-163">-or-  The <paramref name="source3" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="e6ce2-164">- lub - <paramref name="action3" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-164">-or-  The <paramref name="action3" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Choose&lt;T1,T2,T3&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;int&gt; Choose&lt;T1,T2,T3&gt; (System.Threading.Tasks.Dataflow.ISourceBlock&lt;T1&gt; source1, Action&lt;T1&gt; action1, System.Threading.Tasks.Dataflow.ISourceBlock&lt;T2&gt; source2, Action&lt;T2&gt; action2, System.Threading.Tasks.Dataflow.ISourceBlock&lt;T3&gt; source3, Action&lt;T3&gt; action3, System.Threading.Tasks.Dataflow.DataflowBlockOptions dataflowBlockOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;int32&gt; Choose&lt;T1, T2, T3&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!T1&gt; source1, class System.Action`1&lt;!!T1&gt; action1, class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!T2&gt; source2, class System.Action`1&lt;!!T2&gt; action2, class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!T3&gt; source3, class System.Action`1&lt;!!T3&gt; action3, class System.Threading.Tasks.Dataflow.DataflowBlockOptions dataflowBlockOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.Choose``3(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Action{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1},System.Action{``1},System.Threading.Tasks.Dataflow.ISourceBlock{``2},System.Action{``2},System.Threading.Tasks.Dataflow.DataflowBlockOptions)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T1, typename T2, typename T3&gt;&#xA; static System::Threading::Tasks::Task&lt;int&gt; ^ Choose(System::Threading::Tasks::Dataflow::ISourceBlock&lt;T1&gt; ^ source1, Action&lt;T1&gt; ^ action1, System::Threading::Tasks::Dataflow::ISourceBlock&lt;T2&gt; ^ source2, Action&lt;T2&gt; ^ action2, System::Threading::Tasks::Dataflow::ISourceBlock&lt;T3&gt; ^ source3, Action&lt;T3&gt; ^ action3, System::Threading::Tasks::Dataflow::DataflowBlockOptions ^ dataflowBlockOptions);" />
      <MemberSignature Language="F#" Value="static member Choose : System.Threading.Tasks.Dataflow.ISourceBlock&lt;'T1&gt; * Action&lt;'T1&gt; * System.Threading.Tasks.Dataflow.ISourceBlock&lt;'T2&gt; * Action&lt;'T2&gt; * System.Threading.Tasks.Dataflow.ISourceBlock&lt;'T3&gt; * Action&lt;'T3&gt; * System.Threading.Tasks.Dataflow.DataflowBlockOptions -&gt; System.Threading.Tasks.Task&lt;int&gt;" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.Choose (source1, action1, source2, action2, source3, action3, dataflowBlockOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T1" />
        <TypeParameter Name="T2" />
        <TypeParameter Name="T3" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source1" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;T1&gt;" />
        <Parameter Name="action1" Type="System.Action&lt;T1&gt;" />
        <Parameter Name="source2" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;T2&gt;" />
        <Parameter Name="action2" Type="System.Action&lt;T2&gt;" />
        <Parameter Name="source3" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;T3&gt;" />
        <Parameter Name="action3" Type="System.Action&lt;T3&gt;" />
        <Parameter Name="dataflowBlockOptions" Type="System.Threading.Tasks.Dataflow.DataflowBlockOptions" />
      </Parameters>
      <Docs>
        <typeparam name="T1">
          <span data-ttu-id="e6ce2-165">Określa typ danych zawartych w pierwsze źródło.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-165">Specifies type of data contained in the first source.</span>
          </span>
        </typeparam>
        <typeparam name="T2">
          <span data-ttu-id="e6ce2-166">Określa typ danych zawartych w drugie źródło.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-166">Specifies type of data contained in the second source.</span>
          </span>
        </typeparam>
        <typeparam name="T3">
          <span data-ttu-id="e6ce2-167">Określa typ danych zawartych w trzecim źródła.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-167">Specifies type of data contained in the third source.</span>
          </span>
        </typeparam>
        <param name="source1">
          <span data-ttu-id="e6ce2-168">Pierwsze źródło.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-168">The first source.</span>
          </span>
        </param>
        <param name="action1">
          <span data-ttu-id="e6ce2-169">Program obsługi do wykonania na danych z pierwszego źródła.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-169">The handler to execute on data from the first source.</span>
          </span>
        </param>
        <param name="source2">
          <span data-ttu-id="e6ce2-170">Drugie źródło.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-170">The second source.</span>
          </span>
        </param>
        <param name="action2">
          <span data-ttu-id="e6ce2-171">Program obsługi do wykonania na danych z drugiego źródła.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-171">The handler to execute on data from the second source.</span>
          </span>
        </param>
        <param name="source3">
          <span data-ttu-id="e6ce2-172">Trzeci źródło.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-172">The third source.</span>
          </span>
        </param>
        <param name="action3">
          <span data-ttu-id="e6ce2-173">Program obsługi do wykonania na danych z trzeciej źródła.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-173">The handler to execute on data from the third source.</span>
          </span>
        </param>
        <param name="dataflowBlockOptions">
          <span data-ttu-id="e6ce2-174">Opcje, z którego chcesz skonfigurować ten wybór.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-174">The options with which to configure this choice.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e6ce2-175">Monitoruje trzech źródeł przepływu danych w celu wywoływania podana Obsługa niezależnie od źródła udostępnia dane najpierw.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-175">Monitors three dataflow sources, invoking the provided handler for whichever source makes data available first.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e6ce2-176">A <see cref="T:System.Threading.Tasks.Task`1" /> reprezentujący wybór asynchronicznego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-176">A  <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous choice.</span>
          </span>
          <span data-ttu-id="e6ce2-177">Jeśli wszystkie źródła są wykonywane przed ukończenie wybór lub <see cref="T:System.Threading.CancellationToken" /> w ramach <paramref name="dataflowBlockOptions" /> zostanie anulowane przed ukończenie wybór, wynikowe zadanie zostanie anulowane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-177">If all sources are completed prior to the choice completing, or if the <see cref="T:System.Threading.CancellationToken" /> provided as part of <paramref name="dataflowBlockOptions" /> is canceled prior to the choice completing, the resulting task will be canceled.</span>
          </span>
          <span data-ttu-id="e6ce2-178">Jeśli jedno ze źródeł ma dostępnych danych, a pomyślnie propaguje do wyboru, wynikowe zadanie zostanie ukończone, po zakończeniu obsługi; Jeśli program obsługi zgłasza wyjątek, zadanie zakończy się w <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> stanu i będzie zawierać nieobsługiwany wyjątek.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-178">When one of the sources has data available and successfully propagates it to the choice, the resulting task will complete when the handler completes; if the handler throws an exception, the task will end in the <see cref="F:System.Threading.Tasks.TaskStatus.Faulted" /> state and will contain the unhandled exception.</span>
          </span>
          <span data-ttu-id="e6ce2-179">W przeciwnym razie zadanie zakończy się za pomocą jego <see cref="P:System.Threading.Tasks.Task`1.Result" /> ustawiona na indeks oparty na 0 źródła.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-179">Otherwise, the task will end with its <see cref="P:System.Threading.Tasks.Task`1.Result" /> set to the 0-based index of the source.</span>
          </span>
          <span data-ttu-id="e6ce2-180">Ta metoda tylko zużyje nigdy nie więcej niż jeden element z jednego ze źródeł danych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-180">This method will only consume an element from one of the data sources, never more than one.</span>
          </span>
          <span data-ttu-id="e6ce2-181">Czy zażądano anulowania po otrzymaniu elementu żądanie anulowania zostanie zignorowany, a odpowiedni program obsługi będzie mogła wykonać.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-181">If cancellation is requested after an element has been received, the cancellation request will be ignored, and the relevant handler will be allowed to execute.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e6ce2-182">
            <paramref name="source1" /> Jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-182">The <paramref name="source1" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="e6ce2-183">- lub - <paramref name="action1" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-183">-or-  The <paramref name="action1" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="e6ce2-184">- lub - <paramref name="source2" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-184">-or-  The <paramref name="source2" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="e6ce2-185">- lub - <paramref name="action2" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-185">-or-  The <paramref name="action2" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="e6ce2-186">- lub - <paramref name="source3" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-186">-or-  The <paramref name="source3" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="e6ce2-187">- lub - <paramref name="action3" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-187">-or-  The <paramref name="action3" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="e6ce2-188">- lub - <paramref name="dataflowBlockOptions" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-188">-or-  The <paramref name="dataflowBlockOptions" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Encapsulate&lt;TInput,TOutput&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Dataflow.IPropagatorBlock&lt;TInput,TOutput&gt; Encapsulate&lt;TInput,TOutput&gt; (System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt; target, System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Dataflow.IPropagatorBlock`2&lt;!!TInput, !!TOutput&gt; Encapsulate&lt;TInput, TOutput&gt;(class System.Threading.Tasks.Dataflow.ITargetBlock`1&lt;!!TInput&gt; target, class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.Encapsulate``2(System.Threading.Tasks.Dataflow.ITargetBlock{``0},System.Threading.Tasks.Dataflow.ISourceBlock{``1})" />
      <MemberSignature Language="VB.NET" Value="Public Function Encapsulate(Of TInput, TOutput) (target As ITargetBlock(Of TInput), source As ISourceBlock(Of TOutput)) As IPropagatorBlock(Of TInput, TOutput)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TInput, typename TOutput&gt;&#xA; static System::Threading::Tasks::Dataflow::IPropagatorBlock&lt;TInput, TOutput&gt; ^ Encapsulate(System::Threading::Tasks::Dataflow::ITargetBlock&lt;TInput&gt; ^ target, System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Encapsulate : System.Threading.Tasks.Dataflow.ITargetBlock&lt;'Input&gt; * System.Threading.Tasks.Dataflow.ISourceBlock&lt;'Output&gt; -&gt; System.Threading.Tasks.Dataflow.IPropagatorBlock&lt;'Input, 'Output&gt;" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.Encapsulate (target, source)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Dataflow.IPropagatorBlock&lt;TInput,TOutput&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TInput" />
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt;" />
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TInput">
          <span data-ttu-id="e6ce2-189">Określa typ danych wejściowych, oczekiwane przez element docelowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-189">Specifies the type of input expected by the target.</span>
          </span>
        </typeparam>
        <typeparam name="TOutput">
          <span data-ttu-id="e6ce2-190">Określa typ dane wyjściowe wytwarzane przez źródło.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-190">Specifies the type of output produced by the source.</span>
          </span>
        </typeparam>
        <param name="target">
          <span data-ttu-id="e6ce2-191">Miejsce docelowe do hermetyzacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-191">The target to encapsulate.</span>
          </span>
        </param>
        <param name="source">
          <span data-ttu-id="e6ce2-192">Źródło do hermetyzacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-192">The source to encapsulate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e6ce2-193">Hermetyzuje źródłowe i docelowe do pojedynczego propagator.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-193">Encapsulates a target and a source into a single propagator.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e6ce2-194">Hermetyzowany źródłowe i docelowe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-194">The encapsulated target and source.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e6ce2-195"><xref:System.Threading.Tasks.Dataflow.DataflowBlock.Encapsulate%2A> Wymaga, aby dwa istniejące bloki: blok docelowy (wystąpienia klasy, która implementuje <xref:System.Threading.Tasks.Dataflow.ITargetBlock%601>) i blok źródłowy (wystąpienia klasy, która implementuje <xref:System.Threading.Tasks.Dataflow.ISourceBlock%601>).</span><span class="sxs-lookup"><span data-stu-id="e6ce2-195">The <xref:System.Threading.Tasks.Dataflow.DataflowBlock.Encapsulate%2A> method requires two existing blocks: a target block (an instance of a class that implements <xref:System.Threading.Tasks.Dataflow.ITargetBlock%601>) and a source block (an instance of a class that implements <xref:System.Threading.Tasks.Dataflow.ISourceBlock%601>).</span></span> <span data-ttu-id="e6ce2-196"><xref:System.Threading.Tasks.Dataflow.DataflowBlock.Encapsulate%2A> Tworzy nowe wystąpienie klasy wewnętrznej, który nawiązuje połączenie <xref:System.Threading.Tasks.Dataflow.ITargetBlock%601> interfejsu członkom `target` parametru i <xref:System.Threading.Tasks.Dataflow.ISourceBlock%601> interfejsu członkom `source` parametru.</span><span class="sxs-lookup"><span data-stu-id="e6ce2-196"><xref:System.Threading.Tasks.Dataflow.DataflowBlock.Encapsulate%2A> creates a new instance of an internal class that connects the <xref:System.Threading.Tasks.Dataflow.ITargetBlock%601> interface members to the `target` parameter and the <xref:System.Threading.Tasks.Dataflow.ISourceBlock%601> interface members to the `source` parameter.</span></span>  <span data-ttu-id="e6ce2-197">Zarówno <xref:System.Threading.Tasks.Dataflow.ITargetBlock%601> i <xref:System.Threading.Tasks.Dataflow.ISourceBlock%601> dziedziczyć <xref:System.Threading.Tasks.Dataflow.IDataflowBlock>.</span><span class="sxs-lookup"><span data-stu-id="e6ce2-197">Both <xref:System.Threading.Tasks.Dataflow.ITargetBlock%601> and <xref:System.Threading.Tasks.Dataflow.ISourceBlock%601> derive from <xref:System.Threading.Tasks.Dataflow.IDataflowBlock>.</span></span> <span data-ttu-id="e6ce2-198">Uzupełnianie bloku jawnie jest przekazywany z źródeł do celów.</span><span class="sxs-lookup"><span data-stu-id="e6ce2-198">Block completion is explicitly passed from sources to targets.</span></span> <span data-ttu-id="e6ce2-199">W związku z tym <xref:System.Threading.Tasks.Dataflow.IDataflowBlock.Complete%2A> i <xref:System.Threading.Tasks.Dataflow.IDataflowBlock.Fault%2A> metody są podłączone do obiektu docelowego podczas <xref:System.Threading.Tasks.Dataflow.IDataflowBlock.Completion%2A> właściwość jest podłączony do źródła.</span><span class="sxs-lookup"><span data-stu-id="e6ce2-199">Therefore, the <xref:System.Threading.Tasks.Dataflow.IDataflowBlock.Complete%2A> and <xref:System.Threading.Tasks.Dataflow.IDataflowBlock.Fault%2A> methods are connected to the target while the <xref:System.Threading.Tasks.Dataflow.IDataflowBlock.Completion%2A> property is connected to the source.</span></span>  <span data-ttu-id="e6ce2-200">Należy upewnić się, że w przypadku docelowego połowie zakończeniu źródła połowę ukończenia w sposób najbardziej odpowiednie. na przykład:</span><span class="sxs-lookup"><span data-stu-id="e6ce2-200">You must ensure that when the target half  completes, the source half gets completed in the most appropriate manner; for example:</span></span>  
  
 `target.Completion.ContinueWith(completion => source.Complete());`  
  
 <span data-ttu-id="e6ce2-201">Lub do propagowania Typ ukończenia, możesz użyć ten kod bardziej zaawansowanych:</span><span class="sxs-lookup"><span data-stu-id="e6ce2-201">Or, if you want to propagate the completion type, you can use this more sophisticated code:</span></span>  
  
```  
target.Completion.ContinueWith(completion => { if (completion.IsFaulted)    
  
((IDataflowBlock)batchBlock).Fault(completion.Exception);   
else   
batchBlock.Complete();   
});  
  
```  
  
 <span data-ttu-id="e6ce2-202">Musi również jawnie określić Propagacja komunikatów z docelowym źródłem.</span><span class="sxs-lookup"><span data-stu-id="e6ce2-202">You must also explicitly provide the message propagation from target to source.</span></span> <span data-ttu-id="e6ce2-203">Zaletą tego jawnego połączenia jest, czy zapewnia swobodę wykonywać żadnego przetwarzania nieograniczonego między dwa bloki hermetyzowany.</span><span class="sxs-lookup"><span data-stu-id="e6ce2-203">The benefit of this explicit connection is that it gives you the freedom to perform any unconstrained processing between the two encapsulated blocks.</span></span> <span data-ttu-id="e6ce2-204">Możesz to zrobić, kodując wymagane przetwarzanie na te bloki delegatów (jeśli bloki delegatów) lub przez osadzanie podrzędnych sieci bloków między nimi.</span><span class="sxs-lookup"><span data-stu-id="e6ce2-204">You may do that either by encoding the necessary processing into the blocks' delegates (if the blocks take delegates), or by embedding a sub-network of blocks between them.</span></span> <span data-ttu-id="e6ce2-205">Łatwiejsze sposobem jest użycie bloku, który przyjmuje delegatów; na przykład użyć <xref:System.Threading.Tasks.Dataflow.ActionBlock%601>, <xref:System.Threading.Tasks.Dataflow.TransformBlock%602>, <xref:System.Threading.Tasks.Dataflow.TransformManyBlock%602> (jeśli dotyczy), lub niestandardowych bloku.</span><span class="sxs-lookup"><span data-stu-id="e6ce2-205">The easier way is to use a block that takes delegates; for example, use <xref:System.Threading.Tasks.Dataflow.ActionBlock%601>, <xref:System.Threading.Tasks.Dataflow.TransformBlock%602>, <xref:System.Threading.Tasks.Dataflow.TransformManyBlock%602> (if applicable), or a custom block.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LinkTo&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static IDisposable LinkTo&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source, System.Threading.Tasks.Dataflow.ITargetBlock&lt;TOutput&gt; target);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IDisposable LinkTo&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source, class System.Threading.Tasks.Dataflow.ITargetBlock`1&lt;!!TOutput&gt; target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.Tasks.Dataflow.ITargetBlock{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LinkTo(Of TOutput) (source As ISourceBlock(Of TOutput), target As ITargetBlock(Of TOutput)) As IDisposable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static IDisposable ^ LinkTo(System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt; ^ source, System::Threading::Tasks::Dataflow::ITargetBlock&lt;TOutput&gt; ^ target);" />
      <MemberSignature Language="F#" Value="static member LinkTo : System.Threading.Tasks.Dataflow.ISourceBlock&lt;'Output&gt; * System.Threading.Tasks.Dataflow.ITargetBlock&lt;'Output&gt; -&gt; IDisposable" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo (source, target)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" RefType="this" />
        <Parameter Name="target" Type="System.Threading.Tasks.Dataflow.ITargetBlock&lt;TOutput&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput">
          <span data-ttu-id="e6ce2-206">Określa typ danych znajdujących się w źródle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-206">Specifies the type of data contained in the source.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e6ce2-207">Źródło, z którym chcesz się łączyć.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-207">The source from which to link.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="e6ce2-208">
            <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> Do połączenia ze źródłem.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-208">The <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> to which to connect the source.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e6ce2-209">Linki <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> określonej <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-209">Links the <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> to the specified  <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e6ce2-210">
            <see cref="T:System.IDisposable" /> , Podczas wywoływania <see langword="Dispose" />, spowoduje to odłączenie źródła z obiektu docelowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-210">An <see cref="T:System.IDisposable" /> that, upon calling <see langword="Dispose" />, will unlink the source from the target.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e6ce2-211">
            <paramref name="source" /> Jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-211">The <paramref name="source" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="e6ce2-212">- lub - <paramref name="target" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-212">-or-  The <paramref name="target" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="LinkTo&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static IDisposable LinkTo&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source, System.Threading.Tasks.Dataflow.ITargetBlock&lt;TOutput&gt; target, Predicate&lt;TOutput&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IDisposable LinkTo&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source, class System.Threading.Tasks.Dataflow.ITargetBlock`1&lt;!!TOutput&gt; target, class System.Predicate`1&lt;!!TOutput&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.Tasks.Dataflow.ITargetBlock{``0},System.Predicate{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LinkTo(Of TOutput) (source As ISourceBlock(Of TOutput), target As ITargetBlock(Of TOutput), predicate As Predicate(Of TOutput)) As IDisposable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static IDisposable ^ LinkTo(System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt; ^ source, System::Threading::Tasks::Dataflow::ITargetBlock&lt;TOutput&gt; ^ target, Predicate&lt;TOutput&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member LinkTo : System.Threading.Tasks.Dataflow.ISourceBlock&lt;'Output&gt; * System.Threading.Tasks.Dataflow.ITargetBlock&lt;'Output&gt; * Predicate&lt;'Output&gt; -&gt; IDisposable" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo (source, target, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" RefType="this" />
        <Parameter Name="target" Type="System.Threading.Tasks.Dataflow.ITargetBlock&lt;TOutput&gt;" />
        <Parameter Name="predicate" Type="System.Predicate&lt;TOutput&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput">
          <span data-ttu-id="e6ce2-213">Określa typ danych znajdujących się w źródle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-213">Specifies the type of data contained in the source.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e6ce2-214">Źródło, z którym chcesz się łączyć.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-214">The source from which to link.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="e6ce2-215">
            <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> Do połączenia ze źródłem.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-215">The  <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> to which to connect the source.</span>
          </span>
        </param>
        <param name="predicate">
          <span data-ttu-id="e6ce2-216">Filtr wiadomości musi przekazać w kolejności na jego propagację ze źródła do docelowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-216">The filter a message must pass in order for it to propagate from the source to the target.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e6ce2-217">Linki <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> określonej <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> przy użyciu określonego filtru.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-217">Links the <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> to the specified  <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> using the specified filter.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e6ce2-218">
            <see cref="T:System.IDisposable" /> , Podczas wywoływania <see langword="Dispose" />, spowoduje to odłączenie źródła z obiektu docelowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-218">An <see cref="T:System.IDisposable" /> that, upon calling <see langword="Dispose" />, will unlink the source from the target.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e6ce2-219">
            <paramref name="source" /> Jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-219">The <paramref name="source" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="e6ce2-220">- lub - <paramref name="target" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-220">-or-  The <paramref name="target" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="e6ce2-221">- lub - <paramref name="predicate" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-221">-or-  The <paramref name="predicate" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="LinkTo&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static IDisposable LinkTo&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source, System.Threading.Tasks.Dataflow.ITargetBlock&lt;TOutput&gt; target, System.Threading.Tasks.Dataflow.DataflowLinkOptions linkOptions, Predicate&lt;TOutput&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.IDisposable LinkTo&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source, class System.Threading.Tasks.Dataflow.ITargetBlock`1&lt;!!TOutput&gt; target, class System.Threading.Tasks.Dataflow.DataflowLinkOptions linkOptions, class System.Predicate`1&lt;!!TOutput&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.Tasks.Dataflow.ITargetBlock{``0},System.Threading.Tasks.Dataflow.DataflowLinkOptions,System.Predicate{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LinkTo(Of TOutput) (source As ISourceBlock(Of TOutput), target As ITargetBlock(Of TOutput), linkOptions As DataflowLinkOptions, predicate As Predicate(Of TOutput)) As IDisposable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static IDisposable ^ LinkTo(System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt; ^ source, System::Threading::Tasks::Dataflow::ITargetBlock&lt;TOutput&gt; ^ target, System::Threading::Tasks::Dataflow::DataflowLinkOptions ^ linkOptions, Predicate&lt;TOutput&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member LinkTo : System.Threading.Tasks.Dataflow.ISourceBlock&lt;'Output&gt; * System.Threading.Tasks.Dataflow.ITargetBlock&lt;'Output&gt; * System.Threading.Tasks.Dataflow.DataflowLinkOptions * Predicate&lt;'Output&gt; -&gt; IDisposable" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.LinkTo (source, target, linkOptions, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IDisposable</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" RefType="this" />
        <Parameter Name="target" Type="System.Threading.Tasks.Dataflow.ITargetBlock&lt;TOutput&gt;" />
        <Parameter Name="linkOptions" Type="System.Threading.Tasks.Dataflow.DataflowLinkOptions" />
        <Parameter Name="predicate" Type="System.Predicate&lt;TOutput&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput">
          <span data-ttu-id="e6ce2-222">Określa typ danych znajdujących się w źródle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-222">Specifies the type of data contained in the source.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e6ce2-223">Źródło, z którym chcesz się łączyć.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-223">The source from which to link.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="e6ce2-224">
            <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> Do połączenia ze źródłem.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-224">The  <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> to which to connect the source.</span>
          </span>
        </param>
        <param name="linkOptions">
          <span data-ttu-id="e6ce2-225">Jedna z wartości wyliczenia, które określa, jak skonfigurować połączenie między bloków przepływu danych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-225">One of the enumeration values that specifies how to configure a link between dataflow blocks.</span>
          </span>
        </param>
        <param name="predicate">
          <span data-ttu-id="e6ce2-226">Filtr wiadomości musi przekazać w kolejności na jego propagację ze źródła do docelowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-226">The filter a message must pass in order for it to propagate from the source to the target.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e6ce2-227">Linki <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> określonej <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> przy użyciu określonego filtru.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-227">Links the  <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" /> to the specified  <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> using the specified filter.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e6ce2-228">
            <see cref="T:System.IDisposable" /> , Podczas wywoływania <see langword="Dispose" />, spowoduje to odłączenie źródła z obiektu docelowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-228">An <see cref="T:System.IDisposable" /> that, upon calling <see langword="Dispose" />, will unlink the source from the target.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e6ce2-229">
            <paramref name="source" /> Ma wartość null (Nothing w języku Visual Basic).</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-229">The  <paramref name="source" /> is null (Nothing in Visual Basic).</span>
          </span>
          <span data-ttu-id="e6ce2-230">- lub - <paramref name="target" /> ma wartość null (Nothing w języku Visual Basic).</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-230">-or-  The  <paramref name="target" /> is null (Nothing in Visual Basic).</span>
          </span>
          <span data-ttu-id="e6ce2-231">- lub - <paramref name="linkOptions" /> ma wartość null (Nothing w języku Visual Basic).</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-231">-or-  The  <paramref name="linkOptions" /> is null (Nothing in Visual Basic).</span>
          </span>
          <span data-ttu-id="e6ce2-232">- lub - <paramref name="predicate" /> ma wartość null (Nothing w języku Visual Basic).</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-232">-or-  The  <paramref name="predicate" /> is null (Nothing in Visual Basic).</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="NullTarget&lt;TInput&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt; NullTarget&lt;TInput&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Dataflow.ITargetBlock`1&lt;!!TInput&gt; NullTarget&lt;TInput&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.NullTarget``1" />
      <MemberSignature Language="VB.NET" Value="Public Function NullTarget(Of TInput) () As ITargetBlock(Of TInput)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TInput&gt;&#xA; static System::Threading::Tasks::Dataflow::ITargetBlock&lt;TInput&gt; ^ NullTarget();" />
      <MemberSignature Language="F#" Value="static member NullTarget : unit -&gt; System.Threading.Tasks.Dataflow.ITargetBlock&lt;'Input&gt;" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.NullTarget " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TInput" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TInput">
          <span data-ttu-id="e6ce2-233">Typ wiadomości, ten blok można zaakceptować.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-233">The type of the messages this block can accept.</span>
          </span>
        </typeparam>
        <summary>
          <span data-ttu-id="e6ce2-234">Pobiera blok docelowy, który synchronicznie akceptuje wszystkie komunikaty oferowana do niego i umieszcza je.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-234">Gets a target block that synchronously accepts all messages offered to it and drops them.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e6ce2-235">A <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> , akceptuje i następnie porzuca wszystkie komunikaty oferowane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-235">A <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" /> that accepts and subsequently drops all offered messages.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OutputAvailableAsync&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;bool&gt; OutputAvailableAsync&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;bool&gt; OutputAvailableAsync&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.OutputAvailableAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function OutputAvailableAsync(Of TOutput) (source As ISourceBlock(Of TOutput)) As Task(Of Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Threading::Tasks::Task&lt;bool&gt; ^ OutputAvailableAsync(System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member OutputAvailableAsync : System.Threading.Tasks.Dataflow.ISourceBlock&lt;'Output&gt; -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.OutputAvailableAsync source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput">
          <span data-ttu-id="e6ce2-236">Określa typ danych znajdujących się w źródle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-236">Specifies the type of data contained in the source.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e6ce2-237">Źródło do monitorowania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-237">The source to monitor.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e6ce2-238">Udostępnia <see cref="T:System.Threading.Tasks.Task`1" /> który asynchronicznie monitoruje źródło pod kątem dostępnych danych wyjściowych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-238">Provides a <see cref="T:System.Threading.Tasks.Task`1" /> that asynchronously monitors the source for available output.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e6ce2-239">A <see cref="T:System.Threading.Tasks.Task`1" /> informuje, czy i kiedy więcej danych wyjściowych jest dostępna.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-239">A <see cref="T:System.Threading.Tasks.Task`1" /> that informs of whether and when more output is available.</span>
          </span>
          <span data-ttu-id="e6ce2-240">Jeśli po zakończeniu zadania, jego <see cref="P:System.Threading.Tasks.Task`1.Result" /> jest <see langword="true" />, więcej danych wyjściowych jest dostępna w źródle (chociaż innego konsumenta źródła może pobrać danych).</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-240">If, when the task completes, its <see cref="P:System.Threading.Tasks.Task`1.Result" /> is <see langword="true" />, more output is available in the source (though another consumer of the source may retrieve the data).</span>
          </span>
          <span data-ttu-id="e6ce2-241">Jeśli zostanie zwrócona <see langword="false" />, więcej danych wyjściowych jest i nigdy nie będą dostępne, ze względu na kończenie źródła przed danych wyjściowych jest dostępna.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-241">If it returns <see langword="false" />, more output is not and will never be available, due to the source completing prior to output being available.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OutputAvailableAsync&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;bool&gt; OutputAvailableAsync&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;bool&gt; OutputAvailableAsync&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.OutputAvailableAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Threading::Tasks::Task&lt;bool&gt; ^ OutputAvailableAsync(System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt; ^ source, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="static member OutputAvailableAsync : System.Threading.Tasks.Dataflow.ISourceBlock&lt;'Output&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.OutputAvailableAsync (source, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" RefType="this" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput">
          <span data-ttu-id="e6ce2-242">Określa typ danych znajdujących się w źródle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-242">Specifies the type of data contained in the source.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e6ce2-243">Źródło do monitorowania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-243">The source to monitor.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="e6ce2-244">Token anulowania, z którą chcesz anulować operację asynchroniczną.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-244">The cancellation token with which to cancel the asynchronous operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e6ce2-245">Udostępnia <see cref="T:System.Threading.Tasks.Task`1" /> który asynchronicznie monitoruje źródło pod kątem dostępnych danych wyjściowych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-245">Provides a  <see cref="T:System.Threading.Tasks.Task`1" /> that asynchronously monitors the source for available output.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e6ce2-246">A <see cref="T:System.Threading.Tasks.Task`1" /> informuje, czy i kiedy więcej danych wyjściowych jest dostępna.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-246">A <see cref="T:System.Threading.Tasks.Task`1" /> that informs of whether and when more output is available.</span>
          </span>
          <span data-ttu-id="e6ce2-247">Jeśli po zakończeniu zadania, jego <see cref="P:System.Threading.Tasks.Task`1.Result" /> jest <see langword="true" />, więcej danych wyjściowych jest dostępna w źródle (chociaż innego konsumenta źródła może pobrać danych).</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-247">If, when the task completes, its <see cref="P:System.Threading.Tasks.Task`1.Result" /> is <see langword="true" />, more output is available in the source (though another consumer of the source may retrieve the data).</span>
          </span>
          <span data-ttu-id="e6ce2-248">Jeśli zostanie zwrócona <see langword="false" />, więcej danych wyjściowych jest i nigdy nie będą dostępne, ze względu na kończenie źródła przed danych wyjściowych jest dostępna.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-248">If it returns <see langword="false" />, more output is not and will never be available, due to the source completing prior to output being available.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Post&lt;TInput&gt;">
      <MemberSignature Language="C#" Value="public static bool Post&lt;TInput&gt; (this System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt; target, TInput item);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Post&lt;TInput&gt;(class System.Threading.Tasks.Dataflow.ITargetBlock`1&lt;!!TInput&gt; target, !!TInput item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.Post``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Post(Of TInput) (target As ITargetBlock(Of TInput), item As TInput) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TInput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool Post(System::Threading::Tasks::Dataflow::ITargetBlock&lt;TInput&gt; ^ target, TInput item);" />
      <MemberSignature Language="F#" Value="static member Post : System.Threading.Tasks.Dataflow.ITargetBlock&lt;'Input&gt; * 'Input -&gt; bool" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.Post (target, item)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TInput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt;" RefType="this" />
        <Parameter Name="item" Type="TInput" />
      </Parameters>
      <Docs>
        <typeparam name="TInput">
          <span data-ttu-id="e6ce2-249">Określa typ danych zaakceptowane przez blok docelowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-249">Specifies the type of data accepted by the target block.</span>
          </span>
        </typeparam>
        <param name="target">
          <span data-ttu-id="e6ce2-250">Blok docelowy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-250">The target block.</span>
          </span>
        </param>
        <param name="item">
          <span data-ttu-id="e6ce2-251">Element oferowana do obiektu docelowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-251">The item being offered to the target.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e6ce2-252">Element do wpisów <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-252">Posts an item to the <see cref="T:System.Threading.Tasks.Dataflow.ITargetBlock`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e6ce2-253">
            <see langword="true" /> Jeśli element został zaakceptowany przez blok docelowy; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-253">
              <see langword="true" /> if the item was accepted by the target block; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e6ce2-254">Ta metoda zwróci po bloku docelowego podjęto decyzję o zaakceptowanie lub odrzucenie elementu, ale chyba że definiowane w przeciwnym razie specjalnych semantykę blok docelowy, go nie czeka na element, aby rzeczywiście być przetwarzane.</span><span class="sxs-lookup"><span data-stu-id="e6ce2-254">This method will return once the target block has decided to accept or decline the item, but unless otherwise dictated by special semantics of the target block, it does not wait for the item to actually be processed.</span></span> <span data-ttu-id="e6ce2-255">Adapterem <xref:System.Threading.Tasks.Dataflow.ActionBlock%601> zwróci z <xref:System.Threading.Tasks.Dataflow.DataflowBlock.Post%2A> zaraz po przechował opublikowany element do jego danych wejściowych w kolejce).</span><span class="sxs-lookup"><span data-stu-id="e6ce2-255">For example, <xref:System.Threading.Tasks.Dataflow.ActionBlock%601> will return from <xref:System.Threading.Tasks.Dataflow.DataflowBlock.Post%2A> as soon as it has stored the posted item into its input queue).</span></span> <span data-ttu-id="e6ce2-256">Z punktu widzenia przetwarzania tego bloku `Post` jest asynchroniczna.</span><span class="sxs-lookup"><span data-stu-id="e6ce2-256">From the perspective of the block's processing, `Post` is asynchronous.</span></span> <span data-ttu-id="e6ce2-257">Za miejsce docelowe blokuje tej obsługi odracza dostępne komunikaty lub bloków, które może wykonać przetwarzanie większej ilości danych w ich `Post` wdrożenia, należy rozważyć użycie <xref:System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync%2A>, która zwróci natychmiast i umożliwi docelowych można odroczyć ogłoszony komunikat i później stosować go po `SendAsync` zwraca.</span><span class="sxs-lookup"><span data-stu-id="e6ce2-257">For target blocks that support postponing offered messages, or for blocks that may do more processing in their `Post` implementation, consider using <xref:System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync%2A>, which will return immediately and will enable the target to postpone the posted message and later consume it after `SendAsync` returns.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Receive&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static TOutput Receive&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TOutput Receive&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Receive(Of TOutput) (source As ISourceBlock(Of TOutput)) As TOutput" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TOutput Receive(System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Receive : System.Threading.Tasks.Dataflow.ISourceBlock&lt;'Output&gt; -&gt; 'Output" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.Receive source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TOutput</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput">
          <span data-ttu-id="e6ce2-258">Typ danych znajdujących się w źródle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-258">The type of data contained in the source.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e6ce2-259">Źródło, z którego można uzyskać wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-259">The source from which to receive the value.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e6ce2-260">Synchronicznie otrzymuje wartość z określonego źródła.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-260">Synchronously receives a value from a specified source.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e6ce2-261">Odebrano wartość.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-261">The received value.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e6ce2-262">
            <paramref name="source" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-262">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e6ce2-263">Brak elementów można otrzymać ze źródła.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-263">No item could be received from the source.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Receive&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static TOutput Receive&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TOutput Receive&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TOutput Receive(System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt; ^ source, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="static member Receive : System.Threading.Tasks.Dataflow.ISourceBlock&lt;'Output&gt; * System.Threading.CancellationToken -&gt; 'Output" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.Receive (source, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TOutput</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" RefType="this" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput">
          <span data-ttu-id="e6ce2-264">Typ danych znajdujących się w źródle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-264">The type of data contained in the source.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e6ce2-265">Źródło, z którego można uzyskać wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-265">The source from which to receive the value.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="e6ce2-266">Token, który służy do anulowania operacji odbierania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-266">The token to use to cancel the receive operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e6ce2-267">Synchronicznie otrzymuje wartość z określonego źródła i zawiera token, aby anulować operację.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-267">Synchronously receives a value from a specified source and provides a token to cancel the operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e6ce2-268">Odebrano wartość.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-268">The received value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e6ce2-269">Jeśli źródło oferowane pomyślnie elementu, który został odebrany przez tę operację, zwracany jest ten element, nawet w przypadku wystąpienia na żądanie anulowania współbieżnych.</span><span class="sxs-lookup"><span data-stu-id="e6ce2-269">If the source successfully offered an item that was received by this operation, that item is returned even if a concurrent cancellation request occurs.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e6ce2-270">
            <paramref name="source" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-270">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e6ce2-271">Brak elementów można otrzymać ze źródła.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-271">No item could be received from the source.</span>
          </span>
        </exception>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="e6ce2-272">Operacja została anulowana, zanim element został odebrany ze źródła.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-272">The operation was canceled before an item was received from the source.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Receive&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static TOutput Receive&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TOutput Receive&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Receive(Of TOutput) (source As ISourceBlock(Of TOutput), timeout As TimeSpan) As TOutput" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TOutput Receive(System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt; ^ source, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member Receive : System.Threading.Tasks.Dataflow.ISourceBlock&lt;'Output&gt; * TimeSpan -&gt; 'Output" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.Receive (source, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TOutput</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" RefType="this" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput">
          <span data-ttu-id="e6ce2-273">Typ danych znajdujących się w źródle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-273">The type of data contained in the source.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e6ce2-274">Źródło, z którego można uzyskać wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-274">The source from which to receive the value.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="e6ce2-275">Interwał maksymalny czas (w milisekundach) oczekiwania na zakończenie, synchronicznych operacji lub interwału, który reprezentuje wartość-1 milisekund oczekiwania przez czas nieokreślony.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-275">The maximum time interval, in milliseconds, to wait for the synchronous operation to complete, or an interval that represents -1 milliseconds to wait indefinitely.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e6ce2-276">Synchronicznie odbiera wartość z określonym źródłem obserwacji opcjonalny limit czasu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-276">Synchronously receives a value from a specified source, observing an optional time-out period.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e6ce2-277">Odebrano wartość.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-277">The received value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e6ce2-278">Jeśli źródło oferowane pomyślnie elementu, który został odebrany przez tę operację, zwracany jest ten element, nawet w przypadku wystąpienia równoczesne limitu czasu.</span><span class="sxs-lookup"><span data-stu-id="e6ce2-278">If the source successfully offered an item that was received by this operation, that item is returned even if a concurrent time-out occurs.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="e6ce2-279">
            <paramref name="timeout" /> jest to liczba ujemna innych niż milisekund wartości-1, który reprezentuje nieskończony limit czasu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-279">
              <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out period.</span>
          </span>
          <span data-ttu-id="e6ce2-280">- lub - <paramref name="timeout" /> jest większa niż <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-280">-or-  <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e6ce2-281">
            <paramref name="source" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-281">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e6ce2-282">Brak elementów można otrzymać ze źródła.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-282">No item could be received from the source.</span>
          </span>
        </exception>
        <exception cref="T:System.TimeoutException">
          <span data-ttu-id="e6ce2-283">Określony limit czasu upłynął, zanim element został odebrany ze źródła.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-283">The specified time-out expired before an item was received from the source.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Receive&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static TOutput Receive&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TOutput Receive&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.Receive``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TOutput Receive(System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt; ^ source, TimeSpan timeout, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="static member Receive : System.Threading.Tasks.Dataflow.ISourceBlock&lt;'Output&gt; * TimeSpan * System.Threading.CancellationToken -&gt; 'Output" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.Receive (source, timeout, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TOutput</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" RefType="this" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput">
          <span data-ttu-id="e6ce2-284">Typ danych znajdujących się w źródle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-284">The type of data contained in the source.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e6ce2-285">Źródło, z którego można uzyskać wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-285">The source from which to receive the value.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="e6ce2-286">Interwał maksymalny czas (w milisekundach) oczekiwania na zakończenie, synchronicznych operacji lub interwału, który reprezentuje wartość-1 milisekund oczekiwania przez czas nieokreślony.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-286">The maximum time interval, in milliseconds, to wait for the synchronous operation to complete, or an interval that represents -1 milliseconds to wait indefinitely.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="e6ce2-287">Token, który służy do anulowania operacji odbierania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-287">The token to use to cancel the receive operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e6ce2-288">Synchronicznie otrzymuje wartość z określonego źródła, zapewniając tokenu, anulować operację i obserwowania opcjonalny limit czasu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-288">Synchronously receives a value from a specified source, providing a token to cancel the operation and observing an optional time-out interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e6ce2-289">Odebrano wartość.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-289">The received value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e6ce2-290">Jeśli źródło oferowane pomyślnie wartość elementu, który został odebrany przez tę operację, ta wartość jest zwracana, nawet jeśli wystąpi równoczesnych żądań przekroczenia limitu czasu i anulowania.</span><span class="sxs-lookup"><span data-stu-id="e6ce2-290">If the source successfully offered an item value that was received by this operation, that value is returned even if a concurrent time-out or cancellation request occurs.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e6ce2-291">
            <paramref name="source" /> Jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-291">The <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="e6ce2-292">
            <paramref name="timeout" /> jest to liczba ujemna innych niż milisekund wartości-1, który reprezentuje nieskończony limit czasu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-292">
              <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out period.</span>
          </span>
          <span data-ttu-id="e6ce2-293">- lub - <paramref name="timeout" /> jest większa niż <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-293">-or-  <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e6ce2-294">Brak elementów można otrzymać ze źródła.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-294">No item could be received from the source.</span>
          </span>
        </exception>
        <exception cref="T:System.TimeoutException">
          <span data-ttu-id="e6ce2-295">Określony limit czasu upłynął, zanim element został odebrany ze źródła.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-295">The specified time-out expired before an item was received from the source.</span>
          </span>
        </exception>
        <exception cref="T:System.OperationCanceledException">
          <span data-ttu-id="e6ce2-296">Operacja została anulowana, zanim element został odebrany ze źródła.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-296">The operation was canceled before an item was received from the source.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ReceiveAsync&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TOutput&gt; ReceiveAsync&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TOutput&gt; ReceiveAsync&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ReceiveAsync(Of TOutput) (source As ISourceBlock(Of TOutput)) As Task(Of TOutput)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Threading::Tasks::Task&lt;TOutput&gt; ^ ReceiveAsync(System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member ReceiveAsync : System.Threading.Tasks.Dataflow.ISourceBlock&lt;'Output&gt; -&gt; System.Threading.Tasks.Task&lt;'Output&gt;" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TOutput&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput">
          <span data-ttu-id="e6ce2-297">Typ danych znajdujących się w źródle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-297">The type of data contained in the source.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e6ce2-298">Źródło, z którego można uzyskać wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-298">The source from which to receive the value.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e6ce2-299">Asynchronicznie otrzymuje wartość z określonego źródła.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-299">Asynchronously receives a value from a specified source.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e6ce2-300">Zadanie reprezentujące asynchroniczną operacji odbioru.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-300">A task that represents the asynchronous receive operation.</span>
          </span>
          <span data-ttu-id="e6ce2-301">Jeśli wartość elementu została odebrana pomyślnie ze źródła, zwrócone zadanie zostało ukończone i jego <see cref="P:System.Threading.Tasks.Task`1.Result" /> zwraca odebranej wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-301">When an item value is successfully received from the source, the returned task is completed and its <see cref="P:System.Threading.Tasks.Task`1.Result" /> returns the received value.</span>
          </span>
          <span data-ttu-id="e6ce2-302">Jeśli nie można pobrać wartość elementu, ponieważ źródłem jest pusta i ukończone, <see cref="T:System.InvalidOperationException" /> wyjątek w zwróconym zadaniu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-302">If an item value cannot be retrieved because the source is empty and completed , an <see cref="T:System.InvalidOperationException" /> exception is thrown in the returned task.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e6ce2-303">
            <paramref name="source" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-303">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ReceiveAsync&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TOutput&gt; ReceiveAsync&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TOutput&gt; ReceiveAsync&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Threading::Tasks::Task&lt;TOutput&gt; ^ ReceiveAsync(System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt; ^ source, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="static member ReceiveAsync : System.Threading.Tasks.Dataflow.ISourceBlock&lt;'Output&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Output&gt;" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync (source, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TOutput&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" RefType="this" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput">
          <span data-ttu-id="e6ce2-304">Określa typ danych znajdujących się w źródle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-304">Specifies the type of data contained in the source.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e6ce2-305">Źródło, z którego można uzyskać wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-305">The source from which to receive the value.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="e6ce2-306">Token, który służy do anulowania operacji odbierania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-306">The token to use to cancel the receive operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e6ce2-307">Asynchronicznie otrzymuje wartość z określonego źródła i zawiera token, aby anulować operację.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-307">Asynchronously receives a value from a specified source and provides a token to cancel the operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e6ce2-308">Zadanie reprezentujące asynchroniczną operacji odbioru.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-308">A task that represents the asynchronous receive operation.</span>
          </span>
          <span data-ttu-id="e6ce2-309">Jeśli wartość została odebrana pomyślnie ze źródła, zwrócone zadanie zostało ukończone i jego <see cref="P:System.Threading.Tasks.Task`1.Result" /> zwraca wartość.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-309">When a value is successfully received from the source, the returned task is completed and its <see cref="P:System.Threading.Tasks.Task`1.Result" /> returns the value.</span>
          </span>
          <span data-ttu-id="e6ce2-310">Jeśli nie można pobrać wartości, ponieważ zażądano anulowania, zwrócone zadanie zostanie anulowane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-310">If a value cannot be retrieved because cancellation was requested, the returned task is canceled.</span>
          </span>
          <span data-ttu-id="e6ce2-311">Jeśli nie można pobrać wartości, ponieważ źródłem jest pusta i ukończone, <see cref="T:System.InvalidOperationException" /> wyjątek w zwróconym zadaniu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-311">If the value cannot be retrieved because the source is empty and completed , an <see cref="T:System.InvalidOperationException" /> exception is thrown in the returned task.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e6ce2-312">
            <paramref name="source" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-312">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ReceiveAsync&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TOutput&gt; ReceiveAsync&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source, TimeSpan timeout);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TOutput&gt; ReceiveAsync&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source, valuetype System.TimeSpan timeout) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.TimeSpan)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ReceiveAsync(Of TOutput) (source As ISourceBlock(Of TOutput), timeout As TimeSpan) As Task(Of TOutput)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Threading::Tasks::Task&lt;TOutput&gt; ^ ReceiveAsync(System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt; ^ source, TimeSpan timeout);" />
      <MemberSignature Language="F#" Value="static member ReceiveAsync : System.Threading.Tasks.Dataflow.ISourceBlock&lt;'Output&gt; * TimeSpan -&gt; System.Threading.Tasks.Task&lt;'Output&gt;" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync (source, timeout)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TOutput&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" RefType="this" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput">
          <span data-ttu-id="e6ce2-313">Typ danych znajdujących się w źródle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-313">The type of data contained in the source.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e6ce2-314">Źródło, z którego można uzyskać wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-314">The source from which to receive the value.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="e6ce2-315">Interwał maksymalny czas (w milisekundach) oczekiwania na zakończenie, synchronicznych operacji lub interwału, który reprezentuje wartość-1 milisekund oczekiwania przez czas nieokreślony.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-315">The maximum time interval, in milliseconds, to wait for the synchronous operation to complete, or an interval that represents -1 milliseconds to wait indefinitely.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e6ce2-316">Asynchronicznie odbiera wartość z określonym źródłem obserwacji opcjonalny limit czasu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-316">Asynchronously receives a value from a specified source, observing an optional time-out period.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e6ce2-317">Zadanie reprezentujące asynchroniczną operacji odbioru.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-317">A task that represents the asynchronous receive operation.</span>
          </span>
          <span data-ttu-id="e6ce2-318">Jeśli wartość została odebrana pomyślnie ze źródła, zwrócone zadanie zostało ukończone i jego <see cref="P:System.Threading.Tasks.Task`1.Result" /> zwraca wartość.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-318">When a value is successfully received from the source, the returned task is completed and its <see cref="P:System.Threading.Tasks.Task`1.Result" /> returns the value.</span>
          </span>
          <span data-ttu-id="e6ce2-319">Jeśli nie można pobrać wartości, ponieważ upływie limitu czasu, zwrócone zadanie zostanie anulowane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-319">If a value cannot be retrieved because the time-out expired, the returned task is canceled.</span>
          </span>
          <span data-ttu-id="e6ce2-320">Jeśli nie można pobrać wartości, ponieważ źródłem jest pusta i ukończone, <see cref="T:System.InvalidOperationException" /> wyjątek w zwróconym zadaniu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-320">If the value cannot be retrieved because the source is empty and completed , an <see cref="T:System.InvalidOperationException" /> exception is thrown in the returned task.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e6ce2-321">
            <paramref name="source" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-321">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="e6ce2-322">
            <paramref name="timeout" /> jest to liczba ujemna innych niż milisekund wartości-1, który reprezentuje nieskończony limit czasu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-322">
              <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out period.</span>
          </span>
          <span data-ttu-id="e6ce2-323">- lub - <paramref name="timeout" /> jest większa niż <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-323">-or-  <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ReceiveAsync&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;TOutput&gt; ReceiveAsync&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt; source, TimeSpan timeout, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;!!TOutput&gt; ReceiveAsync&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.ISourceBlock`1&lt;!!TOutput&gt; source, valuetype System.TimeSpan timeout, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync``1(System.Threading.Tasks.Dataflow.ISourceBlock{``0},System.TimeSpan,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Threading::Tasks::Task&lt;TOutput&gt; ^ ReceiveAsync(System::Threading::Tasks::Dataflow::ISourceBlock&lt;TOutput&gt; ^ source, TimeSpan timeout, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="static member ReceiveAsync : System.Threading.Tasks.Dataflow.ISourceBlock&lt;'Output&gt; * TimeSpan * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;'Output&gt;" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.ReceiveAsync (source, timeout, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;TOutput&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.ISourceBlock&lt;TOutput&gt;" RefType="this" />
        <Parameter Name="timeout" Type="System.TimeSpan" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput">
          <span data-ttu-id="e6ce2-324">Typ danych znajdujących się w źródle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-324">The type of data contained in the source.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e6ce2-325">Źródło, z którego można uzyskać wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-325">The source from which to receive the value.</span>
          </span>
        </param>
        <param name="timeout">
          <span data-ttu-id="e6ce2-326">Interwał maksymalny czas (w milisekundach) oczekiwania na zakończenie, synchronicznych operacji lub interwału, który reprezentuje wartość-1 milisekund oczekiwania przez czas nieokreślony.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-326">The maximum time interval, in milliseconds, to wait for the synchronous operation to complete, or an interval that represents -1 milliseconds to wait indefinitely.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="e6ce2-327">Token, który może służyć do anulowania operacji odbierania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-327">The token which may be used to cancel the receive operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e6ce2-328">Asynchronicznie otrzymuje wartość z określonego źródła, zapewniając tokenu, anulować operację i obserwowania opcjonalny limit czasu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-328">Asynchronously receives a value from a specified source, providing a token to cancel the operation and observing an optional time-out interval.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e6ce2-329">Zadanie reprezentujące asynchroniczną operacji odbioru.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-329">A task that represents the asynchronous receive operation.</span>
          </span>
          <span data-ttu-id="e6ce2-330">Jeśli wartość została odebrana pomyślnie ze źródła, zwrócone zadanie zostało ukończone i jego <see cref="P:System.Threading.Tasks.Task`1.Result" /> zwraca wartość.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-330">When a value is successfully received from the source, the returned task is completed and its <see cref="P:System.Threading.Tasks.Task`1.Result" /> returns the value.</span>
          </span>
          <span data-ttu-id="e6ce2-331">Jeśli nie można pobrać wartości, ponieważ upływie limitu czasu lub zażądano anulowania, zwrócone zadanie zostanie anulowane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-331">If a value cannot be retrieved because the time-out expired or cancellation was requested, the returned task is canceled.</span>
          </span>
          <span data-ttu-id="e6ce2-332">Jeśli nie można pobrać wartości, ponieważ źródłem jest pusta i ukończone, <see cref="T:System.InvalidOperationException" /> wyjątek w zwróconym zadaniu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-332">If the value cannot be retrieved because the source is empty and completed, an <see cref="T:System.InvalidOperationException" /> exception is thrown in the returned task.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e6ce2-333">
            <paramref name="source" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-333">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="e6ce2-334">
            <paramref name="timeout" /> jest to liczba ujemna innych niż milisekund wartości-1, który reprezentuje nieskończony limit czasu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-334">
              <paramref name="timeout" /> is a negative number other than -1 milliseconds, which represents an infinite time-out period.</span>
          </span>
          <span data-ttu-id="e6ce2-335">- lub - <paramref name="timeout" /> jest większa niż <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-335">-or-  <paramref name="timeout" /> is greater than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SendAsync&lt;TInput&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;bool&gt; SendAsync&lt;TInput&gt; (this System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt; target, TInput item);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;bool&gt; SendAsync&lt;TInput&gt;(class System.Threading.Tasks.Dataflow.ITargetBlock`1&lt;!!TInput&gt; target, !!TInput item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SendAsync(Of TInput) (target As ITargetBlock(Of TInput), item As TInput) As Task(Of Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TInput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Threading::Tasks::Task&lt;bool&gt; ^ SendAsync(System::Threading::Tasks::Dataflow::ITargetBlock&lt;TInput&gt; ^ target, TInput item);" />
      <MemberSignature Language="F#" Value="static member SendAsync : System.Threading.Tasks.Dataflow.ITargetBlock&lt;'Input&gt; * 'Input -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync (target, item)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TInput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt;" RefType="this" />
        <Parameter Name="item" Type="TInput" />
      </Parameters>
      <Docs>
        <typeparam name="TInput">
          <span data-ttu-id="e6ce2-336">Określa typ dane do przesłania do obiektu docelowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-336">Specifies the type of the data to post to the target.</span>
          </span>
        </typeparam>
        <param name="target">
          <span data-ttu-id="e6ce2-337">Obiekt docelowy, do którego ma zostać wysyłania danych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-337">The target to which to post the data.</span>
          </span>
        </param>
        <param name="item">
          <span data-ttu-id="e6ce2-338">Element oferowana do obiektu docelowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-338">The item being offered to the target.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e6ce2-339">Asynchronicznie oferuje komunikat miejsce docelowe bloku komunikatów, dzięki czemu dla opóźnienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-339">Asynchronously offers a message to the target message block, allowing for postponement.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e6ce2-340">A <see cref="T:System.Threading.Tasks.Task`1" /> reprezentujący asynchronicznego wysyłania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-340">A <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous send.</span>
          </span>
          <span data-ttu-id="e6ce2-341">Jeśli element docelowy akceptuje i zużywa oferowane elementu podczas wywołania <see cref="M:System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0)" />, od zwrotu z wywołania wynikowy <see cref="T:System.Threading.Tasks.Task`1" /> zostanie ukończona i jego <see cref="P:System.Threading.Tasks.Task`1.Result" /> zwróci właściwości <see langword="true" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-341">If the target accepts and consumes the offered element during the call to <see cref="M:System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0)" />, upon return from the call the resulting <see cref="T:System.Threading.Tasks.Task`1" /> will be completed and its <see cref="P:System.Threading.Tasks.Task`1.Result" /> property will return <see langword="true" />.</span>
          </span>
          <span data-ttu-id="e6ce2-342">Jeśli element docelowy odmówi oferowane elementu podczas wywołania, od zwrotu z wywołania wynikowy <see cref="T:System.Threading.Tasks.Task`1" /> zostanie ukończona i jego <see cref="P:System.Threading.Tasks.Task`1.Result" /> zwróci właściwość <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-342">If the target declines the offered element during the call, upon return from the call the resulting <see cref="T:System.Threading.Tasks.Task`1" /> will be completed and its <see cref="P:System.Threading.Tasks.Task`1.Result" /> property will return <see langword="false" />.</span>
          </span>
          <span data-ttu-id="e6ce2-343">Jeśli element docelowy odłoży oferowane elementu, element będą buforowane do czasu zużywa lub zwalnia go w tym momencie zadanie zostanie ukończone, docelowe z jego <see cref="P:System.Threading.Tasks.Task`1.Result" /> wskazującą, czy komunikat został wykorzystany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-343">If the target postpones the offered element, the element will be buffered until such time that the target consumes or releases it, at which point the task will complete, with its <see cref="P:System.Threading.Tasks.Task`1.Result" /> indicating whether the message was consumed.</span>
          </span>
          <span data-ttu-id="e6ce2-344">Jeśli element docelowy nigdy nie próbuje używają lub wersji wiadomości, zwrócone zadanie nigdy nie zostanie ukończone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-344">If the target never attempts to consume or release the message, the returned task will never complete.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e6ce2-345">
            <paramref name="target" /> Jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-345">The <paramref name="target" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SendAsync&lt;TInput&gt;">
      <MemberSignature Language="C#" Value="public static System.Threading.Tasks.Task&lt;bool&gt; SendAsync&lt;TInput&gt; (this System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt; target, TInput item, System.Threading.CancellationToken cancellationToken);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Threading.Tasks.Task`1&lt;bool&gt; SendAsync&lt;TInput&gt;(class System.Threading.Tasks.Dataflow.ITargetBlock`1&lt;!!TInput&gt; target, !!TInput item, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync``1(System.Threading.Tasks.Dataflow.ITargetBlock{``0},``0,System.Threading.CancellationToken)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TInput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Threading::Tasks::Task&lt;bool&gt; ^ SendAsync(System::Threading::Tasks::Dataflow::ITargetBlock&lt;TInput&gt; ^ target, TInput item, System::Threading::CancellationToken cancellationToken);" />
      <MemberSignature Language="F#" Value="static member SendAsync : System.Threading.Tasks.Dataflow.ITargetBlock&lt;'Input&gt; * 'Input * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;bool&gt;" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.SendAsync (target, item, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Boolean&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TInput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="target" Type="System.Threading.Tasks.Dataflow.ITargetBlock&lt;TInput&gt;" RefType="this" />
        <Parameter Name="item" Type="TInput" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TInput">
          <span data-ttu-id="e6ce2-346">Określa typ dane do przesłania do obiektu docelowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-346">Specifies the type of the data to post to the target.</span>
          </span>
        </typeparam>
        <param name="target">
          <span data-ttu-id="e6ce2-347">Obiekt docelowy, do którego ma zostać wysyłania danych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-347">The target to which to post the data.</span>
          </span>
        </param>
        <param name="item">
          <span data-ttu-id="e6ce2-348">Element oferowana do obiektu docelowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-348">The item being offered to the target.</span>
          </span>
        </param>
        <param name="cancellationToken">
          <span data-ttu-id="e6ce2-349">Token anulowania, z którą ma zostać żądanie anulowania operacji wysyłania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-349">The cancellation token with which to request cancellation of the send operation.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e6ce2-350">Asynchronicznie oferuje komunikat miejsce docelowe bloku komunikatów, dzięki czemu dla opóźnienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-350">Asynchronously offers a message to the target message block, allowing for postponement.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e6ce2-351">A <see cref="T:System.Threading.Tasks.Task`1" /> reprezentujący asynchronicznego wysyłania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-351">A <see cref="T:System.Threading.Tasks.Task`1" /> that represents the asynchronous send.</span>
          </span>
          <span data-ttu-id="e6ce2-352">Jeśli element docelowy akceptuje i wykorzystuje oferowane elementu podczas wywołania SendAsync, po zwrócić z wywołania wynikowy <see cref="T:System.Threading.Tasks.Task`1" /> zakończy się i jego <c>wynik</c> właściwość zostanie zwrócona wartość PRAWDA.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-352">If the target accepts and consumes the offered element during the call to SendAsync, upon return from the call the resulting <see cref="T:System.Threading.Tasks.Task`1" /> will be completed and its <c>Result</c> property will return true.</span>
          </span>
          <span data-ttu-id="e6ce2-353">Jeśli element docelowy odmówi oferowane elementu podczas wywołania, od zwrotu z wywołania wynikowy <see cref="T:System.Threading.Tasks.Task`1" /> zostanie ukończona i jego <c>wynik</c> właściwość zwraca wartość false.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-353">If the target declines the offered element during the call, upon return from the call the resulting <see cref="T:System.Threading.Tasks.Task`1" /> will be completed and its <c>Result</c> property will return false.</span>
          </span>
          <span data-ttu-id="e6ce2-354">Jeśli element docelowy odłoży oferowane elementu, element będą buforowane do czasu zużywa lub zwalnia go w tym momencie zadanie zostanie ukończone, docelowe z jego <c>wynik</c> wskazującą, czy komunikat został wykorzystany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-354">If the target postpones the offered element, the element will be buffered until such time that the target consumes or releases it, at which point the Task will complete, with its <c>Result</c> indicating whether the message was consumed.</span>
          </span>
          <span data-ttu-id="e6ce2-355">Jeśli element docelowy nigdy nie próbuje używają lub wersji wiadomości, zwrócone zadanie nigdy nie zostanie ukończone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-355">If the target never attempts to consume or release the message, the returned task will never complete.</span>
          </span>
          <span data-ttu-id="e6ce2-356">Czy zażądano anulowania, zanim obiekt docelowy zużyła pomyślnie wysłane dane, zwrócone zadanie zostanie ukończone ze stanem anulowane, a danych nie będzie już dostępna do obiektu docelowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-356">If cancellation is requested before the target has successfully consumed the sent data, the returned task will complete in the Canceled state and the data will no longer be available to the target.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e6ce2-357">
            <paramref name="target" /> Ma wartość null (Nothing w języku Visual Basic).</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-357">The  <paramref name="target" /> is null (Nothing in Visual Basic).</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="TryReceive&lt;TOutput&gt;">
      <MemberSignature Language="C#" Value="public static bool TryReceive&lt;TOutput&gt; (this System.Threading.Tasks.Dataflow.IReceivableSourceBlock&lt;TOutput&gt; source, out TOutput item);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryReceive&lt;TOutput&gt;(class System.Threading.Tasks.Dataflow.IReceivableSourceBlock`1&lt;!!TOutput&gt; source, [out] !!TOutput&amp; item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Threading.Tasks.Dataflow.DataflowBlock.TryReceive``1(System.Threading.Tasks.Dataflow.IReceivableSourceBlock{``0},``0@)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TryReceive(Of TOutput) (source As IReceivableSourceBlock(Of TOutput), ByRef item As TOutput) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOutput&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool TryReceive(System::Threading::Tasks::Dataflow::IReceivableSourceBlock&lt;TOutput&gt; ^ source, [Runtime::InteropServices::Out] TOutput % item);" />
      <MemberSignature Language="F#" Value="static member TryReceive : System.Threading.Tasks.Dataflow.IReceivableSourceBlock&lt;'Output&gt; *  -&gt; bool" Usage="System.Threading.Tasks.Dataflow.DataflowBlock.TryReceive (source, item)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Threading.Tasks.Dataflow</AssemblyName>
        <AssemblyVersion>4.6.0.0</AssemblyVersion>
        <AssemblyVersion>4.6.1.0</AssemblyVersion>
        <AssemblyVersion>4.6.2.0</AssemblyVersion>
        <AssemblyVersion>4.6.3.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Threading.Tasks.Dataflow.IReceivableSourceBlock&lt;TOutput&gt;" RefType="this" />
        <Parameter Name="item" Type="TOutput&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="TOutput">
          <span data-ttu-id="e6ce2-358">Określa typ danych znajdujących się w źródle.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-358">Specifies the type of data contained in the source.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e6ce2-359">Źródło, z którego ma zostać wyświetlony.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-359">The source from which to receive.</span>
          </span>
        </param>
        <param name="item">
          <span data-ttu-id="e6ce2-360">Element, który otrzymał ze źródła.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-360">The item received from the source.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e6ce2-361">Próby uzyskania synchronicznego elementu z <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-361">Attempts to synchronously receive an item from the <see cref="T:System.Threading.Tasks.Dataflow.ISourceBlock`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e6ce2-362">
            <see langword="true" /> Jeśli element może być; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e6ce2-362">
              <see langword="true" /> if an item could be received; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e6ce2-363">Ta metoda nie poczekaj, aż źródło nie zawiera element, aby zapewnić.</span><span class="sxs-lookup"><span data-stu-id="e6ce2-363">This method does not wait until the source has an item to provide.</span></span>  
  
 <span data-ttu-id="e6ce2-364">Zwróci informację określającą, czy element była dostępna.</span><span class="sxs-lookup"><span data-stu-id="e6ce2-364">It will return whether or not an element was available.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>