<Type Name="SecureString" FullName="System.Security.SecureString">
  <Metadata><Meta Name="ms.openlocfilehash" Value="96bc424553b906350ab42e30474aa7eb58c02455" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69161583" /></Metadata><TypeSignature Language="C#" Value="public sealed class SecureString : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed SecureString extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Security.SecureString" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SecureString&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class SecureString sealed : IDisposable" />
  <TypeSignature Language="F#" Value="type SecureString = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Security.SecureString</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime.InteropServices</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Reprezentuje tekst, który powinien zostać zachowany poufne, na przykład przez usunięcie go z pamięci komputera, gdy nie jest już potrzebne. Klasa ta nie może być dziedziczona.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  

> [!IMPORTANT]
>  Nie zalecamy używania `SecureString` klasy do nowych celów programistycznych. Aby uzyskać więcej informacji, zobacz [SecureString nie powinien być używany](https://github.com/dotnet/platform-compat/blob/master/docs/DE0001.md) w serwisie GitHub.

 <xref:System.Security.SecureString>jest typem ciągu, który zapewnia miarę zabezpieczeń. Próbuje uniknąć przechowywania potencjalnie poufnych ciągów w pamięci procesu jako zwykłego tekstu.  (W przypadku ograniczeń należy jednak zapoznać się z sekcją [jak bezpiecznie jest to SecureString?](#HowSecure) ). Wartość wystąpienia <xref:System.Security.SecureString> jest automatycznie chroniona przy użyciu mechanizmu obsługiwanego przez platformę podstawową, gdy wystąpienie zostanie zainicjowane lub gdy wartość zostanie zmodyfikowana. Aplikacja może renderować wystąpienie niezmienne i uniemożliwiać dalsze modyfikacje przez wywołanie <xref:System.Security.SecureString.MakeReadOnly%2A> metody.  
  
 Maksymalna długość <xref:System.Security.SecureString> wystąpienia to 65 536 znaków.  
  
> [!IMPORTANT]
>  Ten typ implementuje <xref:System.IDisposable> interfejs. Po zakończeniu korzystania z wystąpienia typu należy usunąć jego wartość bezpośrednio lub pośrednio. Aby usunąć typ bezpośrednio <xref:System.IDisposable.Dispose%2A> , wywołaj jego metodę `try` / `catch` w bloku. Aby usunąć go pośrednio, użyj konstrukcji języka, takiej jak `using` (in C#) lub `Using` (w Visual Basic). Aby uzyskać więcej informacji, zobacz sekcję "Używanie obiektu implementującego <xref:System.IDisposable> interfejs IDisposable" w temacie dotyczącym interfejsu.  
  
 <xref:System.Security.SecureString> Klasa i jej elementy członkowskie nie są widoczne dla modelu com. Aby uzyskać więcej informacji, zobacz <xref:System.Runtime.InteropServices.ComVisibleAttribute>.  
  
 W tej sekcji:  
  
 [Ciąg a SecureString](#vsString)   
 [Operacje SecureString](#Ops)   
 [SecureString i Interop](#interop)   
 [Jak bezpieczny jest SecureString?](#HowSecure)  
  
<a name="vsString"></a>   
## <a name="string-versus-securestring"></a>Ciąg a SecureString  
 Wystąpienie <xref:System.String?displayProperty=nameWithType> klasy jest zarówno niezmienne, jak i, gdy nie jest już potrzebne, nie można programowo zaplanować do wyrzucania elementów bezużytecznych; oznacza to, że wystąpienie jest tylko do odczytu po utworzeniu i nie można go przewidzieć, gdy wystąpienie będzie Usunięto z pamięci komputera. Ponieważ <xref:System.String?displayProperty=nameWithType> wystąpienia są niezmienne, operacje, które pojawiają się w celu zmodyfikowania istniejącego wystąpienia, faktycznie tworzą kopię go do manipulowania. W związku z tym, <xref:System.String> Jeśli obiekt zawiera informacje poufne, takie jak hasło, numer karty kredytowej lub dane osobowe, istnieje ryzyko, że informacje mogą być ujawnione po ich użyciu, ponieważ aplikacja nie może usunąć danych z pamięci komputera .  
  
 Obiekt jest podobny <xref:System.String> do obiektu, w którym ma wartość tekstową. <xref:System.Security.SecureString> Jednak wartość <xref:System.Security.SecureString> obiektu jest przypięta w pamięci, może być modyfikowana za pomocą mechanizmu ochrony, takiego jak szyfrowanie dostarczone przez podstawowy system operacyjny, do momentu, gdy aplikacja oznaczy go jako tylko do odczytu i może zostać usunięta z pamięci komputera przez aplikację wywołującą <xref:System.Security.SecureString.Dispose%2A> metodę lub przez .NET Framework Moduł wyrzucania elementów bezużytecznych.  
  
 Aby zapoznać się z ograniczeniami <xref:System.Security.SecureString> klasy, zobacz sekcję [jak bezpiecznie is SecureString?](#HowSecure) .  
  
 [Powrót do początku](#top)  
  
<a name="Ops"></a>   
## <a name="securestring-operations"></a>Operacje SecureString  
 <xref:System.Security.SecureString> Klasa zawiera elementy członkowskie, które umożliwiają wykonywanie następujących czynności:  
  
 Tworzenie wystąpienia <xref:System.Security.SecureString> obiektu  
 Utworzenie wystąpienia <xref:System.Security.SecureString> obiektu przez wywołanie jego konstruktora bez parametrów.  
  
 Dodawanie znaków do <xref:System.Security.SecureString> obiektu  
 Możesz dodać pojedynczy znak jednocześnie do <xref:System.Security.SecureString> obiektu, wywołując jego <xref:System.Security.SecureString.AppendChar%2A> metodę or <xref:System.Security.SecureString.InsertAt%2A> .  
  
> [!IMPORTANT]
>  Obiekt nigdy nie powinien być zbudowany <xref:System.String>z, ponieważ poufne dane są już uzależnione od niezmiennej <xref:System.String> klasy. <xref:System.Security.SecureString> Najlepszym sposobem konstruowania <xref:System.Security.SecureString> obiektu jest utworzenie niezarządzanego znaku w czasie, takiego <xref:System.Console.ReadKey%2A?displayProperty=nameWithType> jak metoda.  
  
 Usuwanie znaków z <xref:System.Security.SecureString> obiektu  
 Możesz zamienić pojedynczy znak, wywołując <xref:System.Security.SecureString.SetAt%2A> metodę, usuwając pojedynczy znak przez <xref:System.Security.SecureString.RemoveAt%2A> wywołanie metody lub <xref:System.Security.SecureString> usuwając wszystkie znaki z wystąpienia, wywołując <xref:System.Security.SecureString.Clear%2A> metodę.  
  
 Ustaw obiekt <xref:System.Security.SecureString> jako tylko do odczytu  
 Po zdefiniowaniu ciągu, który <xref:System.Security.SecureString> reprezentuje obiekt, należy <xref:System.Security.SecureString.MakeReadOnly%2A> wywołać metodę, aby uzyskać ciąg tylko do odczytu.  
  
 Pobierz informacje o <xref:System.Security.SecureString> obiekcie  
 Klasa ma tylko dwa elementy członkowskie, które zawierają informacje o ciągu: jej <xref:System.Security.SecureString.Length%2A> właściwość, która wskazuje liczbę jednostek kodu zakodowanych UTF16 w ciągu; i <xref:System.Security.SecureString.IsReadOnly%2A>metodę, która wskazuje, czy wystąpienie jest <xref:System.Security.SecureString> tylko do odczytu.  
  
 Zwolnij pamięć przydzieloną do <xref:System.Security.SecureString> wystąpienia  
 Ponieważ <xref:System.Security.SecureString> <xref:System.Security.SecureString.Dispose%2A> implementuje interfejs,zwolnijpamięć,wywołującmetodę.<xref:System.IDisposable>  
  
 Klasa nie ma elementów członkowskich, które sprawdzają, porównują lub konwertują wartość <xref:System.Security.SecureString>. <xref:System.Security.SecureString> Brak takich członków pomaga chronić wartość wystąpienia przed przypadkowym lub złośliwym narażeniem. Użyj odpowiednich elementów członkowskich <xref:System.Runtime.InteropServices.Marshal?displayProperty=nameWithType> klasy, takich <xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A> jak metoda, do <xref:System.Security.SecureString> manipulowania wartością obiektu.  
  
 Biblioteka klas .NET Framework często używa <xref:System.Security.SecureString> wystąpień w następujący sposób:  
  
-   Aby podać informacje o haśle do procesu przy użyciu <xref:System.Diagnostics.ProcessStartInfo> struktury lub przez wywołanie przeciążenia <xref:System.Diagnostics.Process.Start%2A?displayProperty=nameWithType> metody, która ma parametr typu <xref:System.Security.SecureString>.  
  
-   Aby podać informacje o haśle sieciowym, wywołując <xref:System.Net.NetworkCredential> Konstruktor klasy, który ma parametr typu <xref:System.Security.SecureString> lub przy użyciu <xref:System.Net.NetworkCredential.SecurePassword%2A?displayProperty=nameWithType> właściwości.  
  
-   Aby podać informacje o haśle SQL Server uwierzytelniania przez wywołanie <xref:System.Data.SqlClient.SqlCredential.%23ctor%2A?displayProperty=nameWithType> konstruktora lub pobranie wartości <xref:System.Data.SqlClient.SqlCredential.Password%2A?displayProperty=nameWithType> właściwości.  
  
-   Aby przekazać ciąg do kodu niezarządzanego. Aby uzyskać więcej informacji, zobacz sekcję [SecureString i](#interop) międzyoperacyjność.  
  
 [Powrót do początku](#top)  
  
<a name="interop"></a>   
## <a name="securestring-and-interop"></a>SecureString i Interop  
 Ponieważ system operacyjny nie obsługuje <xref:System.Security.SecureString>bezpośrednio, należy przekonwertować wartość <xref:System.Security.SecureString> obiektu na wymagany typ ciągu przed przekazaniem ciągu do metody natywnej.  <xref:System.Runtime.InteropServices.Marshal> Klasa ma pięć metod, które wykonują następujące czynności:  
  
-   <xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A?displayProperty=nameWithType>, która konwertuje <xref:System.Security.SecureString> wartość ciągu na ciąg binarny (BSTR) uznawany przez com.  
  
-   <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A?displayProperty=nameWithType>i <xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A?displayProperty=nameWithType>, która <xref:System.Security.SecureString> kopiuje wartość ciągu do ciągu ANSI w pamięci niezarządzanej.  
  
-   <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=nameWithType>i <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=nameWithType>, która <xref:System.Security.SecureString> kopiuje wartość ciągu do ciągu Unicode w pamięci niezarządzanej.  
  
 Każda z tych metod tworzy ciąg w postaci zwykłego tekstu w pamięci niezarządzanej. Jest odpowiedzialny za wyzerowanie i zwolnienie pamięci przez dewelopera, gdy tylko nie będą potrzebne. Każda metoda konwersji ciągów i alokacji pamięci ma odpowiadającą metodę wyzerowania i zwolnienia przydzielonej pamięci:  
  
|Metoda alokacji i konwersji|Zero i bezpłatna Metoda|  
|--------------------------------------|--------------------------|  
|<xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A?displayProperty=nameWithType>|<xref:System.Runtime.InteropServices.Marshal.ZeroFreeBSTR%2A?displayProperty=nameWithType>|  
|<xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A?displayProperty=nameWithType>|<xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi%2A?displayProperty=nameWithType>|  
|<xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=nameWithType>|<xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUnicode%2A?displayProperty=nameWithType>|  
|<xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A?displayProperty=nameWithType>|<xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi%2A?displayProperty=nameWithType>|  
|<xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=nameWithType>|<xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode%2A?displayProperty=nameWithType>|  
  
 [Powrót do początku](#top)  
  
<a name="HowSecure"></a>   
## <a name="how-secure-is-securestring"></a>Jak bezpieczny jest SecureString?  
 Po poprawnym <xref:System.Security.SecureString> utworzeniu wystąpienie zapewnia większą ochronę danych <xref:System.String>niż. Podczas tworzenia ciągu na podstawie znaku na początku, program <xref:System.String> tworzy wiele pośrednich w pamięci, podczas gdy <xref:System.Security.SecureString> tworzy tylko jedno wystąpienie.  Wyrzucanie elementów bezużytecznych obiektów nie jest deterministyczne. <xref:System.String> Ponadto, ponieważ jej pamięć nie jest przypięta, Moduł wyrzucania elementów bezużytecznych będzie tworzyć dodatkowe kopie <xref:System.String> wartości podczas przesuwania i kompaktowania pamięci. Z kolei pamięć przypięta do <xref:System.Security.SecureString> obiektu jest przypinana i pamięć może zostać zwolniona przez <xref:System.Security.SecureString.Dispose%2A> wywołanie metody.  
  
 Mimo że dane przechowywane w <xref:System.Security.SecureString> wystąpieniu są bezpieczniejsze niż dane przechowywane <xref:System.String> w wystąpieniu, istnieją znaczne <xref:System.Security.SecureString> ograniczenia dotyczące sposobu zabezpieczania wystąpienia. Należą do nich następujące elementy:  
  
 Platforma  
 W systemie operacyjnym Windows zawartość <xref:System.Security.SecureString> wewnętrznej tablicy znaków wystąpienia jest zaszyfrowana. Jednak bez względu na to, czy z powodu brakujących interfejsów API lub problemów z zarządzaniem kluczami, szyfrowanie nie jest dostępne na wszystkich platformach. Ze względu na tę zależność <xref:System.Security.SecureString> platformy program nie szyfruje magazynu wewnętrznego na platformie innej niż Windows. Inne techniki są używane na tych platformach w celu zapewnienia dodatkowej ochrony.
  
 Duration  
 Nawet jeśli <xref:System.Security.SecureString> implementacja jest w stanie korzystać z szyfrowania, zwykły tekst przypisany <xref:System.Security.SecureString> do wystąpienia może być narażony w różnym czasie:  
  
-   Ponieważ system Windows nie oferuje bezpiecznej implementacji ciągu na poziomie systemu operacyjnego, .NET Framework nadal musi przekonwertować wartość bezpiecznego ciągu na jej reprezentację w postaci zwykłego tekstu, aby można było jej używać.  
  
-   Za każdym razem, gdy wartość bezpiecznego ciągu jest modyfikowana przy użyciu <xref:System.Security.SecureString.AppendChar%2A> metod <xref:System.Security.SecureString.RemoveAt%2A>takich jak lub, należy ją odszyfrować (oznacza to, że są konwertowane z powrotem na zwykły tekst), modyfikowane i szyfrowane.  
  
-   Jeśli bezpieczny ciąg jest używany w wywołaniu międzyoperacyjnym, musi być konwertowany na ciąg ANSI, ciąg Unicode lub ciąg binarny (BSTR). Aby uzyskać więcej informacji, zobacz sekcję [SecureString i](#interop) międzyoperacyjność.  
  
 Przedział czasu, dla którego <xref:System.Security.SecureString> wartość wystąpienia jest narażony, jest jedynie skracany w porównaniu <xref:System.String> do klasy.  
  
 Magazyn i użycie  
 Bardziej ogólnie rzecz biorąc <xref:System.Security.SecureString> , Klasa definiuje mechanizm magazynowania dla wartości ciągów, które powinny być chronione lub poufne. Jednakże poza .NET Framework, żaden mechanizm użycia nie obsługuje <xref:System.Security.SecureString>. Oznacza to, że bezpieczny ciąg musi być konwertowany na przydatny formularz (zazwyczaj formularz czysty tekst), który może zostać rozpoznany przez jego obiekt docelowy, a odszyfrowywanie i konwersja muszą następować w przestrzeni użytkownika.  
  
 Ogólnie, <xref:System.Security.SecureString> jest bezpieczniejszy niż <xref:System.String> ponieważ ogranicza narażenie poufnych danych ciągu. Jednak te ciągi mogą być nadal uwidocznione w dowolnym procesie lub operacji, które mają dostęp do pamięci nieprzetworzonej, takich jak złośliwy proces uruchomiony na komputerze-hoście, zrzut procesu lub plik wymiany widoczny dla użytkownika. Zamiast korzystać <xref:System.Security.SecureString> z programu w celu ochrony haseł, Zalecaną alternatywą jest użycie nieprzezroczystego uchwytu do poświadczeń przechowywanych poza procesem.  
  
 [Powrót do początku](#top)  
  
   
  
## Examples  
 Poniższy przykład ilustruje sposób użycia programu <xref:System.Security.SecureString> w celu zabezpieczenia hasła użytkownika do użycia jako poświadczenia do uruchomienia nowego procesu.  
  
 [!code-csharp[System.Security.SecureString.Ctor#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/cs/ctor4.cs#4)]
 [!code-vb[System.Security.SecureString.Ctor#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/vb/ctor4.vb#4)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Runtime.InteropServices.ComVisibleAttribute" />
    <altmember cref="T:System.Runtime.InteropServices.Marshal" />
    <altmember cref="T:System.Runtime.ConstrainedExecution.CriticalFinalizerObject" />
    <altmember cref="T:System.IDisposable" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Security.SecureString" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SecureString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SecureString();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Security.SecureString" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład używa domyślnego (lub bezparametrowego) konstruktora do utworzenia wystąpienia nowego <xref:System.Security.SecureString> obiektu. Następnie wywołuje metodę, <xref:System.Security.SecureString.AppendChar%2A> aby dodać do niej tablicę znaków.  
  
 [!code-cpp[System.Security.SecureString.Ctor#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/cpp/Ctor2.cpp#2)]
 [!code-csharp[System.Security.SecureString.Ctor#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/cs/Ctor2.cs#2)]
 [!code-vb[System.Security.SecureString.Ctor#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/vb/ctor2.vb#2)]  
  
 Poniższy przykład tworzy <xref:System.Security.SecureString> obiekt z wartości <xref:System.String> obiektu.  
  
 [!code-cpp[System.Security.SecureString.Ctor#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/cpp/Ctor3.cpp#3)]
 [!code-csharp[System.Security.SecureString.Ctor#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/cs/Ctor3.cs#3)]
 [!code-vb[System.Security.SecureString.Ctor#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/vb/Ctor3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">Wystąpił błąd podczas ochrony lub nieochrony wartości tego wystąpienia.</exception>
        <exception cref="T:System.NotSupportedException">Ta operacja nie jest obsługiwana na tej platformie.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SecureString (char* value, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(char* value, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.#ctor(System.Char*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SecureString(char* value, int length);" />
      <MemberSignature Language="F#" Value="new System.Security.SecureString : nativeptr&lt;char&gt; * int -&gt; System.Security.SecureString" Usage="new System.Security.SecureString (value, length)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;netcore-3.0;netstandard-2.1">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="value" Type="System.Char*" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">Wskaźnik do tablicy <see cref="T:System.Char" /> obiektów.</param>
        <param name="length">Liczba elementów <paramref name="value" /> do uwzględnienia w nowym wystąpieniu.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Security.SecureString" /> klasy z <see cref="T:System.Char" /> podtabeli obiektów.  
  
Ten konstruktor nie jest zgodny ze specyfikacją CLS. Alternatywa zgodna ze specyfikacją <see cref="M:System.Security.SecureString.#ctor" />CLS ma wartość.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor inicjuje nowy <xref:System.Security.SecureString> obiekt do liczby `value` znaków określonych przez `length`; wartość wystąpienia jest zaszyfrowana.  
  
 W C#programie ten konstruktor jest zdefiniowany tylko w kontekście niebezpiecznego kodu.  
  
   
  
## Examples  
 Poniższy przykład tworzy wystąpienie nowego <xref:System.Security.SecureString> obiektu, przekazując jego konstruktora wskaźnik do tablicy znaków.  
  
 [!code-cpp[System.Security.SecureString.Ctor2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.security.securestring.ctor2/cpp/ctor1.cpp#1)]
 [!code-csharp[System.Security.SecureString.Ctor2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.security.securestring.ctor2/cs/ctor1.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="value" />jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="length" />jest mniejsza od zera lub większa niż 65 536.</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">Wystąpił błąd podczas ochrony lub nieochrony wartości tego bezpiecznego ciągu.</exception>
        <exception cref="T:System.NotSupportedException">Ta operacja nie jest obsługiwana na tej platformie.</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">Wymaga pełnego zaufania do bezpośredniego obiektu wywołującego. Ten element członkowski nie może być używany przez częściowo zaufany lub przejrzysty kod.</permission>
      </Docs>
    </Member>
    <Member MemberName="AppendChar">
      <MemberSignature Language="C#" Value="public void AppendChar (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendChar(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.AppendChar(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendChar (c As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendChar(char c);" />
      <MemberSignature Language="F#" Value="member this.AppendChar : char -&gt; unit" Usage="secureString.AppendChar c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptions</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c">Znak do dołączenia do tego bezpiecznego ciągu.</param>
        <summary>Dołącza znak na końcu bieżącego bezpiecznego ciągu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli implementacja używa mechanizmu ochrony, takiego jak szyfrowanie, wartość tego bezpiecznego ciągu (jeśli istnieje) nie jest chroniona; `c` jest dołączany, a następnie nowa wartość bezpiecznego ciągu jest ponownie chroniona.  
  
   
  
## Examples  
 W poniższym przykładzie <xref:System.Security.SecureString.AppendChar%2A>pokazano, jak metody, <xref:System.Security.SecureString.RemoveAt%2A> <xref:System.Security.SecureString.InsertAt%2A>, <xref:System.Security.SecureString.SetAt%2A>, i <xref:System.Security.SecureString.Clear%2A> wpływają na wartość <xref:System.Security.SecureString> obiektu.  
  
 [!code-cpp[SecureString.xAt#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xAt/CPP/SecureString.xAt.cpp#1)]
 [!code-csharp[SecureString.xAt#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xAt/CS/xat.cs#1)]
 [!code-vb[SecureString.xAt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xAt/VB/xat.vb#1)]  
  
 W poniższym przykładzie pokazano, jak <xref:System.Security.SecureString.AppendChar%2A> metody <xref:System.Security.SecureString.RemoveAt%2A> i mogą być używane do zbierania znaków w haśle.  
  
 [!code-cpp[SecureString.xChar#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xChar/CPP/SecureString.xChar.cpp#1)]
 [!code-csharp[SecureString.xChar#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xChar/CS/xchar.cs#1)]
 [!code-vb[SecureString.xChar#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xChar/VB/xchar.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Ten bezpieczny ciąg został już usunięty.</exception>
        <exception cref="T:System.InvalidOperationException">Ten bezpieczny ciąg jest tylko do odczytu.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Wykonanie tej operacji spowodowałoby, że długość tego ciągu bezpiecznego przekracza 65 536 znaków.</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">Wystąpił błąd podczas ochrony lub nieochrony wartości tego bezpiecznego ciągu.</exception>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberSignature Language="F#" Value="member this.Clear : unit -&gt; unit" Usage="secureString.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Usuwa wartość bieżącego bezpiecznego ciągu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Pamięć komputera, która zawiera wartość tego bezpiecznego ciągu, jest zerowa, a następnie długość wartości tego bezpiecznego ciągu jest równa zero.  
  
   
  
## Examples  
 W poniższym przykładzie <xref:System.Security.SecureString.AppendChar%2A>pokazano, jak metody, <xref:System.Security.SecureString.RemoveAt%2A> <xref:System.Security.SecureString.InsertAt%2A>, <xref:System.Security.SecureString.SetAt%2A>, i <xref:System.Security.SecureString.Clear%2A> wpływają na wartość <xref:System.Security.SecureString> obiektu.  
  
 [!code-cpp[SecureString.xAt#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xAt/CPP/SecureString.xAt.cpp#1)]
 [!code-csharp[SecureString.xAt#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xAt/CS/xat.cs#1)]
 [!code-vb[SecureString.xAt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xAt/VB/xat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Ten bezpieczny ciąg został już usunięty.</exception>
        <exception cref="T:System.InvalidOperationException">Ten bezpieczny ciąg jest tylko do odczytu.</exception>
        <altmember cref="P:System.Security.SecureString.Length" />
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public System.Security.SecureString Copy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Security.SecureString Copy() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.Copy" />
      <MemberSignature Language="VB.NET" Value="Public Function Copy () As SecureString" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Security::SecureString ^ Copy();" />
      <MemberSignature Language="F#" Value="member this.Copy : unit -&gt; System.Security.SecureString" Usage="secureString.Copy " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.SecureString</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Tworzy kopię bieżącego bezpiecznego ciągu.</summary>
        <returns>Duplikat tego bezpiecznego ciągu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli wystąpienie <xref:System.Security.SecureString> obiektu jest oznaczone jako tylko do odczytu, kopia tego wystąpienia nie będzie tylko do odczytu.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Ten bezpieczny ciąg został już usunięty.</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">Wystąpił błąd podczas ochrony lub nieochrony wartości tego bezpiecznego ciągu.</exception>
        <altmember cref="M:System.Security.SecureString.MakeReadOnly" />
        <altmember cref="M:System.Security.SecureString.IsReadOnly" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="secureString.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwalnia wszystkie zasoby używane przez bieżący <see cref="T:System.Security.SecureString" /> obiekt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda zapisuje binarne zera do przydzieloną pamięci, która zawiera wartość tego <xref:System.Security.SecureString> obiektu, a następnie zwalnia przydzieloną pamięć. <xref:System.Security.SecureString.Dispose%2A>  
  
 Aby uzyskać więcej informacji, zobacz [odzyskiwanie pamięci](~/docs/standard/garbage-collection/index.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertAt">
      <MemberSignature Language="C#" Value="public void InsertAt (int index, char c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InsertAt(int32 index, char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.InsertAt(System.Int32,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InsertAt (index As Integer, c As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InsertAt(int index, char c);" />
      <MemberSignature Language="F#" Value="member this.InsertAt : int * char -&gt; unit" Usage="secureString.InsertAt (index, c)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptions</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="index">Pozycja indeksu, w której <paramref name="c" /> został wstawiony parametr.</param>
        <param name="c">Znak do wstawienia.</param>
        <summary>Wstawia znak w tym bezpiecznym ciągu w podanej pozycji indeksu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Indeks jest liczony od zera. pierwszy znak w tym bezpiecznym ciągu znajduje się na pozycji indeksu zero.  
  
 Jeśli implementacja używa mechanizmu ochrony, takiego jak szyfrowanie, wartość bezpiecznego ciągu (jeśli istnieje) nie jest chroniona; `c` jest wstawiany w określonej pozycji indeksu, a następnie nowa wartość jest ponownie chroniona. Metoda daje takie same wyniki <xref:System.Security.SecureString.AppendChar%2A> jak metoda, która wstawia znak na końcu `index` bezpiecznego ciągu <xref:System.Security.SecureString.InsertAt%2A> , jeśli parametr jest ustawiony na długość tego wystąpienia. <xref:System.Security.SecureString.InsertAt%2A>  
  
   
  
## Examples  
 W poniższym przykładzie <xref:System.Security.SecureString.AppendChar%2A>pokazano, jak metody, <xref:System.Security.SecureString.RemoveAt%2A> <xref:System.Security.SecureString.InsertAt%2A>, <xref:System.Security.SecureString.SetAt%2A>, i <xref:System.Security.SecureString.Clear%2A> wpływają na wartość <xref:System.Security.SecureString> obiektu.  
  
 [!code-cpp[SecureString.xAt#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xAt/CPP/SecureString.xAt.cpp#1)]
 [!code-csharp[SecureString.xAt#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xAt/CS/xat.cs#1)]
 [!code-vb[SecureString.xAt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xAt/VB/xat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Ten bezpieczny ciąg został już usunięty.</exception>
        <exception cref="T:System.InvalidOperationException">Ten bezpieczny ciąg jest tylko do odczytu.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" />jest mniejsza od zera lub większa niż długość tego bezpiecznego ciągu.  
  
—lub— 
Wykonanie tej operacji spowodowałoby, że długość tego ciągu bezpiecznego przekracza 65 536 znaków.</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">Wystąpił błąd podczas ochrony lub nieochrony wartości tego bezpiecznego ciągu.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsReadOnly() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public Function IsReadOnly () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsReadOnly();" />
      <MemberSignature Language="F#" Value="member this.IsReadOnly : unit -&gt; bool" Usage="secureString.IsReadOnly " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Wskazuje, czy ten bezpieczny ciąg jest oznaczony jako tylko do odczytu.</summary>
        <returns><see langword="true" />Jeśli ten bezpieczny ciąg jest oznaczony jako tylko do odczytu; w przeciwnym razie. <see langword="false" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy wystąpienie <xref:System.Security.SecureString> jest oznaczone jako tylko do odczytu <xref:System.Security.SecureString.MakeReadOnly%2A> przez metodę, wszelkie próby zmodyfikowania wartości wystąpienia zgłaszają <xref:System.InvalidOperationException>. Użyj metody <xref:System.Security.SecureString.IsReadOnly%2A> , aby sprawdzić, czy <xref:System.Security.SecureString> jest tylko do odczytu przed próbą zmodyfikowania.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Ten bezpieczny ciąg został już usunięty.</exception>
        <altmember cref="M:System.Security.SecureString.MakeReadOnly" />
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public int Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Length" />
      <MemberSignature Language="DocId" Value="P:System.Security.SecureString.Length" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Length As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Length { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Length : int" Usage="System.Security.SecureString.Length" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera liczbę znaków w bieżącym bezpiecznym ciągu.</summary>
        <value>Liczba <see cref="T:System.Char" /> obiektów w tym bezpiecznym ciągu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.SecureString.Length%2A> Właściwość zwraca<xref:System.Char> liczbę obiektów w tym wystąpieniu, a nie liczbę znaków Unicode. Znak Unicode może być reprezentowany przez więcej niż jeden <xref:System.Char> obiekt.  
  
 Maksymalna długość <xref:System.Security.SecureString> wystąpienia to 65 536 znaków.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Ten bezpieczny ciąg został już usunięty.</exception>
      </Docs>
    </Member>
    <Member MemberName="MakeReadOnly">
      <MemberSignature Language="C#" Value="public void MakeReadOnly ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MakeReadOnly() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.MakeReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public Sub MakeReadOnly ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MakeReadOnly();" />
      <MemberSignature Language="F#" Value="member this.MakeReadOnly : unit -&gt; unit" Usage="secureString.MakeReadOnly " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Powoduje, że wartość tekstowa tego bezpiecznego ciągu jest tylko do odczytu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.SecureString> Zainicjuj wartość tekstową wystąpienia klasy <xref:System.Security.SecureString.%23ctor%2A> z konstruktorami i <xref:System.Security.SecureString.Clear%2A>zmodyfikuj wartość przy użyciu metod, <xref:System.Security.SecureString.RemoveAt%2A>, <xref:System.Security.SecureString.SetAt%2A>, <xref:System.Security.SecureString.InsertAt%2A>i <xref:System.Security.SecureString.AppendChar%2A> .  
  
 Po dokonaniu ostatecznych modyfikacji Użyj <xref:System.Security.SecureString.MakeReadOnly%2A> metody, aby zmienić wartość wystąpienia na niezmienne (tylko do odczytu). Gdy wartość zostanie oznaczona jako tylko do odczytu, jakakolwiek kolejna próba jego modyfikacji wygeneruje <xref:System.InvalidOperationException>.  
  
 Efekt wywołania <xref:System.Security.SecureString.MakeReadOnly%2A> jest trwały, <xref:System.Security.SecureString> ponieważ Klasa nie zapewnia żadnych środków, aby ponownie zmodyfikować bezpieczny ciąg. Użyj metody <xref:System.Security.SecureString.IsReadOnly%2A> , aby sprawdzić, czy <xref:System.Security.SecureString> wystąpienie jest tylko do odczytu.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano, jak <xref:System.Security.SecureString.AppendChar%2A> metody <xref:System.Security.SecureString.RemoveAt%2A> i mogą być używane do zbierania znaków w haśle. Po zebraniu hasła jest ono wykonywane tylko do odczytu.  
  
 [!code-cpp[SecureString.xChar#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xChar/CPP/SecureString.xChar.cpp#1)]
 [!code-csharp[SecureString.xChar#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xChar/CS/xchar.cs#1)]
 [!code-vb[SecureString.xChar#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xChar/VB/xchar.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Ten bezpieczny ciąg został już usunięty.</exception>
        <altmember cref="M:System.Security.SecureString.IsReadOnly" />
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAt (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAt(int index);" />
      <MemberSignature Language="F#" Value="member this.RemoveAt : int -&gt; unit" Usage="secureString.RemoveAt index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptions</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Pozycja indeksu znaku w tym bezpiecznym ciągu.</param>
        <summary>Usuwa znak z podanej pozycji indeksu z tego bezpiecznego ciągu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Indeks jest liczony od zera. pierwszy znak w tym wystąpieniu znajduje się na pozycji indeksu zero.  
  
 Jeśli implementacja używa mechanizmu ochrony, takiego jak szyfrowanie, wartość tego bezpiecznego ciągu (jeśli istnieje) nie jest chroniona; znak z podanej pozycji indeksu zostanie usunięty; następnie nowa wartość jest ponownie chroniona.  
  
   
  
## Examples  
 W poniższym przykładzie <xref:System.Security.SecureString.AppendChar%2A>pokazano, jak metody, <xref:System.Security.SecureString.RemoveAt%2A> <xref:System.Security.SecureString.InsertAt%2A>, <xref:System.Security.SecureString.SetAt%2A>, i <xref:System.Security.SecureString.Clear%2A> wpływają na wartość <xref:System.Security.SecureString> obiektu.  
  
 [!code-cpp[SecureString.xAt#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xAt/CPP/SecureString.xAt.cpp#1)]
 [!code-csharp[SecureString.xAt#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xAt/CS/xat.cs#1)]
 [!code-vb[SecureString.xAt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xAt/VB/xat.vb#1)]  
  
 W poniższym przykładzie pokazano, jak <xref:System.Security.SecureString.AppendChar%2A> metody <xref:System.Security.SecureString.RemoveAt%2A> i mogą być używane do zbierania znaków w haśle.  
  
 [!code-cpp[SecureString.xChar#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xChar/CPP/SecureString.xChar.cpp#1)]
 [!code-csharp[SecureString.xChar#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xChar/CS/xchar.cs#1)]
 [!code-vb[SecureString.xChar#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xChar/VB/xchar.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Ten bezpieczny ciąg został już usunięty.</exception>
        <exception cref="T:System.InvalidOperationException">Ten bezpieczny ciąg jest tylko do odczytu.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" />jest mniejsza od zera lub większa lub równa długości tego bezpiecznego ciągu.</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">Wystąpił błąd podczas ochrony lub nieochrony wartości tego bezpiecznego ciągu.</exception>
      </Docs>
    </Member>
    <Member MemberName="SetAt">
      <MemberSignature Language="C#" Value="public void SetAt (int index, char c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAt(int32 index, char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.SetAt(System.Int32,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAt (index As Integer, c As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetAt(int index, char c);" />
      <MemberSignature Language="F#" Value="member this.SetAt : int * char -&gt; unit" Usage="secureString.SetAt (index, c)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netstandard-2.1">
          <AttributeName>System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptions</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="index">Pozycja indeksu istniejącego znaku w tym bezpiecznym ciągu</param>
        <param name="c">Znak, który zastępuje istniejący znak.</param>
        <summary>Zastępuje istniejący znak w podanej pozycji indeksu innym znakiem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Indeks jest liczony od zera. pierwszy znak w tym wystąpieniu znajduje się na pozycji indeksu zero.  
  
 Jeśli implementacja używa mechanizmu ochrony, takiego jak szyfrowanie, wartość bezpiecznego ciągu (jeśli istnieje) nie jest chroniona; `c` jest przypisany do określonej pozycji indeksu, a następnie nowa wartość jest ponownie chroniona.  
  
   
  
## Examples  
 W poniższym przykładzie <xref:System.Security.SecureString.AppendChar%2A>pokazano, jak metody, <xref:System.Security.SecureString.RemoveAt%2A> <xref:System.Security.SecureString.InsertAt%2A>, <xref:System.Security.SecureString.SetAt%2A>, i <xref:System.Security.SecureString.Clear%2A> wpływają na wartość <xref:System.Security.SecureString> obiektu.  
  
 [!code-cpp[SecureString.xAt#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xAt/CPP/SecureString.xAt.cpp#1)]
 [!code-csharp[SecureString.xAt#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xAt/CS/xat.cs#1)]
 [!code-vb[SecureString.xAt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xAt/VB/xat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">Ten bezpieczny ciąg został już usunięty.</exception>
        <exception cref="T:System.InvalidOperationException">Ten bezpieczny ciąg jest tylko do odczytu.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" />jest mniejsza od zera lub większa lub równa długości tego bezpiecznego ciągu.</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">Wystąpił błąd podczas ochrony lub nieochrony wartości tego bezpiecznego ciągu.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
