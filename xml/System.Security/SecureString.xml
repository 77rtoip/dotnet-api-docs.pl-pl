<Type Name="SecureString" FullName="System.Security.SecureString">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ca9e6292de45ea29ed4d85aa782ecf814e58da00" />
    <Meta Name="ms.sourcegitcommit" Value="0e1f030650a307c745ee84ed547ef858acaea587" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="11/29/2018" />
    <Meta Name="ms.locfileid" Value="52611645" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class SecureString : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed SecureString extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Security.SecureString" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class SecureString&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class SecureString sealed : IDisposable" />
  <TypeSignature Language="F#" Value="type SecureString = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Security.SecureString</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime.InteropServices</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Reprezentuje tekst, który powinien być poufny, takie jak, usuwając je z pamięci komputera, gdy nie będą już potrzebne. Klasa ta nie może być dziedziczona.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  

> [!IMPORTANT]
>  Nie zaleca się używanie `SecureString` klasy w przypadku nowych wdrożeń. Aby uzyskać więcej informacji, zobacz [SecureString nie powinna być używana](https://github.com/dotnet/platform-compat/blob/master/docs/DE0001.md) w witrynie GitHub.

 <xref:System.Security.SecureString> jest typu ciąg, który jest miarą zabezpieczeń. Próbuje uniknąć przechowywania ciągów potencjalnie poufnych w pamięci procesu jako zwykły tekst.  (Ograniczenia, jednak zobaczyć [jak bezpieczne są SecureString?](#HowSecure) sekcji.) Wartość wystąpienia <xref:System.Security.SecureString> są chronione automatycznie przy użyciu mechanizmu obsługiwane z odpowiedniej platformy podczas inicjowania wystąpienia lub po zmodyfikowaniu wartości. Renderowania wystąpienia niezmienne i unikanie dalszych modyfikacji przez wywołanie aplikacji <xref:System.Security.SecureString.MakeReadOnly%2A> metody.  
  
 Maksymalna długość <xref:System.Security.SecureString> wystąpienia, wynosi 65 536 znaków.  
  
> [!IMPORTANT]
>  Ten typ implementuje <xref:System.IDisposable> interfejsu. Po zakończeniu używania wystąpienia typu, należy usunąć ją bezpośrednio lub pośrednio. Do usuwania tego typu, należy wywołać jej <xref:System.IDisposable.Dispose%2A> method in Class metoda `try` / `catch` bloku. Aby usunąć ją pośrednio, użyj konstrukcją języka pierwszej klasy takiej jak `using` (w języku C#) lub `Using` (w języku Visual Basic). Aby uzyskać więcej informacji, zobacz sekcję "Przy użyciu obiektu który implementuje interfejs IDisposable" w <xref:System.IDisposable> interfejsu.  
  
 <xref:System.Security.SecureString> Klasy i jej elementów członkowskich nie są widoczne dla modelu COM. Aby uzyskać więcej informacji, zobacz <xref:System.Runtime.InteropServices.ComVisibleAttribute>.  
  
 W tej sekcji:  
  
 [Ciąg programu vs. SecureString](#vsString)   
 [Operacje SecureString](#Ops)   
 [SecureString i współdziałanie](#interop)   
 [Jak bezpieczne jest SecureString?](#HowSecure)  
  
<a name="vsString"></a>   
## <a name="string-versus-securestring"></a>Ciąg, a SecureString  
 Wystąpienie <xref:System.String?displayProperty=nameWithType> klasy jest zarówno, które są niezmienne i gdy nie jest już potrzebny, nie może być programowo zaplanowany do wyrzucania elementów bezużytecznych; wystąpienie jest tylko do odczytu po jej utworzeniu, a nie jest możliwe do przewidzenia, kiedy staną się wystąpienia usunięty z pamięci komputera. Ponieważ <xref:System.String?displayProperty=nameWithType> wystąpienia są niezmienne, operacje, które są wyświetlane, aby zmodyfikować istniejące wystąpienie utworzyć jej kopię do manipulowania. W związku z tym jeśli <xref:System.String> obiekt zawiera poufne informacje, takie jak hasła, numer karty kredytowej lub dane osobowe, istnieje ryzyko, informacje mogą uzyskać dostęp, gdy jest używane, ponieważ aplikacja nie może usunąć dane z pamięci komputera .  
  
 A <xref:System.Security.SecureString> obiektu jest podobny do <xref:System.String> obiektu, że ma ona wartość tekstową. Jednak wartość <xref:System.Security.SecureString> obiekt został przypięty w pamięci, może używać mechanizm ochrony, takie jak szyfrowania, obsługiwanego przez system operacyjny, można modyfikować, dopóki aplikacja oznacza je jako tylko do odczytu i może być usunięty z pamięci komputera przez wywołanie Twojej aplikacji <xref:System.Security.SecureString.Dispose%2A> metody lub przez moduł odśmiecania pamięci środowiska .NET Framework.  
  
 Omówienie ograniczeń <xref:System.Security.SecureString> klasy, zobacz [jak bezpieczne są SecureString?](#HowSecure) sekcji.  
  
 [Powrót do początku](#top)  
  
<a name="Ops"></a>   
## <a name="securestring-operations"></a>Operacje SecureString  
 <xref:System.Security.SecureString> Klasa zawiera elementy członkowskie, które umożliwiają wykonywanie następujących czynności:  
  
 Utwórz wystąpienie <xref:System.Security.SecureString> obiektu  
 Można utworzyć wystąpienia <xref:System.Security.SecureString> obiektu przez wywołanie jego bezparametrowy konstruktor.  
  
 Dodaj znaki <xref:System.Security.SecureString> obiektu  
 Można dodać pojedynczy znak w czasie <xref:System.Security.SecureString> obiektu przez wywołanie jego <xref:System.Security.SecureString.AppendChar%2A> lub <xref:System.Security.SecureString.InsertAt%2A> metody.  
  
> [!IMPORTANT]
>  A <xref:System.Security.SecureString> nigdy nie można utworzyć obiektu z <xref:System.String>, ponieważ dane poufne już podlega skutków trwałość pamięci niezmienne <xref:System.String> klasy. Najlepszym sposobem konstruowania <xref:System.Security.SecureString> obiekt jest z niezarządzanego źródła znaku w czasie, takie jak <xref:System.Console.ReadKey%2A?displayProperty=nameWithType> metody.  
  
 Usuń znaki z <xref:System.Security.SecureString> obiektu  
 Możesz zastąpić pojedynczy znak, wywołując <xref:System.Security.SecureString.SetAt%2A> metody, usunąć pojedynczy znak, wywołując <xref:System.Security.SecureString.RemoveAt%2A> metody lub Usuń wszystkie znaki z <xref:System.Security.SecureString> wystąpienie przez wywołanie metody <xref:System.Security.SecureString.Clear%2A> metody.  
  
 Wprowadź <xref:System.Security.SecureString> obiektu tylko do odczytu  
 Po zdefiniowaniu ciągu, <xref:System.Security.SecureString> reprezentuje obiekt, należy wywołać jej <xref:System.Security.SecureString.MakeReadOnly%2A> metodę, aby utworzyć ciąg tylko do odczytu.  
  
 Uzyskaj informacje <xref:System.Security.SecureString> obiektu  
 <xref:System.Security.SecureString> Klasa ma tylko dwa elementy członkowskie, które dostarczają informacje na temat ciągu: jego <xref:System.Security.SecureString.Length%2A> właściwość, która wskazuje liczbę jednostek kodu zakodowane w formacie UTF16 w ciągu; i <xref:System.Security.SecureString.IsReadOnly%2A>, metody, która wskazuje, czy to wystąpienie tylko do odczytu.  
  
 Zwolnij pamięć przydzielona programowi <xref:System.Security.SecureString> wystąpienia  
 Ponieważ <xref:System.Security.SecureString> implementuje <xref:System.IDisposable> interfejsu zwolnienie pamięci przez wywołanie metody <xref:System.Security.SecureString.Dispose%2A> metody.  
  
 <xref:System.Security.SecureString> Klasa nie ma elementów członkowskich, które inspekcja, porównaj lub konwertowania wartości <xref:System.Security.SecureString>. Brak takich elementów członkowskich pomaga w ochronie wartość wystąpienia z przypadkowego lub celowego zagrożeń. Użyć odpowiednich członków grupy <xref:System.Runtime.InteropServices.Marshal?displayProperty=nameWithType> klasy, takie jak <xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A> metody do manipulowania wartością <xref:System.Security.SecureString> obiektu.  
  
 Często używa biblioteki klas programu .NET Framework <xref:System.Security.SecureString> wystąpień w następujący sposób:  
  
-   Aby podać informacje hasła do procesu za pomocą <xref:System.Diagnostics.ProcessStartInfo> struktury lub przez wywołanie przeciążenia <xref:System.Diagnostics.Process.Start%2A?displayProperty=nameWithType> metodę, która ma parametr typu <xref:System.Security.SecureString>.  
  
-   Aby zapewnić informacje o haśle sieci przez wywołanie metody <xref:System.Net.NetworkCredential> konstruktora klasy, która ma parametr typu <xref:System.Security.SecureString> lub za pomocą <xref:System.Net.NetworkCredential.SecurePassword%2A?displayProperty=nameWithType> właściwości.  
  
-   Aby zapewnić informacje hasła dla uwierzytelniania programu SQL Server, wywołując <xref:System.Data.SqlClient.SqlCredential.%23ctor%2A?displayProperty=nameWithType> konstruktora lub pobieranie wartości <xref:System.Data.SqlClient.SqlCredential.Password%2A?displayProperty=nameWithType> właściwości.  
  
-   Aby przekazać ciąg do kodu niezarządzanego. Aby uzyskać więcej informacji, zobacz [SecureString i międzyoperacyjne](#interop) sekcji.  
  
 [Powrót do początku](#top)  
  
<a name="interop"></a>   
## <a name="securestring-and-interop"></a>SecureString i współdziałanie  
 Ponieważ system operacyjny nie obsługuje bezpośrednio <xref:System.Security.SecureString>, należy przekonwertować wartość <xref:System.Security.SecureString> obiektu na typ ciągu wymagane przed przekazaniem ciąg do metody natywnej.  <xref:System.Runtime.InteropServices.Marshal> Klasy zawiera pięć metod, które to zrobić:  
  
-   <xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A?displayProperty=nameWithType>, która konwertuje <xref:System.Security.SecureString> ciągu wartości ciągu binarnego (BSTR) rozpoznawany przez model COM.  
  
-   <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A?displayProperty=nameWithType> i <xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A?displayProperty=nameWithType>, których kopia <xref:System.Security.SecureString> wartość na ciąg ANSI w niezarządzanej pamięci ciągu.  
  
-   <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=nameWithType> i <xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=nameWithType>, których kopia <xref:System.Security.SecureString> wartość na ciąg Unicode w niezarządzanej pamięci ciągu.  
  
 Każda z tych metod tworzy ciąg w postaci zwykłego tekstu w pamięci niezarządzanej. Jest odpowiedzialny za deweloperowi się od zera i zwalniają pamięci, jak jest już potrzebne. Każdy ciąg konwersji i pamięć alokacji metod ma odpowiedniej metody do zera się i zwalniają ilość przydzielonej pamięci:  
  
|Metoda alokacji i konwersji|Zero i free — metoda|  
|--------------------------------------|--------------------------|  
|<xref:System.Runtime.InteropServices.Marshal.SecureStringToBSTR%2A?displayProperty=nameWithType>|<xref:System.Runtime.InteropServices.Marshal.ZeroFreeBSTR%2A?displayProperty=nameWithType>|  
|<xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemAnsi%2A?displayProperty=nameWithType>|<xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemAnsi%2A?displayProperty=nameWithType>|  
|<xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=nameWithType>|<xref:System.Runtime.InteropServices.Marshal.ZeroFreeCoTaskMemUnicode%2A?displayProperty=nameWithType>|  
|<xref:System.Runtime.InteropServices.Marshal.SecureStringToGlobalAllocAnsi%2A?displayProperty=nameWithType>|<xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocAnsi%2A?displayProperty=nameWithType>|  
|<xref:System.Runtime.InteropServices.Marshal.SecureStringToCoTaskMemUnicode%2A?displayProperty=nameWithType>|<xref:System.Runtime.InteropServices.Marshal.ZeroFreeGlobalAllocUnicode%2A?displayProperty=nameWithType>|  
  
 [Powrót do początku](#top)  
  
<a name="HowSecure"></a>   
## <a name="how-secure-is-securestring"></a>Jak bezpieczne jest SecureString?  
 Po utworzeniu prawidłowo, <xref:System.Security.SecureString> wystąpienia chroni więcej danych niż <xref:System.String>. Podczas tworzenia ciągu ze źródła znaku w czasie, <xref:System.String> tworzy wiele pośredni w pamięci, natomiast <xref:System.Security.SecureString> tworzy pojedyncze wystąpienie.  Wyrzucanie elementów bezużytecznych z <xref:System.String> obiektów jest niedeterministyczny. Ponadto, ponieważ jego pamięci nie jest przypięty, moduł zbierający elementy bezużyteczne spowoduje, że dodatkowe kopie <xref:System.String> wartości, gdy przenoszenie i kompaktowanie pamięci. Z kolei ilość pamięci przydzielona do <xref:System.Security.SecureString> obiektu jest przypięty i pamięci może zostać uwolniony przez wywołanie metody <xref:System.Security.SecureString.Dispose%2A> metody.  
  
 Mimo, że dane przechowywane w <xref:System.Security.SecureString> wystąpienia jest bezpieczniejszy niż danych przechowywanych w <xref:System.String> wystąpienia, istnieją ograniczenia znaczące jak bezpieczne <xref:System.Security.SecureString> to wystąpienie. Należą do nich następujące elementy:  
  
 Platforma  
 W systemie operacyjnym Windows, zawartość <xref:System.Security.SecureString> tablicy znaków wewnętrznego wystąpienia są szyfrowane. Jednakże czy ze względu na Brak interfejsów API lub problemów z zarządzaniem kluczami, szyfrowanie nie jest dostępne na wszystkich platformach. Ze względu na tę zależność platformy <xref:System.Security.SecureString> nie szyfruje wewnętrznej pamięci masowej na platformy inne niż Windows. Innych technik są używane na tych platformach zapewnia dodatkową ochronę.
  
 Czas trwania  
 Nawet wtedy, gdy <xref:System.Security.SecureString> wdrożenia jest w stanie korzystać z szyfrowania, zwykły tekst przypisany do <xref:System.Security.SecureString> wystąpienie może zostać uwidoczniona w różnym czasie:  
  
-   Ponieważ Windows nie oferują implementacji bezpieczny ciąg, na poziomie systemu operacyjnego, programu .NET Framework jest nadal ma można przekonwertować wartości bezpieczny ciąg na jego reprezentację w postaci zwykłego tekstu, aby można było go używać.  
  
-   Zawsze, gdy wartość bezpieczny ciąg jest modyfikowany przez metody takie jak <xref:System.Security.SecureString.AppendChar%2A> lub <xref:System.Security.SecureString.RemoveAt%2A>, muszą być odszyfrowane (czyli przekonwertowany tył na zwykły tekst), zmodyfikować i ponownie szyfrowane.  
  
-   Jeśli bezpieczny ciąg jest używany w wywołaniu międzyoperacyjności, musi zostać przekonwertowana na ciąg ANSI, ciąg Unicode lub ciąg binarny (BSTR). Aby uzyskać więcej informacji, zobacz [SecureString i międzyoperacyjne](#interop) sekcji.  
  
 Przedział czasu, dla którego <xref:System.Security.SecureString> wartość tego wystąpienia jest widoczna tylko został skrócony w porównaniu z <xref:System.String> klasy.  
  
 Porównanie użycie magazynów  
 Ogólnie rzecz biorąc <xref:System.Security.SecureString> klasa definiuje mechanizm magazynu wartości ciągów, które powinny być chronione lub poufne. Poza programem .NET Framework sam mechanizm użycia obsługuje jednak <xref:System.Security.SecureString>. Oznacza to, że bezpieczny ciąg, muszą zostać skonwertowane do użytecznej postaci (zwykle w formie zwykłego tekstu), który może zostać rozpoznany przez jego element docelowy i że odszyfrowywania i konwersji musi wystąpić w przestrzeni.  
  
 Ogólne <xref:System.Security.SecureString> jest bezpieczniejszy niż <xref:System.String> ponieważ ogranicza narażenie poufnych dane. Jednak te ciągi nadal jest narażona na jakikolwiek proces lub operacja, która ma dostęp do pamięci, takich jak złośliwe proces uruchomiony na komputerze-hoście, zrzut procesu lub plik wymiany widoczne dla użytkownika. Zamiast używania <xref:System.Security.SecureString> do ochrony haseł, zalecaną alternatywą jest użycie nieprzezroczyste dojście do poświadczeń, które są przechowywane poza procesem.  
  
 [Powrót do początku](#top)  
  
   
  
## Examples  
 Poniższy przykład pokazuje sposób użycia <xref:System.Security.SecureString> zabezpieczyć hasła użytkownika do użycia jako poświadczenie, aby uruchomić nowego procesu.  
  
 [!code-csharp[System.Security.SecureString.Ctor#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/cs/ctor4.cs#4)]
 [!code-vb[System.Security.SecureString.Ctor#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/vb/ctor4.vb#4)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Runtime.InteropServices.ComVisibleAttribute" />
    <altmember cref="T:System.Runtime.InteropServices.Marshal" />
    <altmember cref="T:System.Runtime.ConstrainedExecution.CriticalFinalizerObject" />
    <altmember cref="T:System.IDisposable" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Security.SecureString" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SecureString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SecureString();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Security.SecureString" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 W poniższym przykładzie użyto wartość domyślna (lub bezparametrowego) konstruktora, aby utworzyć <xref:System.Security.SecureString> obiektu. Następnie wywołuje <xref:System.Security.SecureString.AppendChar%2A> metodę, aby dodać tablicę znaków do niego.  
  
 [!code-cpp[System.Security.SecureString.Ctor#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/cpp/Ctor2.cpp#2)]
 [!code-csharp[System.Security.SecureString.Ctor#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/cs/Ctor2.cs#2)]
 [!code-vb[System.Security.SecureString.Ctor#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/vb/ctor2.vb#2)]  
  
 Poniższy przykład tworzy <xref:System.Security.SecureString> obiektu na podstawie wartości <xref:System.String> obiektu.  
  
 [!code-cpp[System.Security.SecureString.Ctor#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/cpp/Ctor3.cpp#3)]
 [!code-csharp[System.Security.SecureString.Ctor#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/cs/Ctor3.cs#3)]
 [!code-vb[System.Security.SecureString.Ctor#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.SecureString.Ctor/vb/Ctor3.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.Cryptography.CryptographicException">Wystąpił błąd podczas ochrony lub wyłączeniu ochrony wartość tego wystąpienia.</exception>
        <exception cref="T:System.NotSupportedException">Ta operacja nie jest obsługiwana na tej platformie.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public SecureString (char* value, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(char* value, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.#ctor(System.Char*,System.Int32)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; SecureString(char* value, int length);" />
      <MemberSignature Language="F#" Value="new System.Security.SecureString : nativeptr&lt;char&gt; * int -&gt; System.Security.SecureString" Usage="new System.Security.SecureString (value, length)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2">
          <AttributeName>System.CLSCompliant(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="value" Type="System.Char*" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="value">Wskaźnik do tablicy <see cref="T:System.Char" /> obiektów.</param>
        <param name="length">Liczba elementów <paramref name="value" /> do uwzględnienia w nowym wystąpieniu.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Security.SecureString" /> klasy z podtablicę o długości od <see cref="T:System.Char" /> obiektów.  
  
Ten konstruktor nie jest zgodny ze specyfikacją CLS. Alternatywa zgodna ze specyfikacją CLS to <see cref="M:System.Security.SecureString.#ctor" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor inicjuje nową <xref:System.Security.SecureString> obiekt, aby liczba znaków w `value` określony przez `length`; wartość wystąpienia jest następnie szyfrowana.  
  
 W języku C# ten konstruktor jest zdefiniowane tylko w kontekście niebezpieczny kod.  
  
   
  
## Examples  
 Poniższy przykład tworzy nowy <xref:System.Security.SecureString> obiektu przez przekazanie jego konstruktorowi wskaźnika do tablicy znaków.  
  
 [!code-cpp[System.Security.SecureString.Ctor2#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.security.securestring.ctor2/cpp/ctor1.cpp#1)]
 [!code-csharp[System.Security.SecureString.Ctor2#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.security.securestring.ctor2/cs/ctor1.cs#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="value" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="length" /> jest mniejsza od zera lub większa niż 65536.</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">Wystąpił błąd podczas ochrony lub wyłączeniu ochrony wartość to bezpieczny ciąg.</exception>
        <exception cref="T:System.NotSupportedException">Ta operacja nie jest obsługiwana na tej platformie.</exception>
        <permission cref="T:System.Security.SecurityCriticalAttribute">Wymaga pełnego zaufania do bezpośredniego obiektu wywołującego. Ten element członkowski nie może być używany przez częściowo zaufany lub przejrzysty kod.</permission>
      </Docs>
    </Member>
    <Member MemberName="AppendChar">
      <MemberSignature Language="C#" Value="public void AppendChar (char c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AppendChar(char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.AppendChar(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AppendChar (c As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AppendChar(char c);" />
      <MemberSignature Language="F#" Value="member this.AppendChar : char -&gt; unit" Usage="secureString.AppendChar c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptions</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="c">Znak do dołączenia do tego bezpieczny ciąg.</param>
        <summary>Dołącza znak na końcu bieżącego bezpieczny ciąg.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli implementacja używa mechanizmu ochrony, takie jak szyfrowanie, wartość to bezpieczny ciąg, jeśli istnieje, jest niechroniony; `c` jest dołączany; nowa wartość ciągu bezpiecznego jest ponownego włączenia jego ochrony.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano sposób, w jaki <xref:System.Security.SecureString.AppendChar%2A>, <xref:System.Security.SecureString.InsertAt%2A>, <xref:System.Security.SecureString.RemoveAt%2A>, <xref:System.Security.SecureString.SetAt%2A>, i <xref:System.Security.SecureString.Clear%2A> metody wpływa na wartość <xref:System.Security.SecureString> obiektu.  
  
 [!code-cpp[SecureString.xAt#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xAt/CPP/SecureString.xAt.cpp#1)]
 [!code-csharp[SecureString.xAt#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xAt/CS/xat.cs#1)]
 [!code-vb[SecureString.xAt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xAt/VB/xat.vb#1)]  
  
 W poniższym przykładzie pokazano sposób, w jaki <xref:System.Security.SecureString.AppendChar%2A> i <xref:System.Security.SecureString.RemoveAt%2A> metody mogą być używane do zbierania znaków w haśle.  
  
 [!code-cpp[SecureString.xChar#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xChar/CPP/SecureString.xChar.cpp#1)]
 [!code-csharp[SecureString.xChar#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xChar/CS/xchar.cs#1)]
 [!code-vb[SecureString.xChar#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xChar/VB/xchar.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">To bezpieczny ciąg został już usunięty.</exception>
        <exception cref="T:System.InvalidOperationException">Ten ciąg bezpieczne jest tylko do odczytu.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Wykonanie tej operacji spowodowałoby, długość to bezpieczny ciąg przekracza 65 536 znaków.</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">Wystąpił błąd podczas ochrony lub wyłączeniu ochrony wartość to bezpieczny ciąg.</exception>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Clear();" />
      <MemberSignature Language="F#" Value="member this.Clear : unit -&gt; unit" Usage="secureString.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Usuwa wartość bieżącej bezpieczny ciąg.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jest zeroed pamięci komputera, który zawiera wartość to bezpieczny ciąg, a następnie długość wartości to bezpieczny ciąg ma wartość zero.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano sposób, w jaki <xref:System.Security.SecureString.AppendChar%2A>, <xref:System.Security.SecureString.InsertAt%2A>, <xref:System.Security.SecureString.RemoveAt%2A>, <xref:System.Security.SecureString.SetAt%2A>, i <xref:System.Security.SecureString.Clear%2A> metody wpływa na wartość <xref:System.Security.SecureString> obiektu.  
  
 [!code-cpp[SecureString.xAt#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xAt/CPP/SecureString.xAt.cpp#1)]
 [!code-csharp[SecureString.xAt#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xAt/CS/xat.cs#1)]
 [!code-vb[SecureString.xAt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xAt/VB/xat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">To bezpieczny ciąg został już usunięty.</exception>
        <exception cref="T:System.InvalidOperationException">Ten ciąg bezpieczne jest tylko do odczytu.</exception>
        <altmember cref="P:System.Security.SecureString.Length" />
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public System.Security.SecureString Copy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Security.SecureString Copy() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.Copy" />
      <MemberSignature Language="VB.NET" Value="Public Function Copy () As SecureString" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Security::SecureString ^ Copy();" />
      <MemberSignature Language="F#" Value="member this.Copy : unit -&gt; System.Security.SecureString" Usage="secureString.Copy " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Security.SecureString</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Tworzy kopię bieżącego bezpieczny ciąg.</summary>
        <returns>Duplikat tego bezpieczny ciąg.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli wystąpienie <xref:System.Security.SecureString> jest oznaczony jako tylko do odczytu, kopią tego wystąpienia nie będą tylko do odczytu.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">To bezpieczny ciąg został już usunięty.</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">Wystąpił błąd podczas ochrony lub wyłączeniu ochrony wartość to bezpieczny ciąg.</exception>
        <altmember cref="M:System.Security.SecureString.MakeReadOnly" />
        <altmember cref="M:System.Security.SecureString.IsReadOnly" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="secureString.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwalnia wszelkie zasoby używane przez bieżące <see cref="T:System.Security.SecureString" /> obiektu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.SecureString.Dispose%2A> Metoda zapisuje binarne zer ilość przydzielonej pamięci, która zawiera wartość tego <xref:System.Security.SecureString> obiektu, a następnie zwalnia ilość przydzielonej pamięci.  
  
 Aby uzyskać więcej informacji, zobacz [wyrzucania elementów bezużytecznych](~/docs/standard/garbage-collection/index.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InsertAt">
      <MemberSignature Language="C#" Value="public void InsertAt (int index, char c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void InsertAt(int32 index, char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.InsertAt(System.Int32,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Sub InsertAt (index As Integer, c As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void InsertAt(int index, char c);" />
      <MemberSignature Language="F#" Value="member this.InsertAt : int * char -&gt; unit" Usage="secureString.InsertAt (index, c)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptions</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="index">Indeks pozycji, gdzie parametr <paramref name="c" /> zostanie wstawiona.</param>
        <param name="c">Znak do wstawienia.</param>
        <summary>Wstawia znak, w tym bezpiecznego ciągu w położeniu określonego indeksu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Indeks jest liczony od zera; pierwszy znak w tym bezpiecznego ciągu jest pozycja indeksu zero.  
  
 Jeśli implementacja używa mechanizmu ochrony, takie jak szyfrowanie, wartość bezpieczny ciąg, jeśli istnieje, jest niechroniony; `c` jest wstawiany w określonym indeksie położeniu; nowa wartość jest ponownego włączenia jego ochrony. <xref:System.Security.SecureString.InsertAt%2A> Metoda daje ten sam wynik jako <xref:System.Security.SecureString.AppendChar%2A> metody, która wstawia znak na końcu bezpieczny ciąg, jeśli `index` parametru <xref:System.Security.SecureString.InsertAt%2A> jest równa długości tego wystąpienia.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano sposób, w jaki <xref:System.Security.SecureString.AppendChar%2A>, <xref:System.Security.SecureString.InsertAt%2A>, <xref:System.Security.SecureString.RemoveAt%2A>, <xref:System.Security.SecureString.SetAt%2A>, i <xref:System.Security.SecureString.Clear%2A> metody wpływa na wartość <xref:System.Security.SecureString> obiektu.  
  
 [!code-cpp[SecureString.xAt#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xAt/CPP/SecureString.xAt.cpp#1)]
 [!code-csharp[SecureString.xAt#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xAt/CS/xat.cs#1)]
 [!code-vb[SecureString.xAt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xAt/VB/xat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">To bezpieczny ciąg został już usunięty.</exception>
        <exception cref="T:System.InvalidOperationException">Ten ciąg bezpieczne jest tylko do odczytu.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> jest mniejsza od zera, lub większa niż długość to bezpieczny ciąg.  
  
—lub— 
Wykonanie tej operacji spowodowałoby, długość to bezpieczny ciąg przekracza 65 536 znaków.</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">Wystąpił błąd podczas ochrony lub wyłączeniu ochrony wartość to bezpieczny ciąg.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsReadOnly() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public Function IsReadOnly () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsReadOnly();" />
      <MemberSignature Language="F#" Value="member this.IsReadOnly : unit -&gt; bool" Usage="secureString.IsReadOnly " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Wskazuje, czy to bezpieczny ciąg jest oznaczony jako tylko do odczytu.</summary>
        <returns>
          <see langword="true" /> Jeśli to bezpieczny ciąg jest oznaczony jako tylko do odczytu. w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Po wystąpieniu typu <xref:System.Security.SecureString> jest oznaczony jako tylko do odczytu przez <xref:System.Security.SecureString.MakeReadOnly%2A> metody, dowolny próbuje zmodyfikować wartość zgłasza wystąpienia <xref:System.InvalidOperationException>. Użyj <xref:System.Security.SecureString.IsReadOnly%2A> metody do testowania czy <xref:System.Security.SecureString> jest tylko do odczytu, przed podjęciem próby zmodyfikowania go.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">To bezpieczny ciąg został już usunięty.</exception>
        <altmember cref="M:System.Security.SecureString.MakeReadOnly" />
      </Docs>
    </Member>
    <Member MemberName="Length">
      <MemberSignature Language="C#" Value="public int Length { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Length" />
      <MemberSignature Language="DocId" Value="P:System.Security.SecureString.Length" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Length As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Length { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Length : int" Usage="System.Security.SecureString.Length" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>get: System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera liczbę znaków w bieżącym bezpieczny ciąg.</summary>
        <value>Liczba <see cref="T:System.Char" /> obiektów w tym bezpieczny ciąg.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.SecureString.Length%2A> Właściwość zwraca liczbę <xref:System.Char> obiektów w tym wystąpieniu, nie liczbę znaków Unicode. Znak Unicode, może być reprezentowany przez więcej niż jedną <xref:System.Char> obiektu.  
  
 Maksymalna długość <xref:System.Security.SecureString> wystąpienia, wynosi 65 536 znaków.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">To bezpieczny ciąg został już usunięty.</exception>
      </Docs>
    </Member>
    <Member MemberName="MakeReadOnly">
      <MemberSignature Language="C#" Value="public void MakeReadOnly ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MakeReadOnly() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.MakeReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public Sub MakeReadOnly ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MakeReadOnly();" />
      <MemberSignature Language="F#" Value="member this.MakeReadOnly : unit -&gt; unit" Usage="secureString.MakeReadOnly " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Powoduje, że wartość tekstu tego bezpieczny ciąg tylko do odczytu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Inicjowanie wartości tekstowej wystąpienia <xref:System.Security.SecureString> klasy <xref:System.Security.SecureString.%23ctor%2A> konstruktorów i zmodyfikuj wartości z <xref:System.Security.SecureString.Clear%2A>, <xref:System.Security.SecureString.RemoveAt%2A>, <xref:System.Security.SecureString.SetAt%2A>, <xref:System.Security.SecureString.InsertAt%2A>, i <xref:System.Security.SecureString.AppendChar%2A> metody.  
  
 Po dokonaniu modyfikacji końcowego użyj <xref:System.Security.SecureString.MakeReadOnly%2A> metodę, aby wprowadzić wartość wystąpienia niezmienne (tylko do odczytu). Po wartość został oznaczony jako tylko do odczytu, dalsze próby go zmodyfikować zgłasza <xref:System.InvalidOperationException>.  
  
 Efekt wywoływania <xref:System.Security.SecureString.MakeReadOnly%2A> jest nieodwracalna ponieważ <xref:System.Security.SecureString> klasy zapewnia sposób umożliwić bezpieczny ciąg można modyfikować ponownie. Użyj <xref:System.Security.SecureString.IsReadOnly%2A> metodę, aby sprawdzić, czy wystąpienie <xref:System.Security.SecureString> jest tylko do odczytu.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano sposób, w jaki <xref:System.Security.SecureString.AppendChar%2A> i <xref:System.Security.SecureString.RemoveAt%2A> metody mogą być używane do zbierania znaków w haśle. Po zebraniu hasło, staje się tylko do odczytu.  
  
 [!code-cpp[SecureString.xChar#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xChar/CPP/SecureString.xChar.cpp#1)]
 [!code-csharp[SecureString.xChar#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xChar/CS/xchar.cs#1)]
 [!code-vb[SecureString.xChar#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xChar/VB/xchar.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">To bezpieczny ciąg został już usunięty.</exception>
        <altmember cref="M:System.Security.SecureString.IsReadOnly" />
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAt (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveAt(int index);" />
      <MemberSignature Language="F#" Value="member this.RemoveAt : int -&gt; unit" Usage="secureString.RemoveAt index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptions</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Indeks znaków w tym bezpiecznego ciągu.</param>
        <summary>Usuwa znak na pozycji indeksu określony z tym bezpieczny ciąg.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Indeks jest liczony od zera; pierwszy znak w tym wystąpieniu jest na pozycji indeksu zero.  
  
 Jeśli implementacja używa mechanizmu ochrony, takie jak szyfrowanie, wartość to bezpieczny ciąg, jeśli istnieje, jest niechroniony; znak w miejscu określonym indeksie zostaną usunięte; następnie nowa wartość jest ponownego włączenia jego ochrony.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano sposób, w jaki <xref:System.Security.SecureString.AppendChar%2A>, <xref:System.Security.SecureString.InsertAt%2A>, <xref:System.Security.SecureString.RemoveAt%2A>, <xref:System.Security.SecureString.SetAt%2A>, i <xref:System.Security.SecureString.Clear%2A> metody wpływa na wartość <xref:System.Security.SecureString> obiektu.  
  
 [!code-cpp[SecureString.xAt#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xAt/CPP/SecureString.xAt.cpp#1)]
 [!code-csharp[SecureString.xAt#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xAt/CS/xat.cs#1)]
 [!code-vb[SecureString.xAt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xAt/VB/xat.vb#1)]  
  
 W poniższym przykładzie pokazano sposób, w jaki <xref:System.Security.SecureString.AppendChar%2A> i <xref:System.Security.SecureString.RemoveAt%2A> metody mogą być używane do zbierania znaków w haśle.  
  
 [!code-cpp[SecureString.xChar#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xChar/CPP/SecureString.xChar.cpp#1)]
 [!code-csharp[SecureString.xChar#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xChar/CS/xchar.cs#1)]
 [!code-vb[SecureString.xChar#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xChar/VB/xchar.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">To bezpieczny ciąg został już usunięty.</exception>
        <exception cref="T:System.InvalidOperationException">Ten ciąg bezpieczne jest tylko do odczytu.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> jest mniejsza od zera, lub w większe niż lub równa długości to bezpieczny ciąg.</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">Wystąpił błąd podczas ochrony lub wyłączeniu ochrony wartość to bezpieczny ciąg.</exception>
      </Docs>
    </Member>
    <Member MemberName="SetAt">
      <MemberSignature Language="C#" Value="public void SetAt (int index, char c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetAt(int32 index, char c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.SecureString.SetAt(System.Int32,System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetAt (index As Integer, c As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetAt(int index, char c);" />
      <MemberSignature Language="F#" Value="member this.SetAt : int * char -&gt; unit" Usage="secureString.SetAt (index, c)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Security.SecureString</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
          <AttributeName>System.Runtime.ExceptionServices.HandleProcessCorruptedStateExceptions</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="c" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="index">Pozycja indeksu istniejącego znaku w tym bezpieczny ciąg</param>
        <param name="c">Znak, który zastępuje istniejący znak.</param>
        <summary>Zamienia istniejący znak na pozycji indeksu określonego innemu znakowi.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Indeks jest liczony od zera; pierwszy znak w tym wystąpieniu jest na pozycji indeksu zero.  
  
 Jeśli implementacja używa mechanizmu ochrony, takie jak szyfrowanie, wartość bezpieczny ciąg, jeśli istnieje, jest niechroniony; `c` jest przypisany do położenia w określonym indeksie; nowa wartość jest ponownego włączenia jego ochrony.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano sposób, w jaki <xref:System.Security.SecureString.AppendChar%2A>, <xref:System.Security.SecureString.InsertAt%2A>, <xref:System.Security.SecureString.RemoveAt%2A>, <xref:System.Security.SecureString.SetAt%2A>, i <xref:System.Security.SecureString.Clear%2A> metody wpływa na wartość <xref:System.Security.SecureString> obiektu.  
  
 [!code-cpp[SecureString.xAt#1](~/samples/snippets/cpp/VS_Snippets_CLR/SecureString.xAt/CPP/SecureString.xAt.cpp#1)]
 [!code-csharp[SecureString.xAt#1](~/samples/snippets/csharp/VS_Snippets_CLR/SecureString.xAt/CS/xat.cs#1)]
 [!code-vb[SecureString.xAt#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/SecureString.xAt/VB/xat.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">To bezpieczny ciąg został już usunięty.</exception>
        <exception cref="T:System.InvalidOperationException">Ten ciąg bezpieczne jest tylko do odczytu.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> jest mniejsza od zera, lub w większe niż lub równa długości to bezpieczny ciąg.</exception>
        <exception cref="T:System.Security.Cryptography.CryptographicException">Wystąpił błąd podczas ochrony lub wyłączeniu ochrony wartość to bezpieczny ciąg.</exception>
      </Docs>
    </Member>
  </Members>
</Type>