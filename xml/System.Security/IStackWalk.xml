<Type Name="IStackWalk" FullName="System.Security.IStackWalk">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="1eaa08d07e66ac33a9918473cbffbf7ad349aac6" />
    <Meta Name="ms.sourcegitcommit" Value="d877ae76e9e11799bf919379507239e2c4072742" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="08/09/2018" />
    <Meta Name="ms.locfileid" Value="39864328" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IStackWalk" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IStackWalk" />
  <TypeSignature Language="DocId" Value="T:System.Security.IStackWalk" />
  <TypeSignature Language="VB.NET" Value="Public Interface IStackWalk" />
  <TypeSignature Language="C++ CLI" Value="public interface class IStackWalk" />
  <TypeSignature Language="F#" Value="type IStackWalk = interface" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Security.Permissions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Zarządza przeszukiwania stosu, która określa, czy wszystkie obiekty wywołujące w stosie wywołań ma wymaganych uprawnień dostępu do chronionego zasobu.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Częściowo zaufany kod zawsze stanowi zagrożenie dla bezpieczeństwa. Czasami manipulacji do wykonania czynności w imieniu złośliwy kod, który nie ma uprawnień dostępu do zasobu. W ten sposób złośliwy kod może osiągnąć wyższy dostępu zabezpieczeń nie powinien być dozwolony.  
  
 Środowisko uruchomieniowe języka wspólnego pomaga w ochronie kodu zarządzanego z te ataki, uruchamiając przeszukiwania stosu dla wszystkich wywołań. Przeszukiwania stosu wymaga, że cały kod w stosie wywołań ma uprawnienie do dostępu do chronionego zasobu. Ponieważ kod próby ataku zawsze będzie zawarty w stosie wywołań, będzie mogła przekroczyć własnych uprawnień zabezpieczeń.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Assert">
      <MemberSignature Language="C#" Value="public void Assert ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Assert() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.IStackWalk.Assert" />
      <MemberSignature Language="VB.NET" Value="Public Sub Assert ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Assert();" />
      <MemberSignature Language="F#" Value="abstract member Assert : unit -&gt; unit" Usage="iStackWalk.Assert " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Potwierdza kod wywołujący dostęp zasobu wskazywanego przez bieżący obiekt uprawnienia, nawet wtedy, gdy wyżej w stosie wywołań nie przyznano uprawnień dostępu do zasobu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wywoływanie <xref:System.Security.IStackWalk.Assert%2A> zatrzymuje sprawdzenie uprawnień na obiekty wywołujące wyżej w stosie wywołań. W związku z tym nawet jeśli te obiekty wywołujące nie masz wymaganych uprawnień, ich mogą nadal uzyskiwać dostęp do zasobów. Potwierdzenie obowiązuje tylko wtedy, gdy kod wywołuje <xref:System.Security.IStackWalk.Assert%2A> przekazuje sprawdzenia zabezpieczeń dla uprawnień, że jest ona potwierdzające.  
  
 Wywołanie <xref:System.Security.IStackWalk.Assert%2A> jest efektywne, dopóki kod wywołujący powróci do obiektu wywołującego lub do momentu kolejne wywołanie <xref:System.Security.IStackWalk.Assert%2A> renderuje potwierdzenia poprzedniej nieefektywne. Ponadto <xref:System.Security.CodeAccessPermission.RevertAssert%2A> lub <xref:System.Security.CodeAccessPermission.RevertAll%2A> usuwa oczekujące <xref:System.Security.IStackWalk.Assert%2A>.  
  
 <xref:System.Security.IStackWalk.Assert%2A> jest ignorowany dla uprawnień nie udzielić, ponieważ żądanie dla tego uprawnienia nie powiedzie się. Jednak jeśli niżej w stosie wywołań kod wywołuje <xref:System.Security.IStackWalk.Demand%2A> dla tego uprawnienia <xref:System.Security.SecurityException> jest zgłaszany, gdy przeszukiwania stosu osiągnie kod, który próbowano wywołania <xref:System.Security.IStackWalk.Assert%2A>. Dzieje się tak, ponieważ kod, który wywołuje <xref:System.Security.IStackWalk.Assert%2A> nie udzielono uprawnień, mimo że aplikacja próbowała <xref:System.Security.IStackWalk.Assert%2A> go.  
  
> [!CAUTION]
>  Ponieważ wywołanie <xref:System.Security.IStackWalk.Assert%2A> usuwa wymóg, że wszystkie możesz pisać kod w łańcuch wywołań muszą mieć uprawnienie dostępu do określonego zasobu, można otworzyć się luk w zabezpieczeniach, jeśli niepoprawnie lub niewłaściwie. W związku z tym należy używać ostrożnie doskonałe.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">Kod wywołujący nie ma <see cref="F:System.Security.Permissions.SecurityPermissionFlag.Assertion" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Demand">
      <MemberSignature Language="C#" Value="public void Demand ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Demand() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.IStackWalk.Demand" />
      <MemberSignature Language="VB.NET" Value="Public Sub Demand ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Demand();" />
      <MemberSignature Language="F#" Value="abstract member Demand : unit -&gt; unit" Usage="iStackWalk.Demand " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Określa w czasie wykonywania, czy wszystkie obiekty wywołujące w stosie wywołań przyznano uprawnienia określone przez bieżący obiekt uprawnień.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda jest zwykle używana przez bezpieczne biblioteki, aby upewnić się, że obiekty wywołujące ma uprawnienia do uzyskania dostępu do zasobu. Na przykład wywołuje klasę pliku w bibliotece bezpiecznych klasy <xref:System.Security.IStackWalk.Demand%2A> dla niezbędnych <xref:System.Security.Permissions.FileIOPermission> przed przystąpieniem do wykonywania operacji na pliku żądanego przez obiekt wywołujący.  
  
 Uprawnienia kod, który wywołuje tę metodę, nie będą badane; Sprawdzanie zaczyna się od bezpośredniego obiektu wywołującego kod i przechodzi w górę stosu. <xref:System.Security.IStackWalk.Demand%2A> powiedzie się tylko wtedy, gdy nie <xref:System.Security.SecurityException> jest wywoływane.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">Obiekt wywołujący wyżej w stosie wywołań nie ma uprawnienia określone przez bieżący obiekt uprawnień.  Obiekt wywołujący na stosie wywołań została wywołana - lub - <see cref="M:System.Security.IStackWalk.Deny" /> dla bieżącego obiektu uprawnień.</exception>
      </Docs>
    </Member>
    <Member MemberName="Deny">
      <MemberSignature Language="C#" Value="public void Deny ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Deny() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.IStackWalk.Deny" />
      <MemberSignature Language="VB.NET" Value="Public Sub Deny ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Deny();" />
      <MemberSignature Language="F#" Value="abstract member Deny : unit -&gt; unit" Usage="iStackWalk.Deny " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Powoduje, że każdy <see cref="M:System.Security.IStackWalk.Demand" /> dla bieżącego obiektu, który przechodzi przez kod wywołujący, aby zakończyć się niepowodzeniem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda uniemożliwia wywołującym wyżej w stosie wywołań uzyskiwania dostępu do chronionego zasobu za pomocą kodu, który wywołuje tę metodę, nawet wtedy, gdy te obiekty wywołujące przyznano uprawnienia dostępu do niego. Stos wywołań jest zazwyczaj reprezentowany jako rośnie, tak, aby metody wyżej w stosie wywołań mogą wywoływać metod niższe w stosie wywołań.  
  
 <xref:System.Security.IStackWalk.Deny%2A> można ograniczyć odpowiedzialność programisty lub pomagają zapobiegać luk w zabezpieczeniach przypadkowe, ponieważ zapobiega metodę, która wywołuje <xref:System.Security.IStackWalk.Deny%2A> używany w celu dostępu do zasobów chronionych przez odmowy uprawnień. Wywołuje metodę <xref:System.Security.IStackWalk.Deny%2A> na uprawnienia i jeśli <xref:System.Security.IStackWalk.Demand%2A> dla tego uprawnienia, zostanie wywołany przez obiekt wywołujący niżej w stosie wywołań, sprawdzanie zabezpieczeń nie powiedzie się po osiągnięciu <xref:System.Security.IStackWalk.Deny%2A>.  
  
 <xref:System.Security.IStackWalk.Deny%2A> jest ignorowany dla uprawnień nie udzielić, ponieważ żądanie dla tego uprawnienia nie powiedzie się.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Nie można przesłonić tę metodę.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="PermitOnly">
      <MemberSignature Language="C#" Value="public void PermitOnly ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PermitOnly() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.IStackWalk.PermitOnly" />
      <MemberSignature Language="VB.NET" Value="Public Sub PermitOnly ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PermitOnly();" />
      <MemberSignature Language="F#" Value="abstract member PermitOnly : unit -&gt; unit" Usage="iStackWalk.PermitOnly " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Powoduje, że każdy <see cref="M:System.Security.IStackWalk.Demand" /> dla wszystkich obiektów z wyjątkiem bieżącym przechodzący przez kod wywołujący, aby zakończyć się niepowodzeniem, nawet wtedy, gdy kod wyżej w stosie wywołań ma uprawnienia dostępu do innych zasobów.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.IStackWalk.PermitOnly%2A> jest podobny do <xref:System.Security.IStackWalk.Deny%2A>, oba powodują przeszukiwań stosu niepowodzeniem, jeśli w przeciwnym razie powiedzie. Różnica jest to, że <xref:System.Security.IStackWalk.Deny%2A> określa uprawnienia, które spowoduje przejście przez stos zakończyć się niepowodzeniem, ale <xref:System.Security.IStackWalk.PermitOnly%2A> określa tylko uprawnienia, które nie powodują przejście przez stos nie powiedzie się. Wywołaj tę metodę, aby upewnić się, że Twój kod może służyć do dostępu do określonych zasobów.  
  
 <xref:System.Security.IStackWalk.PermitOnly%2A> jest ignorowany dla uprawnień nie udzielić, ponieważ żądanie dla tego uprawnienia nie powiedzie się. Jednak jeśli kod niżej w wywołanie stosu później wywołania <xref:System.Security.IStackWalk.Demand%2A> dla tego uprawnienia <xref:System.Security.SecurityException> jest zgłaszany, gdy przeszukiwania stosu osiągnie kod, który próbowano wywołania <xref:System.Security.IStackWalk.PermitOnly%2A>. Jest to spowodowane kod, który wywołuje <xref:System.Security.IStackWalk.PermitOnly%2A> nie udzielono uprawnień, mimo że ona wywoływana <xref:System.Security.IStackWalk.PermitOnly%2A> dla tego uprawnienia. Stos wywołań jest zazwyczaj reprezentowany jako rośnie, tak, aby metody wyżej w stosie wywołań mogą wywoływać metod niższe w stosie wywołań.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>