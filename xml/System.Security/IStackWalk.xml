<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="IStackWalk.xml" source-language="en-US" target-language="pl-PL">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac5b37ff083eff27618aa07c0a744562f3f8a613708.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">b37ff083eff27618aa07c0a744562f3f8a613708</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Security.IStackWalk">
          <source>Manages the stack walk that determines whether all callers in the call stack have the required permissions to access a protected resource.</source>
          <target state="translated">Zarządza przeszukiwania stosu, który określa, czy wszystkie obiekty wywołujące w stosie wywołań ma uprawnienia wymagane do uzyskania dostępu do chronionego zasobu.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.IStackWalk">
          <source>Partially trusted code always presents a security risk.</source>
          <target state="translated">Częściowo zaufany kod zawsze stanowi zagrożenie bezpieczeństwa.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.IStackWalk">
          <source>It can sometimes be manipulated to perform actions on behalf of malicious code that does not have permission to access a resource.</source>
          <target state="translated">Czasami manipulacji do wykonywania zadań w imieniu złośliwy kod, który nie ma uprawnień do uzyskania dostępu do zasobu.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.IStackWalk">
          <source>In this way, malicious code can achieve higher security access than it should be allowed.</source>
          <target state="translated">W ten sposób złośliwego kodu można osiągnąć wyższy dostępu zabezpieczeń nie powinno być dozwolone.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.IStackWalk">
          <source>The common language runtime helps protect managed code from these attacks by running a stack walk on all calls.</source>
          <target state="translated">Środowisko uruchomieniowe języka wspólnego pomaga w ochronie kodu zarządzanego z takiego ataku, uruchamiając przeszukiwania stosu dla wszystkich wywołań.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.IStackWalk">
          <source>The stack walk requires that all code in the call stack has permission to access a protected resource.</source>
          <target state="translated">Podczas przeszukiwana stosu wymaga czy całego kodu w stosie wywołań ma uprawnienie dostępu do chronionego zasobu.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Security.IStackWalk">
          <source>Because the code attempting the attack will always be somewhere in the call stack, it will be unable to exceed its own security permissions.</source>
          <target state="translated">Ponieważ kod próby ataku zawsze będzie gdzieś w stosie wywołań, będzie mogła przekroczyć własnych uprawnień zabezpieczeń.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="M:System.Security.IStackWalk.Assert">
          <source>Asserts that the calling code can access the resource identified by the current permission object, even if callers higher in the stack have not been granted permission to access the resource.</source>
          <target state="translated">Potwierdza, że kod wywołujący ma dostęp do zasobu identyfikowana na podstawie bieżącego obiektu uprawnienia, nawet wtedy, gdy wyżej w stosie wywołań nie przyznano uprawnień dostępu do zasobu.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.IStackWalk.Assert">
          <source>Calling <ph id="ph1">&lt;xref:System.Security.IStackWalk.Assert%2A&gt;</ph> stops the permission check on callers higher in the call stack.</source>
          <target state="translated">Wywoływanie <ph id="ph1">&lt;xref:System.Security.IStackWalk.Assert%2A&gt;</ph> zatrzymuje sprawdzenie uprawnień na obiekty wywołujące wyżej w stosie wywołań.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.IStackWalk.Assert">
          <source>Therefore, even if these callers do not have the requisite permissions, they can still access resources.</source>
          <target state="translated">W związku z tym nawet jeśli te obiekty wywołujące nie ma wymaganych uprawnień, ich mogą nadal uzyskiwać dostęp do zasobów.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.IStackWalk.Assert">
          <source>An assertion is effective only if the code that calls <ph id="ph1">&lt;xref:System.Security.IStackWalk.Assert%2A&gt;</ph> passes the security check for the permission that it is asserting.</source>
          <target state="translated">Potwierdzenia jest efektywne tylko wtedy, gdy kod, który wywołuje <ph id="ph1">&lt;xref:System.Security.IStackWalk.Assert%2A&gt;</ph> przekazuje kontrola zabezpieczeń dla uprawnień, który jest ona potwierdzające.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.IStackWalk.Assert">
          <source>A call to <ph id="ph1">&lt;xref:System.Security.IStackWalk.Assert%2A&gt;</ph> is effective until the calling code returns to its caller or until a subsequent call to <ph id="ph2">&lt;xref:System.Security.IStackWalk.Assert%2A&gt;</ph> renders the previous assertion ineffective.</source>
          <target state="translated">Wywołanie <ph id="ph1">&lt;xref:System.Security.IStackWalk.Assert%2A&gt;</ph> obowiązuje, dopóki kod wywołujący nie powróci do swojego obiektu wywołującego lub do czasu kolejne wywołanie <ph id="ph2">&lt;xref:System.Security.IStackWalk.Assert%2A&gt;</ph> renderuje potwierdzenia poprzedniej żadnego efektu.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.IStackWalk.Assert">
          <source>Also, <ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.RevertAssert%2A&gt;</ph> or <ph id="ph2">&lt;xref:System.Security.CodeAccessPermission.RevertAll%2A&gt;</ph> removes a pending <ph id="ph3">&lt;xref:System.Security.IStackWalk.Assert%2A&gt;</ph>.</source>
          <target state="translated">Ponadto <ph id="ph1">&lt;xref:System.Security.CodeAccessPermission.RevertAssert%2A&gt;</ph> lub <ph id="ph2">&lt;xref:System.Security.CodeAccessPermission.RevertAll%2A&gt;</ph> usuwa oczekujące <ph id="ph3">&lt;xref:System.Security.IStackWalk.Assert%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.IStackWalk.Assert">
          <source><ph id="ph1">&lt;xref:System.Security.IStackWalk.Assert%2A&gt;</ph> is ignored for a permission not granted because a demand for that permission will not succeed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.IStackWalk.Assert%2A&gt;</ph> jest ignorowany dla uprawnienia nie udzielić, ponieważ nie powiedzie się żądanie dla tego uprawnienia.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.IStackWalk.Assert">
          <source>However, if code lower on the call stack calls <ph id="ph1">&lt;xref:System.Security.IStackWalk.Demand%2A&gt;</ph> for that permission, a <ph id="ph2">&lt;xref:System.Security.SecurityException&gt;</ph> is thrown when the stack walk reaches the code that tried to call <ph id="ph3">&lt;xref:System.Security.IStackWalk.Assert%2A&gt;</ph>.</source>
          <target state="translated">Jednak jeśli niższy w stosie wywołań kod wywołuje <ph id="ph1">&lt;xref:System.Security.IStackWalk.Demand%2A&gt;</ph> dla tego uprawnienia <ph id="ph2">&lt;xref:System.Security.SecurityException&gt;</ph> jest generowany, gdy kod, który próbowano nawiązać połączenie osiągnie przeszukiwania stosu <ph id="ph3">&lt;xref:System.Security.IStackWalk.Assert%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.IStackWalk.Assert">
          <source>This happens because the code that called <ph id="ph1">&lt;xref:System.Security.IStackWalk.Assert%2A&gt;</ph> has not been granted the permission, even though it tried to <ph id="ph2">&lt;xref:System.Security.IStackWalk.Assert%2A&gt;</ph> it.</source>
          <target state="translated">Dzieje się tak, ponieważ kod, który wywołuje <ph id="ph1">&lt;xref:System.Security.IStackWalk.Assert%2A&gt;</ph> nie udzielono uprawnień, mimo że próby <ph id="ph2">&lt;xref:System.Security.IStackWalk.Assert%2A&gt;</ph> go.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.IStackWalk.Assert">
          <source>Because calling <ph id="ph1">&lt;xref:System.Security.IStackWalk.Assert%2A&gt;</ph> removes the requirement that all code in the call chain must be granted permission to access the specified resource, it can open up security vulnerabilities if used incorrectly or inappropriately.</source>
          <target state="translated">Ponieważ wywoływanie <ph id="ph1">&lt;xref:System.Security.IStackWalk.Assert%2A&gt;</ph> usuwa wymaganie, że wszystkie kodu w łańcuchu wywołań musi mieć uprawnienie dostępu do określonego zasobu, można go otwarcie luk w zabezpieczeniach użycie nieprawidłowo lub niewłaściwie.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.IStackWalk.Assert">
          <source>Therefore, it should be used with great caution.</source>
          <target state="translated">W związku z tym należy można używać z dużą ostrożność.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Security.IStackWalk.Assert">
          <source>The calling code does not have <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.Assertion" /&gt;</ph>.</source>
          <target state="translated">Kod wywołujący nie ma <ph id="ph1">&lt;see cref="F:System.Security.Permissions.SecurityPermissionFlag.Assertion" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Security.IStackWalk.Demand">
          <source>Determines at run time whether all callers in the call stack have been granted the permission specified by the current permission object.</source>
          <target state="translated">Określa w czasie wykonywania, czy wszystkie obiekty wywołujące w stosie wywołań przyznano uprawnienia określone przez bieżący obiekt uprawnień.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.IStackWalk.Demand">
          <source>This method is typically used by secure libraries to ensure that callers have permission to access a resource.</source>
          <target state="translated">Ta metoda jest używana zazwyczaj przez bezpieczne biblioteki, aby upewnić się, że obiekty wywołujące ma uprawnienia do uzyskania dostępu do zasobu.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.IStackWalk.Demand">
          <source>For example, a file class in a secure class library calls <ph id="ph1">&lt;xref:System.Security.IStackWalk.Demand%2A&gt;</ph> for the necessary <ph id="ph2">&lt;xref:System.Security.Permissions.FileIOPermission&gt;</ph> before performing a file operation requested by the caller.</source>
          <target state="translated">Na przykład wywołuje klasy pliku w bibliotece klas bezpiecznego <ph id="ph1">&lt;xref:System.Security.IStackWalk.Demand%2A&gt;</ph> dla niezbędnych <ph id="ph2">&lt;xref:System.Security.Permissions.FileIOPermission&gt;</ph> przed wykonaniem operacji na pliku żądanego przez obiekt wywołujący.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.IStackWalk.Demand">
          <source>The permissions of the code that calls this method are not examined; the check begins from the immediate caller of that code and proceeds up the stack.</source>
          <target state="translated">Uprawnienia kod, który wywołuje tę metodę, nie są sprawdzane; Sprawdzanie zaczyna się od bezpośredniego obiektu wywołującego kodu i jest przeprowadzane w górę stosu.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.IStackWalk.Demand">
          <source><ph id="ph1">&lt;xref:System.Security.IStackWalk.Demand%2A&gt;</ph> succeeds only if no <ph id="ph2">&lt;xref:System.Security.SecurityException&gt;</ph> is raised.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.IStackWalk.Demand%2A&gt;</ph> powiedzie się tylko wtedy, gdy nie <ph id="ph2">&lt;xref:System.Security.SecurityException&gt;</ph> jest wywoływane.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Security.IStackWalk.Demand">
          <source>A caller higher in the call stack does not have the permission specified by the current permission object.</source>
          <target state="translated">Obiekt wywołujący wyżej w stosie wywołań nie ma uprawnienia określone przez bieżący obiekt uprawnień.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" uid="M:System.Security.IStackWalk.Demand">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Security.IStackWalk.Demand">
          <source>A caller in the call stack has called <ph id="ph1">&lt;see cref="M:System.Security.IStackWalk.Deny" /&gt;</ph> on the current permission object.</source>
          <target state="translated">Obiekt wywołujący na stosie wywołań została wywołana <ph id="ph1">&lt;see cref="M:System.Security.IStackWalk.Deny" /&gt;</ph> dla bieżącego obiektu uprawnienia.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Security.IStackWalk.Deny">
          <source>Causes every <ph id="ph1">&lt;see cref="M:System.Security.IStackWalk.Demand" /&gt;</ph> for the current object that passes through the calling code to fail.</source>
          <target state="translated">Powoduje, że każdy <ph id="ph1">&lt;see cref="M:System.Security.IStackWalk.Demand" /&gt;</ph> dla bieżącego obiektu, który przechodzi przez kod wywołujący się niepowodzeniem.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.IStackWalk.Deny">
          <source>This method prevents callers higher in the call stack from accessing the protected resource through the code that calls this method, even if those callers have been granted permission to access it.</source>
          <target state="translated">Ta metoda uniemożliwia dostęp do chronionych zasobów za pośrednictwem kod, który wywołuje tę metodę, nawet w przypadku tych wywołań przyznano uprawnień dostępu do niego wywołań wyżej w stosie wywołań.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.IStackWalk.Deny">
          <source>The call stack is typically represented as growing down, so that methods higher in the call stack call methods lower in the call stack.</source>
          <target state="translated">Stos wywołań jest zazwyczaj reprezentowany jako rośnie, tak, aby metody wyżej w stosie wywołań wywoływać metody niższe w stosie wywołań.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.IStackWalk.Deny">
          <source><ph id="ph1">&lt;xref:System.Security.IStackWalk.Deny%2A&gt;</ph> can limit the liability of the programmer or help prevent accidental security vulnerabilities because it helps prevent the method that calls <ph id="ph2">&lt;xref:System.Security.IStackWalk.Deny%2A&gt;</ph> from being used to access the resource protected by the denied permission.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.IStackWalk.Deny%2A&gt;</ph> można ograniczyć odpowiedzialność programisty lub pomagać w zapobieganiu luk w zabezpieczeniach przypadkowe, ponieważ uniemożliwia metodę, która wywołuje <ph id="ph2">&lt;xref:System.Security.IStackWalk.Deny%2A&gt;</ph> z zasobów chronionych przez odmówiono uprawnień dostępu do użycia.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.IStackWalk.Deny">
          <source>If a method calls <ph id="ph1">&lt;xref:System.Security.IStackWalk.Deny%2A&gt;</ph> on a permission, and if a <ph id="ph2">&lt;xref:System.Security.IStackWalk.Demand%2A&gt;</ph> for that permission is invoked by a caller lower in the call stack, that security check will fail when it reaches the <ph id="ph3">&lt;xref:System.Security.IStackWalk.Deny%2A&gt;</ph>.</source>
          <target state="translated">Wywołuje metodę <ph id="ph1">&lt;xref:System.Security.IStackWalk.Deny%2A&gt;</ph> na uprawnienia, a jeśli <ph id="ph2">&lt;xref:System.Security.IStackWalk.Demand%2A&gt;</ph> dla tego uprawnienia jest wywoływany przez obiekt wywołujący niższe w stosie wywołań, sprawdzanie zabezpieczeń zakończy się niepowodzeniem, po osiągnięciu <ph id="ph3">&lt;xref:System.Security.IStackWalk.Deny%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.IStackWalk.Deny">
          <source><ph id="ph1">&lt;xref:System.Security.IStackWalk.Deny%2A&gt;</ph> is ignored for a permission not granted because a demand for that permission will not succeed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.IStackWalk.Deny%2A&gt;</ph> jest ignorowany dla uprawnienia nie udzielić, ponieważ nie powiedzie się żądanie dla tego uprawnienia.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.IStackWalk.Deny">
          <source>You cannot override this method.</source>
          <target state="translated">Nie można przesłonić tę metodę.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Security.IStackWalk.PermitOnly">
          <source>Causes every <ph id="ph1">&lt;see cref="M:System.Security.IStackWalk.Demand" /&gt;</ph> for all objects except the current one that passes through the calling code to fail, even if code higher in the call stack has been granted permission to access other resources.</source>
          <target state="translated">Powoduje, że każdy <ph id="ph1">&lt;see cref="M:System.Security.IStackWalk.Demand" /&gt;</ph> dla wszystkich obiektów z wyjątkiem aktualny plan, który przechodzi przez kod wywołujący się niepowodzeniem, nawet jeśli kodu w stosie wywołań ma uprawnienia dostępu do innych zasobów.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.IStackWalk.PermitOnly">
          <source><ph id="ph1">&lt;xref:System.Security.IStackWalk.PermitOnly%2A&gt;</ph> is similar to <ph id="ph2">&lt;xref:System.Security.IStackWalk.Deny%2A&gt;</ph>, in that both cause stack walks to fail when they would otherwise succeed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.IStackWalk.PermitOnly%2A&gt;</ph> przypomina <ph id="ph2">&lt;xref:System.Security.IStackWalk.Deny%2A&gt;</ph>, w tym zarówno spowodować przeszukiwań stosu się niepowodzeniem podczas ich w przeciwnym razie powiedzie się.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.IStackWalk.PermitOnly">
          <source>The difference is that <ph id="ph1">&lt;xref:System.Security.IStackWalk.Deny%2A&gt;</ph> specifies permissions that will cause the stack walk to fail, but <ph id="ph2">&lt;xref:System.Security.IStackWalk.PermitOnly%2A&gt;</ph> specifies the only permissions that do not cause the stack walk to fail.</source>
          <target state="translated">Różnica jest to, że <ph id="ph1">&lt;xref:System.Security.IStackWalk.Deny%2A&gt;</ph> określa uprawnienia, które spowoduje niepowodzenie przeszukiwania stosu, ale <ph id="ph2">&lt;xref:System.Security.IStackWalk.PermitOnly%2A&gt;</ph> określa tylko uprawnienia, które nie powodują przeszukiwania stosu się niepowodzeniem.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.IStackWalk.PermitOnly">
          <source>Call this method to ensure that your code can be used to access only the specified resources.</source>
          <target state="translated">Wywołanie tej metody, aby upewnić się, że kodu można uzyskać dostępu do określonych zasobów.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.IStackWalk.PermitOnly">
          <source><ph id="ph1">&lt;xref:System.Security.IStackWalk.PermitOnly%2A&gt;</ph> is ignored for a permission not granted because a demand for that permission will not succeed.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Security.IStackWalk.PermitOnly%2A&gt;</ph> jest ignorowany dla uprawnienia nie udzielić, ponieważ nie powiedzie się żądanie dla tego uprawnienia.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.IStackWalk.PermitOnly">
          <source>However, if code lower on the call stack later calls <ph id="ph1">&lt;xref:System.Security.IStackWalk.Demand%2A&gt;</ph> for that permission, a <ph id="ph2">&lt;xref:System.Security.SecurityException&gt;</ph> is thrown when the stack walk reaches the code that tried to call <ph id="ph3">&lt;xref:System.Security.IStackWalk.PermitOnly%2A&gt;</ph>.</source>
          <target state="translated">Jednak jeśli kod niższe w wywołaniu później stosu wywołań <ph id="ph1">&lt;xref:System.Security.IStackWalk.Demand%2A&gt;</ph> dla tego uprawnienia <ph id="ph2">&lt;xref:System.Security.SecurityException&gt;</ph> jest generowany, gdy kod, który próbowano nawiązać połączenie osiągnie przeszukiwania stosu <ph id="ph3">&lt;xref:System.Security.IStackWalk.PermitOnly%2A&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.IStackWalk.PermitOnly">
          <source>This is because the code that called <ph id="ph1">&lt;xref:System.Security.IStackWalk.PermitOnly%2A&gt;</ph> has not been granted the permission, even though it called <ph id="ph2">&lt;xref:System.Security.IStackWalk.PermitOnly%2A&gt;</ph> for that permission.</source>
          <target state="translated">Jest to spowodowane kod, który wywołuje <ph id="ph1">&lt;xref:System.Security.IStackWalk.PermitOnly%2A&gt;</ph> nie udzielono uprawnień, mimo że mu <ph id="ph2">&lt;xref:System.Security.IStackWalk.PermitOnly%2A&gt;</ph> dla tego uprawnienia.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Security.IStackWalk.PermitOnly">
          <source>The call stack is typically represented as growing down, so that methods higher in the call stack call methods lower in the call stack.</source>
          <target state="translated">Stos wywołań jest zazwyczaj reprezentowany jako rośnie, tak, aby metody wyżej w stosie wywołań wywoływać metody niższe w stosie wywołań.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>