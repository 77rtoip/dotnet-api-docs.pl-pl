<Type Name="IStackWalk" FullName="System.Security.IStackWalk">
  <Metadata><Meta Name="ms.openlocfilehash" Value="483fd0c19eb94202f890b134abe0af6b4d2336e7" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69161698" /></Metadata><TypeSignature Language="C#" Value="public interface IStackWalk" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IStackWalk" />
  <TypeSignature Language="DocId" Value="T:System.Security.IStackWalk" />
  <TypeSignature Language="VB.NET" Value="Public Interface IStackWalk" />
  <TypeSignature Language="C++ CLI" Value="public interface class IStackWalk" />
  <TypeSignature Language="F#" Value="type IStackWalk = interface" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Security.Permissions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Extensions</AssemblyName>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Zarządza przemieszczeniem stosu, które określa, czy wszyscy wywołujący w stosie wywołań mają uprawnienia wymagane do uzyskiwania dostępu do chronionego zasobu.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Częściowo zaufany kod zawsze stanowi zagrożenie bezpieczeństwa. Czasami może być manipulowany przez wykonywanie akcji w imieniu złośliwego kodu, który nie ma uprawnień dostępu do zasobu. W ten sposób złośliwy kod może uzyskać wyższy dostęp do zabezpieczeń niż powinien być dozwolony.  
  
 Środowisko uruchomieniowe języka wspólnego pomaga chronić kod zarządzany przed atakami przez uruchomienie przechodzenia stosu na wszystkie wywołania. Przechodzenie stosu wymaga, aby cały kod w stosie wywołań miał uprawnienia dostępu do chronionego zasobu. Ponieważ kod próbujący atak był zawsze gdzieś w stosie wywołań, nie będzie można przekroczyć własnych uprawnień zabezpieczeń.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Assert">
      <MemberSignature Language="C#" Value="public void Assert ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Assert() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.IStackWalk.Assert" />
      <MemberSignature Language="VB.NET" Value="Public Sub Assert ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Assert();" />
      <MemberSignature Language="F#" Value="abstract member Assert : unit -&gt; unit" Usage="iStackWalk.Assert " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Potwierdza, że kod wywołujący może uzyskać dostęp do zasobu identyfikowanego przez bieżący obiekt uprawnień, nawet jeśli obiekty wywołujące wyższe w stosie nie uzyskały uprawnień dostępu do zasobu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wywołanie <xref:System.Security.IStackWalk.Assert%2A> powoduje zatrzymanie sprawdzania uprawnień dla obiektów wywołujących wyższych w stosie wywołań. W związku z tym nawet jeśli Ci wywołujący nie mają wymaganych uprawnień, nadal mogą uzyskać dostęp do zasobów. Potwierdzenie ma zastosowanie tylko wtedy, gdy kod, który <xref:System.Security.IStackWalk.Assert%2A> wywołuje, przekazuje kontrolę zabezpieczeń dla uprawnienia, które jest potwierdzone.  
  
 Wywołanie <xref:System.Security.IStackWalk.Assert%2A> jest skuteczne do momentu, gdy wywoływany kod powróci do jego obiektu wywołującego lub <xref:System.Security.IStackWalk.Assert%2A> do momentu kolejnego wywołania powyższego potwierdzenia. <xref:System.Security.CodeAccessPermission.RevertAssert%2A> Ponadto lub <xref:System.Security.CodeAccessPermission.RevertAll%2A> usuwa oczekujące <xref:System.Security.IStackWalk.Assert%2A>.  
  
 <xref:System.Security.IStackWalk.Assert%2A>jest ignorowany dla uprawnień, które nie zostały przyznane, ponieważ żądanie tego uprawnienia nie powiedzie się. Jeśli jednak kod niższy od wywołania <xref:System.Security.IStackWalk.Demand%2A> stosu wywołań dla tego uprawnienia <xref:System.Security.SecurityException> , jest generowany, gdy przechodzenie stosu osiągnie kod, który próbował wywołać <xref:System.Security.IStackWalk.Assert%2A>. Dzieje się tak, ponieważ kod, <xref:System.Security.IStackWalk.Assert%2A> który został wywołany, nie otrzymał uprawnienia, nawet jeśli <xref:System.Security.IStackWalk.Assert%2A> próbował go.  
  
> [!CAUTION]
>  Ponieważ wywołanie <xref:System.Security.IStackWalk.Assert%2A> usuwa wymaganie, aby cały kod w łańcuchu wywołań musiał otrzymać uprawnienia dostępu do określonego zasobu, można otworzyć luki w zabezpieczeniach, jeśli są one używane nieprawidłowo lub niewłaściwie. W związku z tym powinno być używane z dużą ostrożnością.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">Kod wywołujący nie ma <see cref="F:System.Security.Permissions.SecurityPermissionFlag.Assertion" />.</exception>
        <related type="Article" href="~/docs/framework/misc/using-the-assert-method.md">Korzystanie z metody Assert</related>
      </Docs>
    </Member>
    <Member MemberName="Demand">
      <MemberSignature Language="C#" Value="public void Demand ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Demand() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.IStackWalk.Demand" />
      <MemberSignature Language="VB.NET" Value="Public Sub Demand ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Demand();" />
      <MemberSignature Language="F#" Value="abstract member Demand : unit -&gt; unit" Usage="iStackWalk.Demand " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Określa w czasie wykonywania, czy wszystkie obiekty wywołujące w stosie wywołań mają przyznane uprawnienia określone przez bieżący obiekt uprawnień.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda jest zwykle używana przez bezpieczne biblioteki w celu zapewnienia, że wywołujący mają uprawnienia dostępu do zasobu. Na przykład Klasa plików w bezpiecznej bibliotece klas wywołuje <xref:System.Security.IStackWalk.Demand%2A> wymagane <xref:System.Security.Permissions.FileIOPermission> przed wykonaniem operacji na plikach zażądanej przez wywołującego.  
  
 Uprawnienia kodu, który wywołuje tę metodę, nie są badane; sprawdzenie rozpoczyna się od bezpośredniego wywołującego tego kodu i przechodzi do stosu. <xref:System.Security.IStackWalk.Demand%2A>powiedzie się tylko wtedy <xref:System.Security.SecurityException> , gdy nie zostanie zgłoszony.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">Obiekt wywołujący znajdujący się wyżej w stosie wywołań nie ma uprawnienia określonego dla bieżącego obiektu uprawnień.  
  
—lub— 
Obiekt wywołujący w stosie wywołań został <see cref="M:System.Security.IStackWalk.Deny" /> wywołany w bieżącym obiekcie uprawnień.</exception>
      </Docs>
    </Member>
    <Member MemberName="Deny">
      <MemberSignature Language="C#" Value="public void Deny ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Deny() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.IStackWalk.Deny" />
      <MemberSignature Language="VB.NET" Value="Public Sub Deny ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Deny();" />
      <MemberSignature Language="F#" Value="abstract member Deny : unit -&gt; unit" Usage="iStackWalk.Deny " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Powoduje, że dla bieżącego obiektu, który przechodzi przez kod wywołujący, nie powiedzie się. <see cref="M:System.Security.IStackWalk.Demand" /></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda uniemożliwia wywoływanie obiektów wywołujących wyższego poziomu w stosie wywołań dostępu do chronionego zasobu za pośrednictwem kodu, który wywołuje tę metodę, nawet jeśli Ci wywołujący mają uprawnienia dostępu do niej. Stos wywołań jest zazwyczaj reprezentowany jako rosnący, więc metody wyższe w metodach wywołania stosu wywołań są niższe w stosie wywołań.  
  
 <xref:System.Security.IStackWalk.Deny%2A>program może ograniczyć odpowiedzialność programisty lub zapobiec przypadkowemu występowaniu luk w zabezpieczeniach, ponieważ pomaga zapobiec metodzie, która wywołuje <xref:System.Security.IStackWalk.Deny%2A> z użycia w celu uzyskania dostępu do zasobu chronionego przez wyrzucane uprawnienie. Jeśli metoda wywołuje <xref:System.Security.IStackWalk.Deny%2A> uprawnienie, a <xref:System.Security.IStackWalk.Demand%2A> dla tego uprawnienia wywoływany przez obiekt wywołujący jest niższy w stosie wywołań, sprawdzanie zabezpieczeń zakończy <xref:System.Security.IStackWalk.Deny%2A>się niepowodzeniem, gdy zostanie osiągnięty.  
  
 <xref:System.Security.IStackWalk.Deny%2A>jest ignorowany dla uprawnień, które nie zostały przyznane, ponieważ żądanie tego uprawnienia nie powiedzie się.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Nie można zastąpić tej metody.</para></block>
      </Docs>
    </Member>
    <Member MemberName="PermitOnly">
      <MemberSignature Language="C#" Value="public void PermitOnly ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PermitOnly() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.IStackWalk.PermitOnly" />
      <MemberSignature Language="VB.NET" Value="Public Sub PermitOnly ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PermitOnly();" />
      <MemberSignature Language="F#" Value="abstract member PermitOnly : unit -&gt; unit" Usage="iStackWalk.PermitOnly " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Extensions</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Powoduje, że dla wszystkich obiektów, z wyjątkiem bieżącego, który przechodzi przez wywoływany kod, nie powiedzie się, nawet jeśli kod wyższy w stosie wywołań przyznał uprawnienia dostępu do innych zasobów. <see cref="M:System.Security.IStackWalk.Demand" /></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Security.IStackWalk.PermitOnly%2A>działa podobnie jak <xref:System.Security.IStackWalk.Deny%2A>w przypadku, gdy obie przyczyny kończą się niepowodzeniem. Różnica polega na tym <xref:System.Security.IStackWalk.Deny%2A> , że określa uprawnienia, które spowodują niepowodzenie przechodzenia stosu <xref:System.Security.IStackWalk.PermitOnly%2A> , ale określa jedyne uprawnienia, które nie powodują błędów przeszukiwania stosu. Wywołaj tę metodę, aby upewnić się, że kod może być używany w celu uzyskania dostępu tylko do określonych zasobów.  
  
 <xref:System.Security.IStackWalk.PermitOnly%2A>jest ignorowany dla uprawnień, które nie zostały przyznane, ponieważ żądanie tego uprawnienia nie powiedzie się. Jeśli jednak kod niższy na stosie wywołań później wywołuje <xref:System.Security.IStackWalk.Demand%2A> dla tego uprawnienia <xref:System.Security.SecurityException> , jest generowany, gdy przeszukiwany stos osiągnie kod, który próbował wywołać <xref:System.Security.IStackWalk.PermitOnly%2A>. Wynika to z faktu, że <xref:System.Security.IStackWalk.PermitOnly%2A> wywoływany kod nie otrzymał uprawnienia, nawet jeśli został wywołany <xref:System.Security.IStackWalk.PermitOnly%2A> dla tego uprawnienia. Stos wywołań jest zazwyczaj reprezentowany jako rosnący, więc metody wyższe w metodach wywołania stosu wywołań są niższe w stosie wywołań.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
