<Type Name="CodeAccessPermission" FullName="System.Security.CodeAccessPermission">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="b497a3cd20cb1d0ae8172ce6caf259ae001ddee0" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30570793" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class CodeAccessPermission : System.Security.IPermission, System.Security.IStackWalk" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract serializable beforefieldinit CodeAccessPermission extends System.Object implements class System.Security.IPermission, class System.Security.ISecurityEncodable, class System.Security.IStackWalk" />
  <TypeSignature Language="DocId" Value="T:System.Security.CodeAccessPermission" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class CodeAccessPermission&#xA;Implements IPermission, IStackWalk" />
  <TypeSignature Language="C++ CLI" Value="public ref class CodeAccessPermission abstract : System::Security::IPermission, System::Security::IStackWalk" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Security.Permissions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Security.IPermission</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Security.IStackWalk</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Definiuje wewnętrzna struktura wszystkich uprawnień dostępu do kodu.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Uprawnienia dostępu do kodu umożliwia upewnij się, że wszystkie obiekty wywołujące kodu przyznano uprawnienia przeszukiwania stosu. Jeśli obiekt uprawnienie jest `null`, jest taka sama, jak dla obiektu uprawnień ze stanem obsługiwane <xref:System.Security.Permissions.PermissionState.None?displayProperty=nameWithType>.  
  
 Stos wywołań jest zazwyczaj reprezentowany jako rośnie, tak, aby metody wyżej w stosie wywołań wywoływać metody niższe w stosie wywołań.  
  
 Dziedziczenia z <xref:System.Security.CodeAccessPermission> klasy muszą być przyznane pełne zaufanie do poprawnego działania jako rozszerzenie infrastruktury zabezpieczeń uprawnień. Aby określić, czy dziedziczenia są w pełni zaufany <xref:System.Security.CodeAccessPermission> problemów <xref:System.Security.Permissions.SecurityAction.InheritanceDemand> dla <xref:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence>  =  `true` i <xref:System.Security.Permissions.SecurityPermissionFlag.ControlPolicy>  =  `true`.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje uprawnienia pochodną <xref:System.Security.CodeAccessPermission> klasy.  
  
 [!code-cpp[System.Security.Permissions.NameIdPermission#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/CPP/nameidpermission.cpp#1)]
 [!code-csharp[System.Security.Permissions.NameIdPermission#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/CS/nameidpermission.cs#1)]
 [!code-vb[System.Security.Permissions.NameIdPermission#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/VB/nameidpermission.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand">Aby uzyskać możliwość dziedziczenia do Podaj dowód i wyświetlania i modyfikowania zasad. Skojarzone wyliczenia: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlEvidence" />, <see cref="F:System.Security.Permissions.SecurityPermissionFlag.ControlPolicy" />.</permission>
    <block subset="none" type="overrides">
      <para>Przy dziedziczeniu z <see cref="T:System.Security.CodeAccessPermission" />, musi implementować też <see cref="T:System.Security.Permissions.IUnrestrictedPermission" /> interfejsu.  
  
 Następujące <see cref="T:System.Security.CodeAccessPermission" /> musi zostać zastąpiona elementów członkowskich: <see cref="M:System.Security.CodeAccessPermission.Copy" />, <see cref="M:System.Security.CodeAccessPermission.Intersect(System.Security.IPermission)" />, <see cref="M:System.Security.CodeAccessPermission.IsSubsetOf(System.Security.IPermission)" />, <see cref="M:System.Security.CodeAccessPermission.ToXml" />, <see cref="M:System.Security.CodeAccessPermission.FromXml(System.Security.SecurityElement)" />, i <see cref="M:System.Security.CodeAccessPermission.Union(System.Security.IPermission)" />.  
  
 Musi także definiować konstruktora przyjmującego <see cref="T:System.Security.Permissions.PermissionState" /> jako jego parametr tylko.  
  
 Należy najpierw zastosować <see cref="T:System.SerializableAttribute" /> do klasy, która dziedziczy atrybut <see cref="T:System.Security.CodeAccessPermission" />.</para>
    </block>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected CodeAccessPermission ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; CodeAccessPermission();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Security.CodeAccessPermission" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor jest wywoływana w celu zainicjowania stanu w typie, gdy tworzone jest wystąpienie klasy pochodnej. Mimo że można jawnie wywołać konstruktora w deklaracji konstruktora konstruktora klasy pochodnej, nie jest to zazwyczaj konieczne; Większość kompilatorów automatycznie wygeneruje wywołania dla Ciebie.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Assert">
      <MemberSignature Language="C#" Value="public void Assert ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Assert() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.Assert" />
      <MemberSignature Language="VB.NET" Value="Public Sub Assert ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Assert();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.IStackWalk.Assert</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Deklaruje, że kod wywołujący może uzyskać dostępu do zasobu chroniony na żądanie uprawnień przez kod, który wywołuje tę metodę, nawet jeśli wyżej w stosie wywołań nie przyznano uprawnień dostępu do zasobu. Przy użyciu <see cref="M:System.Security.CodeAccessPermission.Assert" /> może spowodować problemy zabezpieczeń.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Stos wywołań jest zazwyczaj reprezentowany jako rośnie, tak, aby metody wyżej w stosie wywołań wywoływać metody niższe w stosie wywołań. Wywoływanie <xref:System.Security.CodeAccessPermission.Assert%2A> uniemożliwia przeszukiwania stosu, pochodzących z niższych stos wywołań z kontynuowaniem górę stosu wywołań poza kod, który wywołuje tę metodę. W związku z tym nawet jeśli obiekty wywołujące wyżej na stosie wywołań nie ma wymaganych uprawnień do uzyskania dostępu do zasobu, one nadal do niego dostęp przez kod, który wywołuje tę metodę w niezbędnych uprawnień. Potwierdzenia jest efektywne tylko wtedy, gdy kod, który wywołuje <xref:System.Security.CodeAccessPermission.Assert%2A> przekazuje kontrola zabezpieczeń dla uprawnień, który jest ona potwierdzające.  
  
 Wywołanie <xref:System.Security.CodeAccessPermission.Assert%2A> obowiązuje, dopóki kod wywołujący nie powróci do swojego obiektu wywołującego. Tylko jeden <xref:System.Security.CodeAccessPermission.Assert%2A> może być aktywne w ramce. Próba wywołania <xref:System.Security.CodeAccessPermission.Assert%2A> podczas aktywnego <xref:System.Security.CodeAccessPermission.Assert%2A> istnieje na wyniki do ramki <xref:System.Security.SecurityException>. Wywołanie <xref:System.Security.CodeAccessPermission.RevertAssert%2A> lub <xref:System.Security.CodeAccessPermission.RevertAll%2A> do usunięcia aktywnego <xref:System.Security.CodeAccessPermission.Assert%2A>.  
  
 <xref:System.Security.CodeAccessPermission.Assert%2A> jest ignorowany dla uprawnienia nie udzielić, ponieważ nie powiedzie się żądanie dla tego uprawnienia. Jednak jeśli niższy w stosie wywołań kod wywołuje <xref:System.Security.CodeAccessPermission.Demand%2A> dla tego uprawnienia <xref:System.Security.SecurityException> jest generowany, gdy kod, który próbowano nawiązać połączenie osiągnie przeszukiwania stosu <xref:System.Security.CodeAccessPermission.Assert%2A>. Dzieje się tak, ponieważ kod, który wywołuje <xref:System.Security.CodeAccessPermission.Assert%2A> nie udzielono uprawnień, mimo że próby <xref:System.Security.CodeAccessPermission.Assert%2A> go.  
  
> [!CAUTION]
>  Ponieważ wywoływanie <xref:System.Security.CodeAccessPermission.Assert%2A> usuwa wymaganie, że wszystkie kodu w łańcuchu wywołań musi mieć uprawnienie dostępu do określonego zasobu, można otworzyć się problemy z zabezpieczeniami, jeśli używane nieprawidłowo lub niewłaściwie. W związku z tym należy można używać z dużą ostrożność.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">Kod wywołujący nie ma <see cref="F:System.Security.Permissions.SecurityPermissionFlag.Assertion" />.  
  
 —lub—  
  
 Istnieje już aktywny <see cref="M:System.Security.CodeAccessPermission.Assert" /> dla bieżącej ramki.</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">dla funkcji do wywołania <see cref="M:System.Security.CodeAccessPermission.Assert" />. Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.Assertion" /></permission>
        <block subset="none" type="overrides">
          <para>Nie można przesłonić tę metodę.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Copy">
      <MemberSignature Language="C#" Value="public abstract System.Security.IPermission Copy ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.IPermission Copy() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.Copy" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Copy () As IPermission" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Security::IPermission ^ Copy();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.IPermission.Copy</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Po zaimplementowaniu w klasie pochodnej, tworzy i zwraca identyczne kopię bieżącego obiektu uprawnień.</summary>
        <returns>Kopię bieżącego obiektu uprawnień.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Kopię obiektu uprawnienie reprezentuje takie same prawa dostępu do zasobów do oryginalnego obiektu uprawnienia.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje zastępująca <xref:System.Security.CodeAccessPermission.Copy%2A> metody. Ten przykładowy kod jest częścią większego przykładu udostępnionego dla <xref:System.Security.CodeAccessPermission> klasy.  
  
 [!code-cpp[System.Security.Permissions.NameIdPermission#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/CPP/nameidpermission.cpp#2)]
 [!code-csharp[System.Security.Permissions.NameIdPermission#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/CS/nameidpermission.cs#2)]
 [!code-vb[System.Security.Permissions.NameIdPermission#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/VB/nameidpermission.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Należy przesłonić tę metodę w klasie pochodnej.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Demand">
      <MemberSignature Language="C#" Value="public void Demand ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Demand() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.Demand" />
      <MemberSignature Language="VB.NET" Value="Public Sub Demand ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Demand();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.IPermission.Demand</InterfaceMember>
        <InterfaceMember>M:System.Security.IStackWalk.Demand</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Wymusza <see cref="T:System.Security.SecurityException" /> na czas wykonywania Jeśli wszystkim zainteresowanym wyżej w stosie wywołań nie przyznano uprawnienia określone przez bieżące wystąpienie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda jest używana zazwyczaj przez bezpieczne biblioteki, aby upewnić się, że obiekty wywołujące ma uprawnienia do uzyskania dostępu do zasobu. Na przykład wywołuje klasy pliku w bibliotece klas bezpiecznego <xref:System.Security.CodeAccessPermission.Demand%2A> dla niezbędnych <xref:System.Security.Permissions.FileIOPermission> przed wykonaniem operacji na pliku żądanego przez obiekt wywołujący.  
  
 Uprawnienia kod, który wywołuje tę metodę, nie są sprawdzane; Sprawdzanie zaczyna się od bezpośredniego obiektu wywołującego kodu i jest przeprowadzane w górę stosu. Stos wywołań jest zazwyczaj reprezentowany jako rośnie, tak, aby metody wyżej w stosie wywołań wywoływać metody niższe w stosie wywołań. <xref:System.Security.CodeAccessPermission.Demand%2A> powiedzie się tylko wtedy, gdy nie <xref:System.Security.SecurityException> jest wywoływane.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">Obiekt wywołujący wyżej w stosie wywołań nie ma uprawnienia określone przez bieżące wystąpienie.  
  
 —lub—  
  
 Obiekt wywołujący wyżej w stosie wywołań została wywołana <see cref="M:System.Security.CodeAccessPermission.Deny" /> dla bieżącego obiektu uprawnienia.</exception>
        <block subset="none" type="overrides">
          <para>Nie można przesłonić tę metodę.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Deny">
      <MemberSignature Language="C#" Value="public void Deny ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Deny() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.Deny" />
      <MemberSignature Language="VB.NET" Value="Public Sub Deny ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Deny();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.IStackWalk.Deny</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zapobiega przy użyciu kodu, który wywołuje tę metodę, aby uzyskać dostęp do zasobu określonego przez bieżące wystąpienie obiekty wywołujące wyżej w stosie wywołań.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <xref:System.Security.CodeAccessPermission.Deny%2A> Metoda powinna być używana tylko w celu ochrony zasobów przed przypadkowym dostępu przez całkowicie zaufanego kodu. Nie ją stosować do ochrony zasobów przed niewłaściwym użyciem zamierzone w kodzie niezaufanym. Na przykład jeśli — metoda `A` problemy <xref:System.Security.CodeAccessPermission.Deny%2A> uprawnienia, a następnie wywołania metody `B`, Metoda `B` overtly można zastąpić <xref:System.Security.CodeAccessPermission.Deny%2A> przez wystawienie <xref:System.Security.CodeAccessPermission.Assert%2A>. Wywołana metoda jest zawsze wyżej w stosie. W związku z tym jeśli — metoda `B` próbuje uzyskać dostęp do chronionego zasobu systemu zabezpieczeń, rozpocznie się sprawdzanie uprawnień z nią, ponieważ metoda `B` jest bezpośredniego obiektu wywołującego, a następnie przeszukiwań w dół stosu, aby upewnić się, że istnieje nie <xref:System.Security.CodeAccessPermission.Deny%2A> lub <xref:System.Security.CodeAccessPermission.PermitOnly%2A> niżej w stosie. Metoda `B`, który próbuje uzyskać dostęp do zasobu, można zatrzymać przeszukiwania stosu bezpośrednio za pomocą <xref:System.Security.CodeAccessPermission.Assert%2A> metody. W takim przypadku <xref:System.Security.CodeAccessPermission.Deny%2A> umieszczone na stosie przez metodę `A` (metody, wywołujący) nigdy nie został odnaleziony.  
  
 Ta metoda uniemożliwia dostęp do chronionych zasobów za pośrednictwem kod, który wywołuje tę metodę, nawet w przypadku tych wywołań przyznano uprawnień dostępu do niego wywołań wyżej w stosie wywołań. Stos wywołań jest zazwyczaj reprezentowany jako rośnie, tak, aby metody wyżej w stosie wywołań wywoływać metody niższe w stosie wywołań.  
  
 <xref:System.Security.CodeAccessPermission.Deny%2A> można ograniczyć odpowiedzialność programisty lub pomagać w zapobieganiu problemy z zabezpieczeniami przypadkowe, ponieważ zapobiega metodę, która wywołuje <xref:System.Security.CodeAccessPermission.Deny%2A> z zasobów chronionych przez odmówiono uprawnień dostępu do użycia. Wywołuje metodę <xref:System.Security.CodeAccessPermission.Deny%2A> na uprawnienia, a jeśli <xref:System.Security.CodeAccessPermission.Demand%2A> dla tego uprawnienia jest wywoływany przez obiekt wywołujący niższe w stosie wywołań, sprawdzanie zabezpieczeń zakończy się niepowodzeniem, po osiągnięciu <xref:System.Security.CodeAccessPermission.Deny%2A>.  
  
 Wywołanie <xref:System.Security.CodeAccessPermission.Deny%2A> obowiązuje, dopóki kod wywołujący nie powróci do swojego obiektu wywołującego. Tylko jeden <xref:System.Security.CodeAccessPermission.Deny%2A> może być aktywne w ramce. Próba wywołania <xref:System.Security.CodeAccessPermission.Deny%2A> podczas aktywnego <xref:System.Security.CodeAccessPermission.Deny%2A> istnieje na wyniki do ramki <xref:System.Security.SecurityException>. Wywołanie <xref:System.Security.CodeAccessPermission.RevertDeny%2A> lub <xref:System.Security.CodeAccessPermission.RevertAll%2A> do usunięcia aktywnego <xref:System.Security.CodeAccessPermission.Deny%2A>. <xref:System.Security.CodeAccessPermission.Deny%2A> jest ignorowany dla uprawnienia nie udzielić, ponieważ nie powiedzie się żądanie dla tego uprawnienia.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">Istnieje już aktywny <see cref="M:System.Security.CodeAccessPermission.Deny" /> dla bieżącej ramki.</exception>
        <block subset="none" type="overrides">
          <para>Nie można przesłonić tę metodę.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <see cref="T:System.Security.CodeAccessPermission" /> Obiekt do porównania z bieżącym <see cref="T:System.Security.CodeAccessPermission" />.</param>
        <summary>Określa, czy określony <see cref="T:System.Security.CodeAccessPermission" /> obiekt jest taki sam, jak bieżący <see cref="T:System.Security.CodeAccessPermission" />.</summary>
        <returns>
          <see langword="true" /> Jeśli określony <see cref="T:System.Security.CodeAccessPermission" /> obiekt jest taki sam, jak bieżący <see cref="T:System.Security.CodeAccessPermission" />; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uzyskać więcej informacji, zobacz <xref:System.Object.Equals%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FromXml">
      <MemberSignature Language="C#" Value="public abstract void FromXml (System.Security.SecurityElement elem);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void FromXml(class System.Security.SecurityElement elem) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.FromXml(System.Security.SecurityElement)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Sub FromXml (elem As SecurityElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract void FromXml(System::Security::SecurityElement ^ elem);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.ISecurityEncodable.FromXml(System.Security.SecurityElement)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="elem" Type="System.Security.SecurityElement" />
      </Parameters>
      <Docs>
        <param name="elem">Kodowanie XML na potrzeby rekonstrukcji obiektu zabezpieczeń.</param>
        <summary>W przypadku przesłonięcia w klasie pochodnej, rekonstruuje obiektu zabezpieczeń o określonym stanie kodowania XML.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Kod niestandardowy, który rozszerza obiekty zabezpieczeń należy zaimplementować <xref:System.Security.CodeAccessPermission.ToXml%2A> i <xref:System.Security.CodeAccessPermission.FromXml%2A> metody, aby obiekty można kodować zabezpieczeń.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje zastępująca <xref:System.Security.CodeAccessPermission.FromXml%2A> metody. Ten przykładowy kod jest częścią większego przykładu udostępnionego dla <xref:System.Security.CodeAccessPermission> klasy.  
  
 [!code-cpp[System.Security.Permissions.NameIdPermission#10](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/CPP/nameidpermission.cpp#10)]
 [!code-csharp[System.Security.Permissions.NameIdPermission#10](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/CS/nameidpermission.cs#10)]
 [!code-vb[System.Security.Permissions.NameIdPermission#10](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/VB/nameidpermission.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="elem" /> Parametr jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="elem" /> Parametr zawiera kodowanie XML wystąpienia tego samego typu jak bieżące wystąpienie.  
  
 —lub—  
  
 Numer wersji <paramref name="elem" /> parametr nie jest obsługiwany.</exception>
        <block subset="none" type="overrides">
          <para>Należy przesłonić tę metodę w klasie pochodnej.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.InteropServices.ComVisible(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pobiera wartość skrótu dla <see cref="T:System.Security.CodeAccessPermission" /> obiekt, który jest odpowiedni do użycia w mieszania struktury algorytmów i danych, takich jak tablicy skrótów.</summary>
        <returns>Wartość skrótu dla bieżącego <see cref="T:System.Security.CodeAccessPermission" /> obiektu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość skrótu dla dwa wystąpienia tej samej uprawnienia mogą się różnić, dlatego wartość skrótu nie należy używać do porównywania dwóch <xref:System.Security.CodeAccessPermission> obiektów.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Intersect">
      <MemberSignature Language="C#" Value="public abstract System.Security.IPermission Intersect (System.Security.IPermission target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.IPermission Intersect(class System.Security.IPermission target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.Intersect(System.Security.IPermission)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function Intersect (target As IPermission) As IPermission" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Security::IPermission ^ Intersect(System::Security::IPermission ^ target);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.IPermission.Intersect(System.Security.IPermission)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="target">Uprawnienie do intersect z uprawnieniami bieżącego. Należy tego samego typu co bieżący uprawnień.</param>
        <summary>Po zaimplementowaniu w klasie pochodnej, tworzy i zwraca uprawnienia, które jest przecięcia bieżące uprawnienia i określony.</summary>
        <returns>Nowe uprawnienie reprezentuje część wspólną bieżące uprawnienia i określony. Jest to nowe uprawnienie <see langword="null" /> Jeśli część wspólną jest pusta.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Część wspólną dwóch uprawnień jest uprawnienia, które opisano zestaw działań, które opisują one zarówno wspólnych. Tylko zażąda przekazuje oba oryginalnego uprawnienia zostaną spełnione przecięcie.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje zastępująca <xref:System.Security.CodeAccessPermission.Intersect%2A> metody. Ten przykładowy kod jest częścią większego przykładu udostępnionego dla <xref:System.Security.CodeAccessPermission> klasy.  
  
 [!code-cpp[System.Security.Permissions.NameIdPermission#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/CPP/nameidpermission.cpp#5)]
 [!code-csharp[System.Security.Permissions.NameIdPermission#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/CS/nameidpermission.cs#5)]
 [!code-vb[System.Security.Permissions.NameIdPermission#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/VB/nameidpermission.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="target" /> Parametr nie jest <see langword="null" /> i nie jest wystąpieniem tej samej klasy bieżące uprawnienia.</exception>
        <block subset="none" type="overrides">
          <para>Należy przesłonić tę metodę w klasie pochodnej.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="IsSubsetOf">
      <MemberSignature Language="C#" Value="public abstract bool IsSubsetOf (System.Security.IPermission target);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsSubsetOf(class System.Security.IPermission target) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.IsSubsetOf(System.Security.IPermission)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function IsSubsetOf (target As IPermission) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract bool IsSubsetOf(System::Security::IPermission ^ target);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.IPermission.IsSubsetOf(System.Security.IPermission)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="target" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="target">Uprawnienia, które ma być sprawdzane pod kątem relacji podzbioru. To uprawnienie musi być tego samego typu co bieżący uprawnień.</param>
        <summary>Po zaimplementowaniu w klasie pochodnej, określa, czy bieżący uprawnienie jest podzbiorem określonego uprawnienia.</summary>
        <returns>
          <see langword="true" /> Jeśli bieżące uprawnienia są podzbiorem określonego uprawnienia; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bieżące uprawnienia jest podzbiorem określonego uprawnienia, jeśli uprawnienia bieżącego określa zestaw operacji jest całkowicie zawarty w określonego uprawnienia. Na przykład uprawnienia reprezentujące dostęp do C:\example.txt jest podzbiorem uprawnienie reprezentujące dostęp do folderu C:\\. Jeśli ta metoda zwraca `true`, bieżący uprawnienie reprezentuje nie uzyskać dostęp do chronionych zasobów niż określone uprawnienie.  
  
 Poniższe instrukcje muszą być `true` wszystkich zastąpień z <xref:System.Security.CodeAccessPermission.IsSubsetOf%2A> metody. *X*, *Y*, i *Z* reprezentowała obiekty uprawnienia dostępu kodu niestandardowego, które nie są puste odwołania *U* reprezentuje uprawnień dostępu kodu bez ograniczeń i *N* reprezentuje pusty uprawnienie o <xref:System.Security.Permissions.PermissionState> z <xref:System.Security.Permissions.PermissionState.None>.  
  
-   *X*. IsSubsetOf (*X*) zwraca `true`.  
  
-   *X*. IsSubsetOf (*Y*) zwraca taką samą wartość jak *Y*. IsSubsetOf (*X*) tylko wtedy, gdy *X* i *Y* reprezentują ten sam zestaw uprawnień.  
  
-   Jeśli *X*. IsSubsetOf (*Y*) i *Y*. IsSubsetOf (*Z*) zwrócą `true`, *X*. IsSubsetOf (*Z*) zwraca `true`.  
  
-   *X*. IsSubsetOf (*U*) zwraca `true`.  
  
-   *X*. IsSubsetOf (*N*) zwraca `false`.  
  
-   *N*. IsSubsetOf (*X*) zwraca `true`.  
  
 Jeśli *X* i *Y* reprezentują niestandardowych kodów dostępu do uprawnień obiektów, które są puste odwołania *X*. IsSubsetOf (*Y*) zwraca `true`. Jeśli *Z* również ma wartość null, złożonej operacji zestawu *X*. Unii (*Y*). IsSubsetOf (*Z*) zwraca również wartość `true` ponieważ złożenie dwóch uprawnienia wartość null jest uprawnienie wartości null.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje zastępująca <xref:System.Security.CodeAccessPermission.IsSubsetOf%2A> metody. Ten przykładowy kod jest częścią większego przykładu udostępnionego dla <xref:System.Security.CodeAccessPermission> klasy.  
  
 [!code-cpp[System.Security.Permissions.NameIdPermission#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/CPP/nameidpermission.cpp#4)]
 [!code-csharp[System.Security.Permissions.NameIdPermission#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/CS/nameidpermission.cs#4)]
 [!code-vb[System.Security.Permissions.NameIdPermission#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/VB/nameidpermission.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="target" /> Parametr nie jest <see langword="null" /> i nie jest taki sam typ jak bieżące uprawnienia.</exception>
        <block subset="none" type="overrides">
          <para>Należy przesłonić tę metodę w klasie pochodnej.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="PermitOnly">
      <MemberSignature Language="C#" Value="public void PermitOnly ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PermitOnly() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.PermitOnly" />
      <MemberSignature Language="VB.NET" Value="Public Sub PermitOnly ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void PermitOnly();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.IStackWalk.PermitOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zapobiega przy użyciu kodu, który wywołuje tę metodę, aby uzyskać dostęp do wszystkich zasobów z wyjątkiem zasobu określonego przez bieżące wystąpienie obiekty wywołujące wyżej w stosie wywołań.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <xref:System.Security.CodeAccessPermission.PermitOnly%2A> Metoda powinna być używana tylko w celu ochrony zasobów przed przypadkowym dostępu przez całkowicie zaufanego kodu. Nie ją stosować do ochrony zasobów przed niewłaściwym użyciem zamierzone w kodzie niezaufanym. Na przykład jeśli — metoda `A` problemy <xref:System.Security.CodeAccessPermission.PermitOnly%2A> uprawnienia, a następnie wywołania metody `B`, Metoda `B` overtly można zastąpić <xref:System.Security.CodeAccessPermission.PermitOnly%2A> przez wystawienie <xref:System.Security.CodeAccessPermission.Assert%2A>. Wywołana metoda jest zawsze wyżej w stosie. W związku z tym jeśli — metoda `B` próbuje uzyskać dostęp do chronionego zasobu systemu zabezpieczeń, rozpocznie się sprawdzanie uprawnień z nią, ponieważ metoda `B` jest bezpośredniego obiektu wywołującego, a następnie przeszukiwań w dół stosu, aby upewnić się, że istnieje nie <xref:System.Security.CodeAccessPermission.Deny%2A> lub <xref:System.Security.CodeAccessPermission.PermitOnly%2A> niżej w stosie. Metoda `B`, który próbuje uzyskać dostęp do zasobu, można zatrzymać przeszukiwania stosu bezpośrednio za pomocą <xref:System.Security.CodeAccessPermission.Assert%2A> metody. W takim przypadku <xref:System.Security.CodeAccessPermission.PermitOnly%2A> umieszczone na stosie przez metodę `A` (metody, wywołujący) nigdy nie został odnaleziony.  
  
 <xref:System.Security.CodeAccessPermission.PermitOnly%2A> przypomina <xref:System.Security.CodeAccessPermission.Deny%2A>, w tym zarówno spowodować przeszukiwań stosu się niepowodzeniem podczas ich w przeciwnym razie powiedzie się. Różnica jest to, że <xref:System.Security.CodeAccessPermission.Deny%2A> określa uprawnienia, które spowoduje niepowodzenie przeszukiwania stosu, ale <xref:System.Security.CodeAccessPermission.PermitOnly%2A> określa tylko uprawnienia, które nie powodują przeszukiwania stosu się niepowodzeniem.  
  
 Wywołanie tej metody, aby upewnić się, że kodu można uzyskać dostępu do określonych zasobów. Wywołanie <xref:System.Security.CodeAccessPermission.PermitOnly%2A> obowiązuje, dopóki kod wywołujący nie powróci do swojego obiektu wywołującego. Tylko jeden <xref:System.Security.CodeAccessPermission.PermitOnly%2A> może być aktywne w ramce. Próba wywołania <xref:System.Security.CodeAccessPermission.PermitOnly%2A> podczas aktywnego <xref:System.Security.CodeAccessPermission.PermitOnly%2A> istnieje na wyniki do ramki <xref:System.Security.SecurityException>. Wywołanie <xref:System.Security.CodeAccessPermission.RevertPermitOnly%2A> lub <xref:System.Security.CodeAccessPermission.RevertAll%2A> do usunięcia aktywnego <xref:System.Security.CodeAccessPermission.PermitOnly%2A>.  
  
 <xref:System.Security.CodeAccessPermission.PermitOnly%2A> jest ignorowany dla uprawnienia nie udzielić, ponieważ nie powiedzie się żądanie dla tego uprawnienia. Jednak jeśli kod niższe w wywołaniu później stosu wywołań <xref:System.Security.CodeAccessPermission.Demand%2A> dla tego uprawnienia <xref:System.Security.SecurityException> jest generowany, gdy kod, który próbowano nawiązać połączenie osiągnie przeszukiwania stosu <xref:System.Security.CodeAccessPermission.PermitOnly%2A>. Jest to spowodowane kod, który wywołuje <xref:System.Security.CodeAccessPermission.PermitOnly%2A> nie udzielono uprawnień, mimo że mu <xref:System.Security.CodeAccessPermission.PermitOnly%2A> dla tego uprawnienia. Stos wywołań jest zazwyczaj reprezentowany jako rośnie, tak, aby metody wyżej w stosie wywołań wywoływać metody niższe w stosie wywołań.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Security.SecurityException">Istnieje już aktywny <see cref="M:System.Security.CodeAccessPermission.PermitOnly" /> dla bieżącej ramki.</exception>
        <block subset="none" type="overrides">
          <para>Nie można przesłonić tę metodę.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="RevertAll">
      <MemberSignature Language="C#" Value="public static void RevertAll ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RevertAll() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.RevertAll" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RevertAll ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RevertAll();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Powoduje, że wszystkie poprzednie zastąpienia dla bieżącej ramki do usunięcia, a nie działają.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli nie ma żadnych zastąpień (<xref:System.Security.CodeAccessPermission.Assert%2A>, <xref:System.Security.CodeAccessPermission.Deny%2A>, lub <xref:System.Security.CodeAccessPermission.PermitOnly%2A>) dla bieżącej ramki <xref:System.ExecutionEngineException> jest generowany.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Brak poprzedniej nie <see cref="M:System.Security.CodeAccessPermission.Assert" />, <see cref="M:System.Security.CodeAccessPermission.Deny" />, lub <see cref="M:System.Security.CodeAccessPermission.PermitOnly" /> dla bieżącej ramki.</exception>
      </Docs>
    </Member>
    <Member MemberName="RevertAssert">
      <MemberSignature Language="C#" Value="public static void RevertAssert ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RevertAssert() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.RevertAssert" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RevertAssert ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RevertAssert();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Powoduje, że wszystkie poprzednie <see cref="M:System.Security.CodeAccessPermission.Assert" /> dla bieżącej ramki do usunięcia, a nie działają.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W przypadku nie <xref:System.Security.CodeAccessPermission.Assert%2A> dla bieżącej ramki <xref:System.ExecutionEngineException> jest generowany.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Brak poprzedniej nie <see cref="M:System.Security.CodeAccessPermission.Assert" /> dla bieżącej ramki.</exception>
      </Docs>
    </Member>
    <Member MemberName="RevertDeny">
      <MemberSignature Language="C#" Value="public static void RevertDeny ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RevertDeny() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.RevertDeny" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RevertDeny ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RevertDeny();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Powoduje, że wszystkie poprzednie <see cref="M:System.Security.CodeAccessPermission.Deny" /> dla bieżącej ramki do usunięcia, a nie działają.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W przypadku nie <xref:System.Security.CodeAccessPermission.Deny%2A> dla bieżącej ramki <xref:System.ExecutionEngineException> jest generowany.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Brak poprzedniej nie <see cref="M:System.Security.CodeAccessPermission.Deny" /> dla bieżącej ramki.</exception>
      </Docs>
    </Member>
    <Member MemberName="RevertPermitOnly">
      <MemberSignature Language="C#" Value="public static void RevertPermitOnly ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void RevertPermitOnly() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.RevertPermitOnly" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub RevertPermitOnly ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void RevertPermitOnly();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Powoduje, że wszystkie poprzednie <see cref="M:System.Security.CodeAccessPermission.PermitOnly" /> dla bieżącej ramki do usunięcia, a nie działają.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W przypadku nie <xref:System.Security.CodeAccessPermission.PermitOnly%2A> dla bieżącej ramki <xref:System.ExecutionEngineException> jest generowany.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Brak poprzedniej nie <see cref="M:System.Security.CodeAccessPermission.PermitOnly" /> dla bieżącej ramki.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Security.IPermission.Demand">
      <MemberSignature Language="C#" Value="void IPermission.Demand ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Security.IPermission.Demand() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.System#Security#IPermission#Demand" />
      <MemberSignature Language="VB.NET" Value="Sub Demand () Implements IPermission.Demand" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Security.IPermission.Demand() = System::Security::IPermission::Demand;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.IPermission.Demand</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Security.IStackWalk.Assert">
      <MemberSignature Language="C#" Value="void IStackWalk.Assert ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Security.IStackWalk.Assert() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.System#Security#IStackWalk#Assert" />
      <MemberSignature Language="VB.NET" Value="Sub Assert () Implements IStackWalk.Assert" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Security.IStackWalk.Assert() = System::Security::IStackWalk::Assert;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.IStackWalk.Assert</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Security.IStackWalk.Demand">
      <MemberSignature Language="C#" Value="void IStackWalk.Demand ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Security.IStackWalk.Demand() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.System#Security#IStackWalk#Demand" />
      <MemberSignature Language="VB.NET" Value="Sub Demand () Implements IStackWalk.Demand" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Security.IStackWalk.Demand() = System::Security::IStackWalk::Demand;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.IStackWalk.Demand</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Security.IStackWalk.Deny">
      <MemberSignature Language="C#" Value="void IStackWalk.Deny ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Security.IStackWalk.Deny() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.System#Security#IStackWalk#Deny" />
      <MemberSignature Language="VB.NET" Value="Sub Deny () Implements IStackWalk.Deny" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Security.IStackWalk.Deny() = System::Security::IStackWalk::Deny;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.IStackWalk.Deny</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Security.IStackWalk.PermitOnly">
      <MemberSignature Language="C#" Value="void IStackWalk.PermitOnly ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Security.IStackWalk.PermitOnly() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.System#Security#IStackWalk#PermitOnly" />
      <MemberSignature Language="VB.NET" Value="Sub PermitOnly () Implements IStackWalk.PermitOnly" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Security.IStackWalk.PermitOnly() = System::Security::IStackWalk::PermitOnly;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.IStackWalk.PermitOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Tworzy i zwraca reprezentację ciągu bieżącego obiektu uprawnień.</summary>
        <returns>Reprezentacja ciągu bieżącego obiektu uprawnienia.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda jest przydatna w debugowaniu, gdy ma zostać wyświetlone uprawnienia do postaci ciągu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToXml">
      <MemberSignature Language="C#" Value="public abstract System.Security.SecurityElement ToXml ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.SecurityElement ToXml() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.ToXml" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function ToXml () As SecurityElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Security::SecurityElement ^ ToXml();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.ISecurityEncodable.ToXml</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.SecurityElement</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>W przypadku przesłonięcia w klasie pochodnej tworzy kodowania XML obiektu zabezpieczeń oraz w jego bieżącym stanie.</summary>
        <returns>Kodowanie XML obiektu zabezpieczeń, łącznie z żadnych informacji o stanie.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Kod niestandardowy, który rozszerza obiekty zabezpieczeń należy zaimplementować <xref:System.Security.CodeAccessPermission.ToXml%2A> i <xref:System.Security.CodeAccessPermission.FromXml%2A> metody, aby obiekty można kodować zabezpieczeń.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje zastępująca <xref:System.Security.CodeAccessPermission.ToXml%2A> metody. Ten przykładowy kod jest częścią większego przykładu udostępnionego dla <xref:System.Security.CodeAccessPermission> klasy.  
  
 [!code-cpp[System.Security.Permissions.NameIdPermission#11](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/CPP/nameidpermission.cpp#11)]
 [!code-csharp[System.Security.Permissions.NameIdPermission#11](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/CS/nameidpermission.cs#11)]
 [!code-vb[System.Security.Permissions.NameIdPermission#11](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/VB/nameidpermission.vb#11)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Należy przesłonić tę metodę w klasie pochodnej.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="Union">
      <MemberSignature Language="C#" Value="public virtual System.Security.IPermission Union (System.Security.IPermission other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Security.IPermission Union(class System.Security.IPermission other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Security.CodeAccessPermission.Union(System.Security.IPermission)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Union (other As IPermission) As IPermission" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Security::IPermission ^ Union(System::Security::IPermission ^ other);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Security.IPermission.Union(System.Security.IPermission)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Security.Permissions</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Security.IPermission</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Security.IPermission" />
      </Parameters>
      <Docs>
        <param name="other">Uprawnienie do łączenia z uprawnieniami bieżącego. Należy tego samego typu co bieżący uprawnień.</param>
        <summary>W przypadku przesłonięcia w klasie pochodnej tworzy uprawnienia, które łączy bieżące uprawnienia i określony.</summary>
        <returns>Nowe uprawnienie reprezentuje złożenie bieżące uprawnienia i określony.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wynik wywołania <xref:System.Security.CodeAccessPermission.Union%2A> jest uprawnienia, które reprezentuje wszystkie operacje reprezentowany przez bieżące uprawnienia i określonego uprawnienia. Wszelkie żądania, który przekazuje albo uprawnienie przekazuje ich union.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje zastępująca <xref:System.Security.CodeAccessPermission.Union%2A> metody. Ten przykładowy kod jest częścią większego przykładu udostępnionego dla <xref:System.Security.CodeAccessPermission> klasy.  
  
 [!code-cpp[System.Security.Permissions.NameIdPermission#12](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/CPP/nameidpermission.cpp#12)]
 [!code-csharp[System.Security.Permissions.NameIdPermission#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/CS/nameidpermission.cs#12)]
 [!code-vb[System.Security.Permissions.NameIdPermission#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Security.Permissions.NameIdPermission/VB/nameidpermission.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">
          <paramref name="other" /> Parametr nie jest <see langword="null" />. Ta metoda jest obsługiwana tylko na tym poziomie podczas przekazywania <see langword="null" />.</exception>
        <block subset="none" type="overrides">
          <para>Należy przesłonić tę metodę w klasie pochodnej. Ma zwracać kopię uprawnienia, jeśli wartość <paramref name="other" /> parametr jest <see langword="null" />.</para>
        </block>
      </Docs>
    </Member>
  </Members>
</Type>