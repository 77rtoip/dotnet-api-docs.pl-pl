<Type Name="ExportProvider" FullName="System.ComponentModel.Composition.Hosting.ExportProvider">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c83a344c6e6cd1b10f5ae2390ada255ae3627d31" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69333133" /></Metadata><TypeSignature Language="C#" Value="public abstract class ExportProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ExportProvider extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.Composition.Hosting.ExportProvider" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ExportProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class ExportProvider abstract" />
  <TypeSignature Language="F#" Value="type ExportProvider = class" />
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.Composition</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Pobiera eksporty zgodne z określonym <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> obiektem.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ExportProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ExportProvider();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider" /> klasy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExportsChanged">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs&gt; ExportsChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs&gt; ExportsChanged" />
      <MemberSignature Language="DocId" Value="E:System.ComponentModel.Composition.Hosting.ExportProvider.ExportsChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ExportsChanged As EventHandler(Of ExportsChangeEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::ComponentModel::Composition::Hosting::ExportsChangeEventArgs ^&gt; ^ ExportsChanged;" />
      <MemberSignature Language="F#" Value="member this.ExportsChanged : EventHandler&lt;System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs&gt; " Usage="member this.ExportsChanged : System.EventHandler&lt;System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy Eksporty w <see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider" /> zmianie.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExportsChanging">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs&gt; ExportsChanging;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs&gt; ExportsChanging" />
      <MemberSignature Language="DocId" Value="E:System.ComponentModel.Composition.Hosting.ExportProvider.ExportsChanging" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ExportsChanging As EventHandler(Of ExportsChangeEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::ComponentModel::Composition::Hosting::ExportsChangeEventArgs ^&gt; ^ ExportsChanging;" />
      <MemberSignature Language="F#" Value="member this.ExportsChanging : EventHandler&lt;System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs&gt; " Usage="member this.ExportsChanging : System.EventHandler&lt;System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po zmianie danych eksportu.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetExport&lt;T&gt;">
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Pobiera określony eksport.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetExport&lt;T&gt;">
      <MemberSignature Language="C#" Value="public Lazy&lt;T&gt; GetExport&lt;T&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Lazy`1&lt;!!T&gt; GetExport&lt;T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExport``1" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExport(Of T) () As Lazy(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; Lazy&lt;T&gt; ^ GetExport();" />
      <MemberSignature Language="F#" Value="member this.GetExport : unit -&gt; Lazy&lt;'T&gt;" Usage="exportProvider.GetExport " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Lazy&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">Parametr <see cref="T:System.Lazy`1" /> typu obiektu do zwrócenia. Nazwa kontraktu jest również pochodną tego parametru typu.</typeparam>
        <summary>Zwraca eksport z nazwą kontraktu pochodzącą od określonego parametru typu. Jeśli nie istnieje dokładnie jeden pasujący eksport, zgłaszany jest wyjątek.</summary>
        <returns>Eksport z nazwą kontraktu pochodzącą od określonego parametru typu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nazwa kontraktu jest wynikiem wywołania <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A> `T`metody.  
  
 Nazwa kontraktu jest porównywana przy użyciu <xref:System.StringComparer.Ordinal%2A> właściwości do wykonania porównania bez uwzględniania wielkości liter.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">Brak obiektów z nazwą kontraktu <paramref name="T" /> pochodną w <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> obiekcie. <see cref="T:System.Lazy`1" />  
  
—lub— 
Istnieje więcej niż jeden <see cref="T:System.Lazy`1" /> obiekt z nazwą kontraktu <paramref name="T" /> pochodną w <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> obiekcie.</exception>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> Obiekt został usunięty z.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetExport&lt;T&gt;">
      <MemberSignature Language="C#" Value="public Lazy&lt;T&gt; GetExport&lt;T&gt; (string contractName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Lazy`1&lt;!!T&gt; GetExport&lt;T&gt;(string contractName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExport``1(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExport(Of T) (contractName As String) As Lazy(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; Lazy&lt;T&gt; ^ GetExport(System::String ^ contractName);" />
      <MemberSignature Language="F#" Value="member this.GetExport : string -&gt; Lazy&lt;'T&gt;" Usage="exportProvider.GetExport contractName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Lazy&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="contractName" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">Parametr <see cref="T:System.Lazy`1" /> typu obiektu do zwrócenia.</typeparam>
        <param name="contractName">Nazwa <see cref="T:System.Lazy`1" /> kontraktu obiektu do zwrócenia lub <see langword="null" /> lub pusty ciąg (""), aby użyć domyślnej nazwy kontraktu.</param>
        <summary>Zwraca eksport z określoną nazwą kontraktu. Jeśli nie istnieje dokładnie jeden pasujący eksport, zgłaszany jest wyjątek.</summary>
        <returns>Eksport z określoną nazwą kontraktu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nazwa kontraktu domyślnego jest wynikiem wywołania <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A> `T`metody.  
  
 Nazwa kontraktu jest porównywana przy użyciu <xref:System.StringComparer.Ordinal%2A> właściwości do wykonania porównania bez uwzględniania wielkości liter.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">Brak obiektów z nazwą kontraktu <paramref name="T" /> pochodną w <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> obiekcie. <see cref="T:System.Lazy`1" />  
  
—lub— 
Istnieje więcej niż jeden <see cref="T:System.Lazy`1" /> obiekt z nazwą kontraktu <paramref name="T" /> pochodną w <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> obiekcie.</exception>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> Obiekt został usunięty z.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetExport&lt;T,TMetadataView&gt;">
      <MemberSignature Language="C#" Value="public Lazy&lt;T,TMetadataView&gt; GetExport&lt;T,TMetadataView&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Lazy`2&lt;!!T, !!TMetadataView&gt; GetExport&lt;T, TMetadataView&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExport``2" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExport(Of T, TMetadataView) () As Lazy(Of T, TMetadataView)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T, typename TMetadataView&gt;&#xA; Lazy&lt;T, TMetadataView&gt; ^ GetExport();" />
      <MemberSignature Language="F#" Value="member this.GetExport : unit -&gt; Lazy&lt;'T, 'MetadataView&gt;" Usage="exportProvider.GetExport " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Lazy&lt;T,TMetadataView&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
        <TypeParameter Name="TMetadataView" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">Parametr <see cref="T:System.Lazy`2" /> typu obiektu do zwrócenia. Nazwa kontraktu jest również pochodną tego parametru typu.</typeparam>
        <typeparam name="TMetadataView">Typ widoku <see cref="T:System.Lazy`2" /> metadanych obiektu do zwrócenia.</typeparam>
        <summary>Zwraca eksport z nazwą kontraktu pochodzącą od określonego parametru typu. Jeśli nie istnieje dokładnie jeden pasujący eksport, zgłaszany jest wyjątek.</summary>
        <returns>System.Lazy`2</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nazwa kontraktu jest wynikiem wywołania <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A> `T`metody.  
  
 Nazwa kontraktu jest porównywana przy użyciu <xref:System.StringComparer.Ordinal%2A> właściwości do wykonania porównania bez uwzględniania wielkości liter.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">Brak obiektów z nazwą kontraktu <paramref name="T" /> pochodną w <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> obiekcie. <see cref="T:System.Lazy`2" />  
  
—lub— 
Istnieje więcej niż jeden <see cref="T:System.Lazy`2" /> obiekt z nazwą kontraktu <paramref name="T" /> pochodną w <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> obiekcie.</exception>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> Obiekt został usunięty z.</exception>
        <exception cref="T:System.InvalidOperationException"><paramref name="TMetadataView" />nie jest prawidłowym typem widoku metadanych.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetExport&lt;T,TMetadataView&gt;">
      <MemberSignature Language="C#" Value="public Lazy&lt;T,TMetadataView&gt; GetExport&lt;T,TMetadataView&gt; (string contractName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Lazy`2&lt;!!T, !!TMetadataView&gt; GetExport&lt;T, TMetadataView&gt;(string contractName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExport``2(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExport(Of T, TMetadataView) (contractName As String) As Lazy(Of T, TMetadataView)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T, typename TMetadataView&gt;&#xA; Lazy&lt;T, TMetadataView&gt; ^ GetExport(System::String ^ contractName);" />
      <MemberSignature Language="F#" Value="member this.GetExport : string -&gt; Lazy&lt;'T, 'MetadataView&gt;" Usage="exportProvider.GetExport contractName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Lazy&lt;T,TMetadataView&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
        <TypeParameter Name="TMetadataView" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="contractName" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">Parametr <see cref="T:System.Lazy`2" /> typu obiektu do zwrócenia.</typeparam>
        <typeparam name="TMetadataView">Typ widoku <see cref="T:System.Lazy`2" /> metadanych obiektu do zwrócenia.</typeparam>
        <param name="contractName">Nazwa <see cref="T:System.Lazy`2" /> kontraktu obiektu do zwrócenia lub <see langword="null" /> lub pusty ciąg (""), aby użyć domyślnej nazwy kontraktu.</param>
        <summary>Zwraca eksport z określoną nazwą kontraktu. Jeśli nie istnieje dokładnie jeden pasujący eksport, zgłaszany jest wyjątek.</summary>
        <returns>Eksport z określoną nazwą kontraktu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nazwa kontraktu domyślnego jest wynikiem wywołania <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A> `T`metody.  
  
 Nazwa kontraktu jest porównywana przy użyciu <xref:System.StringComparer.Ordinal%2A> właściwości do wykonania porównania bez uwzględniania wielkości liter.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">Brak obiektów z nazwą kontraktu <paramref name="T" /> pochodną w <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> obiekcie. <see cref="T:System.Lazy`2" />  
  
—lub— 
Istnieje więcej niż jeden <see cref="T:System.Lazy`2" /> obiekt z nazwą kontraktu <paramref name="T" /> pochodną w <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> obiekcie.</exception>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> Obiekt został usunięty z.</exception>
        <exception cref="T:System.InvalidOperationException"><paramref name="TMetadataView" />nie jest prawidłowym typem widoku metadanych.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetExportedValue&lt;T&gt;">
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Pobiera wyeksportowany obiekt.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetExportedValue&lt;T&gt;">
      <MemberSignature Language="C#" Value="public T GetExportedValue&lt;T&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!T GetExportedValue&lt;T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValue``1" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExportedValue(Of T) () As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; T GetExportedValue();" />
      <MemberSignature Language="F#" Value="member this.GetExportedValue : unit -&gt; 'T" Usage="exportProvider.GetExportedValue " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">Typ wyeksportowanego obiektu do zwrócenia. Nazwa kontraktu jest również pochodną tego parametru typu.</typeparam>
        <summary>Zwraca wyeksportowany obiekt z nazwą kontraktu pochodzącą od określonego parametru typu. Jeśli nie ma dokładnie jednego pasującego wyeksportowanego obiektu, zostanie zgłoszony wyjątek.</summary>
        <returns>Wyeksportowany obiekt z nazwą kontraktu pochodzącą od określonego parametru typu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nazwa kontraktu jest wynikiem wywołania <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A> `T`metody.  
  
 Nazwa kontraktu jest porównywana przy użyciu <xref:System.StringComparer.Ordinal%2A> właściwości do wykonania porównania bez uwzględniania wielkości liter.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">Nie ma żadnych wyeksportowanych obiektów z nazwą kontraktu pochodzącą <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />z <paramref name="T" /> w.  
  
—lub— 
Istnieje więcej niż jeden wyeksportowany obiekt z nazwą kontraktu pochodzącą z <paramref name="T" /> <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />w.</exception>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> Obiekt został usunięty z.</exception>
        <exception cref="T:System.ComponentModel.Composition.CompositionContractMismatchException">Nie można rzutować bazowego wyeksportowanego obiektu na <paramref name="T" />.</exception>
        <exception cref="T:System.ComponentModel.Composition.CompositionException">Wystąpił błąd podczas tworzenia kompozycji. <see cref="P:System.ComponentModel.Composition.CompositionException.Errors" />będzie zawierać kolekcję błędów, które wystąpiły.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetExportedValue&lt;T&gt;">
      <MemberSignature Language="C#" Value="public T GetExportedValue&lt;T&gt; (string contractName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!T GetExportedValue&lt;T&gt;(string contractName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValue``1(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExportedValue(Of T) (contractName As String) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; T GetExportedValue(System::String ^ contractName);" />
      <MemberSignature Language="F#" Value="member this.GetExportedValue : string -&gt; 'T" Usage="exportProvider.GetExportedValue contractName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="contractName" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">Typ wyeksportowanego obiektu do zwrócenia.</typeparam>
        <param name="contractName">Nazwa kontraktu wyeksportowanego obiektu do zwrócenia lub <see langword="null" /> lub pusty ciąg (""), aby użyć domyślnej nazwy kontraktu.</param>
        <summary>Zwraca wyeksportowany obiekt o określonej nazwie kontraktu. Jeśli nie ma dokładnie jednego pasującego wyeksportowanego obiektu, zostanie zgłoszony wyjątek.</summary>
        <returns>Wyeksportowany obiekt o określonej nazwie kontraktu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nazwa kontraktu domyślnego jest wynikiem wywołania <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A> `T`metody.  
  
 Nazwa kontraktu jest porównywana przy użyciu <xref:System.StringComparer.Ordinal%2A> właściwości do wykonania porównania bez uwzględniania wielkości liter.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">Nie ma żadnych wyeksportowanych obiektów z nazwą kontraktu pochodzącą <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />z <paramref name="T" /> w.  
  
—lub— 
Istnieje więcej niż jeden wyeksportowany obiekt z nazwą kontraktu pochodzącą z <paramref name="T" /> <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />w.</exception>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> Obiekt został usunięty z.</exception>
        <exception cref="T:System.ComponentModel.Composition.CompositionContractMismatchException">Nie można rzutować bazowego wyeksportowanego obiektu na <paramref name="T" />.</exception>
        <exception cref="T:System.ComponentModel.Composition.CompositionException">Wystąpił błąd podczas tworzenia kompozycji. <see cref="P:System.ComponentModel.Composition.CompositionException.Errors" />będzie zawierać kolekcję błędów, które wystąpiły.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetExportedValueOrDefault&lt;T&gt;">
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Pobiera określony wyeksportowany obiekt lub wartość domyślną, jeśli jest ona niedostępna.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetExportedValueOrDefault&lt;T&gt;">
      <MemberSignature Language="C#" Value="public T GetExportedValueOrDefault&lt;T&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!T GetExportedValueOrDefault&lt;T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValueOrDefault``1" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExportedValueOrDefault(Of T) () As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; T GetExportedValueOrDefault();" />
      <MemberSignature Language="F#" Value="member this.GetExportedValueOrDefault : unit -&gt; 'T" Usage="exportProvider.GetExportedValueOrDefault " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">Typ wyeksportowanego obiektu do zwrócenia. Nazwa kontraktu jest również pochodną tego parametru typu.</typeparam>
        <summary>Pobiera wyeksportowany obiekt o nazwie kontraktu pochodzącej od określonego parametru typu lub wartości domyślnej dla określonego typu lub zgłasza wyjątek, jeśli istnieje więcej niż jeden pasujący wyeksportowany obiekt.</summary>
        <returns>Wyeksportowany obiekt z nazwą kontraktu pochodzącą od <paramref name="T" />, jeśli został znaleziony; w przeciwnym razie wartość domyślna <paramref name="T" />dla.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli wyeksportowany obiekt nie zostanie znaleziony, Metoda ta zwraca odpowiednią wartość domyślną dla `T`, na przykład zero dla typów całkowitych, `false` dla typów logicznych i `null` dla typów referencyjnych.  
  
 Nazwa kontraktu jest wynikiem wywołania <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A> `T`metody.  
  
 Nazwa kontraktu jest porównywana przy użyciu <xref:System.StringComparer.Ordinal%2A> właściwości do wykonania porównania bez uwzględniania wielkości liter.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">Istnieje więcej niż jeden wyeksportowany obiekt z nazwą kontraktu pochodzącą z <paramref name="T" /> <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />w.</exception>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> Obiekt został usunięty z.</exception>
        <exception cref="T:System.ComponentModel.Composition.CompositionContractMismatchException">Nie można rzutować bazowego wyeksportowanego obiektu na <paramref name="T" />.</exception>
        <exception cref="T:System.ComponentModel.Composition.CompositionException">Wystąpił błąd podczas tworzenia kompozycji. <see cref="P:System.ComponentModel.Composition.CompositionException.Errors" />będzie zawierać kolekcję błędów, które wystąpiły.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetExportedValueOrDefault&lt;T&gt;">
      <MemberSignature Language="C#" Value="public T GetExportedValueOrDefault&lt;T&gt; (string contractName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!T GetExportedValueOrDefault&lt;T&gt;(string contractName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValueOrDefault``1(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExportedValueOrDefault(Of T) (contractName As String) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; T GetExportedValueOrDefault(System::String ^ contractName);" />
      <MemberSignature Language="F#" Value="member this.GetExportedValueOrDefault : string -&gt; 'T" Usage="exportProvider.GetExportedValueOrDefault contractName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="contractName" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">Typ wyeksportowanego obiektu do zwrócenia.</typeparam>
        <param name="contractName">Nazwa kontraktu wyeksportowanego obiektu do zwrócenia lub <see langword="null" /> lub pusty ciąg (""), aby użyć domyślnej nazwy kontraktu.</param>
        <summary>Pobiera wyeksportowany obiekt o określonej nazwie kontraktu lub wartości domyślnej określonego typu lub zgłasza wyjątek, jeśli istnieje więcej niż jeden pasujący wyeksportowany obiekt.</summary>
        <returns>Wyeksportowany obiekt o określonej nazwie kontraktu, jeśli znaleziono; w przeciwnym razie wartość domyślna dla <paramref name="T" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli wyeksportowany obiekt nie zostanie znaleziony, Metoda ta zwraca odpowiednią wartość domyślną dla `T`, na przykład zero dla typów całkowitych, `false` dla typów logicznych i `null` dla typów referencyjnych.  
  
 Nazwa kontraktu domyślnego jest wynikiem wywołania <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A> `T`metody.  
  
 Nazwa kontraktu jest porównywana przy użyciu <xref:System.StringComparer.Ordinal%2A> właściwości do wykonania porównania bez uwzględniania wielkości liter.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">Istnieje więcej niż jeden wyeksportowany obiekt o określonej nazwie kontraktu w <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />.</exception>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> Obiekt został usunięty z.</exception>
        <exception cref="T:System.ComponentModel.Composition.CompositionContractMismatchException">Nie można rzutować bazowego wyeksportowanego obiektu na <paramref name="T" />.</exception>
        <exception cref="T:System.ComponentModel.Composition.CompositionException">Wystąpił błąd podczas tworzenia kompozycji. <see cref="P:System.ComponentModel.Composition.CompositionException.Errors" />będzie zawierać kolekcję błędów, które wystąpiły.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetExportedValues&lt;T&gt;">
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Pobiera co najmniej jeden wyeksportowany obiekt.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetExportedValues&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;T&gt; GetExportedValues&lt;T&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; GetExportedValues&lt;T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValues``1" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExportedValues(Of T) () As IEnumerable(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; System::Collections::Generic::IEnumerable&lt;T&gt; ^ GetExportedValues();" />
      <MemberSignature Language="F#" Value="member this.GetExportedValues : unit -&gt; seq&lt;'T&gt;" Usage="exportProvider.GetExportedValues " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">Typ wyeksportowanego obiektu do zwrócenia. Nazwa kontraktu jest również pochodną tego parametru typu.</typeparam>
        <summary>Pobiera wszystkie wyeksportowane obiekty o nazwie kontraktu pochodzącej od określonego parametru typu.</summary>
        <returns>Wyeksportowane obiekty z nazwą kontraktu pochodzącą od określonego parametru typu, jeśli znaleziono; w przeciwnym razie pusty <see cref="T:System.Collections.ObjectModel.Collection`1" /> obiekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nazwa kontraktu jest wynikiem wywołania <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A> `T`metody.  
  
 Nazwa kontraktu jest porównywana przy użyciu <xref:System.StringComparer.Ordinal%2A> właściwości do wykonania porównania bez uwzględniania wielkości liter.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> Obiekt został usunięty z.</exception>
        <exception cref="T:System.ComponentModel.Composition.CompositionContractMismatchException">Nie można rzutować na <paramref name="T" />co najmniej jeden z bazowych eksportowanych obiektów.</exception>
        <exception cref="T:System.ComponentModel.Composition.CompositionException">Wystąpił błąd podczas tworzenia kompozycji. <see cref="P:System.ComponentModel.Composition.CompositionException.Errors" />będzie zawierać kolekcję błędów, które wystąpiły.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetExportedValues&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;T&gt; GetExportedValues&lt;T&gt; (string contractName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; GetExportedValues&lt;T&gt;(string contractName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValues``1(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExportedValues(Of T) (contractName As String) As IEnumerable(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; System::Collections::Generic::IEnumerable&lt;T&gt; ^ GetExportedValues(System::String ^ contractName);" />
      <MemberSignature Language="F#" Value="member this.GetExportedValues : string -&gt; seq&lt;'T&gt;" Usage="exportProvider.GetExportedValues contractName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="contractName" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">Typ wyeksportowanego obiektu do zwrócenia.</typeparam>
        <param name="contractName">Nazwa kontraktu wyeksportowanych obiektów do zwrócenia; lub <see langword="null" /> lub pusty ciąg (""), aby użyć domyślnej nazwy kontraktu.</param>
        <summary>Pobiera wszystkie wyeksportowane obiekty o określonej nazwie kontraktu.</summary>
        <returns>Wyeksportowane obiekty o określonej nazwie kontraktu, jeśli znaleziono; w przeciwnym razie pusty <see cref="T:System.Collections.ObjectModel.Collection`1" /> obiekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nazwa kontraktu domyślnego jest wynikiem wywołania <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A> `T`metody.  
  
 Nazwa kontraktu jest porównywana przy użyciu <xref:System.StringComparer.Ordinal%2A> właściwości do wykonania porównania bez uwzględniania wielkości liter.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> Obiekt został usunięty z.</exception>
        <exception cref="T:System.ComponentModel.Composition.CompositionContractMismatchException">Nie można rzutować na <paramref name="T" />co najmniej jedną z bazowych eksportowanych wartości.</exception>
        <exception cref="T:System.ComponentModel.Composition.CompositionException">Wystąpił błąd podczas tworzenia kompozycji. <see cref="P:System.ComponentModel.Composition.CompositionException.Errors" />będzie zawierać kolekcję błędów, które wystąpiły.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetExports">
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Pobiera wszystkie eksporty pasujące do określonych warunków.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetExports">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.ComponentModel.Composition.Primitives.Export&gt; GetExports (System.ComponentModel.Composition.Primitives.ImportDefinition definition);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.ComponentModel.Composition.Primitives.Export&gt; GetExports(class System.ComponentModel.Composition.Primitives.ImportDefinition definition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExports (definition As ImportDefinition) As IEnumerable(Of Export)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::ComponentModel::Composition::Primitives::Export ^&gt; ^ GetExports(System::ComponentModel::Composition::Primitives::ImportDefinition ^ definition);" />
      <MemberSignature Language="F#" Value="member this.GetExports : System.ComponentModel.Composition.Primitives.ImportDefinition -&gt; seq&lt;System.ComponentModel.Composition.Primitives.Export&gt;" Usage="exportProvider.GetExports definition" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.ComponentModel.Composition.Primitives.Export&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="definition" Type="System.ComponentModel.Composition.Primitives.ImportDefinition" />
      </Parameters>
      <Docs>
        <param name="definition">Obiekt, który definiuje warunki <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> obiektów do pobrania.</param>
        <summary>Pobiera wszystkie eksporty zgodne z warunkami określonej definicji importu.</summary>
        <returns>Kolekcja wszystkich <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> obiektów pasujących do warunku określonego przez <paramref name="definition" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException"><see cref="P:System.ComponentModel.Composition.Primitives.ImportDefinition.Cardinality" />jest <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ExactlyOne" /> i nie ma żadnych <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> obiektów, które pasują do warunków określonych <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" />.  
  
—lub— 
 <see cref="P:System.ComponentModel.Composition.Primitives.ImportDefinition.Cardinality" />jest <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ZeroOrOne" /> <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" />lub <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ExactlyOne" /> i zawiera więcej niż jeden obiekt odpowiadający warunkom określonego.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="definition" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetExports">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.ComponentModel.Composition.Primitives.Export&gt; GetExports (System.ComponentModel.Composition.Primitives.ImportDefinition definition, System.ComponentModel.Composition.Hosting.AtomicComposition atomicComposition);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.ComponentModel.Composition.Primitives.Export&gt; GetExports(class System.ComponentModel.Composition.Primitives.ImportDefinition definition, class System.ComponentModel.Composition.Hosting.AtomicComposition atomicComposition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::ComponentModel::Composition::Primitives::Export ^&gt; ^ GetExports(System::ComponentModel::Composition::Primitives::ImportDefinition ^ definition, System::ComponentModel::Composition::Hosting::AtomicComposition ^ atomicComposition);" />
      <MemberSignature Language="F#" Value="member this.GetExports : System.ComponentModel.Composition.Primitives.ImportDefinition * System.ComponentModel.Composition.Hosting.AtomicComposition -&gt; seq&lt;System.ComponentModel.Composition.Primitives.Export&gt;" Usage="exportProvider.GetExports (definition, atomicComposition)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.ComponentModel.Composition.Primitives.Export&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="definition" Type="System.ComponentModel.Composition.Primitives.ImportDefinition" />
        <Parameter Name="atomicComposition" Type="System.ComponentModel.Composition.Hosting.AtomicComposition" />
      </Parameters>
      <Docs>
        <param name="definition">Obiekt, który definiuje warunki <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> obiektów do pobrania.</param>
        <param name="atomicComposition">Kontener transakcyjny dla kompozycji.</param>
        <summary>Pobiera wszystkie eksporty zgodne z warunkami określonej definicji importu i kompozycji.</summary>
        <returns>Kolekcja wszystkich <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> obiektów pasujących do warunku określonego przez <paramref name="definition" /> i <paramref name="atomicComposition" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException"><see cref="P:System.ComponentModel.Composition.Primitives.ImportDefinition.Cardinality" />jest <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ExactlyOne" /> i nie ma żadnych <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> obiektów, które pasują do warunków określonych <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" />.  
  
—lub— 
 <see cref="P:System.ComponentModel.Composition.Primitives.ImportDefinition.Cardinality" />jest <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ZeroOrOne" /> <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" />lub <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ExactlyOne" /> i zawiera więcej niż jeden obiekt odpowiadający warunkom określonego.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="definition" />jest <see langword="null" />.  
  
—lub— 
 <paramref name="atomicComposition" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetExports">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;Lazy&lt;object,object&gt;&gt; GetExports (Type type, Type metadataViewType, string contractName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Lazy`2&lt;object, object&gt;&gt; GetExports(class System.Type type, class System.Type metadataViewType, string contractName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports(System.Type,System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;Lazy&lt;System::Object ^, System::Object ^&gt; ^&gt; ^ GetExports(Type ^ type, Type ^ metadataViewType, System::String ^ contractName);" />
      <MemberSignature Language="F#" Value="member this.GetExports : Type * Type * string -&gt; seq&lt;Lazy&lt;obj, obj&gt;&gt;" Usage="exportProvider.GetExports (type, metadataViewType, contractName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Lazy&lt;System.Object,System.Object&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="metadataViewType" Type="System.Type" />
        <Parameter Name="contractName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">Parametr <see cref="T:System.Lazy`2" /> typu obiektów do zwrócenia.</param>
        <param name="metadataViewType">Typ widoku <see cref="T:System.Lazy`2" /> metadanych obiektów do zwrócenia.</param>
        <param name="contractName">Nazwa <see cref="T:System.Lazy`2" /> kontraktu obiektu do zwrócenia lub <see langword="null" /> lub pusty ciąg (""), aby użyć domyślnej nazwy kontraktu.</param>
        <summary>Pobiera wszystkie eksporty z określoną nazwą kontraktu.</summary>
        <returns>Kolekcja wszystkich <see cref="T:System.Lazy`2" /> obiektów do dopasowania <paramref name="contractName" />kontraktu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nazwa kontraktu domyślnego jest wynikiem wywołania <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A> `type`metody.  
  
 Nazwa kontraktu jest porównywana przy użyciu <xref:System.StringComparer.Ordinal%2A> właściwości do wykonania porównania bez uwzględniania wielkości liter.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> Obiekt został usunięty z.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="type" />jest <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException"><paramref name="metadataViewType" />nie jest prawidłowym typem widoku metadanych.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetExports&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;Lazy&lt;T&gt;&gt; GetExports&lt;T&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Lazy`1&lt;!!T&gt;&gt; GetExports&lt;T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports``1" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExports(Of T) () As IEnumerable(Of Lazy(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; System::Collections::Generic::IEnumerable&lt;Lazy&lt;T&gt; ^&gt; ^ GetExports();" />
      <MemberSignature Language="F#" Value="member this.GetExports : unit -&gt; seq&lt;Lazy&lt;'T&gt;&gt;" Usage="exportProvider.GetExports " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Lazy&lt;T&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">Parametr <see cref="T:System.Lazy`1" /> typu obiektów do zwrócenia. Nazwa kontraktu jest również pochodną tego parametru typu.</typeparam>
        <summary>Pobiera wszystkie eksporty z nazwą kontraktu pochodzącą od określonego parametru typu.</summary>
        <returns>Obiekty z nazwą kontraktu <paramref name="T" />pochodną, jeśli znaleziono; w przeciwnym razie pusty <see cref="T:System.Collections.Generic.IEnumerable`1" /> obiekt. <see cref="T:System.Lazy`1" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nazwa kontraktu jest wynikiem wywołania <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A> `T`metody.  
  
 Nazwa kontraktu jest porównywana przy użyciu <xref:System.StringComparer.Ordinal%2A> właściwości do wykonania porównania bez uwzględniania wielkości liter.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> Obiekt został usunięty z.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetExports&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;Lazy&lt;T&gt;&gt; GetExports&lt;T&gt; (string contractName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Lazy`1&lt;!!T&gt;&gt; GetExports&lt;T&gt;(string contractName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports``1(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExports(Of T) (contractName As String) As IEnumerable(Of Lazy(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; System::Collections::Generic::IEnumerable&lt;Lazy&lt;T&gt; ^&gt; ^ GetExports(System::String ^ contractName);" />
      <MemberSignature Language="F#" Value="member this.GetExports : string -&gt; seq&lt;Lazy&lt;'T&gt;&gt;" Usage="exportProvider.GetExports contractName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Lazy&lt;T&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="contractName" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">Parametr <see cref="T:System.Lazy`1" /> typu obiektów do zwrócenia.</typeparam>
        <param name="contractName">Nazwa <see cref="T:System.Lazy`1" /> kontraktu obiektów do zwrócenia lub <see langword="null" /> ciąg pusty (""), aby użyć domyślnej nazwy kontraktu.</param>
        <summary>Pobiera wszystkie eksporty z określoną nazwą kontraktu.</summary>
        <returns>Obiekty o określonej nazwie kontraktu, jeśli zostały znalezione; w przeciwnym razie pusty <see cref="T:System.Collections.Generic.IEnumerable`1" /> obiekt. <see cref="T:System.Lazy`1" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nazwa kontraktu domyślnego jest wynikiem wywołania <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A> `T`metody.  
  
 Nazwa kontraktu jest porównywana przy użyciu <xref:System.StringComparer.Ordinal%2A> właściwości do wykonania porównania bez uwzględniania wielkości liter.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> Obiekt został usunięty z.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetExports&lt;T,TMetadataView&gt;">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;Lazy&lt;T,TMetadataView&gt;&gt; GetExports&lt;T,TMetadataView&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Lazy`2&lt;!!T, !!TMetadataView&gt;&gt; GetExports&lt;T, TMetadataView&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports``2" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExports(Of T, TMetadataView) () As IEnumerable(Of Lazy(Of T, TMetadataView))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T, typename TMetadataView&gt;&#xA; System::Collections::Generic::IEnumerable&lt;Lazy&lt;T, TMetadataView&gt; ^&gt; ^ GetExports();" />
      <MemberSignature Language="F#" Value="member this.GetExports : unit -&gt; seq&lt;Lazy&lt;'T, 'MetadataView&gt;&gt;" Usage="exportProvider.GetExports " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Lazy&lt;T,TMetadataView&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
        <TypeParameter Name="TMetadataView" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">Parametr <see cref="T:System.Lazy`2" /> typu obiektów do zwrócenia. Nazwa kontraktu jest również pochodną tego parametru typu.</typeparam>
        <typeparam name="TMetadataView">Typ widoku <see cref="T:System.Lazy`2" /> metadanych obiektów do zwrócenia.</typeparam>
        <summary>Pobiera wszystkie eksporty z nazwą kontraktu pochodzącą od określonego parametru typu.</summary>
        <returns>Obiekty z nazwą kontraktu <paramref name="T" />pochodną, jeśli znaleziono; w przeciwnym razie pusty <see cref="T:System.Collections.Generic.IEnumerable`1" /> obiekt. <see cref="T:System.Lazy`2" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nazwa kontraktu jest wynikiem wywołania <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A> `T`metody.  
  
 Nazwa kontraktu jest porównywana przy użyciu <xref:System.StringComparer.Ordinal%2A> właściwości do wykonania porównania bez uwzględniania wielkości liter.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> Obiekt został usunięty z.</exception>
        <exception cref="T:System.InvalidOperationException"><paramref name="TMetadataView" />nie jest prawidłowym typem widoku metadanych.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetExports&lt;T,TMetadataView&gt;">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;Lazy&lt;T,TMetadataView&gt;&gt; GetExports&lt;T,TMetadataView&gt; (string contractName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Lazy`2&lt;!!T, !!TMetadataView&gt;&gt; GetExports&lt;T, TMetadataView&gt;(string contractName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports``2(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExports(Of T, TMetadataView) (contractName As String) As IEnumerable(Of Lazy(Of T, TMetadataView))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T, typename TMetadataView&gt;&#xA; System::Collections::Generic::IEnumerable&lt;Lazy&lt;T, TMetadataView&gt; ^&gt; ^ GetExports(System::String ^ contractName);" />
      <MemberSignature Language="F#" Value="member this.GetExports : string -&gt; seq&lt;Lazy&lt;'T, 'MetadataView&gt;&gt;" Usage="exportProvider.GetExports contractName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Lazy&lt;T,TMetadataView&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
        <TypeParameter Name="TMetadataView" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="contractName" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">Parametr <see cref="T:System.Lazy`2" /> typu obiektów do zwrócenia. Nazwa kontraktu jest również pochodną tego parametru typu.</typeparam>
        <typeparam name="TMetadataView">Typ widoku <see cref="T:System.Lazy`2" /> metadanych obiektów do zwrócenia.</typeparam>
        <param name="contractName">Nazwa <see cref="T:System.Lazy`2" /> kontraktu obiektów do zwrócenia lub <see langword="null" /> ciąg pusty (""), aby użyć domyślnej nazwy kontraktu.</param>
        <summary>Pobiera wszystkie eksporty z określoną nazwą kontraktu.</summary>
        <returns>Obiekty z określoną nazwą kontraktu, jeśli zostały znalezione; w przeciwnym razie pusty <see cref="T:System.Collections.Generic.IEnumerable`1" /> obiekt. <see cref="T:System.Lazy`2" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nazwa kontraktu domyślnego jest wynikiem wywołania <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A> `T`metody.  
  
 Nazwa kontraktu jest porównywana przy użyciu <xref:System.StringComparer.Ordinal%2A> właściwości do wykonania porównania bez uwzględniania wielkości liter.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException"><see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> Obiekt został usunięty z.</exception>
        <exception cref="T:System.InvalidOperationException"><paramref name="TMetadataView" />nie jest prawidłowym typem widoku metadanych.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetExportsCore">
      <MemberSignature Language="C#" Value="protected abstract System.Collections.Generic.IEnumerable&lt;System.ComponentModel.Composition.Primitives.Export&gt; GetExportsCore (System.ComponentModel.Composition.Primitives.ImportDefinition definition, System.ComponentModel.Composition.Hosting.AtomicComposition atomicComposition);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class System.ComponentModel.Composition.Primitives.Export&gt; GetExportsCore(class System.ComponentModel.Composition.Primitives.ImportDefinition definition, class System.ComponentModel.Composition.Hosting.AtomicComposition atomicComposition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportsCore(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::Collections::Generic::IEnumerable&lt;System::ComponentModel::Composition::Primitives::Export ^&gt; ^ GetExportsCore(System::ComponentModel::Composition::Primitives::ImportDefinition ^ definition, System::ComponentModel::Composition::Hosting::AtomicComposition ^ atomicComposition);" />
      <MemberSignature Language="F#" Value="abstract member GetExportsCore : System.ComponentModel.Composition.Primitives.ImportDefinition * System.ComponentModel.Composition.Hosting.AtomicComposition -&gt; seq&lt;System.ComponentModel.Composition.Primitives.Export&gt;" Usage="exportProvider.GetExportsCore (definition, atomicComposition)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.ComponentModel.Composition.Primitives.Export&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="definition" Type="System.ComponentModel.Composition.Primitives.ImportDefinition" />
        <Parameter Name="atomicComposition" Type="System.ComponentModel.Composition.Hosting.AtomicComposition" />
      </Parameters>
      <Docs>
        <param name="definition">Obiekt, który definiuje warunki <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> zwracanych obiektów.</param>
        <param name="atomicComposition">Kontener transakcyjny dla kompozycji.</param>
        <summary>Pobiera wszystkie eksporty zgodne z ograniczeniem zdefiniowanym przez określoną definicję.</summary>
        <returns>Kolekcja zawierająca wszystkie eksporty zgodne z określonym warunkiem.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zastąpienia tej metody nie powinny traktować niezgodności z relacjami kardynalnymi jako błędy i nie powinny zgłaszać wyjątków w tych przypadkach. Na <xref:System.ComponentModel.Composition.Primitives.ImportDefinition.Cardinality%2A> przykład jeśli <xref:System.Collections.Generic.IEnumerable%601> jest <xref:System.ComponentModel.Composition.Primitives.ImportCardinality.ExactlyOne> i nie ma żadnych <xref:System.ComponentModel.Composition.Primitives.Export> obiektów, które pasują do określonych <xref:System.ComponentModel.Composition.Primitives.ImportDefinition>warunków, należy zwrócić pustą kolekcję.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnExportsChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnExportsChanged (System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnExportsChanged(class System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.OnExportsChanged(System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnExportsChanged (e As ExportsChangeEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnExportsChanged(System::ComponentModel::Composition::Hosting::ExportsChangeEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnExportsChanged : System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs -&gt; unit&#xA;override this.OnExportsChanged : System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs -&gt; unit" Usage="exportProvider.OnExportsChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary><see cref="E:System.ComponentModel.Composition.Hosting.ExportProvider.ExportsChanged" /> Podnosi zdarzenie.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnExportsChanging">
      <MemberSignature Language="C#" Value="protected virtual void OnExportsChanging (System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnExportsChanging(class System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.OnExportsChanging(System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnExportsChanging (e As ExportsChangeEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnExportsChanging(System::ComponentModel::Composition::Hosting::ExportsChangeEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnExportsChanging : System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs -&gt; unit&#xA;override this.OnExportsChanging : System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs -&gt; unit" Usage="exportProvider.OnExportsChanging e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary><see cref="E:System.ComponentModel.Composition.Hosting.ExportProvider.ExportsChanging" /> Podnosi zdarzenie.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetExports">
      <MemberSignature Language="C#" Value="public bool TryGetExports (System.ComponentModel.Composition.Primitives.ImportDefinition definition, System.ComponentModel.Composition.Hosting.AtomicComposition atomicComposition, out System.Collections.Generic.IEnumerable&lt;System.ComponentModel.Composition.Primitives.Export&gt; exports);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetExports(class System.ComponentModel.Composition.Primitives.ImportDefinition definition, class System.ComponentModel.Composition.Hosting.AtomicComposition atomicComposition, [out] class System.Collections.Generic.IEnumerable`1&lt;class System.ComponentModel.Composition.Primitives.Export&gt;&amp; exports) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.TryGetExports(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition,System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.Export}@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetExports(System::ComponentModel::Composition::Primitives::ImportDefinition ^ definition, System::ComponentModel::Composition::Hosting::AtomicComposition ^ atomicComposition, [Runtime::InteropServices::Out] System::Collections::Generic::IEnumerable&lt;System::ComponentModel::Composition::Primitives::Export ^&gt; ^ % exports);" />
      <MemberSignature Language="F#" Value="member this.TryGetExports : System.ComponentModel.Composition.Primitives.ImportDefinition * System.ComponentModel.Composition.Hosting.AtomicComposition *  -&gt; bool" Usage="exportProvider.TryGetExports (definition, atomicComposition, exports)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="definition" Type="System.ComponentModel.Composition.Primitives.ImportDefinition" />
        <Parameter Name="atomicComposition" Type="System.ComponentModel.Composition.Hosting.AtomicComposition" />
        <Parameter Name="exports" Type="System.Collections.Generic.IEnumerable&lt;System.ComponentModel.Composition.Primitives.Export&gt;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="definition">Obiekt, który definiuje warunki <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> obiektów do pobrania.</param>
        <param name="atomicComposition">Kontener transakcyjny dla kompozycji.</param>
        <param name="exports">Gdy ta metoda zwraca, zawiera kolekcję <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> obiektów, które pasują do warunków zdefiniowanych przez <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" />, jeśli zostały znalezione; w przeciwnym razie pusty <see cref="T:System.Collections.Generic.IEnumerable`1" /> obiekt. Ten parametr jest przekazywany niezainicjowany.</param>
        <summary>Pobiera wszystkie eksporty zgodne z warunkami określonego importu.</summary>
        <returns><see langword="true" />Jeśli <see cref="P:System.ComponentModel.Composition.Primitives.ImportDefinition.Cardinality" /> jest <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" />lub i<see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ZeroOrMore" /> nie ma żadnych obiektów, które pasują do warunków określonych; <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ZeroOrOne" /> <see langword="true" /> Jeśli jest<see cref="P:System.ComponentModel.Composition.Primitives.ImportDefinition.Cardinality" /> <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" />lub i istnieje dokładnie jeden<see cref="T:System.ComponentModel.Composition.Primitives.Export" />, który jest zgodny z warunkami określonymi; w przeciwnym razie. <see langword="false" /> <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ZeroOrOne" /> <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ExactlyOne" /></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="definition" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
