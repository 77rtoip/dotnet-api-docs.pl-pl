<Type Name="ExportProvider" FullName="System.ComponentModel.Composition.Hosting.ExportProvider">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d863cafd1a554f6db28964cde0826c6296842370" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39836677" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class ExportProvider" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ExportProvider extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.Composition.Hosting.ExportProvider" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ExportProvider" />
  <TypeSignature Language="C++ CLI" Value="public ref class ExportProvider abstract" />
  <TypeSignature Language="F#" Value="type ExportProvider = class" />
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.Composition</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Pobiera eksportu, które odpowiadają określonej <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> obiektu.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ExportProvider ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ExportProvider();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider" /> klasy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExportsChanged">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs&gt; ExportsChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs&gt; ExportsChanged" />
      <MemberSignature Language="DocId" Value="E:System.ComponentModel.Composition.Hosting.ExportProvider.ExportsChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ExportsChanged As EventHandler(Of ExportsChangeEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::ComponentModel::Composition::Hosting::ExportsChangeEventArgs ^&gt; ^ ExportsChanged;" />
      <MemberSignature Language="F#" Value="member this.ExportsChanged : EventHandler&lt;System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs&gt; " Usage="member this.ExportsChanged : System.EventHandler&lt;System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy polecenie eksportuje w <see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider" /> zmienić.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ExportsChanging">
      <MemberSignature Language="C#" Value="public event EventHandler&lt;System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs&gt; ExportsChanging;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler`1&lt;class System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs&gt; ExportsChanging" />
      <MemberSignature Language="DocId" Value="E:System.ComponentModel.Composition.Hosting.ExportProvider.ExportsChanging" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ExportsChanging As EventHandler(Of ExportsChangeEventArgs) " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler&lt;System::ComponentModel::Composition::Hosting::ExportsChangeEventArgs ^&gt; ^ ExportsChanging;" />
      <MemberSignature Language="F#" Value="member this.ExportsChanging : EventHandler&lt;System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs&gt; " Usage="member this.ExportsChanging : System.EventHandler&lt;System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs&gt; " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler&lt;System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy zmieniają się podana eksportu.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetExport&lt;T&gt;">
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Pobiera określony eksportu.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetExport&lt;T&gt;">
      <MemberSignature Language="C#" Value="public Lazy&lt;T&gt; GetExport&lt;T&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Lazy`1&lt;!!T&gt; GetExport&lt;T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExport``1" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExport(Of T) () As Lazy(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; Lazy&lt;T&gt; ^ GetExport();" />
      <MemberSignature Language="F#" Value="member this.GetExport : unit -&gt; Lazy&lt;'T&gt;" Usage="exportProvider.GetExport " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Lazy&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">Parametr typu <see cref="T:System.Lazy`1" /> obiekt do zwrotu. Nazwa kontraktu jest również pochodną tego parametru typu.</typeparam>
        <summary>Zwraca eksportu o nazwie kontraktu, pochodzi z określonego typu parametru. Jeśli nie istnieje dokładnie jednego pasującego eksportu, jest zgłaszany wyjątek.</summary>
        <returns>Eksportowanie z nazwą kontraktu, pochodzi z określonego typu parametru.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nazwa kontraktu jest wyniku wywołania metody <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A> metody `T`.  
  
 Nazwa kontraktu jest porównywana za pomocą <xref:System.StringComparer.Ordinal%2A> właściwość, aby wykonać porównanie niejęzykowe, wielkość liter.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">Istnieją zero <see cref="T:System.Lazy`1" /> pochodną klasy obiektów o nazwie kontraktu <paramref name="T" /> w <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> obiektu.  
  
—lub— 
Istnieje więcej niż jeden <see cref="T:System.Lazy`1" /> pochodną obiektu o nazwie kontraktu <paramref name="T" /> w <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> obiektu.</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> Obiekt został usunięty z.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetExport&lt;T&gt;">
      <MemberSignature Language="C#" Value="public Lazy&lt;T&gt; GetExport&lt;T&gt; (string contractName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Lazy`1&lt;!!T&gt; GetExport&lt;T&gt;(string contractName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExport``1(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExport(Of T) (contractName As String) As Lazy(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; Lazy&lt;T&gt; ^ GetExport(System::String ^ contractName);" />
      <MemberSignature Language="F#" Value="member this.GetExport : string -&gt; Lazy&lt;'T&gt;" Usage="exportProvider.GetExport contractName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Lazy&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="contractName" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">Parametr typu <see cref="T:System.Lazy`1" /> obiekt do zwrotu.</typeparam>
        <param name="contractName">Nazwa kontraktu <see cref="T:System.Lazy`1" /> obiekt do zwrotu, lub <see langword="null" /> ani być pustym ciągiem ("") można używać domyślnej nazwy kontraktu.</param>
        <summary>Zwraca eksportu o nazwie określonej kontraktu. Jeśli nie istnieje dokładnie jednego pasującego eksportu, jest zgłaszany wyjątek.</summary>
        <returns>Eksportowanie z nazwą kontraktu określony.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślna nazwa kontraktu jest wyniku wywołania metody <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A> metody `T`.  
  
 Nazwa kontraktu jest porównywana za pomocą <xref:System.StringComparer.Ordinal%2A> właściwość, aby wykonać porównanie niejęzykowe, wielkość liter.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">Istnieją zero <see cref="T:System.Lazy`1" /> pochodną klasy obiektów o nazwie kontraktu <paramref name="T" /> w <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> obiektu.  
  
—lub— 
Istnieje więcej niż jeden <see cref="T:System.Lazy`1" /> pochodną obiektu o nazwie kontraktu <paramref name="T" /> w <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> obiektu.</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> Obiekt został usunięty z.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetExport&lt;T,TMetadataView&gt;">
      <MemberSignature Language="C#" Value="public Lazy&lt;T,TMetadataView&gt; GetExport&lt;T,TMetadataView&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Lazy`2&lt;!!T, !!TMetadataView&gt; GetExport&lt;T, TMetadataView&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExport``2" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExport(Of T, TMetadataView) () As Lazy(Of T, TMetadataView)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T, typename TMetadataView&gt;&#xA; Lazy&lt;T, TMetadataView&gt; ^ GetExport();" />
      <MemberSignature Language="F#" Value="member this.GetExport : unit -&gt; Lazy&lt;'T, 'MetadataView&gt;" Usage="exportProvider.GetExport " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Lazy&lt;T,TMetadataView&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
        <TypeParameter Name="TMetadataView" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">Parametr typu <see cref="T:System.Lazy`2" /> obiekt do zwrotu. Nazwa kontraktu jest również pochodną tego parametru typu.</typeparam>
        <typeparam name="TMetadataView">Typ widoku metadanych <see cref="T:System.Lazy`2" /> obiekt do zwrotu.</typeparam>
        <summary>Zwraca eksportu o nazwie kontraktu, pochodzi z określonego typu parametru. Jeśli nie istnieje dokładnie jednego pasującego eksportu, jest zgłaszany wyjątek.</summary>
        <returns>System.Lazy`2</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nazwa kontraktu jest wyniku wywołania metody <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A> metody `T`.  
  
 Nazwa kontraktu jest porównywana za pomocą <xref:System.StringComparer.Ordinal%2A> właściwość, aby wykonać porównanie niejęzykowe, wielkość liter.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">Istnieją zero <see cref="T:System.Lazy`2" /> pochodną klasy obiektów o nazwie kontraktu <paramref name="T" /> w <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> obiektu.  
  
—lub— 
Istnieje więcej niż jeden <see cref="T:System.Lazy`2" /> pochodną obiektu o nazwie kontraktu <paramref name="T" /> w <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> obiektu.</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> Obiekt został usunięty z.</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="TMetadataView" /> nie jest prawidłowym widoku typem metadanych.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetExport&lt;T,TMetadataView&gt;">
      <MemberSignature Language="C#" Value="public Lazy&lt;T,TMetadataView&gt; GetExport&lt;T,TMetadataView&gt; (string contractName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Lazy`2&lt;!!T, !!TMetadataView&gt; GetExport&lt;T, TMetadataView&gt;(string contractName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExport``2(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExport(Of T, TMetadataView) (contractName As String) As Lazy(Of T, TMetadataView)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T, typename TMetadataView&gt;&#xA; Lazy&lt;T, TMetadataView&gt; ^ GetExport(System::String ^ contractName);" />
      <MemberSignature Language="F#" Value="member this.GetExport : string -&gt; Lazy&lt;'T, 'MetadataView&gt;" Usage="exportProvider.GetExport contractName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Lazy&lt;T,TMetadataView&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
        <TypeParameter Name="TMetadataView" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="contractName" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">Parametr typu <see cref="T:System.Lazy`2" /> obiekt do zwrotu.</typeparam>
        <typeparam name="TMetadataView">Typ widoku metadanych <see cref="T:System.Lazy`2" /> obiekt do zwrotu.</typeparam>
        <param name="contractName">Nazwa kontraktu <see cref="T:System.Lazy`2" /> obiekt do zwrotu, lub <see langword="null" /> ani być pustym ciągiem ("") można używać domyślnej nazwy kontraktu.</param>
        <summary>Zwraca eksportu o nazwie określonej kontraktu. Jeśli nie istnieje dokładnie jednego pasującego eksportu, jest zgłaszany wyjątek.</summary>
        <returns>Eksportowanie z nazwą kontraktu określony.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślna nazwa kontraktu jest wyniku wywołania metody <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A> metody `T`.  
  
 Nazwa kontraktu jest porównywana za pomocą <xref:System.StringComparer.Ordinal%2A> właściwość, aby wykonać porównanie niejęzykowe, wielkość liter.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">Istnieją zero <see cref="T:System.Lazy`2" /> pochodną klasy obiektów o nazwie kontraktu <paramref name="T" /> w <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> obiektu.  
  
—lub— 
Istnieje więcej niż jeden <see cref="T:System.Lazy`2" /> pochodną obiektu o nazwie kontraktu <paramref name="T" /> w <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> obiektu.</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> Obiekt został usunięty z.</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="TMetadataView" /> nie jest prawidłowym widoku typem metadanych.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetExportedValue&lt;T&gt;">
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Pobiera eksportowanego obiektu.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetExportedValue&lt;T&gt;">
      <MemberSignature Language="C#" Value="public T GetExportedValue&lt;T&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!T GetExportedValue&lt;T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValue``1" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExportedValue(Of T) () As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; T GetExportedValue();" />
      <MemberSignature Language="F#" Value="member this.GetExportedValue : unit -&gt; 'T" Usage="exportProvider.GetExportedValue " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">Typ wyeksportowanej obiekt do zwrotu. Nazwa kontraktu jest również pochodną tego parametru typu.</typeparam>
        <summary>Zwraca obiekt wyeksportowany z nazwą kontraktu, pochodzi z określonego typu parametru. Jeśli nie istnieje dokładnie jednego pasującego eksportowanego obiektu, jest zgłaszany wyjątek.</summary>
        <returns>Wyeksportowany obiekt o nazwie kontraktu, pochodzi z określonego typu parametru.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nazwa kontraktu jest wyniku wywołania metody <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A> metody `T`.  
  
 Nazwa kontraktu jest porównywana za pomocą <xref:System.StringComparer.Ordinal%2A> właściwość, aby wykonać porównanie niejęzykowe, wielkość liter.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">Istnieją zero eksportowane obiekty z nazwą kontraktu pochodną <paramref name="T" /> w <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />.  
  
—lub— 
Istnieje więcej niż jeden eksportowanego obiektu o nazwie kontraktu pochodną <paramref name="T" /> w <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />.</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> Obiekt został usunięty z.</exception>
        <exception cref="T:System.ComponentModel.Composition.CompositionContractMismatchException">Nie można rzutować obiektu źródłowego wyeksportowanego <paramref name="T" />.</exception>
        <exception cref="T:System.ComponentModel.Composition.CompositionException">Wystąpił błąd podczas tworzenia. <see cref="P:System.ComponentModel.Composition.CompositionException.Errors" /> zawiera kolekcję błędy, które wystąpiły.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetExportedValue&lt;T&gt;">
      <MemberSignature Language="C#" Value="public T GetExportedValue&lt;T&gt; (string contractName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!T GetExportedValue&lt;T&gt;(string contractName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValue``1(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExportedValue(Of T) (contractName As String) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; T GetExportedValue(System::String ^ contractName);" />
      <MemberSignature Language="F#" Value="member this.GetExportedValue : string -&gt; 'T" Usage="exportProvider.GetExportedValue contractName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="contractName" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">Typ wyeksportowanej obiekt do zwrotu.</typeparam>
        <param name="contractName">Nazwa kontraktu eksportowanego obiektu, aby zostały zwrócone, lub <see langword="null" /> ani być pustym ciągiem ("") można używać domyślnej nazwy kontraktu.</param>
        <summary>Zwraca eksportowanego obiektu o nazwie określonej kontraktu. Jeśli nie istnieje dokładnie jednego pasującego eksportowanego obiektu, jest zgłaszany wyjątek.</summary>
        <returns>Wyeksportowany obiekt o nazwie określonej kontraktu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślna nazwa kontraktu jest wyniku wywołania metody <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A> metody `T`.  
  
 Nazwa kontraktu jest porównywana za pomocą <xref:System.StringComparer.Ordinal%2A> właściwość, aby wykonać porównanie niejęzykowe, wielkość liter.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">Istnieją zero eksportowane obiekty z nazwą kontraktu pochodną <paramref name="T" /> w <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />.  
  
—lub— 
Istnieje więcej niż jeden eksportowanego obiektu o nazwie kontraktu pochodną <paramref name="T" /> w <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />.</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> Obiekt został usunięty z.</exception>
        <exception cref="T:System.ComponentModel.Composition.CompositionContractMismatchException">Nie można rzutować obiektu źródłowego wyeksportowanego <paramref name="T" />.</exception>
        <exception cref="T:System.ComponentModel.Composition.CompositionException">Wystąpił błąd podczas tworzenia. <see cref="P:System.ComponentModel.Composition.CompositionException.Errors" /> zawiera kolekcję błędy, które wystąpiły.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetExportedValueOrDefault&lt;T&gt;">
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Pobiera określony obiekt wyeksportowane lub wartość domyślną, jeśli jest ona niedostępna.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetExportedValueOrDefault&lt;T&gt;">
      <MemberSignature Language="C#" Value="public T GetExportedValueOrDefault&lt;T&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!T GetExportedValueOrDefault&lt;T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValueOrDefault``1" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExportedValueOrDefault(Of T) () As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; T GetExportedValueOrDefault();" />
      <MemberSignature Language="F#" Value="member this.GetExportedValueOrDefault : unit -&gt; 'T" Usage="exportProvider.GetExportedValueOrDefault " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">Typ wyeksportowanej obiekt do zwrotu. Nazwa kontraktu jest również pochodną tego parametru typu.</typeparam>
        <summary>Pobiera eksportowanego obiektu o nazwie kontraktu pochodzące z parametru określonego typu lub wartość domyślną dla określonego typu lub zgłasza wyjątek, jeśli istnieje więcej niż jednego dopasowania eksportowanego obiektu.</summary>
        <returns>Eksportowanego obiektu o nazwie kontraktu pochodną <paramref name="T" />, jeśli znaleziono; w przeciwnym razie wartość domyślna dla <paramref name="T" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli nie można odnaleźć wyeksportowanego obiektu, ta metoda zwraca wartość odpowiednią wartość domyślną dla `T`; na przykład, wartość zero dla typów całkowitoliczbowych `false` dotyczące typów logicznych i `null` dla typów odwołań.  
  
 Nazwa kontraktu jest wyniku wywołania metody <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A> metody `T`.  
  
 Nazwa kontraktu jest porównywana za pomocą <xref:System.StringComparer.Ordinal%2A> właściwość, aby wykonać porównanie niejęzykowe, wielkość liter.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">Istnieje więcej niż jeden eksportowanego obiektu o nazwie kontraktu pochodną <paramref name="T" /> w <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />.</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> Obiekt został usunięty z.</exception>
        <exception cref="T:System.ComponentModel.Composition.CompositionContractMismatchException">Nie można rzutować obiektu źródłowego wyeksportowanego <paramref name="T" />.</exception>
        <exception cref="T:System.ComponentModel.Composition.CompositionException">Wystąpił błąd podczas tworzenia. <see cref="P:System.ComponentModel.Composition.CompositionException.Errors" /> zawiera kolekcję błędy, które wystąpiły.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetExportedValueOrDefault&lt;T&gt;">
      <MemberSignature Language="C#" Value="public T GetExportedValueOrDefault&lt;T&gt; (string contractName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance !!T GetExportedValueOrDefault&lt;T&gt;(string contractName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValueOrDefault``1(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExportedValueOrDefault(Of T) (contractName As String) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; T GetExportedValueOrDefault(System::String ^ contractName);" />
      <MemberSignature Language="F#" Value="member this.GetExportedValueOrDefault : string -&gt; 'T" Usage="exportProvider.GetExportedValueOrDefault contractName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="contractName" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">Typ wyeksportowanej obiekt do zwrotu.</typeparam>
        <param name="contractName">Nazwa kontraktu eksportowanego obiektu, aby zostały zwrócone, lub <see langword="null" /> ani być pustym ciągiem ("") można używać domyślnej nazwy kontraktu.</param>
        <summary>Pobiera eksportowanego obiektu o nazwie określonej umowy lub wartość domyślną dla określonego typu lub zgłasza wyjątek, jeśli istnieje więcej niż jednego dopasowania eksportowanego obiektu.</summary>
        <returns>Wyeksportowany obiekt za pomocą określonego kontraktu o tej nazwie, jeśli znaleziono; w przeciwnym razie wartość domyślna <paramref name="T" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli nie można odnaleźć wyeksportowanego obiektu, ta metoda zwraca wartość odpowiednią wartość domyślną dla `T`; na przykład, wartość zero dla typów całkowitoliczbowych `false` dotyczące typów logicznych i `null` dla typów odwołań.  
  
 Domyślna nazwa kontraktu jest wyniku wywołania metody <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A> metody `T`.  
  
 Nazwa kontraktu jest porównywana za pomocą <xref:System.StringComparer.Ordinal%2A> właściwość, aby wykonać porównanie niejęzykowe, wielkość liter.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">Istnieje więcej niż jeden eksportowanego obiektu o nazwie określonej umowy w <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />.</exception>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> Obiekt został usunięty z.</exception>
        <exception cref="T:System.ComponentModel.Composition.CompositionContractMismatchException">Nie można rzutować obiektu źródłowego wyeksportowanego <paramref name="T" />.</exception>
        <exception cref="T:System.ComponentModel.Composition.CompositionException">Wystąpił błąd podczas tworzenia. <see cref="P:System.ComponentModel.Composition.CompositionException.Errors" /> zawiera kolekcję błędy, które wystąpiły.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetExportedValues&lt;T&gt;">
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Pobiera jeden lub więcej obiektów wyeksportowane.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetExportedValues&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;T&gt; GetExportedValues&lt;T&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; GetExportedValues&lt;T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValues``1" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExportedValues(Of T) () As IEnumerable(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; System::Collections::Generic::IEnumerable&lt;T&gt; ^ GetExportedValues();" />
      <MemberSignature Language="F#" Value="member this.GetExportedValues : unit -&gt; seq&lt;'T&gt;" Usage="exportProvider.GetExportedValues " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">Typ wyeksportowanej obiekt do zwrotu. Nazwa kontraktu jest również pochodną tego parametru typu.</typeparam>
        <summary>Pobiera eksportowane obiekty z nazwą kontraktu, pochodzi z określonego typu parametru.</summary>
        <returns>Eksportowane obiekty z nazwą kontraktu pochodzące z parametru określonego typu, jeśli znaleziono; w przeciwnym razie pusta <see cref="T:System.Collections.ObjectModel.Collection`1" /> obiektu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nazwa kontraktu jest wyniku wywołania metody <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A> metody `T`.  
  
 Nazwa kontraktu jest porównywana za pomocą <xref:System.StringComparer.Ordinal%2A> właściwość, aby wykonać porównanie niejęzykowe, wielkość liter.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> Obiekt został usunięty z.</exception>
        <exception cref="T:System.ComponentModel.Composition.CompositionContractMismatchException">Co najmniej jeden z podstawowych eksportowane obiekty nie można rzutować <paramref name="T" />.</exception>
        <exception cref="T:System.ComponentModel.Composition.CompositionException">Wystąpił błąd podczas tworzenia. <see cref="P:System.ComponentModel.Composition.CompositionException.Errors" /> zawiera kolekcję błędy, które wystąpiły.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetExportedValues&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;T&gt; GetExportedValues&lt;T&gt; (string contractName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; GetExportedValues&lt;T&gt;(string contractName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportedValues``1(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExportedValues(Of T) (contractName As String) As IEnumerable(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; System::Collections::Generic::IEnumerable&lt;T&gt; ^ GetExportedValues(System::String ^ contractName);" />
      <MemberSignature Language="F#" Value="member this.GetExportedValues : string -&gt; seq&lt;'T&gt;" Usage="exportProvider.GetExportedValues contractName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="contractName" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">Typ wyeksportowanej obiekt do zwrotu.</typeparam>
        <param name="contractName">Nazwa kontraktu wyeksportowanych obiektów, które ma być zwrócona. lub <see langword="null" /> ani być pustym ciągiem ("") można używać domyślnej nazwy kontraktu.</param>
        <summary>Pobiera eksportowane obiekty o nazwie określonej kontraktu.</summary>
        <returns>Eksportowane obiekty za pomocą kontraktu określonej nazwy, jeśli znaleziono; w przeciwnym razie pusta <see cref="T:System.Collections.ObjectModel.Collection`1" /> obiektu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślna nazwa kontraktu jest wyniku wywołania metody <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A> metody `T`.  
  
 Nazwa kontraktu jest porównywana za pomocą <xref:System.StringComparer.Ordinal%2A> właściwość, aby wykonać porównanie niejęzykowe, wielkość liter.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> Obiekt został usunięty z.</exception>
        <exception cref="T:System.ComponentModel.Composition.CompositionContractMismatchException">Co najmniej jeden z podstawowych wartości eksportowanych nie można rzutować <paramref name="T" />.</exception>
        <exception cref="T:System.ComponentModel.Composition.CompositionException">Wystąpił błąd podczas tworzenia. <see cref="P:System.ComponentModel.Composition.CompositionException.Errors" /> zawiera kolekcję błędy, które wystąpiły.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetExports">
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Pobiera wszystkich eksporty określonych warunków dopasowywania.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetExports">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.ComponentModel.Composition.Primitives.Export&gt; GetExports (System.ComponentModel.Composition.Primitives.ImportDefinition definition);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.ComponentModel.Composition.Primitives.Export&gt; GetExports(class System.ComponentModel.Composition.Primitives.ImportDefinition definition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExports (definition As ImportDefinition) As IEnumerable(Of Export)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::ComponentModel::Composition::Primitives::Export ^&gt; ^ GetExports(System::ComponentModel::Composition::Primitives::ImportDefinition ^ definition);" />
      <MemberSignature Language="F#" Value="member this.GetExports : System.ComponentModel.Composition.Primitives.ImportDefinition -&gt; seq&lt;System.ComponentModel.Composition.Primitives.Export&gt;" Usage="exportProvider.GetExports definition" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.ComponentModel.Composition.Primitives.Export&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="definition" Type="System.ComponentModel.Composition.Primitives.ImportDefinition" />
      </Parameters>
      <Docs>
        <param name="definition">Obiekt, który definiuje warunki <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> obiektów do pobrania.</param>
        <summary>Pobiera wszystkich eksporty, zgodnych z warunkami definicji określonej importu.</summary>
        <returns>Kolekcja wszystkich <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> obiektów spełniających warunek określony przez <paramref name="definition" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">
          <see cref="P:System.ComponentModel.Composition.Primitives.ImportDefinition.Cardinality" /> jest <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ExactlyOne" /> wiąże się z zera <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> obiekty, które są zgodne z określonym <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" />.  
  
—lub— 
 <see cref="P:System.ComponentModel.Composition.Primitives.ImportDefinition.Cardinality" /> jest <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ZeroOrOne" /> lub <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ExactlyOne" /> i ma więcej niż jedną <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> obiekt, który pasuje do warunków określonych <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" />.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="definition" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetExports">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;System.ComponentModel.Composition.Primitives.Export&gt; GetExports (System.ComponentModel.Composition.Primitives.ImportDefinition definition, System.ComponentModel.Composition.Hosting.AtomicComposition atomicComposition);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.ComponentModel.Composition.Primitives.Export&gt; GetExports(class System.ComponentModel.Composition.Primitives.ImportDefinition definition, class System.ComponentModel.Composition.Hosting.AtomicComposition atomicComposition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;System::ComponentModel::Composition::Primitives::Export ^&gt; ^ GetExports(System::ComponentModel::Composition::Primitives::ImportDefinition ^ definition, System::ComponentModel::Composition::Hosting::AtomicComposition ^ atomicComposition);" />
      <MemberSignature Language="F#" Value="member this.GetExports : System.ComponentModel.Composition.Primitives.ImportDefinition * System.ComponentModel.Composition.Hosting.AtomicComposition -&gt; seq&lt;System.ComponentModel.Composition.Primitives.Export&gt;" Usage="exportProvider.GetExports (definition, atomicComposition)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.ComponentModel.Composition.Primitives.Export&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="definition" Type="System.ComponentModel.Composition.Primitives.ImportDefinition" />
        <Parameter Name="atomicComposition" Type="System.ComponentModel.Composition.Hosting.AtomicComposition" />
      </Parameters>
      <Docs>
        <param name="definition">Obiekt, który definiuje warunki <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> obiektów do pobrania.</param>
        <param name="atomicComposition">Transakcyjne kontener kompozycji.</param>
        <summary>Pobiera wszystkich eksporty, spełniające warunki określonej importowania definicji i kompozycji.</summary>
        <returns>Kolekcja wszystkich <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> obiektów spełniających warunek określony przez <paramref name="definition" /> i <paramref name="atomicComposition" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ComponentModel.Composition.ImportCardinalityMismatchException">
          <see cref="P:System.ComponentModel.Composition.Primitives.ImportDefinition.Cardinality" /> jest <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ExactlyOne" /> wiąże się z zera <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> obiekty, które są zgodne z określonym <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" />.  
  
—lub— 
 <see cref="P:System.ComponentModel.Composition.Primitives.ImportDefinition.Cardinality" /> jest <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ZeroOrOne" /> lub <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ExactlyOne" /> i ma więcej niż jedną <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> obiekt, który pasuje do warunków określonych <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" />.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="definition" /> jest <see langword="null" />.  
  
—lub— 
 <paramref name="atomicComposition" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetExports">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;Lazy&lt;object,object&gt;&gt; GetExports (Type type, Type metadataViewType, string contractName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Lazy`2&lt;object, object&gt;&gt; GetExports(class System.Type type, class System.Type metadataViewType, string contractName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports(System.Type,System.Type,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Collections::Generic::IEnumerable&lt;Lazy&lt;System::Object ^, System::Object ^&gt; ^&gt; ^ GetExports(Type ^ type, Type ^ metadataViewType, System::String ^ contractName);" />
      <MemberSignature Language="F#" Value="member this.GetExports : Type * Type * string -&gt; seq&lt;Lazy&lt;obj, obj&gt;&gt;" Usage="exportProvider.GetExports (type, metadataViewType, contractName)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Lazy&lt;System.Object,System.Object&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="metadataViewType" Type="System.Type" />
        <Parameter Name="contractName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="type">Parametr typu <see cref="T:System.Lazy`2" /> obiekty do zwrócenia.</param>
        <param name="metadataViewType">Typ widoku metadanych <see cref="T:System.Lazy`2" /> obiekty do zwrócenia.</param>
        <param name="contractName">Nazwa kontraktu <see cref="T:System.Lazy`2" /> obiekt do zwrotu, lub <see langword="null" /> ani być pustym ciągiem ("") można używać domyślnej nazwy kontraktu.</param>
        <summary>Pobiera wszystkich eksporty o nazwie określonej kontraktu.</summary>
        <returns>Kolekcja wszystkich <see cref="T:System.Lazy`2" /> obiektów dla kontraktu dopasowywania <paramref name="contractName" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślna nazwa kontraktu jest wyniku wywołania metody <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A> metody `type`.  
  
 Nazwa kontraktu jest porównywana za pomocą <xref:System.StringComparer.Ordinal%2A> właściwość, aby wykonać porównanie niejęzykowe, wielkość liter.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> Obiekt został usunięty z.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="type" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="metadataViewType" /> nie jest prawidłowym widoku typem metadanych.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetExports&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;Lazy&lt;T&gt;&gt; GetExports&lt;T&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Lazy`1&lt;!!T&gt;&gt; GetExports&lt;T&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports``1" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExports(Of T) () As IEnumerable(Of Lazy(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; System::Collections::Generic::IEnumerable&lt;Lazy&lt;T&gt; ^&gt; ^ GetExports();" />
      <MemberSignature Language="F#" Value="member this.GetExports : unit -&gt; seq&lt;Lazy&lt;'T&gt;&gt;" Usage="exportProvider.GetExports " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Lazy&lt;T&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">Parametr typu <see cref="T:System.Lazy`1" /> obiekty do zwrócenia. Nazwa kontraktu jest również pochodną tego parametru typu.</typeparam>
        <summary>Pobiera wszystkich eksporty z nazwą kontraktu, pochodzi z określonego typu parametru.</summary>
        <returns>
          <see cref="T:System.Lazy`1" /> Pochodną klasy obiektów o nazwie kontraktu <paramref name="T" />, jeśli je znaleziono; w przeciwnym razie, pusta <see cref="T:System.Collections.Generic.IEnumerable`1" /> obiektu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nazwa kontraktu jest wyniku wywołania metody <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A> metody `T`.  
  
 Nazwa kontraktu jest porównywana za pomocą <xref:System.StringComparer.Ordinal%2A> właściwość, aby wykonać porównanie niejęzykowe, wielkość liter.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> Obiekt został usunięty z.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetExports&lt;T&gt;">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;Lazy&lt;T&gt;&gt; GetExports&lt;T&gt; (string contractName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Lazy`1&lt;!!T&gt;&gt; GetExports&lt;T&gt;(string contractName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports``1(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExports(Of T) (contractName As String) As IEnumerable(Of Lazy(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; System::Collections::Generic::IEnumerable&lt;Lazy&lt;T&gt; ^&gt; ^ GetExports(System::String ^ contractName);" />
      <MemberSignature Language="F#" Value="member this.GetExports : string -&gt; seq&lt;Lazy&lt;'T&gt;&gt;" Usage="exportProvider.GetExports contractName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Lazy&lt;T&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="contractName" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">Parametr typu <see cref="T:System.Lazy`1" /> obiekty do zwrócenia.</typeparam>
        <param name="contractName">Nazwa kontraktu <see cref="T:System.Lazy`1" /> obiektów, aby zostały zwrócone, lub <see langword="null" /> ani być pustym ciągiem ("") można używać domyślnej nazwy kontraktu.</param>
        <summary>Pobiera wszystkich eksporty o nazwie określonej kontraktu.</summary>
        <returns>
          <see cref="T:System.Lazy`1" /> Obiekty z określonym kontraktu nazwy, jeśli je znaleziono; w przeciwnym razie, pusta <see cref="T:System.Collections.Generic.IEnumerable`1" /> obiektu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślna nazwa kontraktu jest wyniku wywołania metody <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A> metody `T`.  
  
 Nazwa kontraktu jest porównywana za pomocą <xref:System.StringComparer.Ordinal%2A> właściwość, aby wykonać porównanie niejęzykowe, wielkość liter.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> Obiekt został usunięty z.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetExports&lt;T,TMetadataView&gt;">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;Lazy&lt;T,TMetadataView&gt;&gt; GetExports&lt;T,TMetadataView&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Lazy`2&lt;!!T, !!TMetadataView&gt;&gt; GetExports&lt;T, TMetadataView&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports``2" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExports(Of T, TMetadataView) () As IEnumerable(Of Lazy(Of T, TMetadataView))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T, typename TMetadataView&gt;&#xA; System::Collections::Generic::IEnumerable&lt;Lazy&lt;T, TMetadataView&gt; ^&gt; ^ GetExports();" />
      <MemberSignature Language="F#" Value="member this.GetExports : unit -&gt; seq&lt;Lazy&lt;'T, 'MetadataView&gt;&gt;" Usage="exportProvider.GetExports " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Lazy&lt;T,TMetadataView&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
        <TypeParameter Name="TMetadataView" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="T">Parametr typu <see cref="T:System.Lazy`2" /> obiekty do zwrócenia. Nazwa kontraktu jest również pochodną tego parametru typu.</typeparam>
        <typeparam name="TMetadataView">Typ widoku metadanych <see cref="T:System.Lazy`2" /> obiekty do zwrócenia.</typeparam>
        <summary>Pobiera wszystkich eksporty z nazwą kontraktu, pochodzi z określonego typu parametru.</summary>
        <returns>
          <see cref="T:System.Lazy`2" /> Pochodną klasy obiektów o nazwie kontraktu <paramref name="T" />, jeśli je znaleziono; w przeciwnym razie, pusta <see cref="T:System.Collections.Generic.IEnumerable`1" /> obiektu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nazwa kontraktu jest wyniku wywołania metody <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A> metody `T`.  
  
 Nazwa kontraktu jest porównywana za pomocą <xref:System.StringComparer.Ordinal%2A> właściwość, aby wykonać porównanie niejęzykowe, wielkość liter.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> Obiekt został usunięty z.</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="TMetadataView" /> nie jest prawidłowym widoku typem metadanych.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetExports&lt;T,TMetadataView&gt;">
      <MemberSignature Language="C#" Value="public System.Collections.Generic.IEnumerable&lt;Lazy&lt;T,TMetadataView&gt;&gt; GetExports&lt;T,TMetadataView&gt; (string contractName);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Collections.Generic.IEnumerable`1&lt;class System.Lazy`2&lt;!!T, !!TMetadataView&gt;&gt; GetExports&lt;T, TMetadataView&gt;(string contractName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExports``2(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetExports(Of T, TMetadataView) (contractName As String) As IEnumerable(Of Lazy(Of T, TMetadataView))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T, typename TMetadataView&gt;&#xA; System::Collections::Generic::IEnumerable&lt;Lazy&lt;T, TMetadataView&gt; ^&gt; ^ GetExports(System::String ^ contractName);" />
      <MemberSignature Language="F#" Value="member this.GetExports : string -&gt; seq&lt;Lazy&lt;'T, 'MetadataView&gt;&gt;" Usage="exportProvider.GetExports contractName" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Lazy&lt;T,TMetadataView&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
        <TypeParameter Name="TMetadataView" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="contractName" Type="System.String" />
      </Parameters>
      <Docs>
        <typeparam name="T">Parametr typu <see cref="T:System.Lazy`2" /> obiekty do zwrócenia. Nazwa kontraktu jest również pochodną tego parametru typu.</typeparam>
        <typeparam name="TMetadataView">Typ widoku metadanych <see cref="T:System.Lazy`2" /> obiekty do zwrócenia.</typeparam>
        <param name="contractName">Nazwa kontraktu <see cref="T:System.Lazy`2" /> obiektów, aby zostały zwrócone, lub <see langword="null" /> ani być pustym ciągiem ("") można używać domyślnej nazwy kontraktu.</param>
        <summary>Pobiera wszystkich eksporty o nazwie określonej kontraktu.</summary>
        <returns>
          <see cref="T:System.Lazy`2" /> Obiektów o nazwie określonej kontraktu, jeśli je znaleziono; w przeciwnym razie, pusta <see cref="T:System.Collections.Generic.IEnumerable`1" /> obiektu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślna nazwa kontraktu jest wyniku wywołania metody <xref:System.ComponentModel.Composition.AttributedModelServices.GetContractName%2A> metody `T`.  
  
 Nazwa kontraktu jest porównywana za pomocą <xref:System.StringComparer.Ordinal%2A> właściwość, aby wykonać porównanie niejęzykowe, wielkość liter.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> Obiekt został usunięty z.</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="TMetadataView" /> nie jest prawidłowym widoku typem metadanych.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetExportsCore">
      <MemberSignature Language="C#" Value="protected abstract System.Collections.Generic.IEnumerable&lt;System.ComponentModel.Composition.Primitives.Export&gt; GetExportsCore (System.ComponentModel.Composition.Primitives.ImportDefinition definition, System.ComponentModel.Composition.Hosting.AtomicComposition atomicComposition);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance class System.Collections.Generic.IEnumerable`1&lt;class System.ComponentModel.Composition.Primitives.Export&gt; GetExportsCore(class System.ComponentModel.Composition.Primitives.ImportDefinition definition, class System.ComponentModel.Composition.Hosting.AtomicComposition atomicComposition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.GetExportsCore(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract System::Collections::Generic::IEnumerable&lt;System::ComponentModel::Composition::Primitives::Export ^&gt; ^ GetExportsCore(System::ComponentModel::Composition::Primitives::ImportDefinition ^ definition, System::ComponentModel::Composition::Hosting::AtomicComposition ^ atomicComposition);" />
      <MemberSignature Language="F#" Value="abstract member GetExportsCore : System.ComponentModel.Composition.Primitives.ImportDefinition * System.ComponentModel.Composition.Hosting.AtomicComposition -&gt; seq&lt;System.ComponentModel.Composition.Primitives.Export&gt;" Usage="exportProvider.GetExportsCore (definition, atomicComposition)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.ComponentModel.Composition.Primitives.Export&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="definition" Type="System.ComponentModel.Composition.Primitives.ImportDefinition" />
        <Parameter Name="atomicComposition" Type="System.ComponentModel.Composition.Hosting.AtomicComposition" />
      </Parameters>
      <Docs>
        <param name="definition">Obiekt, który definiuje warunki <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> obiekty do zwrócenia.</param>
        <param name="atomicComposition">Transakcyjne kontener kompozycji.</param>
        <summary>Pobiera wszystkich eksporty spełniających ograniczenia określonego definicją.</summary>
        <returns>Kolekcja, która zawiera wszystkich eksporty spełniające określony warunek.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Przesłonięcia tej metody nie należy traktować związane z kardynalnością niezgodności jako błędy, a nie powinna zgłaszać wyjątków w tych przypadkach. Na przykład jeśli <xref:System.ComponentModel.Composition.Primitives.ImportDefinition.Cardinality%2A> jest <xref:System.ComponentModel.Composition.Primitives.ImportCardinality.ExactlyOne> wiąże się z zera <xref:System.ComponentModel.Composition.Primitives.Export> obiekty, które są zgodne z określonym <xref:System.ComponentModel.Composition.Primitives.ImportDefinition>, pusta <xref:System.Collections.Generic.IEnumerable%601> kolekcji ma zostać zwrócony.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnExportsChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnExportsChanged (System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnExportsChanged(class System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.OnExportsChanged(System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnExportsChanged (e As ExportsChangeEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnExportsChanged(System::ComponentModel::Composition::Hosting::ExportsChangeEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnExportsChanged : System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs -&gt; unit&#xA;override this.OnExportsChanged : System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs -&gt; unit" Usage="exportProvider.OnExportsChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywołuje <see cref="E:System.ComponentModel.Composition.Hosting.ExportProvider.ExportsChanged" /> zdarzeń.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnExportsChanging">
      <MemberSignature Language="C#" Value="protected virtual void OnExportsChanging (System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnExportsChanging(class System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.OnExportsChanging(System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnExportsChanging (e As ExportsChangeEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnExportsChanging(System::ComponentModel::Composition::Hosting::ExportsChangeEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnExportsChanging : System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs -&gt; unit&#xA;override this.OnExportsChanging : System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs -&gt; unit" Usage="exportProvider.OnExportsChanging e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.ComponentModel.Composition.Hosting.ExportsChangeEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywołuje <see cref="E:System.ComponentModel.Composition.Hosting.ExportProvider.ExportsChanging" /> zdarzeń.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetExports">
      <MemberSignature Language="C#" Value="public bool TryGetExports (System.ComponentModel.Composition.Primitives.ImportDefinition definition, System.ComponentModel.Composition.Hosting.AtomicComposition atomicComposition, out System.Collections.Generic.IEnumerable&lt;System.ComponentModel.Composition.Primitives.Export&gt; exports);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool TryGetExports(class System.ComponentModel.Composition.Primitives.ImportDefinition definition, class System.ComponentModel.Composition.Hosting.AtomicComposition atomicComposition, [out] class System.Collections.Generic.IEnumerable`1&lt;class System.ComponentModel.Composition.Primitives.Export&gt;&amp; exports) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.ExportProvider.TryGetExports(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition,System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.Export}@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool TryGetExports(System::ComponentModel::Composition::Primitives::ImportDefinition ^ definition, System::ComponentModel::Composition::Hosting::AtomicComposition ^ atomicComposition, [Runtime::InteropServices::Out] System::Collections::Generic::IEnumerable&lt;System::ComponentModel::Composition::Primitives::Export ^&gt; ^ % exports);" />
      <MemberSignature Language="F#" Value="member this.TryGetExports : System.ComponentModel.Composition.Primitives.ImportDefinition * System.ComponentModel.Composition.Hosting.AtomicComposition *  -&gt; bool" Usage="exportProvider.TryGetExports (definition, atomicComposition, exports)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="definition" Type="System.ComponentModel.Composition.Primitives.ImportDefinition" />
        <Parameter Name="atomicComposition" Type="System.ComponentModel.Composition.Hosting.AtomicComposition" />
        <Parameter Name="exports" Type="System.Collections.Generic.IEnumerable&lt;System.ComponentModel.Composition.Primitives.Export&gt;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="definition">Obiekt, który definiuje warunki <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> obiektów do pobrania.</param>
        <param name="atomicComposition">Transakcyjne kontener kompozycji.</param>
        <param name="exports">Po powrocie z tej metody zawiera zbiór <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> obiekty, które pasują do warunków zdefiniowanych przez <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" />, jeśli je znaleziono; w przeciwnym razie, pusta <see cref="T:System.Collections.Generic.IEnumerable`1" /> obiektu. Ten parametr jest przekazywany niezainicjowany.</param>
        <summary>Pobiera wszystkich eksporty odpowiadające warunkom określonym importu.</summary>
        <returns>
          <see langword="true" /> Jeśli <see cref="P:System.ComponentModel.Composition.Primitives.ImportDefinition.Cardinality" /> jest <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ZeroOrOne" /> lub <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ZeroOrMore" /> wiąże się z zera <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> obiekty, które są zgodne z określonym <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" />; <see langword="true" /> Jeśli <see cref="P:System.ComponentModel.Composition.Primitives.ImportDefinition.Cardinality" /> jest <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ZeroOrOne" /> lub <see cref="F:System.ComponentModel.Composition.Primitives.ImportCardinality.ExactlyOne" /> i ma dokładnie jednego <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> odpowiadającej warunki określonej <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" />; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="definition" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>