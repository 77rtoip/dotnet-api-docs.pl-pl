<Type Name="CompositionContainer" FullName="System.ComponentModel.Composition.Hosting.CompositionContainer">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6cee063c5ed9302aff48e02829b0156699236b83" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36712194" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class CompositionContainer : System.ComponentModel.Composition.Hosting.ExportProvider, IDisposable, System.ComponentModel.Composition.ICompositionService" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CompositionContainer extends System.ComponentModel.Composition.Hosting.ExportProvider implements class System.ComponentModel.Composition.ICompositionService, class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />
  <TypeSignature Language="VB.NET" Value="Public Class CompositionContainer&#xA;Inherits ExportProvider&#xA;Implements ICompositionService, IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class CompositionContainer : System::ComponentModel::Composition::Hosting::ExportProvider, IDisposable, System::ComponentModel::Composition::ICompositionService" />
  <TypeSignature Language="F#" Value="type CompositionContainer = class&#xA;    inherit ExportProvider&#xA;    interface ICompositionService&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.ComponentModel.Composition</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.Composition.Hosting.ExportProvider</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.ComponentModel.Composition.ICompositionService</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Zarządza kompozycji części.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.ComponentModel.Composition.Hosting.CompositionContainer> obiektu obsługuje dwa główne cele w aplikacji. Po pierwsze, przechowuje informacje o części, które są dostępne dla kompozycji i jakie są ich zależności i wykonuje kompozycji zawsze, gdy zestaw dostępnych części zmiany. Po drugie zapewnia metody, za pomocą których pobiera wystąpienia składa części lub wypełnia zależności wszechstronnej części aplikacji.  
  
> [!IMPORTANT]
>  Ten typ implementuje <xref:System.IDisposable> interfejsu. Po zakończeniu przy użyciu typu bezpośrednio lub pośrednio należy usunąć z niego. Do usuwania tego typu, należy wywołać jej <xref:System.IDisposable.Dispose%2A> metody w `try` / `catch` bloku. Do usunięcia ich pośrednio, użyj konstrukcji języka takiego jak `using` (w języku C#) lub `Using` (w języku Visual Basic). Aby uzyskać więcej informacji, zobacz sekcję "Przy użyciu obiektu który implementuje interfejs IDisposable" w <xref:System.IDisposable> interfejsu tematu.  
  
 Części może zostać udostępniona w kontenerze albo bezpośrednio lub za pomocą <xref:System.ComponentModel.Composition.Hosting.CompositionContainer.Catalog%2A> właściwości. Łatwy w tej części <xref:System.ComponentModel.Composition.Primitives.ComposablePartCatalog> są dostępne do kontenera do zrealizowania Importy, wraz z częściami dodać bezpośrednio.  
  
 <xref:System.ComponentModel.Composition.Hosting.CompositionContainer.Compose%2A> Metoda pozwala skonkretyzowanym elementy do dodania do istniejącego kontenera. Przy założeniu, że skład zakończy się pomyślnie, te elementy będą miały ich importów wypełnione części pobierane z kontenera i ich eksportu będą dostępne dla innych części. Importy oznaczona jako ponownemu składaniu zostanie zarejestrowany dla recomposition.  
  
 <xref:System.ComponentModel.Composition.Hosting.CompositionContainer.SatisfyImportsOnce%2A> Metoda pozwala części jego procesów importu wypełnione bez dodawany do kontenera. Jeśli kompozycji zakończy się pomyślnie, zostaną wypełnione importów części, ale części eksportu nie będą dostępne do innych części i importów nie zostaną zarejestrowane dla recomposition.  
  
 <xref:System.ComponentModel.Composition.Hosting.CompositionContainer> obiekty zawsze powinna zostać usunięta. Gdy <xref:System.ComponentModel.Composition.Hosting.CompositionContainer.Dispose%2A> po wywołaniu metody <xref:System.ComponentModel.Composition.Hosting.CompositionContainer> obiektu usuwa również wszystkie części, które zostały utworzone.  
  
 A <xref:System.ComponentModel.Composition.Hosting.CompositionContainer> obiektu, którego mogą uzyskać dostęp wiele wątków musi być skonstruowany przy `isThreadSafe` ustawiona `true`za pomocą <xref:System.ComponentModel.Composition.Hosting.CompositionContainer.%23ctor%28System.ComponentModel.Composition.Primitives.ComposablePartCatalog%2CSystem.Boolean%2CSystem.ComponentModel.Composition.Hosting.ExportProvider%5B%5D%29> konstruktora. Wydajność będzie wolniejsze w przypadku `isThreadSafe` jest `true`, tak więc zaleca się, że ten parametr jest ustawiony na `false` w scenariuszach jednowątkowy. Wartość domyślna to `false`.  
  
> [!WARNING]
>  A <xref:System.ComponentModel.Composition.Hosting.CompositionContainer> nigdy nie należy importować siebie lub części, które odwołuje się do niego. Odniesienie umożliwiają niezaufanych części umożliwiających dostęp do wszystkich części w kontenerze.  
  
   
  
## Examples  
 W poniższym przykładzie <xref:System.ComponentModel.Composition.Hosting.CompositionContainer> obiekt został zainicjowany z katalogu i jest używany do wypełniania importów części. W tym przykładzie wykorzystuje Model programowania opartego na atrybutach.  
  
 [!code-csharp[Composition.CompositionContainer#1](~/samples/snippets/csharp/VS_Snippets_Misc/composition.compositioncontainer/cs/program.cs#1)]
 [!code-vb[Composition.CompositionContainer#1](~/samples/snippets/visualbasic/VS_Snippets_Misc/composition.compositioncontainer/vb/module1.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CompositionContainer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.CompositionContainer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CompositionContainer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> klasy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CompositionContainer (params System.ComponentModel.Composition.Hosting.ExportProvider[] providers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.ComponentModel.Composition.Hosting.ExportProvider[] providers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.CompositionContainer.#ctor(System.ComponentModel.Composition.Hosting.ExportProvider[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (ParamArray providers As ExportProvider())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CompositionContainer(... cli::array &lt;System::ComponentModel::Composition::Hosting::ExportProvider ^&gt; ^ providers);" />
      <MemberSignature Language="F#" Value="new System.ComponentModel.Composition.Hosting.CompositionContainer : System.ComponentModel.Composition.Hosting.ExportProvider[] -&gt; System.ComponentModel.Composition.Hosting.CompositionContainer" Usage="new System.ComponentModel.Composition.Hosting.CompositionContainer providers" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="providers" Type="System.ComponentModel.Composition.Hosting.ExportProvider[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="providers">Tablica <see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider" /> obiektów, które dostarczają <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> dostęp do <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> obiektów, lub <see langword="null" /> można ustawić <see cref="P:System.ComponentModel.Composition.Hosting.CompositionContainer.Providers" /> na element empty <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> klasy dostawców określonego eksportu.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="providers" /> zawiera element, który jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CompositionContainer (System.ComponentModel.Composition.Hosting.CompositionOptions compositionOptions, params System.ComponentModel.Composition.Hosting.ExportProvider[] providers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.ComponentModel.Composition.Hosting.CompositionOptions compositionOptions, class System.ComponentModel.Composition.Hosting.ExportProvider[] providers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.CompositionContainer.#ctor(System.ComponentModel.Composition.Hosting.CompositionOptions,System.ComponentModel.Composition.Hosting.ExportProvider[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CompositionContainer(System::ComponentModel::Composition::Hosting::CompositionOptions compositionOptions, ... cli::array &lt;System::ComponentModel::Composition::Hosting::ExportProvider ^&gt; ^ providers);" />
      <MemberSignature Language="F#" Value="new System.ComponentModel.Composition.Hosting.CompositionContainer : System.ComponentModel.Composition.Hosting.CompositionOptions * System.ComponentModel.Composition.Hosting.ExportProvider[] -&gt; System.ComponentModel.Composition.Hosting.CompositionContainer" Usage="new System.ComponentModel.Composition.Hosting.CompositionContainer (compositionOptions, providers)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="compositionOptions" Type="System.ComponentModel.Composition.Hosting.CompositionOptions" />
        <Parameter Name="providers" Type="System.ComponentModel.Composition.Hosting.ExportProvider[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="compositionOptions">Obiekt, który określa zachowanie tego kontenera.</param>
        <param name="providers">Tablica <see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider" /> obiektów, które dostarczają <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> dostęp do <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> obiektów, lub <see langword="null" /> można ustawić <see cref="P:System.ComponentModel.Composition.Hosting.CompositionContainer.Providers" /> na element empty <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> klasy z opcjami i eksportu określonych dostawców.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="providers" /> zawiera element, który jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CompositionContainer (System.ComponentModel.Composition.Primitives.ComposablePartCatalog catalog, params System.ComponentModel.Composition.Hosting.ExportProvider[] providers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.ComponentModel.Composition.Primitives.ComposablePartCatalog catalog, class System.ComponentModel.Composition.Hosting.ExportProvider[] providers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.CompositionContainer.#ctor(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.ComponentModel.Composition.Hosting.ExportProvider[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (catalog As ComposablePartCatalog, ParamArray providers As ExportProvider())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CompositionContainer(System::ComponentModel::Composition::Primitives::ComposablePartCatalog ^ catalog, ... cli::array &lt;System::ComponentModel::Composition::Hosting::ExportProvider ^&gt; ^ providers);" />
      <MemberSignature Language="F#" Value="new System.ComponentModel.Composition.Hosting.CompositionContainer : System.ComponentModel.Composition.Primitives.ComposablePartCatalog * System.ComponentModel.Composition.Hosting.ExportProvider[] -&gt; System.ComponentModel.Composition.Hosting.CompositionContainer" Usage="new System.ComponentModel.Composition.Hosting.CompositionContainer (catalog, providers)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="catalog" Type="System.ComponentModel.Composition.Primitives.ComposablePartCatalog" />
        <Parameter Name="providers" Type="System.ComponentModel.Composition.Hosting.ExportProvider[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="catalog">Katalog, który zapewnia <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> obiekty do <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />.</param>
        <param name="providers">Tablica <see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider" /> obiektów, które dostarczają <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> dostęp do <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> obiektów, lub <see langword="null" /> można ustawić <see cref="P:System.ComponentModel.Composition.Hosting.CompositionContainer.Providers" /> na element empty <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> klasy z określonego katalogu i eksportowanie dostawców.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="providers" /> zawiera element, który jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CompositionContainer (System.ComponentModel.Composition.Primitives.ComposablePartCatalog catalog, bool isThreadSafe, params System.ComponentModel.Composition.Hosting.ExportProvider[] providers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.ComponentModel.Composition.Primitives.ComposablePartCatalog catalog, bool isThreadSafe, class System.ComponentModel.Composition.Hosting.ExportProvider[] providers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.CompositionContainer.#ctor(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.Boolean,System.ComponentModel.Composition.Hosting.ExportProvider[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (catalog As ComposablePartCatalog, isThreadSafe As Boolean, ParamArray providers As ExportProvider())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CompositionContainer(System::ComponentModel::Composition::Primitives::ComposablePartCatalog ^ catalog, bool isThreadSafe, ... cli::array &lt;System::ComponentModel::Composition::Hosting::ExportProvider ^&gt; ^ providers);" />
      <MemberSignature Language="F#" Value="new System.ComponentModel.Composition.Hosting.CompositionContainer : System.ComponentModel.Composition.Primitives.ComposablePartCatalog * bool * System.ComponentModel.Composition.Hosting.ExportProvider[] -&gt; System.ComponentModel.Composition.Hosting.CompositionContainer" Usage="new System.ComponentModel.Composition.Hosting.CompositionContainer (catalog, isThreadSafe, providers)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="catalog" Type="System.ComponentModel.Composition.Primitives.ComposablePartCatalog" />
        <Parameter Name="isThreadSafe" Type="System.Boolean" />
        <Parameter Name="providers" Type="System.ComponentModel.Composition.Hosting.ExportProvider[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="catalog">Katalog, który zapewnia <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> obiekty do <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />.</param>
        <param name="isThreadSafe">
          <see langword="true" /> Jeśli <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> obiekt musi być bezpieczne wątkowo, a w przeciwnym razie <see langword="false" />.</param>
        <param name="providers">Tablica <see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider" /> obiektów, które dostarczają <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> dostęp do <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> obiektów, lub <see langword="null" /> można ustawić <see cref="P:System.ComponentModel.Composition.Hosting.CompositionContainer.Providers" /> właściwości pustą <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> klasy z określonego katalogu, tryb wątkowo i eksportowanie dostawców.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.ComponentModel.Composition.Hosting.CompositionContainer> obiektu, którego mogą uzyskać dostęp wiele wątków należy ustawić `isThreadSafe` parametr `true`. Wydajność będzie wolniejsze w przypadku `isThreadSafe` jest `true`, tak więc zaleca się, że ten parametr jest ustawiony na `false` w scenariuszach jednowątkowy. Wartość domyślna to `false`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Jeden lub więcej elementów <paramref name="providers" /> są <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CompositionContainer (System.ComponentModel.Composition.Primitives.ComposablePartCatalog catalog, System.ComponentModel.Composition.Hosting.CompositionOptions compositionOptions, params System.ComponentModel.Composition.Hosting.ExportProvider[] providers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.ComponentModel.Composition.Primitives.ComposablePartCatalog catalog, valuetype System.ComponentModel.Composition.Hosting.CompositionOptions compositionOptions, class System.ComponentModel.Composition.Hosting.ExportProvider[] providers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.CompositionContainer.#ctor(System.ComponentModel.Composition.Primitives.ComposablePartCatalog,System.ComponentModel.Composition.Hosting.CompositionOptions,System.ComponentModel.Composition.Hosting.ExportProvider[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CompositionContainer(System::ComponentModel::Composition::Primitives::ComposablePartCatalog ^ catalog, System::ComponentModel::Composition::Hosting::CompositionOptions compositionOptions, ... cli::array &lt;System::ComponentModel::Composition::Hosting::ExportProvider ^&gt; ^ providers);" />
      <MemberSignature Language="F#" Value="new System.ComponentModel.Composition.Hosting.CompositionContainer : System.ComponentModel.Composition.Primitives.ComposablePartCatalog * System.ComponentModel.Composition.Hosting.CompositionOptions * System.ComponentModel.Composition.Hosting.ExportProvider[] -&gt; System.ComponentModel.Composition.Hosting.CompositionContainer" Usage="new System.ComponentModel.Composition.Hosting.CompositionContainer (catalog, compositionOptions, providers)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="catalog" Type="System.ComponentModel.Composition.Primitives.ComposablePartCatalog" />
        <Parameter Name="compositionOptions" Type="System.ComponentModel.Composition.Hosting.CompositionOptions" />
        <Parameter Name="providers" Type="System.ComponentModel.Composition.Hosting.ExportProvider[]">
          <Attributes>
            <Attribute>
              <AttributeName>System.ParamArray</AttributeName>
            </Attribute>
          </Attributes>
        </Parameter>
      </Parameters>
      <Docs>
        <param name="catalog">Katalog, który zapewnia <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> obiekty do <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />.</param>
        <param name="compositionOptions">Obiekt, który określa opcje, które wpływają na działanie kontenera.</param>
        <param name="providers">Tablica <see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider" /> obiektów, które dostarczają <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> dostęp do <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> obiektów, lub <see langword="null" /> można ustawić <see cref="P:System.ComponentModel.Composition.Hosting.CompositionContainer.Providers" /> na element empty <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> klasy z określonego katalogu, opcje i wyeksportuj dostawców.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="providers" /> zawiera element, który jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Catalog">
      <MemberSignature Language="C#" Value="public System.ComponentModel.Composition.Primitives.ComposablePartCatalog Catalog { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.Composition.Primitives.ComposablePartCatalog Catalog" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.Composition.Hosting.CompositionContainer.Catalog" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Catalog As ComposablePartCatalog" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ComponentModel::Composition::Primitives::ComposablePartCatalog ^ Catalog { System::ComponentModel::Composition::Primitives::ComposablePartCatalog ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Catalog : System.ComponentModel.Composition.Primitives.ComposablePartCatalog" Usage="System.ComponentModel.Composition.Hosting.CompositionContainer.Catalog" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.Composition.Primitives.ComposablePartCatalog</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> zapewniający dostęp kontenera do <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> obiektów.</summary>
        <value>Katalog, który zapewnia <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> dostęp do eksportu z <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> obiektów. Wartość domyślna to <see langword="null" />.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> Obiekt został usunięty z.</exception>
      </Docs>
    </Member>
    <Member MemberName="Compose">
      <MemberSignature Language="C#" Value="public void Compose (System.ComponentModel.Composition.Hosting.CompositionBatch batch);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Compose(class System.ComponentModel.Composition.Hosting.CompositionBatch batch) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.CompositionContainer.Compose(System.ComponentModel.Composition.Hosting.CompositionBatch)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Compose (batch As CompositionBatch)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Compose(System::ComponentModel::Composition::Hosting::CompositionBatch ^ batch);" />
      <MemberSignature Language="F#" Value="member this.Compose : System.ComponentModel.Composition.Hosting.CompositionBatch -&gt; unit" Usage="compositionContainer.Compose batch" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="batch" Type="System.ComponentModel.Composition.Hosting.CompositionBatch" />
      </Parameters>
      <Docs>
        <param name="batch">Zmienia się na <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> do dołączenia podczas kompozycji.</param>
        <summary>Dodaje lub usuwa określony części <see cref="T:System.ComponentModel.Composition.Hosting.CompositionBatch" /> z kontenera i wykonuje kompozycji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda jest podstawowy sposób bezpośrednio dodanie lub usunięcie części z kontenera. <xref:System.ComponentModel.Composition.Hosting.CompositionContainer> Zawsze mają być przechowywane w stanie stabilny, składa. W związku z tym wywołaniem <xref:System.ComponentModel.Composition.Hosting.CompositionContainer.Compose%2A> z pustą <xref:System.ComponentModel.Composition.Hosting.CompositionBatch> nigdy nie jest niezbędne do uruchomienia kompozycji. Zamiast tego wywołać <xref:System.ComponentModel.Composition.Hosting.CompositionContainer.Compose%2A> metody, gdy należy udostępnić zmiany do części <xref:System.ComponentModel.Composition.Hosting.CompositionContainer>.  
  
 <xref:System.ComponentModel.Composition.Hosting.CompositionBatch> Może zawierać zarówno elementy do dodania, jak i części do usunięcia.  Recomposition ma miejsce tylko raz dla każdego wywołania <xref:System.ComponentModel.Composition.Hosting.CompositionContainer.Compose%2A>.  
  
   
  
## Examples  
 W tym prostym przykładzie są tworzone i dodawane do trzech części <xref:System.ComponentModel.Composition.Hosting.CompositionContainer>, i jedną część są pobierane, aby wyświetlić wszystkie Importy zostały wypełnione. W tym przykładzie wykorzystuje Model programowania opartego na atrybutach.  
  
 [!code-csharp[Composition.CompositionContainer.Compose#1](~/samples/snippets/csharp/VS_Snippets_Misc/composition.compositioncontainer.compose/cs/program.cs#1)]
 [!code-vb[Composition.CompositionContainer.Compose#1](~/samples/snippets/visualbasic/VS_Snippets_Misc/composition.compositioncontainer.compose/vb/module1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwalnia zasoby używane przez <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.CompositionContainer.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="compositionContainer.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwalnia wszelkie zasoby używane przez bieżące wystąpienie klasy <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wywołanie `Dispose` po zakończeniu przy użyciu <xref:System.ComponentModel.Composition.Hosting.CompositionContainer>. `Dispose` Pozostawia metody <xref:System.ComponentModel.Composition.Hosting.CompositionContainer> w stanie uniemożliwiającym jego używanie. Po wywołaniu `Dispose`, konieczne jest zwolnienie wszystkich odwołań do <xref:System.ComponentModel.Composition.Hosting.CompositionContainer> , moduł zbierający elementy bezużyteczne mógł odzyskać pamięć który <xref:System.ComponentModel.Composition.Hosting.CompositionContainer> klasy.  
  
 Aby uzyskać więcej informacji, zobacz [czyszczenie zasobów niezarządzanych](~/docs/standard/garbage-collection/unmanaged.md) i [implementacja metody Dispose](~/docs/standard/garbage-collection/implementing-dispose.md).  
  
> [!NOTE]
>  Wywoływanie zawsze `Dispose` przed zwolnieniem ostatniego odwołania do <xref:System.ComponentModel.Composition.Hosting.CompositionContainer>. W przeciwnym razie używa zasobów nie zostanie zwolniona do wywołania modułu zbierającego elementy bezużyteczne <xref:System.ComponentModel.Composition.Hosting.CompositionContainer> obiektu `Finalize` metody.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.CompositionContainer.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit&#xA;override this.Dispose : bool -&gt; unit" Usage="compositionContainer.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <see langword="true" /> Aby zwolnić zasoby zarządzane i niezarządzane; <see langword="false" /> aby zwolnić tylko zasoby niezarządzane.</param>
        <summary>Zwalnia zasoby niezarządzane używane przez <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> i opcjonalnie zwalnia zasoby zarządzane.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetExportsCore">
      <MemberSignature Language="C#" Value="protected override System.Collections.Generic.IEnumerable&lt;System.ComponentModel.Composition.Primitives.Export&gt; GetExportsCore (System.ComponentModel.Composition.Primitives.ImportDefinition definition, System.ComponentModel.Composition.Hosting.AtomicComposition atomicComposition);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Collections.Generic.IEnumerable`1&lt;class System.ComponentModel.Composition.Primitives.Export&gt; GetExportsCore(class System.ComponentModel.Composition.Primitives.ImportDefinition definition, class System.ComponentModel.Composition.Hosting.AtomicComposition atomicComposition) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.CompositionContainer.GetExportsCore(System.ComponentModel.Composition.Primitives.ImportDefinition,System.ComponentModel.Composition.Hosting.AtomicComposition)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Collections::Generic::IEnumerable&lt;System::ComponentModel::Composition::Primitives::Export ^&gt; ^ GetExportsCore(System::ComponentModel::Composition::Primitives::ImportDefinition ^ definition, System::ComponentModel::Composition::Hosting::AtomicComposition ^ atomicComposition);" />
      <MemberSignature Language="F#" Value="override this.GetExportsCore : System.ComponentModel.Composition.Primitives.ImportDefinition * System.ComponentModel.Composition.Hosting.AtomicComposition -&gt; seq&lt;System.ComponentModel.Composition.Primitives.Export&gt;" Usage="compositionContainer.GetExportsCore (definition, atomicComposition)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.ComponentModel.Composition.Primitives.Export&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="definition" Type="System.ComponentModel.Composition.Primitives.ImportDefinition" />
        <Parameter Name="atomicComposition" Type="System.ComponentModel.Composition.Hosting.AtomicComposition" />
      </Parameters>
      <Docs>
        <param name="definition">Obiekt, który definiuje warunki <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> obiektów do pobrania.</param>
        <param name="atomicComposition">Transakcja kompozycji do użycia, lub <see langword="null" /> wyłączyć transakcyjne kompozycji.</param>
        <summary>Zwraca kolekcję wszystkich eksportu zgodne z określonym <see cref="T:System.ComponentModel.Composition.Primitives.ImportDefinition" /> obiektu.</summary>
        <returns>Kolekcja wszystkich <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> obiektów w tym <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> spełniających kryteria określone przez obiekt <paramref name="definition" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Implementacje niezgodności powiązane Kardynalność nie powinny traktować jako błędy i nie powinien zgłosić wyjątki dotyczące Kardynalność niezgodności. Na przykład, jeśli import żądania dokładnie jeden Eksport i dostawca nie ma żadnego pasującego eksportu lub więcej niż jeden <xref:System.ComponentModel.Composition.Hosting.CompositionContainer.GetExportsCore%2A> metoda powinna zwrócić pustą <xref:System.Collections.Generic.IEnumerable%601> Kolekcja <xref:System.ComponentModel.Composition.Primitives.Export> obiektów.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Providers">
      <MemberSignature Language="C#" Value="public System.Collections.ObjectModel.ReadOnlyCollection&lt;System.ComponentModel.Composition.Hosting.ExportProvider&gt; Providers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;class System.ComponentModel.Composition.Hosting.ExportProvider&gt; Providers" />
      <MemberSignature Language="DocId" Value="P:System.ComponentModel.Composition.Hosting.CompositionContainer.Providers" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Providers As ReadOnlyCollection(Of ExportProvider)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::ObjectModel::ReadOnlyCollection&lt;System::ComponentModel::Composition::Hosting::ExportProvider ^&gt; ^ Providers { System::Collections::ObjectModel::ReadOnlyCollection&lt;System::ComponentModel::Composition::Hosting::ExportProvider ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Providers : System.Collections.ObjectModel.ReadOnlyCollection&lt;System.ComponentModel.Composition.Hosting.ExportProvider&gt;" Usage="System.ComponentModel.Composition.Hosting.CompositionContainer.Providers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.ComponentModel.Composition.Hosting.ExportProvider&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera dostawców eksportu, zapewniające dostęp kontenera do dodatkowych <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePartCatalog" /> obiektów.</summary>
        <value>Kolekcja <see cref="T:System.ComponentModel.Composition.Hosting.ExportProvider" /> obiektów, które dostarczają <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> dostęp do dodatkowych <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> obiektów. Wartość domyślna to pusta <see cref="T:System.Collections.ObjectModel.ReadOnlyCollection`1" />.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> Został zlikwidowany.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReleaseExport">
      <MemberSignature Language="C#" Value="public void ReleaseExport (System.ComponentModel.Composition.Primitives.Export export);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReleaseExport(class System.ComponentModel.Composition.Primitives.Export export) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.CompositionContainer.ReleaseExport(System.ComponentModel.Composition.Primitives.Export)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReleaseExport(System::ComponentModel::Composition::Primitives::Export ^ export);" />
      <MemberSignature Language="F#" Value="member this.ReleaseExport : System.ComponentModel.Composition.Primitives.Export -&gt; unit" Usage="compositionContainer.ReleaseExport export" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="export" Type="System.ComponentModel.Composition.Primitives.Export" />
      </Parameters>
      <Docs>
        <param name="export">
          <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> Który musi zostać zwolniony.</param>
        <summary>Zwalnia określony <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> obiekt z <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zachowanie tej metody może się różnić w zależności od wykonania <xref:System.ComponentModel.Composition.Hosting.ExportProvider> wytworzonego <xref:System.ComponentModel.Composition.Primitives.Export> wystąpienia. Zgodnie z zasadą nieudostępnionych eksporty powinien można odłączyć od kontenera.  
  
 Na przykład <xref:System.ComponentModel.Composition.Hosting.CatalogExportProvider> będą tylko zlecenia <xref:System.ComponentModel.Composition.Primitives.Export> jeśli pochodzi ona z <xref:System.ComponentModel.Composition.Primitives.ComposablePart> który został skonstruowany w obszarze <xref:System.ComponentModel.Composition.CreationPolicy.NonShared> kontekstu. Wersja w tym kontekście oznacza przejście z łańcucha zależności <xref:System.ComponentModel.Composition.Primitives.Export> obiektów odłączanie odwołań z kontenera i wywoływania `Dispose` na <xref:System.ComponentModel.Composition.Primitives.ComposablePart> obiekty zgodnie z potrzebami. Jeśli <xref:System.ComponentModel.Composition.Primitives.Export> został skonstruowany w obszarze <xref:System.ComponentModel.Composition.CreationPolicy.Shared> kontekstu <xref:System.ComponentModel.Composition.Hosting.CatalogExportProvider> nie rób nic, jak określony <xref:System.ComponentModel.Composition.Primitives.Export> maja używane przez innych użytkowników zgłaszających żądania. Te tylko będzie można odłączyć, gdy kontener jest usunięty.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="export" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReleaseExport&lt;T&gt;">
      <MemberSignature Language="C#" Value="public void ReleaseExport&lt;T&gt; (Lazy&lt;T&gt; export);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReleaseExport&lt;T&gt;(class System.Lazy`1&lt;!!T&gt; export) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.CompositionContainer.ReleaseExport``1(System.Lazy{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseExport(Of T) (export As Lazy(Of T))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; void ReleaseExport(Lazy&lt;T&gt; ^ export);" />
      <MemberSignature Language="F#" Value="member this.ReleaseExport : Lazy&lt;'T&gt; -&gt; unit" Usage="compositionContainer.ReleaseExport export" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="export" Type="System.Lazy&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">Typ eksportu.</typeparam>
        <param name="export">Pośrednie odwołanie do eksportu do usunięcia.</param>
        <summary>Usuwa określony eksportu kompozycji i zwalnia jego zasoby, jeśli to możliwe.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseExports">
      <MemberSignature Language="C#" Value="public void ReleaseExports (System.Collections.Generic.IEnumerable&lt;System.ComponentModel.Composition.Primitives.Export&gt; exports);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReleaseExports(class System.Collections.Generic.IEnumerable`1&lt;class System.ComponentModel.Composition.Primitives.Export&gt; exports) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.CompositionContainer.ReleaseExports(System.Collections.Generic.IEnumerable{System.ComponentModel.Composition.Primitives.Export})" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseExports (exports As IEnumerable(Of Export))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReleaseExports(System::Collections::Generic::IEnumerable&lt;System::ComponentModel::Composition::Primitives::Export ^&gt; ^ exports);" />
      <MemberSignature Language="F#" Value="member this.ReleaseExports : seq&lt;System.ComponentModel.Composition.Primitives.Export&gt; -&gt; unit" Usage="compositionContainer.ReleaseExports exports" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="exports" Type="System.Collections.Generic.IEnumerable&lt;System.ComponentModel.Composition.Primitives.Export&gt;" />
      </Parameters>
      <Docs>
        <param name="exports">Kolekcja <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> obiekty do zwolnienia.</param>
        <summary>Zwalnia zestaw <see cref="T:System.ComponentModel.Composition.Primitives.Export" /> obiektów z <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zachowanie tej metody może się różnić w zależności od kontekstu, w którym <xref:System.ComponentModel.Composition.Primitives.Export> został skonstruowany. Aby uzyskać więcej informacji, zobacz <xref:System.ComponentModel.Composition.Hosting.CompositionContainer.ReleaseExport%2A> metody.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="exports" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="exports" /> zawiera element, który jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="ReleaseExports&lt;T&gt;">
      <MemberSignature Language="C#" Value="public void ReleaseExports&lt;T&gt; (System.Collections.Generic.IEnumerable&lt;Lazy&lt;T&gt;&gt; exports);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReleaseExports&lt;T&gt;(class System.Collections.Generic.IEnumerable`1&lt;class System.Lazy`1&lt;!!T&gt;&gt; exports) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.CompositionContainer.ReleaseExports``1(System.Collections.Generic.IEnumerable{System.Lazy{``0}})" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseExports(Of T) (exports As IEnumerable(Of Lazy(Of T)))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; void ReleaseExports(System::Collections::Generic::IEnumerable&lt;Lazy&lt;T&gt; ^&gt; ^ exports);" />
      <MemberSignature Language="F#" Value="member this.ReleaseExports : seq&lt;Lazy&lt;'T&gt;&gt; -&gt; unit" Usage="compositionContainer.ReleaseExports exports" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="exports" Type="System.Collections.Generic.IEnumerable&lt;System.Lazy&lt;T&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">Typ eksportu.</typeparam>
        <param name="exports">Kolekcja pośredniego odwołania do eksportu do usunięcia.</param>
        <summary>Usuwa zbiór eksportu kompozycji i zwalnia ich zasoby, jeśli to możliwe.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ReleaseExports&lt;T,TMetadataView&gt;">
      <MemberSignature Language="C#" Value="public void ReleaseExports&lt;T,TMetadataView&gt; (System.Collections.Generic.IEnumerable&lt;Lazy&lt;T,TMetadataView&gt;&gt; exports);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReleaseExports&lt;T, TMetadataView&gt;(class System.Collections.Generic.IEnumerable`1&lt;class System.Lazy`2&lt;!!T, !!TMetadataView&gt;&gt; exports) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.CompositionContainer.ReleaseExports``2(System.Collections.Generic.IEnumerable{System.Lazy{``0,``1}})" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReleaseExports(Of T, TMetadataView) (exports As IEnumerable(Of Lazy(Of T, TMetadataView)))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T, typename TMetadataView&gt;&#xA; void ReleaseExports(System::Collections::Generic::IEnumerable&lt;Lazy&lt;T, TMetadataView&gt; ^&gt; ^ exports);" />
      <MemberSignature Language="F#" Value="member this.ReleaseExports : seq&lt;Lazy&lt;'T, 'MetadataView&gt;&gt; -&gt; unit" Usage="compositionContainer.ReleaseExports exports" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
        <TypeParameter Name="TMetadataView" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="exports" Type="System.Collections.Generic.IEnumerable&lt;System.Lazy&lt;T,TMetadataView&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">Typ eksportu.</typeparam>
        <typeparam name="TMetadataView">Typ widoku metadanych eksportu.</typeparam>
        <param name="exports">Kolekcja pośredniego odwołania do eksportu do usunięcia i ich metadanych.</param>
        <summary>Usuwa zbiór eksportu kompozycji i zwalnia ich zasoby, jeśli to możliwe.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SatisfyImportsOnce">
      <MemberSignature Language="C#" Value="public void SatisfyImportsOnce (System.ComponentModel.Composition.Primitives.ComposablePart part);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SatisfyImportsOnce(class System.ComponentModel.Composition.Primitives.ComposablePart part) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ComponentModel.Composition.Hosting.CompositionContainer.SatisfyImportsOnce(System.ComponentModel.Composition.Primitives.ComposablePart)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SatisfyImportsOnce (part As ComposablePart)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void SatisfyImportsOnce(System::ComponentModel::Composition::Primitives::ComposablePart ^ part);" />
      <MemberSignature Language="F#" Value="abstract member SatisfyImportsOnce : System.ComponentModel.Composition.Primitives.ComposablePart -&gt; unit&#xA;override this.SatisfyImportsOnce : System.ComponentModel.Composition.Primitives.ComposablePart -&gt; unit" Usage="compositionContainer.SatisfyImportsOnce part" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.ComponentModel.Composition.ICompositionService.SatisfyImportsOnce(System.ComponentModel.Composition.Primitives.ComposablePart)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.ComponentModel.Composition</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="part" Type="System.ComponentModel.Composition.Primitives.ComposablePart" />
      </Parameters>
      <Docs>
        <param name="part">Część do zaspokojenia importów elementu.</param>
        <summary>Importy określonego spełnia <see cref="T:System.ComponentModel.Composition.Primitives.ComposablePart" /> obiektu bez rejestrowania recomposition.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ObjectDisposedException">
          <see cref="T:System.ComponentModel.Composition.Hosting.CompositionContainer" /> Obiekt został usunięty z.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="part" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ComponentModel.Composition.CompositionException">Wystąpił błąd podczas tworzenia. <see cref="P:System.ComponentModel.Composition.CompositionException.Errors" /> zawiera kolekcję błędów, które wystąpiły.</exception>
      </Docs>
    </Member>
  </Members>
</Type>