<Type Name="XmlValidatingReader" FullName="System.Xml.XmlValidatingReader">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="a7e18e1fd6382545d9af186fd445a048879512af" />
    <Meta Name="ms.sourcegitcommit" Value="b15b8cf0f6dbc1504057c88969d9ef4b790891fe" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="05/11/2018" />
    <Meta Name="ms.locfileid" Value="34061623" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class XmlValidatingReader : System.Xml.XmlReader, System.Xml.IXmlLineInfo, System.Xml.IXmlNamespaceResolver" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlValidatingReader extends System.Xml.XmlReader implements class System.Xml.IXmlLineInfo, class System.Xml.IXmlNamespaceResolver" />
  <TypeSignature Language="DocId" Value="T:System.Xml.XmlValidatingReader" />
  <TypeSignature Language="VB.NET" Value="Public Class XmlValidatingReader&#xA;Inherits XmlReader&#xA;Implements IXmlLineInfo, IXmlNamespaceResolver" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlValidatingReader : System::Xml::XmlReader, System::Xml::IXmlLineInfo, System::Xml::IXmlNamespaceResolver" />
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Xml.XmlReader</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Xml.IXmlLineInfo</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Xml.IXmlNamespaceResolver</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Obsolete("Use XmlReader created by XmlReader.Create() method using appropriate XmlReaderSettings instead. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Reprezentuje czytnik, które oferuje definicja typu dokumentu (DTD), schemat XML danych (XDR) i weryfikacja (XSD) języka definicji schematu XML.  
  
 Ta klasa jest przestarzała. Począwszy od programu .NET Framework 2.0, firma Microsoft zaleca użycie <see cref="T:System.Xml.XmlReaderSettings" /> klasy i <see cref="Overload:System.Xml.XmlReader.Create" /> metodę w celu utworzenia sprawdzania poprawności modułu odczytującego XML.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `XmlValidatingReader` implementuje <xref:System.Xml.XmlReader> klasy i zapewnia obsługę sprawdzania poprawności danych. Użyj <xref:System.Xml.XmlValidatingReader.Schemas%2A> właściwości ma czytnika weryfikacji przy użyciu plików schematów, które są buforowane w <xref:System.Xml.Schema.XmlSchemaCollection>. <xref:System.Xml.XmlValidatingReader.ValidationType%2A> Właściwość określa, jaki typ sprawdzania poprawności czytnik należy wykonać. Ustawienie właściwości ValidationType.None tworzy czytnik bez weryfikacji.  
  
 <xref:System.Xml.XmlValidatingReader> zgłasza wyjątek <xref:System.Xml.XmlException> na XML analizy błędów. Po zgłoszenia wyjątku stan czytnika danych nie jest przewidywalne. Na przykład typ węzła zgłoszone może być różni się od typu rzeczywistego węzła bieżącego węzła. Użyj <xref:System.Xml.XmlValidatingReader.ReadState%2A> właściwość do sprawdzenia, czy czytnik jest w stanie błędu.  
  
> [!NOTE]
>  <xref:System.Xml.XmlValidatingReader> Klasa jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. Sprawdzanie poprawności można utworzyć <xref:System.Xml.XmlReader> wystąpienia przy użyciu <xref:System.Xml.XmlReaderSettings> klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz sekcję uwag <xref:System.Xml.XmlReader> strony odwołania.  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides">
      <para>Ta klasa ma żądanie dziedziczenia. Pełne zaufanie musi dziedziczyć <see langword="XmlValidatingReader" />.</para>
    </block>
    <altmember cref="T:System.Xml.XmlReader" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see langword="XmlValidatingReader" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlValidatingReader (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlValidatingReader.#ctor(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (reader As XmlReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlValidatingReader(System::Xml::XmlReader ^ reader);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader">
          <see langword="XmlReader" /> Odczytywać podczas sprawdzania poprawności. Bieżąca implementacja obsługuje tylko <see cref="T:System.Xml.XmlTextReader" />.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see langword="XmlValidatingReader" /> klasy, która weryfikuje zawartość zwróconą z danym <see cref="T:System.Xml.XmlReader" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.XmlValidatingReader> Klasa jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. Sprawdzanie poprawności można utworzyć <xref:System.Xml.XmlReader> wystąpienia przy użyciu <xref:System.Xml.XmlReaderSettings> klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz sekcję uwag <xref:System.Xml.XmlReader> strony odwołania.  
  
 Wszystkie węzły zwrócony z danym `XmlReader` również są zwracane z tego sprawdzania poprawności czytnika, więc nie ma w procesie bez utraty informacji. Mogą zostać dodane nowe węzły, które nie są zwracane z podstawowej czytnika przez ten czytnik (na przykład domyślne atrybuty i elementy podrzędne odwołania do obiektu). Właściwości na danym `XmlTextReader` mają też zastosowanie do tego czytnika sprawdzania poprawności. Na przykład jeśli podany czytnik ma zestaw elementu WhitespaceHandling.None, tego sprawdzania poprawności czytnika również ignoruje biały znak.  
  
 Kiedy definicji typu zewnętrznego dokumentu (pliki DTD) lub schematów, które są potrzebne do sprawdzania poprawności, <xref:System.Xml.XmlValidatingReader.XmlResolver%2A> zestawy właściwości <xref:System.Xml.XmlResolver> obiekt do użycia w celu rozpoznawania zasobów zewnętrznych.  
  
   
  
## Examples  
 Poniższy przykład weryfikuje dwa dokumenty.  
  
 [!code-cpp[XmlValidatingReader.Cctor#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlValidatingReader.Cctor/CPP/valid_xsd2.cpp#1)]
 [!code-csharp[XmlValidatingReader.Cctor#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlValidatingReader.Cctor/CS/valid_xsd2.cs#1)]
 [!code-vb[XmlValidatingReader.Cctor#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlValidatingReader.Cctor/VB/valid_xsd2.vb#1)]  
  
 W przykładzie użyto następujących plików wejściowych:  
  
 `notValidXSD.xml`  
  
 [!code-xml[XmlValidatingReader.Cctor#2](~/samples/snippets/xml/VS_Snippets_Data/XmlValidatingReader.Cctor/XML/notvalidxsd.xml#2)]  
  
 `books.xsd`  
  
 [!code-xml[XmlValidatingReader.Cctor#3](~/samples/snippets/xml/VS_Snippets_Data/XmlValidatingReader.Cctor/XML/books.xsd#3)]  
  
 `inlineXSD.xml`  
  
 [!code-xml[XmlValidatingReader.Cctor#4](~/samples/snippets/xml/VS_Snippets_Data/XmlValidatingReader.Cctor/XML/inlinexsd.xml#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Czytnik określony nie jest <see langword="XmlTextReader" />.</exception>
        <altmember cref="T:System.Xml.XmlTextReader" />
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlValidatingReader (System.IO.Stream xmlFragment, System.Xml.XmlNodeType fragType, System.Xml.XmlParserContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream xmlFragment, valuetype System.Xml.XmlNodeType fragType, class System.Xml.XmlParserContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlValidatingReader.#ctor(System.IO.Stream,System.Xml.XmlNodeType,System.Xml.XmlParserContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (xmlFragment As Stream, fragType As XmlNodeType, context As XmlParserContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlValidatingReader(System::IO::Stream ^ xmlFragment, System::Xml::XmlNodeType fragType, System::Xml::XmlParserContext ^ context);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="xmlFragment" Type="System.IO.Stream" />
        <Parameter Name="fragType" Type="System.Xml.XmlNodeType" />
        <Parameter Name="context" Type="System.Xml.XmlParserContext" />
      </Parameters>
      <Docs>
        <param name="xmlFragment">Strumień, zawierający fragmentu XML do analizy.</param>
        <param name="fragType">
          <see cref="T:System.Xml.XmlNodeType" /> Fragmentu XML. Określa, jakie może zawierać fragmentu (patrz poniższa tabela).</param>
        <param name="context">
          <see cref="T:System.Xml.XmlParserContext" /> , W której fragmentu XML ma zostać przeanalizowany. Obejmuje to <see cref="T:System.Xml.XmlNameTable" /> do użytku, kodowania, zakresie przestrzeni nazw, bieżącego <see langword="xml:lang" />, i <see langword="xml:space" /> zakresu.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see langword="XmlValidatingReader" /> z określonymi wartościami.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.XmlValidatingReader> Klasa jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. Sprawdzanie poprawności można utworzyć <xref:System.Xml.XmlReader> wystąpienia przy użyciu <xref:System.Xml.XmlReaderSettings> klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz sekcję uwag <xref:System.Xml.XmlReader> strony odwołania.  
  
 Ten konstruktor analizuje podanego ciągu jako fragment XML. Jeżeli fragmentu XML jest element lub atrybut, można pominąć reguły poziomu głównego dla poprawnie sformułowanym dokumentów XML.  
  
 Poniższa tabela zawiera listę prawidłowych wartości dla `fragType` i jak czytnik analizuje poszczególnych typów innego węzła.  
  
|XmlNodeType|Może zawierać fragmentu|  
|-----------------|--------------------------|  
|Element|Zawartość elementu prawidłowy (na przykład dowolną kombinację elementy, komentarze, przetwarzanie instrukcji cdata, tekst i jednostki odwołania).|  
|Atrybut|Wartość atrybutu (część wewnątrz cudzysłowów).|  
|dokument|Zawartość całego dokumentu XML; to wymusza reguły poziomu dokumentu.|  
  
 Czytnik używa następujące kroki w celu określenia, kodowanie strumienia:  
  
1.  Sprawdza <xref:System.Xml.XmlParserContext.Encoding%2A?displayProperty=nameWithType> właściwości w celu określenia kodowania.  
  
2.  Jeśli `Encoding` właściwość jest `null`, czytnik sprawdza występowanie znacznik kolejności bajtów na początku strumienia.  
  
3.  Jeśli `Encoding` właściwość jest `null`i Brak znacznika kolejności bajtów zostanie znaleziony, zakłada czytnik strumienia jest zakodowany w formacie UTF-8.  
  
 Jeśli ten czytnik będzie weryfikacji, przy użyciu definicji typu dokumentu (DTD) (oznacza to, <xref:System.Xml.XmlValidatingReader.ValidationType%2A> ustawiono ValidationType.DTD lub ValidationType.Auto), `XmlParserContext` określonego w Konstruktorze musisz podać wszystkie wymagane informacje DocumentType.  
  
> [!NOTE]
>  Nie jest możliwe do zweryfikowania fragmentu za pomocą definicji DTD. Zgodnie z definicją DTD wymaga całego dokumentu do załadowania do weryfikacji.  
  
 Jeśli ten czytnik będzie sprawdzania poprawności, używając schematów (XSD) języka definicji danych XML (XDR) lub schematu XML, użyj <xref:System.Xml.XmlValidatingReader.Schemas%2A> właściwości w celu określenia <xref:System.Xml.Schema.XmlSchemaCollection> zawiera schematów (to znaczy `XmlParserContext` nie trzeba podać Informacje o DocumentType).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XmlException">
          <paramref name="fragType" /> nie jest jednym z typów węzłów wymienione w poniższej tabeli.</exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlValidatingReader (string xmlFragment, System.Xml.XmlNodeType fragType, System.Xml.XmlParserContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string xmlFragment, valuetype System.Xml.XmlNodeType fragType, class System.Xml.XmlParserContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlValidatingReader.#ctor(System.String,System.Xml.XmlNodeType,System.Xml.XmlParserContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (xmlFragment As String, fragType As XmlNodeType, context As XmlParserContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlValidatingReader(System::String ^ xmlFragment, System::Xml::XmlNodeType fragType, System::Xml::XmlParserContext ^ context);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="xmlFragment" Type="System.String" />
        <Parameter Name="fragType" Type="System.Xml.XmlNodeType" />
        <Parameter Name="context" Type="System.Xml.XmlParserContext" />
      </Parameters>
      <Docs>
        <param name="xmlFragment">Ciąg zawierający fragmentu XML do analizy.</param>
        <param name="fragType">
          <see cref="T:System.Xml.XmlNodeType" /> Fragmentu XML. Określa również co może zawierać fragmentu ciągu (patrz poniższa tabela).</param>
        <param name="context">
          <see cref="T:System.Xml.XmlParserContext" /> , W której fragmentu XML ma zostać przeanalizowany. Dotyczy to również <see cref="T:System.Xml.NameTable" /> Użyj kodowania, zakresie przestrzeni nazw, bieżącego XML: lang i zakres XML: Space.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see langword="XmlValidatingReader" /> z określonymi wartościami.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.XmlValidatingReader> Klasa jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. Sprawdzanie poprawności można utworzyć <xref:System.Xml.XmlReader> wystąpienia przy użyciu <xref:System.Xml.XmlReaderSettings> klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz sekcję uwag <xref:System.Xml.XmlReader> strony odwołania.  
  
 Ten konstruktor analizuje podanego ciągu jako fragment XML. Jeżeli fragmentu XML jest element lub atrybut, można pominąć reguły poziomu głównego dla poprawnie sformułowanym dokumentów XML. Ten konstruktor może obsłużyć ciągi zwrócony z <xref:System.Xml.XmlReader.ReadInnerXml%2A>.  
  
 Poniższa tabela zawiera listę prawidłowych wartości dla `fragType` i jak czytnik analizuje poszczególnych typów innego węzła.  
  
|XmlNodeType|Może zawierać fragmentu|  
|-----------------|--------------------------|  
|Element|Zawartość elementu prawidłowy (na przykład dowolną kombinację elementy, komentarze, przetwarzanie instrukcji cdata, tekst i jednostki odwołania).|  
|Atrybut|Wartość atrybutu (część wewnątrz cudzysłowów).|  
|dokument|Zawartość całego dokumentu XML; to wymusza reguły poziomu dokumentu.|  
  
 Jeśli ten czytnik będzie weryfikacji przy użyciu definicji typu dokumentu (DTD) (oznacza to, <xref:System.Xml.XmlValidatingReader.ValidationType%2A> ustawiono ValidationType.DTD lub ValidationType.Auto), `XmlParserContext` określonego w Konstruktorze musisz podać wszystkie wymagane informacje DocumentType.  
  
> [!NOTE]
>  Nie jest możliwe do zweryfikowania fragmentu za pomocą definicji DTD. Zgodnie z definicją DTD wymaga całego dokumentu do załadowania do weryfikacji.  
  
 Jeśli ten czytnik będzie sprawdzania poprawności, używając schematów (XSD) języka definicji danych XML (XDR) lub schematu XML, użyj <xref:System.Xml.XmlValidatingReader.Schemas%2A> właściwości w celu określenia <xref:System.Xml.Schema.XmlSchemaCollection> zawiera schematów ( `XmlParserContext` nie trzeba podać typ dokumentu informacje).  
  
   
  
## Examples  
 Poniższy przykład odczytuje XML fragment. Używa `XmlParserContext` i jego <xref:System.Xml.XmlNamespaceManager> do obsługi pasujących przestrzeni nazw.  
  
 [!code-csharp[Classic WebData XmlParserContext.XmlParserContext Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlParserContext.XmlParserContext Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlParserContext.XmlParserContext Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlParserContext.XmlParserContext Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XmlException">
          <paramref name="fragType" /> nie jest jednym z typów węzłów wymienione w poniższej tabeli.</exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="AttributeCount">
      <MemberSignature Language="C#" Value="public override int AttributeCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 AttributeCount" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.AttributeCount" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property AttributeCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int AttributeCount { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera liczbę atrybutów w bieżącym węźle.</summary>
        <value>Liczba atrybutów dla bieżącego węzła. Ta liczba uwzględnia również z domyślnymi atrybutami.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.XmlValidatingReader> Klasa jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. Sprawdzanie poprawności można utworzyć <xref:System.Xml.XmlReader> wystąpienia przy użyciu <xref:System.Xml.XmlReaderSettings> klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz sekcję uwag <xref:System.Xml.XmlReader> strony odwołania.  
  
 Ta właściwość ma zastosowanie w przypadku `Element`, `DocumentType`, i `XmlDeclaration` tylko węzłów. (Inne typy węzłów nie ma atrybutów).  
  
   
  
## Examples  
 Poniższy przykład odczytuje wszystkie elementy w węźle głównym.  
  
 [!code-cpp[Classic WebData XmlValidatingReader.AttributeCount Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlValidatingReader.AttributeCount Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlValidatingReader.AttributeCount Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlValidatingReader.AttributeCount Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlValidatingReader.AttributeCount Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlValidatingReader.AttributeCount Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="BaseURI">
      <MemberSignature Language="C#" Value="public override string BaseURI { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string BaseURI" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.BaseURI" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property BaseURI As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ BaseURI { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera podstawowy identyfikator URI bieżącego węzła.</summary>
        <value>Podstawowy identyfikator URI bieżącego węzła.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.XmlValidatingReader> Klasa jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. Sprawdzanie poprawności można utworzyć <xref:System.Xml.XmlReader> wystąpienia przy użyciu <xref:System.Xml.XmlReaderSettings> klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz sekcję uwag <xref:System.Xml.XmlReader> strony odwołania.  
  
 Sieciowych dokumentu XML składa się z fragmentów dane zagregowane przy użyciu różnych mechanizmów standardowe włączenia sieci World Wide Web konsorcjum W3C, dlatego zawiera węzły, które pochodzą z różnych miejscach. jednostki definicji (DTD) typu dokumentu są na przykład, ale nie jest ograniczone do elementów DTD. Podstawowy identyfikator URI informuje, skąd pochodzą te węzły. Jeśli nie istnieje żadne podstawowy identyfikator URI dla węzłów zwracanych (na przykład one zostały pochodzącą z analizy ciąg w pamięci), jest zwracany String.Empty.  
  
   
  
## Examples  
 W poniższym przykładzie analizy pliku i przedstawia podstawowy identyfikator URI dla każdego węzła.  
  
 [!code-cpp[Classic WebData XmlValidatingReader.BaseURI Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlValidatingReader.BaseURI Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlValidatingReader.BaseURI Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlValidatingReader.BaseURI Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlValidatingReader.BaseURI Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlValidatingReader.BaseURI Example/VB/source.vb#1)]  
  
 W przykładzie użyto pliku `uri.xml`, jak wejściowego.  
  
 [!code-xml[Classic WebData XmlValidatingReader.BaseURI Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlValidatingReader.BaseURI Example/XML/source.xml#2)]  
  
 `style.xml` Plik zawiera tekstu XML `<style>hardcover</style>`.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="CanReadBinaryContent">
      <MemberSignature Language="C#" Value="public override bool CanReadBinaryContent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanReadBinaryContent" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.CanReadBinaryContent" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanReadBinaryContent As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanReadBinaryContent { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą czy <see cref="T:System.Xml.XmlValidatingReader" /> implementuje metody odczytu zawartości binarnej.</summary>
        <value>
          <see langword="true" /> Jeśli binarne metody odczytu zawartości są wykonywane; w przeciwnym razie <see langword="false" />. <see cref="T:System.Xml.XmlValidatingReader" /> Klasy zwraca <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.XmlValidatingReader> Klasa jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. Sprawdzanie poprawności można utworzyć <xref:System.Xml.XmlReader> wystąpienia przy użyciu <xref:System.Xml.XmlReaderSettings> klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz sekcję uwag <xref:System.Xml.XmlReader> strony odwołania.  
  
 Zawartość binarną do odczytu metod uwzględnić <xref:System.Xml.XmlValidatingReader.ReadContentAsBase64%2A>, <xref:System.Xml.XmlValidatingReader.ReadContentAsBinHex%2A>, <xref:System.Xml.XmlValidatingReader.ReadElementContentAsBase64%2A>, i <xref:System.Xml.XmlValidatingReader.ReadElementContentAsBinHex%2A> metody.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="CanResolveEntity">
      <MemberSignature Language="C#" Value="public override bool CanResolveEntity { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanResolveEntity" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.CanResolveEntity" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanResolveEntity As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanResolveEntity { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy ten czytnik można przeanalizować i rozwiązać jednostek.</summary>
        <value>
          <see langword="true" /> Jeśli czytnik można przeanalizować i rozwiązać jednostek; w przeciwnym razie <see langword="false" />. <see langword="XmlValidatingReader" /> zawsze zwraca <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.XmlValidatingReader> Klasa jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. Sprawdzanie poprawności można utworzyć <xref:System.Xml.XmlReader> wystąpienia przy użyciu <xref:System.Xml.XmlReaderSettings> klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz sekcję uwag <xref:System.Xml.XmlReader> strony odwołania.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlValidatingReader.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Close();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zmiany <see cref="P:System.Xml.XmlReader.ReadState" /> do zamkniętej.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.XmlValidatingReader> Klasa jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. Sprawdzanie poprawności można utworzyć <xref:System.Xml.XmlReader> wystąpienia przy użyciu <xref:System.Xml.XmlReaderSettings> klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz sekcję uwag <xref:System.Xml.XmlReader> strony odwołania.  
  
 Ta metoda również zwalnia wszystkie zasoby utrzymywane podczas odczytu. Jeśli ten czytnik został skonstruowany przy użyciu <xref:System.Xml.XmlTextReader>, ta metoda wywołuje również `Close` na odpowiedniego czytnika. Jeśli ten czytnik został skonstruowany przy użyciu strumienia, ta metoda wywołuje również `Close` w strumieniu podstawowym.  
  
 Jeśli `Close` została już wywołana, jest wykonywana żadna akcja.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="Depth">
      <MemberSignature Language="C#" Value="public override int Depth { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Depth" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.Depth" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Depth As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int Depth { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera głębokość bieżącego węzła w dokumencie XML.</summary>
        <value>Głębokość bieżącego węzła w dokumencie XML.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.XmlValidatingReader> Klasa jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. Sprawdzanie poprawności można utworzyć <xref:System.Xml.XmlReader> wystąpienia przy użyciu <xref:System.Xml.XmlReaderSettings> klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz sekcję uwag <xref:System.Xml.XmlReader> strony odwołania.  
  
   
  
## Examples  
 W poniższym przykładzie przedstawiono każdego węzła w tym jego głębokość, numer wiersza i pozycji.  
  
 [!code-cpp[IXmlLineInfo#1](~/samples/snippets/cpp/VS_Snippets_Data/IXmlLineInfo/CPP/lineinfo.cpp#1)]
 [!code-csharp[IXmlLineInfo#1](~/samples/snippets/csharp/VS_Snippets_Data/IXmlLineInfo/CS/lineinfo.cs#1)]
 [!code-vb[IXmlLineInfo#1](~/samples/snippets/visualbasic/VS_Snippets_Data/IXmlLineInfo/VB/lineinfo.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.IXmlLineInfo" />
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="Encoding">
      <MemberSignature Language="C#" Value="public System.Text.Encoding Encoding { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.Encoding Encoding" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.Encoding" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Encoding As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Encoding ^ Encoding { System::Text::Encoding ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera atrybut kodowania dokumentu.</summary>
        <value>Wartość kodowania. Jeśli istnieje bez atrybutu kodowania i nie ma znacznika kolejności bajtów, to domyślnie UTF-8.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.XmlValidatingReader> Klasa jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. Sprawdzanie poprawności można utworzyć <xref:System.Xml.XmlReader> wystąpienia przy użyciu <xref:System.Xml.XmlReaderSettings> klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz sekcję uwag <xref:System.Xml.XmlReader> strony odwołania.  
  
 Podczas odczytywania wszystkich odwołań zewnętrznych (na przykład rozszerzanie jednostkę w pliku definicji (DTD) typu dokumentu lub odczytywania pliku schematu) kodowania właściwości ustawiono wartość kodowania odwołania zewnętrznego. Jeśli kodowanie nie została określona w odwołania zewnętrznego, a pole kolejności bajtów nie jest zaznaczone, domyślnie na UTF-8.  
  
 Obsługiwane są wszystkie standardy kodowania, które obsługuje system operacyjny.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="EntityHandling">
      <MemberSignature Language="C#" Value="public System.Xml.EntityHandling EntityHandling { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.EntityHandling EntityHandling" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.EntityHandling" />
      <MemberSignature Language="VB.NET" Value="Public Property EntityHandling As EntityHandling" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::EntityHandling EntityHandling { System::Xml::EntityHandling get(); void set(System::Xml::EntityHandling value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.EntityHandling</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość określającą, jak czytnik obsługuje jednostki.</summary>
        <value>Jeden z <see cref="T:System.Xml.EntityHandling" /> wartości. Jeśli nie <see langword="EntityHandling" /> jest określony, domyślnie elementu EntityHandling.ExpandEntities.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.XmlValidatingReader> Klasa jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. Sprawdzanie poprawności można utworzyć <xref:System.Xml.XmlReader> wystąpienia przy użyciu <xref:System.Xml.XmlReaderSettings> klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz sekcję uwag <xref:System.Xml.XmlReader> strony odwołania.  
  
 Tę właściwość można zmienić i obowiązuje po następnej <xref:System.Xml.XmlValidatingReader.Read%2A> wywołania.  
  
 Gdy `EntityHandling` ma ustawioną wartość `ExpandCharEntities`, wartości atrybutów są tylko częściowo znormalizowany. Czytnik normalizuje każdy węzeł tekstowy poszczególnych niezależnie od zawartości węzłów odwołanie do jednostki sąsiadujących ze sobą.  
  
 Aby zilustrować różnica między jednostki tryby obsługi należy wziąć pod uwagę następujące XML:  
  
```xml  
<!DOCTYPE doc [<!ENTITY num "123">]>  
 <doc> &#65; &num; </doc>  
```  
  
 Gdy `EntityHandling` ustawiono `ExpandEntities` węzeł elementu "doc" zawiera jeden węzeł tekstowy tekstem jednostki rozszerzonej:  
  
|Głębokość|Typ NodeType|Nazwa|Wartość|  
|-----------|--------------|----------|-----------|  
|1|Tekst||A 123|  
  
 Gdy `EntityHandling` ustawiono `ExpandCharEntites`, i <xref:System.Xml.XmlTextReader.WhitespaceHandling%2A> ustawiono znaczących lub wszystkich "doc" element rozszerza jednostki znaku i zwraca obiekt ogólne jako węzeł:  
  
|Głębokość|Typ NodeType|Nazwa|Wartość|  
|-----------|--------------|----------|-----------|  
|1|Tekst||ELEMENT|  
|1|Obiekt EntityReference|NUM||  
|1|SignificantWhitespace|||  
  
   
  
## Examples  
 W poniższym przykładzie użyto `ResolveEntity` — metoda rozszerzenia ogólne jednostki.  
  
 [!code-cpp[Classic WebData XmlValidatingReader.ResolveEntity Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlValidatingReader.ResolveEntity Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlValidatingReader.ResolveEntity Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlValidatingReader.ResolveEntity Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlValidatingReader.ResolveEntity Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlValidatingReader.ResolveEntity Example/VB/source.vb#1)]  
  
 W przykładzie użyto pliku `book1.xml`, jak wejściowego.  
  
 [!code-xml[Classic WebData XmlValidatingReader.ResolveEntity Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlValidatingReader.ResolveEntity Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Określono nieprawidłową wartość.</exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="EOF">
      <MemberSignature Language="C#" Value="public override bool EOF { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EOF" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.EOF" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property EOF As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool EOF { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy czytnik znajduje się pod koniec strumienia.</summary>
        <value>
          <see langword="true" /> Jeśli czytnik znajduje się na końcu strumienia; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.XmlValidatingReader> Klasa jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. Sprawdzanie poprawności można utworzyć <xref:System.Xml.XmlReader> wystąpienia przy użyciu <xref:System.Xml.XmlReaderSettings> klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz sekcję uwag <xref:System.Xml.XmlReader> strony odwołania.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetAttribute">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Pobiera wartość atrybutu.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetAttribute">
      <MemberSignature Language="C#" Value="public override string GetAttribute (int i);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string GetAttribute(int32 i) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlValidatingReader.GetAttribute(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetAttribute (i As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ GetAttribute(int i);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="i" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="i">Indeks atrybutu. Jest to indeks zaczynający się od zera. (Pierwszy atrybut ma indeks 0).</param>
        <summary>Pobiera wartość atrybutu z określonym indeksem.</summary>
        <returns>Wartość określonego atrybutu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie powoduje przeniesienia czytnika.  
  
> [!NOTE]
>  <xref:System.Xml.XmlValidatingReader> Klasa jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. Sprawdzanie poprawności można utworzyć <xref:System.Xml.XmlReader> wystąpienia przy użyciu <xref:System.Xml.XmlReaderSettings> klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz sekcję uwag <xref:System.Xml.XmlReader> strony odwołania.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="i" /> Parametru jest mniejszy niż 0 lub większą lub równą <see cref="P:System.Xml.XmlValidatingReader.AttributeCount" />.</exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="GetAttribute">
      <MemberSignature Language="C#" Value="public override string GetAttribute (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string GetAttribute(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlValidatingReader.GetAttribute(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetAttribute (name As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ GetAttribute(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Kwalifikowana nazwa atrybutu.</param>
        <summary>Pobiera wartość atrybutu o określonej nazwie.</summary>
        <returns>Wartość określonego atrybutu. Jeśli ten atrybut nie zostanie znaleziony, <see langword="null" /> jest zwracany.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.XmlValidatingReader> Klasa jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. Sprawdzanie poprawności można utworzyć <xref:System.Xml.XmlReader> wystąpienia przy użyciu <xref:System.Xml.XmlReaderSettings> klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz sekcję uwag <xref:System.Xml.XmlReader> strony odwołania.  
  
 Ta metoda nie powoduje przeniesienia czytnika.  
  
 Jeśli czytnik jest ustawiony na `DocumentType` węzła, ta metoda służy do pobrania publicznego i systemu literały, na przykład `reader.GetAttribute("PUBLIC")`  
  
   
  
## Examples  
 Poniższy przykład pobiera wartość atrybutu ISBN.  
  
 [!code-cpp[Classic WebData XmlValidatingReader.GetAttribute Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlValidatingReader.GetAttribute Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlValidatingReader.GetAttribute Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlValidatingReader.GetAttribute Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlValidatingReader.GetAttribute Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlValidatingReader.GetAttribute Example/VB/source.vb#1)]  
  
 W przykładzie użyto pliku `attrs.xml`, jak wejściowego.  
  
 [!code-xml[Classic WebData XmlValidatingReader.GetAttribute Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlValidatingReader.GetAttribute Example/XML/attrs.xml#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="GetAttribute">
      <MemberSignature Language="C#" Value="public override string GetAttribute (string localName, string namespaceURI);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string GetAttribute(string localName, string namespaceURI) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlValidatingReader.GetAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetAttribute (localName As String, namespaceURI As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ GetAttribute(System::String ^ localName, System::String ^ namespaceURI);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">Lokalna nazwa atrybutu.</param>
        <param name="namespaceURI">Identyfikator URI przestrzeni nazw atrybutu.</param>
        <summary>Pobiera wartość atrybutu z określonego nazwę lokalnego i przestrzeń nazw identyfikatora URI (Uniform Resource).</summary>
        <returns>Wartość określonego atrybutu. Jeśli ten atrybut nie zostanie znaleziony, <see langword="null" /> jest zwracany. Ta metoda nie powoduje przeniesienia czytnika.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.XmlValidatingReader> Klasa jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. Sprawdzanie poprawności można utworzyć <xref:System.Xml.XmlReader> wystąpienia przy użyciu <xref:System.Xml.XmlReaderSettings> klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz sekcję uwag <xref:System.Xml.XmlReader> strony odwołania.  
  
 Następujący kod XML zawiera atrybut w określonej przestrzeni nazw:  
  
```xml  
<test xmlns:dt="urn:datatypes" dt:type="int"/>  
```  
  
 Można wyszukiwać `dt:type` atrybutu przy użyciu jednego argumentu (prefiks i nazwa lokalna) lub dwóch argumentów (lokalna nazwa i identyfikator URI przestrzeni nazw):  
  
```csharp  
String dt = reader.GetAttribute("dt:type");  
String dt2 = reader.GetAttribute("type","urn:datatypes");  
```  
  
 Aby wyszukać `xmlns:dt` atrybutu, użyj jednej z następujących argumentów:  
  
```csharp  
String dt3 = reader.GetAttribute("xmlns:dt");  
String dt4 = reader.GetAttribute("dt",http://www.w3.org/2000/xmlns/);  
```  
  
 Te informacje można również uzyskać za pomocą <xref:System.Xml.XmlValidatingReader.Prefix%2A> właściwości.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="HasLineInfo">
      <MemberSignature Language="C#" Value="public bool HasLineInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool HasLineInfo() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlValidatingReader.HasLineInfo" />
      <MemberSignature Language="VB.NET" Value="Public Function HasLineInfo () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool HasLineInfo();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.IXmlLineInfo.HasLineInfo</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pobiera wartość wskazującą, czy klasa może zwrócić informacji wiersza.</summary>
        <returns>
          <see langword="true" /> Jeśli klasa może zwrócić informacji wiersza. w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.XmlValidatingReader> Klasa jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. Sprawdzanie poprawności można utworzyć <xref:System.Xml.XmlReader> wystąpienia przy użyciu <xref:System.Xml.XmlReaderSettings> klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz sekcję uwag <xref:System.Xml.XmlReader> strony odwołania.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="HasValue">
      <MemberSignature Language="C#" Value="public override bool HasValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasValue" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.HasValue" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property HasValue As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool HasValue { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy bieżący węzeł może mieć <see cref="P:System.Xml.XmlValidatingReader.Value" /> niż String.Empty.</summary>
        <value>
          <see langword="true" /> Jeśli węzeł, na którym aktualnie znajduje się czytnik może mieć <see langword="Value" />; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.XmlValidatingReader> Klasa jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. Sprawdzanie poprawności można utworzyć <xref:System.Xml.XmlReader> wystąpienia przy użyciu <xref:System.Xml.XmlReaderSettings> klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz sekcję uwag <xref:System.Xml.XmlReader> strony odwołania.  
  
 W poniższej tabeli wymieniono typy węzłów, które mają wartość do zwrócenia.  
  
|Typ węzła|Wartość|  
|---------------|-----------|  
|`Attribute`|Wartość atrybutu.|  
|`CDATA`|Zawartość sekcji CDATA.|  
|`Comment`|Zawartość komentarza.|  
|`DocumentType`|Podzestawie wewnętrznym.|  
|`ProcessingInstruction`|Całej zawartości, z wyłączeniem obiektu docelowego.|  
|`SignificantWhitespace`|Biały znak między znaczników w mieszanych modelu zawartości.|  
|`Text`|Zawartości węzła tekstowego.|  
|`Whitespace`|Biały znak między znaczników.|  
|`XmlDeclaration`|Zawartość deklaracji.|  
  
   
  
## Examples  
 Poniższy przykład odczytuje w kodzie XML przy użyciu różnych typów danych i wyświetla każdego z węzłów.  
  
 [!code-cpp[Classic WebData XmlValidatingReader.HasValue Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlValidatingReader.HasValue Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlValidatingReader.HasValue Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlValidatingReader.HasValue Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlValidatingReader.HasValue Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlValidatingReader.HasValue Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="IsDefault">
      <MemberSignature Language="C#" Value="public override bool IsDefault { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDefault" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.IsDefault" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsDefault As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsDefault { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy bieżący węzeł jest atrybut, który został wygenerowany na podstawie wartości domyślnej zdefiniowanej w definicji typu dokumentu (DTD) lub schematu.</summary>
        <value>
          <see langword="true" /> Jeśli bieżący węzeł jest atrybutem, którego wartość został wygenerowany na podstawie wartości domyślnej zdefiniowanej w definicji DTD lub schemat; <see langword="false" /> Jeśli jawnie ustawione wartości atrybutu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość jest stosowana tylko do węzła atrybutu.  
  
> [!NOTE]
>  <xref:System.Xml.XmlValidatingReader> Klasa jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. Sprawdzanie poprawności można utworzyć <xref:System.Xml.XmlReader> wystąpienia przy użyciu <xref:System.Xml.XmlReaderSettings> klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz sekcję uwag <xref:System.Xml.XmlReader> strony odwołania.  
  
   
  
## Examples  
 W poniższym przykładzie przedstawiono wszystkie węzły atrybuty dla elementu głównego.  
  
 [!code-cpp[XmlValidatingReader.IsDefault#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlValidatingReader.IsDefault/CPP/readdefattr.cpp#1)]
 [!code-csharp[XmlValidatingReader.IsDefault#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlValidatingReader.IsDefault/CS/readdefattr.cs#1)]
 [!code-vb[XmlValidatingReader.IsDefault#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlValidatingReader.IsDefault/VB/readdefattr.vb#1)]  
  
 W przykładzie użyto następujących plików jako dane wejściowe.  
  
 `book4.xml`  
  
 [!code-xml[XmlValidatingReader.IsDefault#2](~/samples/snippets/xml/VS_Snippets_Data/XmlValidatingReader.IsDefault/XML/book4.xml#2)]  
  
 `book.dtd`  
  
 [!code-xml[XmlValidatingReader.IsDefault#3](~/samples/snippets/xml/VS_Snippets_Data/XmlValidatingReader.IsDefault/XML/book.dtd#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="IsEmptyElement">
      <MemberSignature Language="C#" Value="public override bool IsEmptyElement { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEmptyElement" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.IsEmptyElement" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsEmptyElement As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsEmptyElement { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy bieżący węzeł jest elementem pustym (na przykład <c> &lt;MyElement /&gt;</c>).</summary>
        <value>
          <see langword="true" /> Jeśli bieżący węzeł jest elementem (<see cref="P:System.Xml.XmlValidatingReader.NodeType" /> jest równe <see langword="XmlNodeType.Element" />) który kończy się wyrazem <c> / &gt; </c>; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.XmlValidatingReader> Klasa jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. Sprawdzanie poprawności można utworzyć <xref:System.Xml.XmlReader> wystąpienia przy użyciu <xref:System.Xml.XmlReaderSettings> klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz sekcję uwag <xref:System.Xml.XmlReader> strony odwołania.  
  
 Ta właściwość umożliwia określenie różnica między następującymi:  
  
 `<item num="123"/>` (`IsEmptyElement` jest `true`).  
  
 `<item num="123">` (`IsEmptyElement` jest `false`, mimo że zawartość elementu jest pusta).  
  
 Odpowiadającego `EndElement` węzła nie jest generowane dla elementów pustych.  
  
 Jeśli domyślne zawartości został dodany do elementu z powodu sprawdzanie poprawności schematu, `IsEmptyElement` nadal zwraca `true`. Go nie ma żadnego wpływu na Określa, czy element ma wartość domyślną. Innymi słowy `IsEmptyElement` po prostu raporty, czy tag końcowy element ma element w dokumencie źródłowym.  
  
   
  
## Examples  
 W poniższym przykładzie przedstawiono każdy element zawartości tekstowej.  
  
 [!code-cpp[Classic WebData XmlValidatingReader.IsEmptyElement Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlValidatingReader.IsEmptyElement Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlValidatingReader.IsEmptyElement Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlValidatingReader.IsEmptyElement Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlValidatingReader.IsEmptyElement Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlValidatingReader.IsEmptyElement Example/VB/source.vb#1)]  
  
 W przykładzie użyto pliku `elems.xml`, jak wejściowego.  
  
 [!code-xml[Classic WebData XmlValidatingReader.IsEmptyElement Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlValidatingReader.IsEmptyElement Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="LineNumber">
      <MemberSignature Language="C#" Value="public int LineNumber { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LineNumber" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.LineNumber" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LineNumber As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int LineNumber { int get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Xml.IXmlLineInfo.LineNumber</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera bieżący numer wiersza.</summary>
        <value>Numer bieżącego wiersza. Wartość początkową dla tej właściwości wynosi 1.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.XmlValidatingReader> Klasa jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. Sprawdzanie poprawności można utworzyć <xref:System.Xml.XmlReader> wystąpienia przy użyciu <xref:System.Xml.XmlReaderSettings> klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz sekcję uwag <xref:System.Xml.XmlReader> strony odwołania.  
  
 Ta właściwość jest najczęściej używana do raportowania błędów, ale można wywołać w dowolnej chwili. Wartość początkową dla tej właściwości wynosi 1. Połączone z <xref:System.Xml.XmlValidatingReader.LinePosition%2A>, wartość 1,1 wskazuje początek dokumentu.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="LinePosition">
      <MemberSignature Language="C#" Value="public int LinePosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LinePosition" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.LinePosition" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LinePosition As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int LinePosition { int get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Xml.IXmlLineInfo.LinePosition</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera bieżącą pozycję w linii.</summary>
        <value>Bieżąca pozycja wiersza. Wartość początkową dla tej właściwości wynosi 1.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.XmlValidatingReader> Klasa jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. Sprawdzanie poprawności można utworzyć <xref:System.Xml.XmlReader> wystąpienia przy użyciu <xref:System.Xml.XmlReaderSettings> klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz sekcję uwag <xref:System.Xml.XmlReader> strony odwołania.  
  
 Ta właściwość jest najczęściej używana do raportowania błędów, ale można wywołać w dowolnej chwili. Początkowa wartość dla tej właściwości jest `1`.  
  
 Pozycji to pierwszy znak tekstu w znaczniku.  
  
```xml  
<root>  
 abc<tag/>  
</root>  
```  
  
 W pierwszym wierszu tekstu XML `LinePosition` z `2` odpowiada znak `r`; w drugim wierszu `LinePosition` z `5` odpowiada znak `t`; i na trzeci wiersz `LinePosition` z `3` odpowiada znak `r`.  
  
 Połączone z <xref:System.Xml.XmlValidatingReader.LineNumber%2A>, wartość `1,1` wskazuje początek dokumentu.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="LocalName">
      <MemberSignature Language="C#" Value="public override string LocalName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LocalName" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.LocalName" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property LocalName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ LocalName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera nazwę lokalnego bieżącego węzła.</summary>
        <value>Nazwa bieżącego węzła z prefiksem usunięte. Na przykład <see langword="LocalName" /> jest <see langword="book" /> dla elementu <c> &lt;bk:book&gt;</c>.  
  
 Dla typów węzłów, które nie mają nazwę (takich jak <see langword="Text" />, <see langword="Comment" />i tak dalej), ta właściwość zwraca String.Empty.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.XmlValidatingReader> Klasa jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. Sprawdzanie poprawności można utworzyć <xref:System.Xml.XmlReader> wystąpienia przy użyciu <xref:System.Xml.XmlReaderSettings> klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz sekcję uwag <xref:System.Xml.XmlReader> strony odwołania.  
  
   
  
## Examples  
 Poniższy przykład odczytuje XML fragment.  
  
 [!code-csharp[Classic WebData XmlParserContext.XmlParserContext Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlParserContext.XmlParserContext Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlParserContext.XmlParserContext Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlParserContext.XmlParserContext Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="LookupNamespace">
      <MemberSignature Language="C#" Value="public override string LookupNamespace (string prefix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string LookupNamespace(string prefix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlValidatingReader.LookupNamespace(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function LookupNamespace (prefix As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ LookupNamespace(System::String ^ prefix);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="prefix">Prefiks, których przestrzeń nazw identyfikatora URI (Uniform Resource) ma zostać rozwiązany. Aby dopasować domyślnej przestrzeni nazw, należy przekazać pusty ciąg.</param>
        <summary>Usuwa prefiks przestrzeni nazw w zakresie bieżącego elementu.</summary>
        <returns>Identyfikator URI przestrzeni nazw, do którego mapuje prefiks lub <see langword="null" /> przypadku nieznalezienia nie zgodny prefiks.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.XmlValidatingReader> Klasa jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. Sprawdzanie poprawności można utworzyć <xref:System.Xml.XmlReader> wystąpienia przy użyciu <xref:System.Xml.XmlReaderSettings> klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz sekcję uwag <xref:System.Xml.XmlReader> strony odwołania.  
  
 W poniższym ciągu XML, jeśli czytnik jest ustawiony na `href` atrybutu prefiks `a` został rozwiązany przez wywołanie metody `reader.LookupNamespace("a", true)`. Zwrócony ciąg jest `urn:456`.  
  
```xml  
<root xmlns:a="urn:456">  
 <item>  
 <ref href="a:b"/>  
 </item>  
</root>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <MemberGroup MemberName="MoveToAttribute">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Przenosi do określonego atrybutu.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MoveToAttribute">
      <MemberSignature Language="C#" Value="public override void MoveToAttribute (int i);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void MoveToAttribute(int32 i) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlValidatingReader.MoveToAttribute(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub MoveToAttribute (i As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void MoveToAttribute(int i);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="i" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="i">Indeks atrybutu.</param>
        <summary>Przenosi do atrybutu o określonym indeksie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.XmlValidatingReader> Klasa jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. Sprawdzanie poprawności można utworzyć <xref:System.Xml.XmlReader> wystąpienia przy użyciu <xref:System.Xml.XmlReaderSettings> klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz sekcję uwag <xref:System.Xml.XmlReader> strony odwołania.  
  
   
  
## Examples  
 Poniższy przykład odczytuje wszystkie elementy w węźle głównym.  
  
 [!code-cpp[Classic WebData XmlValidatingReader.AttributeCount Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlValidatingReader.AttributeCount Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlValidatingReader.AttributeCount Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlValidatingReader.AttributeCount Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlValidatingReader.AttributeCount Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlValidatingReader.AttributeCount Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="i" /> Parametru jest mniejszy niż 0 lub większą lub równą <see cref="P:System.Xml.XmlReader.AttributeCount" />.</exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="MoveToAttribute">
      <MemberSignature Language="C#" Value="public override bool MoveToAttribute (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool MoveToAttribute(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlValidatingReader.MoveToAttribute(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function MoveToAttribute (name As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool MoveToAttribute(System::String ^ name);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Kwalifikowana nazwa atrybutu.</param>
        <summary>Przenosi do atrybut o określonej nazwie.</summary>
        <returns>
          <see langword="true" /> Jeśli ten atrybut zostanie odnaleziony; w przeciwnym razie <see langword="false" />. Jeśli <see langword="false" />, pozycja czytnik nie ulega zmianie.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.XmlValidatingReader> Klasa jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. Sprawdzanie poprawności można utworzyć <xref:System.Xml.XmlReader> wystąpienia przy użyciu <xref:System.Xml.XmlReaderSettings> klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz sekcję uwag <xref:System.Xml.XmlReader> strony odwołania.  
  
 Po wywołaniu tej metody <xref:System.Xml.XmlValidatingReader.Name%2A>, <xref:System.Xml.XmlValidatingReader.NamespaceURI%2A>, i <xref:System.Xml.XmlValidatingReader.Prefix%2A> właściwości odzwierciedlają właściwości tego atrybutu.  
  
   
  
## Examples  
 Poniższy przykład odczytuje atrybutu z węzłami odwołanie tekstu i jednostek.  
  
 [!code-cpp[Classic WebData XmlValidatingReader.MoveToAttribute Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlValidatingReader.MoveToAttribute Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlValidatingReader.MoveToAttribute Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlValidatingReader.MoveToAttribute Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlValidatingReader.MoveToAttribute Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlValidatingReader.MoveToAttribute Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="MoveToAttribute">
      <MemberSignature Language="C#" Value="public override bool MoveToAttribute (string localName, string namespaceURI);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool MoveToAttribute(string localName, string namespaceURI) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlValidatingReader.MoveToAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function MoveToAttribute (localName As String, namespaceURI As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool MoveToAttribute(System::String ^ localName, System::String ^ namespaceURI);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">Lokalna nazwa atrybutu.</param>
        <param name="namespaceURI">Identyfikator URI przestrzeni nazw atrybutu.</param>
        <summary>Przenosi do atrybut o określonej nazwy lokalnej i przestrzeni nazw jednolity identyfikator zasobów (URI).</summary>
        <returns>
          <see langword="true" /> Jeśli ten atrybut zostanie odnaleziony; w przeciwnym razie <see langword="false" />. Jeśli <see langword="false" />, pozycja czytnik nie ulega zmianie.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.XmlValidatingReader> Klasa jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. Sprawdzanie poprawności można utworzyć <xref:System.Xml.XmlReader> wystąpienia przy użyciu <xref:System.Xml.XmlReaderSettings> klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz sekcję uwag <xref:System.Xml.XmlReader> strony odwołania.  
  
 Po wywołaniu tej metody <xref:System.Xml.XmlValidatingReader.Name%2A>, <xref:System.Xml.XmlValidatingReader.NamespaceURI%2A>, i <xref:System.Xml.XmlValidatingReader.Prefix%2A> właściwości odzwierciedlają właściwości tego atrybutu.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="MoveToElement">
      <MemberSignature Language="C#" Value="public override bool MoveToElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool MoveToElement() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlValidatingReader.MoveToElement" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function MoveToElement () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool MoveToElement();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Przenosi element, który zawiera bieżący węzeł atrybutów.</summary>
        <returns>
          <see langword="true" /> Jeśli czytnik jest ustawiony na atrybut (czytnik jest przenoszony do elementu, który jest właścicielem atrybut); <see langword="false" /> Jeśli czytnik nie jest ustawiony na atrybut (pozycja czytnik nie ulega zmianie).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.XmlValidatingReader> Klasa jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. Sprawdzanie poprawności można utworzyć <xref:System.Xml.XmlReader> wystąpienia przy użyciu <xref:System.Xml.XmlReaderSettings> klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz sekcję uwag <xref:System.Xml.XmlReader> strony odwołania.  
  
 Użyj tej metody, aby powrócić do elementu po nawigować przez jego atrybuty. Ta metoda przenosi czytnik do jednego z następujących typów węzła: `Element`, `DocumentType`, lub `XmlDeclaration`.  
  
   
  
## Examples  
 Poniższy przykład odczytuje wszystkie elementy w węźle głównym.  
  
 [!code-cpp[Classic WebData XmlValidatingReader.AttributeCount Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlValidatingReader.AttributeCount Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlValidatingReader.AttributeCount Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlValidatingReader.AttributeCount Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlValidatingReader.AttributeCount Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlValidatingReader.AttributeCount Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="MoveToFirstAttribute">
      <MemberSignature Language="C#" Value="public override bool MoveToFirstAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool MoveToFirstAttribute() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlValidatingReader.MoveToFirstAttribute" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function MoveToFirstAttribute () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool MoveToFirstAttribute();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Przenosi do pierwszego atrybutu.</summary>
        <returns>
          <see langword="true" /> Jeśli istnieje atrybut (czytnik przenosi do pierwszego atrybutu); w przeciwnym razie <see langword="false" /> (pozycja czytnik nie ulega zmianie).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.XmlValidatingReader> Klasa jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. Sprawdzanie poprawności można utworzyć <xref:System.Xml.XmlReader> wystąpienia przy użyciu <xref:System.Xml.XmlReaderSettings> klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz sekcję uwag <xref:System.Xml.XmlReader> strony odwołania.  
  
   
  
## Examples  
 Poniższy przykład odczytuje XML fragment.  
  
 [!code-cpp[Classic WebData XmlValidatingReader.MoveToFirstAttribute Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlValidatingReader.MoveToFirstAttribute Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlValidatingReader.MoveToFirstAttribute Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlValidatingReader.MoveToFirstAttribute Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlValidatingReader.MoveToFirstAttribute Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlValidatingReader.MoveToFirstAttribute Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="MoveToNextAttribute">
      <MemberSignature Language="C#" Value="public override bool MoveToNextAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool MoveToNextAttribute() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlValidatingReader.MoveToNextAttribute" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function MoveToNextAttribute () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool MoveToNextAttribute();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Przechodzi do następnego atrybutu.</summary>
        <returns>
          <see langword="true" /> Jeśli istnieje atrybut dalej; <see langword="false" /> nie więcej atrybutach.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.XmlValidatingReader> Klasa jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. Sprawdzanie poprawności można utworzyć <xref:System.Xml.XmlReader> wystąpienia przy użyciu <xref:System.Xml.XmlReaderSettings> klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz sekcję uwag <xref:System.Xml.XmlReader> strony odwołania.  
  
 Jeśli bieżący węzeł jest węzłem elementu, ta metoda jest odpowiednikiem <xref:System.Xml.XmlValidatingReader.MoveToFirstAttribute%2A>. Jeśli `MoveToNextAttribute` zwraca `true`, czytnik przechodzi do następnego atrybutu; w przeciwnym razie pozycja czytnik nie ulega zmianie.  
  
   
  
## Examples  
 Poniższy przykład odczytuje XML fragment.  
  
 [!code-cpp[Classic WebData XmlValidatingReader.MoveToFirstAttribute Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlValidatingReader.MoveToFirstAttribute Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlValidatingReader.MoveToFirstAttribute Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlValidatingReader.MoveToFirstAttribute Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlValidatingReader.MoveToFirstAttribute Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlValidatingReader.MoveToFirstAttribute Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public override string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.Name" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Name { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera kwalifikowaną nazwę bieżącego węzła.</summary>
        <value>Kwalifikowana nazwa bieżącego węzła. Na przykład <see langword="Name" /> jest <see langword="bk:book" /> dla elementu <c> &lt;bk:book&gt;</c>.  
  
 Nazwa zwrócona jest zależna od <see cref="P:System.Xml.XmlValidatingReader.NodeType" /> węzła. Następujące typy węzłów zwracać wartości listy. Wszystkie inne typy węzła zwraca pusty ciąg.  
  
 <list type="table"><listheader><term> Typ węzła  
  
 </term><description> Nazwa  
  
 </description></listheader><item><term><see langword="Attribute" /></term><description> Nazwa atrybutu.  
  
 </description></item><item><term><see langword="DocumentType" /></term><description> Nazwa typu dokumentu.  
  
 </description></item><item><term><see langword="Element" /></term><description> Nazwa tagu.  
  
 </description></item><item><term><see langword="EntityReference" /></term><description> Nazwa odwołania do jednostki.  
  
 </description></item><item><term><see langword="ProcessingInstruction" /></term><description> Elementem docelowym instrukcji przetwarzania.  
  
 </description></item><item><term><see langword="XmlDeclaration" /></term><description> Literał <see langword="xml" />.  
  
 </description></item></list></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.XmlValidatingReader> Klasa jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. Sprawdzanie poprawności można utworzyć <xref:System.Xml.XmlReader> wystąpienia przy użyciu <xref:System.Xml.XmlReaderSettings> klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz sekcję uwag <xref:System.Xml.XmlReader> strony odwołania.  
  
   
  
## Examples  
 Poniższy przykład umożliwia odczytanie pliku XML i wyświetla każdego z węzłów.  
  
 [!code-cpp[Classic WebData XmlValidatingReader.Name Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlValidatingReader.Name Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlValidatingReader.Name Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlValidatingReader.Name Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlValidatingReader.Name Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlValidatingReader.Name Example/VB/source.vb#1)]  
  
 W przykładzie użyto pliku `items.xml`, jak wejściowego.  
  
 [!code-xml[Classic WebData XmlValidatingReader.Name Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlValidatingReader.Name Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="Namespaces">
      <MemberSignature Language="C#" Value="public bool Namespaces { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Namespaces" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.Namespaces" />
      <MemberSignature Language="VB.NET" Value="Public Property Namespaces As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Namespaces { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy w celu obsługi przestrzeni nazw.</summary>
        <value>
          <see langword="true" /> do obsługi przestrzeni nazw. w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.XmlValidatingReader> Klasa jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. Sprawdzanie poprawności można utworzyć <xref:System.Xml.XmlReader> wystąpienia przy użyciu <xref:System.Xml.XmlReaderSettings> klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz sekcję uwag <xref:System.Xml.XmlReader> strony odwołania.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="NamespaceURI">
      <MemberSignature Language="C#" Value="public override string NamespaceURI { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NamespaceURI" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.NamespaceURI" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property NamespaceURI As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ NamespaceURI { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera obszar nazw URI Uniform Resource Identifier () (zgodnie z definicją w specyfikacji Namespace w sieci World Wide Web konsorcjum W3C) węzła na znajduje się czytnika.</summary>
        <value>Przestrzeń nazw identyfikatora URI bieżącego węzła; w przeciwnym razie ciągiem pustym.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość ma zastosowanie w przypadku `Element` i `Attribute` tylko węzłów.  
  
> [!NOTE]
>  <xref:System.Xml.XmlValidatingReader> Klasa jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. Sprawdzanie poprawności można utworzyć <xref:System.Xml.XmlReader> wystąpienia przy użyciu <xref:System.Xml.XmlReaderSettings> klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz sekcję uwag <xref:System.Xml.XmlReader> strony odwołania.  
  
   
  
## Examples  
 Poniższy przykład odczytuje XML fragment.  
  
 [!code-csharp[Classic WebData XmlParserContext.XmlParserContext Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlParserContext.XmlParserContext Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlParserContext.XmlParserContext Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlParserContext.XmlParserContext Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="NameTable">
      <MemberSignature Language="C#" Value="public override System.Xml.XmlNameTable NameTable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlNameTable NameTable" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.NameTable" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property NameTable As XmlNameTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Xml::XmlNameTable ^ NameTable { System::Xml::XmlNameTable ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNameTable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera <see cref="T:System.Xml.XmlNameTable" /> skojarzone z tą implementacją.</summary>
        <value>
          <see langword="XmlNameTable" /> umożliwiające uzyskanie atomized wersji ciągu w węźle.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.XmlValidatingReader> Klasa jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. Sprawdzanie poprawności można utworzyć <xref:System.Xml.XmlReader> wystąpienia przy użyciu <xref:System.Xml.XmlReaderSettings> klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz sekcję uwag <xref:System.Xml.XmlReader> strony odwołania.  
  
 Wszystkie nazwy węzła i atrybut zwrócony z <xref:System.Xml.XmlValidatingReader> są atomized przy użyciu `NameTable`. Gdy takiej samej nazwie są zwracane wielokrotnie (na przykład `Customer`), takie same `String` zostanie zwrócony obiekt dla tej nazwy. Dzięki temu można napisać kod wydajne, który obiekt porównania na te ciągi, zamiast porównania ciągu kosztowne.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlNameTable" />
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="NodeType">
      <MemberSignature Language="C#" Value="public override System.Xml.XmlNodeType NodeType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.XmlNodeType NodeType" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.NodeType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property NodeType As XmlNodeType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Xml::XmlNodeType NodeType { System::Xml::XmlNodeType get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNodeType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera typ bieżącego węzła.</summary>
        <value>Jeden z <see cref="T:System.Xml.XmlNodeType" /> wartości reprezentujący typ bieżącego węzła.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.XmlValidatingReader> Klasa jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. Sprawdzanie poprawności można utworzyć <xref:System.Xml.XmlReader> wystąpienia przy użyciu <xref:System.Xml.XmlReaderSettings> klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz sekcję uwag <xref:System.Xml.XmlReader> strony odwołania.  
  
 Ta właściwość nie zwraca następujące `XmlNodeType` typów: `Document`, `DocumentFragment`, `Entity`, lub `Notation`.  
  
   
  
## Examples  
 Poniższy przykład umożliwia odczytanie pliku XML i wyświetla każdego z węzłów.  
  
 [!code-cpp[Classic WebData XmlValidatingReader.Name Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlValidatingReader.Name Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlValidatingReader.Name Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlValidatingReader.Name Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlValidatingReader.Name Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlValidatingReader.Name Example/VB/source.vb#1)]  
  
 W przykładzie użyto pliku `items.xml`, jak wejściowego.  
  
 [!code-xml[Classic WebData XmlValidatingReader.Name Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlValidatingReader.Name Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="Prefix">
      <MemberSignature Language="C#" Value="public override string Prefix { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Prefix" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.Prefix" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Prefix As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Prefix { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera prefiks przestrzeni nazw skojarzone z bieżącego węzła.</summary>
        <value>Prefiks przestrzeni nazw skojarzone z bieżącego węzła.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.XmlValidatingReader> Klasa jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. Sprawdzanie poprawności można utworzyć <xref:System.Xml.XmlReader> wystąpienia przy użyciu <xref:System.Xml.XmlReaderSettings> klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz sekcję uwag <xref:System.Xml.XmlReader> strony odwołania.  
  
   
  
## Examples  
 Poniższy przykład odczytuje XML fragment.  
  
 [!code-csharp[Classic WebData XmlParserContext.XmlParserContext Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlParserContext.XmlParserContext Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlParserContext.XmlParserContext Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlParserContext.XmlParserContext Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="QuoteChar">
      <MemberSignature Language="C#" Value="public override char QuoteChar { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance char QuoteChar" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.QuoteChar" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property QuoteChar As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property char QuoteChar { char get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera znak cudzysłowu ująć węzła atrybutu.</summary>
        <value>Znak cudzysłowu ("lub") używany do ująć węzła atrybutu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość jest stosowana tylko do węzła atrybutu.  
  
> [!NOTE]
>  <xref:System.Xml.XmlValidatingReader> Klasa jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. Sprawdzanie poprawności można utworzyć <xref:System.Xml.XmlReader> wystąpienia przy użyciu <xref:System.Xml.XmlReaderSettings> klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz sekcję uwag <xref:System.Xml.XmlReader> strony odwołania.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public override bool Read ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Read() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlValidatingReader.Read" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Read () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Read();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Odczytuje następny węzeł ze strumienia.</summary>
        <returns>
          <see langword="true" /> Jeśli węzeł next został odczytany pomyślnie; <see langword="false" /> Jeśli nie ma żadnych więcej węzłów do odczytu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.XmlValidatingReader> Klasa jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. Sprawdzanie poprawności można utworzyć <xref:System.Xml.XmlReader> wystąpienia przy użyciu <xref:System.Xml.XmlReaderSettings> klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz sekcję uwag <xref:System.Xml.XmlReader> strony odwołania.  
  
 Czytnik jest najpierw utworzenia i zainicjowana, nie ma żadnych informacji dostępne. Należy wywołać `Read` odczytać pierwszy węzeł.  
  
   
  
## Examples  
 Poniższy przykład umożliwia odczytanie pliku XML i wyświetla każdy węzeł.  
  
 [!code-cpp[Classic WebData XmlValidatingReader.Name Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlValidatingReader.Name Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlValidatingReader.Name Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlValidatingReader.Name Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlValidatingReader.Name Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlValidatingReader.Name Example/VB/source.vb#1)]  
  
 W przykładzie użyto pliku `items.xml`, jak wejściowego.  
  
 [!code-xml[Classic WebData XmlValidatingReader.Name Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlValidatingReader.Name Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="ReadAttributeValue">
      <MemberSignature Language="C#" Value="public override bool ReadAttributeValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool ReadAttributeValue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlValidatingReader.ReadAttributeValue" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ReadAttributeValue () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool ReadAttributeValue();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Analizuje wartość atrybutu do co najmniej jeden <see langword="Text" />, <see langword="EntityReference" />, lub <see langword="EndEntity" /> węzłów.</summary>
        <returns>
          <see langword="true" /> Jeśli ma węzłów do zwrócenia.  
  
 <see langword="false" /> Czytnik nie jest ustawiony na węzła atrybutu po nawiązaniu połączenia początkowego lub wartości atrybutów zostały przeczytane.  
  
 Pusta atrybutów, takich jak <c>różne = ""</c>, zwraca <see langword="true" /> z jednego węzła przy użyciu wartości String.Empty.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.XmlValidatingReader> Klasa jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. Sprawdzanie poprawności można utworzyć <xref:System.Xml.XmlReader> wystąpienia przy użyciu <xref:System.Xml.XmlReaderSettings> klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz sekcję uwag <xref:System.Xml.XmlReader> strony odwołania.  
  
 Ta metoda po wywołaniu <xref:System.Xml.XmlValidatingReader.MoveToAttribute%2A> do przeczytania węzłów odwołania tekst lub jednostki, które składają się wartość atrybutu. <xref:System.Xml.XmlReader.Depth%2A> Węzłów wartość atrybutu jest jeden plus głębokość węzła atrybutu. `Depth` Zwiększa i zmniejsza przez jeden po kroku do i z odwołań do jednostek ogólnych.  
  
 Załóżmy na przykład następujący kod XML: `<test name="a &b; c"/>`  
  
 gdy jednostka `b` zdefiniowane w definicji typu dokumentu (DTD) w następujący sposób: `<!ENTITY b "123">`  
  
 Jeśli <xref:System.Xml.XmlValidatingReader.EntityHandling%2A> ma ustawioną wartość `ExpandCharEntities`, poniższy kod C# zwraca wartość atrybutu jako dwa węzły tekstowe i jednego obiektu węzła odniesienia:  
  
```csharp  
reader.MoveToAttribute("name");  
  while (reader.ReadAttributeValue())  
  {  
  if (reader.NodeType == XmlNodeType.Text)  
  {  
  // at this point reader.Value == "a " or " c"  
  }  
  else if (reader.NodeType == XmlNodeType.EntityReference)  
  {  
  // at this point reader.Name == "b"  
  reader.ResolveEntity();  
  while (reader.ReadAttributeValue() &&  
  reader.NodeType != XmlNodeType.EndEntity)  
  {  
  // reader.Value == "123"  
  }  
  }  
    }  
```  
  
   
  
## Examples  
 Poniższy przykład odczytuje atrybutu z węzłami odwołanie tekstu i jednostek.  
  
 [!code-cpp[Classic WebData XmlValidatingReader.MoveToAttribute Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlValidatingReader.MoveToAttribute Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlValidatingReader.MoveToAttribute Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlValidatingReader.MoveToAttribute Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlValidatingReader.MoveToAttribute Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlValidatingReader.MoveToAttribute Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="ReadContentAsBase64">
      <MemberSignature Language="C#" Value="public override int ReadContentAsBase64 (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 ReadContentAsBase64(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlValidatingReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ReadContentAsBase64 (buffer As Byte(), index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int ReadContentAsBase64(cli::array &lt;System::Byte&gt; ^ buffer, int index, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">Bufor, do którego można skopiować tekst wynikowy. Ta wartość nie może być <see langword="null" />.</param>
        <param name="index">Przesunięcie w buforze zacząć Kopiowanie wyniku.</param>
        <param name="count">Maksymalna liczba bajtów do skopiowania w buforze. Zwracany jest rzeczywistą liczbę bajtów skopiowanych z tej metody.</param>
        <summary>Odczytuje zawartość i zwraca wartość Base64 zdekodować binarne bajtów.</summary>
        <returns>Liczba bajtów zapisanych w buforze.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.XmlValidatingReader> Klasa jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. Sprawdzanie poprawności można utworzyć <xref:System.Xml.XmlReader> wystąpienia przy użyciu <xref:System.Xml.XmlReaderSettings> klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz sekcję uwag <xref:System.Xml.XmlReader> strony odwołania.  
  
 Ta metoda prześle strumieniowo zawartość, dekoduje zawartości Base64 i zwraca dekodowane bajty binarne (na przykład wbudowanego Base64 zakodowane obrazu GIF) w buforze. Tę metodę można wywołać kolejno odczytać dużych strumieni osadzonych tekstu. Aby uzyskać więcej informacji, zobacz dokument RFC 1521, "części MIME (Multipurpose Internet Mail Extensions) co: mechanizmy określania i opisujące formatu treści wiadomości Internet". Specyfikacje RFC można uzyskać [żądań dla witryny sieci Web komentarze](https://www.rfc-editor.org).  
  
> [!NOTE]
>  Nie mają do żadnej właściwości czytnika między wywołań <xref:System.Xml.XmlValidatingReader.ReadContentAsBase64%2A> metody do momentu metoda zwraca wartość 0.  
  
 Ta metoda ma następującą charakterystykę:  
  
-   <xref:System.Xml.XmlValidatingReader.ReadContentAsBase64%2A> Zwraca wartość 0, jeśli osiągnęła koniec strumienia bajtów, które zostało zasilany. Czytnik znajduje się na pierwszym węźle-content.  
  
-   Jeśli możesz poprosić o mniej lub liczbą bajtów niż pozostaną w strumieniu czytnik pozostaje w bieżącym położeniu.  
  
-   <xref:System.Xml.XmlValidatingReader.ReadContentAsBase64%2A> nie jest obsługiwane na następujących typach węzła XML: Element, XmlDeclaration, None, dokument, typ dokumentu notacji, jednostki i DocumentFragment.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> Wartość jest <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="M:System.Xml.XmlValidatingReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)" /> nie jest obsługiwana w bieżącym węźle.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Indeks do buforu lub indeks i liczba jest większa niż rozmiar buforu przydzielone.</exception>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlValidatingReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="T:System.Xml.XmlNodeType" />
      </Docs>
    </Member>
    <Member MemberName="ReadContentAsBinHex">
      <MemberSignature Language="C#" Value="public override int ReadContentAsBinHex (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 ReadContentAsBinHex(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlValidatingReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ReadContentAsBinHex (buffer As Byte(), index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int ReadContentAsBinHex(cli::array &lt;System::Byte&gt; ^ buffer, int index, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">Bufor, do którego można skopiować tekst wynikowy. Ta wartość nie może być <see langword="null" />.</param>
        <param name="index">Przesunięcie w buforze zacząć Kopiowanie wyniku.</param>
        <param name="count">Maksymalna liczba bajtów do skopiowania w buforze. Zwracany jest rzeczywistą liczbę bajtów skopiowanych z tej metody.</param>
        <summary>Odczytuje zawartość i zwraca wartość BinHex zdekodować binarne bajtów.</summary>
        <returns>Liczba bajtów zapisanych w buforze.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.XmlValidatingReader> Klasa jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. Sprawdzanie poprawności można utworzyć <xref:System.Xml.XmlReader> wystąpienia przy użyciu <xref:System.Xml.XmlReaderSettings> klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz sekcję uwag <xref:System.Xml.XmlReader> strony odwołania.  
  
 Ta metoda prześle strumieniowo zawartość, dekoduje zawartości BinHex i zwraca dekodowane bajty binarne (na przykład wbudowanego BinHex zakodowane obrazu GIF) w buforze. Tę metodę można wywołać kolejno odczytać dużych strumieni osadzonych tekstu.  
  
> [!NOTE]
>  Nie mają do żadnej właściwości czytnika między wywołań <xref:System.Xml.XmlValidatingReader.ReadContentAsBinHex%2A> metody do momentu metoda zwraca wartość 0.  
  
 Ta metoda ma następującą charakterystykę:  
  
-   <xref:System.Xml.XmlValidatingReader.ReadContentAsBinHex%2A> Zwraca wartość 0, jeśli osiągnęła koniec strumienia bajtów, które zostało zasilany. Czytnik znajduje się na pierwszym węźle-content.  
  
-   Jeśli możesz poprosić o mniej lub liczbą bajtów niż pozostaną w strumieniu czytnik pozostaje w bieżącym położeniu.  
  
-   <xref:System.Xml.XmlValidatingReader.ReadContentAsBinHex%2A> nie jest obsługiwane na następujących typach węzła XML: Element, XmlDeclaration, None, dokument, typ dokumentu notacji, jednostki i DocumentFragment.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> Wartość jest <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">
          <see cref="M:System.Xml.XmlValidatingReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)" /> nie jest obsługiwana w bieżącym węźle.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Indeks do buforu lub indeks i liczba jest większa niż rozmiar buforu przydzielone.</exception>
        <exception cref="T:System.NotSupportedException">
          <see cref="T:System.Xml.XmlValidatingReader" /> Implementacja nie obsługuje tej metody.</exception>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlValidatingReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="T:System.Xml.XmlNodeType" />
      </Docs>
    </Member>
    <Member MemberName="ReadElementContentAsBase64">
      <MemberSignature Language="C#" Value="public override int ReadElementContentAsBase64 (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 ReadElementContentAsBase64(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlValidatingReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ReadElementContentAsBase64 (buffer As Byte(), index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int ReadElementContentAsBase64(cli::array &lt;System::Byte&gt; ^ buffer, int index, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">Bufor, do którego można skopiować tekst wynikowy. Ta wartość nie może być <see langword="null" />.</param>
        <param name="index">Przesunięcie w buforze zacząć Kopiowanie wyniku.</param>
        <param name="count">Maksymalna liczba bajtów do skopiowania w buforze. Zwracany jest rzeczywistą liczbę bajtów skopiowanych z tej metody.</param>
        <summary>Odczytuje element i dekoduje zawartości Base64.</summary>
        <returns>Liczba bajtów zapisanych w buforze.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.XmlValidatingReader> Klasa jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. Sprawdzanie poprawności można utworzyć <xref:System.Xml.XmlReader> wystąpienia przy użyciu <xref:System.Xml.XmlReaderSettings> klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz sekcję uwag <xref:System.Xml.XmlReader> strony odwołania.  
  
 Ta metoda odczytuje zawartość elementu, dekoduje przy użyciu kodowania Base64 i zwraca dekodowane bajtów binarnych (na przykład wbudowanego Base64 zakodowane obrazu GIF) w buforze. Aby uzyskać więcej informacji, zobacz dokument RFC 1521, "części MIME (Multipurpose Internet Mail Extensions) co: mechanizmy określania i opisujące formatu treści wiadomości Internet". Specyfikacje RFC można uzyskać [żądań dla witryny sieci Web komentarze](https://www.rfc-editor.org).  
  
 Ta metoda może odczytywać tylko elementy zawartości prostej. Element może zawierać tekstu, biały znak znaczący biały znak, CDATA sekcje, komentarze i instrukcji przetwarzania. Może również zawierać odwołań do jednostek, które są automatycznie rozwinięte. Element nie może mieć elementów podrzędnych.  
  
 Ta metoda jest bardzo podobny do <xref:System.Xml.XmlValidatingReader.ReadContentAsBase64%2A> można wywołać metody, ale tylko na typy węzłów elementu.  
  
 Jeśli `count` wartość jest większa niż liczba bajtów w dokumencie, lub jeśli jest taka sama liczba bajtów w dokumencie <xref:System.Xml.XmlValidatingReader> odczytuje wszystkie pozostałe bajty w dokumencie i zwraca liczbę bajtów do odczytu. Następne <xref:System.Xml.XmlValidatingReader> wywołanie metody zwraca zero i przenosi czytnik do następującego węzła <xref:System.Xml.XmlNodeType.EndElement>.  
  
 Jeśli należy wywołać <xref:System.Xml.XmlValidatingReader.Read%2A> przed całą zawartość elementu jest używany, czytnik może zachowywać się tak, jakby został wykorzystany pierwszy zawartości, a następnie <xref:System.Xml.XmlValidatingReader.Read%2A> wywołano metodę. Oznacza to, czy czytnik odczyta cały tekst do momentu napotkano end element. Następnie odczytać węzła tagu końcowego, odczytuje następny węzeł i umieść się w węźle kolejnych dalej.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> Wartość jest <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Bieżący węzeł nie jest węzłem elementu.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Indeks do buforu lub indeks i liczba jest większa niż rozmiar buforu przydzielone.</exception>
        <exception cref="T:System.NotSupportedException">
          <see cref="T:System.Xml.XmlValidatingReader" /> Implementacja nie obsługuje tej metody.</exception>
        <exception cref="T:System.Xml.XmlException">Element zawiera zawartością mieszaną.</exception>
        <exception cref="T:System.FormatException">Nie można przekonwertować zawartości na żądanego typu.</exception>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlValidatingReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="ReadElementContentAsBinHex">
      <MemberSignature Language="C#" Value="public override int ReadElementContentAsBinHex (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 ReadElementContentAsBinHex(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlValidatingReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ReadElementContentAsBinHex (buffer As Byte(), index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int ReadElementContentAsBinHex(cli::array &lt;System::Byte&gt; ^ buffer, int index, int count);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" />
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="buffer">Bufor, do którego można skopiować tekst wynikowy. Ta wartość nie może być <see langword="null" />.</param>
        <param name="index">Przesunięcie w buforze zacząć Kopiowanie wyniku.</param>
        <param name="count">Maksymalna liczba bajtów do skopiowania w buforze. Zwracany jest rzeczywistą liczbę bajtów skopiowanych z tej metody.</param>
        <summary>Odczytuje element i dekoduje zawartości BinHex.</summary>
        <returns>Liczba bajtów zapisanych w buforze.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.XmlValidatingReader> Klasa jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. Sprawdzanie poprawności można utworzyć <xref:System.Xml.XmlReader> wystąpienia przy użyciu <xref:System.Xml.XmlReaderSettings> klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz sekcję uwag <xref:System.Xml.XmlReader> strony odwołania.  
  
 Ta metoda odczytuje zawartość elementu, przy użyciu kodowania BinHex dekoduje i zwraca dekodowane bajty binarne (na przykład wbudowanego BinHex zakodowane obrazu GIF) w buforze.  
  
 Ta metoda może odczytywać tylko elementy zawartości prostej. Element może zawierać tekstu, biały znak znaczący biały znak, CDATA sekcje, komentarze i instrukcji przetwarzania. Może również zawierać odwołań do jednostek, które są automatycznie rozwinięte. Element nie może mieć elementów podrzędnych.  
  
 Ta metoda jest bardzo podobny do <xref:System.Xml.XmlValidatingReader.ReadContentAsBinHex%2A> można wywołać metody, ale tylko na typy węzłów elementu.  
  
 Jeśli `count` wartość jest większa niż liczba bajtów w dokumencie, lub jeśli jest taka sama liczba bajtów w dokumencie <xref:System.Xml.XmlValidatingReader> odczytuje wszystkie pozostałe bajty w dokumencie i zwraca liczbę bajtów do odczytu. Następne <xref:System.Xml.XmlValidatingReader> wywołanie metody zwraca zero i przenosi czytnik do następującego węzła <xref:System.Xml.XmlNodeType.EndElement>.  
  
 Jeśli należy wywołać <xref:System.Xml.XmlValidatingReader.Read%2A> przed całą zawartość elementu jest używany, czytnik może zachowywać się tak, jakby został wykorzystany pierwszy zawartości, a następnie <xref:System.Xml.XmlValidatingReader.Read%2A> wywołano metodę. Oznacza to, czy czytnik odczyta cały tekst do momentu napotkano end element. Następnie odczytać węzła tagu końcowego, odczytuje następny węzeł i umieść się w węźle kolejnych dalej.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="buffer" /> Wartość jest <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Bieżący węzeł nie jest węzłem elementu.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Indeks do buforu lub indeks i liczba jest większa niż rozmiar buforu przydzielone.</exception>
        <exception cref="T:System.NotSupportedException">
          <see cref="T:System.Xml.XmlValidatingReader" /> Implementacja nie obsługuje tej metody.</exception>
        <exception cref="T:System.Xml.XmlException">Element zawiera zawartością mieszaną.</exception>
        <exception cref="T:System.FormatException">Nie można przekonwertować zawartości na żądanego typu.</exception>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlValidatingReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Reader">
      <MemberSignature Language="C#" Value="public System.Xml.XmlReader Reader { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlReader Reader" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.Reader" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Reader As XmlReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::XmlReader ^ Reader { System::Xml::XmlReader ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReader</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera <see cref="T:System.Xml.XmlReader" /> użyta do skonstruowania to <see langword="XmlValidatingReader" />.</summary>
        <value>
          <see langword="XmlReader" /> Określonym w konstruktorze.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.XmlValidatingReader> Klasa jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. Sprawdzanie poprawności można utworzyć <xref:System.Xml.XmlReader> wystąpienia przy użyciu <xref:System.Xml.XmlReaderSettings> klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz sekcję uwag <xref:System.Xml.XmlReader> strony odwołania.  
  
 Ta właściwość zezwala użytkownikowi na dostęp do właściwości specyficzne dla podany czytnik. Zwraca wartość typu `XmlReader`. Użytkownik powinien zapytania dla typu przed rzutowania.  
  
 Zmiany stanu czytnika zwrócony (na przykład wywoływania jednej z metod odczytu) może spowodować nieoczekiwane wyniki.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="ReadState">
      <MemberSignature Language="C#" Value="public override System.Xml.ReadState ReadState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.ReadState ReadState" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.ReadState" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ReadState As ReadState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Xml::ReadState ReadState { System::Xml::ReadState get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.ReadState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera stan czytnika danych.</summary>
        <value>Jeden z <see cref="T:System.Xml.ReadState" /> wartości.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.XmlValidatingReader> Klasa jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. Sprawdzanie poprawności można utworzyć <xref:System.Xml.XmlReader> wystąpienia przy użyciu <xref:System.Xml.XmlReaderSettings> klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz sekcję uwag <xref:System.Xml.XmlReader> strony odwołania.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="ReadString">
      <MemberSignature Language="C#" Value="public override string ReadString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ReadString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlValidatingReader.ReadString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ReadString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ReadString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Odczytuje zawartość elementu lub tekst węzła jako ciąg.</summary>
        <returns>Zawartość elementu lub tekstu węzła. To może być pustym ciągiem, jeśli czytnik jest ustawiony na inną niż element lub tekst węzła lub jeśli brak więcej zawartości tekstu do zwrócenia w bieżącym kontekście.  
  
 <block subset="none" type="note"><para>  
 Węzeł tekstowy może być elementu lub atrybutu węzeł tekstowy.  
  
</para></block></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.XmlValidatingReader> Klasa jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. Sprawdzanie poprawności można utworzyć <xref:System.Xml.XmlReader> wystąpienia przy użyciu <xref:System.Xml.XmlReaderSettings> klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz sekcję uwag <xref:System.Xml.XmlReader> strony odwołania.  
  
 Jeśli znajduje się w elemencie `ReadString` łączy ze sobą wszystkich tekstu, znaczące białe miejsca biały znak i typy węzłów sekcji CDATA i zwraca dane połączonych jako zawartości elementu. Czytnik zatrzymuje po napotkaniu żadnych znaczników, w tym komentarzy i instrukcji przetwarzania. Może mieć to miejsce, w mieszanych modelu zawartości lub podczas odczytywania tagu końcowym elementu.  
  
 Jeśli znajduje się w węźle tekstu `ReadString` przeprowadza tego samego łączenia z węzła tekstowego do tagu końcowym elementu. Jeśli czytnik jest ustawiony na węzeł tekstowy atrybut `ReadString` ma taką samą funkcję jak czytnik gdyby pozycji w tagu początkowym elementu. Zwraca element połączonych węzły tekstowe.  
  
 <xref:System.Xml.XmlValidatingReader.EntityHandling%2A> Właściwość określa, jak `ReadString` działa w następujący sposób:  
  
|Wartość|Opis|  
|-----------|-----------------|  
|ExpandEntities|Zwraca rozszerzona znaków i jednostek ogólnych. Domyślnie włączone.|  
|ExpandCharEntities|Zwraca tekst do z wyjątkiem ogólne odwołanie do jednostki. Oznacza to, że jednostka ogólna powoduje ReadString zatrzymać. Należy wywołać `Read` do kroku przez odwołanie do jednostki.|  
  
   
  
## Examples  
 W poniższym przykładzie przedstawiono poszczególnych elementów zawartości tekstowej.  
  
 [!code-cpp[Classic WebData XmlValidatingReader.IsEmptyElement Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlValidatingReader.IsEmptyElement Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlValidatingReader.IsEmptyElement Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlValidatingReader.IsEmptyElement Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlValidatingReader.IsEmptyElement Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlValidatingReader.IsEmptyElement Example/VB/source.vb#1)]  
  
 W przykładzie użyto pliku `elems.xml`, jak wejściowego.  
  
 [!code-xml[Classic WebData XmlValidatingReader.IsEmptyElement Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlValidatingReader.IsEmptyElement Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="ReadTypedValue">
      <MemberSignature Language="C#" Value="public object ReadTypedValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object ReadTypedValue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlValidatingReader.ReadTypedValue" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadTypedValue () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ ReadTypedValue();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pobiera wspólny typ środowiska uruchomieniowego języka dla określonego typu schematu XML definition language (XSD).</summary>
        <returns>Typowe typ środowiska uruchomieniowego języka dla określonego typu schematu XML.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.XmlValidatingReader> Klasa jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. Sprawdzanie poprawności można utworzyć <xref:System.Xml.XmlReader> wystąpienia przy użyciu <xref:System.Xml.XmlReaderSettings> klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz sekcję uwag <xref:System.Xml.XmlReader> strony odwołania.  
  
 Na przykład, jeśli nie zdefiniowano typu schematu jako `xsd:int`, typ środowiska uruchomieniowego `int32` dla obiekt jest zwracany. Tę funkcję można przetestować przy użyciu <xref:System.Object.GetType%2A> — metoda i rzutowania odpowiednio. <xref:System.Xml.XmlValidatingReader.ReadTypedValue%2A> Metoda zawsze zwraca typ, który jest pochodną <xref:System.Object> klasy. Nigdy nie zwraca <xref:System.Object> typu.  
  
 Czytnik jest ustawiony na atrybut, ta metoda zwraca obiekt typu środowiska uruchomieniowego, ale nie zmienia położenie czytnika. Jeśli czytnik znajduje się w elemencie `ReadTypedValue` odczytuje żadnych CDATA, tekst biały znak, znaczący biały znak i węzły komentarza zwraca obiekt typu środowiska uruchomieniowego i umieszcza czytnik w tagu końcowego. Wszystkie typy, które nie mają bezpośredniego mapowania, na przykład `NMTOKENS`, zostaną zwrócone jako ciągi.  
  
> [!NOTE]
>  Jeśli <xref:System.Xml.XmlValidatingReader.ValidationType%2A> została ustawiona do ValidationType.None, nie podano informacji o typie danych z schematów lub definicji typu dokumentu (pliki DTD).  
  
> [!CAUTION]
>  Po wywołaniu <xref:System.Xml.XmlValidatingReader.Close%2A>, `ReadTypedValue` zwróci `null`.  
  
   
  
## Examples  
 W poniższym przykładzie przedstawiono informacje dotyczące poszczególnych elementów w dokumencie XML.  
  
 [!code-cpp[XmlValidatingReader.SchemaType#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlValidatingReader.SchemaType/CPP/schematype.cpp#1)]
 [!code-csharp[XmlValidatingReader.SchemaType#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlValidatingReader.SchemaType/CS/schematype.cs#1)]
 [!code-vb[XmlValidatingReader.SchemaType#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlValidatingReader.SchemaType/VB/schematype.vb#1)]  
  
 W przykładzie użyto następujących plików wejściowych.  
  
 `booksSchema.xml`  
  
 [!code-xml[XmlValidatingReader.SchemaType#2](~/samples/snippets/xml/VS_Snippets_Data/XmlValidatingReader.SchemaType/XML/booksschema.xml#2)]  
  
 `books.xsd`  
  
 [!code-xml[XmlValidatingReader.SchemaType#3](~/samples/snippets/xml/VS_Snippets_Data/XmlValidatingReader.SchemaType/XML/books.xsd#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="ResolveEntity">
      <MemberSignature Language="C#" Value="public override void ResolveEntity ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void ResolveEntity() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlValidatingReader.ResolveEntity" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub ResolveEntity ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void ResolveEntity();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Usuwa odwołanie do jednostki dla <see langword="EntityReference" /> węzłów.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.XmlValidatingReader> Klasa jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. Sprawdzanie poprawności można utworzyć <xref:System.Xml.XmlReader> wystąpienia przy użyciu <xref:System.Xml.XmlReaderSettings> klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz sekcję uwag <xref:System.Xml.XmlReader> strony odwołania.  
  
 Jeśli czytnik jest ustawiony na `EntityReference` węzła (`XmlNodeType.EntityReference`), jeśli <xref:System.Xml.XmlValidatingReader.Read%2A> jest wywoływana po wywołaniu tej metody, tekst zastępczy jednostki zostanie przeanalizowany. Po zakończeniu tekst zastępczy jednostki `EndEntity` węzła jest zwracana do zamknięcia zakresu odwołanie do jednostki.  
  
> [!NOTE]
>  Po wywołaniu tej metody, jeśli jednostka jest częścią wartości atrybutu należy wywołać <xref:System.Xml.XmlValidatingReader.ReadAttributeValue%2A> do kroku do jednostki.  
  
   
  
## Examples  
 W poniższym przykładzie użyto `ResolveEntity` aby rozwinąć ogólne jednostki.  
  
 [!code-cpp[Classic WebData XmlValidatingReader.ResolveEntity Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlValidatingReader.ResolveEntity Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlValidatingReader.ResolveEntity Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlValidatingReader.ResolveEntity Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlValidatingReader.ResolveEntity Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlValidatingReader.ResolveEntity Example/VB/source.vb#1)]  
  
 W przykładzie użyto pliku `book1.xml`, jak wejściowego.  
  
 [!code-xml[Classic WebData XmlValidatingReader.ResolveEntity Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlValidatingReader.ResolveEntity Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Czytnik nie jest ustawiony na <see langword="EntityReference" /> węzła.</exception>
        <altmember cref="T:System.Xml.EntityHandling" />
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="Schemas">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaCollection Schemas { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Schema.XmlSchemaCollection Schemas" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.Schemas" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Schemas As XmlSchemaCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Schema::XmlSchemaCollection ^ Schemas { System::Xml::Schema::XmlSchemaCollection ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera <see cref="T:System.Xml.Schema.XmlSchemaCollection" /> do użycia w celu weryfikacji.</summary>
        <value>
          <see langword="XmlSchemaCollection" /> Do użycia w celu weryfikacji.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.XmlValidatingReader> Klasa jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. Sprawdzanie poprawności można utworzyć <xref:System.Xml.XmlReader> wystąpienia przy użyciu <xref:System.Xml.XmlReaderSettings> klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz sekcję uwag <xref:System.Xml.XmlReader> strony odwołania.  
  
 `XmlSchemaCollection` Przechowuje wstępnie załadować definicji danych XML (XDR) i schemat XML schematy języka (XSD). Ta właściwość zapewnia czytnika dostęp do pamięci podręcznej schematów i umożliwia jego do sprawdzania poprawności bez konieczności ponownego załadowania schematy zawsze. Czytnik nie dodaje żadnych czynności, aby `XmlSchemaCollection`.  
  
 Jeśli `XmlSchemaCollection` obejmuje schematu XML (XSD), który zawiera `include` lub `import` elementów, które odwołują schematów innych przestrzeniach nazw dla tych przestrzenie nazw są ładowane tylko na potrzeby sprawdzania poprawności. O ile te schematy jawnie zostały dodane do kolekcji schematów, nie będą dostępne przy użyciu dowolnej z metod kolekcji lub właściwości. Na przykład, jeśli kolekcja zawiera plik schematu `a.xsd`, który zawiera odwołanie do schematu pliku `b.xsd`, należy dodać `b.xsd` do kolekcji schematów, zanim zostanie do niego dostęp przy użyciu dowolnej z metod kolekcji lub właściwości.  
  
 Gdy `XmlSchemaCollection` jest dostępny przy użyciu `Schemas` właściwości, <xref:System.Xml.Schema.XmlSchemaCollection.Add%2A?displayProperty=nameWithType> używa metody <xref:System.Xml.XmlResolver> określonego przez <xref:System.Xml.XmlValidatingReader.XmlResolver%2A?displayProperty=nameWithType> właściwości.  
  
> [!NOTE]
>  Schematy musi zostać dodany do `XmlSchemaCollection` przed pierwszym `Read` wywołania.  
  
   
  
## Examples  
 Poniższy przykład weryfikuje trzy pliki XML przy użyciu schematów przechowywane w kolekcji XmlSchemaCollection.  
  
 [!code-cpp[Classic WebData XmlValidatingReader.Schemas Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlValidatingReader.Schemas Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlValidatingReader.Schemas Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlValidatingReader.Schemas Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlValidatingReader.Schemas Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlValidatingReader.Schemas Example/VB/source.vb#1)]  
  
 W przykładzie użyto następujących pięć plików wejściowych:  
  
 `booksSchema.xml`  
  
 [!code-xml[Classic WebData XmlValidatingReader.Schemas Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlValidatingReader.Schemas Example/XML/source.xml#2)]  
  
 `booksSchemaFail.xml`  
  
 [!code-xml[Classic WebData XmlValidatingReader.Schemas Example#3](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlValidatingReader.Schemas Example/XML/source.xml#3)]  
  
 `newbooks.xml`  
  
 [!code-xml[Classic WebData XmlValidatingReader.Schemas Example#4](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlValidatingReader.Schemas Example/XML/source.xml#4)]  
  
 `books.xsd`  
  
 [!code-xml[Classic WebData XmlValidatingReader.Schemas Example#5](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlValidatingReader.Schemas Example/XML/source.xml#5)]  
  
 `schema1.xdr`  
  
 [!code-xml[Classic WebData XmlValidatingReader.Schemas Example#6](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlValidatingReader.Schemas Example/XML/source.xml#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="SchemaType">
      <MemberSignature Language="C#" Value="public object SchemaType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object SchemaType" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.SchemaType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SchemaType As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ SchemaType { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera obiekt typu schematu.</summary>
        <value>
          <see cref="T:System.Xml.Schema.XmlSchemaDatatype" />, <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" />, lub <see cref="T:System.Xml.Schema.XmlSchemaComplexType" /> zależności, czy wartość węzła ma wbudowanego schematu XML definition language (XSD) typu lub zdefiniowany przez użytkownika typu simpleType lub complexType; <see langword="null" /> Jeśli bieżący węzeł nie ma schematu typu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.XmlValidatingReader> Klasa jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. Sprawdzanie poprawności można utworzyć <xref:System.Xml.XmlReader> wystąpienia przy użyciu <xref:System.Xml.XmlReaderSettings> klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz sekcję uwag <xref:System.Xml.XmlReader> strony odwołania.  
  
 Należy sprawdzić zwrócony typ. Na przykład  
  
```csharp  
object obj = vreader.SchemaType;  
 if (obj is XmlSchemaType)  
 {  
   XmlSchemaType st = (XmlSchemaType)obj;  
   // use XmlSchemaType object  
 }  
 if (obj is XmlSchemaDatatype)  
 {  
   XmlSchemaDatatype sd = (XmlSchemaDatatype)obj;  
   Type vt = sd.ValueType;  
   // use XmlSchemaDatatype object  
       }  
```  
  
 Jeśli jest wykonywane sprawdzanie poprawności schematu XML `XmlSchemaType` lub `XmlSchemaDatatype` odnosi się do bieżącego elementu odczytu. Jeśli wykonywana jest definicja typu dokumentu (DTD Walidacja), ta właściwość zwraca `null`.  
  
 `XmlSchemaDatatype` jest zwracany, jeśli bieżący element lub atrybut jest typu prostego, które można określić specjalne sprawdzania poprawności ograniczenia dotyczące typów prostych, takich jak min i max.  
  
 `XmlSchemaSimpleType` jest zwracany, jeśli bieżący element lub atrybut jest simpleType zdefiniowanych przez użytkownika.  
  
 `XmlSchemaComplexType` jest zwracany, jeśli bieżący element jest elementem complexType zdefiniowanych przez użytkownika. Tego typu nie można zwrócić przez atrybuty.  
  
> [!NOTE]
>  Jeśli <xref:System.Xml.XmlValidatingReader.ValidationType%2A> została ustawiona na ValidationType.None, bez informacji o typach danych podano schematów lub definicji DTD.  
  
> [!CAUTION]
>  Po wywołaniu <xref:System.Xml.XmlValidatingReader.Close%2A>, SchemaType zwróci wartość Null.  
  
   
  
## Examples  
 W poniższym przykładzie przedstawiono informacje dotyczące poszczególnych elementów w dokumencie XML.  
  
 [!code-cpp[XmlValidatingReader.SchemaType#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlValidatingReader.SchemaType/CPP/schematype.cpp#1)]
 [!code-csharp[XmlValidatingReader.SchemaType#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlValidatingReader.SchemaType/CS/schematype.cs#1)]
 [!code-vb[XmlValidatingReader.SchemaType#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlValidatingReader.SchemaType/VB/schematype.vb#1)]  
  
 W przykładzie użyto następujących plików wejściowych.  
  
 `booksSchema.xml`  
  
 [!code-xml[XmlValidatingReader.SchemaType#2](~/samples/snippets/xml/VS_Snippets_Data/XmlValidatingReader.SchemaType/XML/booksschema.xml#2)]  
  
 `books.xsd`  
  
 [!code-xml[XmlValidatingReader.SchemaType#3](~/samples/snippets/xml/VS_Snippets_Data/XmlValidatingReader.SchemaType/XML/books.xsd#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="System.Xml.IXmlNamespaceResolver.GetNamespacesInScope">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IDictionary&lt;string,string&gt; IXmlNamespaceResolver.GetNamespacesInScope (System.Xml.XmlNamespaceScope scope);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IDictionary`2&lt;string, string&gt; System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(valuetype System.Xml.XmlNamespaceScope scope) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlValidatingReader.System#Xml#IXmlNamespaceResolver#GetNamespacesInScope(System.Xml.XmlNamespaceScope)" />
      <MemberSignature Language="VB.NET" Value="Function GetNamespacesInScope (scope As XmlNamespaceScope) As IDictionary(Of String, String) Implements IXmlNamespaceResolver.GetNamespacesInScope" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Generic::IDictionary&lt;System::String ^, System::String ^&gt; ^ System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System::Xml::XmlNamespaceScope scope) = System::Xml::IXmlNamespaceResolver::GetNamespacesInScope;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System.Xml.XmlNamespaceScope)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="System.Xml.XmlNamespaceScope" />
      </Parameters>
      <Docs>
        <param name="scope">
          <see cref="T:System.Xml.XmlNamespaceScope" /> Obiekt, który identyfikuje zakres czytnika.</param>
        <summary>Opis tego elementu członkowskiego, zobacz <see cref="M:System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System.Xml.XmlNamespaceScope)" />.</summary>
        <returns>Obiekt T:System.Collections.IDictionary, który identyfikuje przestrzeni nazw w zakresie.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Można go używać tylko wtedy, gdy <xref:System.Xml.XmlValidatingReader> wystąpienia jest rzutowane na <xref:System.Xml.IXmlNamespaceResolver> interfejsu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Xml.IXmlNamespaceResolver.LookupNamespace">
      <MemberSignature Language="C#" Value="string IXmlNamespaceResolver.LookupNamespace (string prefix);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance string System.Xml.IXmlNamespaceResolver.LookupNamespace(string prefix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlValidatingReader.System#Xml#IXmlNamespaceResolver#LookupNamespace(System.String)" />
      <MemberSignature Language="VB.NET" Value="Function LookupNamespace (prefix As String) As String Implements IXmlNamespaceResolver.LookupNamespace" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::String ^ System.Xml.IXmlNamespaceResolver.LookupNamespace(System::String ^ prefix) = System::Xml::IXmlNamespaceResolver::LookupNamespace;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="prefix">Prefiks przestrzeni nazw.</param>
        <summary>Opis tego elementu członkowskiego, zobacz <see cref="M:System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String)" />.</summary>
        <returns>Wartość ciągu, który zawiera identyfikator Uri, który jest skojarzony z prefiks przestrzeni nazw.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Można go używać tylko wtedy, gdy <xref:System.Xml.XmlValidatingReader> wystąpienia jest rzutowane na <xref:System.Xml.IXmlNamespaceResolver> interfejsu.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="System.Xml.IXmlNamespaceResolver.LookupPrefix">
      <MemberSignature Language="C#" Value="string IXmlNamespaceResolver.LookupPrefix (string namespaceName);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance string System.Xml.IXmlNamespaceResolver.LookupPrefix(string namespaceName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlValidatingReader.System#Xml#IXmlNamespaceResolver#LookupPrefix(System.String)" />
      <MemberSignature Language="VB.NET" Value="Function LookupPrefix (namespaceName As String) As String Implements IXmlNamespaceResolver.LookupPrefix" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::String ^ System.Xml.IXmlNamespaceResolver.LookupPrefix(System::String ^ namespaceName) = System::Xml::IXmlNamespaceResolver::LookupPrefix;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.IXmlNamespaceResolver.LookupPrefix(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="namespaceName" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="namespaceName">Obszar nazw, który jest skojarzony z prefiksem.</param>
        <summary>Opis tego elementu członkowskiego, zobacz <see cref="M:System.Xml.IXmlNamespaceResolver.LookupPrefix(System.String)" />.</summary>
        <returns>Wartość ciągu, która zawiera prefiks przestrzeni nazw, z którym skojarzony jest <paramref name="namespaceName" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Można go używać tylko wtedy, gdy <xref:System.Xml.XmlValidatingReader> wystąpienia jest rzutowane na <xref:System.Xml.IXmlNamespaceResolver> interfejsu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidationEventHandler">
      <MemberSignature Language="C#" Value="public event System.Xml.Schema.ValidationEventHandler ValidationEventHandler;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Xml.Schema.ValidationEventHandler ValidationEventHandler" />
      <MemberSignature Language="DocId" Value="E:System.Xml.XmlValidatingReader.ValidationEventHandler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Xml::Schema::ValidationEventHandler ^ ValidationEventHandler;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.ValidationEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ustawia program obsługi zdarzeń dla odbieranie informacji o definicja typu dokumentu (DTD), schemat XML danych (XDR) i definicji schematu XML błędy sprawdzania poprawności schematu języka (XSD).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.XmlValidatingReader> Klasa jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. Sprawdzanie poprawności można utworzyć <xref:System.Xml.XmlReader> wystąpienia przy użyciu <xref:System.Xml.XmlReaderSettings> klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz sekcję uwag <xref:System.Xml.XmlReader> strony odwołania.  
  
 Te zdarzenia występują w trakcie <xref:System.Xml.XmlValidatingReader.Read%2A> i tylko wtedy, gdy <xref:System.Xml.XmlValidatingReader.ValidationType%2A> elementu DTD, XDR, schemat lub Auto jest określony.  
  
 W przypadku obsługi zdarzeń <xref:System.Xml.XmlException> jest zgłaszany na pierwszy błąd sprawdzania poprawności (ważności jest taki sam, jak XmlSeverityType.Error).  
  
> [!NOTE]
>  Jeśli element zgłasza błąd sprawdzania poprawności, pozostałe modelu zawartości dla tego elementu nie została zweryfikowana, jednak jego elementy podrzędne są weryfikowane. Czytnik raporty tylko pierwszy błąd dla danego elementu.  
  
 Można użyć funkcji wywołania zwrotnego <xref:System.Xml.Schema.ValidationEventArgs.Severity%2A?displayProperty=nameWithType> właściwość, aby zagwarantować sprawdzania poprawności względem schematu instancją dokumentu XML. `Severity` Właściwość pozwala odróżnić błędy sprawdzania poprawności (ważności jest taki sam, jak XmlSeverityType.Error), wskazujące błąd krytyczny i ostrzeżenia sprawdzania poprawności (ważności jest taki sam, jak XmlSeverityType.Warning), które wskazują Brak schematu informacje są dostępne.  
  
   
  
## Examples  
 Poniższy przykład sprawdza poprawność pliku względem schematu XML.  
  
 [!code-cpp[Classic WebData XmlValidatingReader.ValidationEventHandler Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlValidatingReader.ValidationEventHandler Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlValidatingReader.ValidationEventHandler Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlValidatingReader.ValidationEventHandler Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlValidatingReader.ValidationEventHandler Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlValidatingReader.ValidationEventHandler Example/VB/source.vb#1)]  
  
 W przykładzie użyto następujących dwóch plików wejściowych:  
  
 `notValidXSD.xml` ( `xsi:schemaLocation` Atrybut identyfikuje schematu XML dla czytnika.)  
  
 [!code-xml[Classic WebData XmlValidatingReader.ValidationEventHandler Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlValidatingReader.ValidationEventHandler Example/XML/source.xml#2)]  
  
 `books.xsd`  
  
 [!code-xml[Classic WebData XmlValidatingReader.ValidationEventHandler Example#3](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlValidatingReader.ValidationEventHandler Example/XML/source.xml#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.Schema.XmlSeverityType" />
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="ValidationType">
      <MemberSignature Language="C#" Value="public System.Xml.ValidationType ValidationType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.ValidationType ValidationType" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.ValidationType" />
      <MemberSignature Language="VB.NET" Value="Public Property ValidationType As ValidationType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::ValidationType ValidationType { System::Xml::ValidationType get(); void set(System::Xml::ValidationType value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.ValidationType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, Typ weryfikacji do wykonania.</summary>
        <value>Jeden z <see cref="T:System.Xml.ValidationType" /> wartości. Jeśli ta właściwość nie jest ustawiona, domyślnie ValidationType.Auto.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.XmlValidatingReader> Klasa jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. Sprawdzanie poprawności można utworzyć <xref:System.Xml.XmlReader> wystąpienia przy użyciu <xref:System.Xml.XmlReaderSettings> klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz sekcję uwag <xref:System.Xml.XmlReader> strony odwołania.  
  
 Ta właściwość musi być ustawiona przed pierwszym wywołaniu <xref:System.Xml.XmlValidatingReader.Read%2A>. Ustawienie tej właściwości na ValidationType.None tworzy czytnik bez weryfikacji.  
  
 Jeśli definicje typów zewnętrznego dokumentu (pliki DTD) lub schematów, które są potrzebne do weryfikacji, <xref:System.Xml.XmlResolver> jest używany.  
  
   
  
## Examples  
 Poniższy przykład weryfikuje dwa pliki.  
  
 [!code-cpp[Classic WebData XmlValidatingReader.ValidationType Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlValidatingReader.ValidationType Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlValidatingReader.ValidationType Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlValidatingReader.ValidationType Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlValidatingReader.ValidationType Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlValidatingReader.ValidationType Example/VB/source.vb#1)]  
  
 W przykładzie użyto następujących czterech plików wejściowych:  
  
 `notValid.xml` ("X-schema:" prefiks identyfikuje schematu XML danych (XDR) dla czytnika.)  
  
 [!code-xml[Classic WebData XmlValidatingReader.ValidationType Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlValidatingReader.ValidationType Example/XML/source.xml#2)]  
  
 `schema1.xdr`  
  
 [!code-xml[Classic WebData XmlValidatingReader.ValidationType Example#3](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlValidatingReader.ValidationType Example/XML/source.xml#3)]  
  
 `cdDTD.xml`  
  
 [!code-xml[Classic WebData XmlValidatingReader.ValidationType Example#4](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlValidatingReader.ValidationType Example/XML/source.xml#4)]  
  
 `book1.xml`  
  
 [!code-xml[Classic WebData XmlValidatingReader.ValidationType Example#5](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlValidatingReader.ValidationType Example/XML/source.xml#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Ustawianie właściwości po wywołaniu odczytu.</exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public override string Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Value" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.Value" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Value As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Value { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartości tekstowej bieżącego węzła.</summary>
        <value>Wartość zwracana jest zależna od <see cref="P:System.Xml.XmlValidatingReader.NodeType" /> węzła. W poniższej tabeli wymieniono typy węzłów, które mają wartość do zwrócenia. Wszystkie inne typy węzła zwracać String.Empty.  
  
 <list type="table"><listheader><term> Typ węzła  
  
 </term><description> Wartość  
  
 </description></listheader><item><term><see langword="Attribute" /></term><description> Wartość atrybutu.  
  
 </description></item><item><term><see langword="CDATA" /></term><description> Zawartość sekcji CDATA.  
  
 </description></item><item><term><see langword="Comment" /></term><description> Zawartość komentarza.  
  
 </description></item><item><term><see langword="DocumentType" /></term><description> Podzestawie wewnętrznym.  
  
 </description></item><item><term><see langword="ProcessingInstruction" /></term><description> Całej zawartości, z wyłączeniem obiektu docelowego.  
  
 </description></item><item><term><see langword="SignificantWhitespace" /></term><description> Biały znak między znaczników w mieszanych modelu zawartości.  
  
 </description></item><item><term><see langword="Text" /></term><description> Zawartości węzła tekstowego.  
  
 </description></item><item><term><see langword="Whitespace" /></term><description> Biały znak między znaczników.  
  
 </description></item><item><term><see langword="XmlDeclaration" /></term><description> Zawartość deklaracji.  
  
 </description></item></list></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.XmlValidatingReader> Klasa jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. Sprawdzanie poprawności można utworzyć <xref:System.Xml.XmlReader> wystąpienia przy użyciu <xref:System.Xml.XmlReaderSettings> klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz sekcję uwag <xref:System.Xml.XmlReader> strony odwołania.  
  
   
  
## Examples  
 Poniższy przykład umożliwia odczytanie pliku XML i wyświetla każdy węzeł.  
  
 [!code-cpp[Classic WebData XmlValidatingReader.Name Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlValidatingReader.Name Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlValidatingReader.Name Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlValidatingReader.Name Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlValidatingReader.Name Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlValidatingReader.Name Example/VB/source.vb#1)]  
  
 W przykładzie użyto pliku `items.xml`, jak wejściowego.  
  
 [!code-xml[Classic WebData XmlValidatingReader.Name Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlValidatingReader.Name Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="XmlLang">
      <MemberSignature Language="C#" Value="public override string XmlLang { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string XmlLang" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.XmlLang" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property XmlLang As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ XmlLang { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera bieżący <see langword="xml:lang" /> zakresu.</summary>
        <value>Bieżący <see langword="xml:lang" /> zakresu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.XmlValidatingReader> Klasa jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. Sprawdzanie poprawności można utworzyć <xref:System.Xml.XmlReader> wystąpienia przy użyciu <xref:System.Xml.XmlReaderSettings> klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz sekcję uwag <xref:System.Xml.XmlReader> strony odwołania.  
  
 Ta właściwość reprezentuje zakres XML: lang, w którym znajduje się bieżącego węzła. Na przykład poniżej przedstawiono fragment XML z `xml:lang` ustawioną stany USA Język angielski w elemencie głównym:  
  
```xml  
<root xml:lang="en-us">   
<name>Fred</name>   
</root>   
```  
  
 Gdy czytnik jest ustawiony na `name` elementu służy tej właściwości można znaleźć się w zakresie stany USA Angielski `xml:lang` atrybutu.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="XmlResolver">
      <MemberSignature Language="C#" Value="public System.Xml.XmlResolver XmlResolver { set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlResolver XmlResolver" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.XmlResolver" />
      <MemberSignature Language="VB.NET" Value="Public Property XmlResolver As XmlResolver" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::XmlResolver ^ XmlResolver {  void set(System::Xml::XmlResolver ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlResolver</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ustawia <see cref="T:System.Xml.XmlResolver" /> używany do rozpoznawania definicja typu zewnętrznego dokumentu (DTD) i odwołania do lokalizacji schematu. <see langword="XmlResolver" /> Służy również do wszelkich importu lub zawierać elementów znalezionych w schematu XML definition language (XSD) schematów.</summary>
        <value>
          <see langword="XmlResolver" /> Do użycia. Jeśli ustawiono <see langword="null" />, zasobów zewnętrznych nie są rozpoznawane.  
  
 W wersji 1.1 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)], wywołujący musi być w pełni zaufany, aby określić <see langword="XmlResolver" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.XmlValidatingReader> Klasa jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. Sprawdzanie poprawności można utworzyć <xref:System.Xml.XmlReader> wystąpienia przy użyciu <xref:System.Xml.XmlReaderSettings> klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz sekcję uwag <xref:System.Xml.XmlReader> strony odwołania.  
  
 `XmlResolver` Jest używana do załadowania żadnych elementów DTD, jednostki lub schematy wymaganego do ukończenia procesu weryfikacji.  
  
 Tej właściwości można ustawić w dowolnym momencie i ma wpływ na po następnej <xref:System.Xml.XmlValidatingReader.Read%2A> wywołania. Jeśli ta właściwość jest ustawiona na `null`, czytnik zakłada użytkownik nie jest zainteresowana rozpoznawania odwołań zewnętrznych. W takim przypadku czytnik sprawdza tylko względem zasobów wewnętrznych, jeśli zasób znajduje się.  
  
 W wersji 1.1 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] , jeśli ta właściwość nie jest ustawiona, poziom zaufania aplikacji określa zachowanie domyślne.  
  
 `Fully trusted code:` Czytnik używa domyślnego <xref:System.Xml.XmlUrlResolver> bez poświadczeń użytkownika. Jeśli wymagane jest uwierzytelnienie dostępu do zasobu sieciowego, użyj `XmlResolver` właściwości w celu określenia `XmlResolver` niezbędne poświadczenia.  
  
 `Semi-trusted code:` `XmlResolver` Właściwość jest ustawiona na `null`. Nie można rozpoznać zasobów zewnętrznych.  
  
 Podczas sprawdzania poprawności przy użyciu schematów, można uniknąć proces ładowania kosztowne, zapewniając <xref:System.Xml.Schema.XmlSchemaCollection> przy użyciu <xref:System.Xml.XmlValidatingReader.Schemas%2A> właściwości.  
  
   
  
## Examples  
 W poniższym przykładzie użyto `XmlResolver` właściwość, aby określić poświadczenia niezbędne do uzyskania dostępu do sieci pliku definicji DTD.  
  
 [!code-cpp[XmlValidatingReader.XmlResolver#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlValidatingReader.XmlResolver/CPP/vrdr_resolver.cpp#1)]
 [!code-csharp[XmlValidatingReader.XmlResolver#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlValidatingReader.XmlResolver/CS/vrdr_resolver.cs#1)]
 [!code-vb[XmlValidatingReader.XmlResolver#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlValidatingReader.XmlResolver/VB/vrdr_resolver.vb#1)]  
  
 W przykładzie użyto następujących plików jako dane wejściowe.  
  
 `book5.xml`  
  
 [!code-xml[XmlValidatingReader.XmlResolver#2](~/samples/snippets/xml/VS_Snippets_Data/XmlValidatingReader.XmlResolver/XML/book5.xml#2)]  
  
 `books.dtd`  
  
 [!code-xml[XmlValidatingReader.XmlResolver#3](~/samples/snippets/xml/VS_Snippets_Data/XmlValidatingReader.XmlResolver/XML/books.dtd#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xml.XmlUrlResolver.Credentials" />
        <altmember cref="T:System.Net.CredentialCache" />
        <altmember cref="T:System.Net.NetworkCredential" />
        <altmember cref="T:System.Xml.XmlSecureResolver" />
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="XmlSpace">
      <MemberSignature Language="C#" Value="public override System.Xml.XmlSpace XmlSpace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.XmlSpace XmlSpace" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.XmlSpace" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property XmlSpace As XmlSpace" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Xml::XmlSpace XmlSpace { System::Xml::XmlSpace get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlSpace</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera bieżący <see langword="xml:space" /> zakresu.</summary>
        <value>Jeden z <see cref="T:System.Xml.XmlSpace" /> wartości. Jeśli nie <see langword="xml:space" /> zakresu istnieje, ta właściwość jest równa <see langword="XmlSpace.None" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <xref:System.Xml.XmlValidatingReader> Klasa jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. Sprawdzanie poprawności można utworzyć <xref:System.Xml.XmlReader> wystąpienia przy użyciu <xref:System.Xml.XmlReaderSettings> klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz sekcję uwag <xref:System.Xml.XmlReader> strony odwołania.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
  </Members>
</Type>