<Type Name="XmlValidatingReader" FullName="System.Xml.XmlValidatingReader">
  <Metadata><Meta Name="ms.openlocfilehash" Value="76972e5d420c331146cb864726337aabd8ebbe1c" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69422095" /></Metadata><TypeSignature Language="C#" Value="public class XmlValidatingReader : System.Xml.XmlReader, System.Xml.IXmlLineInfo, System.Xml.IXmlNamespaceResolver" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlValidatingReader extends System.Xml.XmlReader implements class System.Xml.IXmlLineInfo, class System.Xml.IXmlNamespaceResolver" />
  <TypeSignature Language="DocId" Value="T:System.Xml.XmlValidatingReader" />
  <TypeSignature Language="VB.NET" Value="Public Class XmlValidatingReader&#xA;Inherits XmlReader&#xA;Implements IXmlLineInfo, IXmlNamespaceResolver" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlValidatingReader : System::Xml::XmlReader, System::Xml::IXmlLineInfo, System::Xml::IXmlNamespaceResolver" />
  <TypeSignature Language="F#" Value="type XmlValidatingReader = class&#xA;    inherit XmlReader&#xA;    interface IXmlLineInfo&#xA;    interface IXmlNamespaceResolver" />
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Xml.XmlReader</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Xml.IXmlLineInfo</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Xml.IXmlNamespaceResolver</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netcore-2.0;netcore-2.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2">
      <AttributeName>System.Obsolete("Use XmlReader created by XmlReader.Create() method using appropriate XmlReaderSettings instead. http://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netcore-3.0;netstandard-2.1">
      <AttributeName>System.Obsolete("Use XmlReader created by XmlReader.Create() method using appropriate XmlReaderSettings instead. https://go.microsoft.com/fwlink/?linkid=14202")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Reprezentuje czytnik, który zawiera definicję typu dokumentu (DTD), schemat danych XML (XDR) i sprawdzanie poprawności języka definicji schematu XML (XSD).  
  
Ta klasa jest przestarzała. Począwszy od .NET Framework 2,0 zalecamy użycie <see cref="T:System.Xml.XmlReaderSettings" /> klasy <see cref="Overload:System.Xml.XmlReader.Create" /> i metody w celu utworzenia sprawdzania poprawności kodu XML.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `XmlValidatingReader`<xref:System.Xml.XmlReader> implementuje klasę i zapewnia obsługę walidacji danych. Użyj właściwości, aby czytelnik sprawdzał poprawność przy użyciu plików schematu <xref:System.Xml.Schema.XmlSchemaCollection>w pamięci podręcznej. <xref:System.Xml.XmlValidatingReader.Schemas%2A> <xref:System.Xml.XmlValidatingReader.ValidationType%2A> Właściwość określa, jaki typ walidacji powinien wykonać czytelnik. Ustawienie właściwości na ValidationType. None powoduje utworzenie czytnika bez sprawdzania poprawności.  
  
 <xref:System.Xml.XmlValidatingReader>zgłasza błędy analizy w kodzie XML. <xref:System.Xml.XmlException> Po zgłoszeniu wyjątku stan czytnika nie jest przewidywalny. Na przykład raportowany typ węzła może być inny niż rzeczywisty typ węzła bieżącego węzła. Użyj właściwości <xref:System.Xml.XmlValidatingReader.ReadState%2A> , aby sprawdzić, czy czytnik jest w stanie błędu.  
  
> [!NOTE]
>  Klasa jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. <xref:System.Xml.XmlValidatingReader> Można utworzyć wystąpienie walidacji <xref:System.Xml.XmlReader> przy <xref:System.Xml.XmlReaderSettings> użyciu klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz sekcję <xref:System.Xml.XmlReader> uwagi na stronie referencyjnej.  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>Ta klasa ma żądanie dziedziczenia. Aby dziedziczyć z programu <see langword="XmlValidatingReader" />, wymagane jest pełne zaufanie.</para></block>
    <altmember cref="T:System.Xml.XmlReader" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see langword="XmlValidatingReader" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlValidatingReader (System.Xml.XmlReader reader);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.XmlReader reader) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlValidatingReader.#ctor(System.Xml.XmlReader)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (reader As XmlReader)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlValidatingReader(System::Xml::XmlReader ^ reader);" />
      <MemberSignature Language="F#" Value="new System.Xml.XmlValidatingReader : System.Xml.XmlReader -&gt; System.Xml.XmlValidatingReader" Usage="new System.Xml.XmlValidatingReader reader" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="reader" Type="System.Xml.XmlReader" />
      </Parameters>
      <Docs>
        <param name="reader"><see langword="XmlReader" /> Do odczytu z podczas walidacji. Bieżąca implementacja obsługuje tylko <see cref="T:System.Xml.XmlTextReader" />program.</param>
        <summary>Inicjuje nowe wystąpienie <see langword="XmlValidatingReader" /> klasy, które weryfikuje zawartość zwróconą z danego <see cref="T:System.Xml.XmlReader" />elementu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Klasa jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. <xref:System.Xml.XmlValidatingReader> Można utworzyć wystąpienie walidacji <xref:System.Xml.XmlReader> przy <xref:System.Xml.XmlReaderSettings> użyciu klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz sekcję <xref:System.Xml.XmlReader> uwagi na stronie referencyjnej.  
  
 Wszystkie węzły zwrócone przez dane `XmlReader` są również zwracane z tego czytnika sprawdzającego, więc nie ma utraty informacji w procesie. Nowe węzły, które nie są zwracane z bazowego czytnika, mogą zostać dodane przez tego czytnika (na przykład atrybuty domyślne i elementy podrzędne odwołania do jednostki). Wszystkie właściwości ustawione w danej `XmlTextReader` odniesieniu dotyczą również tego czytnika walidacji. Na przykład, jeśli dostarczony czytnik miał WhitespaceHandling. None, ten czytnik sprawdza także, czy biały znak jest ignorowany.  
  
 Gdy definicje typu dokumentu zewnętrznego (DTD) lub schematy są konieczne do walidacji, <xref:System.Xml.XmlValidatingReader.XmlResolver%2A> Właściwość ustawia obiekt <xref:System.Xml.XmlResolver> , który ma być używany do rozpoznawania zasobów zewnętrznych.  
  
   
  
## Examples  
 Poniższy przykład sprawdza poprawność dwóch dokumentów.  
  
 [!code-cpp[XmlValidatingReader.Cctor#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlValidatingReader.Cctor/CPP/valid_xsd2.cpp#1)]
 [!code-csharp[XmlValidatingReader.Cctor#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlValidatingReader.Cctor/CS/valid_xsd2.cs#1)]
 [!code-vb[XmlValidatingReader.Cctor#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlValidatingReader.Cctor/VB/valid_xsd2.vb#1)]  
  
 W przykładzie są stosowane następujące pliki wejściowe:  
  
 `notValidXSD.xml`  
  
 [!code-xml[XmlValidatingReader.Cctor#2](~/samples/snippets/xml/VS_Snippets_Data/XmlValidatingReader.Cctor/XML/notvalidxsd.xml#2)]  
  
 `books.xsd`  
  
 [!code-xml[XmlValidatingReader.Cctor#3](~/samples/snippets/xml/VS_Snippets_Data/XmlValidatingReader.Cctor/XML/books.xsd#3)]  
  
 `inlineXSD.xml`  
  
 [!code-xml[XmlValidatingReader.Cctor#4](~/samples/snippets/xml/VS_Snippets_Data/XmlValidatingReader.Cctor/XML/inlinexsd.xml#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Określony czytnik nie <see langword="XmlTextReader" />jest.</exception>
        <altmember cref="T:System.Xml.XmlTextReader" />
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlValidatingReader (System.IO.Stream xmlFragment, System.Xml.XmlNodeType fragType, System.Xml.XmlParserContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.IO.Stream xmlFragment, valuetype System.Xml.XmlNodeType fragType, class System.Xml.XmlParserContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlValidatingReader.#ctor(System.IO.Stream,System.Xml.XmlNodeType,System.Xml.XmlParserContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (xmlFragment As Stream, fragType As XmlNodeType, context As XmlParserContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlValidatingReader(System::IO::Stream ^ xmlFragment, System::Xml::XmlNodeType fragType, System::Xml::XmlParserContext ^ context);" />
      <MemberSignature Language="F#" Value="new System.Xml.XmlValidatingReader : System.IO.Stream * System.Xml.XmlNodeType * System.Xml.XmlParserContext -&gt; System.Xml.XmlValidatingReader" Usage="new System.Xml.XmlValidatingReader (xmlFragment, fragType, context)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="xmlFragment" Type="System.IO.Stream" />
        <Parameter Name="fragType" Type="System.Xml.XmlNodeType" />
        <Parameter Name="context" Type="System.Xml.XmlParserContext" />
      </Parameters>
      <Docs>
        <param name="xmlFragment">Strumień zawierający fragment XML do przeanalizowania.</param>
        <param name="fragType"><see cref="T:System.Xml.XmlNodeType" /> Fragment kodu XML. Określa to, co może zawierać fragment (patrz tabela poniżej).</param>
        <param name="context">, <see cref="T:System.Xml.XmlParserContext" /> W którym ma zostać przeanalizowany fragment kodu XML. Obejmuje <see cref="T:System.Xml.XmlNameTable" /> to użycie, kodowanie, zakres przestrzeni nazw, bieżący <see langword="xml:lang" />i <see langword="xml:space" /> zakres.</param>
        <summary>Inicjuje nowe wystąpienie <see langword="XmlValidatingReader" /> klasy z określonymi wartościami.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Klasa jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. <xref:System.Xml.XmlValidatingReader> Można utworzyć wystąpienie walidacji <xref:System.Xml.XmlReader> przy <xref:System.Xml.XmlReaderSettings> użyciu klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz sekcję <xref:System.Xml.XmlReader> uwagi na stronie referencyjnej.  
  
 Ten Konstruktor analizuje dany ciąg jako fragment kodu XML. Jeśli fragment XML jest elementem lub atrybutem, można pominąć reguły poziomu głównego dla poprawnie sformułowanych dokumentów XML.  
  
 W poniższej tabeli wymieniono prawidłowe wartości `fragType` i sposób, w jaki czytnik analizuje każdy z różnych typów węzłów.  
  
|XmlNodeType|Fragment może zawierać|  
|-----------------|--------------------------|  
|Element|Dowolna prawidłowa zawartość elementu (na przykład dowolna kombinacja elementów, komentarzy, instrukcji przetwarzania, CDATA, tekstu i odwołań do jednostek).|  
|Atrybut|Wartość atrybutu (część wewnątrz cudzysłowu).|  
|dokument|Zawartość całego dokumentu XML; wymusza to reguły poziomu dokumentu.|  
  
 Czytnik używa następujących kroków, aby określić kodowanie strumienia:  
  
1.  <xref:System.Xml.XmlParserContext.Encoding%2A?displayProperty=nameWithType> Sprawdza właściwość, aby określić kodowanie.  
  
2.  Jeśli właściwość jest `null`, czytnik sprawdza obecność znacznika kolejności bajtów na początku strumienia. `Encoding`  
  
3.  Jeśli właściwość jest `null`i nie zostanie znaleziony znacznik kolejności bajtów, czytnik zakłada, że strumień jest zakodowany w UTF-8. `Encoding`  
  
 Jeśli ten czytelnik będzie sprawdzał przy użyciu definicji typu dokumentu (DTD) (oznacza to <xref:System.Xml.XmlValidatingReader.ValidationType%2A> , że jest ustawiony na wartość ValidationType. DTD lub ValidationType. Auto) `XmlParserContext` , określone w konstruktorze muszą podawać wszystkie niezbędne informacje DocumentType.  
  
> [!NOTE]
>  Nie można zweryfikować fragmentu przy użyciu DTD. Według definicji definicja DTD wymaga, aby cały dokument został załadowany do walidacji.  
  
 Jeśli ten czytelnik będzie weryfikowany przy użyciu plików XML z ograniczeniami (XDR) lub języka definicji schematu XML (XSD), użyj <xref:System.Xml.XmlValidatingReader.Schemas%2A> właściwości, aby <xref:System.Xml.Schema.XmlSchemaCollection> określić, który zawiera schematy `XmlParserContext` (to oznacza, że nie musi podawać Informacje DocumentType).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XmlException"><paramref name="fragType" />nie jest jednym z typów węzłów wymienionych w poniższej tabeli.</exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlValidatingReader (string xmlFragment, System.Xml.XmlNodeType fragType, System.Xml.XmlParserContext context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string xmlFragment, valuetype System.Xml.XmlNodeType fragType, class System.Xml.XmlParserContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlValidatingReader.#ctor(System.String,System.Xml.XmlNodeType,System.Xml.XmlParserContext)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (xmlFragment As String, fragType As XmlNodeType, context As XmlParserContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlValidatingReader(System::String ^ xmlFragment, System::Xml::XmlNodeType fragType, System::Xml::XmlParserContext ^ context);" />
      <MemberSignature Language="F#" Value="new System.Xml.XmlValidatingReader : string * System.Xml.XmlNodeType * System.Xml.XmlParserContext -&gt; System.Xml.XmlValidatingReader" Usage="new System.Xml.XmlValidatingReader (xmlFragment, fragType, context)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="xmlFragment" Type="System.String" />
        <Parameter Name="fragType" Type="System.Xml.XmlNodeType" />
        <Parameter Name="context" Type="System.Xml.XmlParserContext" />
      </Parameters>
      <Docs>
        <param name="xmlFragment">Ciąg zawierający fragment XML do przeanalizowania.</param>
        <param name="fragType"><see cref="T:System.Xml.XmlNodeType" /> Fragment kodu XML. Określa również, co może zawierać ciąg fragmentu (patrz tabela poniżej).</param>
        <param name="context">, <see cref="T:System.Xml.XmlParserContext" /> W którym ma zostać przeanalizowany fragment kodu XML. Obejmuje <see cref="T:System.Xml.NameTable" /> to użycie, kodowanie, zakres przestrzeni nazw, bieżące XML: lang i XML: Space.</param>
        <summary>Inicjuje nowe wystąpienie <see langword="XmlValidatingReader" /> klasy z określonymi wartościami.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Klasa jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. <xref:System.Xml.XmlValidatingReader> Można utworzyć wystąpienie walidacji <xref:System.Xml.XmlReader> przy <xref:System.Xml.XmlReaderSettings> użyciu klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz sekcję <xref:System.Xml.XmlReader> uwagi na stronie referencyjnej.  
  
 Ten Konstruktor analizuje dany ciąg jako fragment kodu XML. Jeśli fragment XML jest elementem lub atrybutem, można pominąć reguły poziomu głównego dla poprawnie sformułowanych dokumentów XML. Ten konstruktor może obsługiwać ciągi zwracane z <xref:System.Xml.XmlReader.ReadInnerXml%2A>.  
  
 W poniższej tabeli wymieniono prawidłowe wartości `fragType` i sposób, w jaki czytnik analizuje każdy z różnych typów węzłów.  
  
|XmlNodeType|Fragment może zawierać|  
|-----------------|--------------------------|  
|Element|Dowolna prawidłowa zawartość elementu (na przykład dowolna kombinacja elementów, komentarzy, instrukcji przetwarzania, CDATA, tekstu i odwołań do jednostek).|  
|Atrybut|Wartość atrybutu (część wewnątrz cudzysłowu).|  
|dokument|Zawartość całego dokumentu XML; wymusza to reguły poziomu dokumentu.|  
  
 Jeśli ten czytnik będzie sprawdzał poprawność przy użyciu definicji typu dokumentu (DTD) ( <xref:System.Xml.XmlValidatingReader.ValidationType%2A> oznacza to, że jest ustawiony na wartość ValidationType. DTD lub Walidacja. Auto) `XmlParserContext` , określony w konstruktorze musi dostarczyć wszystkie niezbędne informacje DocumentType.  
  
> [!NOTE]
>  Nie można zweryfikować fragmentu przy użyciu DTD. Według definicji DTD wymaga załadowania całego dokumentu na potrzeby walidacji.  
  
 Jeśli ten czytelnik będzie weryfikowany przy użyciu plików XML z ograniczeniami (XDR) lub języka definicji schematu XML (XSD), użyj <xref:System.Xml.XmlValidatingReader.Schemas%2A> właściwości, aby <xref:System.Xml.Schema.XmlSchemaCollection> określić, który `XmlParserContext` zawiera schematy (nie trzeba podawać DocumentType informacje).  
  
   
  
## Examples  
 Poniższy przykład odczytuje fragment XML. `XmlParserContext` Używa<xref:System.Xml.XmlNamespaceManager> i jest do obsługi dopasowywania przestrzeni nazw.  
  
 [!code-csharp[Classic WebData XmlParserContext.XmlParserContext Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlParserContext.XmlParserContext Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlParserContext.XmlParserContext Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlParserContext.XmlParserContext Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XmlException"><paramref name="fragType" />nie jest jednym z typów węzłów wymienionych w poniższej tabeli.</exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="AttributeCount">
      <MemberSignature Language="C#" Value="public override int AttributeCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 AttributeCount" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.AttributeCount" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property AttributeCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int AttributeCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.AttributeCount : int" Usage="System.Xml.XmlValidatingReader.AttributeCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera liczbę atrybutów w bieżącym węźle.</summary>
        <value>Liczba atrybutów w bieżącym węźle. Ta liczba zawiera atrybuty domyślne.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Klasa jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. <xref:System.Xml.XmlValidatingReader> Można utworzyć wystąpienie walidacji <xref:System.Xml.XmlReader> przy <xref:System.Xml.XmlReaderSettings> użyciu klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz sekcję <xref:System.Xml.XmlReader> uwagi na stronie referencyjnej.  
  
 Ta właściwość ma zastosowanie tylko `Element`do `DocumentType`węzłów, `XmlDeclaration` i. (Inne typy węzłów nie mają atrybutów).  
  
   
  
## Examples  
 Poniższy przykład odczytuje wszystkie elementy w węźle głównym.  
  
 [!code-cpp[Classic WebData XmlValidatingReader.AttributeCount Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlValidatingReader.AttributeCount Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlValidatingReader.AttributeCount Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlValidatingReader.AttributeCount Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlValidatingReader.AttributeCount Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlValidatingReader.AttributeCount Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="BaseURI">
      <MemberSignature Language="C#" Value="public override string BaseURI { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string BaseURI" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.BaseURI" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property BaseURI As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ BaseURI { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.BaseURI : string" Usage="System.Xml.XmlValidatingReader.BaseURI" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera podstawowy identyfikator URI bieżącego węzła.</summary>
        <value>Podstawowy identyfikator URI bieżącego węzła.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Klasa jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. <xref:System.Xml.XmlValidatingReader> Można utworzyć wystąpienie walidacji <xref:System.Xml.XmlReader> przy <xref:System.Xml.XmlReaderSettings> użyciu klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz sekcję <xref:System.Xml.XmlReader> uwagi na stronie referencyjnej.  
  
 Dokument w sieci XML zawiera fragmenty danych agregowanych przy użyciu różnych mechanizmów dołączania standardu organizacja World Wide Web Consortium (W3C) i w związku z tym zawiera węzły, które pochodzą z różnych miejsc. Przykładem są jednostki definicji typu dokumentu (DTD), ale nie jest to ograniczone do elementów DTD. Podstawowy identyfikator URI informuje o miejscu, z którego pochodzą te węzły. Jeśli nie ma podstawowego identyfikatora URI dla zwracanych węzłów (na przykład zostały one przeanalizowane z ciągu w pamięci), zwracany jest ciąg. Empty.  
  
   
  
## Examples  
 Poniższy przykład analizuje plik i wyświetla podstawowy identyfikator URI każdego węzła.  
  
 [!code-cpp[Classic WebData XmlValidatingReader.BaseURI Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlValidatingReader.BaseURI Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlValidatingReader.BaseURI Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlValidatingReader.BaseURI Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlValidatingReader.BaseURI Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlValidatingReader.BaseURI Example/VB/source.vb#1)]  
  
 W przykładzie jest użyty plik, `uri.xml`, jako dane wejściowe.  
  
 [!code-xml[Classic WebData XmlValidatingReader.BaseURI Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlValidatingReader.BaseURI Example/XML/source.xml#2)]  
  
 Plik zawiera tekst `<style>hardcover</style>`XML. `style.xml`  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="CanReadBinaryContent">
      <MemberSignature Language="C#" Value="public override bool CanReadBinaryContent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanReadBinaryContent" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.CanReadBinaryContent" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanReadBinaryContent As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanReadBinaryContent { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanReadBinaryContent : bool" Usage="System.Xml.XmlValidatingReader.CanReadBinaryContent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy <see cref="T:System.Xml.XmlValidatingReader" /> implementuje metody odczytywania zawartości binarnej.</summary>
        <value><see langword="true" />Jeśli metody odczytu zawartości binarnej są zaimplementowane; w <see langword="false" />przeciwnym razie. <see cref="T:System.Xml.XmlValidatingReader" /> Zwraca<see langword="true" />klasę.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Klasa jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. <xref:System.Xml.XmlValidatingReader> Można utworzyć wystąpienie walidacji <xref:System.Xml.XmlReader> przy <xref:System.Xml.XmlReaderSettings> użyciu klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz sekcję <xref:System.Xml.XmlReader> uwagi na stronie referencyjnej. 
  
 Metody odczytu zawartości <xref:System.Xml.XmlValidatingReader.ReadContentAsBase64%2A>binarnej zawierają metody, <xref:System.Xml.XmlValidatingReader.ReadContentAsBinHex%2A>, <xref:System.Xml.XmlValidatingReader.ReadElementContentAsBase64%2A>, i. <xref:System.Xml.XmlValidatingReader.ReadElementContentAsBinHex%2A>  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="CanResolveEntity">
      <MemberSignature Language="C#" Value="public override bool CanResolveEntity { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanResolveEntity" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.CanResolveEntity" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property CanResolveEntity As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CanResolveEntity { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanResolveEntity : bool" Usage="System.Xml.XmlValidatingReader.CanResolveEntity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy ten czytnik może analizować i rozwiązywać jednostki.</summary>
        <value><see langword="true" />Jeśli czytelnik może analizować i rozwiązywać jednostki; w przeciwnym razie. <see langword="false" /> <see langword="XmlValidatingReader" />zawsze zwraca <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Klasa jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. <xref:System.Xml.XmlValidatingReader> Można utworzyć wystąpienie walidacji <xref:System.Xml.XmlReader> przy <xref:System.Xml.XmlReaderSettings> użyciu klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz sekcję <xref:System.Xml.XmlReader> uwagi na stronie referencyjnej.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public override void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlValidatingReader.Close" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Close();" />
      <MemberSignature Language="F#" Value="override this.Close : unit -&gt; unit" Usage="xmlValidatingReader.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="P:System.Xml.XmlReader.ReadState" /> Zmienia do zamknięte.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Klasa jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. <xref:System.Xml.XmlValidatingReader> Można utworzyć wystąpienie walidacji <xref:System.Xml.XmlReader> przy <xref:System.Xml.XmlReaderSettings> użyciu klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz sekcję <xref:System.Xml.XmlReader> uwagi na stronie referencyjnej.  
  
 Ta metoda zwalnia także wszystkie zasoby przechowywane podczas odczytywania. Jeśli ten czytnik został skonstruowany przy użyciu <xref:System.Xml.XmlTextReader>, ta metoda również wywołuje `Close` na źródłowym czytniku. Jeśli ten czytnik został skonstruowany przy użyciu strumienia, ta metoda również wywołuje `Close` źródłowy strumień.  
  
 Jeśli `Close` został już wywołany, nie jest wykonywana żadna akcja.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="Depth">
      <MemberSignature Language="C#" Value="public override int Depth { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Depth" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.Depth" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Depth As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int Depth { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Depth : int" Usage="System.Xml.XmlValidatingReader.Depth" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera głębokość bieżącego węzła w dokumencie XML.</summary>
        <value>Głębokość bieżącego węzła w dokumencie XML.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Klasa jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. <xref:System.Xml.XmlValidatingReader> Można utworzyć wystąpienie walidacji <xref:System.Xml.XmlReader> przy <xref:System.Xml.XmlReaderSettings> użyciu klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz sekcję <xref:System.Xml.XmlReader> uwagi na stronie referencyjnej.  
  
   
  
## Examples  
 Poniższy przykład wyświetla każdy węzeł, w tym jego głębokość, numer wiersza i położenie wiersza.  
  
 [!code-cpp[IXmlLineInfo#1](~/samples/snippets/cpp/VS_Snippets_Data/IXmlLineInfo/CPP/lineinfo.cpp#1)]
 [!code-csharp[IXmlLineInfo#1](~/samples/snippets/csharp/VS_Snippets_Data/IXmlLineInfo/CS/lineinfo.cs#1)]
 [!code-vb[IXmlLineInfo#1](~/samples/snippets/visualbasic/VS_Snippets_Data/IXmlLineInfo/VB/lineinfo.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.IXmlLineInfo" />
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="Encoding">
      <MemberSignature Language="C#" Value="public System.Text.Encoding Encoding { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Text.Encoding Encoding" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.Encoding" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Encoding As Encoding" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Text::Encoding ^ Encoding { System::Text::Encoding ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Encoding : System.Text.Encoding" Usage="System.Xml.XmlValidatingReader.Encoding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Text.Encoding</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera atrybut kodowania dla dokumentu.</summary>
        <value>Wartość kodowania. Jeśli żaden atrybut kodowania nie istnieje i nie ma znacznika kolejności bajtów, ta wartość domyślna to UTF-8.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Klasa jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. <xref:System.Xml.XmlValidatingReader> Można utworzyć wystąpienie walidacji <xref:System.Xml.XmlReader> przy <xref:System.Xml.XmlReaderSettings> użyciu klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz sekcję <xref:System.Xml.XmlReader> uwagi na stronie referencyjnej.  
  
 Po odczytaniu dowolnych odwołań zewnętrznych (takich jak Rozszerzanie jednostki w pliku definicji typu dokumentu (DTD) lub odczytywanie pliku schematu) Właściwość kodowania jest ustawiana na wartość kodowania odwołania zewnętrznego. Jeśli nie określono kodowania w odwołaniu zewnętrznym i nie ma znacznika kolejności bajtów, ta wartość domyślna to UTF-8.  
  
 Obsługiwane są wszystkie standardy kodowania, które obsługuje system operacyjny.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="EntityHandling">
      <MemberSignature Language="C#" Value="public System.Xml.EntityHandling EntityHandling { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.EntityHandling EntityHandling" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.EntityHandling" />
      <MemberSignature Language="VB.NET" Value="Public Property EntityHandling As EntityHandling" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::EntityHandling EntityHandling { System::Xml::EntityHandling get(); void set(System::Xml::EntityHandling value); };" />
      <MemberSignature Language="F#" Value="member this.EntityHandling : System.Xml.EntityHandling with get, set" Usage="System.Xml.XmlValidatingReader.EntityHandling" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.EntityHandling</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość określającą sposób, w jaki czytnik obsługuje jednostki.</summary>
        <value>Jedna z <see cref="T:System.Xml.EntityHandling" /> wartości. Jeśli nie <see langword="EntityHandling" /> jest określony, domyślnie jest EntityHandling. ExpandEntities.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Klasa jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. <xref:System.Xml.XmlValidatingReader> Można utworzyć wystąpienie walidacji <xref:System.Xml.XmlReader> przy <xref:System.Xml.XmlReaderSettings> użyciu klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz sekcję <xref:System.Xml.XmlReader> uwagi na stronie referencyjnej.  
  
 Tę właściwość można zmienić i zacznie obowiązywać po następnym <xref:System.Xml.XmlValidatingReader.Read%2A> wywołaniu.  
  
 Gdy `EntityHandling` jest ustawiona na `ExpandCharEntities`, wartości atrybutów są tylko częściowo znormalizowane. Czytnik normalizuje każdy pojedynczy węzeł tekstowy niezależnie od zawartości sąsiadujących węzłów odwołania.  
  
 Aby zilustrować różnicę między trybami obsługi jednostek, należy wziąć pod uwagę następujące XML:  
  
```xml  
<!DOCTYPE doc [<!ENTITY num "123">]>  
 <doc> &#65; &num; </doc>  
```  
  
 Gdy `EntityHandling` jest ustawiony na `ExpandEntities` węzeł elementu "doc", zawiera jeden węzeł tekstowy z rozwiniętym tekstem jednostki:  
  
|Ścisł|NodeType|Nazwa|Wartość|  
|-----------|--------------|----------|-----------|  
|1|Tekst||A 123|  
  
 Gdy `EntityHandling` jest ustawiona na `ExpandCharEntities`, i <xref:System.Xml.XmlTextReader.WhitespaceHandling%2A> jest ustawiona na wartość znaczący lub wszystkie, element "doc" rozszerza jednostkę znaku i zwraca jednostkę ogólną jako węzeł:  
  
|Ścisł|NodeType|Nazwa|Wartość|  
|-----------|--------------|----------|-----------|  
|1|Tekst||ELEMENT|  
|1|Oczekiwa|numerowan||  
|1|SignificantWhitespace|||  
  
   
  
## Examples  
 W poniższym przykładzie zastosowano `ResolveEntity` metodę rozszerzania jednostki ogólnej.  
  
 [!code-cpp[Classic WebData XmlValidatingReader.ResolveEntity Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlValidatingReader.ResolveEntity Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlValidatingReader.ResolveEntity Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlValidatingReader.ResolveEntity Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlValidatingReader.ResolveEntity Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlValidatingReader.ResolveEntity Example/VB/source.vb#1)]  
  
 W przykładzie jest użyty plik, `book1.xml`, jako dane wejściowe.  
  
 [!code-xml[Classic WebData XmlValidatingReader.ResolveEntity Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlValidatingReader.ResolveEntity Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Określono nieprawidłową wartość.</exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="EOF">
      <MemberSignature Language="C#" Value="public override bool EOF { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EOF" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.EOF" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property EOF As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool EOF { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.EOF : bool" Usage="System.Xml.XmlValidatingReader.EOF" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy czytnik jest umieszczony na końcu strumienia.</summary>
        <value><see langword="true" />Jeśli czytnik jest umieszczony na końcu strumienia; w przeciwnym razie. <see langword="false" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Klasa jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. <xref:System.Xml.XmlValidatingReader> Można utworzyć wystąpienie walidacji <xref:System.Xml.XmlReader> przy <xref:System.Xml.XmlReaderSettings> użyciu klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz sekcję <xref:System.Xml.XmlReader> uwagi na stronie referencyjnej.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetAttribute">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Pobiera wartość atrybutu.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetAttribute">
      <MemberSignature Language="C#" Value="public override string GetAttribute (int i);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string GetAttribute(int32 i) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlValidatingReader.GetAttribute(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetAttribute (i As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ GetAttribute(int i);" />
      <MemberSignature Language="F#" Value="override this.GetAttribute : int -&gt; string" Usage="xmlValidatingReader.GetAttribute i" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="i" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="i">Indeks atrybutu. Jest to indeks zaczynający się od zera. (Pierwszy atrybut ma indeks 0).</param>
        <summary>Pobiera wartość atrybutu o określonym indeksie.</summary>
        <returns>Wartość określonego atrybutu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie przenosi czytnika.  
  
> [!NOTE]
>  Klasa jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. <xref:System.Xml.XmlValidatingReader> Można utworzyć wystąpienie walidacji <xref:System.Xml.XmlReader> przy <xref:System.Xml.XmlReaderSettings> użyciu klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz sekcję <xref:System.Xml.XmlReader> uwagi na stronie referencyjnej.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Parametr jest mniejszy niż 0 lub większy lub <see cref="P:System.Xml.XmlValidatingReader.AttributeCount" />równy. <paramref name="i" /></exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="GetAttribute">
      <MemberSignature Language="C#" Value="public override string GetAttribute (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string GetAttribute(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlValidatingReader.GetAttribute(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetAttribute (name As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ GetAttribute(System::String ^ name);" />
      <MemberSignature Language="F#" Value="override this.GetAttribute : string -&gt; string" Usage="xmlValidatingReader.GetAttribute name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Kwalifikowana nazwa atrybutu.</param>
        <summary>Pobiera wartość atrybutu o określonej nazwie.</summary>
        <returns>Wartość określonego atrybutu. Jeśli atrybut nie zostanie znaleziony, <see langword="null" /> jest zwracany.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Klasa jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. <xref:System.Xml.XmlValidatingReader> Można utworzyć wystąpienie walidacji <xref:System.Xml.XmlReader> przy <xref:System.Xml.XmlReaderSettings> użyciu klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz sekcję <xref:System.Xml.XmlReader> uwagi na stronie referencyjnej.  
  
 Ta metoda nie przenosi czytnika.  
  
 Jeśli czytnik jest umieszczony w `DocumentType` węźle, ta metoda może być używana do pobierania literałów publicznych i systemowych, na przykład`reader.GetAttribute("PUBLIC")`  
  
   
  
## Examples  
 Poniższy przykład pobiera wartość atrybutu ISBN.  
  
 [!code-cpp[Classic WebData XmlValidatingReader.GetAttribute Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlValidatingReader.GetAttribute Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlValidatingReader.GetAttribute Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlValidatingReader.GetAttribute Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlValidatingReader.GetAttribute Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlValidatingReader.GetAttribute Example/VB/source.vb#1)]  
  
 W przykładzie jest użyty plik, `attrs.xml`, jako dane wejściowe.  
  
 [!code-xml[Classic WebData XmlValidatingReader.GetAttribute Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlValidatingReader.GetAttribute Example/XML/attrs.xml#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="GetAttribute">
      <MemberSignature Language="C#" Value="public override string GetAttribute (string localName, string namespaceURI);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string GetAttribute(string localName, string namespaceURI) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlValidatingReader.GetAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetAttribute (localName As String, namespaceURI As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ GetAttribute(System::String ^ localName, System::String ^ namespaceURI);" />
      <MemberSignature Language="F#" Value="override this.GetAttribute : string * string -&gt; string" Usage="xmlValidatingReader.GetAttribute (localName, namespaceURI)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">Nazwa lokalna atrybutu.</param>
        <param name="namespaceURI">Identyfikator URI przestrzeni nazw atrybutu.</param>
        <summary>Pobiera wartość atrybutu z określoną nazwą lokalną i przestrzenią nazw Uniform Resource Identifier (URI).</summary>
        <returns>Wartość określonego atrybutu. Jeśli atrybut nie zostanie znaleziony, <see langword="null" /> jest zwracany. Ta metoda nie przenosi czytnika.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Klasa jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. <xref:System.Xml.XmlValidatingReader> Można utworzyć wystąpienie walidacji <xref:System.Xml.XmlReader> przy <xref:System.Xml.XmlReaderSettings> użyciu klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz sekcję <xref:System.Xml.XmlReader> uwagi na stronie referencyjnej.  
  
 Następujący kod XML zawiera atrybut w określonej przestrzeni nazw:  
  
```xml  
<test xmlns:dt="urn:datatypes" dt:type="int"/>  
```  
  
 Można wyszukać `dt:type` atrybut przy użyciu jednego argumentu (prefiks i nazwa lokalna) lub dwóch argumentów (nazwa lokalna i identyfikator URI przestrzeni nazw):  
  
```csharp  
String dt = reader.GetAttribute("dt:type");  
String dt2 = reader.GetAttribute("type","urn:datatypes");  
```  
  
 Aby wyszukać `xmlns:dt` atrybut, użyj jednego z następujących argumentów:  
  
```csharp  
String dt3 = reader.GetAttribute("xmlns:dt");  
String dt4 = reader.GetAttribute("dt",http://www.w3.org/2000/xmlns/);  
```  
  
 Te informacje można również uzyskać przy użyciu <xref:System.Xml.XmlValidatingReader.Prefix%2A> właściwości.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="HasLineInfo">
      <MemberSignature Language="C#" Value="public bool HasLineInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool HasLineInfo() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlValidatingReader.HasLineInfo" />
      <MemberSignature Language="VB.NET" Value="Public Function HasLineInfo () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool HasLineInfo();" />
      <MemberSignature Language="F#" Value="abstract member HasLineInfo : unit -&gt; bool&#xA;override this.HasLineInfo : unit -&gt; bool" Usage="xmlValidatingReader.HasLineInfo " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.IXmlLineInfo.HasLineInfo</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pobiera wartość wskazującą, czy Klasa może zwracać informacje o wierszu.</summary>
        <returns><see langword="true" />Jeśli klasa może zwracać informacje o wierszu; w przeciwnym razie. <see langword="false" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Klasa jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. <xref:System.Xml.XmlValidatingReader> Można utworzyć wystąpienie walidacji <xref:System.Xml.XmlReader> przy <xref:System.Xml.XmlReaderSettings> użyciu klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz sekcję <xref:System.Xml.XmlReader> uwagi na stronie referencyjnej.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="HasValue">
      <MemberSignature Language="C#" Value="public override bool HasValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasValue" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.HasValue" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property HasValue As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool HasValue { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasValue : bool" Usage="System.Xml.XmlValidatingReader.HasValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy bieżący węzeł może mieć element <see cref="P:System.Xml.XmlValidatingReader.Value" /> inny niż String. Empty.</summary>
        <value><see langword="true" />Jeśli węzeł, w którym znajduje się czytnik jest obecnie umieszczony, <see langword="Value" /> <see langword="false" />może mieć wartość; w przeciwnym razie.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Klasa jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. <xref:System.Xml.XmlValidatingReader> Można utworzyć wystąpienie walidacji <xref:System.Xml.XmlReader> przy <xref:System.Xml.XmlReaderSettings> użyciu klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz sekcję <xref:System.Xml.XmlReader> uwagi na stronie referencyjnej.  
  
 Poniższa tabela zawiera listę typów węzłów, które mają wartość zwracaną.  
  
|Typ węzła|Wartość|  
|---------------|-----------|  
|`Attribute`|Wartość atrybutu.|  
|`CDATA`|Zawartość sekcji CDATA.|  
|`Comment`|Zawartość komentarza.|  
|`DocumentType`|Podzestaw wewnętrzny.|  
|`ProcessingInstruction`|Cała zawartość, z wyłączeniem celu.|  
|`SignificantWhitespace`|Odstęp między adiustacją w modelu zawartości mieszanej.|  
|`Text`|Zawartość węzła tekstowego.|  
|`Whitespace`|Odstęp między znakami.|  
|`XmlDeclaration`|Zawartość deklaracji.|  
  
   
  
## Examples  
 Poniższy przykład odczytuje dane w języku XML o różnych typach danych i wyświetla poszczególne węzły.  
  
 [!code-cpp[Classic WebData XmlValidatingReader.HasValue Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlValidatingReader.HasValue Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlValidatingReader.HasValue Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlValidatingReader.HasValue Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlValidatingReader.HasValue Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlValidatingReader.HasValue Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="IsDefault">
      <MemberSignature Language="C#" Value="public override bool IsDefault { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDefault" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.IsDefault" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsDefault As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsDefault { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsDefault : bool" Usage="System.Xml.XmlValidatingReader.IsDefault" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy bieżący węzeł jest atrybutem wygenerowanym z wartości domyślnej zdefiniowanej w definicji typu dokumentu (DTD) lub schemacie.</summary>
        <value><see langword="true" />Jeśli bieżący węzeł jest atrybutem, którego wartość została wygenerowana na podstawie wartości domyślnej zdefiniowanej w DTD lub schemacie; <see langword="false" /> Jeśli wartość atrybutu została jawnie ustawiona.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość ma zastosowanie tylko do węzła atrybutu.  
  
> [!NOTE]
>  Klasa jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. <xref:System.Xml.XmlValidatingReader> Można utworzyć wystąpienie walidacji <xref:System.Xml.XmlReader> przy <xref:System.Xml.XmlReaderSettings> użyciu klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz sekcję <xref:System.Xml.XmlReader> uwagi na stronie referencyjnej.  
  
   
  
## Examples  
 Poniższy przykład wyświetla wszystkie węzły atrybutów w elemencie głównym.  
  
 [!code-cpp[XmlValidatingReader.IsDefault#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlValidatingReader.IsDefault/CPP/readdefattr.cpp#1)]
 [!code-csharp[XmlValidatingReader.IsDefault#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlValidatingReader.IsDefault/CS/readdefattr.cs#1)]
 [!code-vb[XmlValidatingReader.IsDefault#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlValidatingReader.IsDefault/VB/readdefattr.vb#1)]  
  
 W przykładzie są wykorzystywane następujące pliki jako dane wejściowe.  
  
 `book4.xml`  
  
 [!code-xml[XmlValidatingReader.IsDefault#2](~/samples/snippets/xml/VS_Snippets_Data/XmlValidatingReader.IsDefault/XML/book4.xml#2)]  
  
 `book.dtd`  
  
 [!code-xml[XmlValidatingReader.IsDefault#3](~/samples/snippets/xml/VS_Snippets_Data/XmlValidatingReader.IsDefault/XML/book.dtd#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="IsEmptyElement">
      <MemberSignature Language="C#" Value="public override bool IsEmptyElement { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEmptyElement" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.IsEmptyElement" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsEmptyElement As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsEmptyElement { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEmptyElement : bool" Usage="System.Xml.XmlValidatingReader.IsEmptyElement" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy bieżący węzeł jest pustym elementem (na przykład <c>&lt;element/&gt;</c>).</summary>
        <value><see langword="true" />Jeśli bieżącym<see cref="P:System.Xml.XmlValidatingReader.NodeType" /> węzłem jest element (Equals <see langword="XmlNodeType.Element" />) kończący się na <c>/ &gt;</c>; w przeciwnym <see langword="false" />razie,.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Klasa jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. <xref:System.Xml.XmlValidatingReader> Można utworzyć wystąpienie walidacji <xref:System.Xml.XmlReader> przy <xref:System.Xml.XmlReaderSettings> użyciu klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz sekcję <xref:System.Xml.XmlReader> uwagi na stronie referencyjnej.  
  
 Ta właściwość umożliwia określenie różnicy między następującymi elementami:  
  
 `<item num="123"/>`(`IsEmptyElement` is`true`).  
  
 `<item num="123">`(`IsEmptyElement` is`false`, chociaż zawartość elementu jest pusta).  
  
 Odpowiedni `EndElement` węzeł nie jest generowany dla pustych elementów.  
  
 Jeśli domyślna zawartość została dodana do elementu z powodu walidacji schematu, `IsEmptyElement` nadal zwraca. `true` Nie ma znaczenia, czy element ma wartość domyślną. Innymi słowy, po `IsEmptyElement` prostu raportuje, czy element w dokumencie źródłowym ma tag elementu końcowego.  
  
   
  
## Examples  
 Poniższy przykład wyświetla zawartość tekstową każdego elementu.  
  
 [!code-cpp[Classic WebData XmlValidatingReader.IsEmptyElement Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlValidatingReader.IsEmptyElement Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlValidatingReader.IsEmptyElement Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlValidatingReader.IsEmptyElement Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlValidatingReader.IsEmptyElement Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlValidatingReader.IsEmptyElement Example/VB/source.vb#1)]  
  
 W przykładzie jest użyty plik, `elems.xml`, jako dane wejściowe.  
  
 [!code-xml[Classic WebData XmlValidatingReader.IsEmptyElement Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlValidatingReader.IsEmptyElement Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public override string this[int i] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public Overrides ReadOnly Property Item(i As Integer) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ default[int] { System::String ^ get(int i); };" />
      <MemberSignature Language="F#" Value="member this.Item(int) : string" Usage="System.Xml.XmlValidatingReader.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="i" Type="System.Int32" Index="0" FrameworkAlternate="netframework-1.1" />
      </Parameters>
      <Docs>
        <param name="i">Indeks atrybutu.</param>
        <summary>Pobiera wartość atrybutu o określonym indeksie.</summary>
        <value>Wartość określonego atrybutu.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public override string this[string name] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Item(string)" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.Item(System.String)" />
      <MemberSignature Language="VB.NET" Value="Default Public Overrides ReadOnly Property Item(name As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ default[System::String ^] { System::String ^ get(System::String ^ name); };" />
      <MemberSignature Language="F#" Value="member this.Item(string) : string" Usage="System.Xml.XmlValidatingReader.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1" />
      </Parameters>
      <Docs>
        <param name="name">To be added.</param>
        <summary>To be added.</summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public override string this[string name, string namespaceURI] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Item(string, string)" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.Item(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Default Public Overrides ReadOnly Property Item(name As String, namespaceURI As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ default[System::String ^, System::String ^] { System::String ^ get(System::String ^ name, System::String ^ namespaceURI); };" />
      <MemberSignature Language="F#" Value="member this.Item(string * string) : string" Usage="System.Xml.XmlValidatingReader.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" Index="0" FrameworkAlternate="netframework-1.1" />
        <Parameter Name="namespaceURI" Type="System.String" Index="1" FrameworkAlternate="netframework-1.1" />
      </Parameters>
      <Docs>
        <param name="name">Nazwa lokalna atrybutu.</param>
        <param name="namespaceURI">Identyfikator URI przestrzeni nazw atrybutu.</param>
        <summary>Pobiera wartość atrybutu z określoną nazwą lokalną i identyfikatorem URI przestrzeni nazw.</summary>
        <value>Wartość określonego atrybutu. Jeśli atrybut nie zostanie znaleziony, zwraca <see langword="null" />.</value>
        <remarks>Ta właściwość nie przenosi czytnika.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LineNumber">
      <MemberSignature Language="C#" Value="public int LineNumber { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LineNumber" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.LineNumber" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LineNumber As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int LineNumber { int get(); };" />
      <MemberSignature Language="F#" Value="member this.LineNumber : int" Usage="System.Xml.XmlValidatingReader.LineNumber" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Xml.IXmlLineInfo.LineNumber</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera bieżący numer wiersza.</summary>
        <value>Numer bieżącego wiersza. Wartość początkowa dla tej właściwości to 1.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Klasa jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. <xref:System.Xml.XmlValidatingReader> Można utworzyć wystąpienie walidacji <xref:System.Xml.XmlReader> przy <xref:System.Xml.XmlReaderSettings> użyciu klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz sekcję <xref:System.Xml.XmlReader> uwagi na stronie referencyjnej.  
  
 Ta właściwość jest najczęściej używana do raportowania błędów, ale może być wywoływana w dowolnym momencie. Wartość początkowa dla tej właściwości to 1. W połączeniu <xref:System.Xml.XmlValidatingReader.LinePosition%2A>z, wartość 1, 1 oznacza początek dokumentu.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="LinePosition">
      <MemberSignature Language="C#" Value="public int LinePosition { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LinePosition" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.LinePosition" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property LinePosition As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int LinePosition { int get(); };" />
      <MemberSignature Language="F#" Value="member this.LinePosition : int" Usage="System.Xml.XmlValidatingReader.LinePosition" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Xml.IXmlLineInfo.LinePosition</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera bieżącą pozycję wiersza.</summary>
        <value>Pozycja bieżącego wiersza. Wartość początkowa dla tej właściwości to 1.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Klasa jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. <xref:System.Xml.XmlValidatingReader> Można utworzyć wystąpienie walidacji <xref:System.Xml.XmlReader> przy <xref:System.Xml.XmlReaderSettings> użyciu klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz sekcję <xref:System.Xml.XmlReader> uwagi na stronie referencyjnej.  
  
 Ta właściwość jest najczęściej używana do raportowania błędów, ale może być wywoływana w dowolnym momencie. Wartość początkowa dla tej właściwości to `1`.  
  
 Wskazana pozycja jest pierwszym znakiem tekstu w znaczniku.  
  
```xml  
<root>  
 abc<tag/>  
</root>  
```  
  
 W pierwszym wierszu poprzedniego tekstu XML, `LinePosition` z `2` odpowiada znakowi `r`; w drugim wierszu, `LinePosition` z `5` odpowiada znakowi `t`; i w trzecim wierszu, `LinePosition`odpowiadaznakowi. `3` `r`  
  
 W połączeniu <xref:System.Xml.XmlValidatingReader.LineNumber%2A>z, `1,1` wartość wskazuje początku dokumentu.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="LocalName">
      <MemberSignature Language="C#" Value="public override string LocalName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string LocalName" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.LocalName" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property LocalName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ LocalName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.LocalName : string" Usage="System.Xml.XmlValidatingReader.LocalName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lokalną nazwę bieżącego węzła.</summary>
        <value>Nazwa bieżącego węzła z usuniętym prefiksem. Na przykład <see langword="LocalName" /> jest <see langword="book" /> dla elementu <c>&lt;BK: Book.&gt;</c>  
  
W przypadku typów węzłów, które nie mają nazwy (takiej <see langword="Text" />jak <see langword="Comment" />, i tak dalej), ta właściwość zwraca ciąg. Empty.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Klasa jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. <xref:System.Xml.XmlValidatingReader> Można utworzyć wystąpienie walidacji <xref:System.Xml.XmlReader> przy <xref:System.Xml.XmlReaderSettings> użyciu klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz sekcję <xref:System.Xml.XmlReader> uwagi na stronie referencyjnej.  
  
   
  
## Examples  
 Poniższy przykład odczytuje fragment XML.  
  
 [!code-csharp[Classic WebData XmlParserContext.XmlParserContext Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlParserContext.XmlParserContext Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlParserContext.XmlParserContext Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlParserContext.XmlParserContext Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="LookupNamespace">
      <MemberSignature Language="C#" Value="public override string LookupNamespace (string prefix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string LookupNamespace(string prefix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlValidatingReader.LookupNamespace(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function LookupNamespace (prefix As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ LookupNamespace(System::String ^ prefix);" />
      <MemberSignature Language="F#" Value="override this.LookupNamespace : string -&gt; string" Usage="xmlValidatingReader.LookupNamespace prefix" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="prefix">Prefiks, którego przestrzeń nazw Uniform Resource Identifier (URI) chcesz rozpoznać. Aby dopasować domyślną przestrzeń nazw, należy przekazać pusty ciąg.</param>
        <summary>Rozpoznaje prefiks przestrzeni nazw w zakresie bieżącego elementu.</summary>
        <returns>Identyfikator URI przestrzeni nazw, do którego są mapowane <see langword="null" /> prefiks lub jeśli nie znaleziono pasującego prefiksu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Klasa jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. <xref:System.Xml.XmlValidatingReader> Można utworzyć wystąpienie walidacji <xref:System.Xml.XmlReader> przy <xref:System.Xml.XmlReaderSettings> użyciu klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz sekcję <xref:System.Xml.XmlReader> uwagi na stronie referencyjnej. 
  
 W poniższym ciągu XML, jeśli czytnik jest umieszczony na `href` atrybucie, prefiks `a` jest rozpoznawany przez wywołanie `reader.LookupNamespace("a", true)`. Zwrócony ciąg to `urn:456`.  
  
```xml  
<root xmlns:a="urn:456">  
 <item>  
 <ref href="a:b"/>  
 </item>  
</root>  
```  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <MemberGroup MemberName="MoveToAttribute">
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Przenosi do określonego atrybutu.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MoveToAttribute">
      <MemberSignature Language="C#" Value="public override void MoveToAttribute (int i);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void MoveToAttribute(int32 i) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlValidatingReader.MoveToAttribute(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub MoveToAttribute (i As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void MoveToAttribute(int i);" />
      <MemberSignature Language="F#" Value="override this.MoveToAttribute : int -&gt; unit" Usage="xmlValidatingReader.MoveToAttribute i" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="i" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="i">Indeks atrybutu.</param>
        <summary>Przenosi do atrybutu o określonym indeksie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Klasa jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. <xref:System.Xml.XmlValidatingReader> Można utworzyć wystąpienie walidacji <xref:System.Xml.XmlReader> przy <xref:System.Xml.XmlReaderSettings> użyciu klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz sekcję <xref:System.Xml.XmlReader> uwagi na stronie referencyjnej.  
  
   
  
## Examples  
 Poniższy przykład odczytuje wszystkie elementy w węźle głównym.  
  
 [!code-cpp[Classic WebData XmlValidatingReader.AttributeCount Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlValidatingReader.AttributeCount Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlValidatingReader.AttributeCount Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlValidatingReader.AttributeCount Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlValidatingReader.AttributeCount Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlValidatingReader.AttributeCount Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Parametr jest mniejszy niż 0 lub większy lub <see cref="P:System.Xml.XmlReader.AttributeCount" />równy. <paramref name="i" /></exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="MoveToAttribute">
      <MemberSignature Language="C#" Value="public override bool MoveToAttribute (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool MoveToAttribute(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlValidatingReader.MoveToAttribute(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function MoveToAttribute (name As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool MoveToAttribute(System::String ^ name);" />
      <MemberSignature Language="F#" Value="override this.MoveToAttribute : string -&gt; bool" Usage="xmlValidatingReader.MoveToAttribute name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">Kwalifikowana nazwa atrybutu.</param>
        <summary>Przenosi do atrybutu o określonej nazwie.</summary>
        <returns><see langword="true" />Jeśli atrybut zostanie znaleziony; w przeciwnym razie. <see langword="false" /> Jeśli <see langword="false" />pozycja czytnika nie zmienia się.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Klasa jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. <xref:System.Xml.XmlValidatingReader> Można utworzyć wystąpienie walidacji <xref:System.Xml.XmlReader> przy <xref:System.Xml.XmlReaderSettings> użyciu klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz sekcję <xref:System.Xml.XmlReader> uwagi na stronie referencyjnej.  
  
 Po wywołaniu tej metody <xref:System.Xml.XmlValidatingReader.Name%2A>właściwości, <xref:System.Xml.XmlValidatingReader.NamespaceURI%2A>i <xref:System.Xml.XmlValidatingReader.Prefix%2A> odzwierciedlają właściwości tego atrybutu.  
  
   
  
## Examples  
 Poniższy przykład odczytuje atrybut z tekstem i węzłami odwołania do jednostek.  
  
 [!code-cpp[Classic WebData XmlValidatingReader.MoveToAttribute Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlValidatingReader.MoveToAttribute Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlValidatingReader.MoveToAttribute Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlValidatingReader.MoveToAttribute Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlValidatingReader.MoveToAttribute Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlValidatingReader.MoveToAttribute Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="MoveToAttribute">
      <MemberSignature Language="C#" Value="public override bool MoveToAttribute (string localName, string namespaceURI);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool MoveToAttribute(string localName, string namespaceURI) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlValidatingReader.MoveToAttribute(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function MoveToAttribute (localName As String, namespaceURI As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool MoveToAttribute(System::String ^ localName, System::String ^ namespaceURI);" />
      <MemberSignature Language="F#" Value="override this.MoveToAttribute : string * string -&gt; bool" Usage="xmlValidatingReader.MoveToAttribute (localName, namespaceURI)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="localName" Type="System.String" />
        <Parameter Name="namespaceURI" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="localName">Nazwa lokalna atrybutu.</param>
        <param name="namespaceURI">Identyfikator URI przestrzeni nazw atrybutu.</param>
        <summary>Przenosi do atrybutu z określoną nazwą lokalną i przestrzenią nazw Uniform Resource Identifier (URI).</summary>
        <returns><see langword="true" />Jeśli atrybut zostanie znaleziony; w przeciwnym razie. <see langword="false" /> Jeśli <see langword="false" />pozycja czytnika nie zmienia się.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Klasa jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. <xref:System.Xml.XmlValidatingReader> Można utworzyć wystąpienie walidacji <xref:System.Xml.XmlReader> przy <xref:System.Xml.XmlReaderSettings> użyciu klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz sekcję <xref:System.Xml.XmlReader> uwagi na stronie referencyjnej.  
  
 Po wywołaniu tej metody <xref:System.Xml.XmlValidatingReader.Name%2A>właściwości, <xref:System.Xml.XmlValidatingReader.NamespaceURI%2A>i <xref:System.Xml.XmlValidatingReader.Prefix%2A> odzwierciedlają właściwości tego atrybutu.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="MoveToElement">
      <MemberSignature Language="C#" Value="public override bool MoveToElement ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool MoveToElement() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlValidatingReader.MoveToElement" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function MoveToElement () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool MoveToElement();" />
      <MemberSignature Language="F#" Value="override this.MoveToElement : unit -&gt; bool" Usage="xmlValidatingReader.MoveToElement " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Przenosi do elementu, który zawiera bieżący węzeł atrybutu.</summary>
        <returns><see langword="true" />Jeśli czytnik jest umieszczony na atrybucie (czytnik przechodzi do elementu, który jest właścicielem atrybutu); <see langword="false" /> jeśli czytnik nie jest umieszczony w atrybucie (pozycja czytnika nie zmienia się).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Klasa jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. <xref:System.Xml.XmlValidatingReader> Można utworzyć wystąpienie walidacji <xref:System.Xml.XmlReader> przy <xref:System.Xml.XmlReaderSettings> użyciu klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz sekcję <xref:System.Xml.XmlReader> uwagi na stronie referencyjnej.  
  
 Użyj tej metody, aby powrócić do elementu po przejściu przez jego atrybuty. Ta metoda przenosi czytnik do jednego z następujących typów węzłów: `Element`, `DocumentType`, lub `XmlDeclaration`.  
  
   
  
## Examples  
 Poniższy przykład odczytuje wszystkie elementy w węźle głównym.  
  
 [!code-cpp[Classic WebData XmlValidatingReader.AttributeCount Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlValidatingReader.AttributeCount Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlValidatingReader.AttributeCount Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlValidatingReader.AttributeCount Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlValidatingReader.AttributeCount Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlValidatingReader.AttributeCount Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="MoveToFirstAttribute">
      <MemberSignature Language="C#" Value="public override bool MoveToFirstAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool MoveToFirstAttribute() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlValidatingReader.MoveToFirstAttribute" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function MoveToFirstAttribute () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool MoveToFirstAttribute();" />
      <MemberSignature Language="F#" Value="override this.MoveToFirstAttribute : unit -&gt; bool" Usage="xmlValidatingReader.MoveToFirstAttribute " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Przenosi do pierwszego atrybutu.</summary>
        <returns><see langword="true" />Jeśli istnieje atrybut (czytnik przechodzi do pierwszego atrybutu); w przeciwnym razie (pozycja czytnika nie zmienia się). <see langword="false" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Klasa jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. <xref:System.Xml.XmlValidatingReader> Można utworzyć wystąpienie walidacji <xref:System.Xml.XmlReader> przy <xref:System.Xml.XmlReaderSettings> użyciu klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz sekcję <xref:System.Xml.XmlReader> uwagi na stronie referencyjnej.  
  
   
  
## Examples  
 Poniższy przykład odczytuje fragment XML.  
  
 [!code-cpp[Classic WebData XmlValidatingReader.MoveToFirstAttribute Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlValidatingReader.MoveToFirstAttribute Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlValidatingReader.MoveToFirstAttribute Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlValidatingReader.MoveToFirstAttribute Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlValidatingReader.MoveToFirstAttribute Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlValidatingReader.MoveToFirstAttribute Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="MoveToNextAttribute">
      <MemberSignature Language="C#" Value="public override bool MoveToNextAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool MoveToNextAttribute() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlValidatingReader.MoveToNextAttribute" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function MoveToNextAttribute () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool MoveToNextAttribute();" />
      <MemberSignature Language="F#" Value="override this.MoveToNextAttribute : unit -&gt; bool" Usage="xmlValidatingReader.MoveToNextAttribute " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Przenosi do następnego atrybutu.</summary>
        <returns><see langword="true" />Jeśli istnieje następny atrybut; <see langword="false" /> Jeśli nie ma więcej atrybutów.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Klasa jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. <xref:System.Xml.XmlValidatingReader> Można utworzyć wystąpienie walidacji <xref:System.Xml.XmlReader> przy <xref:System.Xml.XmlReaderSettings> użyciu klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz sekcję <xref:System.Xml.XmlReader> uwagi na stronie referencyjnej.  
  
 Jeśli bieżący węzeł jest węzłem elementu, ta metoda jest równoważna z <xref:System.Xml.XmlValidatingReader.MoveToFirstAttribute%2A>. Jeśli `MoveToNextAttribute` zwraca`true`, czytnik przechodzi do następnego atrybutu; w przeciwnym razie pozycja czytnika nie zmienia się.  
  
   
  
## Examples  
 Poniższy przykład odczytuje fragment XML.  
  
 [!code-cpp[Classic WebData XmlValidatingReader.MoveToFirstAttribute Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlValidatingReader.MoveToFirstAttribute Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlValidatingReader.MoveToFirstAttribute Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlValidatingReader.MoveToFirstAttribute Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlValidatingReader.MoveToFirstAttribute Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlValidatingReader.MoveToFirstAttribute Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public override string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.Name" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Xml.XmlValidatingReader.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera kwalifikowaną nazwę bieżącego węzła.</summary>
        <value>Kwalifikowana nazwa bieżącego węzła. Na przykład <see langword="Name" /> jest <see langword="bk:book" /> dla elementu <c>&lt;BK: Book.&gt;</c>  
  
Zwracana nazwa jest zależna <see cref="P:System.Xml.XmlValidatingReader.NodeType" /> od węzła. Poniższe typy węzłów zwracają wymienione wartości. Wszystkie inne typy węzłów zwracają pusty ciąg.  
  
 <list type="table"><listheader><term> Typ węzła 
 </term><description> Nazwa 
 </description></listheader><item><term><see langword="Attribute" /></term><description> Nazwa atrybutu.  
  
 </description></item><item><term><see langword="DocumentType" /></term><description> Nazwa typu dokumentu.  
  
 </description></item><item><term><see langword="Element" /></term><description> Nazwa tagu.  
  
 </description></item><item><term><see langword="EntityReference" /></term><description> Nazwa jednostki, do której się odwołuje.  
  
 </description></item><item><term><see langword="ProcessingInstruction" /></term><description> Obiekt docelowy instrukcji przetwarzania.  
  
 </description></item><item><term><see langword="XmlDeclaration" /></term><description> Ciąg <see langword="xml" />literału.  
  
 </description></item></list></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Klasa jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. <xref:System.Xml.XmlValidatingReader> Można utworzyć wystąpienie walidacji <xref:System.Xml.XmlReader> przy <xref:System.Xml.XmlReaderSettings> użyciu klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz sekcję <xref:System.Xml.XmlReader> uwagi na stronie referencyjnej.  
  
   
  
## Examples  
 Poniższy przykład odczytuje plik XML i wyświetla wszystkie węzły.  
  
 [!code-cpp[Classic WebData XmlValidatingReader.Name Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlValidatingReader.Name Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlValidatingReader.Name Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlValidatingReader.Name Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlValidatingReader.Name Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlValidatingReader.Name Example/VB/source.vb#1)]  
  
 W przykładzie jest użyty plik, `items.xml`, jako dane wejściowe.  
  
 [!code-xml[Classic WebData XmlValidatingReader.Name Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlValidatingReader.Name Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="Namespaces">
      <MemberSignature Language="C#" Value="public bool Namespaces { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Namespaces" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.Namespaces" />
      <MemberSignature Language="VB.NET" Value="Public Property Namespaces As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Namespaces { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Namespaces : bool with get, set" Usage="System.Xml.XmlValidatingReader.Namespaces" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy ma być obsługiwana przestrzeń nazw.</summary>
        <value><see langword="true" />do obsługi przestrzeni nazw; w przeciwnym razie. <see langword="false" /> Wartość domyślna to <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Klasa jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. <xref:System.Xml.XmlValidatingReader> Można utworzyć wystąpienie walidacji <xref:System.Xml.XmlReader> przy <xref:System.Xml.XmlReaderSettings> użyciu klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz sekcję <xref:System.Xml.XmlReader> uwagi na stronie referencyjnej.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="NamespaceURI">
      <MemberSignature Language="C#" Value="public override string NamespaceURI { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string NamespaceURI" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.NamespaceURI" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property NamespaceURI As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ NamespaceURI { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.NamespaceURI : string" Usage="System.Xml.XmlValidatingReader.NamespaceURI" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera przestrzeń nazw Uniform Resource Identifier (identyfikator URI) (zgodnie z definicją w organizacja World Wide Web Consortium (W3C) przestrzeni nazw węzła, na którym jest umieszczony czytnik.</summary>
        <value>Identyfikator URI przestrzeni nazw bieżącego węzła; w przeciwnym razie pusty ciąg.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość ma zastosowanie tylko `Element` do `Attribute` węzłów i.  
  
> [!NOTE]
>  Klasa jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. <xref:System.Xml.XmlValidatingReader> Można utworzyć wystąpienie walidacji <xref:System.Xml.XmlReader> przy <xref:System.Xml.XmlReaderSettings> użyciu klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz sekcję <xref:System.Xml.XmlReader> uwagi na stronie referencyjnej.  
  
   
  
## Examples  
 Poniższy przykład odczytuje fragment XML.  
  
 [!code-csharp[Classic WebData XmlParserContext.XmlParserContext Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlParserContext.XmlParserContext Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlParserContext.XmlParserContext Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlParserContext.XmlParserContext Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="NameTable">
      <MemberSignature Language="C#" Value="public override System.Xml.XmlNameTable NameTable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlNameTable NameTable" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.NameTable" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property NameTable As XmlNameTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Xml::XmlNameTable ^ NameTable { System::Xml::XmlNameTable ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.NameTable : System.Xml.XmlNameTable" Usage="System.Xml.XmlValidatingReader.NameTable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNameTable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Xml.XmlNameTable" /> Pobiera skojarzoną z tą implementacją.</summary>
        <value><see langword="XmlNameTable" />Dzięki temu można uzyskać atomową wersję ciągu w węźle.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Klasa jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. <xref:System.Xml.XmlValidatingReader> Można utworzyć wystąpienie walidacji <xref:System.Xml.XmlReader> przy <xref:System.Xml.XmlReaderSettings> użyciu klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz sekcję <xref:System.Xml.XmlReader> uwagi na stronie referencyjnej.  
  
 Wszystkie nazwy węzłów i atrybutów zwracane z <xref:System.Xml.XmlValidatingReader> są atomowe przy `NameTable`użyciu. Gdy taka sama nazwa jest zwracana wiele razy (na przykład `Customer`), ten sam `String` obiekt zostanie zwrócony dla tej nazwy. Dzięki temu można napisać wydajny kod, który wykonuje porównania obiektów w tych ciągach zamiast kosztownych porównywania ciągów.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlNameTable" />
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="NodeType">
      <MemberSignature Language="C#" Value="public override System.Xml.XmlNodeType NodeType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.XmlNodeType NodeType" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.NodeType" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property NodeType As XmlNodeType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Xml::XmlNodeType NodeType { System::Xml::XmlNodeType get(); };" />
      <MemberSignature Language="F#" Value="member this.NodeType : System.Xml.XmlNodeType" Usage="System.Xml.XmlValidatingReader.NodeType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNodeType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera typ bieżącego węzła.</summary>
        <value>Jedna z <see cref="T:System.Xml.XmlNodeType" /> wartości reprezentujących typ bieżącego węzła.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Klasa jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. <xref:System.Xml.XmlValidatingReader> Można utworzyć wystąpienie walidacji <xref:System.Xml.XmlReader> przy <xref:System.Xml.XmlReaderSettings> użyciu klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz sekcję <xref:System.Xml.XmlReader> uwagi na stronie referencyjnej.  
  
 Ta właściwość nigdy nie zwraca następujących `XmlNodeType` typów: `Document`, `DocumentFragment`, `Entity`, lub `Notation`.  
  
   
  
## Examples  
 Poniższy przykład odczytuje plik XML i wyświetla wszystkie węzły.  
  
 [!code-cpp[Classic WebData XmlValidatingReader.Name Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlValidatingReader.Name Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlValidatingReader.Name Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlValidatingReader.Name Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlValidatingReader.Name Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlValidatingReader.Name Example/VB/source.vb#1)]  
  
 W przykładzie jest użyty plik, `items.xml`, jako dane wejściowe.  
  
 [!code-xml[Classic WebData XmlValidatingReader.Name Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlValidatingReader.Name Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="Prefix">
      <MemberSignature Language="C#" Value="public override string Prefix { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Prefix" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.Prefix" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Prefix As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Prefix { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Prefix : string" Usage="System.Xml.XmlValidatingReader.Prefix" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera prefiks przestrzeni nazw skojarzony z bieżącym węzłem.</summary>
        <value>Prefiks przestrzeni nazw skojarzony z bieżącym węzłem.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Klasa jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. <xref:System.Xml.XmlValidatingReader> Można utworzyć wystąpienie walidacji <xref:System.Xml.XmlReader> przy <xref:System.Xml.XmlReaderSettings> użyciu klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz sekcję <xref:System.Xml.XmlReader> uwagi na stronie referencyjnej.  
  
   
  
## Examples  
 Poniższy przykład odczytuje fragment XML.  
  
 [!code-csharp[Classic WebData XmlParserContext.XmlParserContext Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlParserContext.XmlParserContext Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlParserContext.XmlParserContext Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlParserContext.XmlParserContext Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="QuoteChar">
      <MemberSignature Language="C#" Value="public override char QuoteChar { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance char QuoteChar" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.QuoteChar" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property QuoteChar As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property char QuoteChar { char get(); };" />
      <MemberSignature Language="F#" Value="member this.QuoteChar : char" Usage="System.Xml.XmlValidatingReader.QuoteChar" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera znak cudzysłowu używany do umieszczania wartości węzła atrybutu.</summary>
        <value>Znak cudzysłowu ("or") służący do ujmowania wartości węzła atrybutu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość ma zastosowanie tylko do węzła atrybutu.  
  
> [!NOTE]
>  Klasa jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. <xref:System.Xml.XmlValidatingReader> Można utworzyć wystąpienie walidacji <xref:System.Xml.XmlReader> przy <xref:System.Xml.XmlReaderSettings> użyciu klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz sekcję <xref:System.Xml.XmlReader> uwagi na stronie referencyjnej.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="Read">
      <MemberSignature Language="C#" Value="public override bool Read ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Read() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlValidatingReader.Read" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Read () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Read();" />
      <MemberSignature Language="F#" Value="override this.Read : unit -&gt; bool" Usage="xmlValidatingReader.Read " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Odczytuje następny węzeł ze strumienia.</summary>
        <returns><see langword="true" />Jeśli następny węzeł został pomyślnie odczytany; <see langword="false" /> Jeśli nie ma więcej węzłów do odczytania.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Klasa jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. <xref:System.Xml.XmlValidatingReader> Można utworzyć wystąpienie walidacji <xref:System.Xml.XmlReader> przy <xref:System.Xml.XmlReaderSettings> użyciu klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz sekcję <xref:System.Xml.XmlReader> uwagi na stronie referencyjnej.  
  
 Gdy czytelnik jest najpierw tworzony i inicjowany, nie ma dostępnych informacji. Musisz wywołać `Read` , aby odczytać pierwszy węzeł.  
  
   
  
## Examples  
 Poniższy przykład odczytuje plik XML i wyświetla każdy węzeł.  
  
 [!code-cpp[Classic WebData XmlValidatingReader.Name Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlValidatingReader.Name Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlValidatingReader.Name Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlValidatingReader.Name Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlValidatingReader.Name Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlValidatingReader.Name Example/VB/source.vb#1)]  
  
 W przykładzie jest użyty plik, `items.xml`, jako dane wejściowe.  
  
 [!code-xml[Classic WebData XmlValidatingReader.Name Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlValidatingReader.Name Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="ReadAttributeValue">
      <MemberSignature Language="C#" Value="public override bool ReadAttributeValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool ReadAttributeValue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlValidatingReader.ReadAttributeValue" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ReadAttributeValue () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool ReadAttributeValue();" />
      <MemberSignature Language="F#" Value="override this.ReadAttributeValue : unit -&gt; bool" Usage="xmlValidatingReader.ReadAttributeValue " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Analizuje wartość atrybutu w jeden lub więcej <see langword="Text" />, <see langword="EntityReference" />lub <see langword="EndEntity" /> węzłów.</summary>
        <returns><see langword="true" />Jeśli istnieją węzły do zwrócenia.  
  
 <see langword="false" />Jeśli czytnik nie jest umieszczony w węźle atrybutu podczas wywołania początkowego lub wszystkie wartości atrybutów zostały odczytane.  
  
Pusty atrybut, taki jak, <c>misc = ""</c>, zwraca <see langword="true" /> z pojedynczym węzłem o wartości String. Empty.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Klasa jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. <xref:System.Xml.XmlValidatingReader> Można utworzyć wystąpienie walidacji <xref:System.Xml.XmlReader> przy <xref:System.Xml.XmlReaderSettings> użyciu klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz sekcję <xref:System.Xml.XmlReader> uwagi na stronie referencyjnej.  
  
 Użyj tej metody po wywołaniu <xref:System.Xml.XmlValidatingReader.MoveToAttribute%2A> do odczytu w węzłach odwołania tekstu lub jednostki, które tworzą wartość atrybutu. <xref:System.Xml.XmlReader.Depth%2A> Węzły wartości atrybutów to jeden i głębokość węzła atrybutu. `Depth` Zwiększa i zmniejsza o jeden po kroku do i z ogólnych odwołań do jednostek.  
  
 Załóżmy na przykład, że masz następujący kod XML:`<test name="a &b; c"/>`  
  
 gdzie jednostka `b` jest zdefiniowana w definicji typu dokumentu (DTD) w następujący sposób:`<!ENTITY b "123">`  
  
 Jeśli <xref:System.Xml.XmlValidatingReader.EntityHandling%2A> jest ustawiona na `ExpandCharEntities`, poniższy C# kod zwraca wartość atrybutu w postaci dwóch węzłów tekstowych i jednego węzła odwołania do jednostki:  
  
```csharp  
reader.MoveToAttribute("name");  
  while (reader.ReadAttributeValue())  
  {  
  if (reader.NodeType == XmlNodeType.Text)  
  {  
  // at this point reader.Value == "a " or " c"  
  }  
  else if (reader.NodeType == XmlNodeType.EntityReference)  
  {  
  // at this point reader.Name == "b"  
  reader.ResolveEntity();  
  while (reader.ReadAttributeValue() &&  
  reader.NodeType != XmlNodeType.EndEntity)  
  {  
  // reader.Value == "123"  
  }  
  }  
    }  
```  
  
   
  
## Examples  
 Poniższy przykład odczytuje atrybut z tekstem i węzłami odwołania do jednostek.  
  
 [!code-cpp[Classic WebData XmlValidatingReader.MoveToAttribute Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlValidatingReader.MoveToAttribute Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlValidatingReader.MoveToAttribute Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlValidatingReader.MoveToAttribute Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlValidatingReader.MoveToAttribute Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlValidatingReader.MoveToAttribute Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="ReadContentAsBase64">
      <MemberSignature Language="C#" Value="public override int ReadContentAsBase64 (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 ReadContentAsBase64(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlValidatingReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ReadContentAsBase64 (buffer As Byte(), index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int ReadContentAsBase64(cli::array &lt;System::Byte&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.ReadContentAsBase64 : byte[] * int * int -&gt; int" Usage="xmlValidatingReader.ReadContentAsBase64 (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="index" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="count" Type="System.Int32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="buffer">Bufor, do którego ma zostać skopiowany otrzymany tekst. Ta wartość nie może <see langword="null" />być.</param>
        <param name="index">Przesunięcie do buforu, gdzie rozpocząć kopiowanie wyniku.</param>
        <param name="count">Maksymalna liczba bajtów do skopiowania do buforu. Rzeczywista liczba skopiowanych bajtów jest zwracana z tej metody.</param>
        <summary>Odczytuje zawartość i zwraca zdekodowane bajty binarne w formacie base64.</summary>
        <returns>Liczba bajtów zapisywana w buforze.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Klasa jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. <xref:System.Xml.XmlValidatingReader> Można utworzyć wystąpienie walidacji <xref:System.Xml.XmlReader> przy <xref:System.Xml.XmlReaderSettings> użyciu klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz sekcję <xref:System.Xml.XmlReader> uwagi na stronie referencyjnej. 
  
 Ta metoda strumieniuje zawartość, dekoduje zawartość base64 i zwraca zdekodowane bajty binarne (na przykład wbudowany obraz GIF kodowany algorytmem Base64) do buforu. Ta metoda może być wywoływana kolejno w celu odczytania dużych strumieni tekstu osadzonego. Aby uzyskać więcej informacji, zobacz artykuł RFC 1521, "MIME (Multipurpose Internet Mail Extensions), część jeden: Mechanizmy określania i opisywania formatu treści wiadomości internetowych. Specyfikacje RFC można uzyskać z [witryny Request for Comments w sieci Web](https://www.rfc-editor.org).  
  
> [!NOTE]
>  Nie należy uzyskiwać dostępu do żadnej z właściwości czytnika między wywołaniami <xref:System.Xml.XmlValidatingReader.ReadContentAsBase64%2A> metody, dopóki metoda nie zwróci wartości 0.  
  
 Ta metoda ma następujące zachowanie:  
  
-   <xref:System.Xml.XmlValidatingReader.ReadContentAsBase64%2A>Zwraca wartość 0, gdy osiągnął koniec strumienia bajtów, na którym działał. Czytnik jest ustawiony w pierwszym węźle nienależącym do zawartości.  
  
-   W przypadku poproszenia o mniej lub dokładnej liczbie bajtów niż pozostała w strumieniu, czytnik pozostaje w bieżącym położeniu.  
  
-   <xref:System.Xml.XmlValidatingReader.ReadContentAsBase64%2A>nie jest obsługiwane w następujących typach węzłów XML:  Element, xmldeklaracji, None, Document, DocumentType, Notation, Entity i DocumentFragment.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="buffer" /> Wartość to<see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException"><see cref="M:System.Xml.XmlValidatingReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)" />nie jest obsługiwane w bieżącym węźle.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Indeks w buforze lub indeksie + Count jest większy niż rozmiar przydzielonego buforu.</exception>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlValidatingReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="T:System.Xml.XmlNodeType" />
      </Docs>
    </Member>
    <Member MemberName="ReadContentAsBinHex">
      <MemberSignature Language="C#" Value="public override int ReadContentAsBinHex (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 ReadContentAsBinHex(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlValidatingReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ReadContentAsBinHex (buffer As Byte(), index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int ReadContentAsBinHex(cli::array &lt;System::Byte&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.ReadContentAsBinHex : byte[] * int * int -&gt; int" Usage="xmlValidatingReader.ReadContentAsBinHex (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="index" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="count" Type="System.Int32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="buffer">Bufor, do którego ma zostać skopiowany otrzymany tekst. Ta wartość nie może <see langword="null" />być.</param>
        <param name="index">Przesunięcie do buforu, gdzie rozpocząć kopiowanie wyniku.</param>
        <param name="count">Maksymalna liczba bajtów do skopiowania do buforu. Rzeczywista liczba skopiowanych bajtów jest zwracana z tej metody.</param>
        <summary>Odczytuje zawartość i zwraca zdekodowane bajty binarne BinHex.</summary>
        <returns>Liczba bajtów zapisywana w buforze.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Klasa jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. <xref:System.Xml.XmlValidatingReader> Można utworzyć wystąpienie walidacji <xref:System.Xml.XmlReader> przy <xref:System.Xml.XmlReaderSettings> użyciu klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz sekcję <xref:System.Xml.XmlReader> uwagi na stronie referencyjnej. 
  
 Ta metoda strumieniuje zawartość, dekoduje zawartość BinHex i zwraca zdekodowane bajty binarne (na przykład wbudowany obraz GIF zakodowany przy użyciu BinHex) do buforu. Ta metoda może być wywoływana kolejno w celu odczytania dużych strumieni tekstu osadzonego.  
  
> [!NOTE]
>  Nie należy uzyskiwać dostępu do żadnej z właściwości czytnika między wywołaniami <xref:System.Xml.XmlValidatingReader.ReadContentAsBinHex%2A> metody, dopóki metoda nie zwróci wartości 0.  
  
 Ta metoda ma następujące zachowanie:  
  
-   <xref:System.Xml.XmlValidatingReader.ReadContentAsBinHex%2A>Zwraca wartość 0, gdy osiągnął koniec strumienia bajtów, na którym działał. Czytnik jest ustawiony w pierwszym węźle nienależącym do zawartości.  
  
-   W przypadku poproszenia o mniej lub dokładnej liczbie bajtów niż pozostała w strumieniu, czytnik pozostaje w bieżącym położeniu.  
  
-   <xref:System.Xml.XmlValidatingReader.ReadContentAsBinHex%2A>nie jest obsługiwane w następujących typach węzłów XML:  Element, xmldeklaracji, None, Document, DocumentType, Notation, Entity i DocumentFragment.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="buffer" /> Wartość to<see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException"><see cref="M:System.Xml.XmlValidatingReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)" />nie jest obsługiwane w bieżącym węźle.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Indeks w buforze lub indeksie + Count jest większy niż rozmiar przydzielonego buforu.</exception>
        <exception cref="T:System.NotSupportedException"><see cref="T:System.Xml.XmlValidatingReader" /> Implementacja nie obsługuje tej metody.</exception>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlValidatingReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)" />
        <altmember cref="T:System.Xml.XmlNodeType" />
      </Docs>
    </Member>
    <Member MemberName="ReadElementContentAsBase64">
      <MemberSignature Language="C#" Value="public override int ReadElementContentAsBase64 (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 ReadElementContentAsBase64(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlValidatingReader.ReadElementContentAsBase64(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ReadElementContentAsBase64 (buffer As Byte(), index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int ReadElementContentAsBase64(cli::array &lt;System::Byte&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.ReadElementContentAsBase64 : byte[] * int * int -&gt; int" Usage="xmlValidatingReader.ReadElementContentAsBase64 (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="index" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="count" Type="System.Int32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="buffer">Bufor, do którego ma zostać skopiowany otrzymany tekst. Ta wartość nie może <see langword="null" />być.</param>
        <param name="index">Przesunięcie do buforu, gdzie rozpocząć kopiowanie wyniku.</param>
        <param name="count">Maksymalna liczba bajtów do skopiowania do buforu. Rzeczywista liczba skopiowanych bajtów jest zwracana z tej metody.</param>
        <summary>Odczytuje element i dekoduje zawartość Base64.</summary>
        <returns>Liczba bajtów zapisywana w buforze.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Klasa jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. <xref:System.Xml.XmlValidatingReader> Można utworzyć wystąpienie walidacji <xref:System.Xml.XmlReader> przy <xref:System.Xml.XmlReaderSettings> użyciu klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz sekcję <xref:System.Xml.XmlReader> uwagi na stronie referencyjnej.  
  
 Ta metoda odczytuje zawartość elementu, dekoduje ją przy użyciu kodowania base64 i zwraca zdekodowane bajty binarne (na przykład wbudowany obraz GIF kodowany algorytmem Base64) do buforu. Aby uzyskać więcej informacji, zobacz artykuł RFC 1521, "MIME (Multipurpose Internet Mail Extensions), część jeden: Mechanizmy określania i opisywania formatu treści wiadomości internetowych. Specyfikacje RFC można uzyskać z [witryny Request for Comments w sieci Web](https://www.rfc-editor.org).  
  
 Ta metoda może odczytywać tylko elementy o prostej zawartości. Element może zawierać tekst, biały znak, znaczący odstęp, sekcje CDATA, komentarze i instrukcje przetwarzania. Może również zawierać odwołania do jednostek, które są automatycznie rozszerzane. Element nie może mieć elementów podrzędnych.  
  
 Ta metoda jest bardzo podobna do <xref:System.Xml.XmlValidatingReader.ReadContentAsBase64%2A> metody, z tą różnicą, że może być wywoływana tylko w typach węzłów elementów.  
  
 Jeśli wartość jest większa niż liczba bajtów w dokumencie lub jeśli jest równa liczbie bajtów w dokumencie <xref:System.Xml.XmlValidatingReader> , odczytuje wszystkie pozostałe bajty w dokumencie i zwraca liczbę odczytanych bajtów. `count` Następne <xref:System.Xml.XmlValidatingReader> wywołanie metody zwraca zero i przenosi czytnik do węzła <xref:System.Xml.XmlNodeType.EndElement>po.  
  
 Jeśli zostanie wywołana <xref:System.Xml.XmlValidatingReader.Read%2A> przed użyciem całej zawartości elementu, czytelnik może zachowywać się tak, jakby była używana pierwsza zawartość, a <xref:System.Xml.XmlValidatingReader.Read%2A> następnie została wywołana. Oznacza to, że czytnik odczyta cały tekst do momentu napotkania elementu końcowego. Następnie odczytaj węzeł tagu końcowego, Odczytaj następny węzeł, a następnie umieść go w następnym kolejnym węźle.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="buffer" /> Wartość to<see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Bieżący węzeł nie jest węzłem elementu.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Indeks w buforze lub indeksie + Count jest większy niż rozmiar przydzielonego buforu.</exception>
        <exception cref="T:System.NotSupportedException"><see cref="T:System.Xml.XmlValidatingReader" /> Implementacja nie obsługuje tej metody.</exception>
        <exception cref="T:System.Xml.XmlException">Element zawiera zawartość mieszaną.</exception>
        <exception cref="T:System.FormatException">Nie można przekonwertować zawartości na żądany typ.</exception>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlValidatingReader.ReadContentAsBase64(System.Byte[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="ReadElementContentAsBinHex">
      <MemberSignature Language="C#" Value="public override int ReadElementContentAsBinHex (byte[] buffer, int index, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 ReadElementContentAsBinHex(unsigned int8[] buffer, int32 index, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlValidatingReader.ReadElementContentAsBinHex(System.Byte[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ReadElementContentAsBinHex (buffer As Byte(), index As Integer, count As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int ReadElementContentAsBinHex(cli::array &lt;System::Byte&gt; ^ buffer, int index, int count);" />
      <MemberSignature Language="F#" Value="override this.ReadElementContentAsBinHex : byte[] * int * int -&gt; int" Usage="xmlValidatingReader.ReadElementContentAsBinHex (buffer, index, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="buffer" Type="System.Byte[]" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="index" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="count" Type="System.Int32" Index="2" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="buffer">Bufor, do którego ma zostać skopiowany otrzymany tekst. Ta wartość nie może <see langword="null" />być.</param>
        <param name="index">Przesunięcie do buforu, gdzie rozpocząć kopiowanie wyniku.</param>
        <param name="count">Maksymalna liczba bajtów do skopiowania do buforu. Rzeczywista liczba skopiowanych bajtów jest zwracana z tej metody.</param>
        <summary>Odczytuje element i dekoduje zawartość BinHex.</summary>
        <returns>Liczba bajtów zapisywana w buforze.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Klasa jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. <xref:System.Xml.XmlValidatingReader> Można utworzyć wystąpienie walidacji <xref:System.Xml.XmlReader> przy <xref:System.Xml.XmlReaderSettings> użyciu klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz sekcję <xref:System.Xml.XmlReader> uwagi na stronie referencyjnej.  
  
 Ta metoda odczytuje zawartość elementu, dekoduje ją przy użyciu kodowania BinHex i zwraca zdekodowane bajty binarne (na przykład wbudowany obraz GIF kodowanej BinHex) do buforu.  
  
 Ta metoda może odczytywać tylko elementy o prostej zawartości. Element może zawierać tekst, biały znak, znaczący odstęp, sekcje CDATA, komentarze i instrukcje przetwarzania. Może również zawierać odwołania do jednostek, które są automatycznie rozszerzane. Element nie może mieć elementów podrzędnych.  
  
 Ta metoda jest bardzo podobna do <xref:System.Xml.XmlValidatingReader.ReadContentAsBinHex%2A> metody, z tą różnicą, że może być wywoływana tylko w typach węzłów elementów.  
  
 Jeśli wartość jest większa niż liczba bajtów w dokumencie lub jeśli jest równa liczbie bajtów w dokumencie <xref:System.Xml.XmlValidatingReader> , odczytuje wszystkie pozostałe bajty w dokumencie i zwraca liczbę odczytanych bajtów. `count` Następne <xref:System.Xml.XmlValidatingReader> wywołanie metody zwraca zero i przenosi czytnik do węzła <xref:System.Xml.XmlNodeType.EndElement>po.  
  
 Jeśli zostanie wywołana <xref:System.Xml.XmlValidatingReader.Read%2A> przed użyciem całej zawartości elementu, czytelnik może zachowywać się tak, jakby była używana pierwsza zawartość, a <xref:System.Xml.XmlValidatingReader.Read%2A> następnie została wywołana. Oznacza to, że czytnik odczyta cały tekst do momentu napotkania elementu końcowego. Następnie odczytaj węzeł tagu końcowego, Odczytaj następny węzeł, a następnie umieść go w następnym kolejnym węźle.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="buffer" /> Wartość to<see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">Bieżący węzeł nie jest węzłem elementu.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">Indeks w buforze lub indeksie + Count jest większy niż rozmiar przydzielonego buforu.</exception>
        <exception cref="T:System.NotSupportedException"><see cref="T:System.Xml.XmlValidatingReader" /> Implementacja nie obsługuje tej metody.</exception>
        <exception cref="T:System.Xml.XmlException">Element zawiera zawartość mieszaną.</exception>
        <exception cref="T:System.FormatException">Nie można przekonwertować zawartości na żądany typ.</exception>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlValidatingReader.ReadContentAsBinHex(System.Byte[],System.Int32,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Reader">
      <MemberSignature Language="C#" Value="public System.Xml.XmlReader Reader { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlReader Reader" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.Reader" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Reader As XmlReader" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::XmlReader ^ Reader { System::Xml::XmlReader ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Reader : System.Xml.XmlReader" Usage="System.Xml.XmlValidatingReader.Reader" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReader</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera użyty do utworzenia tego <see langword="XmlValidatingReader" />. <see cref="T:System.Xml.XmlReader" /></summary>
        <value><see langword="XmlReader" /> Określony w konstruktorze.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Klasa jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. <xref:System.Xml.XmlValidatingReader> Można utworzyć wystąpienie walidacji <xref:System.Xml.XmlReader> przy <xref:System.Xml.XmlReaderSettings> użyciu klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz sekcję <xref:System.Xml.XmlReader> uwagi na stronie referencyjnej.  
  
 Ta właściwość umożliwia użytkownikowi dostęp do właściwości specyficznych dla podanego czytnika. Zwraca typ `XmlReader`. Użytkownik powinien wykonać zapytanie dotyczące typu przed rzutem.  
  
 Zmiana stanu zwróconego czytnika (na przykład wywołanie jednej z metod odczytu) może prowadzić do nieprzewidzianych wyników.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="ReadState">
      <MemberSignature Language="C#" Value="public override System.Xml.ReadState ReadState { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.ReadState ReadState" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.ReadState" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property ReadState As ReadState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Xml::ReadState ReadState { System::Xml::ReadState get(); };" />
      <MemberSignature Language="F#" Value="member this.ReadState : System.Xml.ReadState" Usage="System.Xml.XmlValidatingReader.ReadState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.ReadState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera stan czytnika.</summary>
        <value>Jedna z <see cref="T:System.Xml.ReadState" /> wartości.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Klasa jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. <xref:System.Xml.XmlValidatingReader> Można utworzyć wystąpienie walidacji <xref:System.Xml.XmlReader> przy <xref:System.Xml.XmlReaderSettings> użyciu klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz sekcję <xref:System.Xml.XmlReader> uwagi na stronie referencyjnej.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="ReadString">
      <MemberSignature Language="C#" Value="public override string ReadString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ReadString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlValidatingReader.ReadString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ReadString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ReadString();" />
      <MemberSignature Language="F#" Value="override this.ReadString : unit -&gt; string" Usage="xmlValidatingReader.ReadString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Odczytuje zawartość elementu lub węzła tekstowego jako ciąg.</summary>
        <returns>Zawartość węzła elementu lub tekstu. Może to być pusty ciąg, jeśli czytnik jest umieszczony w innym miejscu niż element lub węzeł tekstowy, lub jeśli nie ma więcej zawartości tekstowej do zwrócenia w bieżącym kontekście.  
  
 <block subset="none" type="note"><para>  
 Węzłem tekstu może być element lub węzeł tekstu atrybutu.  
  
</para></block></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Klasa jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. <xref:System.Xml.XmlValidatingReader> Można utworzyć wystąpienie walidacji <xref:System.Xml.XmlReader> przy <xref:System.Xml.XmlReaderSettings> użyciu klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz sekcję <xref:System.Xml.XmlReader> uwagi na stronie referencyjnej.  
  
 Jeśli jest ustawiona na elemencie, `ReadString` łączy cały tekst, znaczący biały znak, biały znak i wszystkie typy węzłów sekcji CDATA i zwraca dane połączone jako zawartość elementu. Czytnik jest zatrzymywany po napotkaniu dowolnego znacznika, w tym komentarzy i instrukcji przetwarzania. Może to nastąpić w modelu zawartości mieszanej lub gdy odczytywany jest tag końcowy elementu.  
  
 W przypadku położenia w węźle tekstowym program `ReadString` wykonuje takie samo łączenie z węzła tekstowego do znacznika końcowego elementu. Jeśli czytnik jest umieszczony w węźle tekstu atrybutu, `ReadString` ma takie same funkcje jak w przypadku, gdy czytelnik miał miejsce w tagu początkowym elementu. Zwraca wszystkie połączone węzły tekstu elementu.  
  
 Właściwość określa, jak `ReadString` działa w następujący sposób: <xref:System.Xml.XmlValidatingReader.EntityHandling%2A>  
  
|Wartość|Opis|  
|-----------|-----------------|  
|ExpandEntities|Zwraca rozwinięty znak i ogólne jednostki. Domyślnie włączone.|  
|ExpandCharEntities|Zwraca zawartość tekstową do, ale nie łącznie z ogólnym odwołaniem do jednostki. Oznacza to, że ogólna jednostka powoduje zatrzymanie ReadString. Musisz wywołać `Read` , aby przekroczyć odwołanie do jednostki.|  
  
   
  
## Examples  
 Poniższy przykład wyświetla zawartość tekstową każdego z elementów.  
  
 [!code-cpp[Classic WebData XmlValidatingReader.IsEmptyElement Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlValidatingReader.IsEmptyElement Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlValidatingReader.IsEmptyElement Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlValidatingReader.IsEmptyElement Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlValidatingReader.IsEmptyElement Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlValidatingReader.IsEmptyElement Example/VB/source.vb#1)]  
  
 W przykładzie jest użyty plik, `elems.xml`, jako dane wejściowe.  
  
 [!code-xml[Classic WebData XmlValidatingReader.IsEmptyElement Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlValidatingReader.IsEmptyElement Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="ReadTypedValue">
      <MemberSignature Language="C#" Value="public object ReadTypedValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object ReadTypedValue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlValidatingReader.ReadTypedValue" />
      <MemberSignature Language="VB.NET" Value="Public Function ReadTypedValue () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ ReadTypedValue();" />
      <MemberSignature Language="F#" Value="member this.ReadTypedValue : unit -&gt; obj" Usage="xmlValidatingReader.ReadTypedValue " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pobiera typ środowiska uruchomieniowego języka wspólnego dla określonego typu języka definicji schematu XML (XSD).</summary>
        <returns>Typ środowiska uruchomieniowego języka wspólnego dla określonego typu schematu XML.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Klasa jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. <xref:System.Xml.XmlValidatingReader> Można utworzyć wystąpienie walidacji <xref:System.Xml.XmlReader> przy <xref:System.Xml.XmlReaderSettings> użyciu klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz sekcję <xref:System.Xml.XmlReader> uwagi na stronie referencyjnej.  
  
 Na przykład, jeśli typ schematu jest zdefiniowany jako `xsd:int`, typ `int32` środowiska uruchomieniowego jest zwracany dla obiektu. Można to sprawdzić przy użyciu <xref:System.Object.GetType%2A> metody i Cast odpowiednio. Metoda zawsze zwraca typ, który jest pochodną <xref:System.Object> klasy. <xref:System.Xml.XmlValidatingReader.ReadTypedValue%2A> Nigdy nie zwraca <xref:System.Object> typu.  
  
 Jeśli czytnik jest umieszczony na atrybucie, Metoda ta zwraca obiekt typu środowiska uruchomieniowego, ale nie zmienia pozycji czytnika. Jeśli czytnik znajduje się w elemencie, `ReadTypedValue` odczytuje wszystkie CDATA, tekst, biały znak, znaczący odstęp i węzły komentarza, zwraca obiekt typu czasu wykonywania i umieszcza czytnik na tagu końcowym. Wszystkie typy, które nie mają bezpośredniego mapowania, na przykład `NMTOKENS`są zwracane jako ciągi.  
  
> [!NOTE]
>  Jeśli <xref:System.Xml.XmlValidatingReader.ValidationType%2A> ustawiono wartość ValidationType. None, informacje o typie danych nie są dostarczane z poziomu schematów lub definicji typu dokumentu (DTD).  
  
> [!CAUTION]
>  Po wywołaniu <xref:System.Xml.XmlValidatingReader.Close%2A>program `ReadTypedValue` zwróci `null`metodę.  
  
   
  
## Examples  
 Poniższy przykład wyświetla informacje o typie dla każdego elementu w dokumencie XML.  
  
 [!code-cpp[XmlValidatingReader.SchemaType#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlValidatingReader.SchemaType/CPP/schematype.cpp#1)]
 [!code-csharp[XmlValidatingReader.SchemaType#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlValidatingReader.SchemaType/CS/schematype.cs#1)]
 [!code-vb[XmlValidatingReader.SchemaType#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlValidatingReader.SchemaType/VB/schematype.vb#1)]  
  
 W przykładzie są stosowane następujące pliki wejściowe.  
  
 `booksSchema.xml`  
  
 [!code-xml[XmlValidatingReader.SchemaType#2](~/samples/snippets/xml/VS_Snippets_Data/XmlValidatingReader.SchemaType/XML/booksschema.xml#2)]  
  
 `books.xsd`  
  
 [!code-xml[XmlValidatingReader.SchemaType#3](~/samples/snippets/xml/VS_Snippets_Data/XmlValidatingReader.SchemaType/XML/books.xsd#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="ResolveEntity">
      <MemberSignature Language="C#" Value="public override void ResolveEntity ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void ResolveEntity() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlValidatingReader.ResolveEntity" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub ResolveEntity ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void ResolveEntity();" />
      <MemberSignature Language="F#" Value="override this.ResolveEntity : unit -&gt; unit" Usage="xmlValidatingReader.ResolveEntity " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Rozpoznaje odwołanie do jednostki dla <see langword="EntityReference" /> węzłów.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Klasa jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. <xref:System.Xml.XmlValidatingReader> Można utworzyć wystąpienie walidacji <xref:System.Xml.XmlReader> przy <xref:System.Xml.XmlReaderSettings> użyciu klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz sekcję <xref:System.Xml.XmlReader> uwagi na stronie referencyjnej.  
  
 Jeśli czytnik jest umieszczony w `EntityReference` węźle (`XmlNodeType.EntityReference`), jeśli <xref:System.Xml.XmlValidatingReader.Read%2A> jest wywoływana po wywołaniu tej metody, tekst zamiany jednostki zostanie przeanalizowany. Po zakończeniu tekstu zamiany jednostki jest zwracany `EndEntity` węzeł, aby zamknąć zakres odwołania do jednostki.  
  
> [!NOTE]
>  Po wywołaniu tej metody, jeśli jednostka jest częścią wartości atrybutu, należy wywołać <xref:System.Xml.XmlValidatingReader.ReadAttributeValue%2A> krok do jednostki.  
  
   
  
## Examples  
 Poniższy przykład używa `ResolveEntity` do rozszerzania jednostki ogólnej.  
  
 [!code-cpp[Classic WebData XmlValidatingReader.ResolveEntity Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlValidatingReader.ResolveEntity Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlValidatingReader.ResolveEntity Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlValidatingReader.ResolveEntity Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlValidatingReader.ResolveEntity Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlValidatingReader.ResolveEntity Example/VB/source.vb#1)]  
  
 W przykładzie jest użyty plik, `book1.xml`, jako dane wejściowe.  
  
 [!code-xml[Classic WebData XmlValidatingReader.ResolveEntity Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlValidatingReader.ResolveEntity Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Czytnik nie jest umieszczony w <see langword="EntityReference" /> węźle.</exception>
        <altmember cref="T:System.Xml.EntityHandling" />
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="Schemas">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaCollection Schemas { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Schema.XmlSchemaCollection Schemas" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.Schemas" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Schemas As XmlSchemaCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Schema::XmlSchemaCollection ^ Schemas { System::Xml::Schema::XmlSchemaCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Schemas : System.Xml.Schema.XmlSchemaCollection" Usage="System.Xml.XmlValidatingReader.Schemas" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Xml.Schema.XmlSchemaCollection" /> Pobiera do użycia na potrzeby walidacji.</summary>
        <value><see langword="XmlSchemaCollection" /> Do użycia na potrzeby walidacji.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Klasa jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. <xref:System.Xml.XmlValidatingReader> Można utworzyć wystąpienie walidacji <xref:System.Xml.XmlReader> przy <xref:System.Xml.XmlReaderSettings> użyciu klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz sekcję <xref:System.Xml.XmlReader> uwagi na stronie referencyjnej.  
  
 `XmlSchemaCollection` Zawiera wstępnie załadowane schematy XML (XDR) i języka definicji schematu XML (XSD). Ta właściwość daje czytelnikowi dostęp do pamięci podręcznej schematów i umożliwia jej Weryfikowanie bez konieczności ponownego ładowania schematów za każdym razem. Czytnik nie dodaje niczego do `XmlSchemaCollection`.  
  
 Jeśli zawiera schemat XML (XSD) zawierający `include` lub `import` elementy odwołujące się do innych przestrzeni nazw, schematy dla tych innych przestrzeni nazw są ładowane tylko do celów sprawdzania poprawności. `XmlSchemaCollection` Dopóki te schematy nie zostały jawnie dodane do kolekcji schematów, nie będą dostępne przy użyciu żadnej z metod lub właściwości kolekcji. Na przykład jeśli kolekcja zawiera plik `a.xsd`schematu, który zawiera odwołanie do pliku `b.xsd`schematu, należy dodać `b.xsd` do kolekcji schematów, zanim będzie można uzyskać do niej dostęp przy użyciu dowolnej metody lub właściwości kolekcji.  
  
 <xref:System.Xml.XmlResolver> `Schemas` <xref:System.Xml.Schema.XmlSchemaCollection.Add%2A?displayProperty=nameWithType> Gdy uzyskuje <xref:System.Xml.XmlValidatingReader.XmlResolver%2A?displayProperty=nameWithType> się dostęp przy użyciu właściwości, metoda używa określonego przez właściwość. `XmlSchemaCollection`  
  
> [!NOTE]
>  Schematy należy dodać do `XmlSchemaCollection` przed pierwszym `Read` wywołaniem.  
  
   
  
## Examples  
 Poniższy przykład sprawdza poprawność trzech plików XML przy użyciu schematów przechowywanych w elemencie XmlSchemaCollection.  
  
 [!code-cpp[Classic WebData XmlValidatingReader.Schemas Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlValidatingReader.Schemas Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlValidatingReader.Schemas Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlValidatingReader.Schemas Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlValidatingReader.Schemas Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlValidatingReader.Schemas Example/VB/source.vb#1)]  
  
 Przykład używa następujących pięciu plików wejściowych:  
  
 `booksSchema.xml`  
  
 [!code-xml[Classic WebData XmlValidatingReader.Schemas Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlValidatingReader.Schemas Example/XML/source.xml#2)]  
  
 `booksSchemaFail.xml`  
  
 [!code-xml[Classic WebData XmlValidatingReader.Schemas Example#3](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlValidatingReader.Schemas Example/XML/source.xml#3)]  
  
 `newbooks.xml`  
  
 [!code-xml[Classic WebData XmlValidatingReader.Schemas Example#4](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlValidatingReader.Schemas Example/XML/source.xml#4)]  
  
 `books.xsd`  
  
 [!code-xml[Classic WebData XmlValidatingReader.Schemas Example#5](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlValidatingReader.Schemas Example/XML/source.xml#5)]  
  
 `schema1.xdr`  
  
 [!code-xml[Classic WebData XmlValidatingReader.Schemas Example#6](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlValidatingReader.Schemas Example/XML/source.xml#6)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="SchemaType">
      <MemberSignature Language="C#" Value="public object SchemaType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object SchemaType" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.SchemaType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SchemaType As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ SchemaType { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.SchemaType : obj" Usage="System.Xml.XmlValidatingReader.SchemaType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera obiekt typu schematu.</summary>
        <value><see cref="T:System.Xml.Schema.XmlSchemaDatatype" />, <see cref="T:System.Xml.Schema.XmlSchemaSimpleType" /> lub<see cref="T:System.Xml.Schema.XmlSchemaComplexType" /> w zależności od tego, czy wartość węzła jest wbudowanym typem języka definicji schematu XML (XSD) czy zdefiniowanym przez użytkownika simpleType lub complexType; <see langword="null" /> Jeśli bieżący węzeł nie ma żadnego typu schematu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Klasa jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. <xref:System.Xml.XmlValidatingReader> Można utworzyć wystąpienie walidacji <xref:System.Xml.XmlReader> przy <xref:System.Xml.XmlReaderSettings> użyciu klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz sekcję <xref:System.Xml.XmlReader> uwagi na stronie referencyjnej.  
  
 Użytkownik musi przeprowadzić test dla zwracanego typu. Na przykład  
  
```csharp  
object obj = vreader.SchemaType;  
 if (obj is XmlSchemaType)  
 {  
   XmlSchemaType st = (XmlSchemaType)obj;  
   // use XmlSchemaType object  
 }  
 if (obj is XmlSchemaDatatype)  
 {  
   XmlSchemaDatatype sd = (XmlSchemaDatatype)obj;  
   Type vt = sd.ValueType;  
   // use XmlSchemaDatatype object  
       }  
```  
  
 Jeśli walidacja schematu XML jest wykonywana, `XmlSchemaType` lub `XmlSchemaDatatype` odpowiada bieżącemu elementowi, który jest odczytywany. Jeśli trwa wykonywanie definicji typu dokumentu (Walidacja DTD), ta właściwość zwraca `null`wartość.  
  
 `XmlSchemaDatatype`jest zwracany, jeśli bieżący element lub atrybut, jest typem prostym, który może określać specjalne ograniczenia walidacji dla typów prostych, takich jak min i max.  
  
 `XmlSchemaSimpleType`jest zwracany, jeśli bieżący element lub atrybut jest zdefiniowany przez użytkownika simpleType.  
  
 `XmlSchemaComplexType`jest zwracany, jeśli bieżący element jest typem complexType zdefiniowanym przez użytkownika. Ten typ nie może być zwracany przez atrybuty.  
  
> [!NOTE]
>  Jeśli <xref:System.Xml.XmlValidatingReader.ValidationType%2A> ustawiono wartość ValidationType. None, nie podano informacji o typie danych z schematów lub elementów DTD.  
  
> [!CAUTION]
>  Po wywołaniu <xref:System.Xml.XmlValidatingReader.Close%2A>, SchemaType zwróci wartość null.  
  
   
  
## Examples  
 Poniższy przykład wyświetla informacje o typie dla każdego elementu w dokumencie XML.  
  
 [!code-cpp[XmlValidatingReader.SchemaType#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlValidatingReader.SchemaType/CPP/schematype.cpp#1)]
 [!code-csharp[XmlValidatingReader.SchemaType#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlValidatingReader.SchemaType/CS/schematype.cs#1)]
 [!code-vb[XmlValidatingReader.SchemaType#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlValidatingReader.SchemaType/VB/schematype.vb#1)]  
  
 W przykładzie są stosowane następujące pliki wejściowe.  
  
 `booksSchema.xml`  
  
 [!code-xml[XmlValidatingReader.SchemaType#2](~/samples/snippets/xml/VS_Snippets_Data/XmlValidatingReader.SchemaType/XML/booksschema.xml#2)]  
  
 `books.xsd`  
  
 [!code-xml[XmlValidatingReader.SchemaType#3](~/samples/snippets/xml/VS_Snippets_Data/XmlValidatingReader.SchemaType/XML/books.xsd#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="Settings">
      <MemberSignature Language="C#" Value="public override System.Xml.XmlReaderSettings Settings { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlReaderSettings Settings" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.Settings" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Settings As XmlReaderSettings" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Xml::XmlReaderSettings ^ Settings { System::Xml::XmlReaderSettings ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Settings : System.Xml.XmlReaderSettings" Usage="System.Xml.XmlValidatingReader.Settings" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReaderSettings</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera obiekt, który został użyty do utworzenia tego <see cref="T:System.Xml.XmlValidatingReader" /> wystąpienia. <see cref="T:System.Xml.XmlReaderSettings" /></summary>
        <value><see langword="null" />Ponieważ <see cref="T:System.Xml.XmlValidatingReader" /> obiekty nie są tworzone <see cref="T:System.Xml.XmlReaderSettings" /> przy użyciu klasy i <see cref="Overload:System.Xml.XmlReader.Create" /> metody.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[

## Remarks  

> [!NOTE]
> <xref:System.Xml.XmlValidatingReader> Klasa jest przestarzała w .NET Framework w wersji 2,0. Można utworzyć wystąpienie walidacji <xref:System.Xml.XmlReader> przy <xref:System.Xml.XmlReaderSettings> użyciu klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz [walidacja danych XML za pomocą elementu XmlReader](https://docs.microsoft.com/previous-versions/dotnet/netframework-4.0/hdf992b8(v=vs.100)).

]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Xml.IXmlLineInfo.HasLineInfo">
      <MemberSignature Language="C#" Value="bool IXmlLineInfo.HasLineInfo ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Xml.IXmlLineInfo.HasLineInfo() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlValidatingReader.System#Xml#IXmlLineInfo#HasLineInfo" />
      <MemberSignature Language="VB.NET" Value="Function HasLineInfo () As Boolean Implements IXmlLineInfo.HasLineInfo" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Xml.IXmlLineInfo.HasLineInfo() = System::Xml::IXmlLineInfo::HasLineInfo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.IXmlLineInfo.HasLineInfo</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pobiera wartość wskazującą, czy Klasa może zwracać informacje o wierszu.</summary>
        <returns><see langword="true" />Jeśli <see cref="P:System.Xml.IXmlLineInfo.LineNumber" /> i <see cref="P:System.Xml.IXmlLineInfo.LinePosition" /> mogą<see langword="false" />być dostarczone; w przeciwnym razie.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Xml.IXmlNamespaceResolver.GetNamespacesInScope">
      <MemberSignature Language="C#" Value="System.Collections.Generic.IDictionary&lt;string,string&gt; IXmlNamespaceResolver.GetNamespacesInScope (System.Xml.XmlNamespaceScope scope);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.Generic.IDictionary`2&lt;string, string&gt; System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(valuetype System.Xml.XmlNamespaceScope scope) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlValidatingReader.System#Xml#IXmlNamespaceResolver#GetNamespacesInScope(System.Xml.XmlNamespaceScope)" />
      <MemberSignature Language="VB.NET" Value="Function GetNamespacesInScope (scope As XmlNamespaceScope) As IDictionary(Of String, String) Implements IXmlNamespaceResolver.GetNamespacesInScope" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::Generic::IDictionary&lt;System::String ^, System::String ^&gt; ^ System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System::Xml::XmlNamespaceScope scope) = System::Xml::IXmlNamespaceResolver::GetNamespacesInScope;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System.Xml.XmlNamespaceScope)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IDictionary&lt;System.String,System.String&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scope" Type="System.Xml.XmlNamespaceScope" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="scope"><see cref="T:System.Xml.XmlNamespaceScope" /> Obiekt, który identyfikuje zakres czytnika.</param>
        <summary>Aby uzyskać opis tego elementu członkowskiego, <see cref="M:System.Xml.IXmlNamespaceResolver.GetNamespacesInScope(System.Xml.XmlNamespaceScope)" />Zobacz.</summary>
        <returns>Obiekt T:System.Collections.IDictionary, który identyfikuje przestrzenie nazw w zakresie.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Może być używana tylko wtedy, <xref:System.Xml.XmlValidatingReader> gdy wystąpienie jest rzutowane <xref:System.Xml.IXmlNamespaceResolver> do interfejsu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Xml.IXmlNamespaceResolver.LookupNamespace">
      <MemberSignature Language="C#" Value="string IXmlNamespaceResolver.LookupNamespace (string prefix);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance string System.Xml.IXmlNamespaceResolver.LookupNamespace(string prefix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlValidatingReader.System#Xml#IXmlNamespaceResolver#LookupNamespace(System.String)" />
      <MemberSignature Language="VB.NET" Value="Function LookupNamespace (prefix As String) As String Implements IXmlNamespaceResolver.LookupNamespace" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::String ^ System.Xml.IXmlNamespaceResolver.LookupNamespace(System::String ^ prefix) = System::Xml::IXmlNamespaceResolver::LookupNamespace;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="prefix" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="prefix">Prefiks przestrzeni nazw.</param>
        <summary>Aby uzyskać opis tego elementu członkowskiego, <see cref="M:System.Xml.IXmlNamespaceResolver.LookupNamespace(System.String)" />Zobacz.</summary>
        <returns>Wartość ciągu zawierająca identyfikator URI przestrzeni nazw, który jest skojarzony z prefiksem.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Może być używana tylko wtedy, <xref:System.Xml.XmlValidatingReader> gdy wystąpienie jest rzutowane <xref:System.Xml.IXmlNamespaceResolver> do interfejsu.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="System.Xml.IXmlNamespaceResolver.LookupPrefix">
      <MemberSignature Language="C#" Value="string IXmlNamespaceResolver.LookupPrefix (string namespaceName);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance string System.Xml.IXmlNamespaceResolver.LookupPrefix(string namespaceName) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlValidatingReader.System#Xml#IXmlNamespaceResolver#LookupPrefix(System.String)" />
      <MemberSignature Language="VB.NET" Value="Function LookupPrefix (namespaceName As String) As String Implements IXmlNamespaceResolver.LookupPrefix" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::String ^ System.Xml.IXmlNamespaceResolver.LookupPrefix(System::String ^ namespaceName) = System::Xml::IXmlNamespaceResolver::LookupPrefix;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Xml.IXmlNamespaceResolver.LookupPrefix(System.String)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="namespaceName" Type="System.String" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <param name="namespaceName">Przestrzeń nazw skojarzona z prefiksem.</param>
        <summary>Aby uzyskać opis tego elementu członkowskiego, <see cref="M:System.Xml.IXmlNamespaceResolver.LookupPrefix(System.String)" />Zobacz.</summary>
        <returns>Wartość ciągu, która zawiera prefiks przestrzeni nazw, który jest skojarzony z <paramref name="namespaceName" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Może być używana tylko wtedy, <xref:System.Xml.XmlValidatingReader> gdy wystąpienie jest rzutowane <xref:System.Xml.IXmlNamespaceResolver> do interfejsu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidationEventHandler">
      <MemberSignature Language="C#" Value="public event System.Xml.Schema.ValidationEventHandler ValidationEventHandler;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Xml.Schema.ValidationEventHandler ValidationEventHandler" />
      <MemberSignature Language="DocId" Value="E:System.Xml.XmlValidatingReader.ValidationEventHandler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Xml::Schema::ValidationEventHandler ^ ValidationEventHandler;" />
      <MemberSignature Language="F#" Value="member this.ValidationEventHandler : System.Xml.Schema.ValidationEventHandler " Usage="member this.ValidationEventHandler : System.Xml.Schema.ValidationEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.ValidationEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ustawia procedurę obsługi zdarzeń do uzyskiwania informacji o definicji typu dokumentu (DTD), schemacie danych XML (XDR) i błędach walidacji schematu języka definicji schematu XML (XSD).</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Klasa jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. <xref:System.Xml.XmlValidatingReader> Można utworzyć wystąpienie walidacji <xref:System.Xml.XmlReader> przy <xref:System.Xml.XmlReaderSettings> użyciu klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz sekcję <xref:System.Xml.XmlReader> uwagi na stronie referencyjnej.  
  
 Te zdarzenia występują podczas <xref:System.Xml.XmlValidatingReader.Read%2A> i tylko wtedy, <xref:System.Xml.XmlValidatingReader.ValidationType%2A> gdy jest określony element DTD, XDR, Schema lub autoonly.  
  
 Jeśli nie podano procedury obsługi zdarzeń, <xref:System.Xml.XmlException> zgłaszany jest pierwszy błąd walidacji (ważność jest równa xmlequalitytype. error).  
  
> [!NOTE]
>  Jeśli element zgłasza błąd walidacji, pozostała część modelu zawartości dla tego elementu nie zostanie zweryfikowana, jednak jego elementy podrzędne są weryfikowane. Czytnik raportuje tylko pierwszy błąd dla danego elementu.  
  
 Procedura obsługi wywołania zwrotnego może <xref:System.Xml.Schema.ValidationEventArgs.Severity%2A?displayProperty=nameWithType> użyć właściwości w celu zagwarantowania, że dokument wystąpienia XML zostanie sprawdzony względem schematu. `Severity` Właściwość umożliwia rozróżnienie między błędami walidacji (ważność jest równa wartości xmlequalitytype. error), która wskazuje na błąd krytyczny, a ostrzeżenia dotyczące walidacji (ważność jest równa xmlvalidationtype. Warning) wskazującego brak schematu dostępne są informacje.  
  
   
  
## Examples  
 Poniższy przykład sprawdza poprawność pliku względem schematu XML.  
  
 [!code-cpp[Classic WebData XmlValidatingReader.ValidationEventHandler Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlValidatingReader.ValidationEventHandler Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlValidatingReader.ValidationEventHandler Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlValidatingReader.ValidationEventHandler Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlValidatingReader.ValidationEventHandler Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlValidatingReader.ValidationEventHandler Example/VB/source.vb#1)]  
  
 W przykładzie są stosowane następujące dwa pliki wejściowe:  
  
 `notValidXSD.xml``xsi:schemaLocation` (Atrybut identyfikuje schemat XML dla czytnika).  
  
 [!code-xml[Classic WebData XmlValidatingReader.ValidationEventHandler Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlValidatingReader.ValidationEventHandler Example/XML/source.xml#2)]  
  
 `books.xsd`  
  
 [!code-xml[Classic WebData XmlValidatingReader.ValidationEventHandler Example#3](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlValidatingReader.ValidationEventHandler Example/XML/source.xml#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.Schema.XmlSeverityType" />
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="ValidationType">
      <MemberSignature Language="C#" Value="public System.Xml.ValidationType ValidationType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.ValidationType ValidationType" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.ValidationType" />
      <MemberSignature Language="VB.NET" Value="Public Property ValidationType As ValidationType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::ValidationType ValidationType { System::Xml::ValidationType get(); void set(System::Xml::ValidationType value); };" />
      <MemberSignature Language="F#" Value="member this.ValidationType : System.Xml.ValidationType with get, set" Usage="System.Xml.XmlValidatingReader.ValidationType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.ValidationType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą typ walidacji do wykonania.</summary>
        <value>Jedna z <see cref="T:System.Xml.ValidationType" /> wartości. Jeśli ta właściwość nie jest ustawiona, domyślna wartość to ValidationType. Auto.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Klasa jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. <xref:System.Xml.XmlValidatingReader> Można utworzyć wystąpienie walidacji <xref:System.Xml.XmlReader> przy <xref:System.Xml.XmlReaderSettings> użyciu klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz sekcję <xref:System.Xml.XmlReader> uwagi na stronie referencyjnej.  
  
 Ta właściwość musi być ustawiona przed pierwszym wywołaniem do <xref:System.Xml.XmlValidatingReader.Read%2A>. Ustawienie tej właściwości na wartość ValidationType. None powoduje utworzenie czytnika bez sprawdzania poprawności.  
  
 Jeśli definicje typu dokumentu zewnętrznego (DTD) lub schematy są niezbędne do walidacji, <xref:System.Xml.XmlResolver> jest używana.  
  
   
  
## Examples  
 Poniższy przykład sprawdza poprawność dwóch plików.  
  
 [!code-cpp[Classic WebData XmlValidatingReader.ValidationType Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlValidatingReader.ValidationType Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlValidatingReader.ValidationType Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlValidatingReader.ValidationType Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlValidatingReader.ValidationType Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlValidatingReader.ValidationType Example/VB/source.vb#1)]  
  
 W przykładzie zastosowano cztery następujące pliki wejściowe:  
  
 `notValid.xml`(Prefiks "x-Schema:" identyfikuje schemat danych XML (XDR) dla czytnika.  
  
 [!code-xml[Classic WebData XmlValidatingReader.ValidationType Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlValidatingReader.ValidationType Example/XML/source.xml#2)]  
  
 `schema1.xdr`  
  
 [!code-xml[Classic WebData XmlValidatingReader.ValidationType Example#3](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlValidatingReader.ValidationType Example/XML/source.xml#3)]  
  
 `cdDTD.xml`  
  
 [!code-xml[Classic WebData XmlValidatingReader.ValidationType Example#4](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlValidatingReader.ValidationType Example/XML/source.xml#4)]  
  
 `book1.xml`  
  
 [!code-xml[Classic WebData XmlValidatingReader.ValidationType Example#5](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlValidatingReader.ValidationType Example/XML/source.xml#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Ustawianie właściwości po wywołaniu metody Read.</exception>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public override string Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Value" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.Value" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Value As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Value { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Value : string" Usage="System.Xml.XmlValidatingReader.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość tekstową bieżącego węzła.</summary>
        <value>Zwracana wartość zależy <see cref="P:System.Xml.XmlValidatingReader.NodeType" /> od węzła. Poniższa tabela zawiera listę typów węzłów, które mają wartość zwracaną. Wszystkie inne typy węzłów zwracają ciąg. Empty.  
  
 <list type="table"><listheader><term> Typ węzła 
 </term><description> Wartość 
 </description></listheader><item><term><see langword="Attribute" /></term><description> Wartość atrybutu.  
  
 </description></item><item><term><see langword="CDATA" /></term><description> Zawartość sekcji CDATA.  
  
 </description></item><item><term><see langword="Comment" /></term><description> Zawartość komentarza.  
  
 </description></item><item><term><see langword="DocumentType" /></term><description> Podzestaw wewnętrzny.  
  
 </description></item><item><term><see langword="ProcessingInstruction" /></term><description> Cała zawartość, z wyłączeniem celu.  
  
 </description></item><item><term><see langword="SignificantWhitespace" /></term><description> Odstęp między adiustacją w modelu zawartości mieszanej.  
  
 </description></item><item><term><see langword="Text" /></term><description> Zawartość węzła tekstowego.  
  
 </description></item><item><term><see langword="Whitespace" /></term><description> Odstęp między znakami.  
  
 </description></item><item><term><see langword="XmlDeclaration" /></term><description> Zawartość deklaracji.  
  
 </description></item></list></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Klasa jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. <xref:System.Xml.XmlValidatingReader> Można utworzyć wystąpienie walidacji <xref:System.Xml.XmlReader> przy <xref:System.Xml.XmlReaderSettings> użyciu klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz sekcję <xref:System.Xml.XmlReader> uwagi na stronie referencyjnej.  
  
   
  
## Examples  
 Poniższy przykład odczytuje plik XML i wyświetla każdy węzeł.  
  
 [!code-cpp[Classic WebData XmlValidatingReader.Name Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlValidatingReader.Name Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlValidatingReader.Name Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlValidatingReader.Name Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlValidatingReader.Name Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlValidatingReader.Name Example/VB/source.vb#1)]  
  
 W przykładzie jest użyty plik, `items.xml`, jako dane wejściowe.  
  
 [!code-xml[Classic WebData XmlValidatingReader.Name Example#2](~/samples/snippets/xml/VS_Snippets_Data/Classic WebData XmlValidatingReader.Name Example/XML/source.xml#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="XmlLang">
      <MemberSignature Language="C#" Value="public override string XmlLang { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string XmlLang" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.XmlLang" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property XmlLang As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ XmlLang { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.XmlLang : string" Usage="System.Xml.XmlValidatingReader.XmlLang" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera bieżący <see langword="xml:lang" /> zakres.</summary>
        <value>Bieżący <see langword="xml:lang" /> zakres.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Klasa jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. <xref:System.Xml.XmlValidatingReader> Można utworzyć wystąpienie walidacji <xref:System.Xml.XmlReader> przy <xref:System.Xml.XmlReaderSettings> użyciu klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz sekcję <xref:System.Xml.XmlReader> uwagi na stronie referencyjnej.  
  
 Ta właściwość reprezentuje zakres XML: lang, w którym znajduje się bieżący węzeł. Przykładem jest fragment XML z `xml:lang` ustawionym na USA Angielski w elemencie głównym:  
  
```xml  
<root xml:lang="en-us">   
<name>Fred</name>   
</root>   
```  
  
 Gdy czytnik jest umieszczony na `name` elemencie, można użyć tej właściwości, aby sprawdzić, czy znajduje się w zakresie USA Atrybut `xml:lang` w języku angielskim.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="XmlResolver">
      <MemberSignature Language="C#" Value="public System.Xml.XmlResolver XmlResolver { set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlResolver XmlResolver" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.XmlResolver" />
      <MemberSignature Language="VB.NET" Value="Public Property XmlResolver As XmlResolver" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::XmlResolver ^ XmlResolver {  void set(System::Xml::XmlResolver ^ value); };" />
      <MemberSignature Language="F#" Value="member this.XmlResolver : System.Xml.XmlResolver" Usage="System.Xml.XmlValidatingReader.XmlResolver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlResolver</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Xml.XmlResolver" /> Ustawia używany do rozpoznawania definicji typu dokumentu zewnętrznego (DTD) i odwołań do lokalizacji schematu. <see langword="XmlResolver" /> Jest również używany do obsługi wszelkich elementów import lub include znalezionych w schematach języka definicji schematu XML (XSD).</summary>
        <value><see langword="XmlResolver" /> Do użycia. Jeśli jest ustawiona <see langword="null" />na, zasoby zewnętrzne nie są rozpoznawane.  
  
W wersji 1,1 [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]programu obiekt wywołujący musi być w pełni zaufany, aby <see langword="XmlResolver" />określić.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Klasa jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. <xref:System.Xml.XmlValidatingReader> Można utworzyć wystąpienie walidacji <xref:System.Xml.XmlReader> przy <xref:System.Xml.XmlReaderSettings> użyciu klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz sekcję <xref:System.Xml.XmlReader> uwagi na stronie referencyjnej.  
  
 `XmlResolver` Służy do ładowania elementów DTD, jednostek lub schematów wymaganych do ukończenia procesu walidacji.  
  
 Tę właściwość można ustawić w dowolnym momencie i ma wpływ po następnym <xref:System.Xml.XmlValidatingReader.Read%2A> wywołaniu. Jeśli ta właściwość jest ustawiona na `null`, czytnik założono, że użytkownik nie chce rozpoznawania odwołań zewnętrznych. W takim przypadku czytnik sprawdza tylko walidację zasobów wewnętrznych, jeśli zasób jest obecny.  
  
 W wersji 1,1 programu [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] , jeśli ta właściwość nie jest ustawiona, poziom zaufania aplikacji określa zachowanie domyślne.  
  
 `Fully trusted code:`Czytnik używa ustawienia domyślnego <xref:System.Xml.XmlUrlResolver> bez poświadczeń użytkownika. Jeśli do uzyskania dostępu do zasobu sieciowego jest wymagane uwierzytelnianie, użyj `XmlResolver` właściwości, aby `XmlResolver` określić z wymaganymi poświadczeniami.  
  
 `Semi-trusted code:`Właściwość jest ustawiona na `null`. `XmlResolver` Zasoby zewnętrzne nie zostały rozwiązane.  
  
 Podczas sprawdzania poprawności przy użyciu schematów można uniknąć kosztownych procesów ładowania, dostarczając <xref:System.Xml.Schema.XmlSchemaCollection> <xref:System.Xml.XmlValidatingReader.Schemas%2A> Właściwość using.  
  
   
  
## Examples  
 Poniższy przykład używa `XmlResolver` właściwości, aby określić poświadczenia niezbędne do uzyskania dostępu do pliku DTD w sieci.  
  
 [!code-cpp[XmlValidatingReader.XmlResolver#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlValidatingReader.XmlResolver/CPP/vrdr_resolver.cpp#1)]
 [!code-csharp[XmlValidatingReader.XmlResolver#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlValidatingReader.XmlResolver/CS/vrdr_resolver.cs#1)]
 [!code-vb[XmlValidatingReader.XmlResolver#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlValidatingReader.XmlResolver/VB/vrdr_resolver.vb#1)]  
  
 W przykładzie są wykorzystywane następujące pliki jako dane wejściowe.  
  
 `book5.xml`  
  
 [!code-xml[XmlValidatingReader.XmlResolver#2](~/samples/snippets/xml/VS_Snippets_Data/XmlValidatingReader.XmlResolver/XML/book5.xml#2)]  
  
 `books.dtd`  
  
 [!code-xml[XmlValidatingReader.XmlResolver#3](~/samples/snippets/xml/VS_Snippets_Data/XmlValidatingReader.XmlResolver/XML/books.dtd#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Xml.XmlUrlResolver.Credentials" />
        <altmember cref="T:System.Net.CredentialCache" />
        <altmember cref="T:System.Net.NetworkCredential" />
        <altmember cref="T:System.Xml.XmlSecureResolver" />
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
    <Member MemberName="XmlSpace">
      <MemberSignature Language="C#" Value="public override System.Xml.XmlSpace XmlSpace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.XmlSpace XmlSpace" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlValidatingReader.XmlSpace" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property XmlSpace As XmlSpace" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Xml::XmlSpace XmlSpace { System::Xml::XmlSpace get(); };" />
      <MemberSignature Language="F#" Value="member this.XmlSpace : System.Xml.XmlSpace" Usage="System.Xml.XmlValidatingReader.XmlSpace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlSpace</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera bieżący <see langword="xml:space" /> zakres.</summary>
        <value>Jedna z <see cref="T:System.Xml.XmlSpace" /> wartości. Jeśli zakres <see langword="xml:space" /> nie istnieje, ta właściwość <see langword="XmlSpace.None" />domyślnie przyjmuje wartość.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Klasa jest przestarzała w [!INCLUDE[dnprdnext](~/includes/dnprdnext-md.md)]. <xref:System.Xml.XmlValidatingReader> Można utworzyć wystąpienie walidacji <xref:System.Xml.XmlReader> przy <xref:System.Xml.XmlReaderSettings> użyciu klasy i <xref:System.Xml.XmlReader.Create%2A> metody. Aby uzyskać więcej informacji, zobacz sekcję <xref:System.Xml.XmlReader> uwagi na stronie referencyjnej.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
      </Docs>
    </Member>
  </Members>
</Type>
