<Type Name="XmlReaderSettings" FullName="System.Xml.XmlReaderSettings">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c213148f0dbb23e978f0919a5769cbf74113221f" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36434257" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class XmlReaderSettings" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit XmlReaderSettings extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xml.XmlReaderSettings" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class XmlReaderSettings" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlReaderSettings sealed" />
  <TypeSignature Language="F#" Value="type XmlReaderSettings = class" />
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Określa zestaw funkcji do obsługi na <see cref="T:System.Xml.XmlReader" /> obiekt utworzony przez <see cref="Overload:System.Xml.XmlReader.Create" /> metody.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Możesz użyć <xref:System.Xml.XmlReader.Create%2A> metodę, aby uzyskać <xref:System.Xml.XmlReader> wystąpień. Ta metoda używa <xref:System.Xml.XmlReaderSettings> klasę, aby określić, które funkcje do zaimplementowania w <xref:System.Xml.XmlReader> obiekt, tworzy go.  
  
 Zobacz sekcje uwag <xref:System.Xml.XmlReader> i <xref:System.Xml.XmlReader.Create%2A> odwołania strony do informacji o ustawieniach na potrzeby sprawdzania zgodności, weryfikacji i inne typowe scenariusze. Zobacz <xref:System.Xml.XmlReaderSettings.%23ctor> konstruktora, aby uzyskać listę ustawień domyślnych.  
  
## <a name="security-considerations"></a>Zagadnienia dotyczące bezpieczeństwa  
 Należy rozważyć przy użyciu <xref:System.Xml.XmlReaderSettings> klasy.  
  
-   <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema> i <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation> flagi weryfikacji <xref:System.Xml.XmlReaderSettings> obiektu nie są wybrane domyślnie. Gdy te flagi są ustawiane, <xref:System.Xml.XmlReaderSettings.XmlResolver%2A> z <xref:System.Xml.XmlReaderSettings> obiekt jest używany do rozwiązania lokalizacji schematu w dokumencie wystąpienia w <xref:System.Xml.XmlReader>. Jeśli <xref:System.Xml.XmlReaderSettings.XmlResolver%2A> obiekt jest `null`, lokalizacji schematu nie są rozpoznawane nawet wtedy, gdy <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema> i <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation> ustawiono flagi weryfikacji.  
  
-   Dodane podczas weryfikacji schematów Dodawanie nowych typów i zmienić wynik weryfikacji dokumentu sprawdzania poprawności. W związku z tym schematy zewnętrzne mają zostać rozwiązane tylko z zaufanych źródeł.  
  
-   Komunikaty o błędach weryfikacji może narazić informacji poufnych modelu zawartości. Błąd weryfikacji i komunikaty ostrzegawcze są obsługiwane przy użyciu <xref:System.Xml.Schema.ValidationEventHandler> delegowanie i są widoczne jako <xref:System.Xml.Schema.XmlSchemaValidationException> jeśli bez obsługi zdarzeń został dostarczony do <xref:System.Xml.XmlReaderSettings> obiektu (nie powodują ostrzeżenia weryfikacji <xref:System.Xml.Schema.XmlSchemaValidationException> zostanie wygenerowany). Te informacje modelu zawartości nie powinny zostać ujawnione w scenariuszach niezaufanych. Sprawdzanie poprawności komunikaty ostrzegawcze są domyślnie pomijane i mogą być zgłaszane przez ustawienie <xref:System.Xml.Schema.XmlSchemaValidationFlags.ReportValidationWarnings> flagi.  
  
-   <xref:System.Xml.Schema.XmlSchemaException.SourceUri%2A> Właściwość <xref:System.Xml.Schema.XmlSchemaValidationException> zwraca identyfikator URI ścieżkę do pliku schematu, który spowodował wyjątek. <xref:System.Xml.Schema.XmlSchemaException.SourceUri%2A> Właściwości nie powinny zostać ujawnione w scenariuszach niezaufanych.  
  
-   Wyłączanie <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessIdentityConstraints> flagi (domyślnie włączony) zaleca się podczas sprawdzania poprawności, niezaufanej, duża XML dokumentów w scenariuszach wysokiej dostępności względem schematu z ograniczeniami tożsamości przez dużą część dokumentu.  
  
-   <xref:System.Xml.XmlReaderSettings> obiekty mogą zawierać poufne informacje, takie jak poświadczenia użytkownika. Należy zachować ostrożność podczas buforowania <xref:System.Xml.XmlReaderSettings> obiektów, lub podczas przekazywania <xref:System.Xml.XmlReaderSettings> obiektu z jednego składnika do innego.  
  
-   Przetwarzanie elementu DTD jest domyślnie wyłączona. Włączyć przetwarzanie elementu DTD, należy mieć świadomość, w tym elementów DTD ze źródeł niezaufanych i możliwe "odmowa usługi". Użyj <xref:System.Xml.XmlSecureResolver> do ograniczania zasobów który <xref:System.Xml.XmlReader> może uzyskać dostęp.  
  
-   Nie akceptuj pomocnicze składniki, takie jak <xref:System.Xml.NameTable>, <xref:System.Xml.XmlNamespaceManager>, i <xref:System.Xml.XmlResolver> obiektów z niezaufanego źródła.  
  
-   Użycie pamięci przez aplikację, która używa <xref:System.Xml.XmlReader> może mieć korelacji rozmiar przeanalizowany dokumentu XML. Jeden formularz odmowy usługi jest po bardzo duże dokumentów XML są przesyłane do przeanalizowania. Można ograniczyć rozmiar dokumentu, który może zostać przeanalizowany przez ustawienie <xref:System.Xml.XmlReaderSettings.MaxCharactersInDocument%2A> właściwości, a następnie Ogranicz liczbę znaków, które są wynikiem rozwijanie jednostek przez ustawienie <xref:System.Xml.XmlReaderSettings.MaxCharactersFromEntities%2A> właściwości.  
  
   
  
## Examples  
 Poniższy przykład tworzy <xref:System.Xml.XmlReader> używającą <xref:System.Xml.XmlUrlResolver> niezbędne poświadczenia.  
  
 [!code-csharp[XmlReader.Create#2](~/samples/snippets/csharp/VS_Snippets_Data/XmlReader.Create/CS/XmlReader_Create.cs#2)]
 [!code-vb[XmlReader.Create#2](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReader.Create/VB/XmlReader_Create.vb#2)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Xml.XmlReaderSettings" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlReaderSettings ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReaderSettings.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlReaderSettings();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Xml.XmlReaderSettings" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W poniższej tabeli przedstawiono początkowe wartości właściwości dla wystąpienia <xref:System.Xml.XmlReaderSettings>.  
  
|Właściwość|Wartość początkowa|  
|--------------|-------------------|  
|<xref:System.Xml.XmlReaderSettings.Async%2A>|`false`.|  
|<xref:System.Xml.XmlReaderSettings.CheckCharacters%2A>|`true`.|  
|<xref:System.Xml.XmlReaderSettings.ConformanceLevel%2A>|<xref:System.Xml.ConformanceLevel.Document>.|  
|<xref:System.Xml.XmlReaderSettings.IgnoreComments%2A>|`false`.|  
|<xref:System.Xml.XmlReaderSettings.IgnoreProcessingInstructions%2A>|`false`.|  
|<xref:System.Xml.XmlReaderSettings.IgnoreWhitespace%2A>|`false`.|  
|<xref:System.Xml.XmlReaderSettings.LineNumberOffset%2A>|0.|  
|<xref:System.Xml.XmlReaderSettings.LinePositionOffset%2A>|0.|  
|<xref:System.Xml.XmlReaderSettings.MaxCharactersFromEntities%2A>|0 (nie ma żadnego limitu liczby znaków, wynikających z rozwijanie jednostek).|  
|<xref:System.Xml.XmlReaderSettings.MaxCharactersInDocument%2A>|0 (nie ma żadnego limitu rozmiaru dokumentu w formacie XML).|  
|<xref:System.Xml.XmlReaderSettings.NameTable%2A>|`null`.|  
|<xref:System.Xml.XmlTextReader.DtdProcessing%2A>|<xref:System.Xml.DtdProcessing.Prohibit>|  
|<xref:System.Xml.XmlReaderSettings.ProhibitDtd%2A>|`true`. Ta właściwość jest przestarzała. Zamiast nich należy używać słów kluczowych <xref:System.Xml.XmlTextReader.DtdProcessing%2A>. Jeśli ma wartość <xref:System.Xml.XmlReaderSettings.ProhibitDtd%2A> na wartość domyślną `true` ustawić <xref:System.Xml.XmlTextReader.DtdProcessing%2A> do `Prohibit`. Jeśli ma wartość <xref:System.Xml.XmlReaderSettings.ProhibitDtd%2A> do `false` ustawić <xref:System.Xml.XmlTextReader.DtdProcessing%2A> do `Parse`.|  
|<xref:System.Xml.XmlReaderSettings.Schemas%2A>|Pusta <xref:System.Xml.Schema.XmlSchemaSet> obiektu.|  
|<xref:System.Xml.XmlReaderSettings.ValidationFlags%2A>|<xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessIdentityConstraints>.|  
|<xref:System.Xml.XmlReaderSettings.ValidationType%2A>|<xref:System.Xml.ValidationType.None>.|  
|<xref:System.Xml.XmlReaderSettings.XmlResolver%2A>|Nowy <xref:System.Xml.XmlUrlResolver> obiektu.|  
  
   
  
## Examples  
 W poniższym przykładzie tworzony obiekt ustawień używany do utworzenia czytnika wyodrębniania instrukcji przetwarzania, komentarze i nieważny biały znak.  
  
 [!code-cpp[XmlReaderSettings.cctor#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlReaderSettings.cctor/CPP/XmlReaderSettings.cctor.cpp#1)]
 [!code-csharp[XmlReaderSettings.cctor#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderSettings.cctor/CS/factory_rdr_cctor2.cs#1)]
 [!code-vb[XmlReaderSettings.cctor#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderSettings.cctor/VB/factory_rdr_cctor2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlReaderSettings (System.Xml.XmlResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Xml.XmlResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReaderSettings.#ctor(System.Xml.XmlResolver)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (resolver As XmlResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlReaderSettings(System::Xml::XmlResolver ^ resolver);" />
      <MemberSignature Language="F#" Value="new System.Xml.XmlReaderSettings : System.Xml.XmlResolver -&gt; System.Xml.XmlReaderSettings" Usage="new System.Xml.XmlReaderSettings resolver" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Obsolete("This API supports the .NET Framework infrastructure and is not intended to be used directly from your code.", true)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="resolver" Type="System.Xml.XmlResolver" />
      </Parameters>
      <Docs>
        <param name="resolver">Program rozpoznawania nazw XML.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Xml.XmlReaderSettings" /> klasy.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Async">
      <MemberSignature Language="C#" Value="public bool Async { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Async" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.Async" />
      <MemberSignature Language="VB.NET" Value="Public Property Async As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Async { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Async : bool with get, set" Usage="System.Xml.XmlReaderSettings.Async" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia, czy asynchroniczne <see cref="T:System.Xml.XmlReader" /> metody mogą być używane w przypadku określonego <see cref="T:System.Xml.XmlReader" /> wystąpienia.</summary>
        <value>
          <see langword="true" /> Jeśli asynchronicznej metody mogą być używane; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Musisz ustawić tę wartość na `true` podczas tworzenia nowego <xref:System.Xml.XmlReader> wystąpienia, jeśli chcesz użyć asynchroniczne <xref:System.Xml.XmlReader> metody w tym wystąpieniu. Po <xref:System.Xml.XmlReader> jest tworzone wystąpienie, <xref:System.Xml.XmlReaderSettings.Async%2A> właściwość jest tylko do odczytu. Wartość domyślna tej właściwości to `false`.  
  
 Ta flaga jest ignorowana przez <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> przeciążenia. Oznacza to, że w przypadku utworzenia nowego <xref:System.Xml.XmlReader> oparte na istniejącym <xref:System.Xml.XmlReader>, zachowanie async zależy od danych wejściowych <xref:System.Xml.XmlReader>, i nie można użyć <xref:System.Xml.XmlReaderSettings.Async%2A> flagę w celu zmiany zachowania asynchronicznego.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckCharacters">
      <MemberSignature Language="C#" Value="public bool CheckCharacters { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CheckCharacters" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.CheckCharacters" />
      <MemberSignature Language="VB.NET" Value="Public Property CheckCharacters As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CheckCharacters { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CheckCharacters : bool with get, set" Usage="System.Xml.XmlReaderSettings.CheckCharacters" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy znak sprawdzania.</summary>
        <value>
          <see langword="true" /> Aby znak sprawdzanie; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="true" />.  
  
 <block subset="none" type="note"><para> Jeśli <see cref="T:System.Xml.XmlReader" /> jest przetwarzanie danych tekstowych, zawsze sprawdza nazw XML i zawartości tekstowej są prawidłowe, bez względu na ustawienie właściwości. Ustawienie <see cref="P:System.Xml.XmlReaderSettings.CheckCharacters" /> do <see langword="false" /> wyłącza znak sprawdzanie odwołania do jednostki znaku.  </para></block></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Właściwość ta nakazuje modułu odczytującego XML, aby sprawdzać znaki w danych XML jest czytania i zgłosić <xref:System.Xml.XmlException> Jeśli znaków są poza zakresem dozwolonych znaków XML. Kiedy włączone jest sprawdzanie znak, są zapewnić następujące czynności:  
  
-   Znaki są w zakresie prawidłowe znaki XML, zgodnie z definicją w [2,2 znaków](https://www.w3.org/TR/2006/REC-xml-20060816/#charsets) sekcji zalecenia W3C XML 1.0.  
  
-   Wszystkie nazwy XML są prawidłowe, zgodnie z definicją w [2.3 typowe konstrukcje składni](https://www.w3.org/TR/2006/REC-xml-20060816/#NT-Name) sekcji zalecenia W3C XML 1.0.  
  
 Jeśli ta właściwość jest skonfigurowana `true`, co jest ustawieniem domyślnym <xref:System.Xml.XmlException> jest zgłaszany wyjątek, jeśli plik XML zawiera niedozwolone znaki lub nieprawidłowych nazw XML (na przykład nazwę elementu rozpoczyna się od numeru).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public System.Xml.XmlReaderSettings Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Xml.XmlReaderSettings Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReaderSettings.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As XmlReaderSettings" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Xml::XmlReaderSettings ^ Clone();" />
      <MemberSignature Language="F#" Value="member this.Clone : unit -&gt; System.Xml.XmlReaderSettings" Usage="xmlReaderSettings.Clone " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlReaderSettings</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Tworzy kopię <see cref="T:System.Xml.XmlReaderSettings" /> wystąpienia.</summary>
        <returns>Sklonowany <see cref="T:System.Xml.XmlReaderSettings" /> obiektu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sklonowany <xref:System.Xml.XmlReaderSettings> obiektu może być modyfikowana bez wpływu na ustawienia do oryginalnego obiektu.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CloseInput">
      <MemberSignature Language="C#" Value="public bool CloseInput { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CloseInput" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.CloseInput" />
      <MemberSignature Language="VB.NET" Value="Public Property CloseInput As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CloseInput { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CloseInput : bool with get, set" Usage="System.Xml.XmlReaderSettings.CloseInput" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy podstawowa strumienia lub <see cref="T:System.IO.TextReader" /> powinien zostać zamknięty, gdy proces czytający jest zamykany.</summary>
        <value>
          <see langword="true" /> Aby zamknąć zasadniczy strumień lub <see cref="T:System.IO.TextReader" /> , gdy czytnik jest zamknięty, a w przeciwnym <see langword="false" />. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To ustawienie jest używane, gdy strumień lub <xref:System.IO.TextReader> jest przekazywana do <xref:System.Xml.XmlReader.Create%2A> metody. Jeśli strumienia jest tworzony przez czytnik dla własnej przetwarzania, takie jak podczas tworzenia czytnika z identyfikatora URI lub po otwarciu dokumentu zewnętrznego definicji typu, zawsze jest zamknięta, gdy czytnik jest zamknięty.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ConformanceLevel">
      <MemberSignature Language="C#" Value="public System.Xml.ConformanceLevel ConformanceLevel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.ConformanceLevel ConformanceLevel" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.ConformanceLevel" />
      <MemberSignature Language="VB.NET" Value="Public Property ConformanceLevel As ConformanceLevel" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::ConformanceLevel ConformanceLevel { System::Xml::ConformanceLevel get(); void set(System::Xml::ConformanceLevel value); };" />
      <MemberSignature Language="F#" Value="member this.ConformanceLevel : System.Xml.ConformanceLevel with get, set" Usage="System.Xml.XmlReaderSettings.ConformanceLevel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.ConformanceLevel</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia poziom zgodności którego <see cref="T:System.Xml.XmlReader" /> będą zgodne.</summary>
        <value>Jedna z wartości wyliczenia, które określa poziom zgodności, który będzie wymuszać modułu odczytującego XML. Wartość domyślna to <see cref="F:System.Xml.ConformanceLevel.Document" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Czytniki XML, które są tworzone przez <xref:System.Xml.XmlReader.Create%2A> metody spełniać następujące wymagania zgodności przez domyślne:  
  
-   Nowe wiersze, a wartość atrybutu są znormalizowany zgodnie z W3C [XML 1.0 zalecenie](https://www.w3.org/TR/2006/REC-xml-20060816/).  
  
-   Automatycznie zostaną rozwinięte wszystkie jednostki.  
  
-   Domyślne atrybuty zadeklarowany w definicji typu dokumentu są dodawane zawsze, nawet wtedy, gdy czytnik nie można zweryfikować.  
  
-   Deklaracja XML prefiksu mapowany na poprawną przestrzeń nazw identyfikatora XML URI jest dozwolona.  
  
-   W jednej nazwy notacji `NotationType` atrybutu deklaracji i `NmTokens` w jednej `Enumeration` deklaracji atrybutu są unikatowe.  
  
 Można użyć <xref:System.Xml.XmlReaderSettings.ConformanceLevel%2A> właściwość do sprawdzenia i gwarantuje, że strumień odczytu spełnia zasady poprawnie sformułowany dokument XML 1.0 lub fragment dokumentu. Jeśli dane nie są zgodne, <xref:System.Xml.XmlException> wyjątku. Wartość domyślna to <xref:System.Xml.ConformanceLevel.Document?displayProperty=nameWithType> (zgodność na poziomie dokumentu).  
  
 Zgodność trzy poziomy są następujące:  
  
|Ustawienie|Opis|  
|-------------|-----------------|  
|<xref:System.Xml.ConformanceLevel.Document>|Zapewnia, że dane XML jest zgodny z regułami dotyczącymi poprawnie sformułowany dokument XML 1.0. Ten poziom kontroli gwarantuje, że dowolnego procesora, jaką może wykorzystać strumień odczytu jako [poprawnie sformułowany dokument XML 1.0](https://www.w3.org/TR/2006/REC-xml-20060816/#sec-well-formed).<br /><br /> Czytnik sprawdza występowanie następujących czynności:<br /><br /> -Element najwyższego poziomu nie mogą mieć wszystkie węzły inne niż deklaracja XML, definicja typu dokumentu (DTD), element, komentarza, biały znak lub instrukcji przetwarzania.<br />-Dane XML musi mieć dokładnie jeden element najwyższego poziomu węzła.|  
|<xref:System.Xml.ConformanceLevel.Fragment>|Zapewnia, że danych XML jest zgodny z regułami dotyczącymi poprawnie sformułowanym fragmentem dokumentu XML 1.0.<br /><br /> To ustawienie akceptuje dane XML z wielu elementów głównych lub węzły tekstowe na najwyższym poziomie. Ten poziom kontroli gwarantuje, że dowolnego procesora, jaką może wykorzystać strumień odczytu jako [zewnętrzne przeanalizowana jednostka](https://www.w3.org/TR/2006/REC-xml-20060816/#wf-entities).|  
|<xref:System.Xml.ConformanceLevel.Auto>|Określa, czy czytnik należy określić poziom sprawdzanie zgodności na podstawie przychodzących danych.<br /><br /> Sprawdzanie zgodności dokumentu została zastosowana, jeśli dane XML zawiera informacje o definicji DTD.<br /><br /> Fragment zgodność sprawdzanie stosowany w przypadku, gdy dane XML zawiera jedną z następujących czynności:<br /><br /> — Tekst, CDATA lub jednostki węzeł odniesienia na poziomie głównym.<br />-Więcej niż jeden element na poziomie głównym.<br />-Brak elementu na poziomie głównym.<br /><br /> <xref:System.Xml.XmlException> Jest generowany, jeśli występuje konflikt, takie jak kiedy jest węzłem tekstowym i DTD na poziomie głównym.<br /><br /> To ustawienie może być używane w scenariuszy opakowania podczas <xref:System.Xml.XmlReader.Create%2A> metoda jest używana do dodawania dodatkowych funkcji do istniejącego <xref:System.Xml.XmlReader>. W takim przypadku <xref:System.Xml.ConformanceLevel.Document?displayProperty=nameWithType> nie dodaje żadnych nowych sprawdzania zgodności. Sprawdzanie zgodności pozostało do <xref:System.Xml.XmlReader> które opakowane.|  
  
> [!NOTE]
>  Zalecenie XML 1.0 wymaga zgodności na poziomie dokumentu, gdy obecny jest DTD. W związku z tym gdy czytnik jest skonfigurowany do obsługi <xref:System.Xml.ConformanceLevel.Fragment?displayProperty=nameWithType>, ale w danych XML znajduje się definicja typu dokumentu (DTD), <xref:System.Xml.XmlException> jest generowany.  
  
 Oto jak czytnik obsługuje naruszeń zgodności określonego w zależności od ustawienia <xref:System.Xml.XmlReaderSettings.ConformanceLevel%2A> właściwości:  
  
|Warunek|<xref:System.Xml.ConformanceLevel.Document>|<xref:System.Xml.ConformanceLevel.Fragment>|<xref:System.Xml.ConformanceLevel.Auto>|  
|---------------|---------------------------------------------------------------------------------------------------------------------------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------------|  
|Tekst lub wartość typu pojawi się na najwyższym poziomie.|<xref:System.Xml.XmlException> jest generowany.|Nie uznawane za naruszenia dla tego ustawienia.|Nie uznawane za naruszenia dla tego ustawienia.|  
|Wiele elementów lub Brak elementu zostaną wyświetlone na najwyższym poziomie.|<xref:System.Xml.XmlException> jest generowany.|Nie uznawane za naruszenia dla tego ustawienia.|Nie uznawane za naruszenia dla tego ustawienia.|  
|Element najwyższego poziomu jest biały znak.|Nie uznawane za naruszenia dla tego ustawienia.|Nie uznawane za naruszenia dla tego ustawienia.|Nie uznawane za naruszenia dla tego ustawienia.|  
|Element najwyższego poziomu jest atrybutem (rozpoznany jako węzeł tekstowy).|<xref:System.Xml.XmlException> jest generowany.|Nie uznawane za naruszenia dla tego ustawienia.|Nie uznawane za naruszenia dla tego ustawienia.|  
|Wiele, ciągłe tekstu znajdują się węzły.|Nie uznawane za naruszenia dla tego ustawienia.|Nie uznawane za naruszenia dla tego ustawienia.|Nie uznawane za naruszenia dla tego ustawienia.|  
|Tego samego prefiksu przestrzeni nazw jest zadeklarowany w tym samym zakresie lokalnym.|<xref:System.Xml.XmlException> jest generowany.|<xref:System.Xml.XmlException> jest generowany.|<xref:System.Xml.XmlException> jest generowany.|  
|Przestrzeń nazw w element lub atrybut nie istnieje w zakresie lokalnym.|<xref:System.Xml.XmlException> jest generowany.|<xref:System.Xml.XmlException> jest generowany.|<xref:System.Xml.XmlException> jest generowany.|  
|Dane zawierają niezgodność nazw dla prefiksu.|<xref:System.Xml.XmlException> jest generowany.|<xref:System.Xml.XmlException> jest generowany.|<xref:System.Xml.XmlException> jest generowany.|  
|`xml:space` atrybut zawiera nieprawidłową wartość.|<xref:System.Xml.XmlException> jest generowany.|<xref:System.Xml.XmlException> jest generowany.|<xref:System.Xml.XmlException> jest generowany.|  
|Napotkano nieprawidłową nazwę.|<xref:System.Xml.XmlException> jest generowany.|<xref:System.Xml.XmlException> jest generowany.|<xref:System.Xml.XmlException> jest generowany.|  
|`xml` Prefiks nie jest dopasowany do http://www.w3.org/XML/1998/namespace identyfikatora URI.|<xref:System.Xml.XmlException> jest generowany.|<xref:System.Xml.XmlException> jest generowany.|<xref:System.Xml.XmlException> jest generowany.|  
  
   
  
## Examples  
 Poniższy przykład tworzy <xref:System.Xml.XmlReader> obiektu odczytującego XML fragment.  
  
 [!code-csharp[XmlReader.Create#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReader.Create/CS/XmlReader_Create.cs#1)]
 [!code-vb[XmlReader.Create#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReader.Create/VB/XmlReader_Create.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="DtdProcessing">
      <MemberSignature Language="C#" Value="public System.Xml.DtdProcessing DtdProcessing { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.DtdProcessing DtdProcessing" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.DtdProcessing" />
      <MemberSignature Language="VB.NET" Value="Public Property DtdProcessing As DtdProcessing" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::DtdProcessing DtdProcessing { System::Xml::DtdProcessing get(); void set(System::Xml::DtdProcessing value); };" />
      <MemberSignature Language="F#" Value="member this.DtdProcessing : System.Xml.DtdProcessing with get, set" Usage="System.Xml.XmlReaderSettings.DtdProcessing" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.DtdProcessing</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość określającą przetwarzania elementów DTD.</summary>
        <value>Jedna z wartości wyliczenia, które określa przetwarzania elementów DTD. Wartość domyślna to <see cref="F:System.Xml.DtdProcessing.Prohibit" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Walidacja definicji (DTD) typu dokumentu jest implementowane za pomocą ograniczeń ważności zdefiniowanych w W3C [języka XML (Extensible Markup) 1.0 (czwarty edition) zalecenie](https://www.w3.org/TR/2006/REC-xml-20060816/). Definicje DTD umożliwia posiadanie gramatyki opisano strukturę i składni zgodne dokumentów XML; Określa zawartość i wartości dozwolony dla dokumentu XML.  
  
 Ta właściwość może mieć jedną z następujących wartości:  
  
-   <xref:System.Xml.DtdProcessing.Parse?displayProperty=nameWithType> Aby włączyć przetwarzanie elementu DTD.  
  
-   <xref:System.Xml.DtdProcessing.Prohibit?displayProperty=nameWithType> Aby zgłosić <xref:System.Xml.XmlException> wyjątek po napotkaniu DTD.  
  
-   <xref:System.Xml.DtdProcessing.Ignore?displayProperty=nameWithType> Aby wyłączyć DTD przetwarzania bez ostrzeżenia i wyjątki.  
  
 Do sprawdzenia poprawności względem DTD, <xref:System.Xml.XmlReader> używa DTD zdefiniowana w deklaracji typu dokumentu dokumentu XML. Deklaracja DOCTYPE albo może wskazywać wbudowanego DTD lub może być odwołaniem do pliku zewnętrznego elementu DTD. Do sprawdzenia poprawności pliku XML przed DTD:  
  
-   Ustaw <xref:System.Xml.XmlReaderSettings.DtdProcessing%2A?displayProperty=nameWithType> właściwości `DtdProcessing.Parse.`  
  
-   Ustaw <xref:System.Xml.XmlReaderSettings.ValidationType%2A?displayProperty=nameWithType> właściwości `ValidationType.DTD`.  
  
-   Jeśli element DTD jest przechowywane w zasobie sieciowym zewnętrznego pliku, która wymaga uwierzytelnienia, Przekaż <xref:System.Xml.XmlResolver> obiektu o poświadczenia niezbędne do <xref:System.Xml.XmlReader.Create%2A> metody.  
  
> [!IMPORTANT]
>  Jeśli <xref:System.Xml.XmlReaderSettings.DtdProcessing%2A> właściwość jest ustawiona na <xref:System.Xml.DtdProcessing.Ignore?displayProperty=nameWithType>, <xref:System.Xml.XmlReader> ani zgłaszać elementów DTD. Oznacza to, że DTD/DOCTYPE zostaną utracone na dane wyjściowe.  
  
   
  
## Examples  
 Poniższy przykład sprawdza poprawność pliku XML przy użyciu pliku definicji DTD.  
  
 [!code-cpp[XmlReaderSettings.DtdValidate#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlReaderSettings.DtdValidate/CPP/XmlReaderSettings.DtdValidate.cpp#1)]
 [!code-csharp[XmlReaderSettings.DtdValidate#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderSettings.DtdValidate/CS/validdtd.cs#1)]
 [!code-vb[XmlReaderSettings.DtdValidate#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderSettings.DtdValidate/VB/validdtd.vb#1)]  
  
## <a name="input"></a>Dane wejściowe  
 W przykładzie użyto `itemDTD.xml` pliku jako dane wejściowe.  
  
 [!code-xml[XmlReaderSettings.DtdValidate#2](~/samples/snippets/xml/VS_Snippets_Data/XmlReaderSettings.DtdValidate/XML/itemDTD.xml#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IgnoreComments">
      <MemberSignature Language="C#" Value="public bool IgnoreComments { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IgnoreComments" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.IgnoreComments" />
      <MemberSignature Language="VB.NET" Value="Public Property IgnoreComments As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IgnoreComments { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IgnoreComments : bool with get, set" Usage="System.Xml.XmlReaderSettings.IgnoreComments" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy ignorować komentarze.</summary>
        <value>
          <see langword="true" /> ignorowanie komentarze; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ustawienie tej właściwości na `true` może spowodować wiele węzłów ciągłe tekstu zostały zwrócone z czytnika. Nie dotyczy to sprawdzania poprawności.  
  
   
  
## Examples  
 W poniższym przykładzie tworzony obiekt ustawień używany do utworzenia czytnika wyodrębniania instrukcji przetwarzania, komentarze i nieważny biały znak.  
  
 [!code-cpp[XmlReaderSettings.cctor#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlReaderSettings.cctor/CPP/XmlReaderSettings.cctor.cpp#1)]
 [!code-csharp[XmlReaderSettings.cctor#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderSettings.cctor/CS/factory_rdr_cctor2.cs#1)]
 [!code-vb[XmlReaderSettings.cctor#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderSettings.cctor/VB/factory_rdr_cctor2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="IgnoreProcessingInstructions">
      <MemberSignature Language="C#" Value="public bool IgnoreProcessingInstructions { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IgnoreProcessingInstructions" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.IgnoreProcessingInstructions" />
      <MemberSignature Language="VB.NET" Value="Public Property IgnoreProcessingInstructions As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IgnoreProcessingInstructions { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IgnoreProcessingInstructions : bool with get, set" Usage="System.Xml.XmlReaderSettings.IgnoreProcessingInstructions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy ignorować instrukcji przetwarzania.</summary>
        <value>
          <see langword="true" /> Przetwarzanie instrukcji; ignorowanie w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ustawienie tej właściwości na `true` może spowodować wiele węzłów ciągłe tekstu zostały zwrócone z czytnika. Nie dotyczy to sprawdzania poprawności.  
  
   
  
## Examples  
 W poniższym przykładzie tworzony obiekt ustawień używany do utworzenia czytnika wyodrębniania instrukcji przetwarzania, komentarze i nieważny biały znak.  
  
 [!code-cpp[XmlReaderSettings.cctor#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlReaderSettings.cctor/CPP/XmlReaderSettings.cctor.cpp#1)]
 [!code-csharp[XmlReaderSettings.cctor#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderSettings.cctor/CS/factory_rdr_cctor2.cs#1)]
 [!code-vb[XmlReaderSettings.cctor#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderSettings.cctor/VB/factory_rdr_cctor2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="IgnoreWhitespace">
      <MemberSignature Language="C#" Value="public bool IgnoreWhitespace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IgnoreWhitespace" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.IgnoreWhitespace" />
      <MemberSignature Language="VB.NET" Value="Public Property IgnoreWhitespace As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IgnoreWhitespace { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IgnoreWhitespace : bool with get, set" Usage="System.Xml.XmlReaderSettings.IgnoreWhitespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy ignorować nieważny biały znak.</summary>
        <value>
          <see langword="true" /> ignorowanie biały znak w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Biały znak, który nie jest uznawany za znaczny zawiera spacje, tabulatory i puste wiersze używana do oddzielania kod znaczników dla czytelności większa. Na przykład jest biały znak w zawartości elementu.  
  
 Ustawienie tej właściwości nie ma wpływu na biały znak między znaczników w trybie mieszanym zawartości lub biały znak, który występuje w zakresie `xml:space='preserve'` atrybutu.  
  
   
  
## Examples  
 W poniższym przykładzie tworzony obiekt ustawień używany do utworzenia czytnika wyodrębniania instrukcji przetwarzania, komentarze i nieważny biały znak.  
  
 [!code-cpp[XmlReaderSettings.cctor#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlReaderSettings.cctor/CPP/XmlReaderSettings.cctor.cpp#1)]
 [!code-csharp[XmlReaderSettings.cctor#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderSettings.cctor/CS/factory_rdr_cctor2.cs#1)]
 [!code-vb[XmlReaderSettings.cctor#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderSettings.cctor/VB/factory_rdr_cctor2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="LineNumberOffset">
      <MemberSignature Language="C#" Value="public int LineNumberOffset { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LineNumberOffset" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.LineNumberOffset" />
      <MemberSignature Language="VB.NET" Value="Public Property LineNumberOffset As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int LineNumberOffset { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.LineNumberOffset : int with get, set" Usage="System.Xml.XmlReaderSettings.LineNumberOffset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia przesunięcie numer wiersza <see cref="T:System.Xml.XmlReader" /> obiektu.</summary>
        <value>Przesunięcie numeru wiersza. Wartość domyślna to 0.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.XmlReaderSettings.LineNumberOffset%2A> Ustawienie określa punkt gdzie <xref:System.Xml.IXmlLineInfo.LineNumber%2A> odlicza właściwości. Jest to przydatne, jeśli w danych XML jest osadzony w dokumencie większy. Na przykład jeśli dane XML zostały osadzone w dokumencie większych i danych rozpoczęty w wierszu 101 dokumentu, możesz określić, czy czytnik Uruchom w wierszu 100. W związku z tym Jeśli czytnik zgłosił wyjątek podczas analizowania pierwszy wiersz pliku XML, rozpoczną przesyłanie raportów numer wiersza jako wiersza 101 zamiast wiersza 1.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="LinePositionOffset">
      <MemberSignature Language="C#" Value="public int LinePositionOffset { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 LinePositionOffset" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.LinePositionOffset" />
      <MemberSignature Language="VB.NET" Value="Public Property LinePositionOffset As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int LinePositionOffset { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.LinePositionOffset : int with get, set" Usage="System.Xml.XmlReaderSettings.LinePositionOffset" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia przesunięcie pozycji wiersza <see cref="T:System.Xml.XmlReader" /> obiektu.</summary>
        <value>Przesunięcie pozycji wiersza. Wartość domyślna to 0.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.XmlReaderSettings.LinePositionOffset%2A> Ustawienie określa punkt gdzie <xref:System.Xml.IXmlLineInfo.LinePosition%2A> odlicza właściwości. Jest to przydatne w danych XML jest osadzony w dokumencie większe, jeśli nie ma żadnych nowy wiersz na początku pliku XML. W tym przypadku jeśli czytnik zgłasza wyjątek podczas analizowania pliku XML, ma się zwrócić położenie wiersza względem głównego dokumentu, nie tylko względem XML fragment.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="MaxCharactersFromEntities">
      <MemberSignature Language="C#" Value="public long MaxCharactersFromEntities { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 MaxCharactersFromEntities" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.MaxCharactersFromEntities" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxCharactersFromEntities As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long MaxCharactersFromEntities { long get(); void set(long value); };" />
      <MemberSignature Language="F#" Value="member this.MaxCharactersFromEntities : int64 with get, set" Usage="System.Xml.XmlReaderSettings.MaxCharactersFromEntities" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość określającą maksymalną dozwoloną liczbę znaków w dokumencie wynikających z rozwijanie jednostek.</summary>
        <value>Dozwoloną maksymalną liczbę znaków z rozwiniętym jednostek. Wartość domyślna to 0.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość zero (0) oznacza nie ograniczenia liczby znaków, wynikających z rozwijanie jednostek. Wartość niezerowa określa maksymalną liczbę znaków, które mogą być wynikiem rozwijanie jednostek.  
  
 Jeśli czytnik próbuje odczytać dokument, który zawiera jednostki w taki sposób, że rozmiar po rozwinięciu przekroczy tę właściwość, <xref:System.Xml.XmlException> zostanie wygenerowany.  
  
 Ta właściwość pozwala ograniczyć ataki gdy osoba atakująca przesyła dokumentów XML, które próbują przekracza limity pamięci za pomocą rozwijanie jednostek. Dzięki ograniczeniu liczby znaków, wynikających z rozwiniętym jednostek, można wykrywać ataku i odzyskać niezawodnie.  
  
   
  
## Examples  
 Poniższy kod ustawia tę właściwość, a następnie próbuje przeanalizować dokumentu zawierającego jednostki, która rozszerza przekracza ustawiony limit rozmiaru. W przypadku rzeczywistych Ustaw ten limit na wartość wystarczająco duża do obsługi ważnych dokumentów jeszcze duże, aby ograniczyć ryzyko ze strony złośliwych dokumentów.  
  
```csharp  
string markup =  
@"<!DOCTYPE Root [  
  <!ENTITY anEntity ""Expands to more than 30 characters"">  
  <!ELEMENT Root (#PCDATA)>  
]>  
<Root>Content &anEntity;</Root>";  
  
XmlReaderSettings settings = new XmlReaderSettings();  
settings.DtdProcessing = DtdProcessing.Parse;  
settings.ValidationType = ValidationType.DTD;  
settings.MaxCharactersFromEntities = 30;  
  
try  
{  
    XmlReader reader = XmlReader.Create(new StringReader(markup), settings);  
    while (reader.Read()) { }  
}  
catch (XmlException ex)  
{  
    Console.WriteLine(ex.Message);  
}  
```  
  
```vb  
Dim markup As String = _  
    "<!DOCTYPE Root [" + Environment.NewLine + _  
    "  <!ENTITY anEntity ""Expands to more than 30 characters"">" + Environment.NewLine + _  
    "  <!ELEMENT Root (#PCDATA)>" + Environment.NewLine + _  
    ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MaxCharactersInDocument">
      <MemberSignature Language="C#" Value="public long MaxCharactersInDocument { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int64 MaxCharactersInDocument" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.MaxCharactersInDocument" />
      <MemberSignature Language="VB.NET" Value="Public Property MaxCharactersInDocument As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property long MaxCharactersInDocument { long get(); void set(long value); };" />
      <MemberSignature Language="F#" Value="member this.MaxCharactersInDocument : int64 with get, set" Usage="System.Xml.XmlReaderSettings.MaxCharactersInDocument" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość określającą maksymalną dozwoloną liczbę znaków w dokumentach XML. Wartość zero (0) oznacza brak ograniczeń na rozmiar dokumentu XML. Wartość niezerowa określa maksymalny rozmiar w znakach.</summary>
        <value>Dozwoloną maksymalną liczbę znaków w dokumentach XML. Wartość domyślna to 0.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość zero (0) oznacza brak ograniczeń liczby znaków w dokumencie przeanalizowany. Wartość niezerowa określa maksymalną liczbę znaków, które można przeanalizować.  
  
 Liczba maksymalna liczba znaków w dokumencie zawiera liczbę znaków, wynikających z rozwiniętym jednostek.  
  
 Jeśli czytnik próbuje odczytać dokument, którego rozmiar przekracza tę właściwość, <xref:System.Xml.XmlException> zostanie wygenerowany.  
  
 Ta właściwość pozwala ograniczyć ataki gdy osoba atakująca przesyła bardzo dużych dokumentów XML. Poprzez ograniczenie rozmiaru dokumentu, można wykrywać ataku i odzyskać niezawodnie.  
  
   
  
## Examples  
 Poniższy kod ustawia tę właściwość, a następnie próbuje przeanalizować dokumentu przekracza limit. W przypadku rzeczywistych Ustaw ten limit na wartość wystarczająco duża do obsługi ważnych dokumentów jeszcze duże, aby ograniczyć ryzyko ze strony złośliwych dokumentów.  
  
```csharp  
string markup = "<Root>Content</Root>";  
  
XmlReaderSettings settings = new XmlReaderSettings();  
settings.MaxCharactersInDocument = 10;  
  
try  
{  
    XmlReader reader = XmlReader.Create(new StringReader(markup), settings);  
    while (reader.Read()) { }  
}  
catch (XmlException ex)  
{  
    Console.WriteLine(ex.Message);  
}  
```  
  
```vb  
Dim markup As String = "<Root>Content</Root>"  
  
Dim settings As XmlReaderSettings = New XmlReaderSettings()  
settings.MaxCharactersInDocument = 10  
  
Try  
    Dim reader As XmlReader = XmlReader.Create(New StringReader(markup), settings)  
    While (reader.Read())  
    End While  
Catch ex As XmlException  
    Console.WriteLine(ex.Message)  
End Try  
```  
  
 Ten kod generuje następujące dane wyjściowe:  
  
```  
There is an error in XML document (MaxCharactersInDocument, ).  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NameTable">
      <MemberSignature Language="C#" Value="public System.Xml.XmlNameTable NameTable { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlNameTable NameTable" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.NameTable" />
      <MemberSignature Language="VB.NET" Value="Public Property NameTable As XmlNameTable" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::XmlNameTable ^ NameTable { System::Xml::XmlNameTable ^ get(); void set(System::Xml::XmlNameTable ^ value); };" />
      <MemberSignature Language="F#" Value="member this.NameTable : System.Xml.XmlNameTable with get, set" Usage="System.Xml.XmlReaderSettings.NameTable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlNameTable</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia <see cref="T:System.Xml.XmlNameTable" /> używany do porównywnania ciągów atomized.</summary>
        <value>
          <see cref="T:System.Xml.XmlNameTable" /> Który przechowuje wszystkie ciągi atomized używany przez wszystkie <see cref="T:System.Xml.XmlReader" /> wystąpienia utworzone za pomocą tej <see cref="T:System.Xml.XmlReaderSettings" /> obiektu.  Wartość domyślna to <see langword="null" />. Utworzony <see cref="T:System.Xml.XmlReader" /> wystąpienia użyje nowy pusty <see cref="T:System.Xml.NameTable" /> Jeśli ta wartość jest <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość jest ustawiana <xref:System.Xml.XmlNameTable> wystąpienia, jeśli chcesz udostępnić wspólnej tabeli nazw wszystkim utworzony <xref:System.Xml.XmlReader> wystąpień.  
  
> [!NOTE]
>  <xref:System.Xml.NameTable> Klasa nie jest bezpieczne wątkowo. W związku z tym nie może być udostępniana między <xref:System.Xml.XmlReader> obiektów, które są uruchamiane jednocześnie w różnych wątkach.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProhibitDtd">
      <MemberSignature Language="C#" Value="public bool ProhibitDtd { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ProhibitDtd" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.ProhibitDtd" />
      <MemberSignature Language="VB.NET" Value="Public Property ProhibitDtd As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ProhibitDtd { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ProhibitDtd : bool with get, set" Usage="System.Xml.XmlReaderSettings.ProhibitDtd" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Obsolete("Use XmlReaderSettings.DtdProcessing property instead.")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy należy zakazać przetwarzanie definicji (DTD) typu dokumentu. Ta właściwość jest przestarzała. Zamiast nich należy używać słów kluczowych <see cref="P:System.Xml.XmlTextReader.DtdProcessing" />.</summary>
        <value>
          <see langword="true" /> Aby zabronić przetwarzanie elementu DTD; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli wartość `true`, <xref:System.Xml.XmlReader> zgłasza <xref:System.Xml.XmlException> po napotkaniu żadnej zawartości DTD. Nie należy włączać DTD przetwarzania, jeśli masz obawy problemów "odmowa usługi" lub jeśli mamy do czynienia z niezaufanego źródła.  
  
 Jeśli przetwarzanie elementu DTD włączone, można użyć <xref:System.Xml.XmlSecureResolver> do ograniczania zasobów który <xref:System.Xml.XmlReader> może uzyskać dostęp. Można również projektować aplikacji, tak aby przetwarzania XML pamięci i ograniczonego czasu. Na przykład Konfigurowanie limitów czasu w aplikacji ASP.NET.  
  
 Ta właściwość jest przestarzała. Zamiast nich należy używać słów kluczowych <xref:System.Xml.XmlTextReader.DtdProcessing%2A>. Jeśli ma wartość <xref:System.Xml.XmlReaderSettings.ProhibitDtd%2A> na wartość domyślną `true` ustawić <xref:System.Xml.XmlTextReader.DtdProcessing%2A> do `Prohibit`. Jeśli ma wartość <xref:System.Xml.XmlReaderSettings.ProhibitDtd%2A> do `false` ustawić <xref:System.Xml.XmlTextReader.DtdProcessing%2A> do `Parse`.  
  
   
  
## Examples  
 Poniższy przykład sprawdza poprawność danych za pomocą definicji DTD.  
  
 [!code-cpp[XmlReaderSettings.DtdValidate#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlReaderSettings.DtdValidate/CPP/XmlReaderSettings.DtdValidate.cpp#1)]
 [!code-csharp[XmlReaderSettings.DtdValidate#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderSettings.DtdValidate/CS/validdtd.cs#1)]
 [!code-vb[XmlReaderSettings.DtdValidate#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderSettings.DtdValidate/VB/validdtd.vb#1)]  
  
 W przykładzie użyto pliku itemDTD.xml jako dane wejściowe.  
  
 [!code-xml[XmlReaderSettings.DtdValidate#2](~/samples/snippets/xml/VS_Snippets_Data/XmlReaderSettings.DtdValidate/XML/itemDTD.xml#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlReaderSettings.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reset();" />
      <MemberSignature Language="F#" Value="member this.Reset : unit -&gt; unit" Usage="xmlReaderSettings.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Resetuje elementy członkowskie klasy ustawienia do wartości domyślnych.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W poniższej tabeli przedstawiono początkowe wartości właściwości dla wystąpienia <xref:System.Xml.XmlReaderSettings>.  
  
|Właściwość|Wartość początkowa|  
|--------------|-------------------|  
|<xref:System.Xml.XmlReaderSettings.Async%2A>|`false`.|  
|<xref:System.Xml.XmlReaderSettings.CheckCharacters%2A>|`true`.|  
|<xref:System.Xml.XmlReaderSettings.ConformanceLevel%2A>|<xref:System.Xml.ConformanceLevel.Document>.|  
|<xref:System.Xml.XmlReaderSettings.IgnoreComments%2A>|`false`.|  
|<xref:System.Xml.XmlReaderSettings.IgnoreProcessingInstructions%2A>|`false`.|  
|<xref:System.Xml.XmlReaderSettings.IgnoreWhitespace%2A>|`false`.|  
|<xref:System.Xml.XmlReaderSettings.LineNumberOffset%2A>|0.|  
|<xref:System.Xml.XmlReaderSettings.LinePositionOffset%2A>|0.|  
|<xref:System.Xml.XmlReaderSettings.MaxCharactersFromEntities%2A>|0 (nie ma żadnego limitu liczby znaków, wynikających z rozwijanie jednostek).|  
|<xref:System.Xml.XmlReaderSettings.MaxCharactersInDocument%2A>|0 (nie ma żadnego limitu rozmiaru dokumentu w formacie XML).|  
|<xref:System.Xml.XmlReaderSettings.NameTable%2A>|`null`.|  
|<xref:System.Xml.XmlTextReader.DtdProcessing%2A>|<xref:System.Xml.DtdProcessing.Prohibit>|  
|<xref:System.Xml.XmlReaderSettings.ProhibitDtd%2A>|`true`. Ta właściwość jest przestarzała. Zamiast nich należy używać słów kluczowych <xref:System.Xml.XmlTextReader.DtdProcessing%2A>. Jeśli ma wartość <xref:System.Xml.XmlReaderSettings.ProhibitDtd%2A> na wartość domyślną `true` ustawić <xref:System.Xml.XmlTextReader.DtdProcessing%2A> do `Prohibit`. Jeśli ma wartość <xref:System.Xml.XmlReaderSettings.ProhibitDtd%2A> do `false` ustawić <xref:System.Xml.XmlTextReader.DtdProcessing%2A> do `Parse`.|  
|<xref:System.Xml.XmlReaderSettings.Schemas%2A>|Pusta <xref:System.Xml.Schema.XmlSchemaSet> obiektu.|  
|<xref:System.Xml.XmlReaderSettings.ValidationFlags%2A>|<xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessIdentityConstraints>.|  
|<xref:System.Xml.XmlReaderSettings.ValidationType%2A>|<xref:System.Xml.ValidationType.None>.|  
|<xref:System.Xml.XmlReaderSettings.XmlResolver%2A>|Nowy <xref:System.Xml.XmlUrlResolver> obiektu.|  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="Schemas">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaSet Schemas { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.Schema.XmlSchemaSet Schemas" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.Schemas" />
      <MemberSignature Language="VB.NET" Value="Public Property Schemas As XmlSchemaSet" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Schema::XmlSchemaSet ^ Schemas { System::Xml::Schema::XmlSchemaSet ^ get(); void set(System::Xml::Schema::XmlSchemaSet ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Schemas : System.Xml.Schema.XmlSchemaSet with get, set" Usage="System.Xml.XmlReaderSettings.Schemas" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaSet</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia <see cref="T:System.Xml.Schema.XmlSchemaSet" /> używane podczas wykonywania sprawdzania poprawności schematu.</summary>
        <value>
          <see cref="T:System.Xml.Schema.XmlSchemaSet" /> Używane podczas wykonywania sprawdzania poprawności schematu. Wartość domyślna to pusta <see cref="T:System.Xml.Schema.XmlSchemaSet" /> obiektu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  -   Nie należy używać schematów z nieznaną lub niezaufaną źródeł lub lokalizacji. W ten sposób spowoduje naruszenie zabezpieczeń kodu.  
> -   Schematy XML (w tym wbudowane schematy) są z założenia podatne na ataki; nie akceptuje tych postanowień w scenariuszach niezaufanych.  
> -   Komunikaty o błędach weryfikacji schematu i wyjątków może narazić poufnych informacji o modelu zawartości lub identyfikator URI ścieżki do pliku schematu. Nie można więc ujawnić te informacje dotyczące obiektów wywołujących niezaufanych.  
> -   Aby uzyskać dodatkowe informacje Zobacz sekcję "Zagadnienia dotyczące zabezpieczeń".  
  
 <xref:System.Xml.Schema.XmlSchemaSet> Klasa obsługuje tylko schematy (XSD) języka definicji schematu XML. <xref:System.Xml.XmlReader> wystąpienia utworzone przez <xref:System.Xml.XmlReader.Create%2A> metody nie można skonfigurować tak, aby włączyć sprawdzanie poprawności schematu XML danych (XDR).  
  
## <a name="security-considerations"></a>Zagadnienia dotyczące bezpieczeństwa  
  
-   Nie należy używać schematów z nieznaną lub niezaufaną źródeł. W ten sposób spowoduje naruszenie zabezpieczeń kodu. <xref:System.Xml.XmlUrlResolver> Klasy jest używany do rozpoznawania schematów zewnętrznych domyślnie. Aby wyłączyć rozpoznawanie include, importu i ponownie zdefiniować elementów schematu, ustaw <xref:System.Xml.Schema.XmlSchemaSet.XmlResolver%2A?displayProperty=nameWithType> właściwości `null`.  
  
-   Wyjątki zgłoszone w wyniku użycia <xref:System.Xml.Schema.XmlSchemaSet> klas, takich jak <xref:System.Xml.Schema.XmlSchemaException> klasy mogą zawierać poufne informacje, które nie powinny zostać ujawnione w scenariuszach niezaufanych. Na przykład <xref:System.Xml.Schema.XmlSchemaException.SourceUri%2A> właściwość <xref:System.Xml.Schema.XmlSchemaException> zwraca identyfikator URI ścieżkę do pliku schematu, który spowodował wyjątek. <xref:System.Xml.Schema.XmlSchemaException.SourceUri%2A> Właściwości nie powinny zostać ujawnione w scenariuszach niezaufanych. Wyjątki powinny poprawnie obsługiwane tak, aby tymi informacjami poufnymi nie jest uwidaczniana w scenariuszach niezaufanych.  
  
   
  
## Examples  
 Poniższym przykładzie użyto <xref:System.Xml.XmlReaderSettings> obiektu i <xref:System.Xml.XmlReader.Create%2A?displayProperty=nameWithType> do kojarzenia schemat dokumentu XML. Schemat jest dodawany do <xref:System.Xml.XmlReaderSettings.Schemas%2A> właściwość <xref:System.Xml.XmlReaderSettings> obiektu. Wartość <xref:System.Xml.XmlReaderSettings.Schemas%2A> jest właściwość <xref:System.Xml.Schema.XmlSchemaSet> obiektu. Schemat używany do weryfikowania, że dokument XML jest zgodny ze schematu modelu zawartości. Błędy sprawdzania poprawności schematu i ostrzeżenia są obsługiwane przez <xref:System.Xml.XmlReaderSettings.ValidationEventHandler> zdefiniowane w <xref:System.Xml.XmlReaderSettings> obiektu.  
  
 [!code-cpp[XmlSchemaSetOverall Example#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlSchemaSetOverall Example/CPP/xmlschemasetexample.cpp#1)]
 [!code-csharp[XmlSchemaSetOverall Example#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlSchemaSetOverall Example/CS/xmlschemasetexample.cs#1)]
 [!code-vb[XmlSchemaSetOverall Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlSchemaSetOverall Example/VB/xmlschemasetexample.vb#1)]  
  
 W przykładzie użyto pliku books.xml jako dane wejściowe.  
  
 [!code-xml[XmlSchemaSetOverall Example#2](~/samples/snippets/xml/VS_Snippets_Data/XmlSchemaSetOverall Example/XML/books.xml#2)]  
  
 W przykładzie użyto pliku books.xsd jako danych wejściowych.  
  
 [!code-xml[XmlSchemaSetOverall Example#3](~/samples/snippets/xml/VS_Snippets_Data/XmlSchemaSetOverall Example/XML/books.xsd#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ValidationEventHandler">
      <MemberSignature Language="C#" Value="public event System.Xml.Schema.ValidationEventHandler ValidationEventHandler;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Xml.Schema.ValidationEventHandler ValidationEventHandler" />
      <MemberSignature Language="DocId" Value="E:System.Xml.XmlReaderSettings.ValidationEventHandler" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Xml::Schema::ValidationEventHandler ^ ValidationEventHandler;" />
      <MemberSignature Language="F#" Value="member this.ValidationEventHandler : System.Xml.Schema.ValidationEventHandler " Usage="member this.ValidationEventHandler : System.Xml.Schema.ValidationEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.ValidationEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy czytnik wystąpią błędy sprawdzania poprawności.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zdarzenia te występują podczas odczytywania dokumentu XML wystąpienia, jeśli <xref:System.Xml.XmlReaderSettings.ValidationType%2A> jest ustawiona jako <xref:System.Xml.ValidationType.DTD> lub <xref:System.Xml.ValidationType.Schema>. Jeśli <xref:System.Xml.Schema.XmlSchemaValidationFlags.ReportValidationWarnings> ustawienie zostało włączone na <xref:System.Xml.XmlReaderSettings.ValidationFlags%2A> właściwości te zdarzenia także wystąpić, gdy występują ostrzeżenia walidacji.  
  
 Jeśli czytnik jest skonfigurowany do sprawdzania poprawności i nie obsługi zdarzenia walidacji nie została skonfigurowana, <xref:System.Xml.Schema.XmlSchemaValidationException> jest generowany dla wszystkie błędy weryfikacji. (Nie powodują ostrzeżenia weryfikacji <xref:System.Xml.Schema.XmlSchemaValidationException> zostanie wygenerowany).  
  
> [!IMPORTANT]
>  Komunikaty o błędach weryfikacji może narazić informacji poufnych modelu zawartości. Błąd weryfikacji i komunikaty ostrzegawcze są obsługiwane przy użyciu <xref:System.Xml.Schema.ValidationEventHandler> delegowanie i są widoczne jako <xref:System.Xml.Schema.XmlSchemaValidationException> jeśli bez obsługi zdarzeń został dostarczony do <xref:System.Xml.XmlReaderSettings> obiektu (nie powodują ostrzeżenia weryfikacji <xref:System.Xml.Schema.XmlSchemaValidationException> zostanie wygenerowany). Te informacje modelu zawartości nie powinny zostać ujawnione w scenariuszach niezaufanych. Sprawdzanie poprawności komunikaty ostrzegawcze są domyślnie pomijane i mogą być zgłaszane przez ustawienie <xref:System.Xml.Schema.XmlSchemaValidationFlags.ReportValidationWarnings> flagi.  
>   
>  <xref:System.Xml.Schema.XmlSchemaException.SourceUri%2A> Właściwość <xref:System.Xml.Schema.XmlSchemaValidationException> zwraca identyfikator URI ścieżkę do pliku schematu, który spowodował wyjątek. <xref:System.Xml.Schema.XmlSchemaException.SourceUri%2A> Właściwości nie powinny zostać ujawnione w scenariuszach niezaufanych.  
  
   
  
## Examples  
 W poniższym przykładzie przedstawiono ustawienia, aby określić można utworzyć czytnika, która sprawdza poprawność przy użyciu wbudowanego schematu i wyświetla również ostrzeżenia dotyczące sprawdzania poprawności. Używa obsługi zdarzenia walidacji <xref:System.Xml.Schema.XmlSeverityType> wyliczenia w celu rozróżnienia ostrzeżeń i błędów.  
  
 [!code-csharp[XmlReaderSettings.IgnoreInlineSchema#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderSettings.IgnoreInlineSchema/CS/factory_rdr_cctor.cs#1)]
 [!code-vb[XmlReaderSettings.IgnoreInlineSchema#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderSettings.IgnoreInlineSchema/VB/factory_rdr_cctor.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ValidationFlags">
      <MemberSignature Language="C#" Value="public System.Xml.Schema.XmlSchemaValidationFlags ValidationFlags { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.Schema.XmlSchemaValidationFlags ValidationFlags" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.ValidationFlags" />
      <MemberSignature Language="VB.NET" Value="Public Property ValidationFlags As XmlSchemaValidationFlags" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::Schema::XmlSchemaValidationFlags ValidationFlags { System::Xml::Schema::XmlSchemaValidationFlags get(); void set(System::Xml::Schema::XmlSchemaValidationFlags value); };" />
      <MemberSignature Language="F#" Value="member this.ValidationFlags : System.Xml.Schema.XmlSchemaValidationFlags with get, set" Usage="System.Xml.XmlReaderSettings.ValidationFlags" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.Schema.XmlSchemaValidationFlags</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, ustawienia sprawdzania poprawności schematu. To ustawienie dotyczy <see cref="T:System.Xml.XmlReader" /> obiektów, które Zweryfikuj schematy (<see cref="P:System.Xml.XmlReaderSettings.ValidationType" /> ustawioną właściwość <see langword="ValidationType.Schema" />).</summary>
        <value>Bitowe połączenie wartości wyliczenia, które określają opcje sprawdzania poprawności. <see cref="F:System.Xml.Schema.XmlSchemaValidationFlags.ProcessIdentityConstraints" /> i <see cref="F:System.Xml.Schema.XmlSchemaValidationFlags.AllowXmlAttributes" /> są domyślnie włączone. <see cref="F:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema" />, <see cref="F:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation" />, i <see cref="F:System.Xml.Schema.XmlSchemaValidationFlags.ReportValidationWarnings" /> są domyślnie wyłączone.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!IMPORTANT]
>  <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema> i <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation> flagi weryfikacji <xref:System.Xml.XmlReaderSettings> obiektu nie są wybrane domyślnie. Gdy te flagi są ustawiane, <xref:System.Xml.XmlReaderSettings.XmlResolver%2A> z <xref:System.Xml.XmlReaderSettings> obiekt jest używany do rozwiązania lokalizacji schematu w dokumencie wystąpienia w <xref:System.Xml.XmlReader>. Jeśli <xref:System.Xml.XmlReaderSettings.XmlResolver%2A> obiekt jest `null`, lokalizacji schematu nie są rozpoznawane nawet wtedy, gdy <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema> i <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation> ustawiono flagi weryfikacji.  
>   
>  Dodane podczas weryfikacji schematów Dodawanie nowych typów i zmienić wynik weryfikacji dokumentu sprawdzania poprawności. W związku z tym schematy zewnętrzne mają zostać rozwiązane tylko z zaufanych źródeł.  
>   
>  Wyłączanie <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessIdentityConstraints> flagi (domyślnie włączony) zaleca się podczas sprawdzania poprawności, niezaufanej, duża XML dokumentów w scenariuszach wysokiej dostępności względem schematu z ograniczeniami tożsamości przez dużą część dokumentu.  
  
   
  
## Examples  
 Poniższy przykład sprawdza poprawność pliku XML przed wbudowanego schematu XML przez włączenie <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema> ustawienie. Czytnik XML został skonfigurowany do wyświetlania ostrzeżeń weryfikacji, sp zostanie również wyświetlony oczekiwane ostrzeżenie dla elementu głównego.  
  
 [!code-csharp[XmlReaderSettings.IgnoreInlineSchema#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderSettings.IgnoreInlineSchema/CS/factory_rdr_cctor.cs#1)]
 [!code-vb[XmlReaderSettings.IgnoreInlineSchema#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderSettings.IgnoreInlineSchema/VB/factory_rdr_cctor.vb#1)]  
  
## <a name="input"></a>Dane wejściowe  
 W przykładzie użyto pliku inlineSchema.xml jako dane wejściowe.  
  
 [!code-xml[XmlReaderSettings.IgnoreInlineSchema#3](~/samples/snippets/xml/VS_Snippets_Data/XmlReaderSettings.IgnoreInlineSchema/XML/inlineSchema.xml#3)]  
  
## <a name="output"></a>Dane wyjściowe  
 Ostrzeżenie: Pasującego nie można odnaleźć schematu. Nie przeprowadzono sprawdzania poprawności. Nie można odnaleźć informacji schematu dla elementu "root".  
  
 Błąd sprawdzania poprawności: element 'xsdHeadCount:HeadCount' ma nieprawidłowy element podrzędny "dzielenia". Oczekiwano 'ID'.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="ValidationType">
      <MemberSignature Language="C#" Value="public System.Xml.ValidationType ValidationType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Xml.ValidationType ValidationType" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.ValidationType" />
      <MemberSignature Language="VB.NET" Value="Public Property ValidationType As ValidationType" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::ValidationType ValidationType { System::Xml::ValidationType get(); void set(System::Xml::ValidationType value); };" />
      <MemberSignature Language="F#" Value="member this.ValidationType : System.Xml.ValidationType with get, set" Usage="System.Xml.XmlReaderSettings.ValidationType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.ValidationType</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą czy <see cref="T:System.Xml.XmlReader" /> będzie sprawdzania poprawności lub typu przydziału podczas odczytu.</summary>
        <value>Jeden z <see cref="T:System.Xml.ValidationType" /> wartości, które wskazuje, czy element XmlReader będzie sprawdzania poprawności lub typu przydziału podczas odczytu. Wartość domyślna to <see langword="ValidationType.None" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W poniższej tabeli opisano <xref:System.Xml.ValidationType> wartości.  
  
> [!NOTE]
>  <xref:System.Xml.ValidationType.Auto> i <xref:System.Xml.ValidationType.XDR> wartości wyliczenia są przestarzałe w programie .NET Framework w wersji 2.0.  
  
|ValidationType|Opis|  
|--------------------|-----------------|  
|`DTD`|Sprawdzanie poprawności jest wykonywane przy użyciu definicji typu dokumentu (DTD). **Uwaga:** <xref:System.Xml.XmlReaderSettings.DtdProcessing%2A> również musi być ustawiona właściwość <xref:System.Xml.DtdProcessing.Parse>.|  
|`None`|<xref:System.Xml.XmlReader> Nie sprawdza, czy dane, lub przypisania typu.|  
|`Schema`|Sprawdzanie poprawności i typu przydziału jest wykonywane przy użyciu schematu schematu XML definition language (XSD). Czytnik uzyskuje dostęp do schematu XML przy użyciu następujących czynności:<br /><br /> -Używa <xref:System.Xml.XmlReaderSettings.Schemas%2A> właściwości, aby uzyskać dostęp do <xref:System.Xml.Schema.XmlSchemaSet> obiekt skojarzony z tym czytnika.<br />-Używa schematu w wierszu zawarte w dokumencie wystąpienia XML. ( <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema> Należy włączyć opcję.)<br />-Używa określonego przez schemat lokalizacji wskazówek schematu XML (`xsi:schemaLocation` lub `xsi:noNamespaceSchemaLocation` atrybut) w dokumencie wystąpienia XML. ( <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation> Należy włączyć opcję.)|  
  
   
  
## Examples  
 Poniższy przykład weryfikuje przy użyciu przechowywanych w schemacie <xref:System.Xml.Schema.XmlSchemaSet>.  
  
 [!code-cpp[XmlReader_Validate_SchemaSet#1](~/samples/snippets/cpp/VS_Snippets_Data/XmlReader_Validate_SchemaSet/CPP/XmlReader_Validate_SchemaSet.cpp#1)]
 [!code-csharp[XmlReader_Validate_SchemaSet#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlReader_Validate_SchemaSet/CS/validschemaset.cs#1)]
 [!code-vb[XmlReader_Validate_SchemaSet#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReader_Validate_SchemaSet/VB/validschemaset.vb#1)]  
  
 W przykładzie użyto następujących plików wejściowych:  
  
 `booksSchemaFail.xml`  
  
 [!code-xml[XmlReader_Validate_SchemaSet#2](~/samples/snippets/xml/VS_Snippets_Data/XmlReader_Validate_SchemaSet/XML/booksschemafail.xml#2)]  
  
 `books.xsd`  
  
 [!code-xml[XmlReader_Validate_SchemaSet#3](~/samples/snippets/xml/VS_Snippets_Data/XmlReader_Validate_SchemaSet/XML/books.xsd#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
        <altmember cref="T:System.Xml.Schema.XmlSchemaValidationFlags" />
      </Docs>
    </Member>
    <Member MemberName="XmlResolver">
      <MemberSignature Language="C#" Value="public System.Xml.XmlResolver XmlResolver { set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Xml.XmlResolver XmlResolver" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlReaderSettings.XmlResolver" />
      <MemberSignature Language="VB.NET" Value="Public Property XmlResolver As XmlResolver" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Xml::XmlResolver ^ XmlResolver {  void set(System::Xml::XmlResolver ^ value); };" />
      <MemberSignature Language="F#" Value="member this.XmlResolver : System.Xml.XmlResolver" Usage="System.Xml.XmlReaderSettings.XmlResolver" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Xml.XmlResolver</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ustawia <see cref="T:System.Xml.XmlResolver" /> umożliwiają dostęp do dokumentów zewnętrznych.</summary>
        <value>
          <see cref="T:System.Xml.XmlResolver" /> Umożliwiają dostęp do dokumentów zewnętrznych. Jeśli ustawiono <see langword="null" />, <see cref="T:System.Xml.XmlException" /> jest generowany, gdy <see cref="T:System.Xml.XmlReader" /> próbuje uzyskać dostęp do zasobu zewnętrznego. Wartość domyślna to nowa <see cref="T:System.Xml.XmlUrlResolver" /> bez poświadczeń.  Począwszy od programu .NET Framework 4.5.2, to ustawienie nie ma wartości domyślnej równej <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.XmlResolver> Służy do lokalizowania i Otwórz dokument wystąpienie XML lub do zlokalizuj i otwórz dowolnych zasobów zewnętrznych odwołuje się dokument wystąpienie XML. Mogą to być jednostek DTD i schematy. <xref:System.Xml.XmlResolver.Credentials%2A?displayProperty=nameWithType> Właściwości może służyć do określenia wszystkie poświadczenia wymagane do uwierzytelniania sieciowego.  
  
> [!IMPORTANT]
>  Ponieważ <xref:System.Xml.XmlReaderSettings.XmlResolver%2A> mogą zawierać poufne informacje takie jak poświadczeń użytkownika, należy zachować ostrożność podczas buforowania <xref:System.Xml.XmlReaderSettings> obiektów, lub podczas przekazywania <xref:System.Xml.XmlReaderSettings> obiektu z jednego składnika do innego.  
>   
>  <xref:System.Xml.XmlSecureResolver> Można uzyskać dostęp do dokumentów zewnętrznych. <xref:System.Xml.XmlSecureResolver> Pomaga zabezpieczyć inną implementację klasy <xref:System.Xml.XmlResolver> zawijania <xref:System.Xml.XmlResolver> obiektu i ograniczania zasobów który odpowiadającego <xref:System.Xml.XmlResolver> ma dostęp do.  
>   
>  <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema> i <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation> flagi weryfikacji <xref:System.Xml.XmlReaderSettings> obiektu nie są wybrane domyślnie. Gdy te flagi są ustawiane, <xref:System.Xml.XmlReaderSettings.XmlResolver%2A> z <xref:System.Xml.XmlReaderSettings> obiekt jest używany do rozwiązania lokalizacji schematu w dokumencie wystąpienia w <xref:System.Xml.XmlReader>. Jeśli <xref:System.Xml.XmlReaderSettings.XmlResolver%2A> obiekt jest `null`, lokalizacji schematu nie są rozpoznawane nawet wtedy, gdy <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessInlineSchema> i <xref:System.Xml.Schema.XmlSchemaValidationFlags.ProcessSchemaLocation> ustawiono flagi weryfikacji.  
>   
>  Dodane podczas weryfikacji schematów Dodawanie nowych typów i zmienić wynik weryfikacji dokumentu sprawdzania poprawności. W związku z tym schematy zewnętrzne mają zostać rozwiązane tylko z zaufanych źródeł.  
  
   
  
## Examples  
 Poniższy przykład tworzy <xref:System.Xml.XmlReader> używającą <xref:System.Xml.XmlSecureResolver> z domyślnych poświadczeń.  
  
 [!code-csharp[XmlReader.Create#10](~/samples/snippets/csharp/VS_Snippets_Data/XmlReader.Create/CS/XmlReader_Create.cs#10)]
 [!code-vb[XmlReader.Create#10](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReader.Create/VB/XmlReader_Create.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Xml.XmlReader" />
        <altmember cref="M:System.Xml.XmlReader.Create(System.String)" />
      </Docs>
    </Member>
  </Members>
</Type>