<Type Name="XmlUrlResolver" FullName="System.Xml.XmlUrlResolver">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="51b881450d2e16ef964dfc7a60453931d067d5c8" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36434449" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class XmlUrlResolver : System.Xml.XmlResolver" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit XmlUrlResolver extends System.Xml.XmlResolver" />
  <TypeSignature Language="DocId" Value="T:System.Xml.XmlUrlResolver" />
  <TypeSignature Language="VB.NET" Value="Public Class XmlUrlResolver&#xA;Inherits XmlResolver" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlUrlResolver : System::Xml::XmlResolver" />
  <TypeSignature Language="F#" Value="type XmlUrlResolver = class&#xA;    inherit XmlResolver" />
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Xml.XmlResolver</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Usuwa zasoby zewnętrzne XML o nazwie przez zasób identyfikator URI (Uniform).</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.XmlUrlResolver> Służy do rozpoznawania zewnętrznych zasobów XML, takich jak jednostki, definicji typu dokumentu (pliki DTD) lub schematów. Jest również używane do procesu obejmują i zaimportować elementy znalezione w arkusze stylów Extensible StyleSheet Language (XSL) lub schematu XML definition language (XSD) schematów.  
  
 <xref:System.Xml.XmlUrlResolver> jest domyślny program rozpoznawania nazw dla wszystkich klas w <xref:System.Xml> przestrzeni nazw. Obsługuje on `file://` i `http://` protokołów i żąda od <xref:System.Net.WebRequest> klasy.  
  
> [!IMPORTANT]
>  <xref:System.Xml.XmlUrlResolver> obiekty mogą zawierać poufne informacje, takie jak poświadczenia użytkownika. Należy zachować ostrożność podczas można buforować <xref:System.Xml.XmlUrlResolver> obiektów i nie należy przekazywać <xref:System.Xml.XmlUrlResolver> obiektów do niezaufany składnik.  
  
## <a name="resolving-dtds"></a>Rozpoznawanie elementów DTD.  
 Jeśli czytnik XML (<xref:System.Xml.XmlReader>) odczytuje plik XML, który zawiera zewnętrznego elementu DTD, wywołuje <xref:System.Xml.XmlUrlResolver.GetEntityAsync%2A?displayProperty=nameWithType> metody można uzyskać strumienia reprezentację element DTD. Jeśli identyfikator URI element DTD jest względnym identyfikatorem URI, wywołuje metodę modułu odczytującego XML <xref:System.Xml.XmlUrlResolver.ResolveUri%2A?displayProperty=nameWithType> metodę i zwraca bezwzględny identyfikator URI dla danego `relativeUri` i `baseURi` parametrów. Jeśli <xref:System.Xml.XmlUrlResolver> nie wiadomo, jak rozwiązać identyfikatora URI, zwraca `null`.  
  
 <xref:System.Xml.XmlUrlResolver.GetEntity%2A?displayProperty=nameWithType> — Metoda korzysta z informacji w <xref:System.Xml.XmlUrlResolver.Credentials%2A> właściwości odpowiednio w celu uzyskania dostępu do zasobu. Brak nie `get` dostępu do tej właściwości ze względów bezpieczeństwa. Podczas zastępowania <xref:System.Xml.XmlResolver>, **GetEntity** to metoda, która używa informacji poświadczeń w **poświadczenia** właściwości.  
  
 Rozpoznawanie innych zasobów XML jest bardzo podobny do rozpoznawania elementów DTD. <xref:System.Xml.XmlResolver> negocjuje połączenie z zewnętrznych zasobów i zwraca <xref:System.IO.Stream> reprezentację zawartości. Obiekt, do której wysłano wywołaniu <xref:System.Xml.XmlResolver> interpretuje strumienia.  
  
## <a name="extending-the-xmlurlresolver-class"></a>Rozszerzenie klasy XmlUrlResolver  
 Domyślne zachowanie <xref:System.Xml.XmlUrlResolver> klasy jest rozwiązanie XML danych zasobu ze źródła, a nie z pamięci podręcznej. W niektórych przypadkach rozpoznawania zasobu danych z pamięci podręcznej może poprawić wydajność aplikacji przez zapisanie podróży serwer zasobów danych. Zwiększenie wydajności w tym miejscu należy porównać potrzebę aktualna zawartość.  
  
 Poniższy przykład rozszerza <xref:System.Xml.XmlUrlResolver> i tworzy nową klasę `XmlCachingResolver`, aby pobrać zasobów z pamięci podręcznej. Odbywa się przez zastąpienie <xref:System.Xml.XmlUrlResolver.Credentials%2A?displayProperty=nameWithType> właściwości i <xref:System.Xml.XmlUrlResolver.GetEntity%2A?displayProperty=nameWithType> metody.  
  
 [!code-csharp[XmlCachingResolver_ex#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlCachingResolver_ex/CS/XmlCachingResolver_ex.cs#1)]
 [!code-vb[XmlCachingResolver_ex#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlCachingResolver_ex/VB/XmlCachingResolver_ex.vb#1)]  
  
 Zachowanie buforowania `XmlCachingResolver` klasy jest zaimplementowana w `GetEntity` metody. Jest to realizowane przez tworzenie nowych <xref:System.Net.WebRequest> i <xref:System.Net.Cache.HttpRequestCachePolicy> obiektów. <xref:System.Net.Cache.HttpRequestCachePolicy> Obiekt jest tworzony przy użyciu <xref:System.Net.Cache.HttpRequestCacheLevel.Default> członkiem <xref:System.Net.Cache.HttpRequestCacheLevel> wyliczenia.  
  
 <xref:System.Net.WebRequest.CachePolicy%2A> Właściwość <xref:System.Net.WebRequest> ustawiono obiektu <xref:System.Net.Cache.HttpRequestCachePolicy> obiektu.  
  
 Wystąpienie `XmlCachingResolver` klasy jest tworzony z `Boolean` `enableHttpCaching`. Jeśli ta wartość jest równa `true`, wystąpienie jest rozpoznawany jako zasób z pamięci podręcznej domyślne, jeśli to możliwe. Gdy `enableHttpCaching` ma ustawioną wartość `false`, wystąpienie stosowanie domyślnego zachowania i usuwa zasoby z ich źródłem.  
  
> [!NOTE]
>  W tym przykładzie korzysta z rozszerzeń klas XML w programie .NET Framework. Inne klasy można ją rozszerzać oraz dostosowywać odpowiednio do potrzeb określonej aplikacji.  
  
   
  
## Examples  
 Poniższy przykład tworzy <xref:System.Xml.XmlReader> używającą <xref:System.Xml.XmlUrlResolver> z domyślnych poświadczeń.  
  
 [!code-csharp[XmlResolver_Samples#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlResolver_Samples/CS/XmlResolver_Samples.cs#1)]
 [!code-vb[XmlResolver_Samples#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlResolver_Samples/VB/XmlResolver_Samples.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public XmlUrlResolver ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlUrlResolver.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; XmlUrlResolver();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Xml.XmlUrlResolver" /> klasy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CachePolicy">
      <MemberSignature Language="C#" Value="public System.Net.Cache.RequestCachePolicy CachePolicy { set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.Cache.RequestCachePolicy CachePolicy" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlUrlResolver.CachePolicy" />
      <MemberSignature Language="VB.NET" Value="Public Property CachePolicy As RequestCachePolicy" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::Cache::RequestCachePolicy ^ CachePolicy {  void set(System::Net::Cache::RequestCachePolicy ^ value); };" />
      <MemberSignature Language="F#" Value="member this.CachePolicy : System.Net.Cache.RequestCachePolicy" Usage="System.Xml.XmlUrlResolver.CachePolicy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.Cache.RequestCachePolicy</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia zasady pamięci podręcznej dla podstawowych <see cref="T:System.Net.WebRequest" /> obiektu.</summary>
        <value>Zasady pamięci podręcznej dla podstawowego żądania sieci web.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Credentials">
      <MemberSignature Language="C#" Value="public override System.Net.ICredentials Credentials { set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.ICredentials Credentials" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlUrlResolver.Credentials" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Credentials As ICredentials" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Net::ICredentials ^ Credentials {  void set(System::Net::ICredentials ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Credentials : System.Net.ICredentials" Usage="System.Xml.XmlUrlResolver.Credentials" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.ICredentials</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Ustawia poświadczenia używane do uwierzytelniania żądań sieci web.</summary>
        <value>Poświadczenia, które ma być używany do uwierzytelniania żądań sieci web. Jeśli ta właściwość nie jest ustawiona, domyślnie przyjmowana jest wartość <see langword="null" />, <see langword="XmlUrlResolver" /> ma żadnych poświadczeń użytkownika.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli katalog wirtualny nie wymaga uwierzytelniania, ta właściwość nie trzeba ustawić. W przeciwnym razie należy podać poświadczenia użytkownika.  
  
 Można skojarzyć z różnych identyfikatorów URI różnych poświadczeń i dodaj je do pamięci podręcznej. Można następnie używać poświadczeń do sprawdzenia uwierzytelniania różne identyfikatory URI, niezależnie od oryginalnego źródła kodu XML.  
  
 Poniższy kod C# przedstawia sposób ustawiania <xref:System.Xml.XmlUrlResolver.Credentials%2A> właściwości do pamięci podręcznej poświadczeń.  
  
```csharp  
NetworkCredential myCred = new NetworkCredential(UserName,SecurelyStoredPassword,Domain);   
CredentialCache myCache = new CredentialCache();   
myCache.Add(new Uri("http://www.contoso.com/"), "Basic", myCred);   
myCache.Add(new Uri("http://app.contoso.com/"), "Basic", myCred);  
XmlUrlResolver resolver = new XmlUrlResolver();  
resolver.Credentials = myCache;  
```  
  
   
  
## Examples  
 Poniższy przykład tworzy <xref:System.Xml.XmlUrlResolver> obiektu przy użyciu poświadczeń. <xref:System.Xml.XmlReader> Używa poświadczeń na <xref:System.Xml.XmlUrlResolver> obiekt do dostępu do zasobu sieciowego.  
  
 [!code-csharp[XmlResolver_Samples#2](~/samples/snippets/csharp/VS_Snippets_Data/XmlResolver_Samples/CS/XmlResolver_Samples.cs#2)]
 [!code-vb[XmlResolver_Samples#2](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlResolver_Samples/VB/XmlResolver_Samples.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.CredentialCache" />
        <altmember cref="T:System.Net.NetworkCredential" />
      </Docs>
    </Member>
    <Member MemberName="GetEntity">
      <MemberSignature Language="C#" Value="public override object GetEntity (Uri absoluteUri, string role, Type ofObjectToReturn);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object GetEntity(class System.Uri absoluteUri, string role, class System.Type ofObjectToReturn) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlUrlResolver.GetEntity(System.Uri,System.String,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetEntity (absoluteUri As Uri, role As String, ofObjectToReturn As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Object ^ GetEntity(Uri ^ absoluteUri, System::String ^ role, Type ^ ofObjectToReturn);" />
      <MemberSignature Language="F#" Value="override this.GetEntity : Uri * string * Type -&gt; obj" Usage="xmlUrlResolver.GetEntity (absoluteUri, role, ofObjectToReturn)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="absoluteUri" Type="System.Uri" />
        <Parameter Name="role" Type="System.String" />
        <Parameter Name="ofObjectToReturn" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="absoluteUri">Identyfikator URI zwrócony z <see cref="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)" />.</param>
        <param name="role">Obecnie nieużywane.</param>
        <param name="ofObjectToReturn">Typ obiektu, który będzie zwracany. Bieżąca implementacja zwraca tylko <see cref="T:System.IO.Stream" /> obiektów.</param>
        <summary>Identyfikator URI jest mapowany na obiekt, który zawiera zasobów.</summary>
        <returns>Obiekt stream lub <see langword="null" /> Jeśli określono typ innych niż strumienia.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda jest używana, gdy obiekt wywołujący chce mapy dany identyfikator URI do obiektu, który zawiera zasób, który reprezentuje identyfikator URI.  
  
 Asynchroniczne wersja tej metody dla <xref:System.Xml.XmlUrlResolver.GetEntityAsync%2A>.  
  
> [!IMPORTANT]
>  Aplikacji można ograniczyć pamięci odmowa usługi zagrożeń <xref:System.Xml.XmlUrlResolver.GetEntity%2A> metody dzięki implementacji IStream <xref:System.Runtime.InteropServices.ComTypes.IStream> Aby ograniczyć liczbę bajtów do odczytu. Dzięki temu, chronią przed sytuacji, gdy próbuje nieskończone strumień bajtów do przekazania złośliwego kodu <xref:System.Xml.XmlUrlResolver.GetEntity%2A> metody.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano `GetEntity` i <xref:System.Xml.XmlResolver.ResolveUri%2A> metody.  
  
 [!code-cpp[Classic WebData XmlUrlResolver.ResolveUri Example#1](~/samples/snippets/cpp/VS_Snippets_Data/Classic WebData XmlUrlResolver.ResolveUri Example/CPP/source.cpp#1)]
 [!code-csharp[Classic WebData XmlUrlResolver.ResolveUri Example#1](~/samples/snippets/csharp/VS_Snippets_Data/Classic WebData XmlUrlResolver.ResolveUri Example/CS/source.cs#1)]
 [!code-vb[Classic WebData XmlUrlResolver.ResolveUri Example#1](~/samples/snippets/visualbasic/VS_Snippets_Data/Classic WebData XmlUrlResolver.ResolveUri Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XmlException">
          <paramref name="ofObjectToReturn" /> nie jest ani <see langword="null" /> ani <see langword="Stream" /> typu.</exception>
        <exception cref="T:System.UriFormatException">Określony identyfikator URI nie jest bezwzględnym identyfikatorem URI.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="absoluteUri" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.Exception">Istnieje błąd w czasie wykonywania (na przykład połączenie serwera przerwania).</exception>
        <altmember cref="T:System.Uri" />
      </Docs>
    </Member>
    <Member MemberName="GetEntityAsync">
      <MemberSignature Language="C#" Value="public override System.Threading.Tasks.Task&lt;object&gt; GetEntityAsync (Uri absoluteUri, string role, Type ofObjectToReturn);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Threading.Tasks.Task`1&lt;object&gt; GetEntityAsync(class System.Uri absoluteUri, string role, class System.Type ofObjectToReturn) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlUrlResolver.GetEntityAsync(System.Uri,System.String,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetEntityAsync (absoluteUri As Uri, role As String, ofObjectToReturn As Type) As Task(Of Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Threading::Tasks::Task&lt;System::Object ^&gt; ^ GetEntityAsync(Uri ^ absoluteUri, System::String ^ role, Type ^ ofObjectToReturn);" />
      <MemberSignature Language="F#" Value="override this.GetEntityAsync : Uri * string * Type -&gt; System.Threading.Tasks.Task&lt;obj&gt;" Usage="xmlUrlResolver.GetEntityAsync (absoluteUri, role, ofObjectToReturn)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Diagnostics.DebuggerStepThrough</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Runtime.CompilerServices.AsyncStateMachine(typeof(System.Xml.XmlUrlResolver/&lt;GetEntityAsync&gt;c__async0))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="absoluteUri" Type="System.Uri" />
        <Parameter Name="role" Type="System.String" />
        <Parameter Name="ofObjectToReturn" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="absoluteUri">Identyfikator URI zwrócony z <see cref="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)" />.</param>
        <param name="role">Obecnie nieużywane.</param>
        <param name="ofObjectToReturn">Typ obiektu, który będzie zwracany. Bieżąca implementacja zwraca tylko <see cref="T:System.IO.Stream" /> obiektów.</param>
        <summary>Asynchronicznie identyfikatora URI jest mapowany na obiekt, który zawiera zasobów.</summary>
        <returns>Obiekt stream lub <see langword="null" /> Jeśli określono typ innych niż strumienia.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Proxy">
      <MemberSignature Language="C#" Value="public System.Net.IWebProxy Proxy { set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.IWebProxy Proxy" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlUrlResolver.Proxy" />
      <MemberSignature Language="VB.NET" Value="Public Property Proxy As IWebProxy" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Net::IWebProxy ^ Proxy {  void set(System::Net::IWebProxy ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Proxy : System.Net.IWebProxy" Usage="System.Xml.XmlUrlResolver.Proxy" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.IWebProxy</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia sieciowego serwera proxy dla podstawowych <see cref="T:System.Net.WebRequest" /> obiektu.</summary>
        <value>
          <see cref="T:System.Net.IWebProxy" /> Na potrzeby dostępu do zasobu internetowego.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ResolveUri">
      <MemberSignature Language="C#" Value="public override Uri ResolveUri (Uri baseUri, string relativeUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.Uri ResolveUri(class System.Uri baseUri, string relativeUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlUrlResolver.ResolveUri(System.Uri,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ResolveUri (baseUri As Uri, relativeUri As String) As Uri" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override Uri ^ ResolveUri(Uri ^ baseUri, System::String ^ relativeUri);" />
      <MemberSignature Language="F#" Value="override this.ResolveUri : Uri * string -&gt; Uri" Usage="xmlUrlResolver.ResolveUri (baseUri, relativeUri)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="baseUri" Type="System.Uri" />
        <Parameter Name="relativeUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="baseUri">Podstawowy identyfikator URI używany do rozpoznania względnym identyfikatorem URI.</param>
        <param name="relativeUri">Identyfikator URI do rozpoznania. Identyfikator URI może być bezwzględny lub względny. Jeśli bezwzględne, ta wartość skutecznie zastępuje <c>baseUri</c> wartości. Jeśli względną, składa się z <c>baseUri</c> być bezwzględnym identyfikatorem URI.</param>
        <summary>Rozpoznaje bezwzględnego identyfikatora URI z podstawową i względne identyfikatory URI.</summary>
        <returns>Bezwzględny identyfikator URI lub <see langword="null" /> Jeśli względny identyfikator URI nie można rozpoznać.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bezwzględny identyfikator URI może służyć jako podstawowy identyfikator URI dla kolejnych żądań dla jednostek, które są względem tego identyfikatora URI.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="baseUri" /> jest <see langword="null" /> lub <paramref name="relativeUri" /> jest <see langword="null" />.</exception>
        <block subset="none" type="overrides">
          <para>Ta metoda ma żądanie dziedziczenia. Pełne zaufanie jest wymagany do przesłonięcia <see cref="M:System.Xml.XmlUrlResolver.ResolveUri(System.Uri,System.String)" /> metody.</para>
        </block>
      </Docs>
    </Member>
  </Members>
</Type>