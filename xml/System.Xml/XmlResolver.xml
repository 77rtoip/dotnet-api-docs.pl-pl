<Type Name="XmlResolver" FullName="System.Xml.XmlResolver">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="4e8dd834c0589e42bed6b775b87844780af84075" />
    <Meta Name="ms.sourcegitcommit" Value="d877ae76e9e11799bf919379507239e2c4072742" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="08/09/2018" />
    <Meta Name="ms.locfileid" Value="39845390" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class XmlResolver" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit XmlResolver extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Xml.XmlResolver" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class XmlResolver" />
  <TypeSignature Language="C++ CLI" Value="public ref class XmlResolver abstract" />
  <TypeSignature Language="F#" Value="type XmlResolver = class" />
  <AssemblyInfo>
    <AssemblyName>System.Xml</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Usuwa zasoby zewnętrzne XML o nazwie przez jednolite zasobów identyfikator (URI).</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Xml.XmlResolver> Typ jest używany do rozpoznawania zasobów XML zewnętrznych, takich jak jednostki, definicji typu dokumentu (pliki DTD) lub schematów. Jest również używany do procesu obejmują i importowanie elementów znalezionych w arkusza stylów języka XSL (Extensible) arkuszy stylów lub schematów języka (XSD) definicji schematu XML.  
  
 <xref:System.Xml.XmlResolver> obsługuje wszystkie aspekty negocjowania połączenia do zasobów, w tym obsługa poświadczenia zabezpieczeń, Otwieranie połączenia ze źródłem danych i zwracanie zasób w postaci strumienia lub innego typu obiektu. Obiekt, który wywołuje <xref:System.Xml.XmlResolver> ma za zadanie interpretowanie strumienia.  
  
 <xref:System.Xml> Przestrzeń nazw zawiera dwa konkretnych implementacji <xref:System.Xml.XmlResolver> klasy:  
  
-   <xref:System.Xml.XmlUrlResolver> jest domyślny mechanizm rozwiązywania konfliktów dla wszystkich klas w <xref:System.Xml> przestrzeni nazw. Obsługuje ona `file://` i `http://` protokoły i żąda od <xref:System.Net.WebRequest?displayProperty=nameWithType> klasy. Przykłady rozszerzania klasy, aby zwiększyć wydajność, zobacz <xref:System.Xml.XmlUrlResolver> odwołania do stron.  
  
-   <xref:System.Xml.XmlSecureResolver> ułatwia zabezpieczenie innego <xref:System.Xml.XmlResolver> obiektu zawijania dla obiektu i ograniczając zasoby, które mogą uzyskać dostęp. Na przykład <xref:System.Xml.XmlSecureResolver> może uniemożliwić dostęp do określonych witryn internetowych lub strefy.  
  
 Można utworzyć i określić własny mechanizm rozpoznawania. Jeśli nie określisz program rozpoznawania nazw czytnik używa domyślnego <xref:System.Xml.XmlUrlResolver> bez poświadczeń użytkownika.  
  
 Należy określić <xref:System.Xml.XmlResolver> do użycia przez ustawienie <xref:System.Xml.XmlReaderSettings.XmlResolver%2A?displayProperty=nameWithType> właściwość i przekazywanie <xref:System.Xml.XmlReaderSettings> obiekt <xref:System.Xml.XmlReader.Create%2A> metody.  
  
 Jeśli dany zasób jest przechowywany w systemie, który wymaga uwierzytelniania, możesz użyć <xref:System.Xml.XmlResolver.Credentials%2A?displayProperty=nameWithType> właściwości w celu określenia niezbędnych poświadczeń.  
  
## <a name="supplying-authentication-credentials"></a>Dostarczanie poświadczeń uwierzytelniania  
 Plik, który zawiera dane XML do odczytu może mieć zasady ograniczonego dostępu. Jeśli uwierzytelnianie jest wymagane do dostępu do zasobu sieciowego, należy użyć <xref:System.Xml.XmlResolver.Credentials%2A> właściwości w celu określenia niezbędnych poświadczeń. Jeśli <xref:System.Xml.XmlResolver.Credentials%2A> właściwość nie jest ustawiona, poświadczenia są ustawione na `null`.  
  
 Na przykład załóżmy, że poświadczenia są wymagane, gdy żądanie danych z sieci web na potrzeby uwierzytelniania. Jeśli katalog wirtualny sieci web zezwala na dostęp anonimowy, należy ustawić <xref:System.Xml.XmlResolver.Credentials%2A> właściwość, aby podać poświadczenia. Poniższy przykład tworzy <xref:System.Xml.XmlReader> obiektu, który używa <xref:System.Xml.XmlUrlResolver> przy użyciu domyślnych poświadczeń w celu uzyskania dostępu do http://localhost/bookstore/inventory.xml lokacji.  
  
 [!code-cpp[XmlReaderSettings.cctor#2](~/samples/snippets/cpp/VS_Snippets_Data/XmlReaderSettings.cctor/CPP/XmlReaderSettings.cctor.cpp#2)]
 [!code-csharp[XmlReaderSettings.cctor#2](~/samples/snippets/csharp/VS_Snippets_Data/XmlReaderSettings.cctor/CS/factory_rdr_cctor2.cs#2)]
 [!code-vb[XmlReaderSettings.cctor#2](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlReaderSettings.cctor/VB/factory_rdr_cctor2.vb#2)]  
  
 Możesz podać inne poświadczenia dla różnych identyfikatorów URI i dodać je do pamięci podręcznej. Te poświadczenia są używane do sprawdzania uwierzytelniania dla różnych identyfikatorów URI, niezależnie od oryginalnego źródła XML. Poniższy przykład pokazuje, jak dodać poświadczeń do pamięci podręcznej.  
  
 [!code-csharp[XslCompiledTransform.Load#11](~/samples/snippets/csharp/VS_Snippets_Data/XslCompiledTransform.Load/CS/Xslt_Load_v2.cs#11)]
 [!code-vb[XslCompiledTransform.Load#11](~/samples/snippets/visualbasic/VS_Snippets_Data/XslCompiledTransform.Load/VB/Xslt_Load_v2.vb#11)]  
  
## <a name="security-considerations"></a>Zagadnienia dotyczące bezpieczeństwa  
 Należy wziąć pod uwagę następujące elementy podczas pracy z <xref:System.Xml.XmlResolver> klasy.  
  
-   <xref:System.Xml.XmlResolver> obiekty mogą zawierać poufne informacje, takie jak poświadczenia użytkownika. Należy zachować ostrożność podczas buforowania <xref:System.Xml.XmlResolver> obiektów i nie mają być przekazywane <xref:System.Xml.XmlResolver> obiektu niezaufany składnik.  
  
-   W przypadku projektowania właściwość klasy, która używa <xref:System.Xml.XmlResolver> klasy, właściwość powinna być zdefiniowana jako właściwość tylko do zapisu. Właściwość może służyć do określania <xref:System.Xml.XmlResolver> do użycia, ale nie może służyć do zwrócenia <xref:System.Xml.XmlResolver> obiektu.  
  
-   Jeśli Twoja aplikacja akceptuje <xref:System.Xml.XmlResolver> obiektów z niezaufanego kodu, nie można zakładać, że identyfikator URI przekazywany do <xref:System.Xml.XmlResolver.GetEntity%2A> będzie taki sam jak zwracany przez metodę <xref:System.Xml.XmlResolver.ResolveUri%2A> metody. Klasy pochodne <xref:System.Xml.XmlResolver> zastępować <xref:System.Xml.XmlResolver.GetEntity%2A> metody i wróć danych, który jest inny niż zawarte w oryginalnego identyfikatora URI.  
  
-   Aplikacja pozwala ograniczyć typu "odmowa pamięci" service zagrożeń <xref:System.Xml.XmlResolver.GetEntity%2A> metoda implementując <xref:System.Runtime.InteropServices.ComTypes.IStream> , która ogranicza liczbę odczytanych bajtów. To pomaga zabezpieczyć się przed sytuacji, w których złośliwy kod próbuje przekazać nieskończonej strumień bajtów, które mają <xref:System.Xml.XmlResolver.GetEntity%2A> metody.  
  
   
  
## Examples  
 Poniższy przykład tworzy <xref:System.Xml.XmlUrlResolver> przy użyciu poświadczeń domyślnych. A <xref:System.Xml.XmlReader> służy do odczytywania i wyświetlić wynikowy strumień danych.  
  
 [!code-csharp[XmlResolver_ex#1](~/samples/snippets/csharp/VS_Snippets_Data/XmlResolver_ex/CS/XmlResolver_ex.cs#1)]
 [!code-vb[XmlResolver_ex#1](~/samples/snippets/visualbasic/VS_Snippets_Data/XmlResolver_ex/VB/XmlResolver_ex.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected XmlResolver ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlResolver.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; XmlResolver();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Xml.XmlResolver" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor jest wywoływany przez Konstruktory klasy pochodnej do zainicjowania stanu, w tym typie.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Credentials">
      <MemberSignature Language="C#" Value="public virtual System.Net.ICredentials Credentials { set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Net.ICredentials Credentials" />
      <MemberSignature Language="DocId" Value="P:System.Xml.XmlResolver.Credentials" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Credentials As ICredentials" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Net::ICredentials ^ Credentials {  void set(System::Net::ICredentials ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Credentials : System.Net.ICredentials" Usage="System.Xml.XmlResolver.Credentials" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Net.ICredentials</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>W przypadku przesłonięcia w klasie pochodnej, ustawia poświadczenia używane do uwierzytelniania żądań sieci web.</summary>
        <value>Poświadczenia, które mają być używane do uwierzytelniania żądań sieci web. Jeśli ta właściwość nie jest ustawiona, ma domyślnie wartość <see langword="null" />, czyli <see langword="XmlResolver" /> nie ma użytkownika poświadczeń.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli katalog wirtualny nie wymaga uwierzytelniania, ta właściwość nie muszą być ustawione. W przeciwnym razie należy podać poświadczenia użytkownika.  
  
 Poniższy kod C# Ustawia poświadczenia <xref:System.Xml.XmlResolver> obiektu.  
  
```csharp  
NetworkCredential nc = new NetworkCredential(UserName, SecurelyStoredPassword, Domain);  
XmlUrlResolver resolver = new XmlUrlResolver();  
resolver.Credentials = nc;  
```  
  
 Można skojarzyć inne poświadczenia z różnych identyfikatorów URI i dodać je do pamięci podręcznej. Następnie można poświadczenia Sprawdź uwierzytelniania dla różnych identyfikatorów URI, niezależnie od oryginalnego źródła XML.  
  
```csharp  
NetworkCredential myCred = new NetworkCredential(UserName, SecurelyStoredPassword, Domain);   
CredentialCache myCache = new CredentialCache();   
myCache.Add(new Uri("http://www.contoso.com/"), "Basic", myCred);   
myCache.Add(new Uri("http://app.contoso.com/"), "Basic", myCred);  
XmlUrlResolver resolver = new XmlUrlResolver();  
resolver.Credentials = myCache;  
```  
  
   
  
## Examples  
 Zobacz <xref:System.Xml.XmlUrlResolver.Credentials%2A?displayProperty=nameWithType> przykład, która używa tej właściwości.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Net.CredentialCache" />
        <altmember cref="T:System.Net.NetworkCredential" />
      </Docs>
    </Member>
    <Member MemberName="GetEntity">
      <MemberSignature Language="C#" Value="public abstract object GetEntity (Uri absoluteUri, string role, Type ofObjectToReturn);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetEntity(class System.Uri absoluteUri, string role, class System.Type ofObjectToReturn) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlResolver.GetEntity(System.Uri,System.String,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetEntity (absoluteUri As Uri, role As String, ofObjectToReturn As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract System::Object ^ GetEntity(Uri ^ absoluteUri, System::String ^ role, Type ^ ofObjectToReturn);" />
      <MemberSignature Language="F#" Value="abstract member GetEntity : Uri * string * Type -&gt; obj" Usage="xmlResolver.GetEntity (absoluteUri, role, ofObjectToReturn)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="absoluteUri" Type="System.Uri" />
        <Parameter Name="role" Type="System.String" />
        <Parameter Name="ofObjectToReturn" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="absoluteUri">Identyfikator URI zwrócone w wyniku <see cref="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)" />.</param>
        <param name="role">Obecnie nieużywane.</param>
        <param name="ofObjectToReturn">Typ obiektu, który będzie zwracany. Bieżąca wersja zwraca tylko obiekty System.IO.Stream.</param>
        <summary>W przypadku przesłonięcia w klasie pochodnej, mapuje identyfikatora URI do obiektu, który zawiera rzeczywiste zasób.</summary>
        <returns>Obiekt strumienia lub <see langword="null" /> Jeśli określono typu innego niż strumienia.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda jest używana, gdy obiekt wywołujący chce, aby mapować danego identyfikatora URI do obiektu zawierającego rzeczywistego zasobu, który reprezentuje identyfikator URI. Typ obiektu, zwracany jest negotiable; Jednak implementacja zawsze musi obsługiwać <xref:System.IO.Stream?displayProperty=nameWithType>.  
  
 Asynchroniczne wersja tej metody dla <xref:System.Xml.XmlResolver.GetEntityAsync%2A>.  
  
> [!IMPORTANT]
>  Aplikacja pozwala ograniczyć typu "odmowa pamięci" service zagrożeń <xref:System.Xml.XmlResolver.GetEntity%2A> metoda implementując <xref:System.Runtime.InteropServices.ComTypes.IStream> , która ogranicza liczbę odczytanych bajtów. To pomaga zabezpieczyć się przed sytuacji, w których złośliwy kod próbuje przekazać nieskończonej strumień bajtów, które mają <xref:System.Xml.XmlResolver.GetEntity%2A> metody.  
  
   
  
## Examples  
 Zobacz <xref:System.Xml.XmlUrlResolver.GetEntity%2A?displayProperty=nameWithType> na przykład przy użyciu tej metody.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Xml.XmlException">
          <paramref name="ofObjectToReturn" /> nie jest <see langword="Stream" /> typu.</exception>
        <exception cref="T:System.UriFormatException">Określony identyfikator URI nie jest bezwzględny identyfikator URI.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="absoluteUri" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.Exception">Istnieje błąd w czasie wykonywania (na przykład, przerwane połączenie z serwerem).</exception>
      </Docs>
    </Member>
    <Member MemberName="GetEntityAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;object&gt; GetEntityAsync (Uri absoluteUri, string role, Type ofObjectToReturn);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;object&gt; GetEntityAsync(class System.Uri absoluteUri, string role, class System.Type ofObjectToReturn) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlResolver.GetEntityAsync(System.Uri,System.String,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function GetEntityAsync (absoluteUri As Uri, role As String, ofObjectToReturn As Type) As Task(Of Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Threading::Tasks::Task&lt;System::Object ^&gt; ^ GetEntityAsync(Uri ^ absoluteUri, System::String ^ role, Type ^ ofObjectToReturn);" />
      <MemberSignature Language="F#" Value="abstract member GetEntityAsync : Uri * string * Type -&gt; System.Threading.Tasks.Task&lt;obj&gt;&#xA;override this.GetEntityAsync : Uri * string * Type -&gt; System.Threading.Tasks.Task&lt;obj&gt;" Usage="xmlResolver.GetEntityAsync (absoluteUri, role, ofObjectToReturn)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;System.Object&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="absoluteUri" Type="System.Uri" />
        <Parameter Name="role" Type="System.String" />
        <Parameter Name="ofObjectToReturn" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="absoluteUri">Identyfikator URI zwrócone w wyniku <see cref="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)" />.</param>
        <param name="role">Obecnie nieużywane.</param>
        <param name="ofObjectToReturn">Typ obiektu, który będzie zwracany. Zwraca tylko bieżącej wersji <see cref="T:System.IO.Stream" /> obiektów.</param>
        <summary>Asynchronicznie mapuje identyfikatora URI do obiektu, który zawiera rzeczywiste zasób.</summary>
        <returns>Obiekt strumienia lub <see langword="null" /> Jeśli określono typu innego niż strumienia.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jest to wersja asynchroniczna <xref:System.Xml.XmlResolver.GetEntity%2A>, z tą samą funkcjonalnością. Aby użyć tej metody, należy ustawić <xref:System.Xml.XmlReaderSettings.Async%2A> flaga `true`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResolveUri">
      <MemberSignature Language="C#" Value="public virtual Uri ResolveUri (Uri baseUri, string relativeUri);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Uri ResolveUri(class System.Uri baseUri, string relativeUri) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlResolver.ResolveUri(System.Uri,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ResolveUri (baseUri As Uri, relativeUri As String) As Uri" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual Uri ^ ResolveUri(Uri ^ baseUri, System::String ^ relativeUri);" />
      <MemberSignature Language="F#" Value="abstract member ResolveUri : Uri * string -&gt; Uri&#xA;override this.ResolveUri : Uri * string -&gt; Uri" Usage="xmlResolver.ResolveUri (baseUri, relativeUri)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="baseUri" Type="System.Uri" />
        <Parameter Name="relativeUri" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="baseUri">Podstawowy identyfikator URI używany do rozpoznawania względnym identyfikatorem URI.</param>
        <param name="relativeUri">Identyfikator URI, aby rozwiązać. Identyfikator URI może być bezwzględny lub względny. Jeśli wartość bezwzględną, ta wartość skutecznie zastępuje <c>baseUri</c> wartości. Jeśli względną łączy z <c>baseUri</c> być bezwzględnym identyfikatorem URI.</param>
        <summary>W przypadku przesłonięcia w klasie pochodnej, jest rozpoznawany jako bezwzględny identyfikator URI z podstawowego i względne identyfikatory URI.</summary>
        <returns>Bezwzględny identyfikator URI lub <see langword="null" /> Jeśli względnym identyfikatorem URI nie można rozpoznać.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Bezwzględny identyfikator URI może służyć jako podstawowy identyfikator URI dla jakimikolwiek kolejnymi żądaniami dla jednostek, które są względne wobec tego identyfikatora URI.  
  
   
  
## Examples  
 Zobacz <xref:System.Xml.XmlUrlResolver.GetEntity%2A?displayProperty=nameWithType> przykład, który używa tej metody.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="relativeUri" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="SupportsType">
      <MemberSignature Language="C#" Value="public virtual bool SupportsType (Uri absoluteUri, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool SupportsType(class System.Uri absoluteUri, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Xml.XmlResolver.SupportsType(System.Uri,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool SupportsType(Uri ^ absoluteUri, Type ^ type);" />
      <MemberSignature Language="F#" Value="abstract member SupportsType : Uri * Type -&gt; bool&#xA;override this.SupportsType : Uri * Type -&gt; bool" Usage="xmlResolver.SupportsType (absoluteUri, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Xml</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Xml.ReaderWriter</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="absoluteUri" Type="System.Uri" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="absoluteUri">Identyfikator URI.</param>
        <param name="type">Typ do zwrócenia.</param>
        <summary>Zapewnia mechanizm rozpoznawania do zwracanych typów innych niż <see cref="T:System.IO.Stream" />.</summary>
        <returns>
          <see langword="true" /> Jeśli <paramref name="type" /> jest obsługiwana; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>