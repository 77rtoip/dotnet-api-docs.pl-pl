<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="IStreamProvider.xml" source-language="en-US" target-language="pl-PL">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-15c36f0" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">02cd5861-7ce2-4a82-b358-31f8435a0ac51e968e06adde58ff690aa9a2ded2e2fcf2ea66a7.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1e968e06adde58ff690aa9a2ded2e2fcf2ea66a7</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/03/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-2.0,netcore-2.1,netframework-4.5.1,netframework-4.5.2,netframework-4.5,netframework-4.6.1,netframework-4.6.2,netframework-4.6,netframework-4.7.1,netframework-4.7,netstandard-2.0,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" uid="T:System.Xml.IStreamProvider">
          <source>Represents an interface that can be implemented by classes providing streams.</source>
          <target state="translated">Reprezentuje interfejs, który może być zaimplementowany przez klasy dostarczanie strumieni.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.IStreamProvider">
          <source>When writing an outgoing message containing a streamed body to an XML writer, the <ph id="ph1">&lt;xref:System.ServiceModel.Channels.Message&gt;</ph> will use a sequence of calls similar to the following in its <ph id="ph2">&lt;xref:System.ServiceModel.Channels.Message.OnWriteBodyContents%28System.Xml.XmlDictionaryWriter%29&gt;</ph> implementation:</source>
          <target state="translated">Podczas zapisywania wiadomości wychodzącej przesyłanej strumieniowo treści do edytora XML zawierający <ph id="ph1">&lt;xref:System.ServiceModel.Channels.Message&gt;</ph> użyje sekwencję wywołań podobne do następujących w jego <ph id="ph2">&lt;xref:System.ServiceModel.Channels.Message.OnWriteBodyContents%28System.Xml.XmlDictionaryWriter%29&gt;</ph> implementacji:</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.IStreamProvider">
          <source>Write any necessary information preceding the stream (For example, the opening XML tag).</source>
          <target state="translated">Zapisać wszelkie niezbędne informacje poprzedzających strumienia (na przykład otwierający XML tag).</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.IStreamProvider">
          <source>Write the stream.</source>
          <target state="translated">Zapisu strumienia.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.IStreamProvider">
          <source>Write any information following the stream (For example, the closing XML tag).</source>
          <target state="translated">Zapis żadnych informacji po strumienia (na przykład zamykający XML tag).</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.IStreamProvider">
          <source>This works well with encodings that are similar to the textual XML encoding.</source>
          <target state="translated">To dobrze działa z kodowania, które są podobne do kodowania tekstowy XML.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.IStreamProvider">
          <source>However, there are some encodings that do not place XML infoset information (For example, tags for starting and ending XML elements) together with the data contained within elements.</source>
          <target state="translated">Istnieją pewne kodowania, który nie należy umieszczać XML typu infoset informacji (na przykład znaczników początkowych i końcowych elementów XML) wraz z danych zawartych w elementów.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.IStreamProvider">
          <source>For example, in the MTOM encoding, the message is split into multiple parts.</source>
          <target state="translated">Na przykład w kodowanie MTOM wiadomość jest podzielony na wiele części.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.IStreamProvider">
          <source>One part contains the XML infoset, which may contain references to other parts for actual element contents.</source>
          <target state="translated">Jedną część zawiera XML typu infoset, który może zawierać odwołania do innych części dla elementu rzeczywistej zawartości.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.IStreamProvider">
          <source>Since the XML infoset will normally be small compared to the streamed contents, it makes sense to buffer the infoset, write it out, and then write the contents in a streamed way.</source>
          <target state="translated">Ponieważ XML typu infoset sprawdzonych zazwyczaj będzie małe w porównaniu z przesyłaną strumieniowo zawartość, warto buforu typu infoset, zapisać go, a następnie wpisz zawartość w sposób przesyłany strumieniowo.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.IStreamProvider">
          <source>This means that by the time the closing element tag is written, we should not have written out the stream yet.</source>
          <target state="translated">Oznacza to, że do czasu zamknięcia tagu elementu są zapisywane, firma Microsoft nie powinien mieć zapisywany limit strumienia jeszcze.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.IStreamProvider">
          <source>For this purpose, the <ph id="ph1">&lt;xref:System.Xml.IStreamProvider&gt;</ph> interface is used.</source>
          <target state="translated">W tym celu <ph id="ph1">&lt;xref:System.Xml.IStreamProvider&gt;</ph> używany jest interfejs.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.IStreamProvider">
          <source>The interface has a <ph id="ph1">&lt;xref:System.Xml.IStreamProvider.GetStream&gt;</ph> method that returns the stream to be written.</source>
          <target state="translated">Interfejs ma <ph id="ph1">&lt;xref:System.Xml.IStreamProvider.GetStream&gt;</ph> metodę, która zwraca strumień do zapisania.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.IStreamProvider">
          <source>The correct way to write out a streamed message body in <ph id="ph1">&lt;xref:System.ServiceModel.Channels.Message.OnWriteBodyContents%28System.Xml.XmlDictionaryWriter%29&gt;</ph> is as follows:</source>
          <target state="translated">Do zapisał komunikat przesyłany strumieniowo treści w prawidłowy sposób <ph id="ph1">&lt;xref:System.ServiceModel.Channels.Message.OnWriteBodyContents%28System.Xml.XmlDictionaryWriter%29&gt;</ph> wygląda następująco:</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.IStreamProvider">
          <source>Write any necessary information preceding the stream (For example, the opening XML tag)</source>
          <target state="translated">Zapisuje wszystkie niezbędne informacje o poprzedzających strumienia (na przykład otwierający XML tag)</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.IStreamProvider">
          <source>Call the <ph id="ph1">`WriteValue`</ph> overload on the <ph id="ph2">&lt;xref:System.Xml.XmlDictionaryWriter&gt;</ph> that takes an <ph id="ph3">&lt;xref:System.Xml.IStreamProvider&gt;</ph>, with an <ph id="ph4">`IStreamProvider`</ph> implementation that returns the stream to be written.</source>
          <target state="translated">Wywołanie <ph id="ph1">`WriteValue`</ph> przeciążenia na <ph id="ph2">&lt;xref:System.Xml.XmlDictionaryWriter&gt;</ph> pobierającej <ph id="ph3">&lt;xref:System.Xml.IStreamProvider&gt;</ph>, z <ph id="ph4">`IStreamProvider`</ph> implementację, która zwraca strumień do zapisania.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.IStreamProvider">
          <source>Write any information following the stream (For example, the closing XML tag)</source>
          <target state="translated">Zapisywanie żadnych informacji po strumienia (na przykład zamykający XML tag)</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.IStreamProvider">
          <source>With this approach, the XML writer has a choice of when to call <ph id="ph1">&lt;xref:System.Xml.IStreamProvider.GetStream&gt;</ph> and write out the streamed data.</source>
          <target state="translated">Z tej metody edytora XML może wybrać kiedy wywołać metodę <ph id="ph1">&lt;xref:System.Xml.IStreamProvider.GetStream&gt;</ph> i zapisać dane przesyłany strumieniowo.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.IStreamProvider">
          <source>For example, the textual and binary XML writers will call it immediately and write out the streamed contents in between the start and end tags.</source>
          <target state="translated">Na przykład zapisywania XML tekstową i binarne wywołują go bezpośrednio i zapisać przesyłanej strumieniowo zawartość między tagiem początkowym i końcowym.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Xml.IStreamProvider">
          <source>The MTOM writer may decide to call <ph id="ph1">&lt;xref:System.Xml.IStreamProvider.GetStream&gt;</ph> later, when it is ready to write the appropriate part of the message.</source>
          <target state="translated">Modułu zapisującego MTOM może podjąć <ph id="ph1">&lt;xref:System.Xml.IStreamProvider.GetStream&gt;</ph> później, gdy będzie gotowy do zapisu w odpowiedniej części wiadomości.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Xml.IStreamProvider.GetStream">
          <source>Gets a stream.</source>
          <target state="translated">Pobiera strumień.</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Xml.IStreamProvider.GetStream">
          <source>A <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> object.</source>
          <target state="translated">A <ph id="ph1">&lt;see cref="T:System.IO.Stream" /&gt;</ph> obiektu.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Xml.IStreamProvider.GetStream">
          <source>This method can be used to return the stream to be written.</source>
          <target state="translated">Ta metoda może służyć do zwrócić strumień, który ma zostać zapisany.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Xml.IStreamProvider.ReleaseStream(System.IO.Stream)">
          <source>The stream being released.</source>
          <target state="translated">Strumień został wydany.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" uid="M:System.Xml.IStreamProvider.ReleaseStream(System.IO.Stream)">
          <source>Releases a stream to output.</source>
          <target state="translated">Zwalnia strumienia wyjściowego.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>