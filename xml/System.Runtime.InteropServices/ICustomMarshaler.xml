<Type Name="ICustomMarshaler" FullName="System.Runtime.InteropServices.ICustomMarshaler">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="96e612f036008e38d852a9b63135ce9093ba596a" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30564502" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface ICustomMarshaler" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ICustomMarshaler" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.InteropServices.ICustomMarshaler" />
  <TypeSignature Language="VB.NET" Value="Public Interface ICustomMarshaler" />
  <TypeSignature Language="C++ CLI" Value="public interface class ICustomMarshaler" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime.InteropServices</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Zawiera niestandardowe otoki obsługi wywołań metody.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Organizator zapewnia mostka między funkcjonalność starych i nowych interfejsów. Przekazywanie niestandardowych zapewnia następujące korzyści:  
  
-   Umożliwia aplikacji klienckich, które zostały zaprojektowane do pracy z interfejsem starego także pracować z serwerów, które implementują nowy interfejs.  
  
-   Umożliwia aplikacji klienckich zaprojektowane do pracy z nowego interfejsu do pracy z serwerami, które implementują interfejs stary.  
  
 Jeśli masz interfejs powoduje to wprowadzenie różnych zachowanie marshalingu lub które do składnika modelu COM (Object) będzie widoczne w inny sposób, można zaprojektować organizatora niestandardowego zamiast międzyoperacyjnego organizatora. Za pomocą organizatora niestandardowego, można zminimalizować rozróżnianie nowych składników platformy .NET Framework i istniejące składniki COM.  
  
 Załóżmy na przykład, czy tworzysz interfejsu zarządzanego o nazwie `INew`. Gdy ten interfejs jest uwidaczniany w modelu COM za pomocą standardowych wywoływana otoka COM (CCW), ma tych samych metod co zarządzanego interfejsu i używa reguł zawiera wbudowane międzyoperacyjnego organizatora. Teraz załóżmy, że wywoływana dobrze znanego interfejsu COM `IOld` już zapewnia te same funkcje co `INew` interfejsu. Projektując organizatora niestandardowego może zapewniać implementację niezarządzane z `IOld` który deleguje po prostu wywołań zarządzaną implementację `INew` interfejsu. W związku z tym organizatora niestandardowego działa jako mostka między interfejsami zarządzane i niezarządzane.  
  
> [!NOTE]
>  Organizatorzy niestandardowi nie są wywoływane podczas wywoływania z kodu zarządzanego do kodu niezarządzanego interfejsu tylko do wysyłania.  
  
## <a name="defining-the-marshaling-type"></a>Zdefiniowanie typu organizującego  
 Przed skompilowaniem organizatora niestandardowego, należy zdefiniować zarządzane i niezarządzane interfejsy, które będzie można zorganizować. Te interfejsy często wykonywać tę samą funkcję, ale są widoczne w inny sposób do obiektów zarządzanych i niezarządzanych.  
  
 Zarządzane kompilatora tworzy zarządzanego interfejsu z metadanych, a wynikowy interfejs wygląda zarządzanego interfejsu. W poniższym przykładzie przedstawiono typowe interfejsu.  
  
 [!code-cpp[System.Runtime.InteropServices.ICustomMarshaler#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cpp/source.cpp#1)]
 [!code-csharp[System.Runtime.InteropServices.ICustomMarshaler#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cs/source.cs#1)]
 [!code-vb[System.Runtime.InteropServices.ICustomMarshaler#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/vb/source.vb#1)]  
  
 Zdefiniuj typ niezarządzany w języku definicji interfejsu (IDL) i skompiluj go przez kompilator Microsoft interfejsu Definition Language (MIDL). Zdefiniuj interfejs w instrukcji biblioteki i przypisz go Identyfikatora interfejsu z atrybutem uniwersalny, unikatowy identyfikator (UUID), jak w poniższym przykładzie pokazano.  
  
```  
 [uuid(9B2BAADA-0705-11D3-A0CD-00C04FA35826)]  
library OldLib {  
     [uuid(9B2BAADD-0705-11D3-A0CD-00C04FA35826)]  
     interface IOld : IUnknown  
         HRESULT OldMethod();  
}  
```  
  
 Kompilator MIDL tworzy kilka plików wyjściowych. Jeśli interfejs jest zdefiniowany w Old.idl, plik wyjściowy Old_i.c definiuje `const` zmiennej o identyfikatorze interfejsu (IID) interfejsu, jak pokazano w poniższym przykładzie.  
  
```  
const IID IID_IOld = {0x9B2BAADD,0x0705,0x11D3,{0xA0,0xCD,0x00,0xC0,0x4F,0xA3,0x58,0x26}};  
```  
  
 Plik Old.h również jest generowany przez MIDL. Zawiera ona C++ definicji interfejsu, który można dołączyć do kodu źródłowego języka C++.  
  
## <a name="implementing-the-icustommarshaler-interface"></a>Implementowanie interfejsu ICustomMarshaler  
 Twoje organizatora niestandardowego musi implementować <xref:System.Runtime.InteropServices.ICustomMarshaler> interfejsu, aby zapewnić odpowiednią otoki do środowiska wykonawczego.  
  
 Poniższy kod C# przedstawia podstawowy interfejs, który musi być implementowana przez wszystkie Organizatorzy niestandardowi.  
  
 [!code-cpp[System.Runtime.InteropServices.ICustomMarshaler#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cpp/source.cpp#2)]
 [!code-csharp[System.Runtime.InteropServices.ICustomMarshaler#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cs/source.cs#2)]
 [!code-vb[System.Runtime.InteropServices.ICustomMarshaler#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/vb/source.vb#2)]  
  
 <xref:System.Runtime.InteropServices.ICustomMarshaler> Interfejs zawiera metody, które zapewniają obsługę konwersji, czyszczenia oraz informacje o danych można zorganizować.  
  
|Typ operacji|ICustomMarshaler — metoda|Opis|  
|-----------------------|-----------------------------|-----------------|  
|Konwersja (z kodu natywnego do zarządzanego kodu)|<xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A>|Marshals wskaźnika do natywnej danych do zarządzanego obiektu. Ta metoda zwraca niestandardowe wywoływana otoka środowiska uruchomieniowego (otoki RCW), która może kierować niezarządzane interfejs, który jest przekazywany jako argument. Organizator powinien zwrócić wystąpienia niestandardowe otoki RCW dla tego typu.|  
|Konwersja (z kodu zarządzanego do natywnego)|<xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A>|Marshals zarządzanego obiektu na wskaźnik do danych w trybie macierzystym. Ta metoda zwraca niestandardowe wywoływana otoka COM (CCW), która może kierować zarządzanego interfejsu, który jest przekazywany jako argument. Organizator powinien zwrócić wystąpienia niestandardowego CCW dla tego typu.|  
|Oczyszczanie (kod natywny)|<xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData%2A>|Włącza organizatora mógł wyczyścić danych natywnych (CCW), który jest zwracany przez <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A> metody.|  
|Oczyszczanie (zarządzany kod)|<xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData%2A>|Włącza organizatora czyszczenie danych zarządzanych (otoki RCW) zwracane przez <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A> metody.|  
|Informacje (kod natywny)|<xref:System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize%2A>|Zwraca rozmiar niezarządzanych danych można zorganizować.|  
  
### <a name="conversion"></a>Konwersja  
 <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A?displayProperty=nameWithType>  
  
 Marshals wskaźnika do natywnej danych do zarządzanego obiektu. Ta metoda zwraca niestandardowe wywoływana otoka środowiska uruchomieniowego (otoki RCW), która może kierować niezarządzane interfejs, który jest przekazywany jako argument. Organizator powinien zwrócić wystąpienia niestandardowe otoki RCW dla tego typu.  
  
 <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A?displayProperty=nameWithType>  
  
 Marshals zarządzanego obiektu na wskaźnik do danych w trybie macierzystym. Ta metoda zwraca niestandardowe wywoływana otoka COM (CCW), która może kierować zarządzanego interfejsu, który jest przekazywany jako argument. Organizator powinien zwrócić wystąpienia niestandardowego CCW dla tego typu.  
  
### <a name="cleanup"></a>Oczyszczanie  
 <xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData%2A?displayProperty=nameWithType>  
  
 Włącza organizatora mógł wyczyścić danych natywnych (CCW), który jest zwracany przez <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A> metody.  
  
 <xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData%2A?displayProperty=nameWithType>  
  
 Włącza organizatora czyszczenie danych zarządzanych (otoki RCW) zwracane przez <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A> metody.  
  
### <a name="size-information"></a>Informacje o rozmiarze  
 <xref:System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize%2A?displayProperty=nameWithType>  
  
 Zwraca rozmiar niezarządzanych danych można zorganizować.  
  
## <a name="implementing-the-getinstance-method"></a>Implementacja metody GetInstance  
 Oprócz wykonania <xref:System.Runtime.InteropServices.ICustomMarshaler> musi implementować interfejs, Organizatorzy niestandardowi `static` wywołano metodę `GetInstance` która akceptuje <xref:System.String> jako parametr i ma typ zwracany <xref:System.Runtime.InteropServices.ICustomMarshaler>. To `static` metoda jest wywoływana przez środowisko uruchomieniowe języka wspólnego firmy warstwa międzyoperacyjności COM można utworzyć wystąpienia organizatora niestandardowego. Ciąg, który jest przekazywany do `GetInstance` plik cookie, które metody można użyć do dostosowania zwrócony organizatora niestandardowego.  
  
```  
static ICustomMarshaler *GetInstance(String *pstrCookie);  
```  
  
## <a name="applying-marshalasattribute"></a>Zastosowanie MarshalAsAttribute  
 Aby użyć niestandardowego, należy najpierw zastosować <xref:System.Runtime.InteropServices.MarshalAsAttribute> atrybut parametru lub pola, które jest są organizowane.  
  
 Należy także podać <xref:System.Runtime.InteropServices.UnmanagedType.CustomMarshaler?displayProperty=nameWithType> wartości wyliczenia <xref:System.Runtime.InteropServices.MarshalAsAttribute> konstruktora. Ponadto należy określić <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType> pola z jednego z następujących parametrów nazwanych:  
  
-   <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType> (wymagane): Nazwa kwalifikowana zestawu organizatora niestandardowego. Przestrzeń nazw i klasy organizatora niestandardowego, należy uwzględnić nazwę. Jeśli organizatora niestandardowego nie jest zdefiniowany w zestawie, który jest używany w, należy określić nazwę zestawu, w którym jest zdefiniowany.  
  
    > [!NOTE]
    >  Można użyć <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef> pole zamiast <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType> pola. <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef> pobiera typ, który ułatwia określenie.  
  
-   <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalCookie> (opcjonalnie): plik cookie, który jest przekazywany do organizatora niestandardowego. Plik cookie umożliwia udostępnienie dodatkowych informacji do organizatora. Na przykład użycie tej samej organizatora o podanie numeru otoki plik cookie identyfikuje określonych otoki. Plik cookie jest przekazywany do `GetInstance` metody organizatora.  
  
 <xref:System.Runtime.InteropServices.MarshalAsAttribute> Atrybut określa organizatora niestandardowego, więc może aktywować odpowiednie otoki. Usługi międzyoperacyjne środowisko uruchomieniowe języka wspólnego firmy następnie sprawdza, czy ten atrybut i tworzy czasu organizatora niestandardowego pierwszego argumentu (parametr lub pole) musi być przekazywane.  
  
 Środowisko uruchomieniowe następnie wywołuje <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A> i <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A> metody dla organizatora niestandardowego, aby aktywować poprawne otoki obsługi wywołań.  
  
## <a name="using-a-custom-marshaler"></a>Za pomocą organizatora niestandardowego  
 Po zakończeniu organizatora niestandardowego można użyć jej jako niestandardowego otoki dla określonego typu. W poniższym przykładzie przedstawiono definicję `IUserData` interfejsu zarządzanego:  
  
 [!code-cpp[System.Runtime.InteropServices.ICustomMarshaler#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cpp/source.cpp#3)]
 [!code-csharp[System.Runtime.InteropServices.ICustomMarshaler#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cs/source.cs#3)]
 [!code-vb[System.Runtime.InteropServices.ICustomMarshaler#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/vb/source.vb#3)]  
  
 W poniższym przykładzie `IUserData` używa interfejsu `NewOldMarshaler` organizatora niestandardowego na potrzeby aplikacji niezarządzanych klienta do przekazywania `IOld` interfejsu do `DoSomeStuff` metody. Opis zarządzanych `DoSomeStuff` ma metodę `INew` interfejsu, jak pokazano w poprzednim przykładzie, podczas gdy niezarządzana wersja `DoSomeStuff` przyjmuje `IOld` wskaźnika interfejsu, jak pokazano w poniższym przykładzie.  
  
```  
[uuid(9B2BAADA-0705-11D3-A0CD-00C04FA35826)]  
library UserLib {  
     [uuid(9B2BABCD-0705-11D3-A0CD-00C04FA35826)]  
     interface IUserData : IUnknown  
         HRESULT DoSomeStuff(IUnknown* pIOld);  
}  
```  
  
 Biblioteki typów, generowanego przez wyeksportowanie zarządzanej definicji `IUserData` daje niezarządzane definicji w poniższym przykładzie zamiast standardowego definicji. <xref:System.Runtime.InteropServices.MarshalAsAttribute> Atrybut zastosowany do `INew` zarządzanej definicji argumentu `DoSomeStuff` — metoda wskazuje, że argument używa organizatora niestandardowego, jak przedstawiono na poniższym przykładzie.  
  
 [!code-cpp[System.Runtime.InteropServices.ICustomMarshaler#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cpp/source.cpp#4)]
 [!code-csharp[System.Runtime.InteropServices.ICustomMarshaler#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cs/source.cs#4)]
 [!code-vb[System.Runtime.InteropServices.ICustomMarshaler#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/vb/source.vb#4)]  
  
 [!code-cpp[System.Runtime.InteropServices.ICustomMarshaler#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cpp/source.cpp#5)]
 [!code-csharp[System.Runtime.InteropServices.ICustomMarshaler#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cs/source.cs#5)]
 [!code-vb[System.Runtime.InteropServices.ICustomMarshaler#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/vb/source.vb#5)]  
  
 W poprzednich przykładach, pierwszy parametr dostarczony do <xref:System.Runtime.InteropServices.MarshalAsAttribute> atrybutu <xref:System.Runtime.InteropServices.UnmanagedType.CustomMarshaler?displayProperty=nameWithType> wartość wyliczenia `UnmanagedType.CustomMarshaler`.  
  
 Drugi parametr jest <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType> pola, które zawiera nazwa kwalifikowana zestawu organizatora niestandardowego. Ta nazwa składa się z przestrzeni nazw i klasy organizatora niestandardowego (`MarshalType="MyCompany.NewOldMarshaler"`).  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CleanUpManagedData">
      <MemberSignature Language="C#" Value="public void CleanUpManagedData (object ManagedObj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CleanUpManagedData(object ManagedObj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CleanUpManagedData (ManagedObj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CleanUpManagedData(System::Object ^ ManagedObj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ManagedObj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="ManagedObj">Obiektu zarządzanego mają zostać zniszczone.</param>
        <summary>Wykonuje niezbędne czyszczenie danych zarządzanych nie jest już potrzebne.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CleanUpNativeData">
      <MemberSignature Language="C#" Value="public void CleanUpNativeData (IntPtr pNativeData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CleanUpNativeData(native int pNativeData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CleanUpNativeData (pNativeData As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CleanUpNativeData(IntPtr pNativeData);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pNativeData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="pNativeData">Wskaźnik do niezarządzanego dane mają zostać zniszczone.</param>
        <summary>Wykonuje cleanup konieczne niezarządzanych danych, gdy nie jest już potrzebne.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNativeDataSize">
      <MemberSignature Language="C#" Value="public int GetNativeDataSize ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetNativeDataSize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNativeDataSize () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetNativeDataSize();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca rozmiar danych w trybie macierzystym zorganizowanie.</summary>
        <returns>Rozmiar w bajtach danych w trybie macierzystym.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MarshalManagedToNative">
      <MemberSignature Language="C#" Value="public IntPtr MarshalManagedToNative (object ManagedObj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance native int MarshalManagedToNative(object ManagedObj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function MarshalManagedToNative (ManagedObj As Object) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IntPtr MarshalManagedToNative(System::Object ^ ManagedObj);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ManagedObj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="ManagedObj">Zarządzany obiekt ma zostać przekonwertowany.</param>
        <summary>Konwertuje danych zarządzanych do niezarządzanych danych.</summary>
        <returns>Wskaźnik do widoku COM zarządzanego obiektu.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MarshalNativeToManaged">
      <MemberSignature Language="C#" Value="public object MarshalNativeToManaged (IntPtr pNativeData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object MarshalNativeToManaged(native int pNativeData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Function MarshalNativeToManaged (pNativeData As IntPtr) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ MarshalNativeToManaged(IntPtr pNativeData);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pNativeData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="pNativeData">Wskaźnik do niezarządzanych danych w celu jej opakowania.</param>
        <summary>Konwertuje niezarządzanych danych zarządzanych danych.</summary>
        <returns>Obiekt, który reprezentuje zarządzanych widoku danych modelu COM.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>