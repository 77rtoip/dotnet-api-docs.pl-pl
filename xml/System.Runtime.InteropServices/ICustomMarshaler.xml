<Type Name="ICustomMarshaler" FullName="System.Runtime.InteropServices.ICustomMarshaler">
  <Metadata><Meta Name="ms.openlocfilehash" Value="13c83388836e7692ce136d212905f87ecc88668b" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69064110" /></Metadata><TypeSignature Language="C#" Value="public interface ICustomMarshaler" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ICustomMarshaler" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.InteropServices.ICustomMarshaler" />
  <TypeSignature Language="VB.NET" Value="Public Interface ICustomMarshaler" />
  <TypeSignature Language="C++ CLI" Value="public interface class ICustomMarshaler" />
  <TypeSignature Language="F#" Value="type ICustomMarshaler = interface" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime.InteropServices</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Udostępnia niestandardowe otoki do obsługi wywołań metod.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Organizator udostępnia Most między funkcjami starych i nowych interfejsów. Kierowanie niestandardowe zapewnia następujące korzyści:  
  
-   Dzięki temu aplikacje klienckie, które zostały zaprojektowane do pracy ze starym interfejsem, działają również z serwerami, które implementują nowy interfejs.  
  
-   Dzięki temu aplikacje klienckie skompilowane z nowym interfejsem mogą współpracować z serwerami, które implementują stary interfejs.  
  
 Jeśli masz interfejs, który wprowadza inne zachowanie kierujące lub że jest on narażony na Component Object Model (COM) w inny sposób, możesz zaprojektować organizatora niestandardowego zamiast korzystać z Organizatora międzyoperacyjnego. Za pomocą organizatora niestandardowego można zminimalizować rozróżnienie między nowymi składnikami .NET Framework i istniejącymi składnikami COM.  
  
 Załóżmy na przykład, że tworzysz zarządzany interfejs o nazwie `INew`. Gdy ten interfejs jest narażony na model COM za pośrednictwem standardowej, wywołanej otoki COM (CCW), ma takie same metody jak zarządzany interfejs i używa reguł kierujących wbudowanych do Organizatora międzyoperacyjnego. Teraz Załóżmy, że dobrze znany interfejs com o nazwie `IOld` już zapewnia te same funkcje `INew` co interfejs. Projektując organizatora niestandardowego, można dostarczyć niezarządzaną implementację `IOld` , która po prostu deleguje wywołania do zarządzanej implementacji `INew` interfejsu. W związku z tym Organizator niestandardowy działa jako Most między interfejsami zarządzanymi i niezarządzanymi.  
  
> [!NOTE]
>  Organizatorzy niestandardowi nie są wywoływane podczas wywoływania kodu zarządzanego do kodu niezarządzanego w interfejsie obsługującym tylko wysyłanie.  
  
## <a name="defining-the-marshaling-type"></a>Zdefiniowanie typu organizującego  
 Aby można było skompilować organizatora niestandardowego, należy zdefiniować zarządzane i niezarządzane interfejsy, które będą organizowane. Te interfejsy zwykle wykonują tę samą funkcję, ale są narażone inaczej w odróżnieniu od obiektów zarządzanych i niezarządzanych.  
  
 Zarządzany kompilator tworzy interfejs zarządzany z metadanych, a wynikowy interfejs wygląda podobnie jak każdy inny zarządzany interfejs. Poniższy przykład przedstawia typowy interfejs.  
  
 [!code-cpp[System.Runtime.InteropServices.ICustomMarshaler#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cpp/source.cpp#1)]
 [!code-csharp[System.Runtime.InteropServices.ICustomMarshaler#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cs/source.cs#1)]
 [!code-vb[System.Runtime.InteropServices.ICustomMarshaler#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/vb/source.vb#1)]  
  
 Można zdefiniować typ niezarządzany w języku definicji interfejsu (IDL) i skompilować go za pomocą kompilatora Microsoft Interface Definition Language (MIDL). Należy zdefiniować interfejs w instrukcji biblioteki i przypisać mu identyfikator interfejsu z atrybutem uniwersalnego identyfikatora unikatowego (UUID), jak pokazano w poniższym przykładzie.  
  
```  
 [uuid(9B2BAADA-0705-11D3-A0CD-00C04FA35826)]  
library OldLib {  
     [uuid(9B2BAADD-0705-11D3-A0CD-00C04FA35826)]  
     interface IOld : IUnknown  
         HRESULT OldMethod();  
}  
```  
  
 Kompilator MIDL tworzy kilka plików wyjściowych. Jeśli interfejs jest zdefiniowany w pliku Old. idl, plik wyjściowy Old_i. c definiuje `const` zmienną o identyfikatorze interfejsu (IID) interfejsu, jak pokazano w poniższym przykładzie.  
  
```  
const IID IID_IOld = {0x9B2BAADD,0x0705,0x11D3,{0xA0,0xCD,0x00,0xC0,0x4F,0xA3,0x58,0x26}};  
```  
  
 Stary plik h jest również tworzony przez MIDL. Zawiera C++ definicję interfejsu, który może być uwzględniony w kodzie C++ źródłowym.  
  
## <a name="implementing-the-icustommarshaler-interface"></a>Implementowanie interfejsu ICustomMarshaler  
 Organizator niestandardowy musi zaimplementować <xref:System.Runtime.InteropServices.ICustomMarshaler> interfejs w celu zapewnienia odpowiednich otok dla środowiska uruchomieniowego.  
  
 Poniższy C# kod wyświetla podstawowy interfejs, który musi zostać zaimplementowany przez wszystkich organizatorów niestandardowych.  
  
 [!code-cpp[System.Runtime.InteropServices.ICustomMarshaler#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cpp/source.cpp#2)]
 [!code-csharp[System.Runtime.InteropServices.ICustomMarshaler#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cs/source.cs#2)]
 [!code-vb[System.Runtime.InteropServices.ICustomMarshaler#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/vb/source.vb#2)]  
  
 <xref:System.Runtime.InteropServices.ICustomMarshaler> Interfejs zawiera metody, które zapewniają obsługę konwersji, obsługę czyszczenia i informacje o danych, które mają być organizowane.  
  
|Typ operacji|ICustomMarshaler, Metoda|Opis|  
|-----------------------|-----------------------------|-----------------|  
|Konwersja (z natywnego do kodu zarządzanego)|<xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A>|Kierowanie wskaźnika do danych natywnych do obiektu zarządzanego. Ta metoda zwraca niestandardową otokę w środowisku uruchomieniowym (RCW), która może organizować niezarządzany interfejs, który jest przekazywany jako argument. Organizator powinien zwrócić wystąpienie niestandardowej otoki RCW dla tego typu.|  
|Konwersja (z kodu zarządzanego do natywnego)|<xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A>|Kierowanie obiektu zarządzanego do wskaźnika do danych natywnych. Ta metoda zwraca niestandardowe wywoływane otoki COM (CCW), które może organizować zarządzany interfejs, który jest przekazywany jako argument. Organizator powinien zwrócić wystąpienie niestandardowego CCW dla tego typu.|  
|Czyszczenie (kod natywny)|<xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData%2A>|Umożliwia Organizatorowi oczyszczenie danych natywnych (CCW), które są zwracane przez <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A> metodę.|  
|Czyszczenie (kodu zarządzanego)|<xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData%2A>|Umożliwia Organizatorowi czyszczenie danych zarządzanych (RCW) zwracanych przez <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A> metodę.|  
|Informacje (kod natywny)|<xref:System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize%2A>|Zwraca rozmiar danych niezarządzanych, które mają być organizowane.|  
  
### <a name="conversion"></a>Konwersja  
 <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A?displayProperty=nameWithType>  
  
 Kierowanie wskaźnika do danych natywnych do obiektu zarządzanego. Ta metoda zwraca niestandardową otokę w środowisku uruchomieniowym (RCW), która może organizować niezarządzany interfejs, który jest przekazywany jako argument. Organizator powinien zwrócić wystąpienie niestandardowej otoki RCW dla tego typu.  
  
 <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A?displayProperty=nameWithType>  
  
 Kierowanie obiektu zarządzanego do wskaźnika do danych natywnych. Ta metoda zwraca niestandardowe wywoływane otoki COM (CCW), które może organizować zarządzany interfejs, który jest przekazywany jako argument. Organizator powinien zwrócić wystąpienie niestandardowego CCW dla tego typu.  
  
### <a name="cleanup"></a>Oczyszczanie  
 <xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData%2A?displayProperty=nameWithType>  
  
 Umożliwia Organizatorowi oczyszczenie danych natywnych (CCW), które są zwracane przez <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A> metodę.  
  
 <xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData%2A?displayProperty=nameWithType>  
  
 Umożliwia Organizatorowi czyszczenie danych zarządzanych (RCW) zwracanych przez <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A> metodę.  
  
### <a name="size-information"></a>Informacje o rozmiarze  
 <xref:System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize%2A?displayProperty=nameWithType>  
  
 Zwraca rozmiar danych niezarządzanych, które mają być organizowane.  
  
## <a name="implementing-the-getinstance-method"></a>Implementacja metody GetInstance  
 Oprócz <xref:System.Runtime.InteropServices.ICustomMarshaler> implementacji interfejsu, organizatorzy niestandardowi muszą <xref:System.String> `static` implementować metodę o nazwie `GetInstance` , która akceptuje jako parametr i ma zwracany typ <xref:System.Runtime.InteropServices.ICustomMarshaler>. Ta `static` Metoda jest wywoływana przez warstwę międzyoperacyjną modelu COM środowiska uruchomieniowego języka wspólnego, aby utworzyć wystąpienie niestandardowego organizatora. Ciąg przekazywany do `GetInstance` to plik cookie, którego Metoda może użyć do dostosowania zwróconego organizatora niestandardowego.  
  
```  
static ICustomMarshaler *GetInstance(String *pstrCookie);  
```  
  
## <a name="applying-marshalasattribute"></a>Zastosowanie MarshalAsAttribute  
 Aby użyć organizatora niestandardowego, należy zastosować <xref:System.Runtime.InteropServices.MarshalAsAttribute> atrybut do organizowanego parametru lub pola.  
  
 Należy również przekazać <xref:System.Runtime.InteropServices.UnmanagedType.CustomMarshaler?displayProperty=nameWithType> wartość wyliczenia <xref:System.Runtime.InteropServices.MarshalAsAttribute> do konstruktora. Ponadto należy określić <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType> pole z jednym z następujących nazwanych parametrów:  
  
-   <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType>(wymagane): Kwalifikowana nazwa zestawu organizatora niestandardowego. Nazwa powinna zawierać przestrzeń nazw i klasę organizatora niestandardowego. Jeśli organizator niestandardowy nie jest zdefiniowany w zestawie, który jest używany w, należy określić nazwę zestawu, w którym jest zdefiniowana.  
  
    > [!NOTE]
    >  Możesz użyć <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef> pola zamiast <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType> pola. <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef>przyjmuje typ, który jest łatwiejszy do określenia.  
  
-   <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalCookie>(opcjonalnie): Plik cookie, który jest przekazywany do organizatora niestandardowego. Możesz użyć pliku cookie, aby dostarczyć dodatkowe informacje do organizatora. Na przykład jeśli ten sam organizator jest używany do udostępniania wielu otok, plik cookie zidentyfikuje konkretną otokę. Plik cookie jest przekazywany do `GetInstance` metody marshaler.  
  
 Ten <xref:System.Runtime.InteropServices.MarshalAsAttribute> atrybut identyfikuje organizatora niestandardowego, aby mógł aktywować odpowiednią otokę. Usługa międzyoperacyjna środowiska uruchomieniowego języka wspólnego analizuje atrybut i tworzy organizatora niestandardowego, gdy musi być zorganizowany pierwszy argument (parametr lub pole).  
  
 Środowisko uruchomieniowe następnie wywołuje <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A> metody <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A> i na organizatorze niestandardowym w celu aktywowania poprawnego otoki w celu obsługi wywołania.  
  
## <a name="using-a-custom-marshaler"></a>Za pomocą organizatora niestandardowego  
 Po zakończeniu organizatora niestandardowego można go użyć jako otoki niestandardowej dla określonego typu. W poniższym przykładzie przedstawiono definicję `IUserData` zarządzanego interfejsu:  
  
 [!code-cpp[System.Runtime.InteropServices.ICustomMarshaler#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cpp/source.cpp#3)]
 [!code-csharp[System.Runtime.InteropServices.ICustomMarshaler#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cs/source.cs#3)]
 [!code-vb[System.Runtime.InteropServices.ICustomMarshaler#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/vb/source.vb#3)]  
  
 W poniższym przykładzie `IUserData` Interfejs `NewOldMarshaler` używa organizatora niestandardowego, aby umożliwić niezarządzanym aplikacjom `IOld` klienckim `DoSomeStuff` przekazywanie interfejsu do metody. Zarządzany opis `DoSomeStuff` metody `INew` przyjmuje interfejs, jak pokazano w poprzednim przykładzie, `DoSomeStuff` podczas gdy `IOld` niezarządzana wersja Pobiera wskaźnik interfejsu, jak pokazano w poniższym przykładzie.  
  
```  
[uuid(9B2BAADA-0705-11D3-A0CD-00C04FA35826)]  
library UserLib {  
     [uuid(9B2BABCD-0705-11D3-A0CD-00C04FA35826)]  
     interface IUserData : IUnknown  
         HRESULT DoSomeStuff(IUnknown* pIOld);  
}  
```  
  
 Biblioteka typów generowana przez wyeksportowanie definicji `IUserData` zarządzanej daje niezarządzaną definicję pokazaną w tym przykładzie zamiast standardowej definicji. Atrybut zastosowany `INew` do argumentu w zarządzanej definicji `DoSomeStuff` metody wskazuje, że argument używa organizatora niestandardowego, jak pokazano w poniższym przykładzie. <xref:System.Runtime.InteropServices.MarshalAsAttribute>  
  
 [!code-cpp[System.Runtime.InteropServices.ICustomMarshaler#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cpp/source.cpp#4)]
 [!code-csharp[System.Runtime.InteropServices.ICustomMarshaler#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cs/source.cs#4)]
 [!code-vb[System.Runtime.InteropServices.ICustomMarshaler#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/vb/source.vb#4)]  
  
 [!code-cpp[System.Runtime.InteropServices.ICustomMarshaler#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cpp/source.cpp#5)]
 [!code-csharp[System.Runtime.InteropServices.ICustomMarshaler#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cs/source.cs#5)]
 [!code-vb[System.Runtime.InteropServices.ICustomMarshaler#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/vb/source.vb#5)]  
  
 W poprzednich przykładach pierwszy parametr dostarczony do <xref:System.Runtime.InteropServices.MarshalAsAttribute> atrybutu <xref:System.Runtime.InteropServices.UnmanagedType.CustomMarshaler?displayProperty=nameWithType> jest wartością `UnmanagedType.CustomMarshaler`wyliczenia.  
  
 Drugim parametrem jest <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType> pole, które udostępnia kwalifikowaną nazwę zestawu organizatora niestandardowego. Ta nazwa składa się z przestrzeni nazw i klasy organizatora niestandardowego (`MarshalType="MyCompany.NewOldMarshaler"`).  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CleanUpManagedData">
      <MemberSignature Language="C#" Value="public void CleanUpManagedData (object ManagedObj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CleanUpManagedData(object ManagedObj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CleanUpManagedData (ManagedObj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CleanUpManagedData(System::Object ^ ManagedObj);" />
      <MemberSignature Language="F#" Value="abstract member CleanUpManagedData : obj -&gt; unit" Usage="iCustomMarshaler.CleanUpManagedData ManagedObj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ManagedObj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="ManagedObj">Obiekt zarządzany, który ma zostać zniszczony.</param>
        <summary>Program wykonuje niezbędne czyszczenie danych zarządzanych, gdy nie jest już potrzebny.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CleanUpNativeData">
      <MemberSignature Language="C#" Value="public void CleanUpNativeData (IntPtr pNativeData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CleanUpNativeData(native int pNativeData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CleanUpNativeData (pNativeData As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CleanUpNativeData(IntPtr pNativeData);" />
      <MemberSignature Language="F#" Value="abstract member CleanUpNativeData : nativeint -&gt; unit" Usage="iCustomMarshaler.CleanUpNativeData pNativeData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pNativeData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="pNativeData">Wskaźnik do niezarządzanych danych, które mają zostać zniszczone.</param>
        <summary>Wykonuje niezbędne czyszczenie niezarządzanych danych, gdy nie jest już potrzebne.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNativeDataSize">
      <MemberSignature Language="C#" Value="public int GetNativeDataSize ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetNativeDataSize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNativeDataSize () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetNativeDataSize();" />
      <MemberSignature Language="F#" Value="abstract member GetNativeDataSize : unit -&gt; int" Usage="iCustomMarshaler.GetNativeDataSize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca rozmiar danych natywnych, które mają być organizowane.</summary>
        <returns>Rozmiar danych natywnych w bajtach.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MarshalManagedToNative">
      <MemberSignature Language="C#" Value="public IntPtr MarshalManagedToNative (object ManagedObj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance native int MarshalManagedToNative(object ManagedObj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function MarshalManagedToNative (ManagedObj As Object) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IntPtr MarshalManagedToNative(System::Object ^ ManagedObj);" />
      <MemberSignature Language="F#" Value="abstract member MarshalManagedToNative : obj -&gt; nativeint" Usage="iCustomMarshaler.MarshalManagedToNative ManagedObj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ManagedObj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="ManagedObj">Obiekt zarządzany do przekonwertowania.</param>
        <summary>Konwertuje dane zarządzane na dane niezarządzane.</summary>
        <returns>Wskaźnik do widoku COM obiektu zarządzanego.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MarshalNativeToManaged">
      <MemberSignature Language="C#" Value="public object MarshalNativeToManaged (IntPtr pNativeData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object MarshalNativeToManaged(native int pNativeData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Function MarshalNativeToManaged (pNativeData As IntPtr) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ MarshalNativeToManaged(IntPtr pNativeData);" />
      <MemberSignature Language="F#" Value="abstract member MarshalNativeToManaged : nativeint -&gt; obj" Usage="iCustomMarshaler.MarshalNativeToManaged pNativeData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pNativeData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="pNativeData">Wskaźnik do niezarządzanych danych, które mają być opakowane.</param>
        <summary>Konwertuje niezarządzane dane na dane zarządzane.</summary>
        <returns>Obiekt, który reprezentuje zarządzany widok danych COM.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
