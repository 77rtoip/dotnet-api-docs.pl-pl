<Type Name="ICustomMarshaler" FullName="System.Runtime.InteropServices.ICustomMarshaler">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="be96cf3b310b21cd1fb19adf1505581a78166d88" />
    <Meta Name="ms.sourcegitcommit" Value="5a49536d99d2d0b54e4cb7280870903e043272df" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="07/03/2018" />
    <Meta Name="ms.locfileid" Value="37637522" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface ICustomMarshaler" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ICustomMarshaler" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.InteropServices.ICustomMarshaler" />
  <TypeSignature Language="VB.NET" Value="Public Interface ICustomMarshaler" />
  <TypeSignature Language="C++ CLI" Value="public interface class ICustomMarshaler" />
  <TypeSignature Language="F#" Value="type ICustomMarshaler = interface" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime.InteropServices</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Zapewnia otoki niestandardowe do obsługi wywołania metody.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Organizatora zapewnia Most między funkcjonalność starych i nowych interfejsów. Organizowanie niestandardowe zapewnia następujące korzyści:  
  
-   Umożliwia aplikacji klienckich, które zostały zaprojektowane do pracy z interfejsem stare także pracować z serwerów, które implementują nowy interfejs.  
  
-   Umożliwia aplikacji klienckich współdziała z nowego interfejsu do pracy z serwerów, które implementują stary interfejs.  
  
 Jeśli masz interfejsu, która wprowadza inne zachowanie marshalingu lub które będzie widoczne na Component Object Model (COM) w inny sposób, można zaprojektować organizatora niestandardowego, a nie za pomocą organizatora międzyoperacyjnego. Za pomocą organizatora niestandardowego, można zminimalizować rozróżnienie między nowych składników .NET Framework i istniejących składników COM.  
  
 Załóżmy, że opracowujesz zarządzanego interfejsu o nazwie `INew`. Gdy ten interfejs jest uwidaczniany w modelu COM za pomocą standardowych wywołalne opakowanie COM (CCW), ma taką samą metodą jak zarządzanego interfejsu i używa reguł organizowania wbudowaną Organizator międzyoperacyjny. Teraz załóżmy, że dobrze znanego interfejsu COM wywołania `IOld` już zapewnia taką samą funkcjonalność jak `INew` interfejsu. Dzięki możliwości tworzenia niestandardowego, można dostarczać implementację niezarządzanych `IOld` który deleguje po prostu wywołania zarządzaną implementację `INew` interfejsu. W związku z tym Organizator niestandardowy działa jako Most między zarządzanymi i niezarządzanymi interfejsami.  
  
> [!NOTE]
>  Niestandardowi nie są wywoływane podczas wywoływania z kodu zarządzanego do kodu niezarządzanego w interfejsie tylko do wysyłki.  
  
## <a name="defining-the-marshaling-type"></a>Zdefiniowanie typu organizującego  
 Przed utworzeniem można organizatora niestandardowego, należy zdefiniować interfejsy zarządzane i niezarządzane, które będą przekazywane. Te interfejsy często pełnią taką samą funkcję, ale są widoczne w inny sposób do obiektów zarządzanych i niezarządzanych.  
  
 Zarządzane kompilator generuje zarządzanego interfejsu z metadanych, a wynikowy interfejsu wygląda zarządzanego interfejsu. Poniższy przykład przedstawia typowy interfejsu.  
  
 [!code-cpp[System.Runtime.InteropServices.ICustomMarshaler#1](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cpp/source.cpp#1)]
 [!code-csharp[System.Runtime.InteropServices.ICustomMarshaler#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cs/source.cs#1)]
 [!code-vb[System.Runtime.InteropServices.ICustomMarshaler#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/vb/source.vb#1)]  
  
 Definiowanie typu niezarządzanego w języka definicji interfejsu (IDL) i skompiluj go przez kompilator Microsoft Interface Definition Language (MIDL). Zdefiniuj interfejs wewnątrz instrukcji biblioteki i przypisać ją identyfikator interfejsu z atrybutem uniwersalny, unikatowy identyfikator (UUID), tak jak pokazano w poniższym przykładzie.  
  
```  
 [uuid(9B2BAADA-0705-11D3-A0CD-00C04FA35826)]  
library OldLib {  
     [uuid(9B2BAADD-0705-11D3-A0CD-00C04FA35826)]  
     interface IOld : IUnknown  
         HRESULT OldMethod();  
}  
```  
  
 Kompilator MIDL tworzy kilka plików danych wyjściowych. W przypadku interfejsu jest zdefiniowany w Old.idl, plik wyjściowy Old_i.c definiuje `const` zmiennej za pomocą identyfikatora interfejsu (IID) interfejsu, tak jak pokazano w poniższym przykładzie.  
  
```  
const IID IID_IOld = {0x9B2BAADD,0x0705,0x11D3,{0xA0,0xCD,0x00,0xC0,0x4F,0xA3,0x58,0x26}};  
```  
  
 Plik Old.h również jest generowany przez MIDL. Zawiera definicję C++ interfejsu, które mogą być zawarte w kodzie źródłowym C++.  
  
## <a name="implementing-the-icustommarshaler-interface"></a>Implementowanie interfejsu ICustomMarshaler  
 Twoje organizatora niestandardowego musi implementować <xref:System.Runtime.InteropServices.ICustomMarshaler> interfejsu, aby zapewnić odpowiednie otoki do środowiska uruchomieniowego.  
  
 Poniższy kod C# przedstawia podstawowy interfejs, który musi być implementowana przez wszystkie niestandardowi.  
  
 [!code-cpp[System.Runtime.InteropServices.ICustomMarshaler#2](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cpp/source.cpp#2)]
 [!code-csharp[System.Runtime.InteropServices.ICustomMarshaler#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cs/source.cs#2)]
 [!code-vb[System.Runtime.InteropServices.ICustomMarshaler#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/vb/source.vb#2)]  
  
 <xref:System.Runtime.InteropServices.ICustomMarshaler> Interfejs zawiera metody, które zapewniają obsługę konwersji, czyszczenia oraz informacje o dane, które mają być przekazywane.  
  
|Typ operacji|ICustomMarshaler — metoda|Opis|  
|-----------------------|-----------------------------|-----------------|  
|Konwersja (macierzystego do kodu zarządzanego)|<xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A>|Organizuje wskaźnik do danych natywnego do zarządzanego obiektu. Ta metoda zwraca otokę wywoływaną niestandardowego środowiska uruchomieniowego (RCW), która może kierować element niezarządzanego interfejsu, który jest przekazywany jako argument. Organizator powinien zwrócić wystąpienia niestandardową otokę RCW dla tego typu.|  
|Konwersja (kodu zarządzanego do natywnego)|<xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A>|Organizuje zarządzanego obiektu na wskaźnik do danych w trybie macierzystym. Ta metoda zwraca niestandardowe wywołalne opakowanie COM (CCW), która może kierować element zarządzanego interfejsu, który jest przekazywany jako argument. Organizator powinien zwrócić wystąpienia niestandardowego CCW dla tego typu.|  
|Czyszczenie (kodu natywnego)|<xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData%2A>|Włącza Organizator wyczyścić danych natywnych (CCW), który jest zwracany przez <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A> metody.|  
|Czyszczenie (kodu zarządzanego)|<xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData%2A>|Włącza Organizator czyszczenie danych zarządzanych (RCW), który jest zwracany przez <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A> metody.|  
|Informacje (kodu natywnego)|<xref:System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize%2A>|Zwraca rozmiar niezarządzanych dane, które mają być przekazywane.|  
  
### <a name="conversion"></a>Konwersja  
 <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A?displayProperty=nameWithType>  
  
 Organizuje wskaźnik do danych natywnego do zarządzanego obiektu. Ta metoda zwraca otokę wywoływaną niestandardowego środowiska uruchomieniowego (RCW), która może kierować element niezarządzanego interfejsu, który jest przekazywany jako argument. Organizator powinien zwrócić wystąpienia niestandardową otokę RCW dla tego typu.  
  
 <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A?displayProperty=nameWithType>  
  
 Organizuje zarządzanego obiektu na wskaźnik do danych w trybie macierzystym. Ta metoda zwraca niestandardowe wywołalne opakowanie COM (CCW), która może kierować element zarządzanego interfejsu, który jest przekazywany jako argument. Organizator powinien zwrócić wystąpienia niestandardowego CCW dla tego typu.  
  
### <a name="cleanup"></a>Oczyszczanie  
 <xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData%2A?displayProperty=nameWithType>  
  
 Włącza Organizator wyczyścić danych natywnych (CCW), który jest zwracany przez <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A> metody.  
  
 <xref:System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData%2A?displayProperty=nameWithType>  
  
 Włącza Organizator czyszczenie danych zarządzanych (RCW), który jest zwracany przez <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A> metody.  
  
### <a name="size-information"></a>Informacje o rozmiarze  
 <xref:System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize%2A?displayProperty=nameWithType>  
  
 Zwraca rozmiar niezarządzanych dane, które mają być przekazywane.  
  
## <a name="implementing-the-getinstance-method"></a>Implementacja metody GetInstance  
 Oprócz wykonywania <xref:System.Runtime.InteropServices.ICustomMarshaler> musi implementować interfejs niestandardowi `static` metodę o nazwie `GetInstance` akceptujący <xref:System.String> jako parametr i ma typ zwracany <xref:System.Runtime.InteropServices.ICustomMarshaler>. To `static` metoda jest wywoływana przez wykonywalnych języka wspólnego warstwa międzyoperacyjności modelu COM do utworzenia wystąpienia wystąpienie organizatora niestandardowego. Ciąg, który jest przekazywany do `GetInstance` plik cookie, które metody można użyć do dostosowania zwrócone organizatora niestandardowego.  
  
```  
static ICustomMarshaler *GetInstance(String *pstrCookie);  
```  
  
## <a name="applying-marshalasattribute"></a>Zastosowanie MarshalAsAttribute  
 Aby użyć niestandardowego, należy najpierw zastosować <xref:System.Runtime.InteropServices.MarshalAsAttribute> atrybutu do parametru lub pola, które jest jest organizowany.  
  
 Możesz też przekazać <xref:System.Runtime.InteropServices.UnmanagedType.CustomMarshaler?displayProperty=nameWithType> wartość wyliczenia do <xref:System.Runtime.InteropServices.MarshalAsAttribute> konstruktora. Ponadto należy określić <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType> pola przy użyciu jednego z następujących nazwanych parametrów:  
  
-   <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType> (wymagane): Nazwa kwalifikowanego dla zestawu organizatora niestandardowego. Nazwa powinna zawierać przestrzeń nazw i klasy organizatora niestandardowego. Jeśli organizator niestandardowy nie został zdefiniowany w zestawie, który jest używany w, należy określić nazwę zestawu, w którym jest zdefiniowany.  
  
    > [!NOTE]
    >  Możesz użyć <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef> pola zamiast <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType> pola. <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalTypeRef> pobiera typ, który jest łatwiejszy do określenia.  
  
-   <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalCookie> (opcjonalnie): plik cookie, który jest przekazywany do organizatora niestandardowego. Plik cookie umożliwia zawierają dodatkowe informacje można organizatora. Na przykład użycie tego samego organizatora o podanie numeru otoki plik cookie identyfikuje określone otoki. Plik cookie jest przekazywany do `GetInstance` metoda organizatora.  
  
 <xref:System.Runtime.InteropServices.MarshalAsAttribute> Atrybut identyfikuje organizatora niestandardowego, aby go uaktywnić odpowiednie otoki. Usługi międzyoperacyjne wykonywalnych języka wspólnego następnie sprawdza, czy atrybut i tworzy czasu organizatora niestandardowego pierwszy argument (parametr lub pole) musi być organizowany.  
  
 Środowisko uruchomieniowe wywołuje <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged%2A> i <xref:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative%2A> organizatora niestandardowego, aby aktywować poprawne otoki, aby obsłużyć wywołania metody.  
  
## <a name="using-a-custom-marshaler"></a>Za pomocą organizatora niestandardowego  
 Po zakończeniu organizatora niestandardowego służy jako niestandardowej otoki dla określonego typu. W poniższym przykładzie pokazano definicję `IUserData` zarządzanego interfejsu:  
  
 [!code-cpp[System.Runtime.InteropServices.ICustomMarshaler#3](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cpp/source.cpp#3)]
 [!code-csharp[System.Runtime.InteropServices.ICustomMarshaler#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cs/source.cs#3)]
 [!code-vb[System.Runtime.InteropServices.ICustomMarshaler#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/vb/source.vb#3)]  
  
 W poniższym przykładzie `IUserData` interfejs używa `NewOldMarshaler` organizatora niestandardowego, aby umożliwiać aplikacjom klienckim niezarządzanym aplikacjom przekazywanie `IOld` współpracować w celu `DoSomeStuff` metody. Opis zarządzanych `DoSomeStuff` metoda przyjmuje `INew` interfejsu, jak pokazano w poprzednim przykładzie, podczas gdy niezarządzana wersja `DoSomeStuff` przyjmuje `IOld` wskaźnik interfejsu, jak pokazano w poniższym przykładzie.  
  
```  
[uuid(9B2BAADA-0705-11D3-A0CD-00C04FA35826)]  
library UserLib {  
     [uuid(9B2BABCD-0705-11D3-A0CD-00C04FA35826)]  
     interface IUserData : IUnknown  
         HRESULT DoSomeStuff(IUnknown* pIOld);  
}  
```  
  
 Biblioteki typów, który jest generowany przez wyeksportowanie definicji zarządzanych `IUserData` daje definicji niezarządzanych, w poniższym przykładzie zamiast standardowej definicji. <xref:System.Runtime.InteropServices.MarshalAsAttribute> Zastosowany do `INew` argument w definicji zarządzanych `DoSomeStuff` metoda wskazuje, że argument używa organizatora niestandardowego, co ilustruje poniższy przykład.  
  
 [!code-cpp[System.Runtime.InteropServices.ICustomMarshaler#4](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cpp/source.cpp#4)]
 [!code-csharp[System.Runtime.InteropServices.ICustomMarshaler#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cs/source.cs#4)]
 [!code-vb[System.Runtime.InteropServices.ICustomMarshaler#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/vb/source.vb#4)]  
  
 [!code-cpp[System.Runtime.InteropServices.ICustomMarshaler#5](~/samples/snippets/cpp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cpp/source.cpp#5)]
 [!code-csharp[System.Runtime.InteropServices.ICustomMarshaler#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/cs/source.cs#5)]
 [!code-vb[System.Runtime.InteropServices.ICustomMarshaler#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.runtime.interopservices.icustommarshaler/vb/source.vb#5)]  
  
 W poprzednich przykładach, pierwszy parametr udostępniane <xref:System.Runtime.InteropServices.MarshalAsAttribute> atrybut jest <xref:System.Runtime.InteropServices.UnmanagedType.CustomMarshaler?displayProperty=nameWithType> wartość wyliczenia `UnmanagedType.CustomMarshaler`.  
  
 Drugi parametr jest <xref:System.Runtime.InteropServices.MarshalAsAttribute.MarshalType> pola, który zawiera nazwę kwalifikowaną dla zestawu organizatora niestandardowego. Ta nazwa składa się z przestrzeni nazw i klasy organizatora niestandardowego (`MarshalType="MyCompany.NewOldMarshaler"`).  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="CleanUpManagedData">
      <MemberSignature Language="C#" Value="public void CleanUpManagedData (object ManagedObj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CleanUpManagedData(object ManagedObj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ICustomMarshaler.CleanUpManagedData(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CleanUpManagedData (ManagedObj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CleanUpManagedData(System::Object ^ ManagedObj);" />
      <MemberSignature Language="F#" Value="abstract member CleanUpManagedData : obj -&gt; unit" Usage="iCustomMarshaler.CleanUpManagedData ManagedObj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ManagedObj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="ManagedObj">Obiektu zarządzanego, które mają zostać zniszczone.</param>
        <summary>Wykonuje niezbędne czyszczenia danych zarządzanych, gdy nie jest już potrzebny.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CleanUpNativeData">
      <MemberSignature Language="C#" Value="public void CleanUpNativeData (IntPtr pNativeData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CleanUpNativeData(native int pNativeData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ICustomMarshaler.CleanUpNativeData(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CleanUpNativeData (pNativeData As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CleanUpNativeData(IntPtr pNativeData);" />
      <MemberSignature Language="F#" Value="abstract member CleanUpNativeData : nativeint -&gt; unit" Usage="iCustomMarshaler.CleanUpNativeData pNativeData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pNativeData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="pNativeData">Wskaźnik do niezarządzanych danych, które mają zostać zniszczone.</param>
        <summary>Wykonuje niezbędne czyszczenia niezarządzanych danych, gdy nie jest już potrzebny.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNativeDataSize">
      <MemberSignature Language="C#" Value="public int GetNativeDataSize ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetNativeDataSize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ICustomMarshaler.GetNativeDataSize" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNativeDataSize () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetNativeDataSize();" />
      <MemberSignature Language="F#" Value="abstract member GetNativeDataSize : unit -&gt; int" Usage="iCustomMarshaler.GetNativeDataSize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca rozmiar natywnego dane, które mają być przekazywane.</summary>
        <returns>Rozmiar w bajtach, danych w trybie macierzystym.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MarshalManagedToNative">
      <MemberSignature Language="C#" Value="public IntPtr MarshalManagedToNative (object ManagedObj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance native int MarshalManagedToNative(object ManagedObj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ICustomMarshaler.MarshalManagedToNative(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function MarshalManagedToNative (ManagedObj As Object) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IntPtr MarshalManagedToNative(System::Object ^ ManagedObj);" />
      <MemberSignature Language="F#" Value="abstract member MarshalManagedToNative : obj -&gt; nativeint" Usage="iCustomMarshaler.MarshalManagedToNative ManagedObj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ManagedObj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="ManagedObj">Obiektu zarządzanego, który ma zostać przekonwertowany.</param>
        <summary>Konwertuje dane zarządzane niezarządzanych danych.</summary>
        <returns>Wskaźnik do widoku COM zarządzanego obiektu.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="MarshalNativeToManaged">
      <MemberSignature Language="C#" Value="public object MarshalNativeToManaged (IntPtr pNativeData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object MarshalNativeToManaged(native int pNativeData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.ICustomMarshaler.MarshalNativeToManaged(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Function MarshalNativeToManaged (pNativeData As IntPtr) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ MarshalNativeToManaged(IntPtr pNativeData);" />
      <MemberSignature Language="F#" Value="abstract member MarshalNativeToManaged : nativeint -&gt; obj" Usage="iCustomMarshaler.MarshalNativeToManaged pNativeData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pNativeData" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="pNativeData">Wskaźnik do niezarządzanych danych w celu jej opakowania.</param>
        <summary>Konwertuje dane zarządzane niezarządzanych danych.</summary>
        <returns>Obiekt, który reprezentuje zarządzanych wgląd w dane modelu COM.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>