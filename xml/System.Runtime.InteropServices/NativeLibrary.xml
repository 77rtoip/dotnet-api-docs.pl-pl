<Type Name="NativeLibrary" FullName="System.Runtime.InteropServices.NativeLibrary">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d3e9c92383bb3920d2d1beecdaf4b28f1c4c0256" /><Meta Name="ms.sourcegitcommit" Value="634678f7ccd2928c6b2cf792a301b079b63639af" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="07/26/2019" /><Meta Name="ms.locfileid" Value="68541725" /></Metadata><TypeSignature Language="C#" Value="public static class NativeLibrary" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit NativeLibrary extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.InteropServices.NativeLibrary" />
  <TypeSignature Language="VB.NET" Value="Public Class NativeLibrary" />
  <TypeSignature Language="C++ CLI" Value="public ref class NativeLibrary abstract sealed" />
  <TypeSignature Language="F#" Value="type NativeLibrary = class" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.InteropServices</AssemblyName>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Udostępnia interfejsy API do zarządzania bibliotekami macierzystymi.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="Free">
      <MemberSignature Language="C#" Value="public static void Free (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Free(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NativeLibrary.Free(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Free (handle As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Free(IntPtr handle);" />
      <MemberSignature Language="F#" Value="static member Free : nativeint -&gt; unit" Usage="System.Runtime.InteropServices.NativeLibrary.Free handle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Dojście do biblioteki natywnej, które ma zostać zwolnione.</param>
        <summary>Zwalnia dany załadowany uchwyt biblioteki lub nie podejmuje żadnej akcji, jeśli dojście do danych wejściowych <see cref="F:System.IntPtr.Zero" />jest.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetExport">
      <MemberSignature Language="C#" Value="public static IntPtr GetExport (IntPtr handle, string name);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int GetExport(native int handle, string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NativeLibrary.GetExport(System.IntPtr,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetExport (handle As IntPtr, name As String) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static IntPtr GetExport(IntPtr handle, System::String ^ name);" />
      <MemberSignature Language="F#" Value="static member GetExport : nativeint * string -&gt; nativeint" Usage="System.Runtime.InteropServices.NativeLibrary.GetExport (handle, name)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="handle">Uchwyt biblioteki natywnej.</param>
        <param name="name">Nazwa wyeksportowanego symbolu.</param>
        <summary>Pobiera adres wyeksportowanego symbolu.</summary>
        <returns>Adres symbolu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

Jest to prosty otoka wokół wywołań systemu operacyjnego i nie wykonuje żadnej nazwy dekorowanie.

         ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="handle" />lub <paramref name="name" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.EntryPointNotFoundException">Symbol nie został znaleziony.</exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static IntPtr Load (string libraryPath);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int Load(string libraryPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NativeLibrary.Load(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Load (libraryPath As String) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static IntPtr Load(System::String ^ libraryPath);" />
      <MemberSignature Language="F#" Value="static member Load : string -&gt; nativeint" Usage="System.Runtime.InteropServices.NativeLibrary.Load libraryPath" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="libraryPath" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="libraryPath">Nazwa natywnej biblioteki, która ma zostać załadowana.</param>
        <summary>Udostępnia prosty interfejs API do ładowania biblioteki natywnej, która otacza moduł ładujący system operacyjny i używa domyślnych flag.</summary>
        <returns>Uchwyt dla załadowanej biblioteki natywnej.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="libraryPath" />jest <see langword="null" />.</exception>
        <exception cref="T:System.DllNotFoundException">Nie można znaleźć biblioteki.</exception>
        <exception cref="T:System.BadImageFormatException">Biblioteka jest nieprawidłowa.</exception>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public static IntPtr Load (string libraryName, System.Reflection.Assembly assembly, Nullable&lt;System.Runtime.InteropServices.DllImportSearchPath&gt; searchPath);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig native int Load(string libraryName, class System.Reflection.Assembly assembly, valuetype System.Nullable`1&lt;valuetype System.Runtime.InteropServices.DllImportSearchPath&gt; searchPath) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NativeLibrary.Load(System.String,System.Reflection.Assembly,System.Nullable{System.Runtime.InteropServices.DllImportSearchPath})" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static IntPtr Load(System::String ^ libraryName, System::Reflection::Assembly ^ assembly, Nullable&lt;System::Runtime::InteropServices::DllImportSearchPath&gt; searchPath);" />
      <MemberSignature Language="F#" Value="static member Load : string * System.Reflection.Assembly * Nullable&lt;System.Runtime.InteropServices.DllImportSearchPath&gt; -&gt; nativeint" Usage="System.Runtime.InteropServices.NativeLibrary.Load (libraryName, assembly, searchPath)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="libraryName" Type="System.String" />
        <Parameter Name="assembly" Type="System.Reflection.Assembly" />
        <Parameter Name="searchPath" Type="System.Nullable&lt;System.Runtime.InteropServices.DllImportSearchPath&gt;" />
      </Parameters>
      <Docs>
        <param name="libraryName">Nazwa natywnej biblioteki, która ma zostać załadowana.</param>
        <param name="assembly">Zestaw ładujący bibliotekę natywną.</param>
        <param name="searchPath">Ścieżka wyszukiwania.</param>
        <summary>Zapewnia interfejs API wysokiego poziomu do ładowania biblioteki natywnej.</summary>
        <returns>Uchwyt dla załadowanej biblioteki.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  

Mając nazwę biblioteki, ta metoda przeszukuje określone ścieżki na podstawie konfiguracji środowiska uruchomieniowego, parametrów wejściowych i atrybutów zestawu wywołującego. `searchPath` Jeśli parametr ma wartość różną od null, są używane flagi w tym wyliczeniu. W przeciwnym razie są używane flagi określone <xref:System.Runtime.InteropServices.DefaultDllImportSearchPathsAttribute> przez zestaw wywołujący, jeśli istnieją. Ta metoda nie wywołuje następujących zarządzanych wywołań zwrotnych do rozpoznawania biblioteki natywnej: 

- Zarejestrowane wywołanie zwrotne dla każdego zestawu.
- <xref:System.Runtime.Loader.AssemblyLoadContext.LoadUnmanagedDll%2A?displayProperty=nameWithType> Metoda.
- <xref:System.Runtime.Loader.AssemblyLoadContext.ResolvingUnmanagedDll?displayProperty=nameWithType> Zdarzenie.

         ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="libraryName" />lub <paramref name="assembly" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="assembly" />nie <see langword="RuntimeAssembly" />jest.</exception>
        <exception cref="T:System.DllNotFoundException">Nie można znaleźć biblioteki.</exception>
        <exception cref="T:System.BadImageFormatException">Biblioteka jest nieprawidłowa.</exception>
      </Docs>
    </Member>
    <Member MemberName="SetDllImportResolver">
      <MemberSignature Language="C#" Value="public static void SetDllImportResolver (System.Reflection.Assembly assembly, System.Runtime.InteropServices.DllImportResolver resolver);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SetDllImportResolver(class System.Reflection.Assembly assembly, class System.Runtime.InteropServices.DllImportResolver resolver) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NativeLibrary.SetDllImportResolver(System.Reflection.Assembly,System.Runtime.InteropServices.DllImportResolver)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SetDllImportResolver(System::Reflection::Assembly ^ assembly, System::Runtime::InteropServices::DllImportResolver ^ resolver);" />
      <MemberSignature Language="F#" Value="static member SetDllImportResolver : System.Reflection.Assembly * System.Runtime.InteropServices.DllImportResolver -&gt; unit" Usage="System.Runtime.InteropServices.NativeLibrary.SetDllImportResolver (assembly, resolver)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="assembly" Type="System.Reflection.Assembly" />
        <Parameter Name="resolver" Type="System.Runtime.InteropServices.DllImportResolver" />
      </Parameters>
      <Docs>
        <param name="assembly">Zestaw, dla którego zarejestrowano program rozpoznawania nazw.</param>
        <param name="resolver">Wywołanie zwrotne programu rozpoznawania nazw do rejestracji.</param>
        <summary>Ustawia wywołanie zwrotne służące do rozpoznawania importów biblioteki natywnej z zestawu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

Ten program rozpoznawania na zestaw jest pierwszą próbą rozpoznania natywnych obciążeń biblioteki inicjowanych przez ten zestaw. 

Dla każdego zestawu można zarejestrować tylko jeden mechanizm rozpoznawania nazw. Próba zarejestrowania drugiego programu rozpoznawania nazw kończy się <xref:System.InvalidOperationException>niepowodzeniem z.

         ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="assembly" />lub paramref Name = "resolver"/&gt; is <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Mechanizm rozwiązywania konfliktów został już ustawiony dla tego zestawu.</exception>
      </Docs>
    </Member>
    <Member MemberName="TryGetExport">
      <MemberSignature Language="C#" Value="public static bool TryGetExport (IntPtr handle, string name, out IntPtr address);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryGetExport(native int handle, string name, [out] native int&amp; address) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NativeLibrary.TryGetExport(System.IntPtr,System.String,System.IntPtr@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryGetExport (handle As IntPtr, name As String, ByRef address As IntPtr) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryGetExport(IntPtr handle, System::String ^ name, [Runtime::InteropServices::Out] IntPtr % address);" />
      <MemberSignature Language="F#" Value="static member TryGetExport : nativeint * string *  -&gt; bool" Usage="System.Runtime.InteropServices.NativeLibrary.TryGetExport (handle, name, address)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="address" Type="System.IntPtr" RefType="out" />
      </Parameters>
      <Docs>
        <param name="handle">Uchwyt biblioteki natywnej.</param>
        <param name="name">Nazwa wyeksportowanego symbolu.</param>
        <param name="address">Gdy metoda zwraca, zawiera adres symbolu, jeśli istnieje.</param>
        <summary>Pobiera adres wyeksportowanego symbolu i zwraca wartość wskazującą, czy wywołanie metody powiodło się.</summary>
        <returns><see langword="true" />Jeśli metoda została pomyślnie zwrócona; w przeciwnym razie. <see langword="false" /></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="handle" />lub <paramref name="name" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="TryLoad">
      <MemberSignature Language="C#" Value="public static bool TryLoad (string libraryPath, out IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryLoad(string libraryPath, [out] native int&amp; handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NativeLibrary.TryLoad(System.String,System.IntPtr@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryLoad (libraryPath As String, ByRef handle As IntPtr) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryLoad(System::String ^ libraryPath, [Runtime::InteropServices::Out] IntPtr % handle);" />
      <MemberSignature Language="F#" Value="static member TryLoad : string *  -&gt; bool" Usage="System.Runtime.InteropServices.NativeLibrary.TryLoad (libraryPath, handle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="libraryPath" Type="System.String" />
        <Parameter Name="handle" Type="System.IntPtr" RefType="out" />
      </Parameters>
      <Docs>
        <param name="libraryPath">Nazwa natywnej biblioteki, która ma zostać załadowana.</param>
        <param name="handle">Gdy metoda zwraca, dojście załadowanej biblioteki natywnej.</param>
        <summary>Udostępnia prosty interfejs API do ładowania biblioteki natywnej i zwraca wartość wskazującą, czy operacja zakończyła się pomyślnie.</summary>
        <returns><see langword="true" />Jeśli biblioteka natywna została załadowana pomyślnie; w przeciwnym razie. <see langword="false" /></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="libraryPath" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="TryLoad">
      <MemberSignature Language="C#" Value="public static bool TryLoad (string libraryName, System.Reflection.Assembly assembly, Nullable&lt;System.Runtime.InteropServices.DllImportSearchPath&gt; searchPath, out IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryLoad(string libraryName, class System.Reflection.Assembly assembly, valuetype System.Nullable`1&lt;valuetype System.Runtime.InteropServices.DllImportSearchPath&gt; searchPath, [out] native int&amp; handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.NativeLibrary.TryLoad(System.String,System.Reflection.Assembly,System.Nullable{System.Runtime.InteropServices.DllImportSearchPath},System.IntPtr@)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryLoad(System::String ^ libraryName, System::Reflection::Assembly ^ assembly, Nullable&lt;System::Runtime::InteropServices::DllImportSearchPath&gt; searchPath, [Runtime::InteropServices::Out] IntPtr % handle);" />
      <MemberSignature Language="F#" Value="static member TryLoad : string * System.Reflection.Assembly * Nullable&lt;System.Runtime.InteropServices.DllImportSearchPath&gt; *  -&gt; bool" Usage="System.Runtime.InteropServices.NativeLibrary.TryLoad (libraryName, assembly, searchPath, handle)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="libraryName" Type="System.String" />
        <Parameter Name="assembly" Type="System.Reflection.Assembly" />
        <Parameter Name="searchPath" Type="System.Nullable&lt;System.Runtime.InteropServices.DllImportSearchPath&gt;" />
        <Parameter Name="handle" Type="System.IntPtr" RefType="out" />
      </Parameters>
      <Docs>
        <param name="libraryName">Nazwa natywnej biblioteki, która ma zostać załadowana.</param>
        <param name="assembly">Zestaw ładujący bibliotekę natywną.</param>
        <param name="searchPath">Ścieżka wyszukiwania.</param>
        <param name="handle">Gdy metoda zwraca, dojście załadowanej biblioteki natywnej.</param>
        <summary>Udostępnia interfejs API wysokiego poziomu, który ładuje bibliotekę natywną i zwraca wartość wskazującą, czy operacja zakończyła się pomyślnie.</summary>
        <returns><see langword="true" />Jeśli operacja ładowania zakończyła się pomyślnie; w przeciwnym razie. <see langword="false" /></returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="libraryPath" />lub <paramref name="assembly" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="assembly" />nie <see langword="RuntimeAssembly" />jest.</exception>
      </Docs>
    </Member>
  </Members>
</Type>