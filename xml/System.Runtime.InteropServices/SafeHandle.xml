<Type Name="SafeHandle" FullName="System.Runtime.InteropServices.SafeHandle">
  <TypeSignature Language="C#" Value="public abstract class SafeHandle : System.Runtime.ConstrainedExecution.CriticalFinalizerObject, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public sequential ansi abstract beforefieldinit SafeHandle extends System.Runtime.ConstrainedExecution.CriticalFinalizerObject implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.InteropServices.SafeHandle" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class SafeHandle&#xA;Inherits CriticalFinalizerObject&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class SafeHandle abstract : System::Runtime::ConstrainedExecution::CriticalFinalizerObject, IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Handles</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime.InteropServices</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
    <BaseTypeName FrameworkAlternate="netframework-4.5">System.Runtime.ConstrainedExecution.CriticalFinalizerObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.Security.SecurityCritical</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary><span data-ttu-id="01791-101">Reprezentuje klasę otoki dla systemu operacyjnego.</span><span class="sxs-lookup"><span data-stu-id="01791-101">Represents a wrapper class for operating system handles.</span></span> <span data-ttu-id="01791-102">Ta klasa musi być dziedziczone.</span><span class="sxs-lookup"><span data-stu-id="01791-102">This class must be inherited.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01791-103"><xref:System.Runtime.InteropServices.SafeHandle> Klasa udostępnia finalizacji krytyczne dojście zasobów, uniemożliwia uchwytów z zostanie odzyskana przedwcześnie przez wyrzucanie elementów bezużytecznych i odtwarzane przez system Windows, aby odwołać niezamierzone niezarządzane obiekty.</span><span class="sxs-lookup"><span data-stu-id="01791-103">The <xref:System.Runtime.InteropServices.SafeHandle> class provides critical finalization of handle resources, preventing handles from being reclaimed prematurely by garbage collection and from being recycled by Windows to reference unintended unmanaged objects.</span></span>  
  
 <span data-ttu-id="01791-104">Ten temat zawiera następujące sekcje:</span><span class="sxs-lookup"><span data-stu-id="01791-104">This topic includes the following sections:</span></span>  
  
 <span data-ttu-id="01791-105">[Dlaczego SafeHandle?](#Why) </span><span class="sxs-lookup"><span data-stu-id="01791-105">[Why SafeHandle?](#Why) </span></span>  
 <span data-ttu-id="01791-106">[Element SafeHandle jest](#Does) </span><span class="sxs-lookup"><span data-stu-id="01791-106">[What SafeHandle does](#Does) </span></span>  
 [<span data-ttu-id="01791-107">Klasy pochodne SafeHandle</span><span class="sxs-lookup"><span data-stu-id="01791-107">Classes derived from SafeHandle</span></span>](#Derived)  
  
<a name="Why"></a>   
## <a name="why-safehandle"></a><span data-ttu-id="01791-108">Dlaczego SafeHandle?</span><span class="sxs-lookup"><span data-stu-id="01791-108">Why SafeHandle?</span></span>  
 <span data-ttu-id="01791-109">Przed .NET Framework w wersji 2.0, wszystkie systemu operacyjnego dojścia może być tylko hermetyzowane w <xref:System.IntPtr> zarządzany otok obiektów.</span><span class="sxs-lookup"><span data-stu-id="01791-109">Before the .NET Framework version 2.0, all operating system handles could only be encapsulated in the <xref:System.IntPtr> managed wrapper object.</span></span> <span data-ttu-id="01791-110">Gdy to wygodny sposób współdziałanie z kodem natywnym, dojść można przedostawać przez asynchroniczne wyjątki, takie jak nieoczekiwanie przerywanie wątku lub przepełnienie stosu.</span><span class="sxs-lookup"><span data-stu-id="01791-110">While this was a convenient way to interoperate with native code, handles could be leaked by asynchronous exceptions, such as a thread aborting unexpectedly or a stack overflow.</span></span> <span data-ttu-id="01791-111">Te asynchroniczne wyjątki są przeszkodę Oczyszczanie zasobów systemu operacyjnego i może wystąpić niemal z dowolnego miejsca w aplikacji.</span><span class="sxs-lookup"><span data-stu-id="01791-111">These asynchronous exceptions are an obstacle to cleaning up operating system resources, and they can occur almost anywhere in your app.</span></span>  
  
 <span data-ttu-id="01791-112">Mimo że zastąpień w celu <xref:System.Object.Finalize%2A?displayProperty=nameWithType> — metoda Zezwalaj Oczyszczanie zasobów niezarządzanych, gdy obiekt jest w trakcie bezużytecznych w pewnych okolicznościach, finalizable obiektów można odzyskać przez odzyskiwanie pamięci podczas wykonywania metody dla platformy wywołania wywołanie.</span><span class="sxs-lookup"><span data-stu-id="01791-112">Although overrides to the <xref:System.Object.Finalize%2A?displayProperty=nameWithType> method allow cleanup of unmanaged resources when an object is being garbage collected, in some circumstances, finalizable objects can be reclaimed by garbage collection while executing a method within a platform invoke call.</span></span> <span data-ttu-id="01791-113">Jeśli finalizator zwalnia dojście przekazane do tej platformy wywołaniem, połączenie może prowadzić do uszkodzenia obsługi.</span><span class="sxs-lookup"><span data-stu-id="01791-113">If a finalizer frees the handle passed to that platform invoke call, it could lead to handle corruption.</span></span> <span data-ttu-id="01791-114">Ponadto można odzyskać dojście, gdy metodę zostanie zablokowane, gdy platforma wywołania wywołania, takich jak podczas odczytywania pliku.</span><span class="sxs-lookup"><span data-stu-id="01791-114">The handle could also be reclaimed while your method is blocked during a platform invoke call, such as while reading a file.</span></span>  
  
 <span data-ttu-id="01791-115">Więcej wyczerpaniu ponieważ Windows odtwarzana agresywnie dojść, uchwyt można poddana recyklingowi, a wskaż inny zasób, który może zawierać dane poufne.</span><span class="sxs-lookup"><span data-stu-id="01791-115">More critically, because Windows aggressively recycles handles, a handle could be recycled and point to another resource that might contain sensitive data.</span></span> <span data-ttu-id="01791-116">Jest on znany jako atak odtworzenia i może potencjalnie uszkodzić dane i stanowić zagrożenie bezpieczeństwa.</span><span class="sxs-lookup"><span data-stu-id="01791-116">This is known as a recycle attack and can potentially corrupt data and be a security threat.</span></span>  
  
<a name="Does"></a>   
## <a name="what-safehandle-does"></a><span data-ttu-id="01791-117">Element SafeHandle jest</span><span class="sxs-lookup"><span data-stu-id="01791-117">What SafeHandle does</span></span>  
 <span data-ttu-id="01791-118"><xref:System.Runtime.InteropServices.SafeHandle> Klasa upraszcza kilka te kwestie okresu istnienia obiektów i jest zintegrowana z platformą wywołania tak, aby nie przedostają zasoby systemu operacyjnego.</span><span class="sxs-lookup"><span data-stu-id="01791-118">The <xref:System.Runtime.InteropServices.SafeHandle> class simplifies several of these object lifetime issues, and is integrated with platform invoke so that operating system resources are not leaked.</span></span> <span data-ttu-id="01791-119"><xref:System.Runtime.InteropServices.SafeHandle> Klasy rozwiązuje problemy okres istnienia obiektu przypisując i zwalniania uchwytów bez przeszkód.</span><span class="sxs-lookup"><span data-stu-id="01791-119">The <xref:System.Runtime.InteropServices.SafeHandle> class resolves object lifetime issues by assigning and releasing handles without interruption.</span></span> <span data-ttu-id="01791-120">Zawiera on krytyczne finalizatora, który zapewnia, że dojście zostało zamknięte i działanie podczas nieoczekiwany <xref:System.AppDomain> zwalnia, nawet w przypadku wywołania wywołania platformy zakłada, że jest uszkodzony.</span><span class="sxs-lookup"><span data-stu-id="01791-120">It contains a critical finalizer that ensures that the handle is closed and is guaranteed to run during unexpected <xref:System.AppDomain> unloads, even in cases when the platform invoke call is assumed to be in a corrupted state.</span></span>  
  
 <span data-ttu-id="01791-121">Ponieważ <xref:System.Runtime.InteropServices.SafeHandle> dziedziczy <xref:System.Runtime.ConstrainedExecution.CriticalFinalizerObject>, wszystkie niekrytyczne finalizatory są wywoływane przed każdą finalizatory krytyczne.</span><span class="sxs-lookup"><span data-stu-id="01791-121">Because <xref:System.Runtime.InteropServices.SafeHandle> inherits from <xref:System.Runtime.ConstrainedExecution.CriticalFinalizerObject>, all the noncritical finalizers are called before any of the critical finalizers.</span></span> <span data-ttu-id="01791-122">Finalizatory są nazywane na obiektach, które nie są już na żywo podczas przebiegu kolekcji tej samej pamięci.</span><span class="sxs-lookup"><span data-stu-id="01791-122">The finalizers are called on objects that are no longer live during the same garbage collection pass.</span></span> <span data-ttu-id="01791-123">Na przykład <xref:System.IO.FileStream> obiektu można uruchomić normalne finalizator opróżnić istniejące dane buforowane bez ryzyka dojścia jest ujawnione lub poddawane recyklingowi.</span><span class="sxs-lookup"><span data-stu-id="01791-123">For example, a <xref:System.IO.FileStream> object can run a normal finalizer to flush out existing buffered data without the risk of the handle being leaked or recycled.</span></span> <span data-ttu-id="01791-124">Ten bardzo słabe kolejności między finalizatory krytyczne i niekrytyczne nie jest przeznaczony do użytku ogólnego.</span><span class="sxs-lookup"><span data-stu-id="01791-124">This very weak ordering between critical and noncritical finalizers is not intended for general use.</span></span> <span data-ttu-id="01791-125">Istnieje głównie w celu pomocy w procesie migracji istniejącej biblioteki zezwalając te biblioteki do użycia <xref:System.Runtime.InteropServices.SafeHandle> bez zmiany ich semantyki.</span><span class="sxs-lookup"><span data-stu-id="01791-125">It exists primarily to assist in the migration of existing libraries by allowing those libraries to use <xref:System.Runtime.InteropServices.SafeHandle> without altering their semantics.</span></span> <span data-ttu-id="01791-126">Ponadto krytyczne finalizatora i niczego wywołuje, takich jak <xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle?displayProperty=nameWithType> metody, musi być w regionie ograniczonego wykonania.</span><span class="sxs-lookup"><span data-stu-id="01791-126">Additionally, the critical finalizer and anything it calls, such as the <xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle?displayProperty=nameWithType> method, must be in a constrained execution region.</span></span> <span data-ttu-id="01791-127">To nakłada ograniczenia dotyczące kodu, jakie mogą być zapisywane w obrębie wykresu wywołań finalizatora.</span><span class="sxs-lookup"><span data-stu-id="01791-127">This imposes constraints on what code can be written within the finalizer's call graph.</span></span>  
  
 <span data-ttu-id="01791-128">Wywołanie operacji platformy automatycznie zwiększyć liczebności referencyjnej dojść zamknięte przez <xref:System.Runtime.InteropServices.SafeHandle> i zmniejszyć ich po zakończeniu.</span><span class="sxs-lookup"><span data-stu-id="01791-128">Platform invoke operations automatically increment the reference count of handles encapsulated by a <xref:System.Runtime.InteropServices.SafeHandle> and decrement them upon completion.</span></span> <span data-ttu-id="01791-129">Dzięki temu, że dojście nie zostanie poddanych recyklingowi ani został nieoczekiwanie zamknięty.</span><span class="sxs-lookup"><span data-stu-id="01791-129">This ensures that the handle will not be recycled or closed unexpectedly.</span></span>  
  
 <span data-ttu-id="01791-130">Własność dojścia podstawowej można określić podczas tworzenia <xref:System.Runtime.InteropServices.SafeHandle> obiektów, podając wartość `ownsHandle` argument <xref:System.Runtime.InteropServices.SafeHandle> konstruktora klasy.</span><span class="sxs-lookup"><span data-stu-id="01791-130">You can specify ownership of the underlying handle when constructing <xref:System.Runtime.InteropServices.SafeHandle> objects by supplying a value to the `ownsHandle` argument in the <xref:System.Runtime.InteropServices.SafeHandle> class constructor.</span></span> <span data-ttu-id="01791-131">Określa, to czy <xref:System.Runtime.InteropServices.SafeHandle> obiektu będzie zwolnić dojścia po usunięciu obiektu.</span><span class="sxs-lookup"><span data-stu-id="01791-131">This controls whether the <xref:System.Runtime.InteropServices.SafeHandle> object will release the handle after the object has been disposed.</span></span>  <span data-ttu-id="01791-132">Jest to przydatne dla dojść wymagań specyficznych okres istnienia lub służący do konsumowania uchwytu, którego okres istnienia jest kontrolowany przez kogoś innego.</span><span class="sxs-lookup"><span data-stu-id="01791-132">This is useful for handles with peculiar lifetime requirements or for consuming a handle whose lifetime is controlled by someone else.</span></span>  
  
<a name="Derived"></a>   
## <a name="classes-derived-from-safehandle"></a><span data-ttu-id="01791-133">Klasy pochodne SafeHandle</span><span class="sxs-lookup"><span data-stu-id="01791-133">Classes derived from SafeHandle</span></span>  
 <span data-ttu-id="01791-134"><xref:System.Runtime.InteropServices.SafeHandle> jest to klasa abstrakcyjna otoki dla systemu operacyjnego.</span><span class="sxs-lookup"><span data-stu-id="01791-134"><xref:System.Runtime.InteropServices.SafeHandle> is an abstract wrapper class for operating system handles.</span></span> <span data-ttu-id="01791-135">Wyprowadzanie z tej klasy jest trudne.</span><span class="sxs-lookup"><span data-stu-id="01791-135">Deriving from this class is difficult.</span></span> <span data-ttu-id="01791-136">Zamiast tego należy użyć klasy pochodnej w <xref:Microsoft.Win32.SafeHandles> przestrzeni nazw, która zapewnienia bezpiecznego dojścia do następujących:</span><span class="sxs-lookup"><span data-stu-id="01791-136">Instead, use the derived classes in the <xref:Microsoft.Win32.SafeHandles> namespace that provide safe handles for the following:</span></span>  
  
-   <span data-ttu-id="01791-137">Pliki ( <xref:Microsoft.Win32.SafeHandles.SafeFileHandle> klasy).</span><span class="sxs-lookup"><span data-stu-id="01791-137">Files (the <xref:Microsoft.Win32.SafeHandles.SafeFileHandle> class).</span></span>  
  
-   <span data-ttu-id="01791-138">Pliki mapowane do pamięci ( <xref:Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle> klasy).</span><span class="sxs-lookup"><span data-stu-id="01791-138">Memory mapped files (the <xref:Microsoft.Win32.SafeHandles.SafeMemoryMappedFileHandle> class).</span></span>  
  
-   <span data-ttu-id="01791-139">Potoki ( <xref:Microsoft.Win32.SafeHandles.SafePipeHandle> klasy).</span><span class="sxs-lookup"><span data-stu-id="01791-139">Pipes (the <xref:Microsoft.Win32.SafeHandles.SafePipeHandle> class).</span></span>  
  
-   <span data-ttu-id="01791-140">Widoki pamięci ( <xref:Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle> klasy).</span><span class="sxs-lookup"><span data-stu-id="01791-140">Memory views (the <xref:Microsoft.Win32.SafeHandles.SafeMemoryMappedViewHandle> class).</span></span>  
  
-   <span data-ttu-id="01791-141">Konstrukcje kryptografii ( <xref:Microsoft.Win32.SafeHandles.SafeNCryptHandle>, <xref:Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle>, <xref:Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle>, i <xref:Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle> klasy).</span><span class="sxs-lookup"><span data-stu-id="01791-141">Cryptography constructs (the <xref:Microsoft.Win32.SafeHandles.SafeNCryptHandle>, <xref:Microsoft.Win32.SafeHandles.SafeNCryptKeyHandle>, <xref:Microsoft.Win32.SafeHandles.SafeNCryptProviderHandle>, and <xref:Microsoft.Win32.SafeHandles.SafeNCryptSecretHandle> classes).</span></span>  
  
-   <span data-ttu-id="01791-142">Procesy ( <xref:Microsoft.Win32.SafeHandles.SafeProcessHandle> klasy).</span><span class="sxs-lookup"><span data-stu-id="01791-142">Processes (the <xref:Microsoft.Win32.SafeHandles.SafeProcessHandle> class).</span></span>  
  
-   <span data-ttu-id="01791-143">Klucze rejestru ( <xref:Microsoft.Win32.SafeHandles.SafeRegistryHandle> klasy).</span><span class="sxs-lookup"><span data-stu-id="01791-143">Registry keys (the <xref:Microsoft.Win32.SafeHandles.SafeRegistryHandle> class).</span></span>  
  
-   <span data-ttu-id="01791-144">Uchwyty oczekiwania ( <xref:Microsoft.Win32.SafeHandles.SafeWaitHandle> klasy).</span><span class="sxs-lookup"><span data-stu-id="01791-144">Wait handles (the <xref:Microsoft.Win32.SafeHandles.SafeWaitHandle> class).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="01791-145">Poniższy przykład kodu tworzy niestandardowe bezpieczne dojście dla systemu operacyjnego dojście do pliku, wynikające z <xref:Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid>.</span><span class="sxs-lookup"><span data-stu-id="01791-145">The following code example creates a custom safe handle for an operating system file handle, deriving from <xref:Microsoft.Win32.SafeHandles.SafeHandleZeroOrMinusOneIsInvalid>.</span></span> <span data-ttu-id="01791-146">Odczytuje bajtów z pliku i wyświetla wartości szesnastkowe.</span><span class="sxs-lookup"><span data-stu-id="01791-146">It reads bytes from a file and displays their hexadecimal values.</span></span> <span data-ttu-id="01791-147">Zawiera także błąd testowania kontroler, która powoduje wątku przerwania, ale wartość uchwytu zostanie zwolniona.</span><span class="sxs-lookup"><span data-stu-id="01791-147">It also contains a fault testing harness that causes the thread to abort, but the handle value is freed.</span></span>  <span data-ttu-id="01791-148">Korzystając z <xref:System.IntPtr> do reprezentowania dojść, dojście jest czasami ujawnione ze względu na przerwanie asynchronicznego wątku.</span><span class="sxs-lookup"><span data-stu-id="01791-148">When using an <xref:System.IntPtr> to represent handles, the handle is occasionally leaked due to the asynchronous thread abort.</span></span>  
  
 <span data-ttu-id="01791-149">Konieczne będzie pliku tekstowego w tym samym folderze co skompilowanej aplikacji.</span><span class="sxs-lookup"><span data-stu-id="01791-149">You will need a text file in the same folder as the compiled application.</span></span> <span data-ttu-id="01791-150">Przy założeniu, że nazwa aplikacji "HexViewer", jest użycie wiersza polecenia:</span><span class="sxs-lookup"><span data-stu-id="01791-150">Assuming that you name the application "HexViewer", the command line usage is:</span></span>  
  
 `HexViewer <filename> -Fault`  
  
 <span data-ttu-id="01791-151">Opcjonalnie można określić `-Fault` celowo prób wyciek dojście przez przerywanie wątku w niektórych okna.</span><span class="sxs-lookup"><span data-stu-id="01791-151">Optionally specify `-Fault` to intentionally attempt to leak the handle by aborting the thread in a certain window.</span></span> <span data-ttu-id="01791-152">Narzędzie Perform.exe systemu Windows do monitorowania liczby dojścia podczas wstrzyknięcie błędów.</span><span class="sxs-lookup"><span data-stu-id="01791-152">Use the Windows Perform.exe tool to monitor handle counts while injecting faults.</span></span>  
  
 [!code-csharp[SafeHandle#1](~/samples/snippets/csharp/VS_Snippets_CLR/SafeHandle/CS/program.cs#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand"><span data-ttu-id="01791-153">aby uzyskać pełne zaufanie dla obiektów dziedziczących.</span><span class="sxs-lookup"><span data-stu-id="01791-153">for full trust for inheritors.</span></span> <span data-ttu-id="01791-154">Ten element członkowski nie może być dziedziczona przez kod częściowo zaufany.</span><span class="sxs-lookup"><span data-stu-id="01791-154">This member cannot be inherited by partially trusted code.</span></span></permission>
    <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="01791-155">Wymaga pełnego zaufania do bezpośredniego obiektu wywołującego.</span><span class="sxs-lookup"><span data-stu-id="01791-155">requires full trust for the immediate caller.</span></span> <span data-ttu-id="01791-156">Ten element członkowski nie może być używany przez częściowo zaufany lub przejrzysty kod.</span><span class="sxs-lookup"><span data-stu-id="01791-156">This member cannot be used by partially trusted or transparent code.</span></span></permission>
    <block subset="none" type="overrides">
      <para><span data-ttu-id="01791-157">Aby utworzyć klasę pochodzącą od <see cref="T:System.Runtime.InteropServices.SafeHandle" />, musisz znać sposób tworzenia i zwolnić dojścia systemu operacyjnego.</span><span class="sxs-lookup"><span data-stu-id="01791-157">To create a class derived from <see cref="T:System.Runtime.InteropServices.SafeHandle" />, you must know how to create and free an operating system handle.</span></span> <span data-ttu-id="01791-158">Ten proces jest inna dojście do różnych typów, ponieważ niektóre używają [CloseHandle](https://msdn.microsoft.com/library/windows/desktop/ms724211.aspx) działanie, a inni korzystają więcej określonych funkcji takich jak [UnmapViewOfFile](https://msdn.microsoft.com/library/windows/desktop/aa366882.aspx) lub [FindClose](https://msdn.microsoft.com/library/windows/desktop/aa364413.aspx).</span><span class="sxs-lookup"><span data-stu-id="01791-158">This process is different for different handle types because some use the [CloseHandle](https://msdn.microsoft.com/library/windows/desktop/ms724211.aspx) function, while others use more specific functions such as [UnmapViewOfFile](https://msdn.microsoft.com/library/windows/desktop/aa366882.aspx) or [FindClose](https://msdn.microsoft.com/library/windows/desktop/aa364413.aspx).</span></span> <span data-ttu-id="01791-159">Z tego powodu należy utworzyć klasy pochodnej z <see cref="T:System.Runtime.InteropServices.SafeHandle" /> dla każdego typu dojścia systemu operacyjnego, który ma być zawijany w bezpieczne dojście.</span><span class="sxs-lookup"><span data-stu-id="01791-159">For this reason, you must create a derived class of <see cref="T:System.Runtime.InteropServices.SafeHandle" /> for each operating system handle type that you want to wrap in a safe handle.</span></span>  
  
 <span data-ttu-id="01791-160">Przy dziedziczeniu z <see cref="T:System.Runtime.InteropServices.SafeHandle" />, konieczne jest przesłonięcie następujących członków: <see cref="P:System.Runtime.InteropServices.SafeHandle.IsInvalid" /> i <see cref="M:System.Runtime.InteropServices.SafeHandle.ReleaseHandle" />.</span><span class="sxs-lookup"><span data-stu-id="01791-160">When you inherit from <see cref="T:System.Runtime.InteropServices.SafeHandle" />, you must override the following members: <see cref="P:System.Runtime.InteropServices.SafeHandle.IsInvalid" /> and <see cref="M:System.Runtime.InteropServices.SafeHandle.ReleaseHandle" />.</span></span>  
  
 <span data-ttu-id="01791-161">Należy również wprowadzić domyślnego konstruktora, który Konstruktor podstawowej z wartością, która reprezentuje wartości nieprawidłowego dojścia i <see cref="T:System.Boolean" /> wartość wskazującą, czy jest własnością uchwyt macierzysty <see cref="T:System.Runtime.InteropServices.SafeHandle" /> i w związku z tym powinien zostać zwolniony podczas które <see cref="T:System.Runtime.InteropServices.SafeHandle" /> został usunięty.</span><span class="sxs-lookup"><span data-stu-id="01791-161">You should also provide a default constructor that calls the base constructor with a value that represent an invalid handle value, and a <see cref="T:System.Boolean" /> value indicating whether the native handle is owned by the <see cref="T:System.Runtime.InteropServices.SafeHandle" /> and consequently should be freed when that <see cref="T:System.Runtime.InteropServices.SafeHandle" /> has been disposed.</span></span></para>
    </block>
    <altmember cref="N:Microsoft.Win32.SafeHandles" />
    <altmember cref="T:System.Runtime.InteropServices.CriticalHandle" />
    <altmember cref="T:System.Runtime.ConstrainedExecution.CriticalFinalizerObject" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SafeHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.SafeHandle.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; SafeHandle();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected SafeHandle (IntPtr invalidHandleValue, bool ownsHandle);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(native int invalidHandleValue, bool ownsHandle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.SafeHandle.#ctor(System.IntPtr,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (invalidHandleValue As IntPtr, ownsHandle As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; SafeHandle(IntPtr invalidHandleValue, bool ownsHandle);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="invalidHandleValue" Type="System.IntPtr" />
        <Parameter Name="ownsHandle" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="invalidHandleValue"><span data-ttu-id="01791-162">Wartość nieprawidłowego dojścia (zazwyczaj 0 lub wartość-1).</span><span class="sxs-lookup"><span data-stu-id="01791-162">The value of an invalid handle (usually 0 or -1).</span></span>  <span data-ttu-id="01791-163">Implementacji <see cref="P:System.Runtime.InteropServices.SafeHandle.IsInvalid" /> powinien zwrócić <see langword="true" /> dla tej wartości.</span><span class="sxs-lookup"><span data-stu-id="01791-163">Your implementation of <see cref="P:System.Runtime.InteropServices.SafeHandle.IsInvalid" /> should return <see langword="true" /> for this value.</span></span></param>
        <param name="ownsHandle">
          <span data-ttu-id="01791-164"><see langword="true" /> Aby umożliwić niezawodnie <see cref="T:System.Runtime.InteropServices.SafeHandle" /> zwolnić dojścia w fazie finalizacji; w przeciwnym razie <see langword="false" /> (niezalecane).</span><span class="sxs-lookup"><span data-stu-id="01791-164"><see langword="true" /> to reliably let <see cref="T:System.Runtime.InteropServices.SafeHandle" /> release the handle during the finalization phase; otherwise, <see langword="false" /> (not recommended).</span></span></param>
        <summary><span data-ttu-id="01791-165">Inicjuje nowe wystąpienie klasy <see cref="T:System.Runtime.InteropServices.SafeHandle" /> klasy z wartością określony nieprawidłowy uchwyt.</span><span class="sxs-lookup"><span data-stu-id="01791-165">Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.SafeHandle" /> class with the specified invalid handle value.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01791-166">Jeśli `ownsHandle` parametr jest `false`, <xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A> nigdy nie jest wywoływana; w związku z tym nie jest zalecane do użycia wartości tego parametru, jak kod wycieku zasobów.</span><span class="sxs-lookup"><span data-stu-id="01791-166">If the `ownsHandle` parameter is `false`, <xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A> is never called; thus, it is not recommended to use this parameter value as your code may leak resources.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.TypeLoadException"><span data-ttu-id="01791-167">Klasa pochodna znajduje się w zestawie bez uprawnienia dostępu do kodu niezarządzanego.</span><span class="sxs-lookup"><span data-stu-id="01791-167">The derived class resides in an assembly without unmanaged code access permission.</span></span></exception>
        <permission cref="F:System.Security.Permissions.SecurityAction.InheritanceDemand"><span data-ttu-id="01791-168">aby uzyskać pełne zaufanie dla obiektów dziedziczących.</span><span class="sxs-lookup"><span data-stu-id="01791-168">for full trust for inheritors.</span></span> <span data-ttu-id="01791-169">Ten element członkowski nie może być dziedziczona przez kod częściowo zaufany.</span><span class="sxs-lookup"><span data-stu-id="01791-169">This member cannot be inherited by partially trusted code.</span></span></permission>
        <permission cref="T:System.Security.SecurityCriticalAttribute"><span data-ttu-id="01791-170">Wymaga pełnego zaufania do bezpośredniego obiektu wywołującego.</span><span class="sxs-lookup"><span data-stu-id="01791-170">requires full trust for the immediate caller.</span></span> <span data-ttu-id="01791-171">Ten element członkowski nie może być używany przez częściowo zaufany lub przejrzysty kod.</span><span class="sxs-lookup"><span data-stu-id="01791-171">This member cannot be used by partially trusted or transparent code.</span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.SafeHandle.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="01791-172">Oznacza dojście do zwalniania i zwolnić zasoby.</span><span class="sxs-lookup"><span data-stu-id="01791-172">Marks the handle for releasing and freeing resources.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01791-173">Wywoływanie <xref:System.Runtime.InteropServices.SafeHandle.Close%2A> lub <xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A> metoda pozwala zasoby, które ma zostać zwolniony.</span><span class="sxs-lookup"><span data-stu-id="01791-173">Calling the <xref:System.Runtime.InteropServices.SafeHandle.Close%2A> or <xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A> method allows the resources to be freed.</span></span> <span data-ttu-id="01791-174">Może się nie powtórzyła natychmiast inne wątki korzystania z tego samego obiektu bezpieczne dojście, ale odbędzie się, gdy nie jest już wymagane.</span><span class="sxs-lookup"><span data-stu-id="01791-174">This might not happen immediately if other threads are using the same safe handle object, but will happen as soon as that is no longer the case.</span></span> <span data-ttu-id="01791-175">Mimo że większość klas, które używają <xref:System.Runtime.InteropServices.SafeHandle> klasy nie trzeba podać finalizator, czasami jest to konieczne, (na przykład, aby opróżnić limit buforów plików lub do zapisu niektóre dane z powrotem do pamięci).</span><span class="sxs-lookup"><span data-stu-id="01791-175">Although most classes that use the <xref:System.Runtime.InteropServices.SafeHandle> class do not need to provide a finalizer, this is sometimes necessary (for example, to flush out file buffers or to write some data back into memory).</span></span> <span data-ttu-id="01791-176">W takim przypadku klasa może zapewnić finalizatorze działanie przed <xref:System.Runtime.InteropServices.SafeHandle> działa finalizator krytyczne.</span><span class="sxs-lookup"><span data-stu-id="01791-176">In this case, the class can provide a finalizer that is guaranteed to run before the <xref:System.Runtime.InteropServices.SafeHandle> critical finalizer runs.</span></span>  
  
 <span data-ttu-id="01791-177">Wywołanie <xref:System.Runtime.InteropServices.SafeHandle.Close%2A> lub <xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A> metody po zakończeniu przy użyciu <xref:System.Runtime.InteropServices.SafeHandle> obiektu.</span><span class="sxs-lookup"><span data-stu-id="01791-177">Call the <xref:System.Runtime.InteropServices.SafeHandle.Close%2A> or <xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A> method when you are finished using the <xref:System.Runtime.InteropServices.SafeHandle> object.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="01791-178">Wywoływanie zawsze <xref:System.Runtime.InteropServices.SafeHandle.Close%2A> lub <xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A> przed zwolnieniem ostatniego odwołania do <xref:System.Runtime.InteropServices.SafeHandle> obiektu.</span><span class="sxs-lookup"><span data-stu-id="01791-178">Always call <xref:System.Runtime.InteropServices.SafeHandle.Close%2A> or <xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A> before you release your last reference to the <xref:System.Runtime.InteropServices.SafeHandle> object.</span></span> <span data-ttu-id="01791-179">W przeciwnym razie używa zasobów nie zostanie zwolniona do wywołania modułu zbierającego elementy bezużyteczne <xref:System.Runtime.InteropServices.SafeHandle> obiektu <xref:System.Runtime.InteropServices.SafeHandle.Finalize%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="01791-179">Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Runtime.InteropServices.SafeHandle> object's <xref:System.Runtime.InteropServices.SafeHandle.Finalize%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="01791-180">Aby uzyskać uprawnienia do wywoływania kodu niezarządzanego.</span><span class="sxs-lookup"><span data-stu-id="01791-180">for permission to call unmanaged code.</span></span> <span data-ttu-id="01791-181">Akcja zabezpieczeń: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span><span class="sxs-lookup"><span data-stu-id="01791-181">Security action: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span></span> <span data-ttu-id="01791-182">Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="01791-182">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="DangerousAddRef">
      <MemberSignature Language="C#" Value="public void DangerousAddRef (ref bool success);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DangerousAddRef(bool&amp; success) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DangerousAddRef (ByRef success As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DangerousAddRef(bool % success);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.MayFail)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="success" Type="System.Boolean&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="success">
          <span data-ttu-id="01791-183"><see langword="true" /> Jeśli licznik odwołanie zostało pomyślnie zwiększany; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="01791-183"><see langword="true" /> if the reference counter was successfully incremented; otherwise, <see langword="false" />.</span></span></param>
        <summary><span data-ttu-id="01791-184">Ręcznie zwiększa licznik odwołania na <see cref="T:System.Runtime.InteropServices.SafeHandle" /> wystąpień.</span><span class="sxs-lookup"><span data-stu-id="01791-184">Manually increments the reference counter on <see cref="T:System.Runtime.InteropServices.SafeHandle" /> instances.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01791-185"><xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A> Metody uniemożliwia odzyskiwanie pamięci używanej przez dojście środowisko uruchomieniowe języka wspólnego (które występuje, gdy środowisko urchomieniowe wywołuje <xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A> metody).</span><span class="sxs-lookup"><span data-stu-id="01791-185">The <xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A> method prevents the common language runtime from reclaiming memory used by a handle (which occurs when the runtime calls the <xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A> method).</span></span> <span data-ttu-id="01791-186">Można użyć tę metodę, aby ręcznie przyrostu count odwołanie <xref:System.Runtime.InteropServices.SafeHandle> wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="01791-186">You can use this method to manually increment the reference count on a <xref:System.Runtime.InteropServices.SafeHandle> instance.</span></span> <span data-ttu-id="01791-187"><xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A> Zwraca wartość logiczną przy użyciu `ref` parametr (`success`) wskazująca, czy liczba odwołań został pomyślnie zwiększany.</span><span class="sxs-lookup"><span data-stu-id="01791-187"><xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A> returns a Boolean value using a `ref` parameter (`success`) that indicates whether the reference count was incremented successfully.</span></span> <span data-ttu-id="01791-188">Dzięki temu logika program do Wycofaj w razie awarii.</span><span class="sxs-lookup"><span data-stu-id="01791-188">This allows your program logic to back out in case of failure.</span></span> <span data-ttu-id="01791-189">Należy ustawić `success` do `false` przed wywołaniem <xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A>.</span><span class="sxs-lookup"><span data-stu-id="01791-189">You should set `success` to `false` before calling <xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A>.</span></span> <span data-ttu-id="01791-190">Jeśli `success` jest `true`, uniknąć przecieków zasobów przez dopasowanie wywołanie <xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A> z odpowiedniego wywołania <xref:System.Runtime.InteropServices.SafeHandle.DangerousRelease%2A>.</span><span class="sxs-lookup"><span data-stu-id="01791-190">If `success` is `true`, avoid resource leaks by matching the call to <xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A> with a corresponding call to <xref:System.Runtime.InteropServices.SafeHandle.DangerousRelease%2A>.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="01791-191">Ta metoda jest przeznaczona dla użytkowników zaawansowanych i zawsze należy używać ostrożnie.</span><span class="sxs-lookup"><span data-stu-id="01791-191">This method is intended for advanced users and must always be used carefully.</span></span> <span data-ttu-id="01791-192">Aby uniknąć przeciek dojścia zasobów, zawsze należy wywołać tę metodę w regionie ograniczonego wykonania (CER), gdzie przerwania wątku nie może przerwać przetwarzania.</span><span class="sxs-lookup"><span data-stu-id="01791-192">To avoid leaking handle resources, always call this method inside a constrained execution region (CER), where a thread abort cannot interrupt processing.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="01791-193">Aby uzyskać uprawnienia do wywoływania kodu niezarządzanego.</span><span class="sxs-lookup"><span data-stu-id="01791-193">for permission to call unmanaged code.</span></span> <span data-ttu-id="01791-194">Akcja zabezpieczeń: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span><span class="sxs-lookup"><span data-stu-id="01791-194">Security action: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span></span> <span data-ttu-id="01791-195">Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="01791-195">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.SafeHandle.DangerousRelease" />
      </Docs>
    </Member>
    <Member MemberName="DangerousGetHandle">
      <MemberSignature Language="C#" Value="public IntPtr DangerousGetHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance native int DangerousGetHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle" />
      <MemberSignature Language="VB.NET" Value="Public Function DangerousGetHandle () As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; IntPtr DangerousGetHandle();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="01791-196">Zwraca wartość <see cref="F:System.Runtime.InteropServices.SafeHandle.handle" /> pola.</span><span class="sxs-lookup"><span data-stu-id="01791-196">Returns the value of the <see cref="F:System.Runtime.InteropServices.SafeHandle.handle" /> field.</span></span></summary>
        <returns><span data-ttu-id="01791-197"><see langword="IntPtr" /> Reprezentujący wartość <see cref="F:System.Runtime.InteropServices.SafeHandle.handle" /> pola.</span><span class="sxs-lookup"><span data-stu-id="01791-197">An <see langword="IntPtr" /> representing the value of the <see cref="F:System.Runtime.InteropServices.SafeHandle.handle" /> field.</span></span> <span data-ttu-id="01791-198">Jeśli dojście została oznaczona jako niepoprawna z <see cref="M:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid" />, ta metoda zwraca nadal oryginalnej wartości dojścia może być wartością przestarzałe.</span><span class="sxs-lookup"><span data-stu-id="01791-198">If the handle has been marked invalid with <see cref="M:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid" />, this method still returns the original handle value, which can be a stale value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01791-199">Ta metoda służy do pobierania wartości rzeczywistych dojście wystąpienia programu <xref:System.Runtime.InteropServices.SafeHandle> klasy.</span><span class="sxs-lookup"><span data-stu-id="01791-199">You can use this method to retrieve the actual handle value from an instance of the <xref:System.Runtime.InteropServices.SafeHandle> derived class.</span></span> <span data-ttu-id="01791-200">Ta metoda jest potrzebne do zapewnienia zgodności ponieważ zwraca wiele właściwości w programie .NET Framework `IntPtr` obsługi typów.</span><span class="sxs-lookup"><span data-stu-id="01791-200">This method is needed for backwards compatibility because many properties in the .NET Framework return `IntPtr` handle types.</span></span> <span data-ttu-id="01791-201">`IntPtr` typ dojścia są specyficzne dla platformy typy używane do reprezentowania wskaźnika lub dojścia.</span><span class="sxs-lookup"><span data-stu-id="01791-201">`IntPtr` handle types are platform-specific types used to represent a pointer or a handle.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="01791-202">Przy użyciu <xref:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle%2A> metody może stanowić zagrożenie bezpieczeństwa, ponieważ, jeśli dojście została oznaczona jako niepoprawna z <xref:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid%2A>, <xref:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle%2A> nadal zwraca wartość oryginalne, potencjalnie starych dojścia.</span><span class="sxs-lookup"><span data-stu-id="01791-202">Using the <xref:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle%2A> method can pose security risks because, if the handle has been marked as invalid with <xref:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid%2A>, <xref:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle%2A> still returns the original, potentially stale handle value.</span></span> <span data-ttu-id="01791-203">Zwracane dojście można także ponownie przetworzony w dowolnym momencie.</span><span class="sxs-lookup"><span data-stu-id="01791-203">The returned handle can also be recycled at any point.</span></span> <span data-ttu-id="01791-204">W najlepszym przypadku oznacza to, że dojście może nagle przestać działać.</span><span class="sxs-lookup"><span data-stu-id="01791-204">At best, this means the handle might suddenly stop working.</span></span> <span data-ttu-id="01791-205">W najgorszym przypadku dojście lub zasób, który reprezentuje dojście udostępnienia w kodzie niezaufanym, może to prowadzić do odtwarzania ataku zabezpieczeń na dojście ponownie lub zwrócony.</span><span class="sxs-lookup"><span data-stu-id="01791-205">At worst, if the handle or the resource that the handle represents is exposed to untrusted code, this can lead to a recycling security attack on the reused or returned handle.</span></span> <span data-ttu-id="01791-206">Na przykład niezaufanych wywołujący może zapytania na danych w dojściu tylko zwrócił i otrzymywanie informacji dla zasób całości niepowiązanych.</span><span class="sxs-lookup"><span data-stu-id="01791-206">For example, an untrusted caller can query data on the handle just returned and receive information for an entirely unrelated resource.</span></span> <span data-ttu-id="01791-207">Zobacz <xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A> i <xref:System.Runtime.InteropServices.SafeHandle.DangerousRelease%2A> metod, aby uzyskać więcej informacji o korzystaniu z <xref:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle%2A> methodsafely.</span><span class="sxs-lookup"><span data-stu-id="01791-207">See the <xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A> and the <xref:System.Runtime.InteropServices.SafeHandle.DangerousRelease%2A> methods for more information about using the <xref:System.Runtime.InteropServices.SafeHandle.DangerousGetHandle%2A> methodsafely.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="01791-208">Aby uzyskać uprawnienia do wywoływania kodu niezarządzanego.</span><span class="sxs-lookup"><span data-stu-id="01791-208">for permission to call unmanaged code.</span></span> <span data-ttu-id="01791-209">Akcja zabezpieczeń: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span><span class="sxs-lookup"><span data-stu-id="01791-209">Security action: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span></span> <span data-ttu-id="01791-210">Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="01791-210">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="DangerousRelease">
      <MemberSignature Language="C#" Value="public void DangerousRelease ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DangerousRelease() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.SafeHandle.DangerousRelease" />
      <MemberSignature Language="VB.NET" Value="Public Sub DangerousRelease ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DangerousRelease();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="01791-211">Ręcznie zmniejsza licznika odwołania na <see cref="T:System.Runtime.InteropServices.SafeHandle" /> wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="01791-211">Manually decrements the reference counter on a <see cref="T:System.Runtime.InteropServices.SafeHandle" /> instance.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01791-212"><xref:System.Runtime.InteropServices.SafeHandle.DangerousRelease%2A> Metoda jest odpowiednikiem <xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A>.</span><span class="sxs-lookup"><span data-stu-id="01791-212">The <xref:System.Runtime.InteropServices.SafeHandle.DangerousRelease%2A> method is the counterpart to <xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A>.</span></span> <span data-ttu-id="01791-213">Wywołanie zawsze powinna odpowiadać <xref:System.Runtime.InteropServices.SafeHandle.DangerousRelease%2A> metody z pomyślnym wywołaniem <xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A>.</span><span class="sxs-lookup"><span data-stu-id="01791-213">You should always match a call to the <xref:System.Runtime.InteropServices.SafeHandle.DangerousRelease%2A> method with a successful call to <xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A>.</span></span>  
  
> [!CAUTION]
>  <span data-ttu-id="01791-214">Ta metoda jest przeznaczona dla użytkowników zaawansowanych i zawsze należy używać ostrożnie.</span><span class="sxs-lookup"><span data-stu-id="01791-214">This method is intended for advanced users and must always be used carefully.</span></span> <span data-ttu-id="01791-215">Aby uniknąć przeciek dojścia zasobów, zawsze należy wywołać tę metodę w regionie ograniczonego wykonania (CER), gdzie przerwania wątku nie może przerwać przetwarzania.</span><span class="sxs-lookup"><span data-stu-id="01791-215">To avoid leaking handle resources, always call this method inside a constrained execution region (CER), where a thread abort cannot interrupt processing.</span></span> <span data-ttu-id="01791-216">W taki sam sposób, że niedopasowane <xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A> wywołań może spowodować przecieków zasobów, niedopasowanych <xref:System.Runtime.InteropServices.SafeHandle.DangerousRelease%2A> wywołań może spowodować nieprawidłowe dojście Państwa staną się widoczne dla innych wątków.</span><span class="sxs-lookup"><span data-stu-id="01791-216">In the same way that unmatched <xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A> calls can cause resource leaks, unmatched <xref:System.Runtime.InteropServices.SafeHandle.DangerousRelease%2A> calls can cause invalid handle states to become visible to other threads.</span></span> <span data-ttu-id="01791-217">Nie ujawniaj <xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A> lub <xref:System.Runtime.InteropServices.SafeHandle.DangerousRelease%2A> wywołań kodzie niezaufanym.</span><span class="sxs-lookup"><span data-stu-id="01791-217">Do not expose <xref:System.Runtime.InteropServices.SafeHandle.DangerousAddRef%2A> or <xref:System.Runtime.InteropServices.SafeHandle.DangerousRelease%2A> calls to untrusted code.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="01791-218">Aby uzyskać uprawnienia do wywoływania kodu niezarządzanego.</span><span class="sxs-lookup"><span data-stu-id="01791-218">for permission to call unmanaged code.</span></span> <span data-ttu-id="01791-219">Akcja zabezpieczeń: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span><span class="sxs-lookup"><span data-stu-id="01791-219">Security action: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span></span> <span data-ttu-id="01791-220">Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="01791-220">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.SafeHandle.DangerousAddRef(System.Boolean@)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="01791-221">Zwalnia zasoby używane przez <see cref="T:System.Runtime.InteropServices.SafeHandle" /> klasy.</span><span class="sxs-lookup"><span data-stu-id="01791-221">Releases the resources used by the <see cref="T:System.Runtime.InteropServices.SafeHandle" /> class.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.SafeHandle.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="01791-222">Zwalnia wszelkie zasoby używane przez <see cref="T:System.Runtime.InteropServices.SafeHandle" /> klasy.</span><span class="sxs-lookup"><span data-stu-id="01791-222">Releases all resources used by the <see cref="T:System.Runtime.InteropServices.SafeHandle" /> class.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01791-223">Wywoływanie <xref:System.Runtime.InteropServices.SafeHandle.Close%2A> lub <xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A> metoda pozwala zasoby, które ma zostać zwolniony.</span><span class="sxs-lookup"><span data-stu-id="01791-223">Calling the <xref:System.Runtime.InteropServices.SafeHandle.Close%2A> or <xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A> method allows the resources to be freed.</span></span> <span data-ttu-id="01791-224">Może się nie powtórzyła natychmiast inne wątki korzystania z tego samego wystąpienia bezpieczne dojście, ale odbędzie się, gdy nie jest już wymagane.</span><span class="sxs-lookup"><span data-stu-id="01791-224">This might not happen immediately if other threads are using the same instance of the safe handle, but will happen as soon as that is no longer the case.</span></span> <span data-ttu-id="01791-225">Mimo że większość klas przy użyciu <xref:System.Runtime.InteropServices.SafeHandle> nie trzeba podać finalizator, czasami jest to konieczne, (na przykład można opróżnić limit buforów plików lub zapisania niektóre dane w pamięci).</span><span class="sxs-lookup"><span data-stu-id="01791-225">Although most classes using <xref:System.Runtime.InteropServices.SafeHandle> do not need to provide a finalizer, this is sometimes necessary (for example, to flush out file buffers or to write some data back into memory).</span></span> <span data-ttu-id="01791-226">W takim przypadku zapewniają finalizatorze działanie przed <xref:System.Runtime.InteropServices.SafeHandle> działa finalizator krytyczne.</span><span class="sxs-lookup"><span data-stu-id="01791-226">In this case, they can provide a finalizer that is guaranteed to run before the <xref:System.Runtime.InteropServices.SafeHandle> critical finalizer runs.</span></span>  
  
 <span data-ttu-id="01791-227">Wywołanie <xref:System.Runtime.InteropServices.SafeHandle.Close%2A> lub <xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A> metody po zakończeniu przy użyciu <xref:System.Runtime.InteropServices.SafeHandle> obiektu.</span><span class="sxs-lookup"><span data-stu-id="01791-227">Call the <xref:System.Runtime.InteropServices.SafeHandle.Close%2A> or <xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A> method when you are finished using the <xref:System.Runtime.InteropServices.SafeHandle> object.</span></span> <span data-ttu-id="01791-228"><xref:System.Runtime.InteropServices.SafeHandle.Close%2A> Pozostawia metody <xref:System.Runtime.InteropServices.SafeHandle> obiektu w stanie uniemożliwiającym jego używanie.</span><span class="sxs-lookup"><span data-stu-id="01791-228">The <xref:System.Runtime.InteropServices.SafeHandle.Close%2A> method leaves the <xref:System.Runtime.InteropServices.SafeHandle> object in an unusable state.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="01791-229">Wywoływanie zawsze <xref:System.Runtime.InteropServices.SafeHandle.Close%2A> lub <xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A> metoda przed zwolnieniem ostatniego odwołania do <xref:System.Runtime.InteropServices.SafeHandle> obiektu.</span><span class="sxs-lookup"><span data-stu-id="01791-229">Always call the <xref:System.Runtime.InteropServices.SafeHandle.Close%2A> or <xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A> method before you release your last reference to the <xref:System.Runtime.InteropServices.SafeHandle> object.</span></span> <span data-ttu-id="01791-230">W przeciwnym razie używa zasobów nie zostanie zwolniona do wywołania modułu zbierającego elementy bezużyteczne <xref:System.Runtime.InteropServices.SafeHandle> obiektu <xref:System.Runtime.InteropServices.SafeHandle.Finalize%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="01791-230">Otherwise, the resources it is using will not be freed until the garbage collector calls the <xref:System.Runtime.InteropServices.SafeHandle> object's <xref:System.Runtime.InteropServices.SafeHandle.Finalize%2A> method.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="01791-231">Aby uzyskać uprawnienia do wywoływania kodu niezarządzanego.</span><span class="sxs-lookup"><span data-stu-id="01791-231">for permission to call unmanaged code.</span></span> <span data-ttu-id="01791-232">Akcja zabezpieczeń: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span><span class="sxs-lookup"><span data-stu-id="01791-232">Security action: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span></span> <span data-ttu-id="01791-233">Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="01791-233">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected virtual void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.SafeHandle.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.Security.SecurityCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <span data-ttu-id="01791-234"><see langword="true" /> dla zwykłym dispose operacji. <see langword="false" /> celu sfinalizowania dojście.</span><span class="sxs-lookup"><span data-stu-id="01791-234"><see langword="true" /> for a normal dispose operation; <see langword="false" /> to finalize the handle.</span></span></param>
        <summary><span data-ttu-id="01791-235">Zwalnia zasoby niezarządzane używane przez <see cref="T:System.Runtime.InteropServices.SafeHandle" /> klasa określająca, czy do wykonania zwykłym dispose operacji.</span><span class="sxs-lookup"><span data-stu-id="01791-235">Releases the unmanaged resources used by the <see cref="T:System.Runtime.InteropServices.SafeHandle" /> class specifying whether to perform a normal dispose operation.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01791-236">Należy nigdy nie jawnie wywołać <xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A> metody z `disposing` ustawiono parametr `false`.</span><span class="sxs-lookup"><span data-stu-id="01791-236">You should never explicitly call the <xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A> method with the `disposing` parameter set to `false`.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="01791-237">Aby uzyskać uprawnienia do wywoływania kodu niezarządzanego.</span><span class="sxs-lookup"><span data-stu-id="01791-237">for permission to call unmanaged code.</span></span> <span data-ttu-id="01791-238">Akcja zabezpieczeń: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span><span class="sxs-lookup"><span data-stu-id="01791-238">Security action: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span></span> <span data-ttu-id="01791-239">Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="01791-239">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~SafeHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.SafeHandle.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!SafeHandle ()" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Security.SecuritySafeCritical</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="01791-240">Zwalnia wszystkie zasoby skojarzone z dojścia.</span><span class="sxs-lookup"><span data-stu-id="01791-240">Frees all resources associated with the handle.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01791-241"><xref:System.Runtime.InteropServices.SafeHandle.Finalize%2A> Metoda jest destruktor dla elementu <xref:System.Runtime.InteropServices.SafeHandle> klasy.</span><span class="sxs-lookup"><span data-stu-id="01791-241">The <xref:System.Runtime.InteropServices.SafeHandle.Finalize%2A> method is the destructor for the <xref:System.Runtime.InteropServices.SafeHandle> class.</span></span> <span data-ttu-id="01791-242">Kod aplikacji nie należy bezpośrednio wywołać tej metody.</span><span class="sxs-lookup"><span data-stu-id="01791-242">Application code should not call this method directly.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="01791-243">Aby uzyskać uprawnienia do wywoływania kodu niezarządzanego.</span><span class="sxs-lookup"><span data-stu-id="01791-243">for permission to call unmanaged code.</span></span> <span data-ttu-id="01791-244">Akcja zabezpieczeń: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span><span class="sxs-lookup"><span data-stu-id="01791-244">Security action: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span></span> <span data-ttu-id="01791-245">Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="01791-245">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
        <altmember cref="M:System.Runtime.InteropServices.SafeHandle.Dispose" />
      </Docs>
    </Member>
    <Member MemberName="handle">
      <MemberSignature Language="C#" Value="protected IntPtr handle;" />
      <MemberSignature Language="ILAsm" Value=".field family native int handle" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.SafeHandle.handle" />
      <MemberSignature Language="VB.NET" Value="Protected handle As IntPtr " />
      <MemberSignature Language="C++ CLI" Value="protected: IntPtr handle;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="01791-246">Określa dojście w celu jej opakowania.</span><span class="sxs-lookup"><span data-stu-id="01791-246">Specifies the handle to be wrapped.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01791-247">Nie ujawniaj dojście publicznie (to znaczy poza klasy pochodnej).</span><span class="sxs-lookup"><span data-stu-id="01791-247">Do not expose the handle publicly (that is, outside of the derived class).</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsClosed">
      <MemberSignature Language="C#" Value="public bool IsClosed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsClosed" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices.SafeHandle.IsClosed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsClosed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsClosed { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="01791-248">Pobiera wartość wskazującą, czy dojście jest zamknięty.</span><span class="sxs-lookup"><span data-stu-id="01791-248">Gets a value indicating whether the handle is closed.</span></span></summary>
        <value>
          <span data-ttu-id="01791-249"><see langword="true" /> Jeśli zostanie zamknięty dojście; w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="01791-249"><see langword="true" /> if the handle is closed; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01791-250"><xref:System.Runtime.InteropServices.SafeHandle.IsClosed%2A> Metoda zwraca wartość wskazującą czy <xref:System.Runtime.InteropServices.SafeHandle> obiektu dojście nie jest już skojarzony z zasobem macierzystego.</span><span class="sxs-lookup"><span data-stu-id="01791-250">The <xref:System.Runtime.InteropServices.SafeHandle.IsClosed%2A> method returns a value indicating whether the <xref:System.Runtime.InteropServices.SafeHandle> object's handle is no longer associated with a native resource.</span></span> <span data-ttu-id="01791-251">Ta różni się od definicji <xref:System.Runtime.InteropServices.SafeHandle.IsInvalid%2A> właściwość, która oblicza, czy podanym dojściu zawsze jest uznawane za nieprawidłowe.</span><span class="sxs-lookup"><span data-stu-id="01791-251">This differs from the definition of the <xref:System.Runtime.InteropServices.SafeHandle.IsInvalid%2A> property, which computes whether a given handle is always considered invalid.</span></span> <span data-ttu-id="01791-252"><xref:System.Runtime.InteropServices.SafeHandle.IsClosed%2A> Metoda zwraca `true` wartość w następujących przypadkach:</span><span class="sxs-lookup"><span data-stu-id="01791-252">The <xref:System.Runtime.InteropServices.SafeHandle.IsClosed%2A> method returns a `true` value in the following cases:</span></span>  
  
-   <span data-ttu-id="01791-253"><xref:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid%2A> Wywołano metodę.</span><span class="sxs-lookup"><span data-stu-id="01791-253">The <xref:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid%2A> method was called.</span></span>  
  
-   <span data-ttu-id="01791-254"><xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A> Metody lub <xref:System.Runtime.InteropServices.SafeHandle.Close%2A> wywołano metodę i nie żadnych odwołań do <xref:System.Runtime.InteropServices.SafeHandle> obiektu na inne wątki.</span><span class="sxs-lookup"><span data-stu-id="01791-254">The <xref:System.Runtime.InteropServices.SafeHandle.Dispose%2A> method or <xref:System.Runtime.InteropServices.SafeHandle.Close%2A> method was called and there are no references to the <xref:System.Runtime.InteropServices.SafeHandle> object on other threads.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="01791-255">Aby uzyskać uprawnienia do wywoływania kodu niezarządzanego.</span><span class="sxs-lookup"><span data-stu-id="01791-255">for permission to call unmanaged code.</span></span> <span data-ttu-id="01791-256">Akcja zabezpieczeń: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span><span class="sxs-lookup"><span data-stu-id="01791-256">Security action: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span></span> <span data-ttu-id="01791-257">Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="01791-257">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="IsInvalid">
      <MemberSignature Language="C#" Value="public abstract bool IsInvalid { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInvalid" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices.SafeHandle.IsInvalid" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property IsInvalid As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property bool IsInvalid { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>get: System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><span data-ttu-id="01791-258">W przypadku przesłonięcia w klasie pochodnej pobiera wartość wskazującą, czy wartość dojście jest nieprawidłowe.</span><span class="sxs-lookup"><span data-stu-id="01791-258">When overridden in a derived class, gets a value indicating whether the handle value is invalid.</span></span></summary>
        <value>
          <span data-ttu-id="01791-259"><see langword="true" /> Jeśli wartość uchwytu jest nieprawidłowy. w przeciwnym razie <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="01791-259"><see langword="true" /> if the handle value is invalid; otherwise, <see langword="false" />.</span></span></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01791-260">Klasy pochodne muszą implementować <xref:System.Runtime.InteropServices.SafeHandle.IsInvalid%2A> właściwości tak, aby środowisko uruchomieniowe języka wspólnego można określić, czy finalizacji krytyczne jest wymagana.</span><span class="sxs-lookup"><span data-stu-id="01791-260">Derived classes must implement the <xref:System.Runtime.InteropServices.SafeHandle.IsInvalid%2A> property so that the common language runtime can determine whether critical finalization is required.</span></span> <span data-ttu-id="01791-261">Klasa pochodna musi zapewniać implementację pasujące do typu ogólnego uchwytu, które obsługują (0 albo -1 jest nieprawidłowy).</span><span class="sxs-lookup"><span data-stu-id="01791-261">Derived classes must provide an implementation that suits the general type of handle they support (0 or -1 is invalid).</span></span> <span data-ttu-id="01791-262">Te klasy można następnie dalsze pochodnych typów określonych bezpieczne dojście.</span><span class="sxs-lookup"><span data-stu-id="01791-262">These classes can then be further derived for specific safe handle types.</span></span>  
  
 <span data-ttu-id="01791-263">W odróżnieniu od <xref:System.Runtime.InteropServices.SafeHandle.IsClosed%2A> właściwość, która zgłasza czy <xref:System.Runtime.InteropServices.SafeHandle> obiektu zakończył przy użyciu dojścia podstawowej <xref:System.Runtime.InteropServices.SafeHandle.IsInvalid%2A> właściwości oblicza, czy wartość podanym dojściu zawsze jest uznawane za nieprawidłowe.</span><span class="sxs-lookup"><span data-stu-id="01791-263">Unlike the <xref:System.Runtime.InteropServices.SafeHandle.IsClosed%2A> property, which reports whether the <xref:System.Runtime.InteropServices.SafeHandle> object has finished using the underlying handle, the <xref:System.Runtime.InteropServices.SafeHandle.IsInvalid%2A> property calculates whether the given handle value is always considered invalid.</span></span> <span data-ttu-id="01791-264">W związku z tym <xref:System.Runtime.InteropServices.SafeHandle.IsInvalid%2A> właściwość zawsze zwraca tę samą wartość dowolną wartość z określonego dojścia.</span><span class="sxs-lookup"><span data-stu-id="01791-264">Therefore, the <xref:System.Runtime.InteropServices.SafeHandle.IsInvalid%2A> property always returns the same value for any one handle value.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="01791-265">Poniższy przykład umożliwia sprawdzenie, czy plik został pomyślnie otwarty.</span><span class="sxs-lookup"><span data-stu-id="01791-265">The following example checks if a file was opened successfully.</span></span> <span data-ttu-id="01791-266">Ten przykładowy kod jest częścią większego przykładu udostępnionego dla <xref:System.Runtime.InteropServices.SafeHandle> klasy.</span><span class="sxs-lookup"><span data-stu-id="01791-266">This code example is part of a larger example provided for the <xref:System.Runtime.InteropServices.SafeHandle> class.</span></span>  
  
 [!code-csharp[SafeHandle#2](~/samples/snippets/csharp/VS_Snippets_CLR/SafeHandle/CS/program.cs#2)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="01791-267">Aby uzyskać uprawnienia do wywoływania kodu niezarządzanego.</span><span class="sxs-lookup"><span data-stu-id="01791-267">for permission to call unmanaged code.</span></span> <span data-ttu-id="01791-268">Akcja zabezpieczeń: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span><span class="sxs-lookup"><span data-stu-id="01791-268">Security action: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span></span> <span data-ttu-id="01791-269">Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="01791-269">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="ReleaseHandle">
      <MemberSignature Language="C#" Value="protected abstract bool ReleaseHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance bool ReleaseHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.SafeHandle.ReleaseHandle" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Function ReleaseHandle () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract bool ReleaseHandle();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="01791-270">W przypadku przesłonięcia w klasie pochodnej, wykonuje kod wymagany do zwolnienia dojście.</span><span class="sxs-lookup"><span data-stu-id="01791-270">When overridden in a derived class, executes the code required to free the handle.</span></span></summary>
        <returns>
          <span data-ttu-id="01791-271"><see langword="true" /> Jeśli dojście zwolnieniu pomyślnie; w przeciwnym razie poważnej awarii, <see langword="false" />.</span><span class="sxs-lookup"><span data-stu-id="01791-271"><see langword="true" /> if the handle is released successfully; otherwise, in the event of a catastrophic failure, <see langword="false" />.</span></span> <span data-ttu-id="01791-272">W takim przypadku generuje [releaseHandleFailed](~/docs/framework/debug-trace-profile/releasehandlefailed-mda.md) Asystent debugowania zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="01791-272">In this case, it generates a [releaseHandleFailed](~/docs/framework/debug-trace-profile/releasehandlefailed-mda.md) Managed Debugging Assistant.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01791-273"><xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A> Można wywołać tylko raz i tylko wtedy, gdy uchwyt jest prawidłowy, zgodnie z definicją metody jest gwarancji <xref:System.Runtime.InteropServices.SafeHandle.IsInvalid%2A> właściwości.</span><span class="sxs-lookup"><span data-stu-id="01791-273">The <xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A> method is guaranteed to be called only once and only if the handle is valid as defined by the <xref:System.Runtime.InteropServices.SafeHandle.IsInvalid%2A> property.</span></span> <span data-ttu-id="01791-274">Zaimplementuj tę metodę w Twojej <xref:System.Runtime.InteropServices.SafeHandle> klas do wykonania kodu, który jest wymagany, aby zwolnić dojścia pochodnych.</span><span class="sxs-lookup"><span data-stu-id="01791-274">Implement this method in your <xref:System.Runtime.InteropServices.SafeHandle> derived classes to execute any code that is required to free the handle.</span></span> <span data-ttu-id="01791-275">Ponieważ jeden z funkcji <xref:System.Runtime.InteropServices.SafeHandle> jest zapewnienie zapobiegania przecieków zasobów, kod w implementacji <xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A> musi nigdy się nie powieść.</span><span class="sxs-lookup"><span data-stu-id="01791-275">Because one of the functions of <xref:System.Runtime.InteropServices.SafeHandle> is to guarantee prevention of resource leaks, the code in your implementation of <xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A> must never fail.</span></span> <span data-ttu-id="01791-276">Wywołania modułu zbierającego elementy bezużyteczne <xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A> po uruchomieniu normalne finalizatory dla obiektów, które były bezużytecznych w tym samym czasie.</span><span class="sxs-lookup"><span data-stu-id="01791-276">The garbage collector calls <xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A> after normal finalizers have been run for objects that were garbage collected at the same time.</span></span> <span data-ttu-id="01791-277">Moduł zbierający elementy bezużyteczne gwarantuje zasobów, aby wywołać tę metodę i czy metoda nie zostanie przerwana czasie, gdy jest w toku.</span><span class="sxs-lookup"><span data-stu-id="01791-277">The garbage collector guarantees the resources to invoke this method and that the method will not be interrupted while it is in progress.</span></span> <span data-ttu-id="01791-278">Ta metoda będzie gotowa jako region ograniczonego wykonania (CER) w czasie tworzenia wystąpienia (wraz ze wszystkich metod jej wykresu wywołań statycznie możliwa do ustalenia).</span><span class="sxs-lookup"><span data-stu-id="01791-278">This method will be prepared as a constrained execution region (CER) at instance construction time (along with all the methods in its statically determinable call graph).</span></span> <span data-ttu-id="01791-279">Mimo że zapobiega to przerwania przerwania wątku, nadal należy pamiętać, że żadnych ścieżek błędów w Twojej przesłoniętych <xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="01791-279">Although this prevents thread abort interrupts, you must still be careful not to introduce any fault paths in your overridden <xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A> method.</span></span> <span data-ttu-id="01791-280">W szczególności, zastosuj <xref:System.Runtime.ConstrainedExecution.ReliabilityContractAttribute> atrybutu metody należy wywołać z <xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A>.</span><span class="sxs-lookup"><span data-stu-id="01791-280">In particular, apply the <xref:System.Runtime.ConstrainedExecution.ReliabilityContractAttribute> attribute to any methods you call from <xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A>.</span></span> <span data-ttu-id="01791-281">W większości przypadków należy ten kod:</span><span class="sxs-lookup"><span data-stu-id="01791-281">In most cases this code should be:</span></span>  
  
 `ReliabilityContract(Consistency.WillNotCorruptState, Cer.Success)`  
  
 <span data-ttu-id="01791-282">Ponadto w przypadku prostego oczyszczania (na przykład wywołanie interfejsu API Win32 `CloseHandle` na dojście do pliku) można sprawdzić wartość zwrotną dla pojedynczą platformę wywołania wywołania.</span><span class="sxs-lookup"><span data-stu-id="01791-282">Additionally, for simple cleanup (for example, calling the Win32 API `CloseHandle` on a file handle) you can check the return value for the single platform invoke call.</span></span> <span data-ttu-id="01791-283">Złożone oczyszczania może mieć wiele logice programu i wielu wywołań metody, z których część może zakończyć się niepowodzeniem.</span><span class="sxs-lookup"><span data-stu-id="01791-283">For complex cleanup, you may have a lot of program logic and many method calls, some of which might fail.</span></span> <span data-ttu-id="01791-284">Należy upewnij się, że logika program ma rezerwowy kod dla każdego z tych przypadkach.</span><span class="sxs-lookup"><span data-stu-id="01791-284">You must ensure that your program logic has fallback code for each of those cases.</span></span>  
  
 <span data-ttu-id="01791-285">Jeśli <xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A> zwraca `false` z jakiejkolwiek przyczyny, generuje [releaseHandleFailed](~/docs/framework/debug-trace-profile/releasehandlefailed-mda.md) Asystent debugowania zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="01791-285">If <xref:System.Runtime.InteropServices.SafeHandle.ReleaseHandle%2A> returns `false` for any reason, it generates a [releaseHandleFailed](~/docs/framework/debug-trace-profile/releasehandlefailed-mda.md) Managed Debugging Assistant.</span></span>  <span data-ttu-id="01791-286">Dzięki temu można wykryć przypadkach, gdy nie próba zwolnienia zasobów.</span><span class="sxs-lookup"><span data-stu-id="01791-286">This helps you detect cases where your attempt to release resources fails.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="01791-287">Poniższy przykład kodu zwalnia dojście i jest częścią większego przykładu udostępnionego dla <xref:System.Runtime.InteropServices.SafeHandle> klasy.</span><span class="sxs-lookup"><span data-stu-id="01791-287">The following code example releases the handle and is part of a larger example provided for the <xref:System.Runtime.InteropServices.SafeHandle> class.</span></span>  
  
 [!code-csharp[SafeHandle#3](~/samples/snippets/csharp/VS_Snippets_CLR/SafeHandle/CS/program.cs#3)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="01791-288">Aby uzyskać uprawnienia do wywoływania kodu niezarządzanego.</span><span class="sxs-lookup"><span data-stu-id="01791-288">for permission to call unmanaged code.</span></span> <span data-ttu-id="01791-289">Akcja zabezpieczeń: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span><span class="sxs-lookup"><span data-stu-id="01791-289">Security action: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span></span> <span data-ttu-id="01791-290">Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="01791-290">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="SetHandle">
      <MemberSignature Language="C#" Value="protected void SetHandle (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void SetHandle(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.SafeHandle.SetHandle(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub SetHandle (handle As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void SetHandle(IntPtr handle);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle"><span data-ttu-id="01791-291">Istniejące dojście do użycia.</span><span class="sxs-lookup"><span data-stu-id="01791-291">The pre-existing handle to use.</span></span></param>
        <summary><span data-ttu-id="01791-292">Ustawia określone dojście istniejące dojście.</span><span class="sxs-lookup"><span data-stu-id="01791-292">Sets the handle to the specified pre-existing handle.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01791-293">Użyj <xref:System.Runtime.InteropServices.SafeHandle.SetHandle%2A> metody tylko wtedy, gdy wymaganych do obsługi istniejącego dojścia (na przykład jeśli dojście jest zwracany w strukturze), ponieważ infrastruktury międzyoperacyjnego modelu COM programu .NET Framework nie obsługuje przekazywanie danych wyjściowych dojść w strukturze.</span><span class="sxs-lookup"><span data-stu-id="01791-293">Use the <xref:System.Runtime.InteropServices.SafeHandle.SetHandle%2A> method only if you need to support a pre-existing handle (for example, if the handle is returned in a structure) because the .NET Framework COM interop infrastructure does not support marshaling output handles in a structure.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="01791-294">Aby uzyskać uprawnienia do wywoływania kodu niezarządzanego.</span><span class="sxs-lookup"><span data-stu-id="01791-294">for permission to call unmanaged code.</span></span> <span data-ttu-id="01791-295">Akcja zabezpieczeń: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span><span class="sxs-lookup"><span data-stu-id="01791-295">Security action: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span></span> <span data-ttu-id="01791-296">Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="01791-296">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
      </Docs>
    </Member>
    <Member MemberName="SetHandleAsInvalid">
      <MemberSignature Language="C#" Value="public void SetHandleAsInvalid ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetHandleAsInvalid() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetHandleAsInvalid ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetHandleAsInvalid();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Handles</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.Runtime.ConstrainedExecution.ReliabilityContract(System.Runtime.ConstrainedExecution.Consistency.WillNotCorruptState, System.Runtime.ConstrainedExecution.Cer.Success)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><span data-ttu-id="01791-297">Oznacza dojścia jako nie jest już używana.</span><span class="sxs-lookup"><span data-stu-id="01791-297">Marks a handle as no longer used.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="01791-298">Wywołanie <xref:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid%2A> metody tylko wtedy, gdy wiesz, że uchwyt nie odwołuje się do zasobu.</span><span class="sxs-lookup"><span data-stu-id="01791-298">Call the <xref:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid%2A> method only when you know that your handle no longer references a resource.</span></span> <span data-ttu-id="01791-299">Dzięki temu nie zmienia wartości <xref:System.Runtime.InteropServices.SafeHandle.handle> pole; tylko program oznacza dojście jako zamknięte.</span><span class="sxs-lookup"><span data-stu-id="01791-299">Doing so does not change the value of the <xref:System.Runtime.InteropServices.SafeHandle.handle> field; it only marks the handle as closed.</span></span> <span data-ttu-id="01791-300">Dojście następnie może zawierać potencjalnie starych wartości.</span><span class="sxs-lookup"><span data-stu-id="01791-300">The handle might then contain a potentially stale value.</span></span> <span data-ttu-id="01791-301">To wywołanie powoduje, że nie są podejmowane próby zwolnienia zasobów.</span><span class="sxs-lookup"><span data-stu-id="01791-301">The effect of this call is that no attempt is made to free the resources.</span></span>  
  
 <span data-ttu-id="01791-302">Jak <xref:System.Runtime.InteropServices.SafeHandle.SetHandle%2A> metody, użyj <xref:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid%2A> tylko wtedy, gdy wymagana jest obsługa istniejące dojście.</span><span class="sxs-lookup"><span data-stu-id="01791-302">As with the <xref:System.Runtime.InteropServices.SafeHandle.SetHandle%2A> method, use <xref:System.Runtime.InteropServices.SafeHandle.SetHandleAsInvalid%2A> only if you need to support a pre-existing handle.</span></span>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission"><span data-ttu-id="01791-303">Aby uzyskać uprawnienia do wywoływania kodu niezarządzanego.</span><span class="sxs-lookup"><span data-stu-id="01791-303">for permission to call unmanaged code.</span></span> <span data-ttu-id="01791-304">Akcja zabezpieczeń: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span><span class="sxs-lookup"><span data-stu-id="01791-304">Security action: <see cref="F:System.Security.Permissions.SecurityAction.LinkDemand" />.</span></span> <span data-ttu-id="01791-305">Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span><span class="sxs-lookup"><span data-stu-id="01791-305">Associated enumeration: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></span></span></permission>
      </Docs>
    </Member>
  </Members>
</Type>