<Type Name="_Type" FullName="System.Runtime.InteropServices._Type">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="2e51018122aeccd872bf27cc2f3d400af4a7c765" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36537360" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface _Type" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract _Type" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.InteropServices._Type" />
  <TypeSignature Language="VB.NET" Value="Public Interface _Type" />
  <TypeSignature Language="C++ CLI" Value="public interface class _Type" />
  <TypeSignature Language="F#" Value="type _Type = interface" />
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.CLSCompliant(false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.Guid("BCA8B44D-AAD6-3A86-8AB7-03349F4F2DA2")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.InterfaceType(System.Runtime.InteropServices.ComInterfaceType.InterfaceIsIUnknown)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.TypeLibImportClass(typeof(System.Type))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="2fb2f-101">Udostępnia publiczne elementy członkowskie <see cref="T:System.Type" /> klasy do kodu niezarządzanego.</span>
      <span class="sxs-lookup">
        <span data-stu-id="2fb2f-101">Exposes the public members of the <see cref="T:System.Type" /> class to the unmanaged code.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-102">Ten interfejs jest dostęp do zarządzanych klas z kodem niezarządzanym i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-102">This interface is for access to managed classes from unmanaged code and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-103">Ten interfejs zachowuje kolejność vtable <xref:System.Type?displayProperty=nameWithType> klasy elementów członkowskich, które mogą być udostępniane przez niezarządzane obiekty COM.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-103">This interface preserves the vtable order of the <xref:System.Type?displayProperty=nameWithType> class members that can be accessed by unmanaged COM objects.</span></span>  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Assembly">
      <MemberSignature Language="C#" Value="public System.Reflection.Assembly Assembly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Assembly Assembly" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.Assembly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Assembly As Assembly" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::Assembly ^ Assembly { System::Reflection::Assembly ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Assembly : System.Reflection.Assembly" Usage="System.Runtime.InteropServices._Type.Assembly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Assembly</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2fb2f-104">Udostępnia obiekty COM niezależny od wersji dostęp do <see cref="P:System.Type.Assembly" /> właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-104">Provides COM objects with version-independent access to the <see cref="P:System.Type.Assembly" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2fb2f-105">
            <see cref="T:System.Reflection.Assembly" /> Wystąpienie, które opisano zestaw zawierający typ bieżącego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-105">An <see cref="T:System.Reflection.Assembly" /> instance that describes the assembly containing the current type.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-106">Ta właściwość jest dostęp do zarządzanych klas z kodem niezarządzanym i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-106">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-107"><xref:System.Type.Assembly%2A?displayProperty=nameWithType> Pobiera właściwość <xref:System.Reflection.Assembly> w którym zadeklarowano typ.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-107">The <xref:System.Type.Assembly%2A?displayProperty=nameWithType> property gets the <xref:System.Reflection.Assembly> in which the type is declared.</span></span> <span data-ttu-id="2fb2f-108">Dla typów ogólnych, pobiera tę właściwość <xref:System.Reflection.Assembly> w jest zdefiniowany typ ogólny.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-108">For generic types, this property gets the <xref:System.Reflection.Assembly> in which the generic type is defined.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AssemblyQualifiedName">
      <MemberSignature Language="C#" Value="public string AssemblyQualifiedName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string AssemblyQualifiedName" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.AssemblyQualifiedName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property AssemblyQualifiedName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ AssemblyQualifiedName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.AssemblyQualifiedName : string" Usage="System.Runtime.InteropServices._Type.AssemblyQualifiedName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2fb2f-109">Udostępnia obiekty COM niezależny od wersji dostęp do <see cref="P:System.Type.AssemblyQualifiedName" /> właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-109">Provides COM objects with version-independent access to the <see cref="P:System.Type.AssemblyQualifiedName" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2fb2f-110">Nazwa kwalifikowana zestawu <see cref="T:System.Type" />, łącznie z nazwą zestawu, w którym <see cref="T:System.Type" /> została załadowana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-110">The assembly-qualified name of the <see cref="T:System.Type" />, including the name of the assembly from which the <see cref="T:System.Type" /> was loaded.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-111">Ta właściwość jest dostęp do zarządzanych klas z kodem niezarządzanym i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-111">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-112"><xref:System.Type.AssemblyQualifiedName%2A?displayProperty=nameWithType> Właściwości pobiera nazwa kwalifikowana zestawu <xref:System.Type>, łącznie z nazwą zestawu, w którym <xref:System.Type> została załadowana.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-112">The <xref:System.Type.AssemblyQualifiedName%2A?displayProperty=nameWithType> property gets the assembly-qualified name of the <xref:System.Type>, including the name of the assembly from which the <xref:System.Type> was loaded.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Attributes">
      <MemberSignature Language="C#" Value="public System.Reflection.TypeAttributes Attributes { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.TypeAttributes Attributes" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.Attributes" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Attributes As TypeAttributes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::TypeAttributes Attributes { System::Reflection::TypeAttributes get(); };" />
      <MemberSignature Language="F#" Value="member this.Attributes : System.Reflection.TypeAttributes" Usage="System.Runtime.InteropServices._Type.Attributes" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.TypeAttributes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2fb2f-113">Udostępnia obiekty COM niezależny od wersji dostęp do <see cref="P:System.Type.Attributes" /> właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-113">Provides COM objects with version-independent access to the <see cref="P:System.Type.Attributes" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2fb2f-114">A <see cref="T:System.Reflection.TypeAttributes" /> obiekt reprezentujący zestaw atrybutów <see cref="T:System.Type" />, chyba że <see cref="T:System.Type" /> reprezentuje parametr typu ogólnego, w których przypadku wartość jest nieokreślony.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-114">A <see cref="T:System.Reflection.TypeAttributes" /> object representing the attribute set of the <see cref="T:System.Type" />, unless the <see cref="T:System.Type" /> represents a generic type parameter, in which case the value is unspecified.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-115">Ta właściwość jest dostęp do zarządzanych klas z kodem niezarządzanym i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-115">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-116"><xref:System.Type.Attributes%2A?displayProperty=nameWithType> Właściwości pobiera atrybuty skojarzone z <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-116">The <xref:System.Type.Attributes%2A?displayProperty=nameWithType> property gets the attributes associated with the <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BaseType">
      <MemberSignature Language="C#" Value="public Type BaseType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type BaseType" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.BaseType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BaseType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ BaseType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.BaseType : Type" Usage="System.Runtime.InteropServices._Type.BaseType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2fb2f-117">Udostępnia obiekty COM niezależny od wersji dostęp do <see cref="P:System.Type.BaseType" /> właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-117">Provides COM objects with version-independent access to the <see cref="P:System.Type.BaseType" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2fb2f-118">
            <see cref="T:System.Type" /> z którego bieżący <see cref="T:System.Type" /> dziedziczy bezpośrednio, lub <see langword="null" /> Jeśli bieżące <see langword="Type" /> reprezentuje <see cref="T:System.Object" /> klasy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-118">The <see cref="T:System.Type" /> from which the current <see cref="T:System.Type" /> directly inherits, or <see langword="null" /> if the current <see langword="Type" /> represents the <see cref="T:System.Object" /> class.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-119">Ta właściwość jest dostęp do zarządzanych klas z kodem niezarządzanym i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-119">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-120"><xref:System.Type.BaseType%2A?displayProperty=nameWithType> Właściwości pobiera typ, z którego bieżący <xref:System.Type> bezpośrednio dziedziczy.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-120">The <xref:System.Type.BaseType%2A?displayProperty=nameWithType> property gets the type from which the current <xref:System.Type> directly inherits.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DeclaringType">
      <MemberSignature Language="C#" Value="public Type DeclaringType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type DeclaringType" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.DeclaringType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DeclaringType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ DeclaringType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DeclaringType : Type" Usage="System.Runtime.InteropServices._Type.DeclaringType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2fb2f-121">Udostępnia obiekty COM niezależny od wersji dostęp do <see cref="P:System.Type.DeclaringType" /> właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-121">Provides COM objects with version-independent access to the <see cref="P:System.Type.DeclaringType" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2fb2f-122">
            <see cref="T:System.Type" /> Obiektu klasy, która deklaruje tego elementu członkowskiego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-122">The <see cref="T:System.Type" /> object for the class that declares this member.</span>
          </span>
          <span data-ttu-id="2fb2f-123">Jeśli typ jest typem zagnieżdżonym, ta właściwość zwraca typ otaczający.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-123">If the type is a nested type, this property returns the enclosing type.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-124">Ta właściwość jest dostęp do zarządzanych klas z kodem niezarządzanym i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-124">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-125"><xref:System.Type.DeclaringType%2A?displayProperty=nameWithType> Właściwość pobiera klasy, która deklaruje tego elementu członkowskiego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-125">The <xref:System.Type.DeclaringType%2A?displayProperty=nameWithType> property gets the class that declares this member.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Equals">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="2fb2f-126">Udostępnia niezależny od wersji dostęp do obiektów COM <see cref="Overload:System.Type.Equals" /> metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-126">Provides COM objects with version-independent access to the <see cref="Overload:System.Type.Equals" /> method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-127">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-127">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-128"><xref:System.Type.Equals%2A?displayProperty=nameWithType> Metoda określa, czy bieżący typ źródłowy system <xref:System.Type> jest taki sam jak podstawowy typ systemu określonego <xref:System.Object> lub <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-128">The <xref:System.Type.Equals%2A?displayProperty=nameWithType> method determines if the underlying system type of the current <xref:System.Type> is the same as the underlying system type of the specified <xref:System.Object> or <xref:System.Type>.</span></span>  
  
 <span data-ttu-id="2fb2f-129">.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-129">.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (object other);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(object other) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (other As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Equals(System::Object ^ other);" />
      <MemberSignature Language="F#" Value="abstract member Equals : obj -&gt; bool" Usage="_Type.Equals other" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="other" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="other">
          <span data-ttu-id="2fb2f-130">
            <see cref="T:System.Object" /> Którego podstawowy typ systemu to ma zostać porównane z typem bazowym systemu bieżącego <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-130">The <see cref="T:System.Object" /> whose underlying system type is to be compared with the underlying system type of the current <see cref="T:System.Type" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2fb2f-131">Udostępnia niezależny od wersji dostęp do obiektów COM <see cref="M:System.Type.Equals(System.Object)" /> metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-131">Provides COM objects with version-independent access to the <see cref="M:System.Type.Equals(System.Object)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2fb2f-132">
            <see langword="true" /> Jeśli typ źródłowy system <paramref name="o" /> jest taki sam jak podstawowy typ systemu bieżącego <see cref="T:System.Type" />; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-132">
              <see langword="true" /> if the underlying system type of <paramref name="o" /> is the same as the underlying system type of the current <see cref="T:System.Type" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-133">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-133">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-134"><xref:System.Type.Equals%2A?displayProperty=nameWithType> Metoda określa, czy bieżący typ źródłowy system <xref:System.Type> jest taki sam jak podstawowy typ systemu określonego <xref:System.Object>.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-134">The <xref:System.Type.Equals%2A?displayProperty=nameWithType> method determines if the underlying system type of the current <xref:System.Type> is the same as the underlying system type of the specified <xref:System.Object>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public bool Equals (Type o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Equals(class System.Type o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.Equals(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function Equals (o As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Equals(Type ^ o);" />
      <MemberSignature Language="F#" Value="abstract member Equals : Type -&gt; bool" Usage="_Type.Equals o" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="o">
          <span data-ttu-id="2fb2f-135">
            <see cref="T:System.Type" /> Którego podstawowy typ systemu to ma zostać porównane z typem bazowym systemu bieżącego <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-135">The <see cref="T:System.Type" /> whose underlying system type is to be compared with the underlying system type of the current <see cref="T:System.Type" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2fb2f-136">Udostępnia niezależny od wersji dostęp do obiektów COM <see cref="M:System.Type.Equals(System.Type)" /> metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-136">Provides COM objects with version-independent access to the <see cref="M:System.Type.Equals(System.Type)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2fb2f-137">
            <see langword="true" /> Jeśli typ źródłowy system <paramref name="o" /> jest taki sam jak podstawowy typ systemu bieżącego <see cref="T:System.Type" />; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-137">
              <see langword="true" /> if the underlying system type of <paramref name="o" /> is the same as the underlying system type of the current <see cref="T:System.Type" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-138">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-138">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-139"><xref:System.Type.Equals%2A?displayProperty=nameWithType> Metoda określa, czy bieżący typ źródłowy system <xref:System.Type> jest taki sam jak podstawowy typ systemu określonego <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-139">The <xref:System.Type.Equals%2A?displayProperty=nameWithType> method determines if the underlying system type of the current <xref:System.Type> is the same as the underlying system type of the specified <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindInterfaces">
      <MemberSignature Language="C#" Value="public Type[] FindInterfaces (System.Reflection.TypeFilter filter, object filterCriteria);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] FindInterfaces(class System.Reflection.TypeFilter filter, object filterCriteria) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.FindInterfaces(System.Reflection.TypeFilter,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindInterfaces (filter As TypeFilter, filterCriteria As Object) As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;Type ^&gt; ^ FindInterfaces(System::Reflection::TypeFilter ^ filter, System::Object ^ filterCriteria);" />
      <MemberSignature Language="F#" Value="abstract member FindInterfaces : System.Reflection.TypeFilter * obj -&gt; Type[]" Usage="_Type.FindInterfaces (filter, filterCriteria)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="filter" Type="System.Reflection.TypeFilter" />
        <Parameter Name="filterCriteria" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="filter">
          <span data-ttu-id="2fb2f-140">
            <see cref="T:System.Reflection.TypeFilter" /> Delegata, który porównuje interfejsy przed <c>filterCriteria</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-140">The <see cref="T:System.Reflection.TypeFilter" /> delegate that compares the interfaces against <c>filterCriteria</c>.</span>
          </span>
        </param>
        <param name="filterCriteria">
          <span data-ttu-id="2fb2f-141">Kryteria wyszukiwania, które określa, czy interfejs powinien być uwzględniany w zwróconej tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-141">The search criteria that determines whether an interface should be included in the returned array.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2fb2f-142">Udostępnia niezależny od wersji dostęp do obiektów COM <see cref="M:System.Type.FindInterfaces(System.Reflection.TypeFilter,System.Object)" /> metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-142">Provides COM objects with version-independent access to the <see cref="M:System.Type.FindInterfaces(System.Reflection.TypeFilter,System.Object)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2fb2f-143">Tablica <see cref="T:System.Type" /> obiektów reprezentujący filtrowana lista interfejsy zaimplementowano lub dziedziczone przez bieżący <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-143">An array of <see cref="T:System.Type" /> objects representing a filtered list of the interfaces implemented or inherited by the current <see cref="T:System.Type" />.</span>
          </span>
          <span data-ttu-id="2fb2f-144">- lub - pustą tablicę typu <see cref="T:System.Type" />, jeśli żadne interfejsy zgodne z filtrem są zaimplementowano lub dziedziczone przez bieżący <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-144">-or-  An empty array of type <see cref="T:System.Type" />, if no interfaces matching the filter are implemented or inherited by the current <see cref="T:System.Type" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-145">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-145">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-146"><xref:System.Type.FindInterfaces%2A?displayProperty=nameWithType> Metoda zwraca tablicę <xref:System.Type> obiektów reprezentujący filtrowana lista interfejsy zaimplementowano lub dziedziczone przez bieżące <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-146">The <xref:System.Type.FindInterfaces%2A?displayProperty=nameWithType> method returns an array of <xref:System.Type> objects representing a filtered list of interfaces implemented or inherited by the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindMembers">
      <MemberSignature Language="C#" Value="public System.Reflection.MemberInfo[] FindMembers (System.Reflection.MemberTypes memberType, System.Reflection.BindingFlags bindingAttr, System.Reflection.MemberFilter filter, object filterCriteria);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] FindMembers(valuetype System.Reflection.MemberTypes memberType, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.MemberFilter filter, object filterCriteria) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindMembers (memberType As MemberTypes, bindingAttr As BindingFlags, filter As MemberFilter, filterCriteria As Object) As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ FindMembers(System::Reflection::MemberTypes memberType, System::Reflection::BindingFlags bindingAttr, System::Reflection::MemberFilter ^ filter, System::Object ^ filterCriteria);" />
      <MemberSignature Language="F#" Value="abstract member FindMembers : System.Reflection.MemberTypes * System.Reflection.BindingFlags * System.Reflection.MemberFilter * obj -&gt; System.Reflection.MemberInfo[]" Usage="_Type.FindMembers (memberType, bindingAttr, filter, filterCriteria)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memberType" Type="System.Reflection.MemberTypes" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="filter" Type="System.Reflection.MemberFilter" />
        <Parameter Name="filterCriteria" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="memberType">
          <span data-ttu-id="2fb2f-147">A <see langword="MemberTypes" /> obiekt wskazujący typ elementu członkowskiego do wyszukania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-147">A <see langword="MemberTypes" /> object indicating the type of member to search for.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="2fb2f-148">Maska bitowa składającej się z co najmniej jeden <see cref="T:System.Reflection.BindingFlags" /> określające, jak jest prowadzone wyszukiwanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-148">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="2fb2f-149">- lub - Zero, aby zwrócić <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-149">-or-  Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <param name="filter">
          <span data-ttu-id="2fb2f-150">Delegata, który wykonuje porównań, zwracając <see langword="true" /> Jeśli element członkowski obecnie sprawdzana dopasowań <c>filterCriteria</c> i <see langword="false" /> inaczej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-150">The delegate that does the comparisons, returning <see langword="true" /> if the member currently being inspected matches the <c>filterCriteria</c> and <see langword="false" /> otherwise.</span>
          </span>
          <span data-ttu-id="2fb2f-151">Można użyć <see langword="FilterAttribute" />, <see langword="FilterName" />, i <see langword="FilterNameIgnoreCase" /> delegatów dostarczonych przez tę klasę.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-151">You can use the <see langword="FilterAttribute" />, <see langword="FilterName" />, and <see langword="FilterNameIgnoreCase" /> delegates supplied by this class.</span>
          </span>
          <span data-ttu-id="2fb2f-152">Pierwszy używa pola <see langword="FieldAttributes" />, <see langword="MethodAttributes" />, i <see langword="MethodImplAttributes" /> jako kryteria wyszukiwania, a następnie użyć dwóch delegatów <see langword="String" /> obiektów jako kryterium wyszukiwania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-152">The first uses the fields of <see langword="FieldAttributes" />, <see langword="MethodAttributes" />, and <see langword="MethodImplAttributes" /> as search criteria, and the other two delegates use <see langword="String" /> objects as the search criteria.</span>
          </span>
        </param>
        <param name="filterCriteria">
          <span data-ttu-id="2fb2f-153">Kryteria wyszukiwania, które określa, czy element członkowski jest zwracany w tablicy <see langword="MemberInfo" /> obiektów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-153">The search criteria that determines whether a member is returned in the array of <see langword="MemberInfo" /> objects.</span>
          </span>
          <span data-ttu-id="2fb2f-154">Pola <see langword="FieldAttributes" />, <see langword="MethodAttributes" />, i <see langword="MethodImplAttributes" /> mogą być używane w połączeniu z <see langword="FilterAttribute" /> delegata dostarczonych przez tę klasę.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-154">The fields of <see langword="FieldAttributes" />, <see langword="MethodAttributes" />, and <see langword="MethodImplAttributes" /> can be used in conjunction with the <see langword="FilterAttribute" /> delegate supplied by this class.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2fb2f-155">Udostępnia niezależny od wersji dostęp do obiektów COM <see cref="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" /> metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-155">Provides COM objects with version-independent access to the <see cref="M:System.Type.FindMembers(System.Reflection.MemberTypes,System.Reflection.BindingFlags,System.Reflection.MemberFilter,System.Object)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2fb2f-156">Filtrowane tablicę <see cref="T:System.Reflection.MemberInfo" /> obiektów typu określonego elementu członkowskiego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-156">A filtered array of <see cref="T:System.Reflection.MemberInfo" /> objects of the specified member type.</span>
          </span>
          <span data-ttu-id="2fb2f-157">- lub - pustą tablicę typu <see cref="T:System.Reflection.MemberInfo" />, jeśli bieżący <see cref="T:System.Type" /> nie ma elementów członkowskich typu <paramref name="memberType" /> spełniających kryteria filtrowania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-157">-or-  An empty array of type <see cref="T:System.Reflection.MemberInfo" />, if the current <see cref="T:System.Type" /> does not have members of type <paramref name="memberType" /> that match the filter criteria.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-158">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-158">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-159"><xref:System.Type.FindMembers%2A?displayProperty=nameWithType> Metoda zwraca filtrowane tablicę <xref:System.Reflection.MemberInfo> obiektów typu określonego elementu członkowskiego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-159">The <xref:System.Type.FindMembers%2A?displayProperty=nameWithType> method returns a filtered array of <xref:System.Reflection.MemberInfo> objects of the specified member type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FullName">
      <MemberSignature Language="C#" Value="public string FullName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FullName" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.FullName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FullName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ FullName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FullName : string" Usage="System.Runtime.InteropServices._Type.FullName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2fb2f-160">Udostępnia obiekty COM niezależny od wersji dostęp do <see cref="P:System.Type.FullName" /> właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-160">Provides COM objects with version-independent access to the <see cref="P:System.Type.FullName" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2fb2f-161">Ciąg zawierający w pełni kwalifikowana nazwa <see cref="T:System.Type" />, włącznie z przestrzenią nazw z <see cref="T:System.Type" /> , ale nie zestawu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-161">A string containing the fully qualified name of the <see cref="T:System.Type" />, including the namespace of the <see cref="T:System.Type" /> but not the assembly.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-162">Ta właściwość jest dostęp do zarządzanych klas z kodem niezarządzanym i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-162">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-163"><xref:System.Type.FullName%2A?displayProperty=nameWithType> Właściwości pobiera w pełni kwalifikowana nazwa <xref:System.Type>, włącznie z przestrzenią nazw z <xref:System.Type> , ale nie zestawu.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-163">The <xref:System.Type.FullName%2A?displayProperty=nameWithType> property gets the fully qualified name of the <xref:System.Type>, including the namespace of the <xref:System.Type> but not the assembly.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetArrayRank">
      <MemberSignature Language="C#" Value="public int GetArrayRank ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetArrayRank() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetArrayRank" />
      <MemberSignature Language="VB.NET" Value="Public Function GetArrayRank () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetArrayRank();" />
      <MemberSignature Language="F#" Value="abstract member GetArrayRank : unit -&gt; int" Usage="_Type.GetArrayRank " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2fb2f-164">Udostępnia niezależny od wersji dostęp do obiektów COM <see cref="M:System.Type.GetArrayRank" /> metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-164">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetArrayRank" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2fb2f-165">
            <see cref="T:System.Int32" /> Zawierające liczby wymiarów w bieżącym <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-165">An <see cref="T:System.Int32" /> containing the number of dimensions in the current <see cref="T:System.Type" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-166">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-166">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-167"><xref:System.Type.GetArrayRank%2A?displayProperty=nameWithType> Metoda pobiera liczby wymiarów w <xref:System.Array>.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-167">The <xref:System.Type.GetArrayRank%2A?displayProperty=nameWithType> method gets the number of dimensions in an <xref:System.Array>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetConstructor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="2fb2f-168">Udostępnia niezależny od wersji dostęp do obiektów COM <see cref="Overload:System.Type.GetConstructor" /> metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-168">Provides COM objects with version-independent access to the <see cref="Overload:System.Type.GetConstructor" /> method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-169">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-169">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-170"><xref:System.Type.GetConstructor%2A?displayProperty=nameWithType> Metoda pobiera określonego konstruktora bieżącego <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-170">The <xref:System.Type.GetConstructor%2A?displayProperty=nameWithType> method gets a specific constructor of the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetConstructor">
      <MemberSignature Language="C#" Value="public System.Reflection.ConstructorInfo GetConstructor (Type[] types);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.ConstructorInfo GetConstructor(class System.Type[] types) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetConstructor(System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetConstructor (types As Type()) As ConstructorInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::ConstructorInfo ^ GetConstructor(cli::array &lt;Type ^&gt; ^ types);" />
      <MemberSignature Language="F#" Value="abstract member GetConstructor : Type[] -&gt; System.Reflection.ConstructorInfo" Usage="_Type.GetConstructor types" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="types" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="types">
          <span data-ttu-id="2fb2f-171">Tablica <see cref="T:System.Type" /> obiekty reprezentujące numer zamówienia i typy parametrów dla żądanego konstruktora.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-171">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the desired constructor.</span>
          </span>
          <span data-ttu-id="2fb2f-172">- lub - pustą tablicę <see cref="T:System.Type" /> obiektów, aby uzyskać konstruktora, który nie przyjmuje żadnych parametrów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-172">-or-  An empty array of <see cref="T:System.Type" /> objects, to get a constructor that takes no parameters.</span>
          </span>
          <span data-ttu-id="2fb2f-173">Pusta tablica jest zapewniana przez <see langword="static" /> pola <see cref="F:System.Type.EmptyTypes" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-173">Such an empty array is provided by the <see langword="static" /> field <see cref="F:System.Type.EmptyTypes" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2fb2f-174">Udostępnia niezależny od wersji dostęp do obiektów COM <see cref="M:System.Type.GetConstructor(System.Type[])" /> metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-174">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetConstructor(System.Type[])" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2fb2f-175">A <see cref="T:System.Reflection.ConstructorInfo" /> obiekt reprezentujący konstruktora wystąpienia publicznego, którego parametry są zgodne typy tablicy typu parametru, jeśli je znaleziono; w przeciwnym razie <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-175">A <see cref="T:System.Reflection.ConstructorInfo" /> object representing the public instance constructor whose parameters match the types in the parameter type array, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-176">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-176">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-177"><xref:System.Type.GetConstructor%2A?displayProperty=nameWithType> Metody wyszukuje konstruktora wystąpienia publicznego, którego parametry są zgodne z typami w określonej tablicy.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-177">The <xref:System.Type.GetConstructor%2A?displayProperty=nameWithType> method searches for a public instance constructor whose parameters match the types in the specified array.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetConstructor">
      <MemberSignature Language="C#" Value="public System.Reflection.ConstructorInfo GetConstructor (System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.ConstructorInfo GetConstructor(valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::ConstructorInfo ^ GetConstructor(System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetConstructor : System.Reflection.BindingFlags * System.Reflection.Binder * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.ConstructorInfo" Usage="_Type.GetConstructor (bindingAttr, binder, types, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="2fb2f-178">Maska bitowa składającej się z co najmniej jeden <see cref="T:System.Reflection.BindingFlags" /> określające, jak jest prowadzone wyszukiwanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-178">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="2fb2f-179">- lub - Zero, aby zwrócić <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-179">-or-  Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="2fb2f-180">A <see cref="T:System.Reflection.Binder" /> obiektu definiuje zbiór właściwości, który umożliwia powiązanie, które obejmują wybór przeciążonej metody koercja typy argumentów i wywołanie elementu członkowskiego przy użyciu odbicia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-180">A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span>
          </span>
          <span data-ttu-id="2fb2f-181">- lub - <see langword="null" />, aby użyć <see cref="P:System.Type.DefaultBinder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-181">-or-  <see langword="null" />, to use the <see cref="P:System.Type.DefaultBinder" />.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="2fb2f-182">Tablica <see cref="T:System.Type" /> obiektów reprezentującą numer, kolejność i typy parametrów dla konstruktora, aby uzyskać.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-182">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the constructor to get.</span>
          </span>
          <span data-ttu-id="2fb2f-183">- lub - pustą tablicę typu <see cref="T:System.Type" /> (to znaczy wpisz typów [] = nowe Type[0]) można pobrać konstruktora, który nie przyjmuje żadnych parametrów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-183">-or-  An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a constructor that takes no parameters.</span>
          </span>
          <span data-ttu-id="2fb2f-184">- lub - <see cref="F:System.Type.EmptyTypes" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-184">-or-  <see cref="F:System.Type.EmptyTypes" />.</span>
          </span>
        </param>
        <param name="modifiers">
          <span data-ttu-id="2fb2f-185">Tablica <see cref="T:System.Reflection.ParameterModifier" /> obiektów reprezentujących atrybuty skojarzone z odpowiadający mu element w tablicy parametrów typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-185">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the parameter type array.</span>
          </span>
          <span data-ttu-id="2fb2f-186">Domyślny konsolidator nie przetwarza tego parametru.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-186">The default binder does not process this parameter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2fb2f-187">Udostępnia niezależny od wersji dostęp do obiektów COM <see cref="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])" /> metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-187">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2fb2f-188">A <see cref="T:System.Reflection.ConstructorInfo" /> obiekt reprezentujący Konstruktor, który spełnia określonych wymagań, jeśli je znaleziono; w przeciwnym razie <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-188">A <see cref="T:System.Reflection.ConstructorInfo" /> object representing the constructor that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-189">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-189">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-190"><xref:System.Type.GetConstructor%2A?displayProperty=nameWithType> Wyszukuje metody konstruktora, którego parametry są zgodne określone typy argumentów i Modyfikatory korzystanie z określonymi ograniczeniami wiązania.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-190">The <xref:System.Type.GetConstructor%2A?displayProperty=nameWithType> method searches for a constructor whose parameters match the specified argument types and modifiers, using the specified binding constraints.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetConstructor">
      <MemberSignature Language="C#" Value="public System.Reflection.ConstructorInfo GetConstructor (System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.ConstructorInfo GetConstructor(valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, valuetype System.Reflection.CallingConventions callConvention, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::ConstructorInfo ^ GetConstructor(System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, System::Reflection::CallingConventions callConvention, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetConstructor : System.Reflection.BindingFlags * System.Reflection.Binder * System.Reflection.CallingConventions * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.ConstructorInfo" Usage="_Type.GetConstructor (bindingAttr, binder, callConvention, types, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="callConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="2fb2f-191">Maska bitowa składającej się z co najmniej jeden <see cref="T:System.Reflection.BindingFlags" /> określające, jak jest prowadzone wyszukiwanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-191">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="2fb2f-192">- lub - Zero, aby zwrócić <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-192">-or-  Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="2fb2f-193">A <see cref="T:System.Reflection.Binder" /> obiektu definiuje zbiór właściwości, który umożliwia powiązanie, które obejmują wybór przeciążonej metody koercja typy argumentów i wywołanie elementu członkowskiego przy użyciu odbicia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-193">A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span>
          </span>
          <span data-ttu-id="2fb2f-194">- lub - <see langword="null" />, aby użyć <see cref="P:System.Type.DefaultBinder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-194">-or-  <see langword="null" />, to use the <see cref="P:System.Type.DefaultBinder" />.</span>
          </span>
        </param>
        <param name="callConvention">
          <span data-ttu-id="2fb2f-195">
            <see cref="T:System.Reflection.CallingConventions" /> Obiekt, który określa zbiór reguł dotyczących kolejności i układu argumenty, jak wartość zwracana jest przekazywany, jakie rejestrów są używane dla argumentów i stosu jest wyczyszczone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-195">The <see cref="T:System.Reflection.CallingConventions" /> object that specifies the set of rules to use regarding the order and layout of arguments, how the return value is passed, what registers are used for arguments, and the stack is cleaned up.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="2fb2f-196">Tablica <see cref="T:System.Type" /> obiektów reprezentującą numer, kolejność i typy parametrów dla konstruktora, aby uzyskać.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-196">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the constructor to get.</span>
          </span>
          <span data-ttu-id="2fb2f-197">- lub - pustą tablicę typu <see cref="T:System.Type" /> (to znaczy wpisz typów [] = nowe Type[0]) można pobrać konstruktora, który nie przyjmuje żadnych parametrów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-197">-or-  An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a constructor that takes no parameters.</span>
          </span>
        </param>
        <param name="modifiers">
          <span data-ttu-id="2fb2f-198">Tablica <see cref="T:System.Reflection.ParameterModifier" /> obiektów reprezentujących atrybuty skojarzone z odpowiadającego mu elementu w <c>typy</c> tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-198">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <c>types</c> array.</span>
          </span>
          <span data-ttu-id="2fb2f-199">Domyślny konsolidator nie przetwarza tego parametru.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-199">The default binder does not process this parameter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2fb2f-200">Udostępnia niezależny od wersji dostęp do obiektów COM <see cref="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-200">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetConstructor(System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2fb2f-201">A <see cref="T:System.Reflection.ConstructorInfo" /> obiekt reprezentujący Konstruktor, który spełnia określonych wymagań, jeśli je znaleziono; w przeciwnym razie <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-201">A <see cref="T:System.Reflection.ConstructorInfo" /> object representing the constructor that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-202">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-202">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-203"><xref:System.Type.GetConstructor%2A?displayProperty=nameWithType> Metoda szuka konstruktora, którego parametry są zgodne określone typy argumentów i Modyfikatory korzystanie z określonymi ograniczeniami wiązania i określonej konwencji wywoływania.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-203">The <xref:System.Type.GetConstructor%2A?displayProperty=nameWithType> method searches for a constructor whose parameters match the specified argument types and modifiers, using the specified binding constraints and the specified calling convention.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetConstructors">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="2fb2f-204">Udostępnia niezależny od wersji dostęp do obiektów COM <see cref="Overload:System.Type.GetConstructors" /> metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-204">Provides COM objects with version-independent access to the <see cref="Overload:System.Type.GetConstructors" /> method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-205">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-205">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-206"><xref:System.Type.GetConstructors%2A?displayProperty=nameWithType> Metoda pobiera konstruktorów bieżącego <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-206">The <xref:System.Type.GetConstructors%2A?displayProperty=nameWithType> method gets the constructors of the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetConstructors">
      <MemberSignature Language="C#" Value="public System.Reflection.ConstructorInfo[] GetConstructors ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.ConstructorInfo[] GetConstructors() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetConstructors" />
      <MemberSignature Language="VB.NET" Value="Public Function GetConstructors () As ConstructorInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Reflection::ConstructorInfo ^&gt; ^ GetConstructors();" />
      <MemberSignature Language="F#" Value="abstract member GetConstructors : unit -&gt; System.Reflection.ConstructorInfo[]" Usage="_Type.GetConstructors " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2fb2f-207">Udostępnia niezależny od wersji dostęp do obiektów COM <see cref="M:System.Type.GetConstructors" /> metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-207">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetConstructors" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2fb2f-208">Tablica <see cref="T:System.Reflection.ConstructorInfo" /> obiekty reprezentujące wszystkich zdefiniowanych dla bieżącej konstruktorów wystąpienia publicznego <see cref="T:System.Type" />, z wyjątkiem inicjatora typu (w konstruktorze statycznym).</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-208">An array of <see cref="T:System.Reflection.ConstructorInfo" /> objects representing all the public instance constructors defined for the current <see cref="T:System.Type" />, but not including the type initializer (static constructor).</span>
          </span>
          <span data-ttu-id="2fb2f-209">Jeśli ma konstruktorów wystąpienia publicznego są zdefiniowane dla bieżącego <see cref="T:System.Type" />, lub, jeśli bieżący <see cref="T:System.Type" /> reprezentuje parametr typu ogólnego definicji typu lub metody, pustą tablicę typu <see cref="T:System.Reflection.ConstructorInfo" /> jest zwracany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-209">If no public instance constructors are defined for the current <see cref="T:System.Type" />, or if the current <see cref="T:System.Type" /> represents a type parameter of a generic type or method definition, an empty array of type <see cref="T:System.Reflection.ConstructorInfo" /> is returned.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-210">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-210">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-211"><xref:System.Type.GetConstructors%2A?displayProperty=nameWithType> Metoda zwraca publicznych konstruktorów zdefiniowanych dla bieżącej <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-211">The <xref:System.Type.GetConstructors%2A?displayProperty=nameWithType> method returns all the public constructors defined for the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetConstructors">
      <MemberSignature Language="C#" Value="public System.Reflection.ConstructorInfo[] GetConstructors (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.ConstructorInfo[] GetConstructors(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetConstructors(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetConstructors (bindingAttr As BindingFlags) As ConstructorInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Reflection::ConstructorInfo ^&gt; ^ GetConstructors(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetConstructors : System.Reflection.BindingFlags -&gt; System.Reflection.ConstructorInfo[]" Usage="_Type.GetConstructors bindingAttr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="2fb2f-212">Maska bitowa składającej się z co najmniej jeden <see cref="T:System.Reflection.BindingFlags" /> określające, jak jest prowadzone wyszukiwanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-212">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="2fb2f-213">- lub - Zero, aby zwrócić <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-213">-or-  Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2fb2f-214">Udostępnia niezależny od wersji dostęp do obiektów COM <see cref="M:System.Type.GetConstructors(System.Reflection.BindingFlags)" /> metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-214">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetConstructors(System.Reflection.BindingFlags)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2fb2f-215">Tablica <see cref="T:System.Reflection.ConstructorInfo" /> obiekty reprezentujące wszystkich konstruktorów zdefiniowanych dla bieżącej <see cref="T:System.Type" /> zgodnego z określonymi ograniczeniami wiązania, jeśli jest on zdefiniowany w tym inicjatora typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-215">An array of <see cref="T:System.Reflection.ConstructorInfo" /> objects representing all constructors defined for the current <see cref="T:System.Type" /> that match the specified binding constraints, including the type initializer if it is defined.</span>
          </span>
          <span data-ttu-id="2fb2f-216">Zwraca pustą tablicę typu <see cref="T:System.Reflection.ConstructorInfo" /> jeśli ma konstruktorów zdefiniowanych dla bieżącej <see cref="T:System.Type" />, jeśli żadna z konstruktorów zdefiniowanych nie zgadza się z ograniczeniami wiązania lub bieżący <see cref="T:System.Type" /> reprezentuje parametr typu ogólnego lub metody Definicja.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-216">Returns an empty array of type <see cref="T:System.Reflection.ConstructorInfo" /> if no constructors are defined for the current <see cref="T:System.Type" />, if none of the defined constructors match the binding constraints, or if the current <see cref="T:System.Type" /> represents a type parameter of a generic type or method definition.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-217">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-217">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-218"><xref:System.Type.GetConstructors%2A?displayProperty=nameWithType> Metody wyszukuje konstruktorów zdefiniowanych dla bieżącej <xref:System.Type>, przy użyciu określonego <xref:System.Reflection.BindingFlags>.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-218">The <xref:System.Type.GetConstructors%2A?displayProperty=nameWithType> method searches for the constructors defined for the current <xref:System.Type>, using the specified <xref:System.Reflection.BindingFlags>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetCustomAttributes">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="2fb2f-219">Udostępnia niezależny od wersji dostęp do obiektów COM <see cref="Overload:System.Reflection.MemberInfo.GetCustomAttributes" /> metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-219">Provides COM objects with version-independent access to the <see cref="Overload:System.Reflection.MemberInfo.GetCustomAttributes" /> method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-220">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-220">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-221"><xref:System.Reflection.MemberInfo.GetCustomAttributes%2A?displayProperty=nameWithType> Metoda zwraca wszystkie atrybuty stosowane do tego elementu członkowskiego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-221">The <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A?displayProperty=nameWithType> method returns all attributes applied to this member.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public object[] GetCustomAttributes (bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object[] GetCustomAttributes(bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetCustomAttributes(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCustomAttributes (inherit As Boolean) As Object()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Object ^&gt; ^ GetCustomAttributes(bool inherit);" />
      <MemberSignature Language="F#" Value="abstract member GetCustomAttributes : bool -&gt; obj[]" Usage="_Type.GetCustomAttributes inherit" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="inherit">
          <span data-ttu-id="2fb2f-222">Określa, czy przeszukać łańcuch dziedziczenia tego elementu członkowskiego w celu znalezienia atrybutów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-222">Specifies whether to search this member's inheritance chain to find the attributes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2fb2f-223">Udostępnia niezależny od wersji dostęp do obiektów COM <see cref="M:System.Reflection.Assembly.GetCustomAttributes(System.Boolean)" /> metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-223">Provides COM objects with version-independent access to the <see cref="M:System.Reflection.Assembly.GetCustomAttributes(System.Boolean)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2fb2f-224">Tablica atrybutów niestandardowych zastosowanych do tego elementu członkowskiego lub tablica nie zawierająca żadnego elementu (0), jeśli atrybuty nie zostały zastosowane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-224">An array of custom attributes applied to this member, or an array with zero (0) elements if no attributes have been applied.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-225">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-225">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-226"><xref:System.Reflection.Assembly.GetCustomAttributes%2A?displayProperty=nameWithType> Metoda zwraca wszystkie atrybuty stosowane do tego elementu członkowskiego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-226">The <xref:System.Reflection.Assembly.GetCustomAttributes%2A?displayProperty=nameWithType> method returns all attributes applied to this member.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetCustomAttributes">
      <MemberSignature Language="C#" Value="public object[] GetCustomAttributes (Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object[] GetCustomAttributes(class System.Type attributeType, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetCustomAttributes(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetCustomAttributes (attributeType As Type, inherit As Boolean) As Object()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Object ^&gt; ^ GetCustomAttributes(Type ^ attributeType, bool inherit);" />
      <MemberSignature Language="F#" Value="abstract member GetCustomAttributes : Type * bool -&gt; obj[]" Usage="_Type.GetCustomAttributes (attributeType, inherit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeType" Type="System.Type" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="attributeType">
          <span data-ttu-id="2fb2f-227">Typ atrybutu do wyszukiwania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-227">The type of attribute to search for.</span>
          </span>
          <span data-ttu-id="2fb2f-228">Zwracane są tylko atrybuty, które są przypisane do tego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-228">Only attributes that are assignable to this type are returned.</span>
          </span>
        </param>
        <param name="inherit">
          <span data-ttu-id="2fb2f-229">Określa, czy przeszukać łańcuch dziedziczenia tego elementu członkowskiego w celu znalezienia atrybutów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-229">Specifies whether to search this member's inheritance chain to find the attributes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2fb2f-230">Udostępnia niezależny od wersji dostęp do obiektów COM <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)" /> metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-230">Provides COM objects with version-independent access to the <see cref="M:System.Reflection.MemberInfo.GetCustomAttributes(System.Type,System.Boolean)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2fb2f-231">Tablica atrybutów niestandardowych zastosowanych do tego elementu członkowskiego lub tablica nie zawierająca żadnego elementu (0), jeśli atrybuty nie zostały zastosowane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-231">An array of custom attributes applied to this member, or an array with zero (0) elements if no attributes have been applied.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-232">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-232">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-233"><xref:System.Reflection.MemberInfo.GetCustomAttributes%2A?displayProperty=nameWithType> Metoda zwraca wszystkie atrybuty stosowane do tego elementu członkowskiego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-233">The <xref:System.Reflection.MemberInfo.GetCustomAttributes%2A?displayProperty=nameWithType> method returns all attributes applied to this member.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetDefaultMembers">
      <MemberSignature Language="C#" Value="public System.Reflection.MemberInfo[] GetDefaultMembers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] GetDefaultMembers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetDefaultMembers" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDefaultMembers () As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ GetDefaultMembers();" />
      <MemberSignature Language="F#" Value="abstract member GetDefaultMembers : unit -&gt; System.Reflection.MemberInfo[]" Usage="_Type.GetDefaultMembers " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2fb2f-234">Udostępnia niezależny od wersji dostęp do obiektów COM <see cref="M:System.Type.GetDefaultMembers" /> metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-234">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetDefaultMembers" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2fb2f-235">Tablica <see cref="T:System.Reflection.MemberInfo" /> obiekty reprezentujące domyślne wszystkich członków bieżącej <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-235">An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing all default members of the current <see cref="T:System.Type" />.</span>
          </span>
          <span data-ttu-id="2fb2f-236">- lub - pustą tablicę typu <see cref="T:System.Reflection.MemberInfo" />, jeśli bieżący <see cref="T:System.Type" /> nie ma domyślne elementy członkowskie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-236">-or-  An empty array of type <see cref="T:System.Reflection.MemberInfo" />, if the current <see cref="T:System.Type" /> does not have default members.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-237">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-237">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-238"><xref:System.Type.GetDefaultMembers%2A?displayProperty=nameWithType> Metody wyszukuje elementów członkowskich zdefiniowanych dla bieżącej <xref:System.Type> którego <xref:System.Reflection.DefaultMemberAttribute> jest ustawiona.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-238">The <xref:System.Type.GetDefaultMembers%2A?displayProperty=nameWithType> method searches for the members defined for the current <xref:System.Type> whose <xref:System.Reflection.DefaultMemberAttribute> is set.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetElementType">
      <MemberSignature Language="C#" Value="public Type GetElementType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetElementType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetElementType" />
      <MemberSignature Language="VB.NET" Value="Public Function GetElementType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Type ^ GetElementType();" />
      <MemberSignature Language="F#" Value="abstract member GetElementType : unit -&gt; Type" Usage="_Type.GetElementType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2fb2f-239">Udostępnia niezależny od wersji dostęp do obiektów COM <see cref="M:System.Type.GetElementType" /> metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-239">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetElementType" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2fb2f-240">
            <see cref="T:System.Type" /> Obiektu ujęty lub odwołuje się do bieżącego typu tablicy, wskaźnik lub odwołanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-240">The <see cref="T:System.Type" /> of the object encompassed or referred to by the current array, pointer or reference type.</span>
          </span>
          <span data-ttu-id="2fb2f-241">- lub - <see langword="null" /> Jeśli bieżące <see cref="T:System.Type" /> nie jest tablicą ani wskaźnikiem, lub nie jest przekazywana przez odwołanie lub reprezentuje typu ogólnego lub parametr typu ogólnego definicji typu lub metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-241">-or-  <see langword="null" /> if the current <see cref="T:System.Type" /> is not an array or a pointer, or is not passed by reference, or represents a generic type or a type parameter of a generic type or method definition.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-242">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-242">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-243"><xref:System.Type.GetElementType%2A?displayProperty=nameWithType> Metoda zwraca <xref:System.Type> obiektu ujęty lub odwołuje się do bieżącego typu tablicy, wskaźnik lub odwołanie.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-243">The <xref:System.Type.GetElementType%2A?displayProperty=nameWithType> method returns the <xref:System.Type> of the object encompassed or referred to by the current array, pointer or reference type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetEvent">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="2fb2f-244">Udostępnia niezależny od wersji dostęp do obiektów COM <see cref="Overload:System.Type.GetEvent" /> metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-244">Provides COM objects with version-independent access to the <see cref="Overload:System.Type.GetEvent" /> method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-245">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-245">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-246"><xref:System.Type.GetEvent%2A?displayProperty=nameWithType> Metoda pobiera określone zdarzenie zadeklarowane lub dziedziczone przez bieżący <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-246">The <xref:System.Type.GetEvent%2A?displayProperty=nameWithType> method gets a specific event declared or inherited by the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetEvent">
      <MemberSignature Language="C#" Value="public System.Reflection.EventInfo GetEvent (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.EventInfo GetEvent(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetEvent(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEvent (name As String) As EventInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::EventInfo ^ GetEvent(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetEvent : string -&gt; System.Reflection.EventInfo" Usage="_Type.GetEvent name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.EventInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="2fb2f-247">Maska bitowa składającej się z co najmniej jeden <see cref="T:System.Reflection.BindingFlags" /> określające, jak jest prowadzone wyszukiwanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-247">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="2fb2f-248">- lub - Zero, aby zwrócić <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-248">-or-  Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2fb2f-249">Udostępnia niezależny od wersji dostęp do obiektów COM <see cref="M:System.Type.GetEvent(System.String)" /> metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-249">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetEvent(System.String)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2fb2f-250">Tablica <see cref="T:System.Reflection.EventInfo" /> obiekty reprezentujące wszystkie zdarzenia, które są zadeklarowane lub dziedziczone przez bieżący <see cref="T:System.Type" /> zgodnego z określonymi ograniczeniami wiązania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-250">An array of <see cref="T:System.Reflection.EventInfo" /> objects representing all events that are declared or inherited by the current <see cref="T:System.Type" /> that match the specified binding constraints.</span>
          </span>
          <span data-ttu-id="2fb2f-251">- lub - pustą tablicę typu <see cref="T:System.Reflection.EventInfo" />, jeśli bieżący <see cref="T:System.Type" /> nie ma zdarzenia, lub jeśli brak zdarzeń są zgodne z ograniczeniami wiązania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-251">-or-  An empty array of type <see cref="T:System.Reflection.EventInfo" />, if the current <see cref="T:System.Type" /> does not have events, or if none of the events match the binding constraints.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-252">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-252">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-253"><xref:System.Type.GetEvent%2A?displayProperty=nameWithType> Metody wyszukuje zdarzenia, które są zadeklarowane lub dziedziczone przez bieżący <xref:System.Type>, korzystanie z określonymi ograniczeniami wiązania.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-253">The <xref:System.Type.GetEvent%2A?displayProperty=nameWithType> method searches for events that are declared or inherited by the current <xref:System.Type>, using the specified binding constraints.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEvent">
      <MemberSignature Language="C#" Value="public System.Reflection.EventInfo GetEvent (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.EventInfo GetEvent(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetEvent(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEvent (name As String, bindingAttr As BindingFlags) As EventInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::EventInfo ^ GetEvent(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetEvent : string * System.Reflection.BindingFlags -&gt; System.Reflection.EventInfo" Usage="_Type.GetEvent (name, bindingAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.EventInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="2fb2f-254">
            <see cref="T:System.String" /> Zawierającą nazwę zdarzenia, które jest zadeklarowany lub dziedziczone przez bieżący <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-254">The <see cref="T:System.String" /> containing the name of an event that is declared or inherited by the current <see cref="T:System.Type" />.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="2fb2f-255">Maska bitowa składającej się z co najmniej jeden <see cref="T:System.Reflection.BindingFlags" /> określające, jak jest prowadzone wyszukiwanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-255">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="2fb2f-256">- lub - Zero, aby zwrócić <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-256">-or-  Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2fb2f-257">Udostępnia niezależny od wersji dostęp do obiektów COM <see cref="M:System.Type.GetEvent(System.String,System.Reflection.BindingFlags)" /> metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-257">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetEvent(System.String,System.Reflection.BindingFlags)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2fb2f-258">
            <see cref="T:System.Reflection.EventInfo" /> Obiekt reprezentujący określonego zdarzenia, które jest zadeklarowany lub dziedziczone przez bieżący <see cref="T:System.Type" />, jeśli je znaleziono; w przeciwnym razie <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-258">The <see cref="T:System.Reflection.EventInfo" /> object representing the specified event that is declared or inherited by the current <see cref="T:System.Type" />, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-259">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-259">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-260"><xref:System.Type.GetEvent%2A?displayProperty=nameWithType> Metoda zwraca <xref:System.Reflection.EventInfo> obiekt reprezentujący określonego zdarzenia, korzystanie z określonymi ograniczeniami wiązania.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-260">The <xref:System.Type.GetEvent%2A?displayProperty=nameWithType> method returns the <xref:System.Reflection.EventInfo> object representing the specified event, using the specified binding constraints.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetEvents">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="2fb2f-261">Udostępnia niezależny od wersji dostęp do obiektów COM <see cref="Overload:System.Type.GetEvents" /> metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-261">Provides COM objects with version-independent access to the <see cref="Overload:System.Type.GetEvents" /> method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-262">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-262">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-263"><xref:System.Type.GetEvents%2A?displayProperty=nameWithType> — Metoda pobiera zdarzenia, które są zadeklarowane lub dziedziczone przez bieżący <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-263">The <xref:System.Type.GetEvents%2A?displayProperty=nameWithType> method gets the events that are declared or inherited by the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetEvents">
      <MemberSignature Language="C#" Value="public System.Reflection.EventInfo[] GetEvents ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.EventInfo[] GetEvents() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetEvents" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEvents () As EventInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Reflection::EventInfo ^&gt; ^ GetEvents();" />
      <MemberSignature Language="F#" Value="abstract member GetEvents : unit -&gt; System.Reflection.EventInfo[]" Usage="_Type.GetEvents " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.EventInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2fb2f-264">Udostępnia niezależny od wersji dostęp do obiektów COM <see cref="M:System.Type.GetEvents" /> metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-264">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetEvents" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2fb2f-265">Tablica <see cref="T:System.Reflection.EventInfo" /> obiekty reprezentujące wszystkie publiczne zdarzenia, które są zadeklarowane lub dziedziczone przez bieżący <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-265">An array of <see cref="T:System.Reflection.EventInfo" /> objects representing all the public events that are declared or inherited by the current <see cref="T:System.Type" />.</span>
          </span>
          <span data-ttu-id="2fb2f-266">- lub - pustą tablicę typu <see cref="T:System.Reflection.EventInfo" />, jeśli bieżący <see cref="T:System.Type" /> nie ma zdarzenia publiczne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-266">-or-  An empty array of type <see cref="T:System.Reflection.EventInfo" />, if the current <see cref="T:System.Type" /> does not have public events.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-267">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-267">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-268"><xref:System.Type.GetEvents%2A?displayProperty=nameWithType> Metoda zwraca wszystkie publiczne zdarzenia, które są zadeklarowane lub dziedziczone przez bieżący <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-268">The <xref:System.Type.GetEvents%2A?displayProperty=nameWithType> method returns all the public events that are declared or inherited by the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEvents">
      <MemberSignature Language="C#" Value="public System.Reflection.EventInfo[] GetEvents (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.EventInfo[] GetEvents(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetEvents(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEvents (bindingAttr As BindingFlags) As EventInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Reflection::EventInfo ^&gt; ^ GetEvents(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetEvents : System.Reflection.BindingFlags -&gt; System.Reflection.EventInfo[]" Usage="_Type.GetEvents bindingAttr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.EventInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="2fb2f-269">Maska bitowa składającej się z co najmniej jeden <see cref="T:System.Reflection.BindingFlags" /> określające, jak jest prowadzone wyszukiwanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-269">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="2fb2f-270">- lub - Zero, aby zwrócić <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-270">-or-  Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2fb2f-271">Udostępnia niezależny od wersji dostęp do obiektów COM <see cref="M:System.Type.GetEvents(System.Reflection.BindingFlags)" /> metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-271">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetEvents(System.Reflection.BindingFlags)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2fb2f-272">Tablica <see cref="T:System.Reflection.EventInfo" /> obiekty reprezentujące wszystkie zdarzenia, które są zadeklarowane lub dziedziczone przez bieżący <see cref="T:System.Type" /> zgodnego z określonymi ograniczeniami wiązania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-272">An array of <see cref="T:System.Reflection.EventInfo" /> objects representing all events that are declared or inherited by the current <see cref="T:System.Type" /> that match the specified binding constraints.</span>
          </span>
          <span data-ttu-id="2fb2f-273">- lub - pustą tablicę typu <see cref="T:System.Reflection.EventInfo" />, jeśli bieżący <see cref="T:System.Type" /> nie ma zdarzenia, lub jeśli brak zdarzeń są zgodne z ograniczeniami wiązania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-273">-or-  An empty array of type <see cref="T:System.Reflection.EventInfo" />, if the current <see cref="T:System.Type" /> does not have events, or if none of the events match the binding constraints.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-274">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-274">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-275"><xref:System.Type.GetEvents%2A?displayProperty=nameWithType> Metody wyszukuje zdarzenia, które są zadeklarowane lub dziedziczone przez bieżący <xref:System.Type>, korzystanie z określonymi ograniczeniami wiązania.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-275">The <xref:System.Type.GetEvents%2A?displayProperty=nameWithType> method searches for events that are declared or inherited by the current <xref:System.Type>, using the specified binding constraints.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetField">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="2fb2f-276">Udostępnia niezależny od wersji dostęp do obiektów COM <see cref="Overload:System.Type.GetField" /> metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-276">Provides COM objects with version-independent access to the <see cref="Overload:System.Type.GetField" /> method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-277">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-277">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-278"><xref:System.Type.GetField%2A?displayProperty=nameWithType> Metoda pobiera określonego pola bieżącej <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-278">The <xref:System.Type.GetField%2A?displayProperty=nameWithType> method gets a specific field of the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetField">
      <MemberSignature Language="C#" Value="public System.Reflection.FieldInfo GetField (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.FieldInfo GetField(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetField(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetField (name As String) As FieldInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::FieldInfo ^ GetField(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetField : string -&gt; System.Reflection.FieldInfo" Usage="_Type.GetField name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.FieldInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="2fb2f-279">
            <see cref="T:System.String" /> Zawierającą nazwę pola danych, które ma być pobrana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-279">The <see cref="T:System.String" /> containing the name of the data field to get.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2fb2f-280">Udostępnia niezależny od wersji dostęp do obiektów COM <see cref="M:System.Type.GetField(System.String)" /> metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-280">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetField(System.String)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2fb2f-281">A <see cref="T:System.Reflection.FieldInfo" /> obiekt reprezentujący pole publiczne o określonej nazwie, jeśli je znaleziono; w przeciwnym razie <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-281">A <see cref="T:System.Reflection.FieldInfo" /> object representing the public field with the specified name, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-282">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-282">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-283"><xref:System.Type.GetField%2A?displayProperty=nameWithType> Metody wyszukuje pole publiczne o określonej nazwie.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-283">The <xref:System.Type.GetField%2A?displayProperty=nameWithType> method searches for the public field with the specified name.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetField">
      <MemberSignature Language="C#" Value="public System.Reflection.FieldInfo GetField (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.FieldInfo GetField(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetField(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetField (name As String, bindingAttr As BindingFlags) As FieldInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::FieldInfo ^ GetField(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetField : string * System.Reflection.BindingFlags -&gt; System.Reflection.FieldInfo" Usage="_Type.GetField (name, bindingAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.FieldInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="2fb2f-284">
            <see cref="T:System.String" /> Zawierającą nazwę pola danych, które ma być pobrana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-284">The <see cref="T:System.String" /> containing the name of the data field to get.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="2fb2f-285">Maska bitowa składającej się z co najmniej jeden <see cref="T:System.Reflection.BindingFlags" /> określające, jak jest prowadzone wyszukiwanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-285">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="2fb2f-286">- lub - Zero, aby zwrócić <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-286">-or-  Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2fb2f-287">Udostępnia niezależny od wersji dostęp do obiektów COM <see cref="M:System.Type.GetField(System.String,System.Reflection.BindingFlags)" /> metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-287">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetField(System.String,System.Reflection.BindingFlags)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2fb2f-288">A <see cref="T:System.Reflection.FieldInfo" /> obiekt reprezentujący pola, które spełnia określonych wymagań, jeśli je znaleziono; w przeciwnym razie <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-288">A <see cref="T:System.Reflection.FieldInfo" /> object representing the field that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-289">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-289">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-290"><xref:System.Type.GetField%2A?displayProperty=nameWithType> Metoda szuka określonego pola, używając z określonymi ograniczeniami wiązania.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-290">The <xref:System.Type.GetField%2A?displayProperty=nameWithType> method searches for the specified field, using the specified binding constraints.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetFields">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="2fb2f-291">Udostępnia niezależny od wersji dostęp do obiektów COM <see cref="Overload:System.Type.GetFields" /> metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-291">Provides COM objects with version-independent access to the <see cref="Overload:System.Type.GetFields" /> method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-292">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-292">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-293"><xref:System.Type.GetFields%2A?displayProperty=nameWithType> Metoda pobiera określonego pola bieżącej <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-293">The <xref:System.Type.GetFields%2A?displayProperty=nameWithType> method gets a specific field of the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetFields">
      <MemberSignature Language="C#" Value="public System.Reflection.FieldInfo[] GetFields ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.FieldInfo[] GetFields() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetFields" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFields () As FieldInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Reflection::FieldInfo ^&gt; ^ GetFields();" />
      <MemberSignature Language="F#" Value="abstract member GetFields : unit -&gt; System.Reflection.FieldInfo[]" Usage="_Type.GetFields " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.FieldInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2fb2f-294">Udostępnia niezależny od wersji dostęp do obiektów COM <see cref="M:System.Type.GetFields" /> metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-294">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetFields" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2fb2f-295">Tablica <see cref="T:System.Reflection.FieldInfo" /> obiektów reprezentujących pola publiczne zdefiniowane dla bieżącego <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-295">An array of <see cref="T:System.Reflection.FieldInfo" /> objects representing all the public fields defined for the current <see cref="T:System.Type" />.</span>
          </span>
          <span data-ttu-id="2fb2f-296">- lub - pustą tablicę typu <see cref="T:System.Reflection.FieldInfo" />, jeśli nie ma publicznego pól zdefiniowanych dla bieżącej <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-296">-or-  An empty array of type <see cref="T:System.Reflection.FieldInfo" />, if no public fields are defined for the current <see cref="T:System.Type" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-297">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-297">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-298"><xref:System.Type.GetFields%2A?displayProperty=nameWithType> Metoda zwróci wartość pola publiczne bieżącego <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-298">The <xref:System.Type.GetFields%2A?displayProperty=nameWithType> method returns all the public fields of the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetFields">
      <MemberSignature Language="C#" Value="public System.Reflection.FieldInfo[] GetFields (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.FieldInfo[] GetFields(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetFields(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFields (bindingAttr As BindingFlags) As FieldInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Reflection::FieldInfo ^&gt; ^ GetFields(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetFields : System.Reflection.BindingFlags -&gt; System.Reflection.FieldInfo[]" Usage="_Type.GetFields bindingAttr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.FieldInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="2fb2f-299">Maska bitowa składającej się z co najmniej jeden <see cref="T:System.Reflection.BindingFlags" /> określające, jak jest prowadzone wyszukiwanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-299">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="2fb2f-300">- lub - Zero, aby zwrócić <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-300">-or-  Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2fb2f-301">Udostępnia niezależny od wersji dostęp do obiektów COM <see cref="M:System.Type.GetFields(System.Reflection.BindingFlags)" /> metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-301">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetFields(System.Reflection.BindingFlags)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2fb2f-302">Tablica <see cref="T:System.Reflection.FieldInfo" /> obiekty reprezentujące wszystkich pól zdefiniowanych dla bieżącej <see cref="T:System.Type" /> zgodnego z określonymi ograniczeniami wiązania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-302">An array of <see cref="T:System.Reflection.FieldInfo" /> objects representing all fields defined for the current <see cref="T:System.Type" /> that match the specified binding constraints.</span>
          </span>
          <span data-ttu-id="2fb2f-303">- lub - pustą tablicę typu <see cref="T:System.Reflection.FieldInfo" />, jeśli nie ma pól zdefiniowanych dla bieżącej <see cref="T:System.Type" />, lub jeśli żadna z określonych pól nie zgadza się z ograniczeniami wiązania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-303">-or-  An empty array of type <see cref="T:System.Reflection.FieldInfo" />, if no fields are defined for the current <see cref="T:System.Type" />, or if none of the defined fields match the binding constraints.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-304">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-304">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-305"><xref:System.Type.GetFields%2A?displayProperty=nameWithType> Metody wyszukuje pól zdefiniowanych dla bieżącej <xref:System.Type>, korzystanie z określonymi ograniczeniami wiązania.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-305">The <xref:System.Type.GetFields%2A?displayProperty=nameWithType> method searches for the fields defined for the current <xref:System.Type>, using the specified binding constraints.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetHashCode();" />
      <MemberSignature Language="F#" Value="abstract member GetHashCode : unit -&gt; int" Usage="_Type.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2fb2f-306">Udostępnia niezależny od wersji dostęp do obiektów COM <see cref="M:System.Type.GetHashCode" /> metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-306">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetHashCode" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2fb2f-307">
            <see cref="T:System.Int32" /> Zawierający wartość skrótu dla tego wystąpienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-307">An <see cref="T:System.Int32" /> containing the hash code for this instance.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-308">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-308">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-309"><xref:System.Type.GetHashCode%2A?displayProperty=nameWithType> Metody.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-309">The <xref:System.Type.GetHashCode%2A?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetIDsOfNames">
      <MemberSignature Language="C#" Value="public void GetIDsOfNames (ref Guid riid, IntPtr rgszNames, uint cNames, uint lcid, IntPtr rgDispId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetIDsOfNames([in]valuetype System.Guid&amp; riid, native int rgszNames, unsigned int32 cNames, unsigned int32 lcid, native int rgDispId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetIDsOfNames(System.Guid@,System.IntPtr,System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub GetIDsOfNames (ByRef riid As Guid, rgszNames As IntPtr, cNames As UInteger, lcid As UInteger, rgDispId As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void GetIDsOfNames(Guid % riid, IntPtr rgszNames, System::UInt32 cNames, System::UInt32 lcid, IntPtr rgDispId);" />
      <MemberSignature Language="F#" Value="abstract member GetIDsOfNames :  * nativeint * uint32 * uint32 * nativeint -&gt; unit" Usage="_Type.GetIDsOfNames (riid, rgszNames, cNames, lcid, rgDispId)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="riid" Type="System.Guid&amp;" RefType="ref" />
        <Parameter Name="rgszNames" Type="System.IntPtr" />
        <Parameter Name="cNames" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="rgDispId" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="riid">
          <span data-ttu-id="2fb2f-310">Zarezerwowane do użytku w przyszłości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-310">Reserved for future use.</span>
          </span>
          <span data-ttu-id="2fb2f-311">Musi być wartością IID_NULL.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-311">Must be IID_NULL.</span>
          </span>
        </param>
        <param name="rgszNames">
          <span data-ttu-id="2fb2f-312">Przekazana tablica nazw ma być mapowana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-312">Passed-in array of names to be mapped.</span>
          </span>
        </param>
        <param name="cNames">
          <span data-ttu-id="2fb2f-313">Liczba nazw, które mają być mapowane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-313">Count of the names to be mapped.</span>
          </span>
        </param>
        <param name="lcid">
          <span data-ttu-id="2fb2f-314">Ustawienia regionalne kontekstu, w którym można interpretować nazwy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-314">The locale context in which to interpret the names.</span>
          </span>
        </param>
        <param name="rgDispId">
          <span data-ttu-id="2fb2f-315">Tablica przydzielone przez obiekt wywołujący, która odbiera identyfikatory, odpowiadających nazwy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-315">Caller-allocated array that receives the IDs corresponding to the names.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2fb2f-316">Zestaw nazw jest mapowany na odpowiedni zestaw identyfikatorów wysyłania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-316">Maps a set of names to a corresponding set of dispatch identifiers.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-317">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-317">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="2fb2f-318">Aby uzyskać więcej informacji na temat `IDispatch::GetIDsOfNames`, zobacz bibliotece MSDN.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-318">For more information about `IDispatch::GetIDsOfNames`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetInterface">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="2fb2f-319">Udostępnia niezależny od wersji dostęp do obiektów COM <see cref="Overload:System.Type.GetInterface" /> metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-319">Provides COM objects with version-independent access to the <see cref="Overload:System.Type.GetInterface" /> method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-320">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-320">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-321"><xref:System.Type.GetInterface%2A?displayProperty=nameWithType> Metoda pobiera określonego interfejsu zaimplementowano lub dziedziczone przez bieżący <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-321">The <xref:System.Type.GetInterface%2A?displayProperty=nameWithType> method gets a specific interface implemented or inherited by the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetInterface">
      <MemberSignature Language="C#" Value="public Type GetInterface (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetInterface(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetInterface(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetInterface (name As String) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Type ^ GetInterface(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetInterface : string -&gt; Type" Usage="_Type.GetInterface name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="2fb2f-322">
            <see cref="T:System.String" /> Zawierającą nazwę interfejsu do pobrania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-322">The <see cref="T:System.String" /> containing the name of the interface to get.</span>
          </span>
          <span data-ttu-id="2fb2f-323">Interfejsy ogólne jest to nazwa zniekształcona.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-323">For generic interfaces, this is the mangled name.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2fb2f-324">Udostępnia niezależny od wersji dostęp do obiektów COM <see cref="M:System.Type.GetInterface(System.String)" /> metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-324">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetInterface(System.String)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2fb2f-325">A <see cref="T:System.Type" /> obiekt reprezentujący interfejsu o określonej nazwie zaimplementowano lub dziedziczone przez bieżący <see cref="T:System.Type" />, jeśli je znaleziono; w przeciwnym razie <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-325">A <see cref="T:System.Type" /> object representing the interface with the specified name, implemented or inherited by the current <see cref="T:System.Type" />, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-326">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-326">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-327"><xref:System.Type.GetInterface%2A?displayProperty=nameWithType> Wyszukuje metody interfejsu o określonej nazwie.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-327">The <xref:System.Type.GetInterface%2A?displayProperty=nameWithType> method searches for the interface with the specified name..</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInterface">
      <MemberSignature Language="C#" Value="public Type GetInterface (string name, bool ignoreCase);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetInterface(string name, bool ignoreCase) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetInterface(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetInterface (name As String, ignoreCase As Boolean) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Type ^ GetInterface(System::String ^ name, bool ignoreCase);" />
      <MemberSignature Language="F#" Value="abstract member GetInterface : string * bool -&gt; Type" Usage="_Type.GetInterface (name, ignoreCase)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="ignoreCase" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="2fb2f-328">
            <see cref="T:System.String" /> Zawierającą nazwę interfejsu do pobrania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-328">The <see cref="T:System.String" /> containing the name of the interface to get.</span>
          </span>
          <span data-ttu-id="2fb2f-329">Interfejsy ogólne jest to nazwa zniekształcona.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-329">For generic interfaces, this is the mangled name.</span>
          </span>
        </param>
        <param name="ignoreCase">
          <span data-ttu-id="2fb2f-330">
            <see langword="true" /> Aby wykonać wyszukiwanie bez uwzględniania wielkości liter dla <c>nazwa</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-330">
              <see langword="true" /> to perform a case-insensitive search for <c>name</c>.</span>
          </span>
          <span data-ttu-id="2fb2f-331">- lub - <see langword="false" /> Aby wykonać wyszukiwanie z uwzględnieniem wielkości liter dla <c>nazwa</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-331">-or-  <see langword="false" /> to perform a case-sensitive search for <c>name</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2fb2f-332">Udostępnia niezależny od wersji dostęp do obiektów COM <see cref="M:System.Type.GetInterface(System.String,System.Boolean)" /> metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-332">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetInterface(System.String,System.Boolean)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2fb2f-333">A <see cref="T:System.Type" /> obiekt reprezentujący interfejsu o określonej nazwie zaimplementowano lub dziedziczone przez bieżący <see cref="T:System.Type" />, jeśli je znaleziono; w przeciwnym razie <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-333">A <see cref="T:System.Type" /> object representing the interface with the specified name, implemented or inherited by the current <see cref="T:System.Type" />, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-334">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-334">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-335"><xref:System.Type.GetInterface%2A?displayProperty=nameWithType> Metoda szuka dla określonego interfejsu, określająca, czy do wyszukiwania z uwzględnieniem wielkości liter.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-335">The <xref:System.Type.GetInterface%2A?displayProperty=nameWithType> method searches for the specified interface, specifying whether to do a case-sensitive search.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInterfaceMap">
      <MemberSignature Language="C#" Value="public System.Reflection.InterfaceMapping GetInterfaceMap (Type interfaceType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance valuetype System.Reflection.InterfaceMapping GetInterfaceMap(class System.Type interfaceType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetInterfaceMap(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetInterfaceMap (interfaceType As Type) As InterfaceMapping" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::InterfaceMapping GetInterfaceMap(Type ^ interfaceType);" />
      <MemberSignature Language="F#" Value="abstract member GetInterfaceMap : Type -&gt; System.Reflection.InterfaceMapping" Usage="_Type.GetInterfaceMap interfaceType" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.InterfaceMapping</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="interfaceType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="interfaceType">
          <span data-ttu-id="2fb2f-336">
            <see cref="T:System.Type" /> Interfejsu, którego można pobrać mapowania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-336">The <see cref="T:System.Type" /> of the interface of which to retrieve a mapping.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2fb2f-337">Udostępnia niezależny od wersji dostęp do obiektów COM <see cref="M:System.Type.GetInterfaceMap(System.Type)" /> metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-337">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetInterfaceMap(System.Type)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2fb2f-338">
            <see cref="T:System.Reflection.InterfaceMapping" /> Obiekt reprezentujący mapowania interfejsu <paramref name="interfaceType" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-338">An <see cref="T:System.Reflection.InterfaceMapping" /> object representing the interface mapping for <paramref name="interfaceType" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-339">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-339">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-340"><xref:System.Type.GetInterfaceMap%2A?displayProperty=nameWithType> Metoda zwraca interfejs mapowania dla typu określonego interfejsu.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-340">The <xref:System.Type.GetInterfaceMap%2A?displayProperty=nameWithType> method returns an interface mapping for the specified interface type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetInterfaces">
      <MemberSignature Language="C#" Value="public Type[] GetInterfaces ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] GetInterfaces() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetInterfaces" />
      <MemberSignature Language="VB.NET" Value="Public Function GetInterfaces () As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;Type ^&gt; ^ GetInterfaces();" />
      <MemberSignature Language="F#" Value="abstract member GetInterfaces : unit -&gt; Type[]" Usage="_Type.GetInterfaces " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2fb2f-341">Udostępnia niezależny od wersji dostęp do obiektów COM <see cref="M:System.Type.GetInterfaces" /> metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-341">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetInterfaces" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2fb2f-342">Tablica <see cref="T:System.Type" /> obiektów reprezentującą wszystkie interfejsy zaimplementowano lub dziedziczone przez bieżący <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-342">An array of <see cref="T:System.Type" /> objects representing all the interfaces implemented or inherited by the current <see cref="T:System.Type" />.</span>
          </span>
          <span data-ttu-id="2fb2f-343">- lub - pustą tablicę typu <see cref="T:System.Type" />, jeśli nie interfejsy są zaimplementowano lub dziedziczone przez bieżące <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-343">-or-  An empty array of type <see cref="T:System.Type" />, if no interfaces are implemented or inherited by the current <see cref="T:System.Type" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-344">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-344">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-345"><xref:System.Type.GetInterfaces%2A?displayProperty=nameWithType> Metoda pobiera wszystkie interfejsy zaimplementowano lub dziedziczone przez bieżący <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-345">The <xref:System.Type.GetInterfaces%2A?displayProperty=nameWithType> method gets all the interfaces implemented or inherited by the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetMember">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="2fb2f-346">Udostępnia niezależny od wersji dostęp do obiektów COM <see cref="Overload:System.Type.GetMember" /> metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-346">Provides COM objects with version-independent access to the <see cref="Overload:System.Type.GetMember" /> method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-347">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-347">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-348"><xref:System.Type.GetMember%2A?displayProperty=nameWithType> Metoda pobiera określony członków bieżącej <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-348">The <xref:System.Type.GetMember%2A?displayProperty=nameWithType> method gets the specified members of the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetMember">
      <MemberSignature Language="C#" Value="public System.Reflection.MemberInfo[] GetMember (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] GetMember(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetMember(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMember (name As String) As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ GetMember(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetMember : string -&gt; System.Reflection.MemberInfo[]" Usage="_Type.GetMember name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="2fb2f-349">
            <see cref="T:System.String" /> Zawierającą nazwę publiczne elementy członkowskie, aby uzyskać.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-349">The <see cref="T:System.String" /> containing the name of the public members to get.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2fb2f-350">Udostępnia niezależny od wersji dostęp do obiektów COM <see cref="M:System.Type.GetMember(System.String)" /> metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-350">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetMember(System.String)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2fb2f-351">Tablica <see cref="T:System.Reflection.MemberInfo" /> obiekty reprezentujące publiczne elementy członkowskie o określonej nazwie, jeśli je znaleziono; w przeciwnym razie, pustą tablicę.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-351">An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing the public members with the specified name, if found; otherwise, an empty array.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-352">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-352">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-353"><xref:System.Type.GetMember%2A?displayProperty=nameWithType> Metody wyszukuje publiczne elementy członkowskie o określonej nazwie.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-353">The <xref:System.Type.GetMember%2A?displayProperty=nameWithType> method searches for the public members with the specified name.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMember">
      <MemberSignature Language="C#" Value="public System.Reflection.MemberInfo[] GetMember (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] GetMember(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetMember(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMember (name As String, bindingAttr As BindingFlags) As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ GetMember(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetMember : string * System.Reflection.BindingFlags -&gt; System.Reflection.MemberInfo[]" Usage="_Type.GetMember (name, bindingAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="2fb2f-354">
            <see cref="T:System.String" /> Zawierający nazwy elementów członkowskich do pobrania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-354">The <see cref="T:System.String" /> containing the name of the members to get.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="2fb2f-355">Maska bitowa składającej się z co najmniej jeden <see cref="T:System.Reflection.BindingFlags" /> określające, jak jest prowadzone wyszukiwanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-355">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="2fb2f-356">- lub - Zero, aby zwrócić pustą tablicę.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-356">-or-  Zero, to return an empty array.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2fb2f-357">Udostępnia niezależny od wersji dostęp do obiektów COM <see cref="M:System.Type.GetMember(System.String,System.Reflection.BindingFlags)" /> metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-357">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetMember(System.String,System.Reflection.BindingFlags)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2fb2f-358">Tablica <see cref="T:System.Reflection.MemberInfo" /> obiekty reprezentujące publiczne elementy członkowskie o określonej nazwie, jeśli je znaleziono; w przeciwnym razie, pustą tablicę.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-358">An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing the public members with the specified name, if found; otherwise, an empty array.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-359">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-359">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-360"><xref:System.Type.GetMember%2A?displayProperty=nameWithType> Metody wyszukuje określony elementy członkowskie przy użyciu z określonymi ograniczeniami wiązania.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-360">The <xref:System.Type.GetMember%2A?displayProperty=nameWithType> method searches for the specified members, using the specified binding constraints.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMember">
      <MemberSignature Language="C#" Value="public System.Reflection.MemberInfo[] GetMember (string name, System.Reflection.MemberTypes type, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] GetMember(string name, valuetype System.Reflection.MemberTypes type, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMember (name As String, type As MemberTypes, bindingAttr As BindingFlags) As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ GetMember(System::String ^ name, System::Reflection::MemberTypes type, System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetMember : string * System.Reflection.MemberTypes * System.Reflection.BindingFlags -&gt; System.Reflection.MemberInfo[]" Usage="_Type.GetMember (name, type, bindingAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="type" Type="System.Reflection.MemberTypes" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="2fb2f-361">
            <see cref="T:System.String" /> Zawierający nazwy elementów członkowskich do pobrania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-361">The <see cref="T:System.String" /> containing the name of the members to get.</span>
          </span>
        </param>
        <param name="type">
          <span data-ttu-id="2fb2f-362">
            <see cref="T:System.Reflection.MemberTypes" /> Wartość do wyszukania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-362">The <see cref="T:System.Reflection.MemberTypes" /> value to search for.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="2fb2f-363">Maska bitowa składającej się z co najmniej jeden <see cref="T:System.Reflection.BindingFlags" /> określające, jak jest prowadzone wyszukiwanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-363">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="2fb2f-364">- lub - Zero, aby zwrócić pustą tablicę.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-364">-or-  Zero, to return an empty array.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2fb2f-365">Udostępnia niezależny od wersji dostęp do obiektów COM <see cref="M:System.Type.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)" /> metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-365">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetMember(System.String,System.Reflection.MemberTypes,System.Reflection.BindingFlags)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2fb2f-366">Tablica <see cref="T:System.Reflection.MemberInfo" /> obiekty reprezentujące publiczne elementy członkowskie o określonej nazwie, jeśli je znaleziono; w przeciwnym razie, pustą tablicę.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-366">An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing the public members with the specified name, if found; otherwise, an empty array.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-367">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-367">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-368"><xref:System.Type.GetMember%2A?displayProperty=nameWithType> Metody wyszukuje określony elementów członkowskich typu określonego elementu członkowskiego, korzystanie z określonymi ograniczeniami wiązania.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-368">The <xref:System.Type.GetMember%2A?displayProperty=nameWithType> method searches for the specified members of the specified member type, using the specified binding constraints.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetMembers">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="2fb2f-369">Udostępnia niezależny od wersji dostęp do obiektów COM <see cref="Overload:System.Type.GetMembers" /> metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-369">Provides COM objects with version-independent access to the <see cref="Overload:System.Type.GetMembers" /> method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-370">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-370">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-371"><xref:System.Type.GetMembers%2A?displayProperty=nameWithType> Metoda pobiera członków (właściwości, metody pola, zdarzeń i tak dalej) bieżącego <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-371">The <xref:System.Type.GetMembers%2A?displayProperty=nameWithType> method gets the members (properties, methods, fields, events, and so on) of the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetMembers">
      <MemberSignature Language="C#" Value="public System.Reflection.MemberInfo[] GetMembers ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] GetMembers() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetMembers" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMembers () As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ GetMembers();" />
      <MemberSignature Language="F#" Value="abstract member GetMembers : unit -&gt; System.Reflection.MemberInfo[]" Usage="_Type.GetMembers " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2fb2f-372">Udostępnia niezależny od wersji dostęp do obiektów COM <see cref="M:System.Type.GetMembers" /> metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-372">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetMembers" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2fb2f-373">Tablica <see cref="T:System.Reflection.MemberInfo" /> obiekty reprezentujące wszystkie publiczne elementy członkowskie bieżącego <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-373">An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing all the public members of the current <see cref="T:System.Type" />.</span>
          </span>
          <span data-ttu-id="2fb2f-374">- lub - pustą tablicę typu <see cref="T:System.Reflection.MemberInfo" />, jeśli bieżący <see cref="T:System.Type" /> nie ma publicznych elementów członkowskich.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-374">-or-  An empty array of type <see cref="T:System.Reflection.MemberInfo" />, if the current <see cref="T:System.Type" /> does not have public members.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-375">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-375">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-376"><xref:System.Type.GetMembers%2A?displayProperty=nameWithType> Metoda zwraca wszystkie publiczne elementy członkowskie bieżącego <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-376">The <xref:System.Type.GetMembers%2A?displayProperty=nameWithType> method returns all the public members of the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMembers">
      <MemberSignature Language="C#" Value="public System.Reflection.MemberInfo[] GetMembers (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MemberInfo[] GetMembers(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetMembers(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMembers (bindingAttr As BindingFlags) As MemberInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Reflection::MemberInfo ^&gt; ^ GetMembers(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetMembers : System.Reflection.BindingFlags -&gt; System.Reflection.MemberInfo[]" Usage="_Type.GetMembers bindingAttr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="2fb2f-377">Maska bitowa składającej się z co najmniej jeden <see cref="T:System.Reflection.BindingFlags" /> określające, jak jest prowadzone wyszukiwanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-377">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="2fb2f-378">- lub - Zero, aby zwrócić <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-378">-or-  Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2fb2f-379">Udostępnia niezależny od wersji dostęp do obiektów COM <see cref="M:System.Type.GetMembers(System.Reflection.BindingFlags)" /> metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-379">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetMembers(System.Reflection.BindingFlags)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2fb2f-380">Tablica <see cref="T:System.Reflection.MemberInfo" /> obiekty reprezentujące wszystkich elementów członkowskich zdefiniowanych dla bieżącej <see cref="T:System.Type" /> zgodnego z określonymi ograniczeniami wiązania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-380">An array of <see cref="T:System.Reflection.MemberInfo" /> objects representing all members defined for the current <see cref="T:System.Type" /> that match the specified binding constraints.</span>
          </span>
          <span data-ttu-id="2fb2f-381">- lub - pustą tablicę typu <see cref="T:System.Reflection.MemberInfo" />, jeśli dla bieżącej nie zdefiniowano żadnych elementów członkowskich <see cref="T:System.Type" />, lub jeśli żadna z określonych elementów członkowskich nie zgadza się z ograniczeniami wiązania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-381">-or-  An empty array of type <see cref="T:System.Reflection.MemberInfo" />, if no members are defined for the current <see cref="T:System.Type" />, or if none of the defined members match the binding constraints.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-382">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-382">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-383"><xref:System.Type.GetMembers%2A?displayProperty=nameWithType> Metody wyszukuje elementów członkowskich zdefiniowanych dla bieżącej <xref:System.Type>, korzystanie z określonymi ograniczeniami wiązania.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-383">The <xref:System.Type.GetMembers%2A?displayProperty=nameWithType> method searches for the members defined for the current <xref:System.Type>, using the specified binding constraints.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetMethod">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="2fb2f-384">Udostępnia niezależny od wersji dostęp do obiektów COM <see cref="Overload:System.Type.GetMethod" /> metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-384">Provides COM objects with version-independent access to the <see cref="Overload:System.Type.GetMethod" /> method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-385">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-385">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-386"><xref:System.Type.GetMethod%2A?displayProperty=nameWithType> Metody.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-386">The <xref:System.Type.GetMethod%2A?displayProperty=nameWithType> method.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethod(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetMethod(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMethod (name As String) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::MethodInfo ^ GetMethod(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetMethod : string -&gt; System.Reflection.MethodInfo" Usage="_Type.GetMethod name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="2fb2f-387">
            <see cref="T:System.String" /> Zawierający nazwę metody publicznej do pobrania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-387">The <see cref="T:System.String" /> containing the name of the public method to get.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2fb2f-388">Udostępnia niezależny od wersji dostęp do obiektów COM <see cref="M:System.Type.GetMethod(System.String)" /> metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-388">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetMethod(System.String)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2fb2f-389">A <see cref="T:System.Reflection.MethodInfo" /> obiekt reprezentujący metoda publiczna o określonej nazwie, jeśli je znaleziono; w przeciwnym razie <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-389">A <see cref="T:System.Reflection.MethodInfo" /> object representing the public method with the specified name, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-390">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-390">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-391"><xref:System.Type.GetMethod%2A?displayProperty=nameWithType> Metody wyszukuje metoda publiczna o określonej nazwie.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-391">The <xref:System.Type.GetMethod%2A?displayProperty=nameWithType> method searches for the public method with the specified name..</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethod(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetMethod(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMethod (name As String, bindingAttr As BindingFlags) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::MethodInfo ^ GetMethod(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetMethod : string * System.Reflection.BindingFlags -&gt; System.Reflection.MethodInfo" Usage="_Type.GetMethod (name, bindingAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="2fb2f-392">
            <see cref="T:System.String" /> Zawierający nazwę metody do pobrania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-392">The <see cref="T:System.String" /> containing the name of the method to get.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="2fb2f-393">Maska bitowa składającej się z co najmniej jeden <see cref="T:System.Reflection.BindingFlags" /> określające, jak jest prowadzone wyszukiwanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-393">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="2fb2f-394">- lub - Zero, aby zwrócić <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-394">-or-  Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2fb2f-395">Udostępnia niezależny od wersji dostęp do obiektów COM <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags)" /> metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-395">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2fb2f-396">A <see cref="T:System.Reflection.MethodInfo" /> obiekt reprezentujący metodę, która spełnia określonych wymagań, jeśli je znaleziono; w przeciwnym razie <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-396">A <see cref="T:System.Reflection.MethodInfo" /> object representing the method that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-397">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-397">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-398"><xref:System.Type.GetMethod%2A?displayProperty=nameWithType> Metoda szuka dla określonej metody, przy użyciu z określonymi ograniczeniami wiązania.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-398">The <xref:System.Type.GetMethod%2A?displayProperty=nameWithType> method searches for the specified method, using the specified binding constraints.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, Type[] types);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethod(string name, class System.Type[] types) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetMethod(System.String,System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMethod (name As String, types As Type()) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::MethodInfo ^ GetMethod(System::String ^ name, cli::array &lt;Type ^&gt; ^ types);" />
      <MemberSignature Language="F#" Value="abstract member GetMethod : string * Type[] -&gt; System.Reflection.MethodInfo" Usage="_Type.GetMethod (name, types)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="types" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="2fb2f-399">
            <see cref="T:System.String" /> Zawierający nazwę metody publicznej do pobrania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-399">The <see cref="T:System.String" /> containing the name of the public method to get.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="2fb2f-400">Tablica <see cref="T:System.Type" /> obiektów reprezentującą numer, kolejność i typy parametrów dla metody, aby uzyskać.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-400">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.</span>
          </span>
          <span data-ttu-id="2fb2f-401">- lub - pustą tablicę typu <see cref="T:System.Type" /> (to znaczy wpisz typów [] = nowe Type[0]) można pobrać metody, która nie przyjmuje żadnych parametrów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-401">-or-  An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a method that takes no parameters.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2fb2f-402">Udostępnia niezależny od wersji dostęp do obiektów COM <see cref="M:System.Type.GetMethod(System.String,System.Type[])" /> metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-402">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetMethod(System.String,System.Type[])" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2fb2f-403">A <see cref="T:System.Reflection.MethodInfo" /> obiekt reprezentujący publicznej metody, której parametry są zgodne określone typy argumentów, jeśli je znaleziono; w przeciwnym razie <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-403">A <see cref="T:System.Reflection.MethodInfo" /> object representing the public method whose parameters match the specified argument types, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-404">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-404">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-405"><xref:System.Type.GetMethod%2A?displayProperty=nameWithType> Metody wyszukiwania dla określonej metody publicznej, którego parametry są zgodne określone typy argumentów.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-405">The <xref:System.Type.GetMethod%2A?displayProperty=nameWithType> method searches for the specified public method whose parameters match the specified argument types.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethod(string name, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetMethod(System.String,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMethod (name As String, types As Type(), modifiers As ParameterModifier()) As MethodInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::MethodInfo ^ GetMethod(System::String ^ name, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetMethod : string * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.MethodInfo" Usage="_Type.GetMethod (name, types, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="2fb2f-406">
            <see cref="T:System.String" /> Zawierający nazwę metody publicznej do pobrania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-406">The <see cref="T:System.String" /> containing the name of the public method to get.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="2fb2f-407">Tablica <see cref="T:System.Type" /> obiektów reprezentującą numer, kolejność i typy parametrów dla metody, aby uzyskać.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-407">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.</span>
          </span>
          <span data-ttu-id="2fb2f-408">- lub - pustą tablicę typu <see cref="T:System.Type" /> (to znaczy wpisz typów [] = nowe Type[0]) można pobrać metody, która nie przyjmuje żadnych parametrów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-408">-or-  An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a method that takes no parameters.</span>
          </span>
        </param>
        <param name="modifiers">
          <span data-ttu-id="2fb2f-409">Tablica <see cref="T:System.Reflection.ParameterModifier" /> obiektów reprezentujących atrybuty skojarzone z odpowiadającego mu elementu w <c>typy</c> tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-409">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <c>types</c> array.</span>
          </span>
          <span data-ttu-id="2fb2f-410">Domyślny konsolidator nie przetwarza tego parametru.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-410">The default binder does not process this parameter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2fb2f-411">Udostępnia niezależny od wersji dostęp do obiektów COM <see cref="M:System.Type.GetMethod(System.String,System.Type[],System.Reflection.ParameterModifier[])" /> metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-411">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetMethod(System.String,System.Type[],System.Reflection.ParameterModifier[])" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2fb2f-412">A <see cref="T:System.Reflection.MethodInfo" /> obiekt reprezentujący metodę publiczną, która spełnia określonych wymagań, jeśli je znaleziono; w przeciwnym razie <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-412">A <see cref="T:System.Reflection.MethodInfo" /> object representing the public method that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-413">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-413">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-414"><xref:System.Type.GetMethod%2A?displayProperty=nameWithType> Metody wyszukiwania dla określonej metody publicznej, którego parametry są zgodne modyfikatorów i określone typy argumentów.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-414">The <xref:System.Type.GetMethod%2A?displayProperty=nameWithType> method searches for the specified public method whose parameters match the specified argument types and modifiers.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethod(string name, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::MethodInfo ^ GetMethod(System::String ^ name, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetMethod : string * System.Reflection.BindingFlags * System.Reflection.Binder * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.MethodInfo" Usage="_Type.GetMethod (name, bindingAttr, binder, types, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="2fb2f-415">
            <see cref="T:System.String" /> Zawierający nazwę metody do pobrania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-415">The <see cref="T:System.String" /> containing the name of the method to get.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="2fb2f-416">Maska bitowa składającej się z co najmniej jeden <see cref="T:System.Reflection.BindingFlags" /> określające, jak jest prowadzone wyszukiwanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-416">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="2fb2f-417">- lub - Zero, aby zwrócić <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-417">-or-  Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="2fb2f-418">A <see cref="T:System.Reflection.Binder" /> obiektu definiuje zbiór właściwości, który umożliwia powiązanie, które obejmują wybór przeciążonej metody koercja typy argumentów i wywołanie elementu członkowskiego przy użyciu odbicia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-418">A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span>
          </span>
          <span data-ttu-id="2fb2f-419">- lub - <see langword="null" />, aby użyć <see cref="P:System.Type.DefaultBinder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-419">-or-  <see langword="null" />, to use the <see cref="P:System.Type.DefaultBinder" />.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="2fb2f-420">Tablica <see cref="T:System.Type" /> obiektów reprezentującą numer, kolejność i typy parametrów dla metody, aby uzyskać.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-420">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.</span>
          </span>
          <span data-ttu-id="2fb2f-421">- lub - pustą tablicę typu <see cref="T:System.Type" /> (to znaczy wpisz typów [] = nowe Type[0]) można pobrać metody, która nie przyjmuje żadnych parametrów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-421">-or-  An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a method that takes no parameters.</span>
          </span>
        </param>
        <param name="modifiers">
          <span data-ttu-id="2fb2f-422">Tablica <see cref="T:System.Reflection.ParameterModifier" /> obiektów reprezentujących atrybuty skojarzone z odpowiadającego mu elementu w <c>typy</c> tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-422">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <c>types</c> array.</span>
          </span>
          <span data-ttu-id="2fb2f-423">Domyślny konsolidator nie przetwarza tego parametru.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-423">The default binder does not process this parameter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2fb2f-424">Udostępnia niezależny od wersji dostęp do obiektów COM <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])" /> metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-424">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type[],System.Reflection.ParameterModifier[])" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2fb2f-425">A <see cref="T:System.Reflection.MethodInfo" /> obiekt reprezentujący metodę, która spełnia określonych wymagań, jeśli je znaleziono; w przeciwnym razie <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-425">A <see cref="T:System.Reflection.MethodInfo" /> object representing the method that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-426">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-426">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-427"><xref:System.Type.GetMethod%2A?displayProperty=nameWithType> Metody wyszukiwania dla określonej metody, której parametry są zgodne określone typy argumentów i Modyfikatory korzystanie z określonymi ograniczeniami wiązania.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-427">The <xref:System.Type.GetMethod%2A?displayProperty=nameWithType> method searches for the specified method whose parameters match the specified argument types and modifiers, using the specified binding constraints.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMethod">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo GetMethod (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, System.Reflection.CallingConventions callConvention, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo GetMethod(string name, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, valuetype System.Reflection.CallingConventions callConvention, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::MethodInfo ^ GetMethod(System::String ^ name, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, System::Reflection::CallingConventions callConvention, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetMethod : string * System.Reflection.BindingFlags * System.Reflection.Binder * System.Reflection.CallingConventions * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.MethodInfo" Usage="_Type.GetMethod (name, bindingAttr, binder, callConvention, types, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="callConvention" Type="System.Reflection.CallingConventions" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="2fb2f-428">
            <see cref="T:System.String" /> Zawierający nazwę metody do pobrania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-428">The <see cref="T:System.String" /> containing the name of the method to get.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="2fb2f-429">Maska bitowa składającej się z co najmniej jeden <see cref="T:System.Reflection.BindingFlags" /> określające, jak jest prowadzone wyszukiwanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-429">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="2fb2f-430">- lub - Zero, aby zwrócić <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-430">-or-  Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="2fb2f-431">A <see cref="T:System.Reflection.Binder" /> obiektu definiuje zbiór właściwości, który umożliwia powiązanie, które obejmują wybór przeciążonej metody koercja typy argumentów i wywołanie elementu członkowskiego przy użyciu odbicia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-431">A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span>
          </span>
          <span data-ttu-id="2fb2f-432">- lub - <see langword="null" />, aby użyć <see cref="P:System.Type.DefaultBinder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-432">-or-  <see langword="null" />, to use the <see cref="P:System.Type.DefaultBinder" />.</span>
          </span>
        </param>
        <param name="callConvention">
          <span data-ttu-id="2fb2f-433">
            <see cref="T:System.Reflection.CallingConventions" /> Obiekt, który określa zestaw reguł dotyczących kolejność i układ argumenty, jak wartość zwracana jest przekazywany, jakie rejestrów są używane dla argumentów i jak wyczyścić stosu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-433">The <see cref="T:System.Reflection.CallingConventions" /> object that specifies the set of rules to use regarding the order and layout of arguments, how the return value is passed, what registers are used for arguments, and how the stack is cleaned up.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="2fb2f-434">Tablica <see cref="T:System.Type" /> obiektów reprezentującą numer, kolejność i typy parametrów dla metody, aby uzyskać.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-434">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the method to get.</span>
          </span>
          <span data-ttu-id="2fb2f-435">- lub - pustą tablicę typu <see cref="T:System.Type" /> (to znaczy wpisz typów [] = nowe Type[0]) można pobrać metody, która nie przyjmuje żadnych parametrów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-435">-or-  An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a method that takes no parameters.</span>
          </span>
        </param>
        <param name="modifiers">
          <span data-ttu-id="2fb2f-436">Tablica <see cref="T:System.Reflection.ParameterModifier" /> obiektów reprezentujących atrybuty skojarzone z odpowiadającego mu elementu w <c>typy</c> tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-436">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <c>types</c> array.</span>
          </span>
          <span data-ttu-id="2fb2f-437">Domyślny konsolidator nie przetwarza tego parametru.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-437">The default binder does not process this parameter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2fb2f-438">Udostępnia niezależny od wersji dostęp do obiektów COM <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-438">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetMethod(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Reflection.CallingConventions,System.Type[],System.Reflection.ParameterModifier[])" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2fb2f-439">A <see cref="T:System.Reflection.MethodInfo" /> obiekt reprezentujący metodę, która spełnia określonych wymagań, jeśli je znaleziono; w przeciwnym razie <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-439">A <see cref="T:System.Reflection.MethodInfo" /> object representing the method that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-440">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-440">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-441"><xref:System.Type.GetMethod%2A?displayProperty=nameWithType> Metoda szuka dla określonej metody, której parametry są zgodne określone typy argumentów i Modyfikatory korzystanie z określonymi ograniczeniami wiązania i określonej konwencji wywoływania.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-441">The <xref:System.Type.GetMethod%2A?displayProperty=nameWithType> method searches for the specified method whose parameters match the specified argument types and modifiers, using the specified binding constraints and the specified calling convention.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetMethods">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="2fb2f-442">Udostępnia niezależny od wersji dostęp do obiektów COM <see cref="Overload:System.Type.GetMethods" /> metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-442">Provides COM objects with version-independent access to the <see cref="Overload:System.Type.GetMethods" /> method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-443">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-443">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-444"><xref:System.Type.GetMethods%2A?displayProperty=nameWithType> Metoda pobiera metody bieżącego <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-444">The <xref:System.Type.GetMethods%2A?displayProperty=nameWithType> method gets the methods of the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetMethods">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo[] GetMethods ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo[] GetMethods() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetMethods" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMethods () As MethodInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Reflection::MethodInfo ^&gt; ^ GetMethods();" />
      <MemberSignature Language="F#" Value="abstract member GetMethods : unit -&gt; System.Reflection.MethodInfo[]" Usage="_Type.GetMethods " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2fb2f-445">Udostępnia niezależny od wersji dostęp do obiektów COM <see cref="M:System.Type.GetMethods" /> metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-445">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetMethods" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2fb2f-446">Tablica <see cref="T:System.Reflection.MethodInfo" /> obiekty reprezentujące metody publiczne zdefiniowane dla bieżącego <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-446">An array of <see cref="T:System.Reflection.MethodInfo" /> objects representing all the public methods defined for the current <see cref="T:System.Type" />.</span>
          </span>
          <span data-ttu-id="2fb2f-447">- lub - pustą tablicę typu <see cref="T:System.Reflection.MethodInfo" />, jeśli nie publicznej metody nie są definiowane dla bieżącego <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-447">-or-  An empty array of type <see cref="T:System.Reflection.MethodInfo" />, if no public methods are defined for the current <see cref="T:System.Type" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-448">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-448">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-449"><xref:System.Type.GetMethods%2A?displayProperty=nameWithType> Metoda zwraca wszystkie metody publiczne bieżącego <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-449">The <xref:System.Type.GetMethods%2A?displayProperty=nameWithType> method returns all the public methods of the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetMethods">
      <MemberSignature Language="C#" Value="public System.Reflection.MethodInfo[] GetMethods (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.MethodInfo[] GetMethods(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetMethods(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMethods (bindingAttr As BindingFlags) As MethodInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Reflection::MethodInfo ^&gt; ^ GetMethods(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetMethods : System.Reflection.BindingFlags -&gt; System.Reflection.MethodInfo[]" Usage="_Type.GetMethods bindingAttr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MethodInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="2fb2f-450">Maska bitowa składającej się z co najmniej jeden <see cref="T:System.Reflection.BindingFlags" /> określające, jak jest prowadzone wyszukiwanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-450">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="2fb2f-451">- lub - Zero, aby zwrócić <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-451">-or-  Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2fb2f-452">Udostępnia niezależny od wersji dostęp do obiektów COM <see cref="M:System.Type.GetMethods(System.Reflection.BindingFlags)" /> metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-452">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetMethods(System.Reflection.BindingFlags)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2fb2f-453">Tablica <see cref="T:System.Reflection.MethodInfo" /> obiekty reprezentujące wszystkie metody zdefiniowane dla bieżącego <see cref="T:System.Type" /> zgodnego z określonymi ograniczeniami wiązania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-453">An array of <see cref="T:System.Reflection.MethodInfo" /> objects representing all methods defined for the current <see cref="T:System.Type" /> that match the specified binding constraints.</span>
          </span>
          <span data-ttu-id="2fb2f-454">- lub - pustą tablicę typu <see cref="T:System.Reflection.MethodInfo" />, jeśli nie metody nie są definiowane dla bieżącego <see cref="T:System.Type" />, lub jeśli żadna z określonych metod nie zgadza się z ograniczeniami wiązania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-454">-or-  An empty array of type <see cref="T:System.Reflection.MethodInfo" />, if no methods are defined for the current <see cref="T:System.Type" />, or if none of the defined methods match the binding constraints.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-455">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-455">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-456"><xref:System.Type.GetMethods%2A?displayProperty=nameWithType> Metody wyszukuje metody zdefiniowane dla bieżącego <xref:System.Type>, korzystanie z określonymi ograniczeniami wiązania.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-456">The <xref:System.Type.GetMethods%2A?displayProperty=nameWithType> method searches for the methods defined for the current <xref:System.Type>, using the specified binding constraints.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetNestedType">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="2fb2f-457">Udostępnia niezależny od wersji dostęp do obiektów COM <see cref="Overload:System.Type.GetNestedType" /> metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-457">Provides COM objects with version-independent access to the <see cref="Overload:System.Type.GetNestedType" /> method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-458">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-458">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-459"><xref:System.Type.GetNestedType%2A?displayProperty=nameWithType> Metoda pobiera określonego typu zagnieżdżone w obrębie bieżącego <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-459">The <xref:System.Type.GetNestedType%2A?displayProperty=nameWithType> method gets a specific type nested within the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetNestedType">
      <MemberSignature Language="C#" Value="public Type GetNestedType (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetNestedType(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetNestedType(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNestedType (name As String) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Type ^ GetNestedType(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetNestedType : string -&gt; Type" Usage="_Type.GetNestedType name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="2fb2f-460">Ciąg zawierający nazwę typu zagnieżdżonego można pobrać.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-460">The string containing the name of the nested type to get.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2fb2f-461">Udostępnia niezależny od wersji dostęp do obiektów COM <see cref="M:System.Type.GetNestedType(System.String)" /> metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-461">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetNestedType(System.String)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2fb2f-462">A <see cref="T:System.Type" /> obiekt reprezentujący zagnieżdżonego typu publicznego o określonej nazwie, jeśli je znaleziono; w przeciwnym razie <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-462">A <see cref="T:System.Type" /> object representing the public nested type with the specified name, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-463">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-463">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-464"><xref:System.Type.GetNestedType%2A?displayProperty=nameWithType> Metody wyszukuje zagnieżdżonego typu publicznego o określonej nazwie.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-464">The <xref:System.Type.GetNestedType%2A?displayProperty=nameWithType> method searches for the public nested type with the specified name.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNestedType">
      <MemberSignature Language="C#" Value="public Type GetNestedType (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetNestedType(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetNestedType(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNestedType (name As String, bindingAttr As BindingFlags) As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Type ^ GetNestedType(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetNestedType : string * System.Reflection.BindingFlags -&gt; Type" Usage="_Type.GetNestedType (name, bindingAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="2fb2f-465">Ciąg zawierający nazwę typu zagnieżdżonego można pobrać.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-465">The string containing the name of the nested type to get.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="2fb2f-466">Maska bitowa składającej się z co najmniej jeden <see cref="T:System.Reflection.BindingFlags" /> określające, jak jest prowadzone wyszukiwanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-466">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="2fb2f-467">- lub - Zero, aby zwrócić <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-467">-or-  Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2fb2f-468">Udostępnia niezależny od wersji dostęp do obiektów COM <see cref="M:System.Type.GetNestedType(System.String,System.Reflection.BindingFlags)" /> metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-468">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetNestedType(System.String,System.Reflection.BindingFlags)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2fb2f-469">A <see cref="T:System.Type" /> obiekt reprezentujący typu zagnieżdżonego, który spełnia określonych wymagań, jeśli je znaleziono; w przeciwnym razie <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-469">A <see cref="T:System.Type" /> object representing the nested type that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-470">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-470">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-471"><xref:System.Type.GetNestedType%2A?displayProperty=nameWithType> Metoda szuka dla określonego typu zagnieżdżonego, korzystanie z określonymi ograniczeniami wiązania.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-471">The <xref:System.Type.GetNestedType%2A?displayProperty=nameWithType> method searches for the specified nested type, using the specified binding constraints.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetNestedTypes">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="2fb2f-472">Udostępnia niezależny od wersji dostęp do obiektów COM <see cref="Overload:System.Type.GetNestedTypes" /> metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-472">Provides COM objects with version-independent access to the <see cref="Overload:System.Type.GetNestedTypes" /> method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-473">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-473">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-474"><xref:System.Type.GetNestedTypes%2A?displayProperty=nameWithType> Metoda pobiera typy zagnieżdżone w obrębie bieżącego <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-474">The <xref:System.Type.GetNestedTypes%2A?displayProperty=nameWithType> method gets the types nested within the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetNestedTypes">
      <MemberSignature Language="C#" Value="public Type[] GetNestedTypes ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] GetNestedTypes() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetNestedTypes" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNestedTypes () As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;Type ^&gt; ^ GetNestedTypes();" />
      <MemberSignature Language="F#" Value="abstract member GetNestedTypes : unit -&gt; Type[]" Usage="_Type.GetNestedTypes " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2fb2f-475">Udostępnia niezależny od wersji dostęp do obiektów COM <see cref="M:System.Type.GetNestedTypes" /> metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-475">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetNestedTypes" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2fb2f-476">Tablica <see cref="T:System.Type" /> obiekty reprezentujący wszystkie typy zagnieżdżone w obrębie bieżącego <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-476">An array of <see cref="T:System.Type" /> objects representing all the types nested within the current <see cref="T:System.Type" />.</span>
          </span>
          <span data-ttu-id="2fb2f-477">- lub - pustą tablicę typu <see cref="T:System.Type" />, jeśli żaden z typów są zagnieżdżone w obrębie bieżącego <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-477">-or-  An empty array of type <see cref="T:System.Type" />, if no types are nested within the current <see cref="T:System.Type" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-478">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-478">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-479"><xref:System.Type.GetNestedTypes%2A?displayProperty=nameWithType> Metoda zwraca wszystkie typy zagnieżdżone w obrębie bieżącego <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-479">The <xref:System.Type.GetNestedTypes%2A?displayProperty=nameWithType> method returns all the types nested within the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetNestedTypes">
      <MemberSignature Language="C#" Value="public Type[] GetNestedTypes (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type[] GetNestedTypes(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetNestedTypes(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetNestedTypes (bindingAttr As BindingFlags) As Type()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;Type ^&gt; ^ GetNestedTypes(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetNestedTypes : System.Reflection.BindingFlags -&gt; Type[]" Usage="_Type.GetNestedTypes bindingAttr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="2fb2f-480">Maska bitowa składającej się z co najmniej jeden <see cref="T:System.Reflection.BindingFlags" /> określające, jak jest prowadzone wyszukiwanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-480">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="2fb2f-481">- lub - Zero, aby zwrócić <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-481">-or-  Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2fb2f-482">Udostępnia obiekty COM niezależny od wersji dostęp do <see cref="M:System.Type.GetNestedTypes(System.Reflection.BindingFlags)" /> — metoda i wyszukuje typy zagnieżdżone w obrębie bieżącego <see cref="T:System.Type" />, korzystanie z określonymi ograniczeniami wiązania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-482">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetNestedTypes(System.Reflection.BindingFlags)" /> method, and searches for the types nested within the current <see cref="T:System.Type" />, using the specified binding constraints.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2fb2f-483">Tablica <see cref="T:System.Type" /> obiekty reprezentujący wszystkie typy zagnieżdżone w obrębie bieżącego <see cref="T:System.Type" /> zgodnego z określonymi ograniczeniami wiązania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-483">An array of <see cref="T:System.Type" /> objects representing all the types nested within the current <see cref="T:System.Type" /> that match the specified binding constraints.</span>
          </span>
          <span data-ttu-id="2fb2f-484">- lub - pustą tablicę typu <see cref="T:System.Type" />, jeśli żaden z typów są zagnieżdżone w obrębie bieżącego <see cref="T:System.Type" />, lub jeśli żadna typy zagnieżdżone nie zgadza się z ograniczeniami wiązania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-484">-or-  An empty array of type <see cref="T:System.Type" />, if no types are nested within the current <see cref="T:System.Type" />, or if none of the nested types match the binding constraints.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-485">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-485">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetProperties">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="2fb2f-486">Udostępnia niezależny od wersji dostęp do obiektów COM <see cref="Overload:System.Type.GetProperties" /> metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-486">Provides COM objects with version-independent access to the <see cref="Overload:System.Type.GetProperties" /> method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-487">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-487">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-488"><xref:System.Type.GetProperties%2A?displayProperty=nameWithType> Metoda pobiera właściwości bieżącego <xref:System.Type>...</span><span class="sxs-lookup"><span data-stu-id="2fb2f-488">The <xref:System.Type.GetProperties%2A?displayProperty=nameWithType> method gets the properties of the current <xref:System.Type>..</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetProperties">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo[] GetProperties ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo[] GetProperties() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetProperties" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperties () As PropertyInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Reflection::PropertyInfo ^&gt; ^ GetProperties();" />
      <MemberSignature Language="F#" Value="abstract member GetProperties : unit -&gt; System.Reflection.PropertyInfo[]" Usage="_Type.GetProperties " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2fb2f-489">Udostępnia niezależny od wersji dostęp do obiektów COM <see cref="M:System.Type.GetProperties" /> metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-489">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetProperties" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2fb2f-490">Tablica <see cref="T:System.Reflection.PropertyInfo" /> obiekty reprezentujące wszystkie właściwości publiczne bieżącego <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-490">An array of <see cref="T:System.Reflection.PropertyInfo" /> objects representing all public properties of the current <see cref="T:System.Type" />.</span>
          </span>
          <span data-ttu-id="2fb2f-491">- lub - pustą tablicę typu <see cref="T:System.Reflection.PropertyInfo" />, jeśli bieżący <see cref="T:System.Type" /> nie ma właściwości publicznej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-491">-or-  An empty array of type <see cref="T:System.Reflection.PropertyInfo" />, if the current <see cref="T:System.Type" /> does not have public properties.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-492">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-492">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-493"><xref:System.Type.GetProperties%2A?displayProperty=nameWithType> Metoda zwraca wartość właściwości publiczne bieżącego <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-493">The <xref:System.Type.GetProperties%2A?displayProperty=nameWithType> method returns all the public properties of the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetProperties">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo[] GetProperties (System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo[] GetProperties(valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetProperties(System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperties (bindingAttr As BindingFlags) As PropertyInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Reflection::PropertyInfo ^&gt; ^ GetProperties(System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetProperties : System.Reflection.BindingFlags -&gt; System.Reflection.PropertyInfo[]" Usage="_Type.GetProperties bindingAttr" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="bindingAttr">
          <span data-ttu-id="2fb2f-494">Maska bitowa składającej się z co najmniej jeden <see cref="T:System.Reflection.BindingFlags" /> określające, jak jest prowadzone wyszukiwanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-494">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="2fb2f-495">- lub - Zero, aby zwrócić <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-495">-or-  Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2fb2f-496">Udostępnia niezależny od wersji dostęp do obiektów COM <see cref="M:System.Type.GetProperties(System.Reflection.BindingFlags)" /> metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-496">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetProperties(System.Reflection.BindingFlags)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2fb2f-497">Tablica <see cref="T:System.Reflection.PropertyInfo" /> obiekty reprezentujące wszystkie właściwości bieżącego <see cref="T:System.Type" /> zgodnego z określonymi ograniczeniami wiązania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-497">An array of <see cref="T:System.Reflection.PropertyInfo" /> objects representing all properties of the current <see cref="T:System.Type" /> that match the specified binding constraints.</span>
          </span>
          <span data-ttu-id="2fb2f-498">- lub - pustą tablicę typu <see cref="T:System.Reflection.PropertyInfo" />, jeśli bieżący <see cref="T:System.Type" /> nie ma właściwości, lub jeśli żadna z właściwości nie zgadza się z ograniczeniami wiązania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-498">-or-  An empty array of type <see cref="T:System.Reflection.PropertyInfo" />, if the current <see cref="T:System.Type" /> does not have properties, or if none of the properties match the binding constraints.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-499">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-499">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-500"><xref:System.Type.GetProperties%2A?displayProperty=nameWithType> Metody wyszukuje właściwości bieżącego <xref:System.Type>, korzystanie z określonymi ograniczeniami wiązania.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-500">The <xref:System.Type.GetProperties%2A?displayProperty=nameWithType> method searches for the properties of the current <xref:System.Type>, using the specified binding constraints.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetProperty">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="2fb2f-501">Udostępnia niezależny od wersji dostęp do obiektów COM <see cref="Overload:System.Type.GetProperty" /> metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-501">Provides COM objects with version-independent access to the <see cref="Overload:System.Type.GetProperty" /> method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-502">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-502">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-503"><xref:System.Type.GetProperty%2A?displayProperty=nameWithType> Metoda pobiera konkretnej właściwości bieżącego <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-503">The <xref:System.Type.GetProperty%2A?displayProperty=nameWithType> method gets a specific property of the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetProperty(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperty (name As String) As PropertyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::PropertyInfo ^ GetProperty(System::String ^ name);" />
      <MemberSignature Language="F#" Value="abstract member GetProperty : string -&gt; System.Reflection.PropertyInfo" Usage="_Type.GetProperty name" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="2fb2f-504">
            <see cref="T:System.String" /> Zawierającą nazwę publicznej właściwości do pobrania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-504">The <see cref="T:System.String" /> containing the name of the public property to get.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2fb2f-505">Udostępnia niezależny od wersji dostęp do obiektów COM <see cref="M:System.Type.GetProperty(System.String)" /> metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-505">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetProperty(System.String)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2fb2f-506">A <see cref="T:System.Reflection.PropertyInfo" /> obiekt reprezentujący właściwość publiczna o określonej nazwie, jeśli je znaleziono; w przeciwnym razie <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-506">A <see cref="T:System.Reflection.PropertyInfo" /> object representing the public property with the specified name, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-507">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-507">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-508"><xref:System.Type.GetProperty%2A?displayProperty=nameWithType> Metoda wyszukuje właściwości publicznej o określonej nazwie.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-508">The <xref:System.Type.GetProperty%2A?displayProperty=nameWithType> method searches for the public property with the specified name.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name, System.Reflection.BindingFlags bindingAttr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name, valuetype System.Reflection.BindingFlags bindingAttr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetProperty(System.String,System.Reflection.BindingFlags)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperty (name As String, bindingAttr As BindingFlags) As PropertyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::PropertyInfo ^ GetProperty(System::String ^ name, System::Reflection::BindingFlags bindingAttr);" />
      <MemberSignature Language="F#" Value="abstract member GetProperty : string * System.Reflection.BindingFlags -&gt; System.Reflection.PropertyInfo" Usage="_Type.GetProperty (name, bindingAttr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="2fb2f-509">
            <see cref="T:System.String" /> Zawierający nazwę właściwości do pobrania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-509">The <see cref="T:System.String" /> containing the name of the property to get.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="2fb2f-510">Maska bitowa składającej się z co najmniej jeden <see cref="T:System.Reflection.BindingFlags" /> określające, jak jest prowadzone wyszukiwanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-510">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="2fb2f-511">- lub - Zero, aby zwrócić <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-511">-or-  Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2fb2f-512">Udostępnia niezależny od wersji dostęp do obiektów COM <see cref="M:System.Type.GetProperty(System.String,System.Reflection.BindingFlags)" /> metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-512">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetProperty(System.String,System.Reflection.BindingFlags)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2fb2f-513">A <see cref="T:System.Reflection.PropertyInfo" /> obiekt reprezentujący właściwość, która spełnia określonych wymagań, jeśli je znaleziono; w przeciwnym razie <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-513">A <see cref="T:System.Reflection.PropertyInfo" /> object representing the property that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-514">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-514">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-515"><xref:System.Type.GetProperty%2A?displayProperty=nameWithType> Metoda szuka dla określonej właściwości przy użyciu z określonymi ograniczeniami wiązania.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-515">The <xref:System.Type.GetProperty%2A?displayProperty=nameWithType> method searches for the specified property, using the specified binding constraints.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name, Type returnType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name, class System.Type returnType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetProperty(System.String,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperty (name As String, returnType As Type) As PropertyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::PropertyInfo ^ GetProperty(System::String ^ name, Type ^ returnType);" />
      <MemberSignature Language="F#" Value="abstract member GetProperty : string * Type -&gt; System.Reflection.PropertyInfo" Usage="_Type.GetProperty (name, returnType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="2fb2f-516">
            <see cref="T:System.String" /> Zawierającą nazwę publicznej właściwości do pobrania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-516">The <see cref="T:System.String" /> containing the name of the public property to get.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="2fb2f-517">Zwracany typ właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-517">The return type of the property.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2fb2f-518">Udostępnia niezależny od wersji dostęp do obiektów COM <see cref="M:System.Type.GetProperty(System.String,System.Type)" /> metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-518">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetProperty(System.String,System.Type)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2fb2f-519">A <see cref="T:System.Reflection.PropertyInfo" /> obiekt reprezentujący właściwość publiczna o określonej nazwie, jeśli je znaleziono; w przeciwnym razie <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-519">A <see cref="T:System.Reflection.PropertyInfo" /> object representing the public property with the specified name, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-520">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-520">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-521"><xref:System.Type.GetProperty%2A?displayProperty=nameWithType> Metody wyszukuje właściwości publicznej o określoną nazwę i typ zwracany.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-521">The <xref:System.Type.GetProperty%2A?displayProperty=nameWithType> method searches for the public property with the specified name and return type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name, Type[] types);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name, class System.Type[] types) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetProperty(System.String,System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperty (name As String, types As Type()) As PropertyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::PropertyInfo ^ GetProperty(System::String ^ name, cli::array &lt;Type ^&gt; ^ types);" />
      <MemberSignature Language="F#" Value="abstract member GetProperty : string * Type[] -&gt; System.Reflection.PropertyInfo" Usage="_Type.GetProperty (name, types)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="types" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="2fb2f-522">
            <see cref="T:System.String" /> Zawierającą nazwę publicznej właściwości do pobrania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-522">The <see cref="T:System.String" /> containing the name of the public property to get.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="2fb2f-523">Tablica <see cref="T:System.Type" /> obiektów reprezentującą numer, kolejność i typy parametrów indeksowane właściwości, aby uzyskać.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-523">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.</span>
          </span>
          <span data-ttu-id="2fb2f-524">- lub - pustą tablicę typu <see cref="T:System.Type" /> (to znaczy wpisz typów [] = nowe Type[0]) można pobrać właściwości, która nie jest indeksowana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-524">-or-  An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2fb2f-525">Udostępnia niezależny od wersji dostęp do obiektów COM <see cref="M:System.Type.GetProperty(System.String,System.Type[])" /> metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-525">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetProperty(System.String,System.Type[])" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2fb2f-526">A <see cref="T:System.Reflection.PropertyInfo" /> obiekt reprezentujący właściwość publiczna, którego parametry są zgodne określone typy argumentów, jeśli je znaleziono; w przeciwnym razie <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-526">A <see cref="T:System.Reflection.PropertyInfo" /> object representing the public property whose parameters match the specified argument types, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-527">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-527">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-528"><xref:System.Type.GetProperty%2A?displayProperty=nameWithType> Metody wyszukiwania dla określonej właściwości publiczne, którego parametry są zgodne określone typy argumentów.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-528">The <xref:System.Type.GetProperty%2A?displayProperty=nameWithType> method searches for the specified public property whose parameters match the specified argument types..</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name, Type returnType, Type[] types);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name, class System.Type returnType, class System.Type[] types) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetProperty(System.String,System.Type,System.Type[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperty (name As String, returnType As Type, types As Type()) As PropertyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::PropertyInfo ^ GetProperty(System::String ^ name, Type ^ returnType, cli::array &lt;Type ^&gt; ^ types);" />
      <MemberSignature Language="F#" Value="abstract member GetProperty : string * Type * Type[] -&gt; System.Reflection.PropertyInfo" Usage="_Type.GetProperty (name, returnType, types)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="types" Type="System.Type[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="2fb2f-529">
            <see cref="T:System.String" /> Zawierającą nazwę publicznej właściwości do pobrania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-529">The <see cref="T:System.String" /> containing the name of the public property to get.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="2fb2f-530">Zwracany typ właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-530">The return type of the property.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="2fb2f-531">Tablica <see cref="T:System.Type" /> obiektów reprezentującą numer, kolejność i typy parametrów indeksowane właściwości, aby uzyskać.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-531">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.</span>
          </span>
          <span data-ttu-id="2fb2f-532">- lub - pustą tablicę typu <see cref="T:System.Type" /> (to znaczy wpisz typów [] = nowe Type[0]) można pobrać właściwości, która nie jest indeksowana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-532">-or-  An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2fb2f-533">Udostępnia niezależny od wersji dostęp do obiektów COM <see cref="M:System.Type.GetProperty(System.String,System.Type,System.Type[])" /> metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-533">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetProperty(System.String,System.Type,System.Type[])" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2fb2f-534">A <see cref="T:System.Reflection.PropertyInfo" /> obiekt reprezentujący właściwość publiczna, którego parametry są zgodne określone typy argumentów, jeśli je znaleziono; w przeciwnym razie <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-534">A <see cref="T:System.Reflection.PropertyInfo" /> object representing the public property whose parameters match the specified argument types, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-535">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-535">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-536"><xref:System.Type.GetProperty%2A?displayProperty=nameWithType> Metody wyszukiwania dla określonej właściwości publiczne, którego parametry są zgodne określone typy argumentów.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-536">The <xref:System.Type.GetProperty%2A?displayProperty=nameWithType> method searches for the specified public property whose parameters match the specified argument types.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name, Type returnType, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name, class System.Type returnType, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetProperty(System.String,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="VB.NET" Value="Public Function GetProperty (name As String, returnType As Type, types As Type(), modifiers As ParameterModifier()) As PropertyInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::PropertyInfo ^ GetProperty(System::String ^ name, Type ^ returnType, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetProperty : string * Type * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.PropertyInfo" Usage="_Type.GetProperty (name, returnType, types, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="2fb2f-537">
            <see cref="T:System.String" /> Zawierającą nazwę publicznej właściwości do pobrania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-537">The <see cref="T:System.String" /> containing the name of the public property to get.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="2fb2f-538">Zwracany typ właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-538">The return type of the property.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="2fb2f-539">Tablica <see cref="T:System.Type" /> obiektów reprezentującą numer, kolejność i typy parametrów indeksowane właściwości, aby uzyskać.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-539">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.</span>
          </span>
          <span data-ttu-id="2fb2f-540">- lub - pustą tablicę typu <see cref="T:System.Type" /> (to znaczy wpisz typów [] = nowe Type[0]) można pobrać właściwości, która nie jest indeksowana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-540">-or-  An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed.</span>
          </span>
        </param>
        <param name="modifiers">
          <span data-ttu-id="2fb2f-541">Tablica <see cref="T:System.Reflection.ParameterModifier" /> obiektów reprezentujących atrybuty skojarzone z odpowiadającego mu elementu w <c>typy</c> tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-541">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <c>types</c> array.</span>
          </span>
          <span data-ttu-id="2fb2f-542">Domyślny konsolidator nie przetwarza tego parametru.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-542">The default binder does not process this parameter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2fb2f-543">Udostępnia niezależny od wersji dostęp do obiektów COM <see cref="M:System.Type.GetProperty(System.String,System.Type,System.Type[],System.Reflection.ParameterModifier[])" /> metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-543">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetProperty(System.String,System.Type,System.Type[],System.Reflection.ParameterModifier[])" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2fb2f-544">A <see cref="T:System.Reflection.PropertyInfo" /> obiekt reprezentujący właściwość publiczna, który spełnia określonych wymagań, jeśli je znaleziono; w przeciwnym razie <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-544">A <see cref="T:System.Reflection.PropertyInfo" /> object representing the public property that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-545">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-545">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-546"><xref:System.Type.GetProperty%2A?displayProperty=nameWithType> Metody wyszukiwania dla określonej właściwości publiczne, którego parametry są zgodne modyfikatorów i określone typy argumentów.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-546">The <xref:System.Type.GetProperty%2A?displayProperty=nameWithType> method searches for the specified public property whose parameters match the specified argument types and modifiers.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetProperty">
      <MemberSignature Language="C#" Value="public System.Reflection.PropertyInfo GetProperty (string name, System.Reflection.BindingFlags bindingAttr, System.Reflection.Binder binder, Type returnType, Type[] types, System.Reflection.ParameterModifier[] modifiers);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Reflection.PropertyInfo GetProperty(string name, valuetype System.Reflection.BindingFlags bindingAttr, class System.Reflection.Binder binder, class System.Type returnType, class System.Type[] types, valuetype System.Reflection.ParameterModifier[] modifiers) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Reflection::PropertyInfo ^ GetProperty(System::String ^ name, System::Reflection::BindingFlags bindingAttr, System::Reflection::Binder ^ binder, Type ^ returnType, cli::array &lt;Type ^&gt; ^ types, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers);" />
      <MemberSignature Language="F#" Value="abstract member GetProperty : string * System.Reflection.BindingFlags * System.Reflection.Binder * Type * Type[] * System.Reflection.ParameterModifier[] -&gt; System.Reflection.PropertyInfo" Usage="_Type.GetProperty (name, bindingAttr, binder, returnType, types, modifiers)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.PropertyInfo</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="bindingAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="returnType" Type="System.Type" />
        <Parameter Name="types" Type="System.Type[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="2fb2f-547">
            <see cref="T:System.String" /> Zawierający nazwę właściwości do pobrania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-547">The <see cref="T:System.String" /> containing the name of the property to get.</span>
          </span>
        </param>
        <param name="bindingAttr">
          <span data-ttu-id="2fb2f-548">Maska bitowa składającej się z co najmniej jeden <see cref="T:System.Reflection.BindingFlags" /> określające, jak jest prowadzone wyszukiwanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-548">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="2fb2f-549">- lub - Zero, aby zwrócić <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-549">-or-  Zero, to return <see langword="null" />.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="2fb2f-550">A <see cref="T:System.Reflection.Binder" /> obiektu definiuje zbiór właściwości, który umożliwia powiązanie, które obejmują wybór przeciążonej metody koercja typy argumentów i wywołanie elementu członkowskiego przy użyciu odbicia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-550">A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span>
          </span>
          <span data-ttu-id="2fb2f-551">- lub - <see langword="null" />, aby użyć <see cref="P:System.Type.DefaultBinder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-551">-or-  <see langword="null" />, to use the <see cref="P:System.Type.DefaultBinder" />.</span>
          </span>
        </param>
        <param name="returnType">
          <span data-ttu-id="2fb2f-552">Zwracany typ właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-552">The return type of the property.</span>
          </span>
        </param>
        <param name="types">
          <span data-ttu-id="2fb2f-553">Tablica <see cref="T:System.Type" /> obiektów reprezentującą numer, kolejność i typy parametrów indeksowane właściwości, aby uzyskać.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-553">An array of <see cref="T:System.Type" /> objects representing the number, order, and type of the parameters for the indexed property to get.</span>
          </span>
          <span data-ttu-id="2fb2f-554">- lub - pustą tablicę typu <see cref="T:System.Type" /> (to znaczy wpisz typów [] = nowe Type[0]) można pobrać właściwości, która nie jest indeksowana.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-554">-or-  An empty array of the type <see cref="T:System.Type" /> (that is, Type[] types = new Type[0]) to get a property that is not indexed.</span>
          </span>
        </param>
        <param name="modifiers">
          <span data-ttu-id="2fb2f-555">Tablica <see cref="T:System.Reflection.ParameterModifier" /> obiektów reprezentujących atrybuty skojarzone z odpowiadającego mu elementu w <c>typy</c> tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-555">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <c>types</c> array.</span>
          </span>
          <span data-ttu-id="2fb2f-556">Domyślny konsolidator nie przetwarza tego parametru.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-556">The default binder does not process this parameter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2fb2f-557">Udostępnia niezależny od wersji dostęp do obiektów COM <see cref="M:System.Type.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" /> metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-557">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetProperty(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Type,System.Type[],System.Reflection.ParameterModifier[])" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2fb2f-558">A <see cref="T:System.Reflection.PropertyInfo" /> obiekt reprezentujący właściwość, która spełnia określonych wymagań, jeśli je znaleziono; w przeciwnym razie <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-558">A <see cref="T:System.Reflection.PropertyInfo" /> object representing the property that matches the specified requirements, if found; otherwise, <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-559">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-559">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-560"><xref:System.Type.GetProperty%2A?displayProperty=nameWithType> Metody wyszukiwania dla określonej właściwości, którego parametry są zgodne określone typy argumentów i Modyfikatory korzystanie z określonymi ograniczeniami wiązania.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-560">The <xref:System.Type.GetProperty%2A?displayProperty=nameWithType> method searches for the specified property whose parameters match the specified argument types and modifiers, using the specified binding constraints.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetType">
      <MemberSignature Language="C#" Value="public Type GetType ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Type GetType() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetType" />
      <MemberSignature Language="VB.NET" Value="Public Function GetType () As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Type ^ GetType();" />
      <MemberSignature Language="F#" Value="abstract member GetType : unit -&gt; Type" Usage="_Type.GetType " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2fb2f-561">Udostępnia niezależny od wersji dostęp do obiektów COM <see cref="M:System.Type.GetType" /> metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-561">Provides COM objects with version-independent access to the <see cref="M:System.Type.GetType" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2fb2f-562">Bieżący <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-562">The current <see cref="T:System.Type" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-563">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-563">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-564"><xref:System.Type.GetType%2A?displayProperty=nameWithType> Metoda pobiera bieżący <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-564">The <xref:System.Type.GetType%2A?displayProperty=nameWithType> method gets the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTypeInfo">
      <MemberSignature Language="C#" Value="public void GetTypeInfo (uint iTInfo, uint lcid, IntPtr ppTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetTypeInfo(unsigned int32 iTInfo, unsigned int32 lcid, native int ppTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetTypeInfo(System.UInt32,System.UInt32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub GetTypeInfo (iTInfo As UInteger, lcid As UInteger, ppTInfo As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void GetTypeInfo(System::UInt32 iTInfo, System::UInt32 lcid, IntPtr ppTInfo);" />
      <MemberSignature Language="F#" Value="abstract member GetTypeInfo : uint32 * uint32 * nativeint -&gt; unit" Usage="_Type.GetTypeInfo (iTInfo, lcid, ppTInfo)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="iTInfo" Type="System.UInt32" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="ppTInfo" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="iTInfo">
          <span data-ttu-id="2fb2f-565">Informacje o typie, który będzie zwracany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-565">The type information to return.</span>
          </span>
        </param>
        <param name="lcid">
          <span data-ttu-id="2fb2f-566">Identyfikator regionalny dla informacji o typie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-566">The locale identifier for the type information.</span>
          </span>
        </param>
        <param name="ppTInfo">
          <span data-ttu-id="2fb2f-567">Otrzymuje wskaźnik do obiektu informacji żądanego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-567">Receives a pointer to the requested type information object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2fb2f-568">Pobiera informacje o typie dla obiektu, których następnie można użyć do uzyskania informacji o typie interfejsu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-568">Retrieves the type information for an object, which can then be used to get the type information for an interface.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-569">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-569">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="2fb2f-570">Aby uzyskać więcej informacji na temat `IDispatch::GetTypeInfo`, zobacz bibliotece MSDN.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-570">For more information about `IDispatch::GetTypeInfo`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetTypeInfoCount">
      <MemberSignature Language="C#" Value="public void GetTypeInfoCount (out uint pcTInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void GetTypeInfoCount([out] unsigned int32&amp; pcTInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.GetTypeInfoCount(System.UInt32@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub GetTypeInfoCount (ByRef pcTInfo As UInteger)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void GetTypeInfoCount([Runtime::InteropServices::Out] System::UInt32 % pcTInfo);" />
      <MemberSignature Language="F#" Value="abstract member GetTypeInfoCount :  -&gt; unit" Usage="_Type.GetTypeInfoCount pcTInfo" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pcTInfo" Type="System.UInt32&amp;" RefType="out" />
      </Parameters>
      <Docs>
        <param name="pcTInfo">
          <span data-ttu-id="2fb2f-571">Wskazuje lokalizację, która odbiera informację o liczbie typów dostarczanych przez obiekt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-571">Points to a location that receives the number of type information interfaces provided by the object.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2fb2f-572">Pobiera informację o liczbie typów interfejsów, jakie zawiera obiekt (0 lub 1).</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-572">Retrieves the number of type information interfaces that an object provides (either 0 or 1).</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-573">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-573">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="2fb2f-574">Aby uzyskać więcej informacji na temat `IDispatch::GetTypeInfoCount`, zobacz bibliotece MSDN.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-574">For more information about `IDispatch::GetTypeInfoCount`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GUID">
      <MemberSignature Language="C#" Value="public Guid GUID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Guid GUID" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.GUID" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property GUID As Guid" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Guid GUID { Guid get(); };" />
      <MemberSignature Language="F#" Value="member this.GUID : Guid" Usage="System.Runtime.InteropServices._Type.GUID" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Guid</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2fb2f-575">Udostępnia obiekty COM niezależny od wersji dostęp do <see cref="P:System.Type.GUID" /> właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-575">Provides COM objects with version-independent access to the <see cref="P:System.Type.GUID" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2fb2f-576">Identyfikator GUID skojarzony z <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-576">The GUID associated with the <see cref="T:System.Type" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-577">Ta właściwość jest dostęp do zarządzanych klas z kodem niezarządzanym i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-577">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-578"><xref:System.Type.GUID%2A?displayProperty=nameWithType> Właściwości pobiera identyfikator GUID skojarzony z <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-578">The <xref:System.Type.GUID%2A?displayProperty=nameWithType> property gets the GUID associated with the <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="HasElementType">
      <MemberSignature Language="C#" Value="public bool HasElementType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasElementType" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.HasElementType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasElementType As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasElementType { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasElementType : bool" Usage="System.Runtime.InteropServices._Type.HasElementType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2fb2f-579">Udostępnia obiekty COM niezależny od wersji dostęp do <see cref="P:System.Type.HasElementType" /> właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-579">Provides COM objects with version-independent access to the <see cref="P:System.Type.HasElementType" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2fb2f-580">
            <see langword="true" /> Jeśli <see cref="T:System.Type" /> jest tablicą wskaźnik, lub jest przekazywana przez odwołanie; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-580">
              <see langword="true" /> if the <see cref="T:System.Type" /> is an array, a pointer, or is passed by reference; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-581">Ta właściwość jest dostęp do zarządzanych klas z kodem niezarządzanym i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-581">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-582"><xref:System.Type.HasElementType%2A?displayProperty=nameWithType> Właściwości</span><span class="sxs-lookup"><span data-stu-id="2fb2f-582">The <xref:System.Type.HasElementType%2A?displayProperty=nameWithType> property</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Invoke">
      <MemberSignature Language="C#" Value="public void Invoke (uint dispIdMember, ref Guid riid, uint lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Invoke(unsigned int32 dispIdMember, [in]valuetype System.Guid&amp; riid, unsigned int32 lcid, int16 wFlags, native int pDispParams, native int pVarResult, native int pExcepInfo, native int puArgErr) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.Invoke(System.UInt32,System.Guid@,System.UInt32,System.Int16,System.IntPtr,System.IntPtr,System.IntPtr,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Invoke (dispIdMember As UInteger, ByRef riid As Guid, lcid As UInteger, wFlags As Short, pDispParams As IntPtr, pVarResult As IntPtr, pExcepInfo As IntPtr, puArgErr As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invoke(System::UInt32 dispIdMember, Guid % riid, System::UInt32 lcid, short wFlags, IntPtr pDispParams, IntPtr pVarResult, IntPtr pExcepInfo, IntPtr puArgErr);" />
      <MemberSignature Language="F#" Value="abstract member Invoke : uint32 *  * uint32 * int16 * nativeint * nativeint * nativeint * nativeint -&gt; unit" Usage="_Type.Invoke (dispIdMember, riid, lcid, wFlags, pDispParams, pVarResult, pExcepInfo, puArgErr)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dispIdMember" Type="System.UInt32" />
        <Parameter Name="riid" Type="System.Guid&amp;" RefType="ref" />
        <Parameter Name="lcid" Type="System.UInt32" />
        <Parameter Name="wFlags" Type="System.Int16" />
        <Parameter Name="pDispParams" Type="System.IntPtr" />
        <Parameter Name="pVarResult" Type="System.IntPtr" />
        <Parameter Name="pExcepInfo" Type="System.IntPtr" />
        <Parameter Name="puArgErr" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="dispIdMember">
          <span data-ttu-id="2fb2f-583">Określa element członkowski.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-583">Identifies the member.</span>
          </span>
        </param>
        <param name="riid">
          <span data-ttu-id="2fb2f-584">Zarezerwowane do użytku w przyszłości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-584">Reserved for future use.</span>
          </span>
          <span data-ttu-id="2fb2f-585">Musi być wartością IID_NULL.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-585">Must be IID_NULL.</span>
          </span>
        </param>
        <param name="lcid">
          <span data-ttu-id="2fb2f-586">Ustawienia regionalne kontekstu, w którym można interpretować argumenty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-586">The locale context in which to interpret arguments.</span>
          </span>
        </param>
        <param name="wFlags">
          <span data-ttu-id="2fb2f-587">Flagi opisujące kontekst wywołania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-587">Flags describing the context of the call.</span>
          </span>
        </param>
        <param name="pDispParams">
          <span data-ttu-id="2fb2f-588">Wskaźnik do struktury zawiera tablicę argumentów, tablicę identyfikatorów DISPID argumentu dla nazwanych argumentów i zlicza liczbę elementów w tablicach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-588">Pointer to a structure containing an array of arguments, an array of argument DISPIDs for named arguments, and counts for the number of elements in the arrays.</span>
          </span>
        </param>
        <param name="pVarResult">
          <span data-ttu-id="2fb2f-589">Wskaźnik miejsca, gdzie ma być przechowywany wynik.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-589">Pointer to the location where the result is to be stored.</span>
          </span>
        </param>
        <param name="pExcepInfo">
          <span data-ttu-id="2fb2f-590">Wskaźnik do struktury, która zawiera informacje o wyjątku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-590">Pointer to a structure that contains exception information.</span>
          </span>
        </param>
        <param name="puArgErr">
          <span data-ttu-id="2fb2f-591">Indeks pierwszego argumentu, który zawiera błąd.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-591">The index of the first argument that has an error.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2fb2f-592">Umożliwia dostęp do właściwości i metod udostępnianych przez obiekt.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-592">Provides access to properties and methods exposed by an object.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-593">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-593">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span> <span data-ttu-id="2fb2f-594">Aby uzyskać więcej informacji na temat `IDispatch::Invoke`, zobacz bibliotece MSDN.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-594">For more information about `IDispatch::Invoke`, see the MSDN Library.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="InvokeMember">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="2fb2f-595">Udostępnia niezależny od wersji dostęp do obiektów COM <see cref="Overload:System.Type.InvokeMember" /> metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-595">Provides COM objects with version-independent access to the <see cref="Overload:System.Type.InvokeMember" /> method.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-596">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-596">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-597"><xref:System.Type.InvokeMember%2A?displayProperty=nameWithType> Metoda wywołuje określonym elemencie członkowskim bieżącej <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-597">The <xref:System.Type.InvokeMember%2A?displayProperty=nameWithType> method invokes a specific member of the current <xref:System.Type>.</span></span>  
  
 <span data-ttu-id="2fb2f-598">.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-598">.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="InvokeMember">
      <MemberSignature Language="C#" Value="public object InvokeMember (string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object InvokeMember(string name, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object target, object[] args) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ InvokeMember(System::String ^ name, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder ^ binder, System::Object ^ target, cli::array &lt;System::Object ^&gt; ^ args);" />
      <MemberSignature Language="F#" Value="abstract member InvokeMember : string * System.Reflection.BindingFlags * System.Reflection.Binder * obj * obj[] -&gt; obj" Usage="_Type.InvokeMember (name, invokeAttr, binder, target, args)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="invokeAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="2fb2f-599">
            <see cref="T:System.String" /> Zawierające nazwę konstruktora, metoda, właściwość lub członek pola do wywołania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-599">The <see cref="T:System.String" /> containing the name of the constructor, method, property, or field member to invoke.</span>
          </span>
          <span data-ttu-id="2fb2f-600">- lub - ciąg pusty ("") do wywołania domyślny element członkowski.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-600">-or-  An empty string ("") to invoke the default member.</span>
          </span>
          <span data-ttu-id="2fb2f-601">- lub - IDispatch dla członków, ciąg reprezentujący identyfikator DispID, na przykład "[DispID = 3]".</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-601">-or-  For IDispatch members, a string representing the DispID, for example "[DispID=3]".</span>
          </span>
        </param>
        <param name="invokeAttr">
          <span data-ttu-id="2fb2f-602">Maska bitowa składającej się z co najmniej jeden <see cref="T:System.Reflection.BindingFlags" /> określające, jak jest prowadzone wyszukiwanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-602">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="2fb2f-603">Dostęp może być jednym z <see langword="BindingFlags" /> takich jak <see langword="Public" />, <see langword="NonPublic" />, <see langword="Private" />, <see langword="InvokeMethod" />, <see langword="GetField" />i tak dalej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-603">The access can be one of the <see langword="BindingFlags" /> such as <see langword="Public" />, <see langword="NonPublic" />, <see langword="Private" />, <see langword="InvokeMethod" />, <see langword="GetField" />, and so on.</span>
          </span>
          <span data-ttu-id="2fb2f-604">Typ wyszukiwania nie muszą być określane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-604">The type of lookup need not be specified.</span>
          </span>
          <span data-ttu-id="2fb2f-605">W przypadku pominięcia typ wyszukiwania <see langword="BindingFlags.Public" />  |  <see langword="BindingFlags.Instance" /> będą stosowane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-605">If the type of lookup is omitted, <see langword="BindingFlags.Public" /> | <see langword="BindingFlags.Instance" /> will apply.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="2fb2f-606">A <see cref="T:System.Reflection.Binder" /> obiektu definiuje zbiór właściwości, który umożliwia powiązanie, które obejmują wybór przeciążonej metody koercja typy argumentów i wywołanie elementu członkowskiego przy użyciu odbicia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-606">A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span>
          </span>
          <span data-ttu-id="2fb2f-607">- lub - <see langword="null" />, aby użyć <see cref="P:System.Type.DefaultBinder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-607">-or-  <see langword="null" />, to use the <see cref="P:System.Type.DefaultBinder" />.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="2fb2f-608">
            <see cref="T:System.Object" /> Do wywołania określonego elementu członkowskiego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-608">The <see cref="T:System.Object" /> on which to invoke the specified member.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="2fb2f-609">Tablica zawierająca argumenty do przekazania do elementu członkowskiego do wywołania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-609">An array containing the arguments to pass to the member to invoke.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2fb2f-610">Udostępnia niezależny od wersji dostęp do obiektów COM <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" /> metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-610">Provides COM objects with version-independent access to the <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[])" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2fb2f-611">
            <see cref="T:System.Object" /> Reprezentujący wartość zwracaną wywołany element członkowski.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-611">An <see cref="T:System.Object" /> representing the return value of the invoked member.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-612">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-612">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-613"><xref:System.Type.InvokeMember%2A?displayProperty=nameWithType> Metoda wywołuje określonego elementu członkowskiego przy użyciu określonego powiązania ograniczenia i dopasowywanie określona lista argumentów.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-613">The <xref:System.Type.InvokeMember%2A?displayProperty=nameWithType> method invokes the specified member, using the specified binding constraints and matching the specified argument list.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeMember">
      <MemberSignature Language="C#" Value="public object InvokeMember (string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args, System.Globalization.CultureInfo culture);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object InvokeMember(string name, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object target, object[] args, class System.Globalization.CultureInfo culture) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Globalization.CultureInfo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ InvokeMember(System::String ^ name, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder ^ binder, System::Object ^ target, cli::array &lt;System::Object ^&gt; ^ args, System::Globalization::CultureInfo ^ culture);" />
      <MemberSignature Language="F#" Value="abstract member InvokeMember : string * System.Reflection.BindingFlags * System.Reflection.Binder * obj * obj[] * System.Globalization.CultureInfo -&gt; obj" Usage="_Type.InvokeMember (name, invokeAttr, binder, target, args, culture)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="invokeAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="2fb2f-614">
            <see cref="T:System.String" /> Zawierające nazwę konstruktora, metoda, właściwość lub członek pola do wywołania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-614">The <see cref="T:System.String" /> containing the name of the constructor, method, property, or field member to invoke.</span>
          </span>
          <span data-ttu-id="2fb2f-615">- lub - ciąg pusty ("") do wywołania domyślny element członkowski.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-615">-or-  An empty string ("") to invoke the default member.</span>
          </span>
          <span data-ttu-id="2fb2f-616">- lub - IDispatch dla członków, ciąg reprezentujący identyfikator DispID, na przykład "[DispID = 3]".</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-616">-or-  For IDispatch members, a string representing the DispID, for example "[DispID=3]".</span>
          </span>
        </param>
        <param name="invokeAttr">
          <span data-ttu-id="2fb2f-617">Maska bitowa składającej się z co najmniej jeden <see cref="T:System.Reflection.BindingFlags" /> określające, jak jest prowadzone wyszukiwanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-617">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="2fb2f-618">Dostęp może być jednym z <see langword="BindingFlags" /> takich jak <see langword="Public" />, <see langword="NonPublic" />, <see langword="Private" />, <see langword="InvokeMethod" />, <see langword="GetField" />i tak dalej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-618">The access can be one of the <see langword="BindingFlags" /> such as <see langword="Public" />, <see langword="NonPublic" />, <see langword="Private" />, <see langword="InvokeMethod" />, <see langword="GetField" />, and so on.</span>
          </span>
          <span data-ttu-id="2fb2f-619">Typ wyszukiwania nie muszą być określane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-619">The type of lookup need not be specified.</span>
          </span>
          <span data-ttu-id="2fb2f-620">W przypadku pominięcia typ wyszukiwania <see langword="BindingFlags.Public" />  |  <see langword="BindingFlags.Instance" /> będą stosowane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-620">If the type of lookup is omitted, <see langword="BindingFlags.Public" /> | <see langword="BindingFlags.Instance" /> will apply.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="2fb2f-621">A <see cref="T:System.Reflection.Binder" /> obiektu definiuje zbiór właściwości, który umożliwia powiązanie, które obejmują wybór przeciążonej metody koercja typy argumentów i wywołanie elementu członkowskiego przy użyciu odbicia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-621">A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span>
          </span>
          <span data-ttu-id="2fb2f-622">- lub - <see langword="null" />, aby użyć <see cref="P:System.Type.DefaultBinder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-622">-or-  <see langword="null" />, to use the <see cref="P:System.Type.DefaultBinder" />.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="2fb2f-623">
            <see cref="T:System.Object" /> Do wywołania określonego elementu członkowskiego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-623">The <see cref="T:System.Object" /> on which to invoke the specified member.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="2fb2f-624">Tablica zawierająca argumenty do przekazania do elementu członkowskiego do wywołania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-624">An array containing the arguments to pass to the member to invoke.</span>
          </span>
        </param>
        <param name="culture">
          <span data-ttu-id="2fb2f-625">
            <see cref="T:System.Globalization.CultureInfo" /> Obiekt reprezentujący ustawień regionalnych globalizacji do użycia, które mogą być konieczne w przypadku konwersji specyficzne dla ustawień regionalnych, takie jak konwertowanie liczbowych ciągu na wartość o podwójnej precyzji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-625">The <see cref="T:System.Globalization.CultureInfo" /> object representing the globalization locale to use, which may be necessary for locale-specific conversions, such as converting a numeric String to a Double.</span>
          </span>
          <span data-ttu-id="2fb2f-626">- lub - <see langword="null" /> do użycia bieżącego wątku <see cref="T:System.Globalization.CultureInfo" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-626">-or-  <see langword="null" /> to use the current thread's <see cref="T:System.Globalization.CultureInfo" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2fb2f-627">Udostępnia niezależny od wersji dostęp do obiektów COM <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Globalization.CultureInfo)" /> metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-627">Provides COM objects with version-independent access to the <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Globalization.CultureInfo)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2fb2f-628">
            <see cref="T:System.Object" /> Reprezentujący wartość zwracaną wywołany element członkowski.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-628">An <see cref="T:System.Object" /> representing the return value of the invoked member.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-629">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-629">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-630"><xref:System.Type.InvokeMember%2A?displayProperty=nameWithType> Metoda wywołuje określonego elementu członkowskiego przy użyciu określonego powiązania ograniczenia i dopasowywanie określona lista argumentów i kultury.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-630">The <xref:System.Type.InvokeMember%2A?displayProperty=nameWithType> method invokes the specified member, using the specified binding constraints and matching the specified argument list and culture.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InvokeMember">
      <MemberSignature Language="C#" Value="public object InvokeMember (string name, System.Reflection.BindingFlags invokeAttr, System.Reflection.Binder binder, object target, object[] args, System.Reflection.ParameterModifier[] modifiers, System.Globalization.CultureInfo culture, string[] namedParameters);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object InvokeMember(string name, valuetype System.Reflection.BindingFlags invokeAttr, class System.Reflection.Binder binder, object target, object[] args, valuetype System.Reflection.ParameterModifier[] modifiers, class System.Globalization.CultureInfo culture, string[] namedParameters) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ InvokeMember(System::String ^ name, System::Reflection::BindingFlags invokeAttr, System::Reflection::Binder ^ binder, System::Object ^ target, cli::array &lt;System::Object ^&gt; ^ args, cli::array &lt;System::Reflection::ParameterModifier&gt; ^ modifiers, System::Globalization::CultureInfo ^ culture, cli::array &lt;System::String ^&gt; ^ namedParameters);" />
      <MemberSignature Language="F#" Value="abstract member InvokeMember : string * System.Reflection.BindingFlags * System.Reflection.Binder * obj * obj[] * System.Reflection.ParameterModifier[] * System.Globalization.CultureInfo * string[] -&gt; obj" Usage="_Type.InvokeMember (name, invokeAttr, binder, target, args, modifiers, culture, namedParameters)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="name" Type="System.String" />
        <Parameter Name="invokeAttr" Type="System.Reflection.BindingFlags" />
        <Parameter Name="binder" Type="System.Reflection.Binder" />
        <Parameter Name="target" Type="System.Object" />
        <Parameter Name="args" Type="System.Object[]" />
        <Parameter Name="modifiers" Type="System.Reflection.ParameterModifier[]" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="namedParameters" Type="System.String[]" />
      </Parameters>
      <Docs>
        <param name="name">
          <span data-ttu-id="2fb2f-631">
            <see cref="T:System.String" /> Zawierające nazwę konstruktora, metoda, właściwość lub członek pola do wywołania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-631">The <see cref="T:System.String" /> containing the name of the constructor, method, property, or field member to invoke.</span>
          </span>
          <span data-ttu-id="2fb2f-632">- lub - ciąg pusty ("") do wywołania domyślny element członkowski.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-632">-or-  An empty string ("") to invoke the default member.</span>
          </span>
          <span data-ttu-id="2fb2f-633">- lub - IDispatch dla członków, ciąg reprezentujący identyfikator DispID, na przykład "[DispID = 3]".</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-633">-or-  For IDispatch members, a string representing the DispID, for example "[DispID=3]".</span>
          </span>
        </param>
        <param name="invokeAttr">
          <span data-ttu-id="2fb2f-634">Maska bitowa składającej się z co najmniej jeden <see cref="T:System.Reflection.BindingFlags" /> określające, jak jest prowadzone wyszukiwanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-634">A bitmask comprised of one or more <see cref="T:System.Reflection.BindingFlags" /> that specify how the search is conducted.</span>
          </span>
          <span data-ttu-id="2fb2f-635">Dostęp może być jednym z <see langword="BindingFlags" /> takich jak <see langword="Public" />, <see langword="NonPublic" />, <see langword="Private" />, <see langword="InvokeMethod" />, <see langword="GetField" />i tak dalej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-635">The access can be one of the <see langword="BindingFlags" /> such as <see langword="Public" />, <see langword="NonPublic" />, <see langword="Private" />, <see langword="InvokeMethod" />, <see langword="GetField" />, and so on.</span>
          </span>
          <span data-ttu-id="2fb2f-636">Typ wyszukiwania nie muszą być określane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-636">The type of lookup need not be specified.</span>
          </span>
          <span data-ttu-id="2fb2f-637">W przypadku pominięcia typ wyszukiwania <see langword="BindingFlags.Public" />  |  <see langword="BindingFlags.Instance" /> będą stosowane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-637">If the type of lookup is omitted, <see langword="BindingFlags.Public" /> | <see langword="BindingFlags.Instance" /> will apply.</span>
          </span>
        </param>
        <param name="binder">
          <span data-ttu-id="2fb2f-638">A <see cref="T:System.Reflection.Binder" /> obiektu definiuje zbiór właściwości, który umożliwia powiązanie, które obejmują wybór przeciążonej metody koercja typy argumentów i wywołanie elementu członkowskiego przy użyciu odbicia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-638">A <see cref="T:System.Reflection.Binder" /> object that defines a set of properties and enables binding, which can involve selection of an overloaded method, coercion of argument types, and invocation of a member through reflection.</span>
          </span>
          <span data-ttu-id="2fb2f-639">- lub - <see langword="null" />, aby użyć <see cref="P:System.Type.DefaultBinder" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-639">-or-  <see langword="null" />, to use the <see cref="P:System.Type.DefaultBinder" />.</span>
          </span>
        </param>
        <param name="target">
          <span data-ttu-id="2fb2f-640">
            <see cref="T:System.Object" /> Do wywołania określonego elementu członkowskiego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-640">The <see cref="T:System.Object" /> on which to invoke the specified member.</span>
          </span>
        </param>
        <param name="args">
          <span data-ttu-id="2fb2f-641">Tablica zawierająca argumenty do przekazania do elementu członkowskiego do wywołania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-641">An array containing the arguments to pass to the member to invoke.</span>
          </span>
        </param>
        <param name="modifiers">
          <span data-ttu-id="2fb2f-642">Tablica <see cref="T:System.Reflection.ParameterModifier" /> obiektów reprezentujących atrybuty skojarzone z odpowiadającego mu elementu w <c>argumentów</c> tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-642">An array of <see cref="T:System.Reflection.ParameterModifier" /> objects representing the attributes associated with the corresponding element in the <c>args</c> array.</span>
          </span>
          <span data-ttu-id="2fb2f-643">Parametr skojarzonych z nimi atrybutów są przechowywane w podpisie elementu członkowskiego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-643">A parameter's associated attributes are stored in the member's signature.</span>
          </span>
          <span data-ttu-id="2fb2f-644">Domyślny konsolidator nie przetwarza tego parametru.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-644">The default binder does not process this parameter.</span>
          </span>
        </param>
        <param name="culture">
          <span data-ttu-id="2fb2f-645">
            <see cref="T:System.Globalization.CultureInfo" /> Obiekt reprezentujący ustawień regionalnych globalizacji do użycia, które mogą być konieczne w przypadku konwersji specyficzne dla ustawień regionalnych, takie jak konwertowanie liczbowych ciągu na wartość o podwójnej precyzji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-645">The <see cref="T:System.Globalization.CultureInfo" /> object representing the globalization locale to use, which may be necessary for locale-specific conversions, such as converting a numeric String to a Double.</span>
          </span>
          <span data-ttu-id="2fb2f-646">- lub - <see langword="null" /> do użycia bieżącego wątku <see cref="T:System.Globalization.CultureInfo" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-646">-or-  <see langword="null" /> to use the current thread's <see cref="T:System.Globalization.CultureInfo" />.</span>
          </span>
        </param>
        <param name="namedParameters">
          <span data-ttu-id="2fb2f-647">Tablica zawierająca nazwy parametrów, do której wartości w <c>argumentów</c> tablicy są przekazywane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-647">An array containing the names of the parameters to which the values in the <c>args</c> array are passed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2fb2f-648">Udostępnia niezależny od wersji dostęp do obiektów COM <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /> metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-648">Provides COM objects with version-independent access to the <see cref="M:System.Type.InvokeMember(System.String,System.Reflection.BindingFlags,System.Reflection.Binder,System.Object,System.Object[],System.Reflection.ParameterModifier[],System.Globalization.CultureInfo,System.String[])" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2fb2f-649">
            <see cref="T:System.Object" /> Reprezentujący wartość zwracaną wywołany element członkowski.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-649">An <see cref="T:System.Object" /> representing the return value of the invoked member.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-650">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-650">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-651"><xref:System.Type.InvokeMember%2A?displayProperty=nameWithType> Metoda wywołuje określonego elementu członkowskiego przy użyciu określonego powiązania ograniczenia i dopasowywanie określona lista argumentów, Modyfikatory i kultury.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-651">The <xref:System.Type.InvokeMember%2A?displayProperty=nameWithType> method invokes the specified member, using the specified binding constraints and matching the specified argument list, modifiers, and culture.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAbstract">
      <MemberSignature Language="C#" Value="public bool IsAbstract { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAbstract" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsAbstract" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAbstract As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAbstract { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAbstract : bool" Usage="System.Runtime.InteropServices._Type.IsAbstract" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2fb2f-652">Udostępnia obiekty COM niezależny od wersji dostęp do <see cref="P:System.Type.IsAbstract" /> właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-652">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsAbstract" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2fb2f-653">
            <see langword="true" /> Jeśli <see cref="T:System.Type" /> jest abstrakcyjny, a w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-653">
              <see langword="true" /> if the <see cref="T:System.Type" /> is abstract; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-654">Ta właściwość jest dostęp do zarządzanych klas z kodem niezarządzanym i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-654">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-655"><xref:System.Type.IsAbstract%2A?displayProperty=nameWithType> Właściwości pobiera wartość wskazującą czy <xref:System.Type> jest abstrakcyjny i musi zostać zastąpiona.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-655">The <xref:System.Type.IsAbstract%2A?displayProperty=nameWithType> property gets a value indicating whether the <xref:System.Type> is abstract and must be overridden.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAnsiClass">
      <MemberSignature Language="C#" Value="public bool IsAnsiClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAnsiClass" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsAnsiClass" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAnsiClass As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAnsiClass { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAnsiClass : bool" Usage="System.Runtime.InteropServices._Type.IsAnsiClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2fb2f-656">Udostępnia obiekty COM niezależny od wersji dostęp do <see cref="P:System.Type.IsAnsiClass" /> właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-656">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsAnsiClass" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2fb2f-657">
            <see langword="true" /> ciąg formatowania atrybutu <see langword="AnsiClass" /> został wybrany do <see cref="T:System.Type" />; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-657">
              <see langword="true" /> if the string format attribute <see langword="AnsiClass" /> is selected for the <see cref="T:System.Type" />; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-658">Ta właściwość jest dostęp do zarządzanych klas z kodem niezarządzanym i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-658">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-659"><xref:System.Type.IsAnsiClass%2A?displayProperty=nameWithType> Właściwości pobiera wartość wskazującą czy ciąg formatu atrybutu `AnsiClass` został wybrany do <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-659">The <xref:System.Type.IsAnsiClass%2A?displayProperty=nameWithType> property gets a value indicating whether the string format attribute `AnsiClass` is selected for the <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsArray">
      <MemberSignature Language="C#" Value="public bool IsArray { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsArray" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsArray" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsArray As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsArray { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsArray : bool" Usage="System.Runtime.InteropServices._Type.IsArray" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2fb2f-660">Udostępnia obiekty COM niezależny od wersji dostęp do <see cref="P:System.Type.IsArray" /> właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-660">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsArray" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2fb2f-661">
            <see langword="true" /> Jeśli <see cref="T:System.Type" /> jest tablicą; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-661">
              <see langword="true" /> if the <see cref="T:System.Type" /> is an array; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-662">Ta właściwość jest dostęp do zarządzanych klas z kodem niezarządzanym i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-662">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-663"><xref:System.Type.IsArray%2A?displayProperty=nameWithType> Właściwości pobiera wartość wskazującą czy <xref:System.Type> jest tablicą.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-663">The <xref:System.Type.IsArray%2A?displayProperty=nameWithType> property gets a value indicating whether the <xref:System.Type> is an array.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAssignableFrom">
      <MemberSignature Language="C#" Value="public bool IsAssignableFrom (Type c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsAssignableFrom(class System.Type c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.IsAssignableFrom(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsAssignableFrom (c As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsAssignableFrom(Type ^ c);" />
      <MemberSignature Language="F#" Value="abstract member IsAssignableFrom : Type -&gt; bool" Usage="_Type.IsAssignableFrom c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="c">
          <span data-ttu-id="2fb2f-664">
            <see cref="T:System.Type" /> Do porównania z bieżącym <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-664">The <see cref="T:System.Type" /> to compare with the current <see cref="T:System.Type" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2fb2f-665">Udostępnia niezależny od wersji dostęp do obiektów COM <see cref="M:System.Type.IsAssignableFrom(System.Type)" /> metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-665">Provides COM objects with version-independent access to the <see cref="M:System.Type.IsAssignableFrom(System.Type)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2fb2f-666">
            <see langword="true" /> Jeśli <paramref name="c" /> i obecnie <see cref="T:System.Type" /> reprezentują ten sam typ, lub, jeśli bieżący <see cref="T:System.Type" /> znajduje się w hierarchii dziedziczenia <paramref name="c" />, lub, jeśli bieżący <see cref="T:System.Type" /> jest interfejsem który <paramref name="c" /> implementuje, lub, jeśli <paramref name="c" />jest parametr typu ogólnego i obecnie <see cref="T:System.Type" /> reprezentuje jeden z warunków ograniczających <paramref name="c" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-666">
              <see langword="true" /> if <paramref name="c" /> and the current <see cref="T:System.Type" /> represent the same type, or if the current <see cref="T:System.Type" /> is in the inheritance hierarchy of <paramref name="c" />, or if the current <see cref="T:System.Type" /> is an interface that <paramref name="c" /> implements, or if <paramref name="c" /> is a generic type parameter and the current <see cref="T:System.Type" /> represents one of the constraints of <paramref name="c" />.</span>
          </span>
          <span data-ttu-id="2fb2f-667">
            <see langword="false" /> Jeśli żaden z tych warunków nie jest wielkość liter lub <paramref name="c" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-667">
              <see langword="false" /> if none of these conditions are the case, or if <paramref name="c" /> is <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-668">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-668">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAutoClass">
      <MemberSignature Language="C#" Value="public bool IsAutoClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAutoClass" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsAutoClass" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAutoClass As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAutoClass { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAutoClass : bool" Usage="System.Runtime.InteropServices._Type.IsAutoClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2fb2f-669">Udostępnia obiekty COM niezależny od wersji dostęp do <see cref="P:System.Type.IsAutoClass" /> właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-669">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsAutoClass" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2fb2f-670">
            <see langword="true" /> ciąg formatowania atrybutu <see langword="AutoClass" /> został wybrany do <see cref="T:System.Type" />; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-670">
              <see langword="true" /> if the string format attribute <see langword="AutoClass" /> is selected for the <see cref="T:System.Type" />; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-671">Ta właściwość jest dostęp do zarządzanych klas z kodem niezarządzanym i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-671">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-672"><xref:System.Type.IsAutoClass%2A?displayProperty=nameWithType> Właściwości pobiera wartość wskazującą czy ciąg formatu atrybutu `AutoClass` został wybrany do <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-672">The <xref:System.Type.IsAutoClass%2A?displayProperty=nameWithType> property gets a value indicating whether the string format attribute `AutoClass` is selected for the <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsAutoLayout">
      <MemberSignature Language="C#" Value="public bool IsAutoLayout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsAutoLayout" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsAutoLayout" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsAutoLayout As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsAutoLayout { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsAutoLayout : bool" Usage="System.Runtime.InteropServices._Type.IsAutoLayout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2fb2f-673">Udostępnia obiekty COM niezależny od wersji dostęp do <see cref="P:System.Type.IsAutoLayout" /> właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-673">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsAutoLayout" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2fb2f-674">
            <see langword="true" /> Jeśli atrybut class układu <see langword="AutoLayout" /> został wybrany do <see cref="T:System.Type" />; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-674">
              <see langword="true" /> if the class layout attribute <see langword="AutoLayout" /> is selected for the <see cref="T:System.Type" />; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-675">Ta właściwość jest dostęp do zarządzanych klas z kodem niezarządzanym i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-675">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-676"><xref:System.Type.IsAutoLayout%2A?displayProperty=nameWithType> Właściwości pobiera wartość wskazującą czy atrybut układu klasy `AutoLayout` został wybrany do <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-676">The <xref:System.Type.IsAutoLayout%2A?displayProperty=nameWithType> property gets a value indicating whether the class layout attribute `AutoLayout` is selected for the <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsByRef">
      <MemberSignature Language="C#" Value="public bool IsByRef { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsByRef" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsByRef" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsByRef As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsByRef { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsByRef : bool" Usage="System.Runtime.InteropServices._Type.IsByRef" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2fb2f-677">Udostępnia obiekty COM niezależny od wersji dostęp do <see cref="P:System.Type.IsByRef" /> właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-677">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsByRef" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2fb2f-678">
            <see langword="true" /> Jeśli <see cref="T:System.Type" /> jest przekazywana przez odwołanie; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-678">
              <see langword="true" /> if the <see cref="T:System.Type" /> is passed by reference; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-679">Ta właściwość jest dostęp do zarządzanych klas z kodem niezarządzanym i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-679">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-680"><xref:System.Type.IsByRef%2A?displayProperty=nameWithType> Właściwości pobiera wartość wskazującą czy <xref:System.Type> jest przekazywana przez odwołanie.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-680">The <xref:System.Type.IsByRef%2A?displayProperty=nameWithType> property gets a value indicating whether the <xref:System.Type> is passed by reference.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsClass">
      <MemberSignature Language="C#" Value="public bool IsClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsClass" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsClass" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsClass As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsClass { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsClass : bool" Usage="System.Runtime.InteropServices._Type.IsClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2fb2f-681">Udostępnia obiekty COM niezależny od wersji dostęp do <see cref="P:System.Type.IsClass" /> właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-681">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsClass" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2fb2f-682">
            <see langword="true" /> Jeśli <see cref="T:System.Type" /> jest klasą; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-682">
              <see langword="true" /> if the <see cref="T:System.Type" /> is a class; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-683">Ta właściwość jest dostęp do zarządzanych klas z kodem niezarządzanym i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-683">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-684"><xref:System.Type.IsClass%2A?displayProperty=nameWithType> Właściwości pobiera wartość wskazującą czy <xref:System.Type> klasę; oznacza to, że nie jest typem wartości lub interfejsu.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-684">The <xref:System.Type.IsClass%2A?displayProperty=nameWithType> property gets a value indicating whether the <xref:System.Type> is a class; that is, not a value type or interface.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsCOMObject">
      <MemberSignature Language="C#" Value="public bool IsCOMObject { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsCOMObject" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsCOMObject" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsCOMObject As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsCOMObject { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsCOMObject : bool" Usage="System.Runtime.InteropServices._Type.IsCOMObject" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2fb2f-685">Udostępnia obiekty COM niezależny od wersji dostęp do <see cref="P:System.Type.IsCOMObject" /> właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-685">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsCOMObject" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2fb2f-686">
            <see langword="true" /> Jeśli <see cref="T:System.Type" /> obiektu modelu COM; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-686">
              <see langword="true" /> if the <see cref="T:System.Type" /> is a COM object; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-687">Ta właściwość jest dostęp do zarządzanych klas z kodem niezarządzanym i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-687">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-688"><xref:System.Type.IsCOMObject%2A?displayProperty=nameWithType> Właściwości pobiera wartość wskazującą czy <xref:System.Type> jest obiektem COM.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-688">The <xref:System.Type.IsCOMObject%2A?displayProperty=nameWithType> property gets a value indicating whether the <xref:System.Type> is a COM object.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsContextful">
      <MemberSignature Language="C#" Value="public bool IsContextful { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsContextful" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsContextful" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsContextful As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsContextful { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsContextful : bool" Usage="System.Runtime.InteropServices._Type.IsContextful" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2fb2f-689">Udostępnia obiekty COM niezależny od wersji dostęp do <see cref="P:System.Type.IsContextful" /> właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-689">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsContextful" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2fb2f-690">
            <see langword="true" /> Jeśli <see cref="T:System.Type" /> może być hostowana w kontekście, w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-690">
              <see langword="true" /> if the <see cref="T:System.Type" /> can be hosted in a context; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-691">Ta właściwość jest dostęp do zarządzanych klas z kodem niezarządzanym i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-691">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-692"><xref:System.Type.IsContextful%2A?displayProperty=nameWithType> Właściwości pobiera wartość wskazującą czy <xref:System.Type> może znajdować się w kontekście.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-692">The <xref:System.Type.IsContextful%2A?displayProperty=nameWithType> property gets a value indicating whether the <xref:System.Type> can be hosted in a context.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsDefined">
      <MemberSignature Language="C#" Value="public bool IsDefined (Type attributeType, bool inherit);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsDefined(class System.Type attributeType, bool inherit) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.IsDefined(System.Type,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsDefined (attributeType As Type, inherit As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsDefined(Type ^ attributeType, bool inherit);" />
      <MemberSignature Language="F#" Value="abstract member IsDefined : Type * bool -&gt; bool" Usage="_Type.IsDefined (attributeType, inherit)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="attributeType" Type="System.Type" />
        <Parameter Name="inherit" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="attributeType">
          <span data-ttu-id="2fb2f-693">
            <see langword="Type" /> Obiektów, dla których są stosowane atrybuty niestandardowe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-693">The <see langword="Type" /> object to which the custom attributes are applied.</span>
          </span>
        </param>
        <param name="inherit">
          <span data-ttu-id="2fb2f-694">Określa, czy przeszukać łańcuch dziedziczenia tego elementu członkowskiego w celu znalezienia atrybutów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-694">Specifies whether to search this member's inheritance chain to find the attributes.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2fb2f-695">Udostępnia niezależny od wersji dostęp do obiektów COM <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" /> metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-695">Provides COM objects with version-independent access to the <see cref="M:System.Reflection.MemberInfo.IsDefined(System.Type,System.Boolean)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2fb2f-696">
            <see langword="true" /> Jeśli jeden lub więcej wystąpienie <paramref name="attributeType" /> zastosowanych do tego elementu członkowskiego, a w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-696">
              <see langword="true" /> if one or more instance of <paramref name="attributeType" /> is applied to this member; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-697">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-697">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-698"><xref:System.Reflection.MemberInfo.IsDefined%2A?displayProperty=nameWithType> Metoda wskazuje czy jeden lub więcej wystąpienie `attributeType` jest stosowany do tego elementu członkowskiego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-698">The <xref:System.Reflection.MemberInfo.IsDefined%2A?displayProperty=nameWithType> method indicates whether one or more instance of `attributeType` is applied to this member.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsEnum">
      <MemberSignature Language="C#" Value="public bool IsEnum { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsEnum" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsEnum" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsEnum As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsEnum { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsEnum : bool" Usage="System.Runtime.InteropServices._Type.IsEnum" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2fb2f-699">Udostępnia obiekty COM niezależny od wersji dostęp do <see cref="P:System.Type.IsEnum" /> właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-699">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsEnum" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2fb2f-700">
            <see langword="true" /> Jeśli bieżący <see cref="T:System.Type" /> reprezentuje wyliczenia; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-700">
              <see langword="true" /> if the current <see cref="T:System.Type" /> represents an enumeration; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-701">Ta właściwość jest dostęp do zarządzanych klas z kodem niezarządzanym i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-701">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-702"><xref:System.Type.IsEnum%2A?displayProperty=nameWithType> Właściwości pobiera wartość wskazującą czy bieżące <xref:System.Type> reprezentuje wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-702">The <xref:System.Type.IsEnum%2A?displayProperty=nameWithType> property gets a value indicating whether the current <xref:System.Type> represents an enumeration.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsExplicitLayout">
      <MemberSignature Language="C#" Value="public bool IsExplicitLayout { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsExplicitLayout" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsExplicitLayout" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsExplicitLayout As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsExplicitLayout { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsExplicitLayout : bool" Usage="System.Runtime.InteropServices._Type.IsExplicitLayout" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2fb2f-703">Udostępnia obiekty COM niezależny od wersji dostęp do <see cref="P:System.Type.IsExplicitLayout" /> właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-703">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsExplicitLayout" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2fb2f-704">
            <see langword="true" /> Jeśli atrybut class układu <see langword="ExplicitLayout" /> został wybrany do <see cref="T:System.Type" />; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-704">
              <see langword="true" /> if the class layout attribute <see langword="ExplicitLayout" /> is selected for the <see cref="T:System.Type" />; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-705">Ta właściwość jest dostęp do zarządzanych klas z kodem niezarządzanym i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-705">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-706"><xref:System.Type.IsExplicitLayout%2A?displayProperty=nameWithType> Właściwości pobiera wartość wskazującą czy atrybut układu klasy `ExplicitLayout` został wybrany do <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-706">The <xref:System.Type.IsExplicitLayout%2A?displayProperty=nameWithType> property gets a value indicating whether the class layout attribute `ExplicitLayout` is selected for the <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsImport">
      <MemberSignature Language="C#" Value="public bool IsImport { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsImport" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsImport" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsImport As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsImport { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsImport : bool" Usage="System.Runtime.InteropServices._Type.IsImport" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2fb2f-707">Udostępnia obiekty COM niezależny od wersji dostęp do <see cref="P:System.Type.IsImport" /> właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-707">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsImport" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2fb2f-708">
            <see langword="true" /> Jeśli <see cref="T:System.Type" /> ma <see cref="T:System.Runtime.InteropServices.ComImportAttribute" />; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-708">
              <see langword="true" /> if the <see cref="T:System.Type" /> has <see cref="T:System.Runtime.InteropServices.ComImportAttribute" />; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-709">Ta właściwość jest dostęp do zarządzanych klas z kodem niezarządzanym i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-709">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-710"><xref:System.Type.IsImport%2A?displayProperty=nameWithType> Właściwości pobiera wartość wskazującą czy <xref:System.Type> ma <xref:System.Runtime.InteropServices.ComImportAttribute>, wskazując, że został zaimportowany z biblioteki typów COM.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-710">The <xref:System.Type.IsImport%2A?displayProperty=nameWithType> property gets a value indicating whether the <xref:System.Type> has <xref:System.Runtime.InteropServices.ComImportAttribute>, indicating that it was imported from a COM type library.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInstanceOfType">
      <MemberSignature Language="C#" Value="public bool IsInstanceOfType (object o);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsInstanceOfType(object o) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.IsInstanceOfType(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsInstanceOfType (o As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsInstanceOfType(System::Object ^ o);" />
      <MemberSignature Language="F#" Value="abstract member IsInstanceOfType : obj -&gt; bool" Usage="_Type.IsInstanceOfType o" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="o" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="o">
          <span data-ttu-id="2fb2f-711">Obiekt do porównania z bieżącym <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-711">The object to compare with the current <see cref="T:System.Type" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2fb2f-712">Udostępnia niezależny od wersji dostęp do obiektów COM <see cref="M:System.Type.IsInstanceOfType(System.Object)" /> metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-712">Provides COM objects with version-independent access to the <see cref="M:System.Type.IsInstanceOfType(System.Object)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2fb2f-713">
            <see langword="true" /> Jeśli bieżący <see cref="T:System.Type" /> znajduje się w hierarchii dziedziczenia obiektu reprezentowanego przez <paramref name="o" />, lub, jeśli bieżący <see cref="T:System.Type" /> jest interfejsem który <paramref name="o" /> obsługuje.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-713">
              <see langword="true" /> if the current <see cref="T:System.Type" /> is in the inheritance hierarchy of the object represented by <paramref name="o" />, or if the current <see cref="T:System.Type" /> is an interface that <paramref name="o" /> supports.</span>
          </span>
          <span data-ttu-id="2fb2f-714">
            <see langword="false" /> Jeśli oba te warunki tak jest, lub, jeśli <paramref name="o" /> jest <see langword="null" />, lub, jeśli bieżący <see cref="T:System.Type" /> jest otwartym typem ogólnym (to znaczy <see cref="P:System.Type.ContainsGenericParameters" /> zwraca <see langword="true" />).</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-714">
              <see langword="false" /> if neither of these conditions is the case, or if <paramref name="o" /> is <see langword="null" />, or if the current <see cref="T:System.Type" /> is an open generic type (that is, <see cref="P:System.Type.ContainsGenericParameters" /> returns <see langword="true" />).</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-715">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-715">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-716"><xref:System.Type.IsInstanceOfType%2A?displayProperty=nameWithType> Metoda określa, czy określony obiekt jest wystąpieniem bieżącego <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-716">The <xref:System.Type.IsInstanceOfType%2A?displayProperty=nameWithType> method determines whether the specified object is an instance of the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInterface">
      <MemberSignature Language="C#" Value="public bool IsInterface { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInterface" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsInterface" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsInterface As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsInterface { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsInterface : bool" Usage="System.Runtime.InteropServices._Type.IsInterface" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2fb2f-717">Udostępnia obiekty COM niezależny od wersji dostęp do <see cref="P:System.Type.IsInterface" /> właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-717">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsInterface" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2fb2f-718">
            <see langword="true" /> Jeśli <see cref="T:System.Type" /> jest interfejsem, a w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-718">
              <see langword="true" /> if the <see cref="T:System.Type" /> is an interface; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-719">Ta właściwość jest dostęp do zarządzanych klas z kodem niezarządzanym i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-719">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-720"><xref:System.Type.IsInterface%2A?displayProperty=nameWithType> Właściwości pobiera wartość wskazującą czy <xref:System.Type> interfejsu; nie jest klasą ani typem wartości.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-720">The <xref:System.Type.IsInterface%2A?displayProperty=nameWithType> property gets a value indicating whether the <xref:System.Type> is an interface; that is, not a class or a value type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLayoutSequential">
      <MemberSignature Language="C#" Value="public bool IsLayoutSequential { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsLayoutSequential" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsLayoutSequential" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsLayoutSequential As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsLayoutSequential { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsLayoutSequential : bool" Usage="System.Runtime.InteropServices._Type.IsLayoutSequential" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2fb2f-721">Udostępnia obiekty COM niezależny od wersji dostęp do <see cref="P:System.Type.IsLayoutSequential" /> właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-721">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsLayoutSequential" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2fb2f-722">
            <see langword="true" /> Jeśli atrybut class układu <see langword="SequentialLayout" /> został wybrany do <see cref="T:System.Type" />; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-722">
              <see langword="true" /> if the class layout attribute <see langword="SequentialLayout" /> is selected for the <see cref="T:System.Type" />; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-723">Ta właściwość jest dostęp do zarządzanych klas z kodem niezarządzanym i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-723">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-724"><xref:System.Type.IsLayoutSequential%2A?displayProperty=nameWithType> Właściwości pobiera wartość wskazującą czy atrybut układu klasy `SequentialLayout` został wybrany do <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-724">The <xref:System.Type.IsLayoutSequential%2A?displayProperty=nameWithType> property gets a value indicating whether the class layout attribute `SequentialLayout` is selected for the <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsMarshalByRef">
      <MemberSignature Language="C#" Value="public bool IsMarshalByRef { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsMarshalByRef" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsMarshalByRef" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsMarshalByRef As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsMarshalByRef { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsMarshalByRef : bool" Usage="System.Runtime.InteropServices._Type.IsMarshalByRef" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2fb2f-725">Udostępnia obiekty COM niezależny od wersji dostęp do <see cref="P:System.Type.IsMarshalByRef" /> właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-725">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsMarshalByRef" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2fb2f-726">
            <see langword="true" /> Jeśli <see cref="T:System.Type" /> organizowane przez odwołanie, a w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-726">
              <see langword="true" /> if the <see cref="T:System.Type" /> is marshaled by reference; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-727">Ta właściwość jest dostęp do zarządzanych klas z kodem niezarządzanym i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-727">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-728"><xref:System.Type.IsMarshalByRef%2A?displayProperty=nameWithType> Właściwość pobiera wartość wskazującą, czy typ jest przekazywane przez odwołanie.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-728">The <xref:System.Type.IsMarshalByRef%2A?displayProperty=nameWithType> property gets a value indicating whether the Type is marshaled by reference.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNestedAssembly">
      <MemberSignature Language="C#" Value="public bool IsNestedAssembly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNestedAssembly" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsNestedAssembly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNestedAssembly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNestedAssembly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNestedAssembly : bool" Usage="System.Runtime.InteropServices._Type.IsNestedAssembly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2fb2f-729">Udostępnia obiekty COM niezależny od wersji dostęp do <see cref="P:System.Type.IsNestedAssembly" /> właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-729">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsNestedAssembly" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2fb2f-730">
            <see langword="true" /> Jeśli <see cref="T:System.Type" /> zagnieżdżonych i widoczne tylko w obrębie własnego zestawu, a w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-730">
              <see langword="true" /> if the <see cref="T:System.Type" /> is nested and visible only within its own assembly; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-731">Ta właściwość jest dostęp do zarządzanych klas z kodem niezarządzanym i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-731">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-732"><xref:System.Type.IsNestedAssembly%2A?displayProperty=nameWithType> Właściwości pobiera wartość wskazującą czy <xref:System.Type> jest zagnieżdżony i są widoczne tylko w obrębie własnego zestawu.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-732">The <xref:System.Type.IsNestedAssembly%2A?displayProperty=nameWithType> property gets a value indicating whether the <xref:System.Type> is nested and visible only within its own assembly.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNestedFamANDAssem">
      <MemberSignature Language="C#" Value="public bool IsNestedFamANDAssem { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNestedFamANDAssem" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsNestedFamANDAssem" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNestedFamANDAssem As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNestedFamANDAssem { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNestedFamANDAssem : bool" Usage="System.Runtime.InteropServices._Type.IsNestedFamANDAssem" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2fb2f-733">Udostępnia obiekty COM niezależny od wersji dostęp do <see cref="P:System.Type.IsNestedFamANDAssem" /> właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-733">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsNestedFamANDAssem" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2fb2f-734">
            <see langword="true" /> Jeśli <see cref="T:System.Type" /> zagnieżdżonych i są widoczne tylko dla klas, które należą do jego własnej rodziny i jego własny zestaw a w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-734">
              <see langword="true" /> if the <see cref="T:System.Type" /> is nested and visible only to classes that belong to both its own family and its own assembly; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-735">Ta właściwość jest dostęp do zarządzanych klas z kodem niezarządzanym i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-735">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-736"><xref:System.Type.IsNestedFamANDAssem%2A?displayProperty=nameWithType> Właściwości pobiera wartość wskazującą czy <xref:System.Type> jest zagnieżdżone i są widoczne tylko dla klas, które należą do jego własnej rodziny i jego własny zestaw.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-736">The <xref:System.Type.IsNestedFamANDAssem%2A?displayProperty=nameWithType> property gets a value indicating whether the <xref:System.Type> is nested and visible only to classes that belong to both its own family and its own assembly.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNestedFamily">
      <MemberSignature Language="C#" Value="public bool IsNestedFamily { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNestedFamily" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsNestedFamily" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNestedFamily As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNestedFamily { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNestedFamily : bool" Usage="System.Runtime.InteropServices._Type.IsNestedFamily" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2fb2f-737">Udostępnia obiekty COM niezależny od wersji dostęp do <see cref="P:System.Type.IsNestedFamily" /> właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-737">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsNestedFamily" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2fb2f-738">
            <see langword="true" /> Jeśli <see cref="T:System.Type" /> zagnieżdżonych i widoczne tylko w obrębie własnej rodziny, a w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-738">
              <see langword="true" /> if the <see cref="T:System.Type" /> is nested and visible only within its own family; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-739">Ta właściwość jest dostęp do zarządzanych klas z kodem niezarządzanym i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-739">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-740"><xref:System.Type.IsNestedFamily%2A?displayProperty=nameWithType> Właściwości pobiera wartość wskazującą czy <xref:System.Type> jest zagnieżdżony i są widoczne tylko w obrębie własnej rodziny.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-740">The <xref:System.Type.IsNestedFamily%2A?displayProperty=nameWithType> property gets a value indicating whether the <xref:System.Type> is nested and visible only within its own family.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNestedFamORAssem">
      <MemberSignature Language="C#" Value="public bool IsNestedFamORAssem { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNestedFamORAssem" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsNestedFamORAssem" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNestedFamORAssem As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNestedFamORAssem { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNestedFamORAssem : bool" Usage="System.Runtime.InteropServices._Type.IsNestedFamORAssem" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2fb2f-741">Udostępnia obiekty COM niezależny od wersji dostęp do <see cref="P:System.Type.IsNestedFamORAssem" /> właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-741">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsNestedFamORAssem" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2fb2f-742">
            <see langword="true" /> Jeśli <see cref="T:System.Type" /> zagnieżdżonych i są widoczne tylko dla klas, które należą do jego własnej rodziny lub ich własnych zestawach a w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-742">
              <see langword="true" /> if the <see cref="T:System.Type" /> is nested and visible only to classes that belong to its own family or to its own assembly; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-743">Ta właściwość jest dostęp do zarządzanych klas z kodem niezarządzanym i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-743">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-744"><xref:System.Type.IsNestedFamORAssem%2A?displayProperty=nameWithType> Właściwości pobiera wartość wskazującą czy <xref:System.Type> jest zagnieżdżony i są widoczne tylko dla klas, które należą do jednej własnej rodziny lub ich własnych zestawach.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-744">The <xref:System.Type.IsNestedFamORAssem%2A?displayProperty=nameWithType> property gets a value indicating whether the <xref:System.Type> is nested and visible only to classes that belong to either its own family or to its own assembly.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNestedPrivate">
      <MemberSignature Language="C#" Value="public bool IsNestedPrivate { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNestedPrivate" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsNestedPrivate" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNestedPrivate As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNestedPrivate { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNestedPrivate : bool" Usage="System.Runtime.InteropServices._Type.IsNestedPrivate" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2fb2f-745">Udostępnia obiekty COM niezależny od wersji dostęp do <see cref="P:System.Type.IsNestedPrivate" /> właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-745">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsNestedPrivate" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2fb2f-746">
            <see langword="true" /> Jeśli <see cref="T:System.Type" /> jest zagnieżdżony i zadeklarowany prywatnej; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-746">
              <see langword="true" /> if the <see cref="T:System.Type" /> is nested and declared private; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-747">Ta właściwość jest dostęp do zarządzanych klas z kodem niezarządzanym i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-747">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-748"><xref:System.Type.IsNestedPrivate%2A?displayProperty=nameWithType> Właściwości pobiera wartość wskazującą czy <xref:System.Type> jest zagnieżdżony i zadeklarowana jako private.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-748">The <xref:System.Type.IsNestedPrivate%2A?displayProperty=nameWithType> property gets a value indicating whether the <xref:System.Type> is nested and declared private.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNestedPublic">
      <MemberSignature Language="C#" Value="public bool IsNestedPublic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNestedPublic" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsNestedPublic" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNestedPublic As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNestedPublic { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNestedPublic : bool" Usage="System.Runtime.InteropServices._Type.IsNestedPublic" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2fb2f-749">Udostępnia obiekty COM niezależny od wersji dostęp do <see cref="P:System.Type.IsNestedPublic" /> właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-749">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsNestedPublic" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2fb2f-750">
            <see langword="true" /> Jeśli klasa jest publiczny zagnieżdżony i zadeklarowane; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-750">
              <see langword="true" /> if the class is nested and declared public; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-751">Ta właściwość jest dostęp do zarządzanych klas z kodem niezarządzanym i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-751">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-752"><xref:System.Type.IsNestedPublic%2A?displayProperty=nameWithType> Właściwość pobiera wartość wskazującą, czy klasa jest zagnieżdżony i zadeklarowany jako publiczny.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-752">The <xref:System.Type.IsNestedPublic%2A?displayProperty=nameWithType> property gets a value indicating whether a class is nested and declared public.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsNotPublic">
      <MemberSignature Language="C#" Value="public bool IsNotPublic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsNotPublic" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsNotPublic" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsNotPublic As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsNotPublic { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsNotPublic : bool" Usage="System.Runtime.InteropServices._Type.IsNotPublic" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2fb2f-753">Udostępnia obiekty COM niezależny od wersji dostęp do <see cref="P:System.Type.IsNotPublic" /> właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-753">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsNotPublic" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2fb2f-754">
            <see langword="true" /> Jeśli lokacja najwyższego poziomu <see cref="T:System.Type" /> nie jest zadeklarowany jako publiczny; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-754">
              <see langword="true" /> if the top-level <see cref="T:System.Type" /> is not declared public; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-755">Ta właściwość jest dostęp do zarządzanych klas z kodem niezarządzanym i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-755">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-756"><xref:System.Type.IsNotPublic%2A?displayProperty=nameWithType> Właściwości pobiera wartość wskazującą czy najwyższego poziomu <xref:System.Type> nie jest zadeklarowany jako publiczny.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-756">The <xref:System.Type.IsNotPublic%2A?displayProperty=nameWithType> property gets a value indicating whether the top-level <xref:System.Type> is not declared public.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPointer">
      <MemberSignature Language="C#" Value="public bool IsPointer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPointer" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsPointer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPointer As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPointer { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsPointer : bool" Usage="System.Runtime.InteropServices._Type.IsPointer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2fb2f-757">Udostępnia obiekty COM niezależny od wersji dostęp do <see cref="P:System.Type.IsPointer" /> właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-757">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsPointer" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2fb2f-758">
            <see langword="true" /> Jeśli <see cref="T:System.Type" /> wskaźnik; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-758">
              <see langword="true" /> if the <see cref="T:System.Type" /> is a pointer; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-759">Ta właściwość jest dostęp do zarządzanych klas z kodem niezarządzanym i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-759">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-760"><xref:System.Type.IsPointer%2A?displayProperty=nameWithType> Właściwości pobiera wartość wskazującą czy <xref:System.Type> wskaźnik.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-760">The <xref:System.Type.IsPointer%2A?displayProperty=nameWithType> property gets a value indicating whether the <xref:System.Type> is a pointer.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPrimitive">
      <MemberSignature Language="C#" Value="public bool IsPrimitive { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPrimitive" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsPrimitive" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPrimitive As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPrimitive { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsPrimitive : bool" Usage="System.Runtime.InteropServices._Type.IsPrimitive" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2fb2f-761">Udostępnia obiekty COM niezależny od wersji dostęp do <see cref="P:System.Type.IsPrimitive" /> właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-761">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsPrimitive" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2fb2f-762">
            <see langword="true" /> Jeśli <see cref="T:System.Type" /> jest jednym z typów pierwotnych; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-762">
              <see langword="true" /> if the <see cref="T:System.Type" /> is one of the primitive types; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-763">Ta właściwość jest dostęp do zarządzanych klas z kodem niezarządzanym i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-763">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-764"><xref:System.Type.IsPrimitive%2A?displayProperty=nameWithType> Właściwości pobiera wartość wskazującą czy <xref:System.Type> jest jednym z typów pierwotnych.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-764">The <xref:System.Type.IsPrimitive%2A?displayProperty=nameWithType> property gets a value indicating whether the <xref:System.Type> is one of the primitive types.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsPublic">
      <MemberSignature Language="C#" Value="public bool IsPublic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsPublic" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsPublic" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsPublic As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsPublic { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsPublic : bool" Usage="System.Runtime.InteropServices._Type.IsPublic" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2fb2f-765">Udostępnia obiekty COM niezależny od wersji dostęp do <see cref="P:System.Type.IsPublic" /> właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-765">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsPublic" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2fb2f-766">
            <see langword="true" /> Jeśli lokacja najwyższego poziomu <see cref="T:System.Type" /> jest zadeklarowany jako publiczny; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-766">
              <see langword="true" /> if the top-level <see cref="T:System.Type" /> is declared public; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-767">Ta właściwość jest dostęp do zarządzanych klas z kodem niezarządzanym i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-767">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-768"><xref:System.Type.IsPublic%2A?displayProperty=nameWithType> Właściwości pobiera wartość wskazującą czy najwyższego poziomu <xref:System.Type> jest zadeklarowany jako publiczny.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-768">The <xref:System.Type.IsPublic%2A?displayProperty=nameWithType> property gets a value indicating whether the top-level <xref:System.Type> is declared public.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSealed">
      <MemberSignature Language="C#" Value="public bool IsSealed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSealed" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsSealed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSealed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSealed { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSealed : bool" Usage="System.Runtime.InteropServices._Type.IsSealed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2fb2f-769">Udostępnia obiekty COM niezależny od wersji dostęp do <see cref="P:System.Type.IsSealed" /> właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-769">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsSealed" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2fb2f-770">
            <see langword="true" /> Jeśli <see cref="T:System.Type" /> jest zadeklarowany jako sealed; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-770">
              <see langword="true" /> if the <see cref="T:System.Type" /> is declared sealed; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-771">Ta właściwość jest dostęp do zarządzanych klas z kodem niezarządzanym i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-771">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-772"><xref:System.Type.IsSealed%2A?displayProperty=nameWithType> Właściwości pobiera wartość wskazującą czy <xref:System.Type> jest zadeklarowany jako sealed.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-772">The <xref:System.Type.IsSealed%2A?displayProperty=nameWithType> property gets a value indicating whether the <xref:System.Type> is declared sealed.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSerializable">
      <MemberSignature Language="C#" Value="public bool IsSerializable { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSerializable" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsSerializable" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSerializable As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSerializable { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSerializable : bool" Usage="System.Runtime.InteropServices._Type.IsSerializable" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2fb2f-773">Udostępnia obiekty COM niezależny od wersji dostęp do <see cref="P:System.Type.IsSerializable" /> właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-773">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsSerializable" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2fb2f-774">
            <see langword="true" /> Jeśli <see cref="T:System.Type" /> jest możliwy do serializacji; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-774">
              <see langword="true" /> if the <see cref="T:System.Type" /> is serializable; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-775">Ta właściwość jest dostęp do zarządzanych klas z kodem niezarządzanym i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-775">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-776"><xref:System.Type.IsSerializable%2A?displayProperty=nameWithType> Właściwości pobiera wartość wskazującą czy <xref:System.Type> jest możliwy do serializacji.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-776">The <xref:System.Type.IsSerializable%2A?displayProperty=nameWithType> property gets a value indicating whether the <xref:System.Type> is serializable.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSpecialName">
      <MemberSignature Language="C#" Value="public bool IsSpecialName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsSpecialName" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsSpecialName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsSpecialName As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsSpecialName { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsSpecialName : bool" Usage="System.Runtime.InteropServices._Type.IsSpecialName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2fb2f-777">Udostępnia obiekty COM niezależny od wersji dostęp do <see cref="P:System.Type.IsSpecialName" /> właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-777">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsSpecialName" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2fb2f-778">
            <see langword="true" /> Jeśli <see cref="T:System.Type" /> ma nazwę, która wymaga specjalnej obsługi; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-778">
              <see langword="true" /> if the <see cref="T:System.Type" /> has a name that requires special handling; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-779">Ta właściwość jest dostęp do zarządzanych klas z kodem niezarządzanym i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-779">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-780"><xref:System.Type.IsSpecialName%2A?displayProperty=nameWithType> Właściwości pobiera wartość wskazującą czy <xref:System.Type> ma nazwę, która wymaga specjalnej obsługi.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-780">The <xref:System.Type.IsSpecialName%2A?displayProperty=nameWithType> property gets a value indicating whether the <xref:System.Type> has a name that requires special handling.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsSubclassOf">
      <MemberSignature Language="C#" Value="public bool IsSubclassOf (Type c);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool IsSubclassOf(class System.Type c) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.IsSubclassOf(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function IsSubclassOf (c As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsSubclassOf(Type ^ c);" />
      <MemberSignature Language="F#" Value="abstract member IsSubclassOf : Type -&gt; bool" Usage="_Type.IsSubclassOf c" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="c" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="c">
          <span data-ttu-id="2fb2f-781">
            <see cref="T:System.Type" /> Do porównania z bieżącym <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-781">The <see cref="T:System.Type" /> to compare with the current <see cref="T:System.Type" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="2fb2f-782">Udostępnia niezależny od wersji dostęp do obiektów COM <see cref="M:System.Type.IsSubclassOf(System.Type)" /> metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-782">Provides COM objects with version-independent access to the <see cref="M:System.Type.IsSubclassOf(System.Type)" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2fb2f-783">
            <see langword="true" /> Jeśli <see cref="T:System.Type" /> reprezentowany przez <paramref name="c" /> parametru i obecnie <see cref="T:System.Type" /> reprezentują klasy, a klasa reprezentowany przez bieżący <see cref="T:System.Type" /> pochodzi od klasy reprezentowany przez <paramref name="c" />; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-783">
              <see langword="true" /> if the <see cref="T:System.Type" /> represented by the <paramref name="c" /> parameter and the current <see cref="T:System.Type" /> represent classes, and the class represented by the current <see cref="T:System.Type" /> derives from the class represented by <paramref name="c" />; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="2fb2f-784">Ta metoda zwraca również wartość <see langword="false" /> Jeśli <paramref name="c" /> i obecnie <see cref="T:System.Type" /> reprezentują tej samej klasy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-784">This method also returns <see langword="false" /> if <paramref name="c" /> and the current <see cref="T:System.Type" /> represent the same class.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-785">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-785">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-786"><xref:System.Type.IsSubclassOf%2A?displayProperty=nameWithType> Metoda określa, czy klasa reprezentowany przez bieżący <xref:System.Type> pochodzi od klasy reprezentowany przez określony <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-786">The <xref:System.Type.IsSubclassOf%2A?displayProperty=nameWithType> method determines whether the class represented by the current <xref:System.Type> derives from the class represented by the specified <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsUnicodeClass">
      <MemberSignature Language="C#" Value="public bool IsUnicodeClass { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsUnicodeClass" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsUnicodeClass" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsUnicodeClass As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsUnicodeClass { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsUnicodeClass : bool" Usage="System.Runtime.InteropServices._Type.IsUnicodeClass" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2fb2f-787">Udostępnia obiekty COM niezależny od wersji dostęp do <see cref="P:System.Type.IsUnicodeClass" /> właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-787">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsUnicodeClass" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2fb2f-788">
            <see langword="true" /> ciąg formatowania atrybutu <see langword="UnicodeClass" /> został wybrany do <see cref="T:System.Type" />; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-788">
              <see langword="true" /> if the string format attribute <see langword="UnicodeClass" /> is selected for the <see cref="T:System.Type" />; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-789">Ta właściwość jest dostęp do zarządzanych klas z kodem niezarządzanym i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-789">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-790"><xref:System.Type.IsUnicodeClass%2A?displayProperty=nameWithType> Właściwości pobiera wartość wskazującą czy ciąg formatu atrybutu `UnicodeClass` został wybrany do <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-790">The <xref:System.Type.IsUnicodeClass%2A?displayProperty=nameWithType> property gets a value indicating whether the string format attribute `UnicodeClass` is selected for the <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsValueType">
      <MemberSignature Language="C#" Value="public bool IsValueType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsValueType" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.IsValueType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsValueType As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsValueType { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsValueType : bool" Usage="System.Runtime.InteropServices._Type.IsValueType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2fb2f-791">Udostępnia obiekty COM niezależny od wersji dostęp do <see cref="P:System.Type.IsValueType" /> właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-791">Provides COM objects with version-independent access to the <see cref="P:System.Type.IsValueType" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2fb2f-792">
            <see langword="true" /> Jeśli <see cref="T:System.Type" /> jest typem wartości; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-792">
              <see langword="true" /> if the <see cref="T:System.Type" /> is a value type; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-793">Ta właściwość jest dostęp do zarządzanych klas z kodem niezarządzanym i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-793">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-794"><xref:System.Type.IsValueType%2A?displayProperty=nameWithType> Właściwości pobiera wartość wskazującą czy <xref:System.Type> jest typem wartości.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-794">The <xref:System.Type.IsValueType%2A?displayProperty=nameWithType> property gets a value indicating whether the <xref:System.Type> is a value type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MemberType">
      <MemberSignature Language="C#" Value="public System.Reflection.MemberTypes MemberType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Reflection.MemberTypes MemberType" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.MemberType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MemberType As MemberTypes" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::MemberTypes MemberType { System::Reflection::MemberTypes get(); };" />
      <MemberSignature Language="F#" Value="member this.MemberType : System.Reflection.MemberTypes" Usage="System.Runtime.InteropServices._Type.MemberType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.MemberTypes</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2fb2f-795">Udostępnia obiekty COM niezależny od wersji dostęp do <see cref="P:System.Type.MemberType" /> właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-795">Provides COM objects with version-independent access to the <see cref="P:System.Type.MemberType" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2fb2f-796">A <see cref="T:System.Reflection.MemberTypes" /> wartość wskazującą, czy ten element członkowski jest typu lub typu zagnieżdżonego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-796">A <see cref="T:System.Reflection.MemberTypes" /> value indicating that this member is a type or a nested type.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-797">Ta właściwość jest dostęp do zarządzanych klas z kodem niezarządzanym i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-797">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-798"><xref:System.Type.MemberType%2A?displayProperty=nameWithType> Pobiera właściwość <xref:System.Reflection.MemberTypes> wartość wskazującą, czy ten element członkowski jest typu lub typu zagnieżdżonego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-798">The <xref:System.Type.MemberType%2A?displayProperty=nameWithType> property gets a <xref:System.Reflection.MemberTypes> value indicating that this member is a type or a nested type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Module">
      <MemberSignature Language="C#" Value="public System.Reflection.Module Module { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.Module Module" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.Module" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Module As Module" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::Module ^ Module { System::Reflection::Module ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Module : System.Reflection.Module" Usage="System.Runtime.InteropServices._Type.Module" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.Module</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2fb2f-799">Udostępnia obiekty COM niezależny od wersji dostęp do <see cref="P:System.Type.Module" /> właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-799">Provides COM objects with version-independent access to the <see cref="P:System.Type.Module" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2fb2f-800">Nazwa modułu, w którym bieżącego <see cref="T:System.Type" /> jest zdefiniowany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-800">The name of the module in which the current <see cref="T:System.Type" /> is defined.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-801">Ta właściwość jest dostęp do zarządzanych klas z kodem niezarządzanym i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-801">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-802"><xref:System.Type.Module%2A?displayProperty=nameWithType> Właściwości pobiera module (DLL), w którym bieżącego <xref:System.Type> jest zdefiniowany.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-802">The <xref:System.Type.Module%2A?displayProperty=nameWithType> property gets the module (the DLL) in which the current <xref:System.Type> is defined.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.Name" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Name : string" Usage="System.Runtime.InteropServices._Type.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2fb2f-803">Udostępnia obiekty COM niezależny od wersji dostęp do <see cref="P:System.Reflection.MemberInfo.Name" /> właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-803">Provides COM objects with version-independent access to the <see cref="P:System.Reflection.MemberInfo.Name" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2fb2f-804">Nazwa <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-804">The name of the <see cref="T:System.Type" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-805">Ta właściwość jest dostęp do zarządzanych klas z kodem niezarządzanym i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-805">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-806"><xref:System.Reflection.MemberInfo.Name%2A?displayProperty=nameWithType> Właściwości pobiera nazwę <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-806">The <xref:System.Reflection.MemberInfo.Name%2A?displayProperty=nameWithType> property gets the name of the <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Namespace">
      <MemberSignature Language="C#" Value="public string Namespace { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Namespace" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.Namespace" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Namespace As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Namespace { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Namespace : string" Usage="System.Runtime.InteropServices._Type.Namespace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2fb2f-807">Udostępnia obiekty COM niezależny od wersji dostęp do <see cref="P:System.Type.Namespace" /> właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-807">Provides COM objects with version-independent access to the <see cref="P:System.Type.Namespace" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2fb2f-808">Przestrzeń nazw <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-808">The namespace of the <see cref="T:System.Type" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-809">Ta właściwość jest dostęp do zarządzanych klas z kodem niezarządzanym i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-809">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-810"><xref:System.Type.Namespace%2A?displayProperty=nameWithType> Właściwości pobiera obszar nazw <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-810">The <xref:System.Type.Namespace%2A?displayProperty=nameWithType> property gets the namespace of the <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReflectedType">
      <MemberSignature Language="C#" Value="public Type ReflectedType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ReflectedType" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.ReflectedType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ReflectedType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ ReflectedType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ReflectedType : Type" Usage="System.Runtime.InteropServices._Type.ReflectedType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2fb2f-811">Udostępnia obiekty COM niezależny od wersji dostęp do <see cref="P:System.Type.ReflectedType" /> właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-811">Provides COM objects with version-independent access to the <see cref="P:System.Type.ReflectedType" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2fb2f-812">
            <see cref="T:System.Type" /> Obiektu, do której ta <see cref="T:System.Reflection.MemberInfo" /> obiekt został uzyskany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-812">The <see cref="T:System.Type" /> object through which this <see cref="T:System.Reflection.MemberInfo" /> object was obtained.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-813">Ta właściwość jest dostęp do zarządzanych klas z kodem niezarządzanym i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-813">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-814"><xref:System.Type.ReflectedType%2A?displayProperty=nameWithType> Właściwość pobiera obiekt klasy, które zostało użyte do uzyskania tego elementu członkowskiego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-814">The <xref:System.Type.ReflectedType%2A?displayProperty=nameWithType> property gets the class object that was used to obtain this member.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices._Type.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="abstract member ToString : unit -&gt; string" Usage="_Type.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="2fb2f-815">Udostępnia niezależny od wersji dostęp do obiektów COM <see cref="M:System.Type.ToString" /> metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-815">Provides COM objects with version-independent access to the <see cref="M:System.Type.ToString" /> method.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="2fb2f-816">A <see cref="T:System.String" /> reprezentujący nazwę bieżącej <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-816">A <see cref="T:System.String" /> representing the name of the current <see cref="T:System.Type" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-817">Ta metoda umożliwia dostęp do klas zarządzanych z niezarządzanego kodu i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-817">This method is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-818"><xref:System.Type.ToString%2A?displayProperty=nameWithType> Metoda zwraca nazwę bieżącej <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-818">The <xref:System.Type.ToString%2A?displayProperty=nameWithType> method returns the name of the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeHandle">
      <MemberSignature Language="C#" Value="public RuntimeTypeHandle TypeHandle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.RuntimeTypeHandle TypeHandle" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.TypeHandle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TypeHandle As RuntimeTypeHandle" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property RuntimeTypeHandle TypeHandle { RuntimeTypeHandle get(); };" />
      <MemberSignature Language="F#" Value="member this.TypeHandle : RuntimeTypeHandle" Usage="System.Runtime.InteropServices._Type.TypeHandle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.RuntimeTypeHandle</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2fb2f-819">Udostępnia obiekty COM niezależny od wersji dostęp do <see cref="P:System.Type.TypeHandle" /> właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-819">Provides COM objects with version-independent access to the <see cref="P:System.Type.TypeHandle" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2fb2f-820">Dojście do bieżącego <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-820">The handle for the current <see cref="T:System.Type" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-821">Ta właściwość jest dostęp do zarządzanych klas z kodem niezarządzanym i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-821">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-822"><xref:System.Type.TypeHandle%2A?displayProperty=nameWithType> Właściwość uzyskuje obsługę bieżącego <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-822">The <xref:System.Type.TypeHandle%2A?displayProperty=nameWithType> property gets the handle for the current <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TypeInitializer">
      <MemberSignature Language="C#" Value="public System.Reflection.ConstructorInfo TypeInitializer { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Reflection.ConstructorInfo TypeInitializer" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.TypeInitializer" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property TypeInitializer As ConstructorInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Reflection::ConstructorInfo ^ TypeInitializer { System::Reflection::ConstructorInfo ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.TypeInitializer : System.Reflection.ConstructorInfo" Usage="System.Runtime.InteropServices._Type.TypeInitializer" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Reflection.ConstructorInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2fb2f-823">Udostępnia obiekty COM niezależny od wersji dostęp do <see cref="P:System.Type.TypeInitializer" /> właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-823">Provides COM objects with version-independent access to the <see cref="P:System.Type.TypeInitializer" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2fb2f-824">A <see cref="T:System.Reflection.ConstructorInfo" /> zawierającą nazwę Konstruktor klasy <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-824">A <see cref="T:System.Reflection.ConstructorInfo" /> containing the name of the class constructor for the <see cref="T:System.Type" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-825">Ta właściwość jest dostęp do zarządzanych klas z kodem niezarządzanym i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-825">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-826"><xref:System.Type.TypeInitializer%2A?displayProperty=nameWithType> Właściwości pobiera inicjator dla <xref:System.Type>.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-826">The <xref:System.Type.TypeInitializer%2A?displayProperty=nameWithType> property gets the initializer for the <xref:System.Type>.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UnderlyingSystemType">
      <MemberSignature Language="C#" Value="public Type UnderlyingSystemType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type UnderlyingSystemType" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices._Type.UnderlyingSystemType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property UnderlyingSystemType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ UnderlyingSystemType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UnderlyingSystemType : Type" Usage="System.Runtime.InteropServices._Type.UnderlyingSystemType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="2fb2f-827">Udostępnia obiekty COM niezależny od wersji dostęp do <see cref="P:System.Type.UnderlyingSystemType" /> właściwości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-827">Provides COM objects with version-independent access to the <see cref="P:System.Type.UnderlyingSystemType" /> property.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="2fb2f-828">Typ podstawowy system dla <see cref="T:System.Type" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="2fb2f-828">The underlying system type for the <see cref="T:System.Type" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="2fb2f-829">Ta właściwość jest dostęp do zarządzanych klas z kodem niezarządzanym i nie powinna być wywoływana z kodu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-829">This property is for access to managed classes from unmanaged code, and should not be called from managed code.</span></span>  
  
 <span data-ttu-id="2fb2f-830"><xref:System.Type.UnderlyingSystemType%2A?displayProperty=nameWithType> Właściwość wskazuje typ udostępniane przez środowisko uruchomieniowe języka wspólnego reprezentujący tego typu.</span><span class="sxs-lookup"><span data-stu-id="2fb2f-830">The <xref:System.Type.UnderlyingSystemType%2A?displayProperty=nameWithType> property indicates the type provided by the common language runtime that represents this type.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>