<Type Name="StructLayoutAttribute" FullName="System.Runtime.InteropServices.StructLayoutAttribute">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f14bf9b279cd723cf3c06ea240028d88a45024bc" />
    <Meta Name="ms.sourcegitcommit" Value="0d6aa6694f157a08fe52cd25b4d9d3dcf913e812" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="10/12/2018" />
    <Meta Name="ms.locfileid" Value="49132558" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class StructLayoutAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit StructLayoutAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.InteropServices.StructLayoutAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class StructLayoutAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class StructLayoutAttribute sealed : Attribute" />
  <TypeSignature Language="F#" Value="type StructLayoutAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Struct, Inherited=false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Umożliwia sterowanie fizyczny układ pola danych, klasy lub struktury w pamięci.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten atrybut można zastosować do klasy lub struktury.  
  
 Środowisko uruchomieniowe języka wspólnego steruje fizyczny układ pola danych, klasy lub struktury w pamięci zarządzanej. Jednakże, jeśli chcesz przekazać typ, do kodu niezarządzanego, można użyć <xref:System.Runtime.InteropServices.StructLayoutAttribute> atrybutu do sterowania układem niezarządzanego typu. Użyć atrybutu z <xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType> wymuszenie członków do być określone sekwencyjnie w kolejności, są wyświetlane. <xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType> Kontroluje zarówno układu w pamięci zarządzanej i układu w niezarządzanej pamięci. Dla typów niekopiowalnych kontroluje układ klasy lub struktury jest przekazywania do kodu niezarządzanego, kiedy nie kontroluje układ w pamięci zarządzanej. Użyć atrybutu z <xref:System.Runtime.InteropServices.LayoutKind.Explicit?displayProperty=nameWithType> do kontrolowania dokładne położenie każdy element członkowski danych. Ma to wpływ na układ zarządzanych i niezarządzanych, typy kopiowalne i niekopiowalne. Za pomocą <xref:System.Runtime.InteropServices.LayoutKind.Explicit?displayProperty=nameWithType> wymaga użycia <xref:System.Runtime.InteropServices.FieldOffsetAttribute> atrybutu, aby wskazać pozycję każdego pola w ramach typu.  
  
 Kompilatory C#, Visual Basic i C++, zastosuj <xref:System.Runtime.InteropServices.LayoutKind.Sequential> wartość układu do struktur domyślnie. Dla klas, należy najpierw zastosować <xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType> wartości jawnie. [Tlbimp.exe (Importer biblioteki typów)](~/docs/framework/tools/tlbimp-exe-type-library-importer.md) ma również zastosowanie <xref:System.Runtime.InteropServices.StructLayoutAttribute> atrybut; go zawsze stosuje <xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType> wartości podczas importowania biblioteki typów.  
  
   
  
## Examples  
 W poniższym przykładzie pokazano deklaracji zarządzanych `GetSystemTime` działać, a następnie definiuje `MySystemTime` klasy <xref:System.Runtime.InteropServices.LayoutKind.Explicit?displayProperty=nameWithType> układu. `GetSystemTime` pobiera czas systemowy i drukuje do konsoli.  
  
 [!code-cpp[StructLayoutAttribute#1](~/samples/snippets/cpp/VS_Snippets_CLR/StructLayoutAttribute/CPP/structlayoutattribute.cpp#1)]
 [!code-csharp[StructLayoutAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR/StructLayoutAttribute/CS/structlayoutattribute.cs#1)]
 [!code-vb[StructLayoutAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/StructLayoutAttribute/VB/structlayoutattribute.vb#1)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/framework/tools/tlbimp-exe-type-library-importer.md">Tlbimp.exe (Importer biblioteki typów)</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Initalizes nowe wystąpienie elementu <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public StructLayoutAttribute (short layoutKind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int16 layoutKind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (layoutKind As Short)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; StructLayoutAttribute(short layoutKind);" />
      <MemberSignature Language="F#" Value="new System.Runtime.InteropServices.StructLayoutAttribute : int16 -&gt; System.Runtime.InteropServices.StructLayoutAttribute" Usage="new System.Runtime.InteropServices.StructLayoutAttribute layoutKind" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="layoutKind" Type="System.Int16" />
      </Parameters>
      <Docs>
        <param name="layoutKind">16-bitową liczbę całkowitą, która reprezentuje jeden z <see cref="T:System.Runtime.InteropServices.LayoutKind" /> wartości tego Określa, jak powinny być rozmieszczane klasy lub struktury.</param>
        <summary>Initalizes nowe wystąpienie elementu <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> klasy z określonym <see cref="T:System.Runtime.InteropServices.LayoutKind" /> element członkowski wyliczenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor przyjmuje bazowego 16-bitową liczbę całkowitą reprezentującą każdego <xref:System.Runtime.InteropServices.LayoutKind> element członkowski wyliczenia. [Tlbimp.exe (Importer biblioteki typów)](~/docs/framework/tools/tlbimp-exe-type-library-importer.md) używa tego konstruktora.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.InteropServices.LayoutKind" />
        <related type="Article" href="~/docs/framework/tools/tlbimp-exe-type-library-importer.md">Tlbimp.exe (Importer biblioteki typów)</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public StructLayoutAttribute (System.Runtime.InteropServices.LayoutKind layoutKind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Runtime.InteropServices.LayoutKind layoutKind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; StructLayoutAttribute(System::Runtime::InteropServices::LayoutKind layoutKind);" />
      <MemberSignature Language="F#" Value="new System.Runtime.InteropServices.StructLayoutAttribute : System.Runtime.InteropServices.LayoutKind -&gt; System.Runtime.InteropServices.StructLayoutAttribute" Usage="new System.Runtime.InteropServices.StructLayoutAttribute layoutKind" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="layoutKind" Type="System.Runtime.InteropServices.LayoutKind" />
      </Parameters>
      <Docs>
        <param name="layoutKind">Określa, że jak klasa lub struktura powinny być rozmieszczane jedną wyliczenia wartości.</param>
        <summary>Initalizes nowe wystąpienie elementu <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> klasy z określonym <see cref="T:System.Runtime.InteropServices.LayoutKind" /> element członkowski wyliczenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dla kodu do odczytu, który jest mniej podatne na błędy należy zawsze używać tego konstruktora.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.InteropServices.LayoutKind" />
      </Docs>
    </Member>
    <Member MemberName="CharSet">
      <MemberSignature Language="C#" Value="public System.Runtime.InteropServices.CharSet CharSet;" />
      <MemberSignature Language="ILAsm" Value=".field public valuetype System.Runtime.InteropServices.CharSet CharSet" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.StructLayoutAttribute.CharSet" />
      <MemberSignature Language="VB.NET" Value="Public CharSet As CharSet " />
      <MemberSignature Language="C++ CLI" Value="public: System::Runtime::InteropServices::CharSet CharSet;" />
      <MemberSignature Language="F#" Value="val mutable CharSet : System.Runtime.InteropServices.CharSet" Usage="System.Runtime.InteropServices.StructLayoutAttribute.CharSet" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.CharSet</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Wskazuje, czy ciąg pól danych w ramach klasy powinny być wprowadzane jako <see langword="LPWSTR" /> lub <see langword="LPSTR" /> domyślnie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `CharSet` pole jest ustawione na <xref:System.Runtime.InteropServices.CharSet.Unicode?displayProperty=nameWithType>, wszystkie argumenty typu string są konwertowane na znaki Unicode (`LPWSTR`) przed przekazaniem ich do niezarządzanego implementacji. Jeśli pole jest równa <xref:System.Runtime.InteropServices.CharSet.Ansi?displayProperty=nameWithType>, ciągi są konwertowane na ciągi znaków ANSI (`LPSTR`). Jeśli `CharSet` pole jest ustawione na <xref:System.Runtime.InteropServices.CharSet.Auto?displayProperty=nameWithType>, konwersja jest zależny od platformy (ANSI w Windows 98 i Windows Me i Unicode w nowszych wersjach).  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.InteropServices.CharSet" />
      </Docs>
    </Member>
    <Member MemberName="Pack">
      <MemberSignature Language="C#" Value="public int Pack;" />
      <MemberSignature Language="ILAsm" Value=".field public int32 Pack" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.StructLayoutAttribute.Pack" />
      <MemberSignature Language="VB.NET" Value="Public Pack As Integer " />
      <MemberSignature Language="C++ CLI" Value="public: int Pack;" />
      <MemberSignature Language="F#" Value="val mutable Pack : int" Usage="System.Runtime.InteropServices.StructLayoutAttribute.Pack" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Steruje wyrównaniem pola danych, klasy lub struktury w pamięci.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> Pola steruje wyrównaniem pola typu w pamięci.  Ma to wpływ na obie <xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType> i <xref:System.Runtime.InteropServices.LayoutKind.Explicit?displayProperty=nameWithType>. Domyślnie wartość jest 0, co oznacza domyślny rozmiar dla bieżącej platformy pakowania. Wartość <xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> musi być 0, 1, 2, 4, 8, 16, 32, 64 lub 128:  
  
 Pola wystąpienia typu są wyrównane za pomocą następujących reguł:  
  
-   Wyrównanie typu jest rozmiar największego elementu (1, 2, 4, 8, itd., w bajtach) lub pakowania określony rozmiar, która kwota jest mniejsza.  
  
-   Każde pole muszą być dopasowane z polami swój własny rozmiar (1, 2, 4, 8, itd., w bajtach) lub wyrównanie typu, obowiązuje mniejsza wartość.  Ponieważ domyślne wyrównanie typu jest rozmiar największego elementu, który jest większy niż lub równa długości wszystkich innych pól, to zwykle oznacza to, że pola są wyrównane według ich rozmiaru. Na przykład, nawet jeśli największego pola w typie jest liczba całkowita 64-bitowych (8-bajtową) lub pole pakietu jest równa 8, <xref:System.Byte> pola wyrównać przy 1-bajtowych granicach <xref:System.Int16> pola wyrównać przy 2-bajtowych granicach i <xref:System.Int32> pola wyrównania na 4-bajtowych granicach.  
  
-   Dopełnienie dodaje się między polami umacniając wyrównania.  
  
 Na przykład rozważmy następującą strukturę, która składa się z dwóch <xref:System.Byte> pól i jeden <xref:System.Int32> pola, gdy jest używana z różnymi wartościami dla <xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> pola.  
  
 [!code-csharp[System.Runtime.InteropServices.StructLayoutAttribute.Pack#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack/cs/packex0.cs#1)]  
  
> [!IMPORTANT]
>  Aby pomyślnie skompilować przykłady języka C#, należy określić `/unsafe` przełącznika kompilatora.  
  
 Jeśli określisz domyślny rozmiar pakowania, rozmiar struktury jest 8 bajtów. Dwa bajty zajmują pierwsze dwa bajty pamięci, ponieważ bajtów musi wyrównane na granicach jednobajtowych. Ponieważ domyślne wyrównanie typu co najmniej 4 bajtów, czyli rozmiar największego pól `i3`, istnieją dwa bajty uzupełnienia następuje pola Liczba całkowita.  
  
 [!code-csharp[System.Runtime.InteropServices.StructLayoutAttribute.Pack#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack/cs/packex1.cs#2)]  
  
 Jeśli <xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> jest ustawiona na wartość 2, rozmiar struktury jest 6 bajtów. Jak wcześniej, dwa bajty zajmują pierwsze dwa bajty pamięci. Ponieważ pola są teraz wyrównane na granicach 2-bajtowych, nie ma żadnych uzupełnień między drugi bajt i liczbę całkowitą.  
  
 [!code-csharp[System.Runtime.InteropServices.StructLayoutAttribute.Pack#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack/cs/packex2.cs#3)]  
  
 Jeśli <xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> jest ustawiony na 4, rozmiar struktury jest taka sama, jak w przypadku domyślnej, gdzie wyrównanie typu zdefiniowanego przez rozmiar jego największego pola, `i3`, który jest 4.  
  
 [!code-csharp[System.Runtime.InteropServices.StructLayoutAttribute.Pack#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack/cs/packex3.cs#4)]  
  
 Jeśli <xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> jest ustawiony do 8, rozmiar struktury jest nadal takie same jak wartość domyślna zamierzone, Zapisz, ponieważ `i3` Wyrównuje pole, w granicach 4-bajtowych, które jest mniejsze niż 8-bitowej granicy, określonych przez pola pakietu.  
  
 [!code-csharp[System.Runtime.InteropServices.StructLayoutAttribute.Pack#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack/cs/packex4.cs#5)]  
  
 Aby móc inny przykład, należy wziąć pod uwagę następujące struktury, która składa się z pola dwubajtowy, pole jednej liczby całkowitej ze znakiem 32-bitowych, jednej tablicy bajtowej Jednoelementowy i wartość dziesiętną. Za pomocą domyślny rozmiar pakowania rozmiar struktury to 28 bajtów. Dwa bajty zajmują pierwsze dwa bajty pamięci, a następnie dwa bajty uzupełnienia, następuje liczba całkowita. Następnie jest tablicą jednobajtowych, następują trzy bajty uzupełnienia. Na koniec <xref:System.Decimal> Wyrównuje pole, d5, na granicy 4-bajtowych, ponieważ wartość dziesiętna, składa się z czterech <xref:System.Int32> pola, więc jego wyrównania zależy od rozmiaru największego jej pola, a nie na rozmiar <xref:System.Decimal> struktury jako całości.  
  
 [!code-csharp[System.Runtime.InteropServices.StructLayoutAttribute.Pack#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack/cs/packex5.cs#6)]  
  
 Jeśli <xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> jest ustawiona na wartość 2, rozmiar struktury to 24 bajtów. W porównaniu z wyrównaniem domyślne dwa bajty uzupełnienia między dwa bajty i liczba całkowita ma zostały usunięte, ponieważ wyrównanie typu jest teraz 4 niż 2. Oraz trzy bajty uzupełnienia po `a4` zostały zastąpione przez jeden bajt uzupełnienia, ponieważ `d5` teraz wyrównuje na 2-bajtowych granic, a nie na 4-bajtowych granic.  
  
 [!code-csharp[System.Runtime.InteropServices.StructLayoutAttribute.Pack#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack/cs/packex6.cs#7)]  
  
 Jeśli <xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> jest ustawiony do 8, rozmiar struktury jest taka sama jak w przypadku domyślnej, ponieważ wszystkie wymagania wyrównania w tej strukturze są mniejsze niż 8.  
  
 [!code-csharp[System.Runtime.InteropServices.StructLayoutAttribute.Pack#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack/cs/packex7.cs#8)]  
  
 <xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> Jest często używane podczas operacji zapisu w sieci i struktury są eksportowane podczas dysku. To pole jest też często używane podczas platformy wywołania i operacje międzyoperacyjnego.  
  
 Od czasu do czasu pole umożliwia zmniejszyć wymagania dotyczące pamięci, przedstawiając większego rozmiarem pakowania. Jednak to użycie wymaga szczególnej ostrożności ograniczeń sprzętowych rzeczywiste i może faktycznie pogorszyć wydajność.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Size">
      <MemberSignature Language="C#" Value="public int Size;" />
      <MemberSignature Language="ILAsm" Value=".field public int32 Size" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.StructLayoutAttribute.Size" />
      <MemberSignature Language="VB.NET" Value="Public Size As Integer " />
      <MemberSignature Language="C++ CLI" Value="public: int Size;" />
      <MemberSignature Language="F#" Value="val mutable Size : int" Usage="System.Runtime.InteropServices.StructLayoutAttribute.Size" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Wskazuje rozmiar bezwzględny klasy lub struktury.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To pole musi być równa lub większa niż całkowity rozmiar w bajtach, elementów członkowskich klasy lub struktury. To pole jest przeznaczone głównie dla kompilatora autorzy, którzy chcą poszerzyć pamięć zajęta przez strukturę dostęp bezpośrednie, niezarządzanych. Na przykład można użyć tego pola podczas pracy z Unii, które nie są reprezentowane w metadanych na bezpośrednio.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public System.Runtime.InteropServices.LayoutKind Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Runtime.InteropServices.LayoutKind Value" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices.StructLayoutAttribute.Value" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Value As LayoutKind" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Runtime::InteropServices::LayoutKind Value { System::Runtime::InteropServices::LayoutKind get(); };" />
      <MemberSignature Language="F#" Value="member this.Value : System.Runtime.InteropServices.LayoutKind" Usage="System.Runtime.InteropServices.StructLayoutAttribute.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.LayoutKind</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera <see cref="T:System.Runtime.InteropServices.LayoutKind" /> wartość, która określa sposób rozmieszczenia klasy lub struktury.</summary>
        <value>Jedna z wartości wyliczenia, które określa sposób rozmieszczenia klasy lub struktury.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>