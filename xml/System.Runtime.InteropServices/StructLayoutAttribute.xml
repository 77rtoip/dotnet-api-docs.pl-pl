<Type Name="StructLayoutAttribute" FullName="System.Runtime.InteropServices.StructLayoutAttribute">
  <Metadata><Meta Name="ms.openlocfilehash" Value="14b339054799ef8da8dd1958b61f195b93cfe9d3" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69269316" /></Metadata><TypeSignature Language="C#" Value="public sealed class StructLayoutAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit StructLayoutAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.InteropServices.StructLayoutAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class StructLayoutAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class StructLayoutAttribute sealed : Attribute" />
  <TypeSignature Language="F#" Value="type StructLayoutAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.5;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8;netcore-2.2;dotnet-uwp-10.0;netcore-3.0;netstandard-2.1">
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Class | System.AttributeTargets.Struct, Inherited=false)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Umożliwia kontrolowanie fizycznego układu pól danych klasy lub struktury w pamięci.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten atrybut można zastosować do klas lub struktur.  
  
 Środowisko uruchomieniowe języka wspólnego steruje fizycznym układem pól danych klasy lub struktury w pamięci zarządzanej. Jeśli jednak chcesz przekazać typ do kodu niezarządzanego, możesz użyć <xref:System.Runtime.InteropServices.StructLayoutAttribute> atrybutu, aby sterować niezarządzanym układem typu. Użyj atrybutu z <xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType> , aby wymusić, aby elementy członkowskie były ułożone sekwencyjnie w kolejności, w jakiej się pojawiają. W przypadku typów <xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType> danych kopiowalnych kontroluje układ w pamięci zarządzanej i układ w pamięci niezarządzanej. W przypadku typów innych niż danych kopiowalnych kontroluje układ, gdy Klasa lub struktura są przekazywane do kodu niezarządzanego, ale nie kontroluje układu w pamięci zarządzanej. Użyj atrybutu z <xref:System.Runtime.InteropServices.LayoutKind.Explicit?displayProperty=nameWithType> , aby kontrolować dokładne położenie każdego elementu członkowskiego danych. Dotyczy to zarówno układu zarządzanego, jak i niezarządzanego, zarówno dla typów danych kopiowalnych, jak i innych niż danych kopiowalnych. Użycie <xref:System.Runtime.InteropServices.LayoutKind.Explicit?displayProperty=nameWithType> wymaga, aby <xref:System.Runtime.InteropServices.FieldOffsetAttribute> użyć atrybutu, aby wskazać pozycję każdego pola w typie.  
  
 C#, Visual Basic i C++ kompilatory domyślnie stosują <xref:System.Runtime.InteropServices.LayoutKind.Sequential> wartość układu do struktur. Dla klas należy zastosować <xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType> wartość jawnie. [Tlbimp. exe (Importer biblioteki typów)](~/docs/framework/tools/tlbimp-exe-type-library-importer.md) stosuje <xref:System.Runtime.InteropServices.StructLayoutAttribute> również atrybut; zawsze stosuje <xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType> wartość podczas importowania biblioteki typów.  
  
   
  
## Examples  
 Poniższy przykład ilustruje zarządzaną deklarację `GetSystemTime` funkcji i definiuje `MySystemTime` klasę z <xref:System.Runtime.InteropServices.LayoutKind.Explicit?displayProperty=nameWithType> układem. `GetSystemTime`Pobiera czas systemowy i drukuje do konsoli programu.  
  
 [!code-cpp[StructLayoutAttribute#1](~/samples/snippets/cpp/VS_Snippets_CLR/StructLayoutAttribute/CPP/structlayoutattribute.cpp#1)]
 [!code-csharp[StructLayoutAttribute#1](~/samples/snippets/csharp/VS_Snippets_CLR/StructLayoutAttribute/CS/structlayoutattribute.cs#1)]
 [!code-vb[StructLayoutAttribute#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/StructLayoutAttribute/VB/structlayoutattribute.vb#1)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="~/docs/framework/tools/tlbimp-exe-type-library-importer.md">Tlbimp.exe (Importer biblioteki typów)</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public StructLayoutAttribute (short layoutKind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int16 layoutKind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Int16)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (layoutKind As Short)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; StructLayoutAttribute(short layoutKind);" />
      <MemberSignature Language="F#" Value="new System.Runtime.InteropServices.StructLayoutAttribute : int16 -&gt; System.Runtime.InteropServices.StructLayoutAttribute" Usage="new System.Runtime.InteropServices.StructLayoutAttribute layoutKind" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="layoutKind" Type="System.Int16" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <param name="layoutKind">16-bitowa liczba całkowita reprezentująca jedną z <see cref="T:System.Runtime.InteropServices.LayoutKind" /> wartości, która określa, jak powinna być rozmieszczona Klasa lub struktura.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> klasy z określonym <see cref="T:System.Runtime.InteropServices.LayoutKind" /> składowaną wyliczeniem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor przyjmuje podstawową 16-bitową liczbę całkowitą, która <xref:System.Runtime.InteropServices.LayoutKind> reprezentuje każdy element członkowski wyliczenia. [Tlbimp. exe (Importer biblioteki typów)](~/docs/framework/tools/tlbimp-exe-type-library-importer.md) używa tego konstruktora.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.InteropServices.LayoutKind" />
        <related type="Article" href="~/docs/framework/tools/tlbimp-exe-type-library-importer.md">Tlbimp.exe (Importer biblioteki typów)</related>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public StructLayoutAttribute (System.Runtime.InteropServices.LayoutKind layoutKind);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Runtime.InteropServices.LayoutKind layoutKind) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.StructLayoutAttribute.#ctor(System.Runtime.InteropServices.LayoutKind)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; StructLayoutAttribute(System::Runtime::InteropServices::LayoutKind layoutKind);" />
      <MemberSignature Language="F#" Value="new System.Runtime.InteropServices.StructLayoutAttribute : System.Runtime.InteropServices.LayoutKind -&gt; System.Runtime.InteropServices.StructLayoutAttribute" Usage="new System.Runtime.InteropServices.StructLayoutAttribute layoutKind" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="layoutKind" Type="System.Runtime.InteropServices.LayoutKind" />
      </Parameters>
      <Docs>
        <param name="layoutKind">Jedna z wartości wyliczenia, która określa sposób rozmieszczenia klasy lub struktury.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Runtime.InteropServices.StructLayoutAttribute" /> klasy z określonym <see cref="T:System.Runtime.InteropServices.LayoutKind" /> składowaną wyliczeniem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uzyskać czytelny kod, który jest mniej podatny na błąd, zawsze używaj tego konstruktora.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.InteropServices.LayoutKind" />
      </Docs>
    </Member>
    <Member MemberName="CharSet">
      <MemberSignature Language="C#" Value="public System.Runtime.InteropServices.CharSet CharSet;" />
      <MemberSignature Language="ILAsm" Value=".field public valuetype System.Runtime.InteropServices.CharSet CharSet" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.StructLayoutAttribute.CharSet" />
      <MemberSignature Language="VB.NET" Value="Public CharSet As CharSet " />
      <MemberSignature Language="C++ CLI" Value="public: System::Runtime::InteropServices::CharSet CharSet;" />
      <MemberSignature Language="F#" Value="val mutable CharSet : System.Runtime.InteropServices.CharSet" Usage="System.Runtime.InteropServices.StructLayoutAttribute.CharSet" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.CharSet</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Wskazuje, czy pola danych ciągu w klasie mają być organizowane jako <see langword="LPWSTR" /> czy <see langword="LPSTR" /> domyślne.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli pole jest ustawione na <xref:System.Runtime.InteropServices.CharSet.Unicode?displayProperty=nameWithType>, wszystkie argumenty ciągu są konwertowane na znaki Unicode (`LPWSTR`) przed przekazaniem ich do niezarządzanej implementacji. `CharSet` Jeśli pole jest ustawione na <xref:System.Runtime.InteropServices.CharSet.Ansi?displayProperty=nameWithType>, ciągi są konwertowane na ciągi ANSI (`LPSTR`). Jeśli pole jest ustawione na <xref:System.Runtime.InteropServices.CharSet.Auto?displayProperty=nameWithType>, konwersja jest zależna od platformy (ANSI w systemach Windows 98 i Windows Me oraz Unicode w nowszych wersjach). `CharSet`  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Runtime.InteropServices.CharSet" />
      </Docs>
    </Member>
    <Member MemberName="Pack">
      <MemberSignature Language="C#" Value="public int Pack;" />
      <MemberSignature Language="ILAsm" Value=".field public int32 Pack" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.StructLayoutAttribute.Pack" />
      <MemberSignature Language="VB.NET" Value="Public Pack As Integer " />
      <MemberSignature Language="C++ CLI" Value="public: int Pack;" />
      <MemberSignature Language="F#" Value="val mutable Pack : int" Usage="System.Runtime.InteropServices.StructLayoutAttribute.Pack" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Steruje wyrównaniem pól danych klasy lub struktury w pamięci.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> Pole określa wyrównanie pól typu w pamięci.  Dotyczy zarówno <xref:System.Runtime.InteropServices.LayoutKind.Sequential?displayProperty=nameWithType> , jak <xref:System.Runtime.InteropServices.LayoutKind.Explicit?displayProperty=nameWithType>i. Wartość domyślna to 0, co wskazuje domyślny rozmiar pakowania dla bieżącej platformy. Wartość <xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> musi być równa 0, 1, 2, 4, 8, 16, 32, 64 lub 128:  
  
 Pola wystąpienia typu są wyrównane przy użyciu następujących reguł:  
  
-   Wyrównanie typu to rozmiar największego elementu (1, 2, 4, 8 itd., bajtów) lub określony rozmiar pakowania, w zależności od tego, który jest mniejszy.  
  
-   Każde pole musi być wyrównane z polami o własnym rozmiarze (1, 2, 4, 8, itp., bajtami) lub wyrównaniem typu, w zależności od tego, który jest mniejszy.  Ponieważ domyślne wyrównanie typu jest rozmiarem największego elementu, który jest większy niż lub równy wszystkie inne długości pól, zazwyczaj oznacza to, że pola są wyrównane według ich rozmiaru. Na przykład nawet jeśli największe pole w typie jest 64-bitową (8-bajtową) liczbą całkowitą lub pole Pack ma wartość 8, <xref:System.Byte> pola są wyrównane do 1-bajtowych granic, <xref:System.Int16> pola są wyrównane do 2-bajtowych granic, <xref:System.Int32> a pola są wyrównane do 4-bajtowych granic.  
  
-   Dopełnienie jest dodawane między polami, aby spełnić wymagania dotyczące wyrównania.  
  
 Rozważmy na przykład następującą strukturę, która składa się z <xref:System.Byte> dwóch pól i <xref:System.Int32> jednego pola, gdy jest używana z różnymi wartościami dla tego <xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> pola.  
  
 [!code-csharp[System.Runtime.InteropServices.StructLayoutAttribute.Pack#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack/cs/packex0.cs#1)]  
  
> [!IMPORTANT]
>  Aby pomyślnie skompilować C# przykłady, należy określić `/unsafe` przełącznik kompilatora.  
  
 W przypadku określenia domyślnego rozmiaru pakowania rozmiar struktury wynosi 8 bajtów. Dwa bajty zajmują pierwsze dwa bajty pamięci, ponieważ bajty muszą być wyrównane na granicach jednego bajtu. Ponieważ domyślne wyrównanie typu to 4 bajty, czyli rozmiar największych pól, `i3`, istnieją dwa bajty uzupełnienia, po których następuje pole Integer.  
  
 [!code-csharp[System.Runtime.InteropServices.StructLayoutAttribute.Pack#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack/cs/packex1.cs#2)]  
  
 Jeśli <xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> wartość jest równa 2, rozmiar struktury wynosi 6 bajtów. Tak jak wcześniej te dwa bajty zajmują pierwsze dwa bajty pamięci. Ponieważ pola są teraz wyrównane do 2-bajtowych granic, nie istnieje uzupełnienie między drugim bajtem a liczbą całkowitą.  
  
 [!code-csharp[System.Runtime.InteropServices.StructLayoutAttribute.Pack#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack/cs/packex2.cs#3)]  
  
 Jeśli <xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> jest ustawiona na 4, rozmiar struktury jest taki sam jak w przypadku domyślnego, gdzie wyrównanie typu zostało zdefiniowane przez rozmiar największego `i3`pola, czyli 4.  
  
 [!code-csharp[System.Runtime.InteropServices.StructLayoutAttribute.Pack#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack/cs/packex3.cs#4)]  
  
 Jeśli <xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> jest ustawiona na 8, rozmiar struktury jest nadal taki sam jak w przypadku domyślnego, `i3` ponieważ pole jest wyrównane do 4-bajtowej granicy, która jest mniejsza niż 8-bajtowa granica określona w polu pakiet.  
  
 [!code-csharp[System.Runtime.InteropServices.StructLayoutAttribute.Pack#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack/cs/packex4.cs#5)]  
  
 Aby utworzyć inny przykład, należy rozważyć następującą strukturę, która składa się z pól dwóch bajtów, 1 32-bitowego ze znakiem liczby całkowitej, jednej jednoelementowej tablicy bajtowej i wartości dziesiętnej. W przypadku domyślnego rozmiaru pakowania rozmiar struktury wynosi 28 bajtów. Dwa bajty zajmują pierwsze dwa bajty pamięci, po których następuje dwa bajty uzupełnienia, po którym następuje liczba całkowita. Następnie jest jednobajtową tablicą, po której następują trzy bajty wypełnienia. Na koniec pole <xref:System.Decimal> , znakowanie, jest wyrównane do 4-bajtowej granicy, ponieważ wartość dziesiętna składa <xref:System.Int32> się z czterech pól, więc wyrównanie jest zależne od rozmiaru największego z jego pól, a nie od rozmiaru <xref:System.Decimal> całości.  
  
 [!code-csharp[System.Runtime.InteropServices.StructLayoutAttribute.Pack#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack/cs/packex5.cs#6)]  
  
 Jeśli <xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> wartość jest równa 2, rozmiar struktury wynosi 24 bajty. W porównaniu z domyślnym wyrównaniem, dwa bajty uzupełnienia między dwoma bajtami i liczbą całkowitą zostały usunięte, ponieważ wyrównanie typu jest teraz 4, a nie 2. I trzy bajty uzupełnienia po `a4` zastąpieniu przez jeden bajt uzupełnienia, ponieważ `d5` teraz są wyrównane do 2-bajtowej granicy, a nie na granicy 4-bajtowej.  
  
 [!code-csharp[System.Runtime.InteropServices.StructLayoutAttribute.Pack#7](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack/cs/packex6.cs#7)]  
  
 Jeśli <xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> jest ustawiona na 8, rozmiar struktury jest taki sam jak w przypadku domyślnego, ponieważ wszystkie wymagania dotyczące wyrównania w tej strukturze są mniejsze niż 8.  
  
 [!code-csharp[System.Runtime.InteropServices.StructLayoutAttribute.Pack#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.runtime.interopservices.structlayoutattribute.pack/cs/packex7.cs#8)]  
  
 Pole <xref:System.Runtime.InteropServices.StructLayoutAttribute.Pack> jest często używane, gdy struktury są eksportowane podczas operacji zapisu na dysku i w sieci. Pole jest również często używane podczas wywołania platformy i operacji międzyoperacyjnych.  
  
 Czasami pole jest używane w celu zmniejszenia wymagań dotyczących pamięci przez wygenerowanie większego rozmiaru pakowania. Jednak takie użycie wymaga starannego uwzględnienia rzeczywistych ograniczeń sprzętowych i może faktycznie obniżyć wydajność.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Size">
      <MemberSignature Language="C#" Value="public int Size;" />
      <MemberSignature Language="ILAsm" Value=".field public int32 Size" />
      <MemberSignature Language="DocId" Value="F:System.Runtime.InteropServices.StructLayoutAttribute.Size" />
      <MemberSignature Language="VB.NET" Value="Public Size As Integer " />
      <MemberSignature Language="C++ CLI" Value="public: int Size;" />
      <MemberSignature Language="F#" Value="val mutable Size : int" Usage="System.Runtime.InteropServices.StructLayoutAttribute.Size" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Wskazuje rozmiar bezwzględny klasy lub struktury.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To pole musi mieć wartość równą lub większą od całkowitego rozmiaru, w bajtach, elementów członkowskich klasy lub struktury. To pole jest przeznaczone głównie dla autorów kompilatora, którzy chcą zwiększyć pamięć zajmowaną przez strukturę do bezpośredniego, niezarządzanego dostępu. Na przykład można użyć tego pola podczas pracy z Unią, które nie są reprezentowane bezpośrednio w metadanych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Value">
      <MemberSignature Language="C#" Value="public System.Runtime.InteropServices.LayoutKind Value { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Runtime.InteropServices.LayoutKind Value" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices.StructLayoutAttribute.Value" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Value As LayoutKind" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Runtime::InteropServices::LayoutKind Value { System::Runtime::InteropServices::LayoutKind get(); };" />
      <MemberSignature Language="F#" Value="member this.Value : System.Runtime.InteropServices.LayoutKind" Usage="System.Runtime.InteropServices.StructLayoutAttribute.Value" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Runtime.InteropServices.LayoutKind</ReturnType>
      </ReturnValue>
      <Docs>
        <summary><see cref="T:System.Runtime.InteropServices.LayoutKind" /> Pobiera wartość określającą sposób rozmieszczenia klasy lub struktury.</summary>
        <value>Jedna z wartości wyliczenia, która określa sposób rozmieszczenia klasy lub struktury.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
