<Type Name="VariantWrapper" FullName="System.Runtime.InteropServices.VariantWrapper">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="756043660b69b0075e319179d9908a02a325c276" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class VariantWrapper" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi serializable sealed beforefieldinit VariantWrapper extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.InteropServices.VariantWrapper" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class VariantWrapper" />
  <TypeSignature Language="C++ CLI" Value="public ref class VariantWrapper sealed" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.InteropServices</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.1.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="b956d-101">Marshals dane typu <see langword="VT_VARIANT | VT_BYREF" /> z kodu zarządzanego do kodu niezarządzanego.</span>
      <span class="sxs-lookup">
        <span data-stu-id="b956d-101">Marshals data of type <see langword="VT_VARIANT | VT_BYREF" /> from managed to unmanaged code.</span>
      </span>
      <span data-ttu-id="b956d-102">Klasa ta nie może być dziedziczona.</span>
      <span class="sxs-lookup">
        <span data-stu-id="b956d-102">This class cannot be inherited.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="b956d-103">Celem <xref:System.Runtime.InteropServices.VariantWrapper> jest dodanie jeden poziom pośredni podczas organizowania typu zarządzanego do odpowiednich `VARIANT` typu.</span><span class="sxs-lookup"><span data-stu-id="b956d-103">The purpose of <xref:System.Runtime.InteropServices.VariantWrapper> is to add one level of indirection when marshaling a managed type to the corresponding `VARIANT` type.</span></span>  
  
 <span data-ttu-id="b956d-104">Ta klasa służy do zakodowania <xref:System.Object> międzyoperacyjnego organizatora przekazywany jako `VT_VARIANT | VT_BYREF`.</span><span class="sxs-lookup"><span data-stu-id="b956d-104">You can use this class to wrap an <xref:System.Object> that the interop marshaler passes as `VT_VARIANT | VT_BYREF`.</span></span> <span data-ttu-id="b956d-105">W wersjach 1.0 i 1.1 programu .NET Framework nie było możliwe do organizowania danych variant typu `VT_VARIANT | VT_BYREF` do kodu niezarządzanego.</span><span class="sxs-lookup"><span data-stu-id="b956d-105">In versions 1.0 and 1.1 of the .NET Framework, it was not possible to marshal variant data of type `VT_VARIANT | VT_BYREF` to unmanaged code.</span></span> <span data-ttu-id="b956d-106">Międzyoperacyjnego organizatora przekazany wariant typu zarządzanego (na przykład `VT_BSTR | VT_BYREF` dla <xref:System.String>, lub `VT_I4 | VT_BYREF` dla <xref:System.Int32>), ale nie `VT_VARIANT | VT_BYREF`.</span><span class="sxs-lookup"><span data-stu-id="b956d-106">The interop marshaler passed a variant of the managed type (for example, `VT_BSTR | VT_BYREF` for <xref:System.String>, or `VT_I4 | VT_BYREF` for <xref:System.Int32>), but not `VT_VARIANT | VT_BYREF`.</span></span>  
  
 <span data-ttu-id="b956d-107">Jedną z zalet przy użyciu `VT_VARIANT | VT_BYREF` typów variant jest, można zmienić podczas wywołania metody typu danych.</span><span class="sxs-lookup"><span data-stu-id="b956d-107">One advantage of using `VT_VARIANT | VT_BYREF` variant types is that the type of data can be changed during a method call.</span></span> <span data-ttu-id="b956d-108">Na przykład można przekazać `VT_VARIANT | VT_BYREF` typu variant, który zawiera `VT_BSTR` i get zwrócony typ variant zawierający `VT_I4` po wywołaniu metody.</span><span class="sxs-lookup"><span data-stu-id="b956d-108">For example, you can pass a `VT_VARIANT | VT_BYREF` variant type that contains a `VT_BSTR` and get a variant returned that contains a `VT_I4` after a method call.</span></span> <span data-ttu-id="b956d-109">Ponieważ organizator międzyoperacyjnego modelu COM nie ma możliwości wiedzy, kiedy należy przekazać `VT_BSTR | VT_BYREF` i kiedy należy przekazać `VT_VARIANT | VT_BYREF`, który wskazuje typ variant zawierający `BSTR` dla parametrów zadeklarowany jako `VARIANT *`, można nakazać organizatora przy użyciu <xref:System.Runtime.InteropServices.VariantWrapper>.</span><span class="sxs-lookup"><span data-stu-id="b956d-109">Because the COM interop marshaler has no way of knowing when to pass `VT_BSTR | VT_BYREF` and when to pass `VT_VARIANT | VT_BYREF`, which points to a variant that contains a `BSTR` for parameters declared as `VARIANT *`, you can instruct the marshaler by using <xref:System.Runtime.InteropServices.VariantWrapper>.</span></span>  
  
 <span data-ttu-id="b956d-110">Należy pamiętać, że wczesne wiązanie nie jest obsługiwany; można użyć <xref:System.Runtime.InteropServices.VariantWrapper> tylko wtedy, gdy wywołanie <xref:System.Type.InvokeMember%2A> lub tylko do wysyłania interfejs o nazwie w sposób wczesne powiązania.</span><span class="sxs-lookup"><span data-stu-id="b956d-110">Note that early binding is not supported; you can use <xref:System.Runtime.InteropServices.VariantWrapper> only when calling <xref:System.Type.InvokeMember%2A> or with a Dispatch-only interface called in an early bound fashion.</span></span> <span data-ttu-id="b956d-111">W języku C#, należy również użyć `ref` — słowo kluczowe, aby określić `ByRef` semantyki dla każdego parametru typu <xref:System.Runtime.InteropServices.VariantWrapper>.</span><span class="sxs-lookup"><span data-stu-id="b956d-111">In C#, you must also use the `ref` keyword to specify `ByRef` semantics for any parameter of type <xref:System.Runtime.InteropServices.VariantWrapper>.</span></span> <span data-ttu-id="b956d-112">W języku Visual Basic `ByRef` semantyki są dodawane automatycznie dla każdego niejawne wywołania późne wiązanie.</span><span class="sxs-lookup"><span data-stu-id="b956d-112">In Visual Basic, `ByRef` semantics are added automatically for every implicit late binding call.</span></span> <span data-ttu-id="b956d-113">Należy również zauważyć, że zagnieżdżenia <xref:System.Runtime.InteropServices.VariantWrapper> obiekty i tablice <xref:System.Runtime.InteropServices.VariantWrapper> obiektów nie jest obsługiwane.</span><span class="sxs-lookup"><span data-stu-id="b956d-113">Also note that nesting <xref:System.Runtime.InteropServices.VariantWrapper> objects and arrays of <xref:System.Runtime.InteropServices.VariantWrapper> objects is not supported.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="b956d-114">Poniższy przykład kodu pokazuje sposób użycia <xref:System.Runtime.InteropServices.VariantWrapper> klasy opakowywać <xref:System.Object> międzyoperacyjnego organizatora przekazywany jako `VT_VARIANT | VT_BYREF`.</span><span class="sxs-lookup"><span data-stu-id="b956d-114">The following code example demonstrates how to use the <xref:System.Runtime.InteropServices.VariantWrapper> class to wrap an <xref:System.Object> that the interop marshaler passes as `VT_VARIANT | VT_BYREF`.</span></span>  
  
 [!code-csharp[System.Runtime.InteropServices.VariantWrapper#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.InteropServices.VariantWrapper/cs/sample.cs#1)]
 [!code-vb[System.Runtime.InteropServices.VariantWrapper#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.InteropServices.VariantWrapper/vb/sample.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public VariantWrapper (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.VariantWrapper.#ctor(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (obj As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; VariantWrapper(System::Object ^ obj);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">
          <span data-ttu-id="b956d-115">Obiekt do organizowania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b956d-115">The object to marshal.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="b956d-116">Inicjuje nowe wystąpienie klasy <see cref="T:System.Runtime.InteropServices.VariantWrapper" /> klasy dla określonego <see cref="T:System.Object" /> parametru.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b956d-116">Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.VariantWrapper" /> class for the specified <see cref="T:System.Object" /> parameter.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 <span data-ttu-id="b956d-117">Poniższy przykład kodu pokazuje sposób użycia <xref:System.Runtime.InteropServices.VariantWrapper> klasy opakowywać <xref:System.Object> międzyoperacyjnego organizatora przekazywany jako `VT_VARIANT | VT_BYREF`.</span><span class="sxs-lookup"><span data-stu-id="b956d-117">The following code example demonstrates how to use the <xref:System.Runtime.InteropServices.VariantWrapper> class to wrap an <xref:System.Object> that the interop marshaler passes as `VT_VARIANT | VT_BYREF`.</span></span>  
  
 [!code-csharp[System.Runtime.InteropServices.VariantWrapper#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Runtime.InteropServices.VariantWrapper/cs/sample.cs#1)]
 [!code-vb[System.Runtime.InteropServices.VariantWrapper#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Runtime.InteropServices.VariantWrapper/vb/sample.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WrappedObject">
      <MemberSignature Language="C#" Value="public object WrappedObject { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object WrappedObject" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.InteropServices.VariantWrapper.WrappedObject" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WrappedObject As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ WrappedObject { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.InteropServices</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.1.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="b956d-118">Pobiera opakowane przez obiekt <see cref="T:System.Runtime.InteropServices.VariantWrapper" /> obiektu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b956d-118">Gets the object wrapped by the <see cref="T:System.Runtime.InteropServices.VariantWrapper" /> object.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="b956d-119">Obiekt opakowane przez <see cref="T:System.Runtime.InteropServices.VariantWrapper" /> obiektu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="b956d-119">The object wrapped by the <see cref="T:System.Runtime.InteropServices.VariantWrapper" /> object.</span>
          </span>
        </value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>