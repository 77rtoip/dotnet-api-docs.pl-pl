<Type Name="MemoryMarshal" FullName="System.Runtime.InteropServices.MemoryMarshal">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="081c61ea90612c8fde40af8e49e7e3af04bca95a" />
    <Meta Name="ms.sourcegitcommit" Value="1654a92bac785a221098172d9cacd405ceaac9b7" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="12/01/2018" />
    <Meta Name="ms.locfileid" Value="52733905" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class MemoryMarshal" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit MemoryMarshal extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.InteropServices.MemoryMarshal" />
  <TypeSignature Language="VB.NET" Value="Public Class MemoryMarshal" />
  <TypeSignature Language="C++ CLI" Value="public ref class MemoryMarshal abstract sealed" />
  <TypeSignature Language="F#" Value="type MemoryMarshal = class" />
  <AssemblyInfo>
    <AssemblyName>System.Memory</AssemblyName>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="f9753-101">Udostępnia metody do współdziałania z usługami <see cref="T:System.Memory`1" />, <see cref="T:System.ReadOnlyMemory`1" />, <see cref="T:System.Span`1" />, i <see cref="T:System.ReadOnlySpan`1" />.</span>
      <span class="sxs-lookup">
        <span data-stu-id="f9753-101">Provides methods to interoperate with <see cref="T:System.Memory`1" />, <see cref="T:System.ReadOnlyMemory`1" />,  <see cref="T:System.Span`1" />, and  <see cref="T:System.ReadOnlySpan`1" />.</span>
      </span>
    </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AsBytes&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static ReadOnlySpan&lt;byte&gt; AsBytes&lt;T&gt; (ReadOnlySpan&lt;T&gt; span) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; AsBytes&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.ReadOnlySpan`1&lt;!!T&gt; span) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.AsBytes``1(System.ReadOnlySpan{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AsBytes(Of T As Structure) (span As ReadOnlySpan(Of T)) As ReadOnlySpan(Of Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static ReadOnlySpan&lt;System::Byte&gt; AsBytes(ReadOnlySpan&lt;T&gt; span);" />
      <MemberSignature Language="F#" Value="static member AsBytes : ReadOnlySpan&lt;'T (requires 'T : struct)&gt; -&gt; ReadOnlySpan&lt;byte&gt; (requires 'T : struct)" Usage="System.Runtime.InteropServices.MemoryMarshal.AsBytes span" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;System.Byte&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="f9753-102">Typ elementów w zakresie tylko do odczytu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9753-102">The type of items in the read-only span.</span>
          </span>
        </typeparam>
        <param name="span">
          <span data-ttu-id="f9753-103">Wycinek źródłowego do przekonwertowania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9753-103">The source slice to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f9753-104">Rzutowania <see cref="T:System.ReadOnlySpan`1" /> jeden typ pierwotny, <paramref name="T" />, <see langword="ReadOnlySpan&lt;Byte&gt;" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9753-104">Casts a <see cref="T:System.ReadOnlySpan`1" /> of one primitive type, <paramref name="T" />, to a <see langword="ReadOnlySpan&lt;Byte&gt;" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f9753-105">Tylko do odczytu zakresu typu <see cref="T:System.Byte" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9753-105">A read-only span of type <see cref="T:System.Byte" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="f9753-106">`T` nie może zawierać wskaźniki lub odwołania.</span><span class="sxs-lookup"><span data-stu-id="f9753-106">`T` cannot contain pointers or references.</span></span> <span data-ttu-id="f9753-107">`T` jest sprawdzany w czasie wykonywania w celu zachowania bezpieczeństwa typu.</span><span class="sxs-lookup"><span data-stu-id="f9753-107">`T` is checked at runtime in order to preserve type safety.</span></span>  

      ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f9753-108">
            <paramref name="T" /> zawiera odwołania lub wskaźniki.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9753-108">
              <paramref name="T" /> contains references or pointers.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="f9753-109">
            <see cref="P:System.ReadOnlySpan`1.Length" /> Właściwości nowej <see cref="T:System.ReadOnlySpan`1" /> spowoduje przekroczenie <see cref="F:System.Int32.MaxValue" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="f9753-109">The <see cref="P:System.ReadOnlySpan`1.Length" /> property of the new <see cref="T:System.ReadOnlySpan`1" /> would exceed <see cref="F:System.Int32.MaxValue" /></span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="AsBytes&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Span&lt;byte&gt; AsBytes&lt;T&gt; (Span&lt;T&gt; span) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Span`1&lt;unsigned int8&gt; AsBytes&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Span`1&lt;!!T&gt; span) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.AsBytes``1(System.Span{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AsBytes(Of T As Structure) (span As Span(Of T)) As Span(Of Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static Span&lt;System::Byte&gt; AsBytes(Span&lt;T&gt; span);" />
      <MemberSignature Language="F#" Value="static member AsBytes : Span&lt;'T (requires 'T : struct)&gt; -&gt; Span&lt;byte&gt; (requires 'T : struct)" Usage="System.Runtime.InteropServices.MemoryMarshal.AsBytes span" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Span&lt;System.Byte&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.Span&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="f9753-110">Typ elementów w zakresie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9753-110">The type of items in the span.</span>
          </span>
        </typeparam>
        <param name="span">
          <span data-ttu-id="f9753-111">Wycinek źródłowego do przekonwertowania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9753-111">The source slice to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f9753-112">Rzutowania <see cref="T:System.Span`1" /> jeden typ pierwotny, <paramref name="T" />, <see langword="Span&lt;Byte&gt;" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9753-112">Casts a <see cref="T:System.Span`1" /> of one primitive type, <paramref name="T" />, to a <see langword="Span&lt;Byte&gt;" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f9753-113">Zakres typu <see cref="T:System.Byte" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9753-113">A span of type <see cref="T:System.Byte" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="f9753-114">`T` nie może zawierać wskaźniki lub odwołania.</span><span class="sxs-lookup"><span data-stu-id="f9753-114">`T` cannot contain pointers or references.</span></span> <span data-ttu-id="f9753-115">`T` jest sprawdzany w czasie wykonywania w celu zachowania bezpieczeństwa typu.</span><span class="sxs-lookup"><span data-stu-id="f9753-115">`T` is checked at runtime in order to preserve type safety.</span></span>  

       ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f9753-116">
            <paramref name="T" /> zawiera odwołania lub wskaźniki.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9753-116">
              <paramref name="T" /> contains references or pointers.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="f9753-117">
            <see cref="P:System.Span`1.Length" /> Właściwości nowej <see cref="T:System.Span`1" /> spowoduje przekroczenie <see cref="F:System.Int32.MaxValue" /></span>
          <span class="sxs-lookup">
            <span data-stu-id="f9753-117">The <see cref="P:System.Span`1.Length" /> property of the new <see cref="T:System.Span`1" /> would exceed <see cref="F:System.Int32.MaxValue" /></span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="AsMemory&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Memory&lt;T&gt; AsMemory&lt;T&gt; (ReadOnlyMemory&lt;T&gt; memory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Memory`1&lt;!!T&gt; AsMemory&lt;T&gt;(valuetype System.ReadOnlyMemory`1&lt;!!T&gt; memory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.AsMemory``1(System.ReadOnlyMemory{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AsMemory(Of T) (memory As ReadOnlyMemory(Of T)) As Memory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static Memory&lt;T&gt; AsMemory(ReadOnlyMemory&lt;T&gt; memory);" />
      <MemberSignature Language="F#" Value="static member AsMemory : ReadOnlyMemory&lt;'T&gt; -&gt; Memory&lt;'T&gt;" Usage="System.Runtime.InteropServices.MemoryMarshal.AsMemory memory" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="System.ReadOnlyMemory&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="f9753-118">Typ elementów w buforze pamięci tylko do odczytu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9753-118">The type of items in the read-only memory buffer.</span>
          </span>
        </typeparam>
        <param name="memory">
          <span data-ttu-id="f9753-119">Bufor pamięci tylko do odczytu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9753-119">The read-only memory buffer.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f9753-120">Tworzy <see cref="T:System.Memory`1" /> wystąpienia z <see cref="T:System.ReadOnlyMemory`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9753-120">Creates a <see cref="T:System.Memory`1" /> instance from a <see cref="T:System.ReadOnlyMemory`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f9753-121">Pamięci block represetns tej samej pamięci jako <see cref="T:System.ReadOnlyMemory`1" /> .</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9753-121">A memory block that represetns the same memory as the <see cref="T:System.ReadOnlyMemory`1" /> .</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="f9753-122">Tej metody należy użyć z najwyższą ostrożnością.</span><span class="sxs-lookup"><span data-stu-id="f9753-122">This method must be used with extreme caution.</span></span> <span data-ttu-id="f9753-123"><xref:System.ReadOnlyMemory%601> jest używana do reprezentowania niezmienialnymi danymi i innych pamięci, która nie jest przeznaczona do zapisania.</span><span class="sxs-lookup"><span data-stu-id="f9753-123"><xref:System.ReadOnlyMemory%601> is used to represent immutable data and other memory that is not meant to be written to.</span></span> <span data-ttu-id="f9753-124"><xref:System.Memory%601> wystąpienia utworzone przez tę metodę nie mają być zapisywane.</span><span class="sxs-lookup"><span data-stu-id="f9753-124"><xref:System.Memory%601> instances created by this method should not be written to.</span></span> <span data-ttu-id="f9753-125">Celem tej metody jest umożliwienie zmiennych wpisanych w formie <xref:System.Memory%601> , ale używany tylko do odczytu do przechowywania <xref:System.ReadOnlyMemory%601>.</span><span class="sxs-lookup"><span data-stu-id="f9753-125">The purpose of this method is to allow variables typed as <xref:System.Memory%601> but only used for reading to store a <xref:System.ReadOnlyMemory%601>.</span></span> 

       ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cast&lt;TFrom,TTo&gt;">
      <MemberSignature Language="C#" Value="public static ReadOnlySpan&lt;TTo&gt; Cast&lt;TFrom,TTo&gt; (ReadOnlySpan&lt;TFrom&gt; span) where TFrom : struct where TTo : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlySpan`1&lt;!!TTo&gt; Cast&lt;struct .ctor (class System.ValueType) TFrom, struct .ctor (class System.ValueType) TTo&gt;(valuetype System.ReadOnlySpan`1&lt;!!TFrom&gt; span) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.Cast``2(System.ReadOnlySpan{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Cast(Of TFrom As Structure, TTo As Structure) (span As ReadOnlySpan(Of TFrom)) As ReadOnlySpan(Of TTo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TFrom, typename TTo&gt;&#xA; where TFrom : value class where TTo : value class static ReadOnlySpan&lt;TTo&gt; Cast(ReadOnlySpan&lt;TFrom&gt; span);" />
      <MemberSignature Language="F#" Value="static member Cast : ReadOnlySpan&lt;'From (requires 'From : struct)&gt; -&gt; ReadOnlySpan&lt;'o (requires 'o : struct)&gt; (requires 'From : struct and 'o : struct)" Usage="System.Runtime.InteropServices.MemoryMarshal.Cast span" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;TTo&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TFrom">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TTo">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;TFrom&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TFrom">
          <span data-ttu-id="f9753-126">Typ zakresu źródłowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9753-126">The type of the source span.</span>
          </span>
        </typeparam>
        <typeparam name="TTo">
          <span data-ttu-id="f9753-127">Typ docelowy zakres.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9753-127">The type of the target span.</span>
          </span>
        </typeparam>
        <param name="span">
          <span data-ttu-id="f9753-128">Wycinek źródłowego do przekonwertowania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9753-128">The source slice to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f9753-129">Zakres rzutowania tylko do odczytu w jeden typ pierwotny, jak tylko do odczytu zakres innego typu pierwotnego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9753-129">Casts a read-only span of one primitive type to a read-only span of another primitive type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f9753-130">Przekonwertowana zakres tylko do odczytu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9753-130">The converted read-only span.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="f9753-131">Ani `TFrom` ani `TTo` może zawierać wskaźniki lub odwołania.</span><span class="sxs-lookup"><span data-stu-id="f9753-131">Neither `TFrom` nor `TTo` can contain pointers or references.</span></span> <span data-ttu-id="f9753-132">`TFrom` i `TTo` są sprawdzane w czasie wykonywania, aby zachować bezpieczeństwo typów.</span><span class="sxs-lookup"><span data-stu-id="f9753-132">`TFrom` and `TTo` are checked at runtime in order to preserve type safety.</span></span>  

<span data-ttu-id="f9753-133">Ta metoda jest obsługiwana tylko na platformach, które obsługują dostęp do pamięci niewyrównane lub w przypadku pamięci bloku jest wyrównany w inny sposób.</span><span class="sxs-lookup"><span data-stu-id="f9753-133">This method is supported only on platforms that support misaligned memory access or when the memory block is aligned by other means.</span></span>

       ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f9753-134">
            <paramref name="TFrom" /> lub <paramref name="TTo" /> zawiera odwołania lub wskaźniki.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9753-134">
              <paramref name="TFrom" /> or <paramref name="TTo" /> contains references or pointers.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Cast&lt;TFrom,TTo&gt;">
      <MemberSignature Language="C#" Value="public static Span&lt;TTo&gt; Cast&lt;TFrom,TTo&gt; (Span&lt;TFrom&gt; span) where TFrom : struct where TTo : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Span`1&lt;!!TTo&gt; Cast&lt;struct .ctor (class System.ValueType) TFrom, struct .ctor (class System.ValueType) TTo&gt;(valuetype System.Span`1&lt;!!TFrom&gt; span) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.Cast``2(System.Span{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Cast(Of TFrom As Structure, TTo As Structure) (span As Span(Of TFrom)) As Span(Of TTo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TFrom, typename TTo&gt;&#xA; where TFrom : value class where TTo : value class static Span&lt;TTo&gt; Cast(Span&lt;TFrom&gt; span);" />
      <MemberSignature Language="F#" Value="static member Cast : Span&lt;'From (requires 'From : struct)&gt; -&gt; Span&lt;'o (requires 'o : struct)&gt; (requires 'From : struct and 'o : struct)" Usage="System.Runtime.InteropServices.MemoryMarshal.Cast span" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Span&lt;TTo&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TFrom">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TTo">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.Span&lt;TFrom&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TFrom">
          <span data-ttu-id="f9753-135">Typ zakresu źródłowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9753-135">The type of the source span.</span>
          </span>
        </typeparam>
        <typeparam name="TTo">
          <span data-ttu-id="f9753-136">Typ docelowy zakres.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9753-136">The type of the target span.</span>
          </span>
        </typeparam>
        <param name="span">
          <span data-ttu-id="f9753-137">Wycinek źródłowego do przekonwertowania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9753-137">The source slice to convert.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f9753-138">Rzutuje zakres typu pierwotnego do zakresu innego typu pierwotnego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9753-138">Casts a span of one primitive type to a span of another primitive type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f9753-139">Przekonwertowana zakres.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9753-139">The converted span.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="f9753-140">Ani `TFrom` ani `TTo` może zawierać wskaźniki lub odwołania.</span><span class="sxs-lookup"><span data-stu-id="f9753-140">Neither `TFrom` nor `TTo` can contain pointers or references.</span></span> <span data-ttu-id="f9753-141">`TFrom` i `TTo` są sprawdzane w czasie wykonywania, aby zachować bezpieczeństwo typów.</span><span class="sxs-lookup"><span data-stu-id="f9753-141">`TFrom` and `TTo` are checked at runtime in order to preserve type safety.</span></span>  

<span data-ttu-id="f9753-142">Rzutowanie występuje w kontekście niesprawdzanym.</span><span class="sxs-lookup"><span data-stu-id="f9753-142">The cast occurs in an unchecked context.</span></span> <span data-ttu-id="f9753-143">Jeśli zakres `TTo` jest mniejsza niż zakres `TFrom`, może wystąpić utrata danych.</span><span class="sxs-lookup"><span data-stu-id="f9753-143">If the range of `TTo` is less than the range of `TFrom`, data loss can occur.</span></span> <span data-ttu-id="f9753-144">Na przykład jeśli `TFrom` jest <xref:System.Int64>, jednego z `ReadOnlySpan<Int32>` wartości jest 0x100001111110F0F, i `TTo` jest <xref:System.Int32>, wartość wynikowa zależy 11110F0F.</span><span class="sxs-lookup"><span data-stu-id="f9753-144">For example, if `TFrom` is <xref:System.Int64>, one of the `ReadOnlySpan<Int32>` values is 0x100001111110F0F, and `TTo` is <xref:System.Int32>, the resulting value is 11110F0F.</span></span>

<span data-ttu-id="f9753-145">Ta metoda jest obsługiwana tylko na platformach, które obsługują dostęp do pamięci niewyrównane lub w przypadku pamięci bloku jest wyrównany w inny sposób.</span><span class="sxs-lookup"><span data-stu-id="f9753-145">This method is supported only on platforms that support misaligned memory access or when the memory block is aligned by other means.</span></span>

       ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f9753-146">
            <paramref name="TFrom" /> lub <paramref name="TTo" /> zawiera odwołania lub wskaźniki.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9753-146">
              <paramref name="TFrom" /> or <paramref name="TTo" /> contains references or pointers.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateFromPinnedArray&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Memory&lt;T&gt; CreateFromPinnedArray&lt;T&gt; (T[] array, int start, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Memory`1&lt;!!T&gt; CreateFromPinnedArray&lt;T&gt;(!!T[] array, int32 start, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.CreateFromPinnedArray``1(``0[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateFromPinnedArray(Of T) (array As T(), start As Integer, length As Integer) As Memory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static Memory&lt;T&gt; CreateFromPinnedArray(cli::array &lt;T&gt; ^ array, int start, int length);" />
      <MemberSignature Language="F#" Value="static member CreateFromPinnedArray : 'T[] * int * int -&gt; Memory&lt;'T&gt;" Usage="System.Runtime.InteropServices.MemoryMarshal.CreateFromPinnedArray (array, start, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="f9753-147">Typ tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9753-147">The type of the array.</span>
          </span>
        </typeparam>
        <param name="array">
          <span data-ttu-id="f9753-148">Tablica źródłowa wstępnie przypięty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9753-148">The pre-pinned source array.</span>
          </span>
        </param>
        <param name="start">
          <span data-ttu-id="f9753-149">Indeks <paramref name="array" /> od którego należy rozpocząć blok pamięci.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9753-149">The index of <paramref name="array" /> at which to begin the memory block.</span>
          </span>
        </param>
        <param name="length">
          <span data-ttu-id="f9753-150">Liczba elementów do uwzględnienia w bloku pamięci.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9753-150">The number of items to include in the memory block.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f9753-151">Tworzy nowy bufor pamięci dla części tablicy docelowej wstępnie przypiętych rozpoczynający się od <paramref name="start" /> indeksu, składające się z <paramref name="length" /> elementów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9753-151">Creates a new memory buffer over the portion of the pre-pinned target array beginning at the <paramref name="start" /> index and consisting of <paramref name="length" /> items.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f9753-152">Blok pamięci nad elementami określonego <paramref name="array" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9753-152">A block of memory over the specified elements of <paramref name="array" />.</span>
          </span>
          <span data-ttu-id="f9753-153">Jeśli <paramref name="array" /> jest <see langword="null" />, lub jeśli <paramref name="start" /> i <paramref name="length" /> to 0, metoda zwraca <see cref="T:System.Memory`1" /> wystąpienie <see cref="System.Memory`1.Length" /> zero.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9753-153">If <paramref name="array" /> is <see langword="null" />, or if <paramref name="start" /> and <paramref name="length" /> are 0, the method returns a <see cref="T:System.Memory`1" /> instance of <see cref="System.Memory`1.Length" /> zero.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="f9753-154">Tablicy musi być przypiętych zanim ta metoda jest wywoływana, a ta tablica nie może być nieprzypięte podczas <xref:System.Memory%601> buforu, który zwraca jest nadal w użyciu.</span><span class="sxs-lookup"><span data-stu-id="f9753-154">The array must already be pinned before this method is called, and that array must not be unpinned while the <xref:System.Memory%601> buffer that it returns is still in use.</span></span> <span data-ttu-id="f9753-155">Wywołanie tej metody w tablicy nieprzypięte może spowodować uszkodzenie pamięci.</span><span class="sxs-lookup"><span data-stu-id="f9753-155">Calling this method on an unpinned array could result in memory corruption.</span></span>

       ]]></format>
        </remarks>
        <exception cref="T:System.ArrayTypeMismatchException">
          <span data-ttu-id="f9753-156">
            <paramref name="array" /> jest kowariantny oraz typ <paramref name="array" /> nie jest dokładnie <paramref name="T[]" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9753-156">
              <paramref name="array" /> is covariant, and the type of <paramref name="array" /> is not exactly <paramref name="T[]" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="f9753-157">
            <paramref name="start" /> Lub Indeks końcowy nie jest z zakresu od 0 do <see cref="P:System.Array.Length" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9753-157">The <paramref name="start" /> or the end index is not in the range of 0 to <see cref="P:System.Array.Length" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="CreateReadOnlySpan&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static ReadOnlySpan&lt;T&gt; CreateReadOnlySpan&lt;T&gt; (ref T reference, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlySpan`1&lt;!!T&gt; CreateReadOnlySpan&lt;T&gt;(!!T&amp; reference, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.CreateReadOnlySpan``1(``0@,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateReadOnlySpan(Of T) (ByRef reference As T, length As Integer) As ReadOnlySpan(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static ReadOnlySpan&lt;T&gt; CreateReadOnlySpan(T % reference, int length);" />
      <MemberSignature Language="F#" Value="static member CreateReadOnlySpan :  * int -&gt; ReadOnlySpan&lt;'T&gt;" Usage="System.Runtime.InteropServices.MemoryMarshal.CreateReadOnlySpan (reference, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="reference" Type="T" RefType="ref" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="f9753-158">Typ elementów danych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9753-158">The type of the data items.</span>
          </span>
        </typeparam>
        <param name="reference">
          <span data-ttu-id="f9753-159">Odwołanie do danych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9753-159">A reference to data.</span>
          </span>
        </param>
        <param name="length">
          <span data-ttu-id="f9753-160">Liczba <paramref name="T" /> elementów, <paramref name="reference" /> zawiera.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9753-160">The number of <paramref name="T" /> elements that <paramref name="reference" /> contains.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f9753-161">Tworzy nowy zakres tylko do odczytu przez część regularnych zarządzanego obiektu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9753-161">Creates a new read-only span over a portion of a regular managed object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f9753-162">Zakres tylko do odczytu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9753-162">A read-only span.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="f9753-163">Ta metoda może być przydatne, jeśli część obiektu zarządzanego reprezentuje stałą tablicy.</span><span class="sxs-lookup"><span data-stu-id="f9753-163">This method can be useful if part of a managed object represents a fixed array.</span></span> 

> [!WARNING]
> <span data-ttu-id="f9753-164">Ta metoda powinna służyć ostrożnie.</span><span class="sxs-lookup"><span data-stu-id="f9753-164">This method should be used with caution.</span></span> <span data-ttu-id="f9753-165">Niebezpiecznie chodzić ponieważ `length` argument nie jest zaznaczone.</span><span class="sxs-lookup"><span data-stu-id="f9753-165">It is dangerous because the `length` argument is not checked.</span></span> <span data-ttu-id="f9753-166">Ponadto okres istnienia zwrócone zakres nie zostanie zweryfikowana pod kątem bezpieczeństwa przez języków obsługujących zakresu.</span><span class="sxs-lookup"><span data-stu-id="f9753-166">In addition, the lifetime of the returned span is not validated for safety by span-aware languages.</span></span>

       ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateSpan&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Span&lt;T&gt; CreateSpan&lt;T&gt; (ref T reference, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Span`1&lt;!!T&gt; CreateSpan&lt;T&gt;(!!T&amp; reference, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.CreateSpan``1(``0@,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateSpan(Of T) (ByRef reference As T, length As Integer) As Span(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static Span&lt;T&gt; CreateSpan(T % reference, int length);" />
      <MemberSignature Language="F#" Value="static member CreateSpan :  * int -&gt; Span&lt;'T&gt;" Usage="System.Runtime.InteropServices.MemoryMarshal.CreateSpan (reference, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Span&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="reference" Type="T" RefType="ref" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="f9753-167">Typ elementów danych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9753-167">The type of the data items.</span>
          </span>
        </typeparam>
        <param name="reference">
          <span data-ttu-id="f9753-168">Odwołanie do danych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9753-168">A reference to data.</span>
          </span>
        </param>
        <param name="length">
          <span data-ttu-id="f9753-169">Liczba <paramref name="T" /> elementów, <paramref name="reference" /> zawiera.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9753-169">The number of <paramref name="T" /> elements that <paramref name="reference" /> contains.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f9753-170">Tworzy nowy zakres za pośrednictwem część regularnych zarządzanego obiektu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9753-170">Creates a new span over a portion of a regular managed object.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f9753-171">Zakres.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9753-171">A span.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="f9753-172">Ta metoda może być przydatne, jeśli część obiektu zarządzanego reprezentuje stałą tablicy.</span><span class="sxs-lookup"><span data-stu-id="f9753-172">This method can be useful if part of a managed object represents a fixed array.</span></span> 

> [!WARNING]
> <span data-ttu-id="f9753-173">Ta metoda powinna służyć ostrożnie.</span><span class="sxs-lookup"><span data-stu-id="f9753-173">This method should be used with caution.</span></span> <span data-ttu-id="f9753-174">Niebezpiecznie chodzić ponieważ `length` argument nie jest zaznaczone.</span><span class="sxs-lookup"><span data-stu-id="f9753-174">It is dangerous because the `length` argument is not checked.</span></span> <span data-ttu-id="f9753-175">Ponadto okres istnienia zwrócone zakres nie zostanie zweryfikowana pod kątem bezpieczeństwa przez języków obsługujących zakresu.</span><span class="sxs-lookup"><span data-stu-id="f9753-175">In addition, the lifetime of the returned span is not validated for safety by span-aware languages.</span></span>

       ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetReference&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T GetReference&lt;T&gt; (ReadOnlySpan&lt;T&gt; span);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T GetReference&lt;T&gt;(valuetype System.ReadOnlySpan`1&lt;!!T&gt; span) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.GetReference``1(System.ReadOnlySpan{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetReference(Of T) (span As ReadOnlySpan(Of T)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T % GetReference(ReadOnlySpan&lt;T&gt; span);" />
      <MemberSignature Language="F#" Value="static member GetReference : ReadOnlySpan&lt;'T&gt; -&gt; " Usage="System.Runtime.InteropServices.MemoryMarshal.GetReference span" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue RefType="Ref">
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="f9753-176">Typ elementów w zakresie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9753-176">The type of items in the span.</span>
          </span>
        </typeparam>
        <param name="span">
          <span data-ttu-id="f9753-177">Tylko do odczytu zakres, z którego pobierane są odwołania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9753-177">The read-only span from which the reference is retrieved.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f9753-178">Zwraca odwołanie do elementu zakres tylko do odczytu pod indeksem 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9753-178">Returns a reference to the element of the read-only span at index 0.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f9753-179">Odwołanie do elementu o indeksie 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9753-179">A reference to the element at index 0.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="f9753-180">Jeśli zakres tylko do odczytu jest pusty, ta metoda zwraca odwołanie do lokalizacji, gdzie element pod indeksem 0 może być przechowywane.</span><span class="sxs-lookup"><span data-stu-id="f9753-180">If the read-only span is empty, this method returns a reference to the location where the element at index 0 would have been stored.</span></span> <span data-ttu-id="f9753-181">Odniesienie może być lub może nie być `null`.</span><span class="sxs-lookup"><span data-stu-id="f9753-181">Such a reference may or may not be `null`.</span></span> <span data-ttu-id="f9753-182">Zwracane odwołanie może służyć do przypinania, ale nigdy nie musi być wyłuskany.</span><span class="sxs-lookup"><span data-stu-id="f9753-182">The returned reference can be used for pinning, but it must never be dereferenced.</span></span>

       ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetReference&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T GetReference&lt;T&gt; (Span&lt;T&gt; span);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T GetReference&lt;T&gt;(valuetype System.Span`1&lt;!!T&gt; span) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.GetReference``1(System.Span{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetReference(Of T) (span As Span(Of T)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T % GetReference(Span&lt;T&gt; span);" />
      <MemberSignature Language="F#" Value="static member GetReference : Span&lt;'T&gt; -&gt; " Usage="System.Runtime.InteropServices.MemoryMarshal.GetReference span" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue RefType="Ref">
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.Span&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="f9753-183">Typ elementów w zakresie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9753-183">The type of items in the span.</span>
          </span>
        </typeparam>
        <param name="span">
          <span data-ttu-id="f9753-184">Zakres, z którego pobierane są odwołania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9753-184">The span from which the reference is retrieved.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f9753-185">Zwraca odwołanie do elementu span pod indeksem 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9753-185">Returns a reference to the element of the span at index 0.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f9753-186">Odwołanie do elementu o indeksie 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9753-186">A reference to the element at index 0.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="f9753-187">Jeśli zakres jest pusty, ta metoda zwraca odwołanie do lokalizacji, gdzie element pod indeksem 0 może być przechowywane.</span><span class="sxs-lookup"><span data-stu-id="f9753-187">If the span is empty, this method returns a reference to the location where the element at index 0 would have been stored.</span></span> <span data-ttu-id="f9753-188">Odniesienie może być lub może nie być `null`.</span><span class="sxs-lookup"><span data-stu-id="f9753-188">Such a reference may or may not be `null`.</span></span> <span data-ttu-id="f9753-189">Zwracane odwołanie może służyć do przypinania, ale nigdy nie musi być wyłuskany.</span><span class="sxs-lookup"><span data-stu-id="f9753-189">The returned reference can be used for pinning, but it must never be dereferenced.</span></span>

       ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Read&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T Read&lt;T&gt; (ReadOnlySpan&lt;byte&gt; source) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T Read&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.Read``1(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Read(Of T As Structure) (source As ReadOnlySpan(Of Byte)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static T Read(ReadOnlySpan&lt;System::Byte&gt; source);" />
      <MemberSignature Language="F#" Value="static member Read : ReadOnlySpan&lt;byte&gt; -&gt; 'T (requires 'T : struct)" Usage="System.Runtime.InteropServices.MemoryMarshal.Read source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="f9753-190">Typ elementu do pobrania z zakresu tylko do odczytu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9753-190">The type of the item to retrieve from the read-only span.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="f9753-191">Zakres tylko do odczytu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9753-191">A read-only span.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f9753-192">Odczytuje struktury typu</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9753-192">Reads a structure of type</span>
          </span>
          <param name="T" />
          <span data-ttu-id="f9753-193">poza zakres tylko do odczytu bajtów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9753-193">out of a read-only span of bytes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f9753-194">Struktura pobierane z zakresu tylko do odczytu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9753-194">The structure retrieved from the read-only span.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="f9753-195">`T` nie może zawierać wskaźniki lub odwołania.</span><span class="sxs-lookup"><span data-stu-id="f9753-195">`T` cannot contain pointers or references.</span></span> <span data-ttu-id="f9753-196">"Są sprawdzane w czasie wykonywania w celu zachowania bezpieczeństwa typu.</span><span class="sxs-lookup"><span data-stu-id="f9753-196">\`It is checked at runtime in order to preserve type safety.</span></span>  

       ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f9753-197">
            <paramref name="T" /> zawiera odwołania lub wskaźniki.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9753-197">
              <paramref name="T" /> contains references or pointers.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="f9753-198">
            <paramref name="source" /> jest mniejsza niż <paramref name="T" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9753-198">
              <paramref name="source" /> is smaller than <paramref name="T" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToEnumerable&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;T&gt; ToEnumerable&lt;T&gt; (ReadOnlyMemory&lt;T&gt; memory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; ToEnumerable&lt;T&gt;(valuetype System.ReadOnlyMemory`1&lt;!!T&gt; memory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.ToEnumerable``1(System.ReadOnlyMemory{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToEnumerable(Of T) (memory As ReadOnlyMemory(Of T)) As IEnumerable(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static System::Collections::Generic::IEnumerable&lt;T&gt; ^ ToEnumerable(ReadOnlyMemory&lt;T&gt; memory);" />
      <MemberSignature Language="F#" Value="static member ToEnumerable : ReadOnlyMemory&lt;'T&gt; -&gt; seq&lt;'T&gt;" Usage="System.Runtime.InteropServices.MemoryMarshal.ToEnumerable memory" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="System.ReadOnlyMemory&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="f9753-199">Typ elementów w buforze pamięci tylko do odczytu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9753-199">The type of the items in the read-only memory buffer.</span>
          </span>
        </typeparam>
        <param name="memory">
          <span data-ttu-id="f9753-200">Bufor pamięci tylko do odczytu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9753-200">A read-only memory buffer.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f9753-201">Tworzy <see cref="T:System.Collections.Generic.IEnumerable`1" /> widoku bufora podanego pamięci tylko do odczytu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9753-201">Creates an <see cref="T:System.Collections.Generic.IEnumerable`1" /> view of the given read-only memory buffer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f9753-202">Wyliczalne widok <paramref name="memory" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9753-202">An enumerable view of <paramref name="memory" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="f9753-203">Ta metoda umożliwia bufora pamięci tylko do odczytu do użycia w istniejących interfejsów API, które wymagają parametru typu <xref:System.Collections.Generic.IEnumerable%601>.</span><span class="sxs-lookup"><span data-stu-id="f9753-203">This method allows a read-only memory buffer to be used in existing APIs that require a parameter of type <xref:System.Collections.Generic.IEnumerable%601>.</span></span> 

       ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetArray&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool TryGetArray&lt;T&gt; (ReadOnlyMemory&lt;T&gt; memory, out ArraySegment&lt;T&gt; segment);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryGetArray&lt;T&gt;(valuetype System.ReadOnlyMemory`1&lt;!!T&gt; memory, [out] valuetype System.ArraySegment`1&lt;!!T&gt;&amp; segment) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.TryGetArray``1(System.ReadOnlyMemory{``0},System.ArraySegment{``0}@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryGetArray(Of T) (memory As ReadOnlyMemory(Of T), ByRef segment As ArraySegment(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static bool TryGetArray(ReadOnlyMemory&lt;T&gt; memory, [Runtime::InteropServices::Out] ArraySegment&lt;T&gt; % segment);" />
      <MemberSignature Language="F#" Value="static member TryGetArray : ReadOnlyMemory&lt;'T&gt; *  -&gt; bool" Usage="System.Runtime.InteropServices.MemoryMarshal.TryGetArray (memory, segment)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="System.ReadOnlyMemory&lt;T&gt;" />
        <Parameter Name="segment" Type="System.ArraySegment&lt;T&gt;" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="f9753-204">Typ elementów w buforze pamięci tylko do odczytu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9753-204">The type of items in the read-only memory buffer.</span>
          </span>
        </typeparam>
        <param name="memory">
          <span data-ttu-id="f9753-205">Bufor pamięci tylko do odczytu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9753-205">A read-only memory buffer.</span>
          </span>
        </param>
        <param name="segment">
          <span data-ttu-id="f9753-206">Po powrocie z tej metody zawiera segment macierzy, pobierane z bazowego bufora pamięci tylko do odczytu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9753-206">When this method returns, contains the array segment retrieved from the underlying read-only memory buffer.</span>
          </span>
          <span data-ttu-id="f9753-207">Jeśli metoda nie powiedzie się, metoda zwraca domyślną segmentu tablicy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9753-207">If the method fails, the method returns a default array segment.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f9753-208">Próbuje pobrać segment macierzy z bazowego bufora pamięci.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9753-208">Tries to get an array segment from the underlying memory buffer.</span>
          </span>
          <span data-ttu-id="f9753-209">Zwracana wartość wskazuje powodzenie operacji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9753-209">The return value indicates the success of the operation.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f9753-210">
            <see langword="true" /> Jeśli wywołanie metody zakończy się pomyślnie; <see langword="false" /> inaczej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9753-210">
              <see langword="true" /> if the method call succeeds; <see langword="false" /> otherwise.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetMemoryManager&lt;T,TManager&gt;">
      <MemberSignature Language="C#" Value="public static bool TryGetMemoryManager&lt;T,TManager&gt; (ReadOnlyMemory&lt;T&gt; memory, out TManager manager) where TManager : System.Buffers.MemoryManager&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryGetMemoryManager&lt;T, (class System.Buffers.MemoryManager`1&lt;!!T&gt;) TManager&gt;(valuetype System.ReadOnlyMemory`1&lt;!!T&gt; memory, [out] !!TManager&amp; manager) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.TryGetMemoryManager``2(System.ReadOnlyMemory{``0},``1@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryGetMemoryManager(Of T, TManager) (memory As ReadOnlyMemory(Of T), ByRef manager As TManager) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T, typename TManager&gt;&#xA; where TManager : System::Buffers::MemoryManager&lt;T&gt; static bool TryGetMemoryManager(ReadOnlyMemory&lt;T&gt; memory, [Runtime::InteropServices::Out] TManager % manager);" />
      <MemberSignature Language="F#" Value="static member TryGetMemoryManager : ReadOnlyMemory&lt;'T&gt; *  -&gt; bool (requires 'Manager :&gt; System.Buffers.MemoryManager&lt;'T&gt;)" Usage="System.Runtime.InteropServices.MemoryMarshal.TryGetMemoryManager (memory, manager)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
        <TypeParameter Name="TManager">
          <Constraints>
            <BaseTypeName>System.Buffers.MemoryManager&lt;T&gt;</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="System.ReadOnlyMemory&lt;T&gt;" />
        <Parameter Name="manager" Type="TManager" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="f9753-211">Typ elementów w buforze pamięci tylko do odczytu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9753-211">The type of the items in the read-only memory buffer.</span>
          </span>
        </typeparam>
        <typeparam name="TManager">
          <span data-ttu-id="f9753-212">Typ <see cref="T:System.Buffers.MemoryManager`1" /> do pobrania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9753-212">The type of the <see cref="T:System.Buffers.MemoryManager`1" /> to retrieve.</span>
          </span>
        </typeparam>
        <param name="memory">
          <span data-ttu-id="f9753-213">Bufor pamięci tylko do odczytu, dla którego należy pobrać menedżera pamięci.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9753-213">The read-only memory buffer for which to get the memory manager.</span>
          </span>
        </param>
        <param name="manager">
          <span data-ttu-id="f9753-214">Gdy metoda zwróci wartość, Menedżera <paramref name="memory" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9753-214">When the method returns, the manager of <paramref name="memory" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f9753-215">Próbuje pobrać <see cref="T:System.Buffers.MemoryManager`1" /> z podstawowego buforu pamięci tylko do odczytu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9753-215">Tries to retrieve a <see cref="T:System.Buffers.MemoryManager`1" /> from the underlying read-only memory buffer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f9753-216">
            <see langword="true" /> Jeśli metoda pobrać Menedżer pamięci; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9753-216">
              <see langword="true" /> if the method retrieved the memory manager; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetMemoryManager&lt;T,TManager&gt;">
      <MemberSignature Language="C#" Value="public static bool TryGetMemoryManager&lt;T,TManager&gt; (ReadOnlyMemory&lt;T&gt; memory, out TManager manager, out int start, out int length) where TManager : System.Buffers.MemoryManager&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryGetMemoryManager&lt;T, (class System.Buffers.MemoryManager`1&lt;!!T&gt;) TManager&gt;(valuetype System.ReadOnlyMemory`1&lt;!!T&gt; memory, [out] !!TManager&amp; manager, [out] int32&amp; start, [out] int32&amp; length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.TryGetMemoryManager``2(System.ReadOnlyMemory{``0},``1@,System.Int32@,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryGetMemoryManager(Of T, TManager) (memory As ReadOnlyMemory(Of T), ByRef manager As TManager, ByRef start As Integer, ByRef length As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T, typename TManager&gt;&#xA; where TManager : System::Buffers::MemoryManager&lt;T&gt; static bool TryGetMemoryManager(ReadOnlyMemory&lt;T&gt; memory, [Runtime::InteropServices::Out] TManager % manager, [Runtime::InteropServices::Out] int % start, [Runtime::InteropServices::Out] int % length);" />
      <MemberSignature Language="F#" Value="static member TryGetMemoryManager : ReadOnlyMemory&lt;'T&gt; *  *  *  -&gt; bool (requires 'Manager :&gt; System.Buffers.MemoryManager&lt;'T&gt;)" Usage="System.Runtime.InteropServices.MemoryMarshal.TryGetMemoryManager (memory, manager, start, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
        <TypeParameter Name="TManager">
          <Constraints>
            <BaseTypeName>System.Buffers.MemoryManager&lt;T&gt;</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="System.ReadOnlyMemory&lt;T&gt;" />
        <Parameter Name="manager" Type="TManager" RefType="out" />
        <Parameter Name="start" Type="System.Int32" RefType="out" />
        <Parameter Name="length" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="f9753-217">Typ elementów w buforze pamięci tylko do odczytu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9753-217">The type of the items in the read-only memory buffer.</span>
          </span>
        </typeparam>
        <typeparam name="TManager">
          <span data-ttu-id="f9753-218">Typ <see cref="T:System.Buffers.MemoryManager`1" /> do pobrania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9753-218">The type of the <see cref="T:System.Buffers.MemoryManager`1" /> to retrieve.</span>
          </span>
        </typeparam>
        <param name="memory">
          <span data-ttu-id="f9753-219">Bufor pamięci tylko do odczytu, dla którego należy pobrać menedżera pamięci.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9753-219">The read-only memory buffer for which to get the memory manager.</span>
          </span>
        </param>
        <param name="manager">
          <span data-ttu-id="f9753-220">Gdy metoda zwróci wartość, Menedżera <paramref name="memory" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9753-220">When the method returns, the manager of <paramref name="memory" />.</span>
          </span>
        </param>
        <param name="start">
          <span data-ttu-id="f9753-221">Gdy metoda zwróci wartość, przesunięcie od początku <paramref name="manager" /> , <paramref name="memory" /> reprezentuje.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9753-221">When the method returns, the offset from the start of the <paramref name="manager" /> that the <paramref name="memory" /> represents.</span>
          </span>
        </param>
        <param name="length">
          <span data-ttu-id="f9753-222">Gdy metoda zwróci wartość, długość <paramref name="manager" /> , <paramref name="memory" /> reprezentuje.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9753-222">When the method returns, the length of the <paramref name="manager" /> that the <paramref name="memory" /> represents.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f9753-223">Próbuje pobrać <see cref="T:System.Buffers.MemoryManager`1" />, Rozpocznij indeks i długość z podstawowego buforu pamięci tylko do odczytu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9753-223">Tries to retrieve a <see cref="T:System.Buffers.MemoryManager`1" />, start index, and length from the underlying read-only memory buffer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f9753-224">
            <see langword="true" /> Jeśli wykonanie metody powiodło się; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9753-224">
              <see langword="true" /> if the method succeeded; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetString">
      <MemberSignature Language="C#" Value="public static bool TryGetString (ReadOnlyMemory&lt;char&gt; memory, out string text, out int start, out int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryGetString(valuetype System.ReadOnlyMemory`1&lt;char&gt; memory, [out] string&amp; text, [out] int32&amp; start, [out] int32&amp; length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.TryGetString(System.ReadOnlyMemory{System.Char},System.String@,System.Int32@,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryGetString (memory As ReadOnlyMemory(Of Char), ByRef text As String, ByRef start As Integer, ByRef length As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryGetString(ReadOnlyMemory&lt;char&gt; memory, [Runtime::InteropServices::Out] System::String ^ % text, [Runtime::InteropServices::Out] int % start, [Runtime::InteropServices::Out] int % length);" />
      <MemberSignature Language="F#" Value="static member TryGetString : ReadOnlyMemory&lt;char&gt; *  *  *  -&gt; bool" Usage="System.Runtime.InteropServices.MemoryMarshal.TryGetString (memory, text, start, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memory" Type="System.ReadOnlyMemory&lt;System.Char&gt;" />
        <Parameter Name="text" Type="System.String" RefType="out" />
        <Parameter Name="start" Type="System.Int32" RefType="out" />
        <Parameter Name="length" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="memory">
          <span data-ttu-id="f9753-225">Pamięci tylko do odczytu zawierające blok znaków.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9753-225">Read-only memory containing a block of characters.</span>
          </span>
        </param>
        <param name="text">
          <span data-ttu-id="f9753-226">Gdy metoda zwraca, ciąg znajdujący się w buforze pamięci.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9753-226">When the method returns, the string contained in the memory buffer.</span>
          </span>
        </param>
        <param name="start">
          <span data-ttu-id="f9753-227">Począwszy od lokalizacji w <paramref name="text" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9753-227">The starting location in <paramref name="text" />.</span>
          </span>
        </param>
        <param name="length">
          <span data-ttu-id="f9753-228">Liczba znaków w <paramref name="text" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9753-228">The number of characters in <paramref name="text" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f9753-229">Próbuje pobrać podstawowego ciągu z <see langword="System.ReadOnlyMemory&lt;Char&gt;" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9753-229">Tries to get the underlying string from a <see langword="System.ReadOnlyMemory&lt;Char&gt;" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f9753-230">
            <see langword="true" /> Jeśli metoda pobiera pomyślnie podstawowego ciągu; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9753-230">
              <see langword="true" /> if the method successfully retrieves the underlying string; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryRead&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool TryRead&lt;T&gt; (ReadOnlySpan&lt;byte&gt; source, out T value) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryRead&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] !!T&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.TryRead``1(System.ReadOnlySpan{System.Byte},``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryRead(Of T As Structure) (source As ReadOnlySpan(Of Byte), ByRef value As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static bool TryRead(ReadOnlySpan&lt;System::Byte&gt; source, [Runtime::InteropServices::Out] T % value);" />
      <MemberSignature Language="F#" Value="static member TryRead : ReadOnlySpan&lt;byte&gt; *  -&gt; bool (requires 'T : struct)" Usage="System.Runtime.InteropServices.MemoryMarshal.TryRead (source, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="T" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="f9753-231">Typ struktury do pobrania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9753-231">The type of the structure to retrieve.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="f9753-232">Tylko do odczytu zakres bajtów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9753-232">A read-only span of bytes.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="f9753-233">Gdy metoda zwróci wartość, wystąpienie <paramref name="T" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9753-233">When the method returns, an instance of <paramref name="T" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f9753-234">Próbuje odczytać struktury typu <paramref name="T" /> z tylko do odczytu zakresu bajtów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9753-234">Tries to read a structure of type <paramref name="T" /> from a read-only span of bytes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f9753-235">
            <see langword="true" /> Jeśli metoda zakończy się powodzeniem, podczas pobierania wystąpienia struktury; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9753-235">
              <see langword="true" /> if the method succeeds in retrieving an instance of the structure; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="f9753-236">`T` nie może zawierać wskaźniki lub odwołania.</span><span class="sxs-lookup"><span data-stu-id="f9753-236">`T` cannot contain pointers or references.</span></span> <span data-ttu-id="f9753-237">"Są sprawdzane w czasie wykonywania w celu zachowania bezpieczeństwa typu.</span><span class="sxs-lookup"><span data-stu-id="f9753-237">\`It is checked at runtime in order to preserve type safety.</span></span>  

       ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f9753-238">
            <paramref name="T" /> zawiera odwołania lub wskaźniki.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9753-238">
              <paramref name="T" /> contains references or pointers.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="TryWrite&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool TryWrite&lt;T&gt; (Span&lt;byte&gt; destination, ref T value) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryWrite&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Span`1&lt;unsigned int8&gt; destination, !!T&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.TryWrite``1(System.Span{System.Byte},``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryWrite(Of T As Structure) (destination As Span(Of Byte), ByRef value As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static bool TryWrite(Span&lt;System::Byte&gt; destination, T % value);" />
      <MemberSignature Language="F#" Value="static member TryWrite : Span&lt;byte&gt; *  -&gt; bool (requires 'T : struct)" Usage="System.Runtime.InteropServices.MemoryMarshal.TryWrite (destination, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="T" RefType="ref" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="f9753-239">Typ struktury.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9753-239">The type of the structure.</span>
          </span>
        </typeparam>
        <param name="destination">
          <span data-ttu-id="f9753-240">Zakres bajtów, które mają zawierać strukturę.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9753-240">The span of bytes to contain the structure.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="f9753-241">Struktura, która ma zostać zapisana zakresu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9753-241">The structure to be written to the span.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f9753-242">Próbuje zapisuje struktury typu <paramref name="T" /> do zakresu bajtów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9753-242">Tries to writes a structure of type <paramref name="T" /> into a span of bytes.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="f9753-243">
            <see langword="true" /> Jeśli operacja zapisu zakończyło się pomyślnie; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9753-243">
              <see langword="true" /> if the write operation succeeded; otherwise, <see langword="false" />.</span>
          </span>
          <span data-ttu-id="f9753-244">Metoda ta zwraca <see langword="false" /> Jeśli zakres jest zbyt mały, aby zawierała <paramref name="T" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9753-244">The method returns <see langword="false" /> if the span is too small to contain <paramref name="T" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="f9753-245">`T` nie może zawierać wskaźniki lub odwołania.</span><span class="sxs-lookup"><span data-stu-id="f9753-245">`T` cannot contain pointers or references.</span></span> <span data-ttu-id="f9753-246">"Są sprawdzane w czasie wykonywania w celu zachowania bezpieczeństwa typu.</span><span class="sxs-lookup"><span data-stu-id="f9753-246">\`It is checked at runtime in order to preserve type safety.</span></span>  

       ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f9753-247">
            <paramref name="TFrom" /> lub <paramref name="TTo" /> zawiera odwołania lub wskaźniki.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9753-247">
              <paramref name="TFrom" /> or <paramref name="TTo" /> contains references or pointers.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Write&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void Write&lt;T&gt; (Span&lt;byte&gt; destination, ref T value) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Span`1&lt;unsigned int8&gt; destination, !!T&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.Write``1(System.Span{System.Byte},``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write(Of T As Structure) (destination As Span(Of Byte), ByRef value As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static void Write(Span&lt;System::Byte&gt; destination, T % value);" />
      <MemberSignature Language="F#" Value="static member Write : Span&lt;byte&gt; *  -&gt; unit (requires 'T : struct)" Usage="System.Runtime.InteropServices.MemoryMarshal.Write (destination, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="T" RefType="ref" />
      </Parameters>
      <Docs>
        <typeparam name="T">
          <span data-ttu-id="f9753-248">Typ struktury.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9753-248">The type of the structure.</span>
          </span>
        </typeparam>
        <param name="destination">
          <span data-ttu-id="f9753-249">Zakres bajtów, które mają zawierać strukturę.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9753-249">The span of bytes to contain the structure.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="f9753-250">Struktura, która ma zostać zapisana zakresu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9753-250">The structure to be written to the span.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="f9753-251">Zapisuje struktury typu <paramref name="T" /> do zakresu bajtów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9753-251">Writes a structure of type <paramref name="T" /> into a span of bytes.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="f9753-252">`T` nie może zawierać wskaźniki lub odwołania.</span><span class="sxs-lookup"><span data-stu-id="f9753-252">`T` cannot contain pointers or references.</span></span> <span data-ttu-id="f9753-253">"Są sprawdzane w czasie wykonywania w celu zachowania bezpieczeństwa typu.</span><span class="sxs-lookup"><span data-stu-id="f9753-253">\`It is checked at runtime in order to preserve type safety.</span></span>  

       ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="f9753-254">
            <paramref name="T" /> zawiera odwołania lub wskaźniki.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9753-254">
              <paramref name="T" /> contains references or pointers.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="f9753-255">
            <paramref name="destination" /> jest zbyt mały, aby zawierała <paramref name="value" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f9753-255">
              <paramref name="destination" /> is too small to contain <paramref name="value" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
  </Members>
</Type>