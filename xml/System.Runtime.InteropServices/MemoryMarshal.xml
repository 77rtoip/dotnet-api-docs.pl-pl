<Type Name="MemoryMarshal" FullName="System.Runtime.InteropServices.MemoryMarshal">
  <Metadata><Meta Name="ms.openlocfilehash" Value="10291d94526466a6a071d4ad6764465616a0532c" /><Meta Name="ms.sourcegitcommit" Value="634678f7ccd2928c6b2cf792a301b079b63639af" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="07/26/2019" /><Meta Name="ms.locfileid" Value="68542990" /></Metadata><TypeSignature Language="C#" Value="public static class MemoryMarshal" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit MemoryMarshal extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.InteropServices.MemoryMarshal" />
  <TypeSignature Language="VB.NET" Value="Public Class MemoryMarshal" />
  <TypeSignature Language="C++ CLI" Value="public ref class MemoryMarshal abstract sealed" />
  <TypeSignature Language="F#" Value="type MemoryMarshal = class" />
  <AssemblyInfo>
    <AssemblyName>System.Memory</AssemblyName>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="e6995-101">Zapewnia metody współpracy <see cref="T:System.Memory`1" />z, <see cref="T:System.ReadOnlyMemory`1" />, <see cref="T:System.Span`1" />i <see cref="T:System.ReadOnlySpan`1" />.</span><span class="sxs-lookup"><span data-stu-id="e6995-101">Provides methods to interoperate with <see cref="T:System.Memory`1" />, <see cref="T:System.ReadOnlyMemory`1" />,  <see cref="T:System.Span`1" />, and  <see cref="T:System.ReadOnlySpan`1" />.</span></span></summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName="AsBytes&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static ReadOnlySpan&lt;byte&gt; AsBytes&lt;T&gt; (ReadOnlySpan&lt;T&gt; span) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; AsBytes&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.ReadOnlySpan`1&lt;!!T&gt; span) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.AsBytes``1(System.ReadOnlySpan{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AsBytes(Of T As Structure) (span As ReadOnlySpan(Of T)) As ReadOnlySpan(Of Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static ReadOnlySpan&lt;System::Byte&gt; AsBytes(ReadOnlySpan&lt;T&gt; span);" />
      <MemberSignature Language="F#" Value="static member AsBytes : ReadOnlySpan&lt;'T (requires 'T : struct)&gt; -&gt; ReadOnlySpan&lt;byte&gt; (requires 'T : struct)" Usage="System.Runtime.InteropServices.MemoryMarshal.AsBytes span" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;System.Byte&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="e6995-102">Typ elementów w zakresie tylko do odczytu.</span><span class="sxs-lookup"><span data-stu-id="e6995-102">The type of items in the read-only span.</span></span></typeparam>
        <param name="span"><span data-ttu-id="e6995-103">Plasterek źródłowy do przekonwertowania.</span><span class="sxs-lookup"><span data-stu-id="e6995-103">The source slice to convert.</span></span></param>
        <summary><span data-ttu-id="e6995-104">Rzutuje jeden <paramref name="T" /> <see langword="ReadOnlySpan&lt;Byte&gt;" />z typów pierwotnych, do. <see cref="T:System.ReadOnlySpan`1" /></span><span class="sxs-lookup"><span data-stu-id="e6995-104">Casts a <see cref="T:System.ReadOnlySpan`1" /> of one primitive type, <paramref name="T" />, to a <see langword="ReadOnlySpan&lt;Byte&gt;" />.</span></span></summary>
        <returns><span data-ttu-id="e6995-105">Zakres tylko do odczytu typu <see cref="T:System.Byte" />.</span><span class="sxs-lookup"><span data-stu-id="e6995-105">A read-only span of type <see cref="T:System.Byte" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="e6995-106">`T`nie może zawierać wskaźników lub odwołań.</span><span class="sxs-lookup"><span data-stu-id="e6995-106">`T` cannot contain pointers or references.</span></span> <span data-ttu-id="e6995-107">`T`jest sprawdzana w czasie wykonywania, aby zachować bezpieczeństwo typu.</span><span class="sxs-lookup"><span data-stu-id="e6995-107">`T` is checked at runtime in order to preserve type safety.</span></span>  

      ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e6995-108"><paramref name="T" />zawiera odwołania lub wskaźniki.</span><span class="sxs-lookup"><span data-stu-id="e6995-108"><paramref name="T" /> contains references or pointers.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="e6995-109">Wartość <see cref="P:System.ReadOnlySpan`1.Length" /> właściwości New <see cref="T:System.ReadOnlySpan`1" /> zostałaby przekroczyć<see cref="F:System.Int32.MaxValue" /></span><span class="sxs-lookup"><span data-stu-id="e6995-109">The <see cref="P:System.ReadOnlySpan`1.Length" /> property of the new <see cref="T:System.ReadOnlySpan`1" /> would exceed <see cref="F:System.Int32.MaxValue" /></span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AsBytes&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Span&lt;byte&gt; AsBytes&lt;T&gt; (Span&lt;T&gt; span) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Span`1&lt;unsigned int8&gt; AsBytes&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Span`1&lt;!!T&gt; span) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.AsBytes``1(System.Span{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AsBytes(Of T As Structure) (span As Span(Of T)) As Span(Of Byte)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static Span&lt;System::Byte&gt; AsBytes(Span&lt;T&gt; span);" />
      <MemberSignature Language="F#" Value="static member AsBytes : Span&lt;'T (requires 'T : struct)&gt; -&gt; Span&lt;byte&gt; (requires 'T : struct)" Usage="System.Runtime.InteropServices.MemoryMarshal.AsBytes span" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Span&lt;System.Byte&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.Span&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="e6995-110">Typ elementów w zakresie.</span><span class="sxs-lookup"><span data-stu-id="e6995-110">The type of items in the span.</span></span></typeparam>
        <param name="span"><span data-ttu-id="e6995-111">Plasterek źródłowy do przekonwertowania.</span><span class="sxs-lookup"><span data-stu-id="e6995-111">The source slice to convert.</span></span></param>
        <summary><span data-ttu-id="e6995-112">Rzutuje jeden <paramref name="T" /> <see langword="Span&lt;Byte&gt;" />z typów pierwotnych, do. <see cref="T:System.Span`1" /></span><span class="sxs-lookup"><span data-stu-id="e6995-112">Casts a <see cref="T:System.Span`1" /> of one primitive type, <paramref name="T" />, to a <see langword="Span&lt;Byte&gt;" />.</span></span></summary>
        <returns><span data-ttu-id="e6995-113">Zakres typu <see cref="T:System.Byte" />.</span><span class="sxs-lookup"><span data-stu-id="e6995-113">A span of type <see cref="T:System.Byte" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="e6995-114">`T`nie może zawierać wskaźników lub odwołań.</span><span class="sxs-lookup"><span data-stu-id="e6995-114">`T` cannot contain pointers or references.</span></span> <span data-ttu-id="e6995-115">`T`jest sprawdzana w czasie wykonywania, aby zachować bezpieczeństwo typu.</span><span class="sxs-lookup"><span data-stu-id="e6995-115">`T` is checked at runtime in order to preserve type safety.</span></span>  

       ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e6995-116"><paramref name="T" />zawiera odwołania lub wskaźniki.</span><span class="sxs-lookup"><span data-stu-id="e6995-116"><paramref name="T" /> contains references or pointers.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="e6995-117">Wartość <see cref="P:System.Span`1.Length" /> właściwości New <see cref="T:System.Span`1" /> zostałaby przekroczyć<see cref="F:System.Int32.MaxValue" /></span><span class="sxs-lookup"><span data-stu-id="e6995-117">The <see cref="P:System.Span`1.Length" /> property of the new <see cref="T:System.Span`1" /> would exceed <see cref="F:System.Int32.MaxValue" /></span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AsMemory&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Memory&lt;T&gt; AsMemory&lt;T&gt; (ReadOnlyMemory&lt;T&gt; memory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Memory`1&lt;!!T&gt; AsMemory&lt;T&gt;(valuetype System.ReadOnlyMemory`1&lt;!!T&gt; memory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.AsMemory``1(System.ReadOnlyMemory{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AsMemory(Of T) (memory As ReadOnlyMemory(Of T)) As Memory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static Memory&lt;T&gt; AsMemory(ReadOnlyMemory&lt;T&gt; memory);" />
      <MemberSignature Language="F#" Value="static member AsMemory : ReadOnlyMemory&lt;'T&gt; -&gt; Memory&lt;'T&gt;" Usage="System.Runtime.InteropServices.MemoryMarshal.AsMemory memory" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="System.ReadOnlyMemory&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="e6995-118">Typ elementów w buforze pamięci tylko do odczytu.</span><span class="sxs-lookup"><span data-stu-id="e6995-118">The type of items in the read-only memory buffer.</span></span></typeparam>
        <param name="memory"><span data-ttu-id="e6995-119">Bufor pamięci tylko do odczytu.</span><span class="sxs-lookup"><span data-stu-id="e6995-119">The read-only memory buffer.</span></span></param>
        <summary><span data-ttu-id="e6995-120"><see cref="T:System.Memory`1" /> Tworzy wystąpienie<see cref="T:System.ReadOnlyMemory`1" />z.</span><span class="sxs-lookup"><span data-stu-id="e6995-120">Creates a <see cref="T:System.Memory`1" /> instance from a <see cref="T:System.ReadOnlyMemory`1" />.</span></span></summary>
        <returns><span data-ttu-id="e6995-121">Blok pamięci, który reprezentuje tę samą pamięć co <see cref="T:System.ReadOnlyMemory`1" />.</span><span class="sxs-lookup"><span data-stu-id="e6995-121">A memory block that represents the same memory as the <see cref="T:System.ReadOnlyMemory`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="e6995-122">Ta metoda musi być używana z największą ostrożnością.</span><span class="sxs-lookup"><span data-stu-id="e6995-122">This method must be used with extreme caution.</span></span> <span data-ttu-id="e6995-123"><xref:System.ReadOnlyMemory%601>służy do reprezentowania niezmiennych danych i innych pamięci, które nie są przeznaczone do zapisania.</span><span class="sxs-lookup"><span data-stu-id="e6995-123"><xref:System.ReadOnlyMemory%601> is used to represent immutable data and other memory that is not meant to be written to.</span></span> <span data-ttu-id="e6995-124"><xref:System.Memory%601>wystąpienia utworzone za pomocą tej metody nie powinny być zapisywane w.</span><span class="sxs-lookup"><span data-stu-id="e6995-124"><xref:System.Memory%601> instances created by this method should not be written to.</span></span> <span data-ttu-id="e6995-125">Celem tej metody jest zezwolenie na zmienne wpisane jako, <xref:System.Memory%601> ale tylko do odczytu w celu <xref:System.ReadOnlyMemory%601>przechowywania.</span><span class="sxs-lookup"><span data-stu-id="e6995-125">The purpose of this method is to allow variables typed as <xref:System.Memory%601> but only used for reading to store a <xref:System.ReadOnlyMemory%601>.</span></span> 

       ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AsRef&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static ref readonly T&amp; AsRef&lt;T&gt; (ReadOnlySpan&lt;byte&gt; span) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig T&amp; modreq(System.Runtime.InteropServices.InAttribute) AsRef&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; span) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.AsRef``1(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AsRef(Of T As Structure) (span As ReadOnlySpan(Of Byte)) As T&amp;" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static T&amp; ^ AsRef(ReadOnlySpan&lt;System::Byte&gt; span);" />
      <MemberSignature Language="F#" Value="static member AsRef : ReadOnlySpan&lt;byte&gt; -&gt; T&amp; (requires 'T : struct)" Usage="System.Runtime.InteropServices.MemoryMarshal.AsRef span" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue RefType="Readonly">
        <ReturnType>T</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="netcore-3.0">
            <AttributeName>System.Runtime.CompilerServices.IsReadOnly</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;System.Byte&gt;" Index="0" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="e6995-126">Typ zwracanego odwołania.</span><span class="sxs-lookup"><span data-stu-id="e6995-126">The type of the returned reference.</span></span></typeparam>
        <param name="span"><span data-ttu-id="e6995-127">Zakres tylko do odczytu do ponownego interpretacji.</span><span class="sxs-lookup"><span data-stu-id="e6995-127">The read-only span to reinterpret.</span></span></param>
        <summary><span data-ttu-id="e6995-128">Ponownie interpretuje zakres tylko do odczytu bajtów jako odwołanie tylko do odczytu do struktury typu <paramref name="T" />.</span><span class="sxs-lookup"><span data-stu-id="e6995-128">Reinterprets a read-only span of bytes as a read-only reference to the structure of type <paramref name="T" />.</span></span></summary>
        <returns><span data-ttu-id="e6995-129">Odwołanie tylko do odczytu do struktury typu <paramref name="T" />.</span><span class="sxs-lookup"><span data-stu-id="e6995-129">The read-only reference to the structure of type <paramref name="T" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="e6995-130">`T`nie może zawierać wskaźników lub odwołań.</span><span class="sxs-lookup"><span data-stu-id="e6995-130">`T` cannot contain pointers or references.</span></span> <span data-ttu-id="e6995-131">Jest ona sprawdzana w czasie wykonywania w celu zachowania bezpieczeństwa typów.</span><span class="sxs-lookup"><span data-stu-id="e6995-131">It is checked at runtime in order to preserve type safety.</span></span>  

<span data-ttu-id="e6995-132">Ta metoda jest obsługiwana tylko na platformach, które obsługują niewyrównany dostęp do pamięci lub gdy blok pamięci jest wyrównany w inny sposób.</span><span class="sxs-lookup"><span data-stu-id="e6995-132">This method is supported only on platforms that support misaligned memory access or when the memory block is aligned by other means.</span></span>

       ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AsRef&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static ref T AsRef&lt;T&gt; (Span&lt;byte&gt; span) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T AsRef&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Span`1&lt;unsigned int8&gt; span) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.AsRef``1(System.Span{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function AsRef(Of T As Structure) (span As Span(Of Byte)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static T % AsRef(Span&lt;System::Byte&gt; span);" />
      <MemberSignature Language="F#" Value="static member AsRef : Span&lt;byte&gt; -&gt;  (requires 'T : struct)" Usage="System.Runtime.InteropServices.MemoryMarshal.AsRef span" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue RefType="Ref">
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.Span&lt;System.Byte&gt;" Index="0" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="e6995-133">Typ zwracanego odwołania.</span><span class="sxs-lookup"><span data-stu-id="e6995-133">The type of the returned reference.</span></span></typeparam>
        <param name="span"><span data-ttu-id="e6995-134">Zakres do reinterpretacji.</span><span class="sxs-lookup"><span data-stu-id="e6995-134">The span to reinterpret.</span></span></param>
        <summary><span data-ttu-id="e6995-135">Reinterpretuje zakres bajtów jako odwołanie do struktury typu <paramref name="T" />.</span><span class="sxs-lookup"><span data-stu-id="e6995-135">Reinterprets a span of bytes as a reference to the structure of type <paramref name="T" />.</span></span></summary>
        <returns><span data-ttu-id="e6995-136">Odwołanie do struktury typu <paramref name="T" />.</span><span class="sxs-lookup"><span data-stu-id="e6995-136">The reference to the structure of type <paramref name="T" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="e6995-137">`T`nie może zawierać wskaźników lub odwołań.</span><span class="sxs-lookup"><span data-stu-id="e6995-137">`T` cannot contain pointers or references.</span></span> <span data-ttu-id="e6995-138">Jest ona sprawdzana w czasie wykonywania w celu zachowania bezpieczeństwa typów.</span><span class="sxs-lookup"><span data-stu-id="e6995-138">It is checked at runtime in order to preserve type safety.</span></span>  

<span data-ttu-id="e6995-139">Ta metoda jest obsługiwana tylko na platformach, które obsługują niewyrównany dostęp do pamięci lub gdy blok pamięci jest wyrównany w inny sposób.</span><span class="sxs-lookup"><span data-stu-id="e6995-139">This method is supported only on platforms that support misaligned memory access or when the memory block is aligned by other means.</span></span>

       ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Cast&lt;TFrom,TTo&gt;">
      <MemberSignature Language="C#" Value="public static ReadOnlySpan&lt;TTo&gt; Cast&lt;TFrom,TTo&gt; (ReadOnlySpan&lt;TFrom&gt; span) where TFrom : struct where TTo : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlySpan`1&lt;!!TTo&gt; Cast&lt;struct .ctor (class System.ValueType) TFrom, struct .ctor (class System.ValueType) TTo&gt;(valuetype System.ReadOnlySpan`1&lt;!!TFrom&gt; span) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.Cast``2(System.ReadOnlySpan{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Cast(Of TFrom As Structure, TTo As Structure) (span As ReadOnlySpan(Of TFrom)) As ReadOnlySpan(Of TTo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TFrom, typename TTo&gt;&#xA; where TFrom : value class where TTo : value class static ReadOnlySpan&lt;TTo&gt; Cast(ReadOnlySpan&lt;TFrom&gt; span);" />
      <MemberSignature Language="F#" Value="static member Cast : ReadOnlySpan&lt;'From (requires 'From : struct)&gt; -&gt; ReadOnlySpan&lt;'o (requires 'o : struct)&gt; (requires 'From : struct and 'o : struct)" Usage="System.Runtime.InteropServices.MemoryMarshal.Cast span" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;TTo&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TFrom">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TTo">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;TFrom&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TFrom"><span data-ttu-id="e6995-140">Typ zakresu źródłowego.</span><span class="sxs-lookup"><span data-stu-id="e6995-140">The type of the source span.</span></span></typeparam>
        <typeparam name="TTo"><span data-ttu-id="e6995-141">Typ zakresu docelowego.</span><span class="sxs-lookup"><span data-stu-id="e6995-141">The type of the target span.</span></span></typeparam>
        <param name="span"><span data-ttu-id="e6995-142">Plasterek źródłowy do przekonwertowania.</span><span class="sxs-lookup"><span data-stu-id="e6995-142">The source slice to convert.</span></span></param>
        <summary><span data-ttu-id="e6995-143">Rzutuje zakres tylko do odczytu jednego typu pierwotnego na zakres tylko do odczytu o innym typie pierwotnym.</span><span class="sxs-lookup"><span data-stu-id="e6995-143">Casts a read-only span of one primitive type to a read-only span of another primitive type.</span></span></summary>
        <returns><span data-ttu-id="e6995-144">Przekonwertowany zakres tylko do odczytu.</span><span class="sxs-lookup"><span data-stu-id="e6995-144">The converted read-only span.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="e6995-145">`TFrom` Aniniemoże`TTo` zawierać wskaźników ani odwołań.</span><span class="sxs-lookup"><span data-stu-id="e6995-145">Neither `TFrom` nor `TTo` can contain pointers or references.</span></span> <span data-ttu-id="e6995-146">`TFrom`i `TTo` są sprawdzane w czasie wykonywania w celu zachowania bezpieczeństwa typów.</span><span class="sxs-lookup"><span data-stu-id="e6995-146">`TFrom` and `TTo` are checked at runtime in order to preserve type safety.</span></span>  

<span data-ttu-id="e6995-147">Ta metoda jest obsługiwana tylko na platformach, które obsługują niewyrównany dostęp do pamięci lub gdy blok pamięci jest wyrównany w inny sposób.</span><span class="sxs-lookup"><span data-stu-id="e6995-147">This method is supported only on platforms that support misaligned memory access or when the memory block is aligned by other means.</span></span>

       ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e6995-148"><paramref name="TFrom" />lub <paramref name="TTo" /> zawiera odwołania lub wskaźniki.</span><span class="sxs-lookup"><span data-stu-id="e6995-148"><paramref name="TFrom" /> or <paramref name="TTo" /> contains references or pointers.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Cast&lt;TFrom,TTo&gt;">
      <MemberSignature Language="C#" Value="public static Span&lt;TTo&gt; Cast&lt;TFrom,TTo&gt; (Span&lt;TFrom&gt; span) where TFrom : struct where TTo : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Span`1&lt;!!TTo&gt; Cast&lt;struct .ctor (class System.ValueType) TFrom, struct .ctor (class System.ValueType) TTo&gt;(valuetype System.Span`1&lt;!!TFrom&gt; span) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.Cast``2(System.Span{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Cast(Of TFrom As Structure, TTo As Structure) (span As Span(Of TFrom)) As Span(Of TTo)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TFrom, typename TTo&gt;&#xA; where TFrom : value class where TTo : value class static Span&lt;TTo&gt; Cast(Span&lt;TFrom&gt; span);" />
      <MemberSignature Language="F#" Value="static member Cast : Span&lt;'From (requires 'From : struct)&gt; -&gt; Span&lt;'o (requires 'o : struct)&gt; (requires 'From : struct and 'o : struct)" Usage="System.Runtime.InteropServices.MemoryMarshal.Cast span" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Span&lt;TTo&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TFrom">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
        <TypeParameter Name="TTo">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.Span&lt;TFrom&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TFrom"><span data-ttu-id="e6995-149">Typ zakresu źródłowego.</span><span class="sxs-lookup"><span data-stu-id="e6995-149">The type of the source span.</span></span></typeparam>
        <typeparam name="TTo"><span data-ttu-id="e6995-150">Typ zakresu docelowego.</span><span class="sxs-lookup"><span data-stu-id="e6995-150">The type of the target span.</span></span></typeparam>
        <param name="span"><span data-ttu-id="e6995-151">Plasterek źródłowy do przekonwertowania.</span><span class="sxs-lookup"><span data-stu-id="e6995-151">The source slice to convert.</span></span></param>
        <summary><span data-ttu-id="e6995-152">Rzutuje zakres jednego typu pierwotnego na zakres innego typu pierwotnego.</span><span class="sxs-lookup"><span data-stu-id="e6995-152">Casts a span of one primitive type to a span of another primitive type.</span></span></summary>
        <returns><span data-ttu-id="e6995-153">Przekonwertowany zakres.</span><span class="sxs-lookup"><span data-stu-id="e6995-153">The converted span.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="e6995-154">`TFrom` Aniniemoże`TTo` zawierać wskaźników ani odwołań.</span><span class="sxs-lookup"><span data-stu-id="e6995-154">Neither `TFrom` nor `TTo` can contain pointers or references.</span></span> <span data-ttu-id="e6995-155">`TFrom`i `TTo` są sprawdzane w czasie wykonywania w celu zachowania bezpieczeństwa typów.</span><span class="sxs-lookup"><span data-stu-id="e6995-155">`TFrom` and `TTo` are checked at runtime in order to preserve type safety.</span></span>  

<span data-ttu-id="e6995-156">Rzutowanie występuje w niesprawdzonym kontekście.</span><span class="sxs-lookup"><span data-stu-id="e6995-156">The cast occurs in an unchecked context.</span></span> <span data-ttu-id="e6995-157">Jeśli zakres jest mniejszy `TTo` niż `TFrom`zakres, może dojść do utraty danych.</span><span class="sxs-lookup"><span data-stu-id="e6995-157">If the range of `TTo` is less than the range of `TFrom`, data loss can occur.</span></span> <span data-ttu-id="e6995-158">Na przykład, jeśli `TFrom` jest <xref:System.Int64>, jedna z `ReadOnlySpan<Int32>` wartości to 0x100001111110F0F, a `TTo` <xref:System.Int32>wartość jest równa 11110F0F.</span><span class="sxs-lookup"><span data-stu-id="e6995-158">For example, if `TFrom` is <xref:System.Int64>, one of the `ReadOnlySpan<Int32>` values is 0x100001111110F0F, and `TTo` is <xref:System.Int32>, the resulting value is 11110F0F.</span></span>

<span data-ttu-id="e6995-159">Ta metoda jest obsługiwana tylko na platformach, które obsługują niewyrównany dostęp do pamięci lub gdy blok pamięci jest wyrównany w inny sposób.</span><span class="sxs-lookup"><span data-stu-id="e6995-159">This method is supported only on platforms that support misaligned memory access or when the memory block is aligned by other means.</span></span>

       ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e6995-160"><paramref name="TFrom" />lub <paramref name="TTo" /> zawiera odwołania lub wskaźniki.</span><span class="sxs-lookup"><span data-stu-id="e6995-160"><paramref name="TFrom" /> or <paramref name="TTo" /> contains references or pointers.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CreateFromPinnedArray&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Memory&lt;T&gt; CreateFromPinnedArray&lt;T&gt; (T[] array, int start, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Memory`1&lt;!!T&gt; CreateFromPinnedArray&lt;T&gt;(!!T[] array, int32 start, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.CreateFromPinnedArray``1(``0[],System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateFromPinnedArray(Of T) (array As T(), start As Integer, length As Integer) As Memory(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static Memory&lt;T&gt; CreateFromPinnedArray(cli::array &lt;T&gt; ^ array, int start, int length);" />
      <MemberSignature Language="F#" Value="static member CreateFromPinnedArray : 'T[] * int * int -&gt; Memory&lt;'T&gt;" Usage="System.Runtime.InteropServices.MemoryMarshal.CreateFromPinnedArray (array, start, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Memory&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="array" Type="T[]" />
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="e6995-161">Typ tablicy.</span><span class="sxs-lookup"><span data-stu-id="e6995-161">The type of the array.</span></span></typeparam>
        <param name="array"><span data-ttu-id="e6995-162">Wstępnie przypięta tablica źródłowa.</span><span class="sxs-lookup"><span data-stu-id="e6995-162">The pre-pinned source array.</span></span></param>
        <param name="start"><span data-ttu-id="e6995-163">Indeks <paramref name="array" /> , pod którym ma zostać rozpoczęty blok pamięci.</span><span class="sxs-lookup"><span data-stu-id="e6995-163">The index of <paramref name="array" /> at which to begin the memory block.</span></span></param>
        <param name="length"><span data-ttu-id="e6995-164">Liczba elementów do uwzględnienia w bloku pamięci.</span><span class="sxs-lookup"><span data-stu-id="e6995-164">The number of items to include in the memory block.</span></span></param>
        <summary><span data-ttu-id="e6995-165">Tworzy nowy bufor pamięci nad częścią wstępnie przypiętej tablicy docelowej, rozpoczynając <paramref name="start" /> od indeksu i składającą się z <paramref name="length" /> elementów.</span><span class="sxs-lookup"><span data-stu-id="e6995-165">Creates a new memory buffer over the portion of the pre-pinned target array beginning at the <paramref name="start" /> index and consisting of <paramref name="length" /> items.</span></span></summary>
        <returns><span data-ttu-id="e6995-166">Blok pamięci dla określonych elementów <paramref name="array" />.</span><span class="sxs-lookup"><span data-stu-id="e6995-166">A block of memory over the specified elements of <paramref name="array" />.</span></span> <span data-ttu-id="e6995-167">Jeśli <paramref name="array" /> <paramref name="start" /> jest <see langword="null" />, lub <see cref="System.Memory`1.Length" /> Jeśli<see cref="T:System.Memory`1" /> i <paramref name="length" /> są 0, metoda zwraca wystąpienie równe zero.</span><span class="sxs-lookup"><span data-stu-id="e6995-167">If <paramref name="array" /> is <see langword="null" />, or if <paramref name="start" /> and <paramref name="length" /> are 0, the method returns a <see cref="T:System.Memory`1" /> instance of <see cref="System.Memory`1.Length" /> zero.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="e6995-168">Tablica musi już być przypięta przed wywołaniem tej metody, a tablica nie może zostać odpięta, <xref:System.Memory%601> gdy bufor, który zwraca, jest nadal w użyciu.</span><span class="sxs-lookup"><span data-stu-id="e6995-168">The array must already be pinned before this method is called, and that array must not be unpinned while the <xref:System.Memory%601> buffer that it returns is still in use.</span></span> <span data-ttu-id="e6995-169">Wywołanie tej metody w odpiętej tablicy może spowodować uszkodzenie pamięci.</span><span class="sxs-lookup"><span data-stu-id="e6995-169">Calling this method on an unpinned array could result in memory corruption.</span></span>

       ]]></format>
        </remarks>
        <exception cref="T:System.ArrayTypeMismatchException"><span data-ttu-id="e6995-170"><paramref name="array" />jest współwariantem, a typ <paramref name="array" /> nie jest dokładnie. <paramref name="T[]" /></span><span class="sxs-lookup"><span data-stu-id="e6995-170"><paramref name="array" /> is covariant, and the type of <paramref name="array" /> is not exactly <paramref name="T[]" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="e6995-171">Lub indeks końcowy nie należy do zakresu od 0 do <see cref="P:System.Array.Length" />. <paramref name="start" /></span><span class="sxs-lookup"><span data-stu-id="e6995-171">The <paramref name="start" /> or the end index is not in the range of 0 to <see cref="P:System.Array.Length" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="CreateReadOnlySpan&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static ReadOnlySpan&lt;T&gt; CreateReadOnlySpan&lt;T&gt; (ref T reference, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.ReadOnlySpan`1&lt;!!T&gt; CreateReadOnlySpan&lt;T&gt;(!!T&amp; reference, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.CreateReadOnlySpan``1(``0@,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateReadOnlySpan(Of T) (ByRef reference As T, length As Integer) As ReadOnlySpan(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static ReadOnlySpan&lt;T&gt; CreateReadOnlySpan(T % reference, int length);" />
      <MemberSignature Language="F#" Value="static member CreateReadOnlySpan :  * int -&gt; ReadOnlySpan&lt;'T&gt;" Usage="System.Runtime.InteropServices.MemoryMarshal.CreateReadOnlySpan (reference, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ReadOnlySpan&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="reference" Type="T" RefType="ref" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="e6995-172">Typ elementów danych.</span><span class="sxs-lookup"><span data-stu-id="e6995-172">The type of the data items.</span></span></typeparam>
        <param name="reference"><span data-ttu-id="e6995-173">Odwołanie do danych.</span><span class="sxs-lookup"><span data-stu-id="e6995-173">A reference to data.</span></span></param>
        <param name="length"><span data-ttu-id="e6995-174">Liczba <paramref name="T" /> elementów, które <paramref name="reference" /> zawierają.</span><span class="sxs-lookup"><span data-stu-id="e6995-174">The number of <paramref name="T" /> elements that <paramref name="reference" /> contains.</span></span></param>
        <summary><span data-ttu-id="e6995-175">Tworzy nowy zakres tylko do odczytu w ramach części regularnego obiektu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="e6995-175">Creates a new read-only span over a portion of a regular managed object.</span></span></summary>
        <returns><span data-ttu-id="e6995-176">Zakres tylko do odczytu.</span><span class="sxs-lookup"><span data-stu-id="e6995-176">A read-only span.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="e6995-177">Ta metoda może być przydatna, jeśli część obiektu zarządzanego reprezentuje stałą tablicę.</span><span class="sxs-lookup"><span data-stu-id="e6995-177">This method can be useful if part of a managed object represents a fixed array.</span></span> 

> [!WARNING]
> <span data-ttu-id="e6995-178">Ta metoda powinna być stosowana z zachowaniem ostrożności.</span><span class="sxs-lookup"><span data-stu-id="e6995-178">This method should be used with caution.</span></span> <span data-ttu-id="e6995-179">Jest niebezpieczne, `length` ponieważ argument nie jest zaznaczony.</span><span class="sxs-lookup"><span data-stu-id="e6995-179">It is dangerous because the `length` argument is not checked.</span></span> <span data-ttu-id="e6995-180">Ponadto okres istnienia zwracanego zakresu nie jest weryfikowany pod kątem bezpieczeństwa przez Języki obsługujące zasięg.</span><span class="sxs-lookup"><span data-stu-id="e6995-180">In addition, the lifetime of the returned span is not validated for safety by span-aware languages.</span></span>

       ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateSpan&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static Span&lt;T&gt; CreateSpan&lt;T&gt; (ref T reference, int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Span`1&lt;!!T&gt; CreateSpan&lt;T&gt;(!!T&amp; reference, int32 length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.CreateSpan``1(``0@,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function CreateSpan(Of T) (ByRef reference As T, length As Integer) As Span(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static Span&lt;T&gt; CreateSpan(T % reference, int length);" />
      <MemberSignature Language="F#" Value="static member CreateSpan :  * int -&gt; Span&lt;'T&gt;" Usage="System.Runtime.InteropServices.MemoryMarshal.CreateSpan (reference, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Span&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="reference" Type="T" RefType="ref" />
        <Parameter Name="length" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="e6995-181">Typ elementów danych.</span><span class="sxs-lookup"><span data-stu-id="e6995-181">The type of the data items.</span></span></typeparam>
        <param name="reference"><span data-ttu-id="e6995-182">Odwołanie do danych.</span><span class="sxs-lookup"><span data-stu-id="e6995-182">A reference to data.</span></span></param>
        <param name="length"><span data-ttu-id="e6995-183">Liczba <paramref name="T" /> elementów, które <paramref name="reference" /> zawierają.</span><span class="sxs-lookup"><span data-stu-id="e6995-183">The number of <paramref name="T" /> elements that <paramref name="reference" /> contains.</span></span></param>
        <summary><span data-ttu-id="e6995-184">Tworzy nowy zakres na części zwykłego obiektu zarządzanego.</span><span class="sxs-lookup"><span data-stu-id="e6995-184">Creates a new span over a portion of a regular managed object.</span></span></summary>
        <returns><span data-ttu-id="e6995-185">Zakres.</span><span class="sxs-lookup"><span data-stu-id="e6995-185">A span.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="e6995-186">Ta metoda może być przydatna, jeśli część obiektu zarządzanego reprezentuje stałą tablicę.</span><span class="sxs-lookup"><span data-stu-id="e6995-186">This method can be useful if part of a managed object represents a fixed array.</span></span> 

> [!WARNING]
> <span data-ttu-id="e6995-187">Ta metoda powinna być stosowana z zachowaniem ostrożności.</span><span class="sxs-lookup"><span data-stu-id="e6995-187">This method should be used with caution.</span></span> <span data-ttu-id="e6995-188">Jest niebezpieczne, `length` ponieważ argument nie jest zaznaczony.</span><span class="sxs-lookup"><span data-stu-id="e6995-188">It is dangerous because the `length` argument is not checked.</span></span> <span data-ttu-id="e6995-189">Ponadto okres istnienia zwracanego zakresu nie jest weryfikowany pod kątem bezpieczeństwa przez Języki obsługujące zasięg.</span><span class="sxs-lookup"><span data-stu-id="e6995-189">In addition, the lifetime of the returned span is not validated for safety by span-aware languages.</span></span>

       ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetReference&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static ref T GetReference&lt;T&gt; (ReadOnlySpan&lt;T&gt; span);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T GetReference&lt;T&gt;(valuetype System.ReadOnlySpan`1&lt;!!T&gt; span) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.GetReference``1(System.ReadOnlySpan{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetReference(Of T) (span As ReadOnlySpan(Of T)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T % GetReference(ReadOnlySpan&lt;T&gt; span);" />
      <MemberSignature Language="F#" Value="static member GetReference : ReadOnlySpan&lt;'T&gt; -&gt; " Usage="System.Runtime.InteropServices.MemoryMarshal.GetReference span" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue RefType="Ref">
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.ReadOnlySpan&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="e6995-190">Typ elementów w zakresie.</span><span class="sxs-lookup"><span data-stu-id="e6995-190">The type of items in the span.</span></span></typeparam>
        <param name="span"><span data-ttu-id="e6995-191">Zakres tylko do odczytu, z którego pobierane jest odwołanie.</span><span class="sxs-lookup"><span data-stu-id="e6995-191">The read-only span from which the reference is retrieved.</span></span></param>
        <summary><span data-ttu-id="e6995-192">Zwraca odwołanie do elementu z zakresu tylko do odczytu przy indeksie 0.</span><span class="sxs-lookup"><span data-stu-id="e6995-192">Returns a reference to the element of the read-only span at index 0.</span></span></summary>
        <returns><span data-ttu-id="e6995-193">Odwołanie do elementu pod indeksem 0.</span><span class="sxs-lookup"><span data-stu-id="e6995-193">A reference to the element at index 0.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="e6995-194">Jeśli zakres tylko do odczytu jest pusty, ta metoda zwraca odwołanie do lokalizacji, w której zapisano element pod indeksem 0.</span><span class="sxs-lookup"><span data-stu-id="e6995-194">If the read-only span is empty, this method returns a reference to the location where the element at index 0 would have been stored.</span></span> <span data-ttu-id="e6995-195">Takie odwołanie może być `null`lub niemożliwe.</span><span class="sxs-lookup"><span data-stu-id="e6995-195">Such a reference may or may not be `null`.</span></span> <span data-ttu-id="e6995-196">Zwrócone odwołanie może być używane do przypinania, ale nigdy nie należy go usunąć.</span><span class="sxs-lookup"><span data-stu-id="e6995-196">The returned reference can be used for pinning, but it must never be dereferenced.</span></span>

       ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetReference&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static ref T GetReference&lt;T&gt; (Span&lt;T&gt; span);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T GetReference&lt;T&gt;(valuetype System.Span`1&lt;!!T&gt; span) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.GetReference``1(System.Span{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetReference(Of T) (span As Span(Of T)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static T % GetReference(Span&lt;T&gt; span);" />
      <MemberSignature Language="F#" Value="static member GetReference : Span&lt;'T&gt; -&gt; " Usage="System.Runtime.InteropServices.MemoryMarshal.GetReference span" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue RefType="Ref">
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="span" Type="System.Span&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="e6995-197">Typ elementów w zakresie.</span><span class="sxs-lookup"><span data-stu-id="e6995-197">The type of items in the span.</span></span></typeparam>
        <param name="span"><span data-ttu-id="e6995-198">Zakres, z którego pobierane jest odwołanie.</span><span class="sxs-lookup"><span data-stu-id="e6995-198">The span from which the reference is retrieved.</span></span></param>
        <summary><span data-ttu-id="e6995-199">Zwraca odwołanie do elementu zakresu w indeksie 0.</span><span class="sxs-lookup"><span data-stu-id="e6995-199">Returns a reference to the element of the span at index 0.</span></span></summary>
        <returns><span data-ttu-id="e6995-200">Odwołanie do elementu pod indeksem 0.</span><span class="sxs-lookup"><span data-stu-id="e6995-200">A reference to the element at index 0.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="e6995-201">Jeśli zakres jest pusty, ta metoda zwraca odwołanie do lokalizacji, w której zapisano element pod indeksem 0.</span><span class="sxs-lookup"><span data-stu-id="e6995-201">If the span is empty, this method returns a reference to the location where the element at index 0 would have been stored.</span></span> <span data-ttu-id="e6995-202">Takie odwołanie może być `null`lub niemożliwe.</span><span class="sxs-lookup"><span data-stu-id="e6995-202">Such a reference may or may not be `null`.</span></span> <span data-ttu-id="e6995-203">Zwrócone odwołanie może być używane do przypinania, ale nigdy nie należy go usunąć.</span><span class="sxs-lookup"><span data-stu-id="e6995-203">The returned reference can be used for pinning, but it must never be dereferenced.</span></span>

       ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Read&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static T Read&lt;T&gt; (ReadOnlySpan&lt;byte&gt; source) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!T Read&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.Read``1(System.ReadOnlySpan{System.Byte})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function Read(Of T As Structure) (source As ReadOnlySpan(Of Byte)) As T" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static T Read(ReadOnlySpan&lt;System::Byte&gt; source);" />
      <MemberSignature Language="F#" Value="static member Read : ReadOnlySpan&lt;byte&gt; -&gt; 'T (requires 'T : struct)" Usage="System.Runtime.InteropServices.MemoryMarshal.Read source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="e6995-204">Typ elementu, który ma zostać pobrany z zakresu tylko do odczytu.</span><span class="sxs-lookup"><span data-stu-id="e6995-204">The type of the item to retrieve from the read-only span.</span></span></typeparam>
        <param name="source"><span data-ttu-id="e6995-205">Zakres tylko do odczytu.</span><span class="sxs-lookup"><span data-stu-id="e6995-205">A read-only span.</span></span></param>
        <summary><span data-ttu-id="e6995-206">Odczytuje strukturę typu</span><span class="sxs-lookup"><span data-stu-id="e6995-206">Reads a structure of type</span></span> <param name="T" /> <span data-ttu-id="e6995-207">z zakresu bajtów tylko do odczytu.</span><span class="sxs-lookup"><span data-stu-id="e6995-207">out of a read-only span of bytes.</span></span></summary>
        <returns><span data-ttu-id="e6995-208">Struktura pobrana z zakresu tylko do odczytu.</span><span class="sxs-lookup"><span data-stu-id="e6995-208">The structure retrieved from the read-only span.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="e6995-209">`T`nie może zawierać wskaźników lub odwołań.</span><span class="sxs-lookup"><span data-stu-id="e6995-209">`T` cannot contain pointers or references.</span></span> <span data-ttu-id="e6995-210">Jest ona sprawdzana w czasie wykonywania w celu zachowania bezpieczeństwa typów.</span><span class="sxs-lookup"><span data-stu-id="e6995-210">It is checked at runtime in order to preserve type safety.</span></span>  

       ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e6995-211"><paramref name="T" />zawiera odwołania lub wskaźniki.</span><span class="sxs-lookup"><span data-stu-id="e6995-211"><paramref name="T" /> contains references or pointers.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="e6995-212"><paramref name="source" />jest mniejsze niż <paramref name="T" />.</span><span class="sxs-lookup"><span data-stu-id="e6995-212"><paramref name="source" /> is smaller than <paramref name="T" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToEnumerable&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;T&gt; ToEnumerable&lt;T&gt; (ReadOnlyMemory&lt;T&gt; memory);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!T&gt; ToEnumerable&lt;T&gt;(valuetype System.ReadOnlyMemory`1&lt;!!T&gt; memory) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.ToEnumerable``1(System.ReadOnlyMemory{``0})" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function ToEnumerable(Of T) (memory As ReadOnlyMemory(Of T)) As IEnumerable(Of T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static System::Collections::Generic::IEnumerable&lt;T&gt; ^ ToEnumerable(ReadOnlyMemory&lt;T&gt; memory);" />
      <MemberSignature Language="F#" Value="static member ToEnumerable : ReadOnlyMemory&lt;'T&gt; -&gt; seq&lt;'T&gt;" Usage="System.Runtime.InteropServices.MemoryMarshal.ToEnumerable memory" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;T&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="System.ReadOnlyMemory&lt;T&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="e6995-213">Typ elementów w buforze pamięci tylko do odczytu.</span><span class="sxs-lookup"><span data-stu-id="e6995-213">The type of the items in the read-only memory buffer.</span></span></typeparam>
        <param name="memory"><span data-ttu-id="e6995-214">Bufor pamięci tylko do odczytu.</span><span class="sxs-lookup"><span data-stu-id="e6995-214">A read-only memory buffer.</span></span></param>
        <summary><span data-ttu-id="e6995-215"><see cref="T:System.Collections.Generic.IEnumerable`1" /> Tworzy widok danego bufora pamięci tylko do odczytu.</span><span class="sxs-lookup"><span data-stu-id="e6995-215">Creates an <see cref="T:System.Collections.Generic.IEnumerable`1" /> view of the given read-only memory buffer.</span></span></summary>
        <returns><span data-ttu-id="e6995-216">Przeliczalny widok <paramref name="memory" />.</span><span class="sxs-lookup"><span data-stu-id="e6995-216">An enumerable view of <paramref name="memory" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="e6995-217">Ta metoda umożliwia użycie bufora pamięci tylko do odczytu w istniejących interfejsach API, które wymagają parametru typu <xref:System.Collections.Generic.IEnumerable%601>.</span><span class="sxs-lookup"><span data-stu-id="e6995-217">This method allows a read-only memory buffer to be used in existing APIs that require a parameter of type <xref:System.Collections.Generic.IEnumerable%601>.</span></span> 

       ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetArray&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool TryGetArray&lt;T&gt; (ReadOnlyMemory&lt;T&gt; memory, out ArraySegment&lt;T&gt; segment);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryGetArray&lt;T&gt;(valuetype System.ReadOnlyMemory`1&lt;!!T&gt; memory, [out] valuetype System.ArraySegment`1&lt;!!T&gt;&amp; segment) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.TryGetArray``1(System.ReadOnlyMemory{``0},System.ArraySegment{``0}@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryGetArray(Of T) (memory As ReadOnlyMemory(Of T), ByRef segment As ArraySegment(Of T)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; static bool TryGetArray(ReadOnlyMemory&lt;T&gt; memory, [Runtime::InteropServices::Out] ArraySegment&lt;T&gt; % segment);" />
      <MemberSignature Language="F#" Value="static member TryGetArray : ReadOnlyMemory&lt;'T&gt; *  -&gt; bool" Usage="System.Runtime.InteropServices.MemoryMarshal.TryGetArray (memory, segment)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="System.ReadOnlyMemory&lt;T&gt;" />
        <Parameter Name="segment" Type="System.ArraySegment&lt;T&gt;" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="e6995-218">Typ elementów w buforze pamięci tylko do odczytu.</span><span class="sxs-lookup"><span data-stu-id="e6995-218">The type of items in the read-only memory buffer.</span></span></typeparam>
        <param name="memory"><span data-ttu-id="e6995-219">Bufor pamięci tylko do odczytu.</span><span class="sxs-lookup"><span data-stu-id="e6995-219">A read-only memory buffer.</span></span></param>
        <param name="segment"><span data-ttu-id="e6995-220">Gdy ta metoda zwraca, zawiera segment tablicy pobrany z bazowego bufora pamięci tylko do odczytu.</span><span class="sxs-lookup"><span data-stu-id="e6995-220">When this method returns, contains the array segment retrieved from the underlying read-only memory buffer.</span></span> <span data-ttu-id="e6995-221">Jeśli metoda zakończy się niepowodzeniem, metoda zwraca domyślny segment tablicy.</span><span class="sxs-lookup"><span data-stu-id="e6995-221">If the method fails, the method returns a default array segment.</span></span></param>
        <summary><span data-ttu-id="e6995-222">Próbuje pobrać segment tablicy z bazowego bufora pamięci.</span><span class="sxs-lookup"><span data-stu-id="e6995-222">Tries to get an array segment from the underlying memory buffer.</span></span> <span data-ttu-id="e6995-223">Wartość zwracana wskazuje na powodzenie operacji.</span><span class="sxs-lookup"><span data-stu-id="e6995-223">The return value indicates the success of the operation.</span></span></summary>
        <returns><span data-ttu-id="e6995-224"><see langword="true" />Jeśli wywołanie metody powiodło się; <see langword="false" /> w przeciwnym razie.</span><span class="sxs-lookup"><span data-stu-id="e6995-224"><see langword="true" /> if the method call succeeds; <see langword="false" /> otherwise.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetMemoryManager&lt;T,TManager&gt;">
      <MemberSignature Language="C#" Value="public static bool TryGetMemoryManager&lt;T,TManager&gt; (ReadOnlyMemory&lt;T&gt; memory, out TManager manager) where TManager : System.Buffers.MemoryManager&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryGetMemoryManager&lt;T, (class System.Buffers.MemoryManager`1&lt;!!T&gt;) TManager&gt;(valuetype System.ReadOnlyMemory`1&lt;!!T&gt; memory, [out] !!TManager&amp; manager) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.TryGetMemoryManager``2(System.ReadOnlyMemory{``0},``1@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryGetMemoryManager(Of T, TManager) (memory As ReadOnlyMemory(Of T), ByRef manager As TManager) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T, typename TManager&gt;&#xA; where TManager : System::Buffers::MemoryManager&lt;T&gt; static bool TryGetMemoryManager(ReadOnlyMemory&lt;T&gt; memory, [Runtime::InteropServices::Out] TManager % manager);" />
      <MemberSignature Language="F#" Value="static member TryGetMemoryManager : ReadOnlyMemory&lt;'T&gt; *  -&gt; bool (requires 'Manager :&gt; System.Buffers.MemoryManager&lt;'T&gt;)" Usage="System.Runtime.InteropServices.MemoryMarshal.TryGetMemoryManager (memory, manager)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
        <TypeParameter Name="TManager">
          <Constraints>
            <BaseTypeName>System.Buffers.MemoryManager&lt;T&gt;</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="System.ReadOnlyMemory&lt;T&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
        <Parameter Name="manager" Type="TManager" RefType="out" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="e6995-225">Typ elementów w buforze pamięci tylko do odczytu.</span><span class="sxs-lookup"><span data-stu-id="e6995-225">The type of the items in the read-only memory buffer.</span></span></typeparam>
        <typeparam name="TManager"><span data-ttu-id="e6995-226">Typ <see cref="T:System.Buffers.MemoryManager`1" /> do pobrania.</span><span class="sxs-lookup"><span data-stu-id="e6995-226">The type of the <see cref="T:System.Buffers.MemoryManager`1" /> to retrieve.</span></span></typeparam>
        <param name="memory"><span data-ttu-id="e6995-227">Bufor pamięci tylko do odczytu, dla którego ma zostać wyświetlony Menedżer pamięci.</span><span class="sxs-lookup"><span data-stu-id="e6995-227">The read-only memory buffer for which to get the memory manager.</span></span></param>
        <param name="manager"><span data-ttu-id="e6995-228">Gdy metoda zwraca, Menedżer <paramref name="memory" />.</span><span class="sxs-lookup"><span data-stu-id="e6995-228">When the method returns, the manager of <paramref name="memory" />.</span></span></param>
        <summary><span data-ttu-id="e6995-229">Próbuje pobrać <see cref="T:System.Buffers.MemoryManager`1" /> z bazowego bufora pamięci tylko do odczytu.</span><span class="sxs-lookup"><span data-stu-id="e6995-229">Tries to retrieve a <see cref="T:System.Buffers.MemoryManager`1" /> from the underlying read-only memory buffer.</span></span></summary>
        <returns><span data-ttu-id="e6995-230"><see langword="true" />Jeśli metoda pobrała Menedżera pamięci; w przeciwnym razie. <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="e6995-230"><see langword="true" /> if the method retrieved the memory manager; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetMemoryManager&lt;T,TManager&gt;">
      <MemberSignature Language="C#" Value="public static bool TryGetMemoryManager&lt;T,TManager&gt; (ReadOnlyMemory&lt;T&gt; memory, out TManager manager, out int start, out int length) where TManager : System.Buffers.MemoryManager&lt;T&gt;;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryGetMemoryManager&lt;T, (class System.Buffers.MemoryManager`1&lt;!!T&gt;) TManager&gt;(valuetype System.ReadOnlyMemory`1&lt;!!T&gt; memory, [out] !!TManager&amp; manager, [out] int32&amp; start, [out] int32&amp; length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.TryGetMemoryManager``2(System.ReadOnlyMemory{``0},``1@,System.Int32@,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryGetMemoryManager(Of T, TManager) (memory As ReadOnlyMemory(Of T), ByRef manager As TManager, ByRef start As Integer, ByRef length As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T, typename TManager&gt;&#xA; where TManager : System::Buffers::MemoryManager&lt;T&gt; static bool TryGetMemoryManager(ReadOnlyMemory&lt;T&gt; memory, [Runtime::InteropServices::Out] TManager % manager, [Runtime::InteropServices::Out] int % start, [Runtime::InteropServices::Out] int % length);" />
      <MemberSignature Language="F#" Value="static member TryGetMemoryManager : ReadOnlyMemory&lt;'T&gt; *  *  *  -&gt; bool (requires 'Manager :&gt; System.Buffers.MemoryManager&lt;'T&gt;)" Usage="System.Runtime.InteropServices.MemoryMarshal.TryGetMemoryManager (memory, manager, start, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
        <TypeParameter Name="TManager">
          <Constraints>
            <BaseTypeName>System.Buffers.MemoryManager&lt;T&gt;</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="memory" Type="System.ReadOnlyMemory&lt;T&gt;" Index="0" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
        <Parameter Name="manager" Type="TManager" RefType="out" Index="1" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
        <Parameter Name="start" Type="System.Int32" RefType="out" Index="2" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
        <Parameter Name="length" Type="System.Int32" RefType="out" Index="3" FrameworkAlternate="netcore-2.1;netcore-2.2;netcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="e6995-231">Typ elementów w buforze pamięci tylko do odczytu.</span><span class="sxs-lookup"><span data-stu-id="e6995-231">The type of the items in the read-only memory buffer.</span></span></typeparam>
        <typeparam name="TManager"><span data-ttu-id="e6995-232">Typ <see cref="T:System.Buffers.MemoryManager`1" /> do pobrania.</span><span class="sxs-lookup"><span data-stu-id="e6995-232">The type of the <see cref="T:System.Buffers.MemoryManager`1" /> to retrieve.</span></span></typeparam>
        <param name="memory"><span data-ttu-id="e6995-233">Bufor pamięci tylko do odczytu, dla którego ma zostać wyświetlony Menedżer pamięci.</span><span class="sxs-lookup"><span data-stu-id="e6995-233">The read-only memory buffer for which to get the memory manager.</span></span></param>
        <param name="manager"><span data-ttu-id="e6995-234">Gdy metoda zwraca, Menedżer <paramref name="memory" />.</span><span class="sxs-lookup"><span data-stu-id="e6995-234">When the method returns, the manager of <paramref name="memory" />.</span></span></param>
        <param name="start"><span data-ttu-id="e6995-235">Gdy metoda zwraca, przesunięcie od początku <paramref name="manager" /> <paramref name="memory" /> , że reprezentuje.</span><span class="sxs-lookup"><span data-stu-id="e6995-235">When the method returns, the offset from the start of the <paramref name="manager" /> that the <paramref name="memory" /> represents.</span></span></param>
        <param name="length"><span data-ttu-id="e6995-236">Gdy metoda zwraca, długość <paramref name="manager" /> <paramref name="memory" /> reprezentowanego elementu.</span><span class="sxs-lookup"><span data-stu-id="e6995-236">When the method returns, the length of the <paramref name="manager" /> that the <paramref name="memory" /> represents.</span></span></param>
        <summary><span data-ttu-id="e6995-237">Próbuje pobrać <see cref="T:System.Buffers.MemoryManager`1" />, indeks początkowy i Długość z bazowego bufora pamięci tylko do odczytu.</span><span class="sxs-lookup"><span data-stu-id="e6995-237">Tries to retrieve a <see cref="T:System.Buffers.MemoryManager`1" />, start index, and length from the underlying read-only memory buffer.</span></span></summary>
        <returns><span data-ttu-id="e6995-238"><see langword="true" />Jeśli metoda zakończyła się pomyślnie; w przeciwnym razie. <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="e6995-238"><see langword="true" /> if the method succeeded; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryGetString">
      <MemberSignature Language="C#" Value="public static bool TryGetString (ReadOnlyMemory&lt;char&gt; memory, out string text, out int start, out int length);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryGetString(valuetype System.ReadOnlyMemory`1&lt;char&gt; memory, [out] string&amp; text, [out] int32&amp; start, [out] int32&amp; length) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.TryGetString(System.ReadOnlyMemory{System.Char},System.String@,System.Int32@,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryGetString (memory As ReadOnlyMemory(Of Char), ByRef text As String, ByRef start As Integer, ByRef length As Integer) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool TryGetString(ReadOnlyMemory&lt;char&gt; memory, [Runtime::InteropServices::Out] System::String ^ % text, [Runtime::InteropServices::Out] int % start, [Runtime::InteropServices::Out] int % length);" />
      <MemberSignature Language="F#" Value="static member TryGetString : ReadOnlyMemory&lt;char&gt; *  *  *  -&gt; bool" Usage="System.Runtime.InteropServices.MemoryMarshal.TryGetString (memory, text, start, length)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="memory" Type="System.ReadOnlyMemory&lt;System.Char&gt;" />
        <Parameter Name="text" Type="System.String" RefType="out" />
        <Parameter Name="start" Type="System.Int32" RefType="out" />
        <Parameter Name="length" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="memory"><span data-ttu-id="e6995-239">Pamięć tylko do odczytu zawierająca blok znaków.</span><span class="sxs-lookup"><span data-stu-id="e6995-239">Read-only memory containing a block of characters.</span></span></param>
        <param name="text"><span data-ttu-id="e6995-240">Gdy metoda zwraca, ciąg zawarty w buforze pamięci.</span><span class="sxs-lookup"><span data-stu-id="e6995-240">When the method returns, the string contained in the memory buffer.</span></span></param>
        <param name="start"><span data-ttu-id="e6995-241">Lokalizacja początkowa w <paramref name="text" />.</span><span class="sxs-lookup"><span data-stu-id="e6995-241">The starting location in <paramref name="text" />.</span></span></param>
        <param name="length"><span data-ttu-id="e6995-242">Liczba znaków w <paramref name="text" />.</span><span class="sxs-lookup"><span data-stu-id="e6995-242">The number of characters in <paramref name="text" />.</span></span></param>
        <summary><span data-ttu-id="e6995-243">Próbuje pobrać źródłowy ciąg z <see langword="System.ReadOnlyMemory&lt;Char&gt;" />.</span><span class="sxs-lookup"><span data-stu-id="e6995-243">Tries to get the underlying string from a <see langword="System.ReadOnlyMemory&lt;Char&gt;" />.</span></span></summary>
        <returns><span data-ttu-id="e6995-244"><see langword="true" />Jeśli metoda pomyślnie Pobiera ciąg źródłowy; w przeciwnym razie. <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="e6995-244"><see langword="true" /> if the method successfully retrieves the underlying string; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TryRead&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool TryRead&lt;T&gt; (ReadOnlySpan&lt;byte&gt; source, out T value) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryRead&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.ReadOnlySpan`1&lt;unsigned int8&gt; source, [out] !!T&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.TryRead``1(System.ReadOnlySpan{System.Byte},``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryRead(Of T As Structure) (source As ReadOnlySpan(Of Byte), ByRef value As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static bool TryRead(ReadOnlySpan&lt;System::Byte&gt; source, [Runtime::InteropServices::Out] T % value);" />
      <MemberSignature Language="F#" Value="static member TryRead : ReadOnlySpan&lt;byte&gt; *  -&gt; bool (requires 'T : struct)" Usage="System.Runtime.InteropServices.MemoryMarshal.TryRead (source, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.ReadOnlySpan&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="T" RefType="out" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="e6995-245">Typ struktury do pobrania.</span><span class="sxs-lookup"><span data-stu-id="e6995-245">The type of the structure to retrieve.</span></span></typeparam>
        <param name="source"><span data-ttu-id="e6995-246">Zakres tylko do odczytu bajtów.</span><span class="sxs-lookup"><span data-stu-id="e6995-246">A read-only span of bytes.</span></span></param>
        <param name="value"><span data-ttu-id="e6995-247">Gdy metoda zwraca, wystąpienie elementu <paramref name="T" />.</span><span class="sxs-lookup"><span data-stu-id="e6995-247">When the method returns, an instance of <paramref name="T" />.</span></span></param>
        <summary><span data-ttu-id="e6995-248">Próbuje odczytać strukturę typu <paramref name="T" /> z zakresu tylko do odczytu w bajtach.</span><span class="sxs-lookup"><span data-stu-id="e6995-248">Tries to read a structure of type <paramref name="T" /> from a read-only span of bytes.</span></span></summary>
        <returns><span data-ttu-id="e6995-249"><see langword="true" />Jeśli metoda zakończy się pomyślnie, pobierając wystąpienie struktury; w przeciwnym razie. <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="e6995-249"><see langword="true" /> if the method succeeds in retrieving an instance of the structure; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="e6995-250">`T`nie może zawierać wskaźników lub odwołań.</span><span class="sxs-lookup"><span data-stu-id="e6995-250">`T` cannot contain pointers or references.</span></span> <span data-ttu-id="e6995-251">Jest ona sprawdzana w czasie wykonywania w celu zachowania bezpieczeństwa typów.</span><span class="sxs-lookup"><span data-stu-id="e6995-251">It is checked at runtime in order to preserve type safety.</span></span>  

       ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e6995-252"><paramref name="T" />zawiera odwołania lub wskaźniki.</span><span class="sxs-lookup"><span data-stu-id="e6995-252"><paramref name="T" /> contains references or pointers.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="TryWrite&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static bool TryWrite&lt;T&gt; (Span&lt;byte&gt; destination, ref T value) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool TryWrite&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Span`1&lt;unsigned int8&gt; destination, !!T&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.TryWrite``1(System.Span{System.Byte},``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function TryWrite(Of T As Structure) (destination As Span(Of Byte), ByRef value As T) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static bool TryWrite(Span&lt;System::Byte&gt; destination, T % value);" />
      <MemberSignature Language="F#" Value="static member TryWrite : Span&lt;byte&gt; *  -&gt; bool (requires 'T : struct)" Usage="System.Runtime.InteropServices.MemoryMarshal.TryWrite (destination, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="T" RefType="ref" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="e6995-253">Typ struktury.</span><span class="sxs-lookup"><span data-stu-id="e6995-253">The type of the structure.</span></span></typeparam>
        <param name="destination"><span data-ttu-id="e6995-254">Zakres bajtów, który ma zawierać strukturę.</span><span class="sxs-lookup"><span data-stu-id="e6995-254">The span of bytes to contain the structure.</span></span></param>
        <param name="value"><span data-ttu-id="e6995-255">Struktura, która ma być zapisywana w zakresie.</span><span class="sxs-lookup"><span data-stu-id="e6995-255">The structure to be written to the span.</span></span></param>
        <summary><span data-ttu-id="e6995-256">Próbuje napisać strukturę typu <paramref name="T" /> do zakresu bajtów.</span><span class="sxs-lookup"><span data-stu-id="e6995-256">Tries to write a structure of type <paramref name="T" /> into a span of bytes.</span></span></summary>
        <returns><span data-ttu-id="e6995-257"><see langword="true" />Jeśli operacja zapisu zakończyła się pomyślnie; w przeciwnym razie. <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="e6995-257"><see langword="true" /> if the write operation succeeded; otherwise, <see langword="false" />.</span></span> <span data-ttu-id="e6995-258">Metoda zwraca <see langword="false" /> , jeśli zakres jest za mały, aby go <paramref name="T" />zawierać.</span><span class="sxs-lookup"><span data-stu-id="e6995-258">The method returns <see langword="false" /> if the span is too small to contain <paramref name="T" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="e6995-259">`T`nie może zawierać wskaźników lub odwołań.</span><span class="sxs-lookup"><span data-stu-id="e6995-259">`T` cannot contain pointers or references.</span></span> <span data-ttu-id="e6995-260">Jest ona sprawdzana w czasie wykonywania w celu zachowania bezpieczeństwa typów.</span><span class="sxs-lookup"><span data-stu-id="e6995-260">It is checked at runtime in order to preserve type safety.</span></span>  

       ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e6995-261"><paramref name="T" />zawiera odwołania lub wskaźniki.</span><span class="sxs-lookup"><span data-stu-id="e6995-261"><paramref name="T" /> contains references or pointers.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Write&lt;T&gt;">
      <MemberSignature Language="C#" Value="public static void Write&lt;T&gt; (Span&lt;byte&gt; destination, ref T value) where T : struct;" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Write&lt;struct .ctor (class System.ValueType) T&gt;(valuetype System.Span`1&lt;unsigned int8&gt; destination, !!T&amp; value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.MemoryMarshal.Write``1(System.Span{System.Byte},``0@)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Write(Of T As Structure) (destination As Span(Of Byte), ByRef value As T)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename T&gt;&#xA; where T : value class static void Write(Span&lt;System::Byte&gt; destination, T % value);" />
      <MemberSignature Language="F#" Value="static member Write : Span&lt;byte&gt; *  -&gt; unit (requires 'T : struct)" Usage="System.Runtime.InteropServices.MemoryMarshal.Write (destination, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Memory</AssemblyName>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T">
          <Constraints>
            <ParameterAttribute>DefaultConstructorConstraint</ParameterAttribute>
            <ParameterAttribute>NotNullableValueTypeConstraint</ParameterAttribute>
            <BaseTypeName>System.ValueType</BaseTypeName>
          </Constraints>
        </TypeParameter>
      </TypeParameters>
      <Parameters>
        <Parameter Name="destination" Type="System.Span&lt;System.Byte&gt;" />
        <Parameter Name="value" Type="T" RefType="ref" />
      </Parameters>
      <Docs>
        <typeparam name="T"><span data-ttu-id="e6995-262">Typ struktury.</span><span class="sxs-lookup"><span data-stu-id="e6995-262">The type of the structure.</span></span></typeparam>
        <param name="destination"><span data-ttu-id="e6995-263">Zakres bajtów, który ma zawierać strukturę.</span><span class="sxs-lookup"><span data-stu-id="e6995-263">The span of bytes to contain the structure.</span></span></param>
        <param name="value"><span data-ttu-id="e6995-264">Struktura, która ma być zapisywana w zakresie.</span><span class="sxs-lookup"><span data-stu-id="e6995-264">The structure to be written to the span.</span></span></param>
        <summary><span data-ttu-id="e6995-265">Zapisuje strukturę typu <paramref name="T" /> w zakresie bajtów.</span><span class="sxs-lookup"><span data-stu-id="e6995-265">Writes a structure of type <paramref name="T" /> into a span of bytes.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  

<span data-ttu-id="e6995-266">`T`nie może zawierać wskaźników lub odwołań.</span><span class="sxs-lookup"><span data-stu-id="e6995-266">`T` cannot contain pointers or references.</span></span> <span data-ttu-id="e6995-267">Jest ona sprawdzana w czasie wykonywania w celu zachowania bezpieczeństwa typów.</span><span class="sxs-lookup"><span data-stu-id="e6995-267">It is checked at runtime in order to preserve type safety.</span></span>  

       ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="e6995-268"><paramref name="T" />zawiera odwołania lub wskaźniki.</span><span class="sxs-lookup"><span data-stu-id="e6995-268"><paramref name="T" /> contains references or pointers.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="e6995-269"><paramref name="destination" />jest za mały do przechowywania <paramref name="value" />.</span><span class="sxs-lookup"><span data-stu-id="e6995-269"><paramref name="destination" /> is too small to contain <paramref name="value" />.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>