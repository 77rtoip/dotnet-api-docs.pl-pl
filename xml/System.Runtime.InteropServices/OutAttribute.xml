<Type Name="OutAttribute" FullName="System.Runtime.InteropServices.OutAttribute">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="bc83c194c574bc1fa62df28fa811b2ca6701020a" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36633186" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class OutAttribute : Attribute" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit OutAttribute extends System.Attribute" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.InteropServices.OutAttribute" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class OutAttribute&#xA;Inherits Attribute" />
  <TypeSignature Language="C++ CLI" Value="public ref class OutAttribute sealed : Attribute" />
  <TypeSignature Language="F#" Value="type OutAttribute = class&#xA;    inherit Attribute" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.0.20.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>mscorlib</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Attribute</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.AttributeUsage(System.AttributeTargets.Parameter, Inherited=false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>
      <span data-ttu-id="f2227-101">Wskazuje, czy dane powinny być przekazywane z wywoływany powrotem do wywołującego.</span>
      <span class="sxs-lookup">
        <span data-stu-id="f2227-101">Indicates that data should be marshaled from callee back to caller.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="f2227-102">Ten atrybut można stosować do parametrów.</span><span class="sxs-lookup"><span data-stu-id="f2227-102">You can apply this attribute to parameters.</span></span>  
  
 <span data-ttu-id="f2227-103"><xref:System.Runtime.InteropServices.OutAttribute> Jest opcjonalna.</span><span class="sxs-lookup"><span data-stu-id="f2227-103">The <xref:System.Runtime.InteropServices.OutAttribute> is optional.</span></span> <span data-ttu-id="f2227-104">Ten atrybut jest obsługiwany dla międzyoperacyjności z modelem COM i tylko wywołania platformy.</span><span class="sxs-lookup"><span data-stu-id="f2227-104">The attribute is supported for COM interop and platform invoke only.</span></span> <span data-ttu-id="f2227-105">W przypadku braku ustawienia jawne międzyoperacyjnego organizatora przyjęto założenie, że reguły na podstawie parametru typu, czy parametr jest przekazywany przez odwołanie lub wartość i określa, czy typ jest kopiowalne i niekopiowalne.</span><span class="sxs-lookup"><span data-stu-id="f2227-105">In the absence of explicit settings, the interop marshaler assumes rules based on the parameter type, whether the parameter is passed by reference or by value, and whether the type is blittable or non-blittable.</span></span> <span data-ttu-id="f2227-106">Na przykład <xref:System.Text.StringBuilder> klasy zawsze zakłada się, że we/wy i Tablica ciągów przekazany przez wartość zakłada, że w.</span><span class="sxs-lookup"><span data-stu-id="f2227-106">For example, the <xref:System.Text.StringBuilder> class is always assumed to be In/Out and an array of strings passed by value is assumed to be In.</span></span>  
  
 <span data-ttu-id="f2227-107">Zachowanie tylko poza nigdy nie jest domyślnie przekazywanie zachowania dla parametrów.</span><span class="sxs-lookup"><span data-stu-id="f2227-107">Out-only behavior is never a default marshaling behavior for parameters.</span></span> <span data-ttu-id="f2227-108">Możesz zastosować <xref:System.Runtime.InteropServices.OutAttribute> dla typów wartości i odwołania przekazywane przez odwołanie, aby zmienić zachowanie Out-only, który jest odpowiednikiem przy użyciu we/wy zachowanie `out` — słowo kluczowe języka C#.</span><span class="sxs-lookup"><span data-stu-id="f2227-108">You can apply the <xref:System.Runtime.InteropServices.OutAttribute> to value and reference types passed by reference to change In/Out behavior to Out-only behavior, which is equivalent to using the `out` keyword in C#.</span></span> <span data-ttu-id="f2227-109">Na przykład tablice przekazany przez wartość przekazywane jako parametry In tylko domyślnie, można zmienić tylko do limitu.</span><span class="sxs-lookup"><span data-stu-id="f2227-109">For example, arrays passed by value, marshaled as In-only parameters by default, can be changed to Out-only.</span></span> <span data-ttu-id="f2227-110">Jednak zachowanie nie zawsze ma semantykę oczekiwanego gdy typy danych kopiowalnych wszystkie elementy lub pola, ponieważ używa międzyoperacyjnego organizatora przypinanie.</span><span class="sxs-lookup"><span data-stu-id="f2227-110">However, the behavior does not always provide expected semantics when the types include all-blittable elements or fields because the interop marshaler uses pinning.</span></span> <span data-ttu-id="f2227-111">Jeśli nie interesują o przekazywanie danych do wywoływany, Out-only organizowanie może zapewnić lepszą wydajność dla typów niekopiowalne.</span><span class="sxs-lookup"><span data-stu-id="f2227-111">If you do not care about passing data into the callee, Out-only marshaling can provide better performance for non-blittable types.</span></span>  
  
 <span data-ttu-id="f2227-112">Łączenie <xref:System.Runtime.InteropServices.InAttribute> i <xref:System.Runtime.InteropServices.OutAttribute> jest szczególnie przydatne w przypadku gdy stosowane do tablic i sformatowany niekopiowalne.</span><span class="sxs-lookup"><span data-stu-id="f2227-112">Combining the <xref:System.Runtime.InteropServices.InAttribute> and <xref:System.Runtime.InteropServices.OutAttribute> is particularly useful when applied to arrays and formatted, non-blittable types.</span></span> <span data-ttu-id="f2227-113">Obiekty wywołujące Zobacz zmiany wprowadzone przez wywoływany do tych typów tylko wtedy, gdy stosowanie obu atrybutów.</span><span class="sxs-lookup"><span data-stu-id="f2227-113">Callers see the changes a callee makes to these types only when you apply both attributes.</span></span> <span data-ttu-id="f2227-114">Ponieważ te typy wymaga kopiowanie podczas przekazywania międzyprocesowego, można użyć <xref:System.Runtime.InteropServices.InAttribute> i <xref:System.Runtime.InteropServices.OutAttribute> Aby ograniczyć niepotrzebne kopie.</span><span class="sxs-lookup"><span data-stu-id="f2227-114">Since these types require copying during marshaling, you can use <xref:System.Runtime.InteropServices.InAttribute> and <xref:System.Runtime.InteropServices.OutAttribute> to reduce unnecessary copies.</span></span>  
  
 <span data-ttu-id="f2227-115">Aby uzyskać więcej informacji na temat wpływu <xref:System.Runtime.InteropServices.OutAttribute> na przekazywanie zachowania, zobacz [kierunkową atrybutów](http://msdn.microsoft.com/library/241ac5b5-928e-4969-8f58-1dbc048f9ea2).</span><span class="sxs-lookup"><span data-stu-id="f2227-115">For more information on the effect of <xref:System.Runtime.InteropServices.OutAttribute> on marshaling behavior, see [Directional Attributes](http://msdn.microsoft.com/library/241ac5b5-928e-4969-8f58-1dbc048f9ea2).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="f2227-116">Poniższy przykład przedstawia sposób zastosowania <xref:System.Runtime.InteropServices.InAttribute> i <xref:System.Runtime.InteropServices.OutAttribute> do platformy wywołania prototyp, która przekazuje tablicy jako parametr.</span><span class="sxs-lookup"><span data-stu-id="f2227-116">The following example shows how to apply the <xref:System.Runtime.InteropServices.InAttribute> and <xref:System.Runtime.InteropServices.OutAttribute> to a platform invoke prototype that passes an array as a parameter.</span></span> <span data-ttu-id="f2227-117">Kombinację atrybutów kierunkową umożliwia obiekt wywołujący, aby zobaczyć zmiany wprowadzone przez funkcję wywołującą.</span><span class="sxs-lookup"><span data-stu-id="f2227-117">The combination of directional attributes allows the caller to see the changes made by the callee.</span></span>  
  
 [!code-cpp[Interop InOutParameters#1](~/samples/snippets/cpp/VS_Snippets_CLR/Interop InOutParameters/CPP/inout.cpp#1)]
 [!code-csharp[Interop InOutParameters#1](~/samples/snippets/csharp/VS_Snippets_CLR/Interop InOutParameters/CS/inout.cs#1)]
 [!code-vb[Interop InOutParameters#1](~/samples/snippets/visualbasic/VS_Snippets_CLR/Interop InOutParameters/VB/inout.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Runtime.InteropServices.InAttribute" />
    <altmember cref="T:System.Text.StringBuilder" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OutAttribute ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.InteropServices.OutAttribute.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; OutAttribute();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.10.0</AssemblyVersion>
        <AssemblyVersion>4.0.20.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>mscorlib</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="f2227-118">Inicjuje nowe wystąpienie klasy <see cref="T:System.Runtime.InteropServices.OutAttribute" /> klasy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="f2227-118">Initializes a new instance of the <see cref="T:System.Runtime.InteropServices.OutAttribute" /> class.</span>
          </span>
        </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>