<Type Name="ApplicationManager" FullName="System.Web.Hosting.ApplicationManager">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="80d1962b5a9da0b12978ea82bb2373f9b3947253" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36600894" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class ApplicationManager : MarshalByRefObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ApplicationManager extends System.MarshalByRefObject" />
  <TypeSignature Language="DocId" Value="T:System.Web.Hosting.ApplicationManager" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ApplicationManager&#xA;Inherits MarshalByRefObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class ApplicationManager sealed : MarshalByRefObject" />
  <TypeSignature Language="F#" Value="type ApplicationManager = class&#xA;    inherit MarshalByRefObject" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Zarządza domen aplikacji platformy ASP.NET dla platformy ASP.NET hosting aplikacji.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Hosting.ApplicationManager> Obiekt zapewnia zarządzanie okresem istnienia obiektów w środowisku macierzystym dla aplikacji ASP.NET. Jest on odpowiedzialny za:  
  
-   Aktywowanie i inicjowania aplikacji ASP.NET.  
  
-   Zarządzanie okresem istnienia aplikacji i okres istnienia obiektów zarejestrowany w aplikacji.  
  
-   Udostępnianie obiektów używanych przez środowisko macierzyste do przetwarzania żądań aplikacji ASP.NET.  
  
-   Dostarcza listę aplikacji uruchomionych w procesie hostingu w danym momencie.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.ApplicationManager.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="applicationManager.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zamyka wszystkie domeny aplikacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli wywołanie <xref:System.Web.Hosting.ApplicationManager.Close%2A> metody zmniejsza liczbę odwołania aplikacji za pomocą Menedżera aplikacji 0 <xref:System.Web.Hosting.ApplicationManager.Close%2A> wywołania metody <xref:System.Web.Hosting.ApplicationManager.ShutdownAll%2A> metody.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateObject">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Tworzy obiekt do domeny i obiektu typu określonej aplikacji.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateObject">
      <MemberSignature Language="C#" Value="public System.Web.Hosting.IRegisteredObject CreateObject (System.Web.Hosting.IApplicationHost appHost, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Web.Hosting.IRegisteredObject CreateObject(class System.Web.Hosting.IApplicationHost appHost, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.ApplicationManager.CreateObject(System.Web.Hosting.IApplicationHost,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Web::Hosting::IRegisteredObject ^ CreateObject(System::Web::Hosting::IApplicationHost ^ appHost, Type ^ type);" />
      <MemberSignature Language="F#" Value="member this.CreateObject : System.Web.Hosting.IApplicationHost * Type -&gt; System.Web.Hosting.IRegisteredObject" Usage="applicationManager.CreateObject (appHost, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Hosting.IRegisteredObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="appHost" Type="System.Web.Hosting.IApplicationHost" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="appHost">
          <see cref="T:System.Web.Hosting.IApplicationHost" /> Obiektu.</param>
        <param name="type">Typ obiektu do utworzenia.</param>
        <summary>Tworzy obiekt do domeny określonej aplikacji, na podstawie typu.</summary>
        <returns>Nowy obiekt typu określonego w <paramref name="type" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Hosting.ApplicationManager.CreateObject%2A> wprowadzono w programie .NET Framework w wersji 3.5.  Aby uzyskać więcej informacji, zobacz [wersje i zależności](~/docs/framework/migration-guide/versions-and-dependencies.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Ścieżka fizyczna aplikacji nie istnieje.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="appHost" /> jest <see langword="null" />.  \- lub - <paramref name="type" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateObject">
      <MemberSignature Language="C#" Value="public System.Web.Hosting.IRegisteredObject CreateObject (string appId, Type type, string virtualPath, string physicalPath, bool failIfExists);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Web.Hosting.IRegisteredObject CreateObject(string appId, class System.Type type, string virtualPath, string physicalPath, bool failIfExists) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.ApplicationManager.CreateObject(System.String,System.Type,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Web::Hosting::IRegisteredObject ^ CreateObject(System::String ^ appId, Type ^ type, System::String ^ virtualPath, System::String ^ physicalPath, bool failIfExists);" />
      <MemberSignature Language="F#" Value="member this.CreateObject : string * Type * string * string * bool -&gt; System.Web.Hosting.IRegisteredObject" Usage="applicationManager.CreateObject (appId, type, virtualPath, physicalPath, failIfExists)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Hosting.IRegisteredObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="appId" Type="System.String" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="virtualPath" Type="System.String" />
        <Parameter Name="physicalPath" Type="System.String" />
        <Parameter Name="failIfExists" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="appId">Unikatowy identyfikator dla aplikacji, która jest właścicielem obiektu.</param>
        <param name="type">Typ obiektu do utworzenia.</param>
        <param name="virtualPath">Ścieżka wirtualna do aplikacji.</param>
        <param name="physicalPath">Ścieżka fizyczna do aplikacji.</param>
        <param name="failIfExists">
          <see langword="true" /> Aby zgłosić wyjątek, jeśli obiekt określonego typu nie jest obecnie zarejestrowany; <see langword="false" /> do zwrócenia istniejącego zarejestrowanego obiektu określonego typu.</param>
        <summary>Tworzy obiekt do domeny określonej aplikacji na podstawie typu, ścieżki wirtualne i fizyczne i wartość logiczną wskazującą zachowanie awarii, gdy istnieje już obiekt określonego typu.</summary>
        <returns>Nowy obiekt z określonym <paramref name="type" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Hosting.ApplicationManager.CreateObject%2A> Metoda jest używana do tworzenia i zarejestrować obiektów w aplikacji. Można utworzyć tylko jeden obiekt każdego typu. Jeśli trzeba utworzyć wiele obiektów tego samego typu, musi implementować fabryka obiektu. Aby uzyskać więcej informacji zobacz przykład kodu, w tym temacie.  
  
 Każda aplikacja, identyfikowany przez identyfikator unikatowy aplikacji działa w domenie aplikacji. <xref:System.Web.Hosting.ApplicationManager.CreateObject%2A> Metoda tworzy obiekt określonego typu w domenie aplikacji określonego w aplikacji `appID` parametru. Jeśli domena aplikacji nie istnieje dla określonej aplikacji, utworzono przed utworzeniem obiektu.  
  
 `failIfExists` Parametr steruje zachowaniem <xref:System.Web.Hosting.ApplicationManager.CreateObject%2A> metody, gdy istnieje już obiekt określonego typu w aplikacji. Gdy `failIfExists` jest `true`, <xref:System.Web.Hosting.ApplicationManager.CreateObject%2A> metoda zgłasza <xref:System.InvalidOperationException> wyjątku.  
  
 Gdy `failIfExists` jest `false`, <xref:System.Web.Hosting.ApplicationManager.CreateObject%2A> metoda zwraca istniejącego zarejestrowanego obiektu określonego typu.  
  
 <xref:System.Web.Hosting.ApplicationManager.CreateObject%2A> Metoda wywołuje przeciążenia, które przyjmuje dodatkowych `throwOnError` parametr o `throwOnError` ustawioną `false`.  
  
   
  
## Examples  
 Poniższy przykładowy kod jest implementacją wzorca projektowego fabryki obiektów dla obiektów w zarejestrowany. Przy użyciu wzorca fabryki można zarejestrować wiele wystąpień obiektu. Przykład zawiera dwa obiekty: `SampleComponent`, która jest obiektem aplikacja będzie używać wielu wystąpień, i `SampleComponentFactory`, który zarządza listą `SampleComponent` wystąpień.  
  
 [!code-csharp[System.Web.Hosting.ApplicationManager#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Hosting.ApplicationManager/CS/appManagercs.aspx.cs#1)]
 [!code-vb[System.Web.Hosting.ApplicationManager#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Hosting.ApplicationManager/VB/appManagervb.aspx.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="physicalPath" /> jest <see langword="null" /> \- lub - <paramref name="physicalPath" /> nie jest prawidłową ścieżkę aplikacji.    \- lub - <paramref name="type" /> nie implementuje <see cref="T:System.Web.Hosting.IRegisteredObject" /> interfejsu.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="appID" /> jest <see langword="null" />.  \- lub - <paramref name="type" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="failIfExists" /> jest <see langword="true" /> i określonego typu obiektu jest już zarejestrowany.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateObject">
      <MemberSignature Language="C#" Value="public System.Web.Hosting.IRegisteredObject CreateObject (string appId, Type type, string virtualPath, string physicalPath, bool failIfExists, bool throwOnError);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Web.Hosting.IRegisteredObject CreateObject(string appId, class System.Type type, string virtualPath, string physicalPath, bool failIfExists, bool throwOnError) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.ApplicationManager.CreateObject(System.String,System.Type,System.String,System.String,System.Boolean,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Web::Hosting::IRegisteredObject ^ CreateObject(System::String ^ appId, Type ^ type, System::String ^ virtualPath, System::String ^ physicalPath, bool failIfExists, bool throwOnError);" />
      <MemberSignature Language="F#" Value="member this.CreateObject : string * Type * string * string * bool * bool -&gt; System.Web.Hosting.IRegisteredObject" Usage="applicationManager.CreateObject (appId, type, virtualPath, physicalPath, failIfExists, throwOnError)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Hosting.IRegisteredObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="appId" Type="System.String" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="virtualPath" Type="System.String" />
        <Parameter Name="physicalPath" Type="System.String" />
        <Parameter Name="failIfExists" Type="System.Boolean" />
        <Parameter Name="throwOnError" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="appId">Unikatowy identyfikator dla aplikacji, która jest właścicielem obiektu.</param>
        <param name="type">Typ obiektu do utworzenia.</param>
        <param name="virtualPath">Ścieżka wirtualna do aplikacji.</param>
        <param name="physicalPath">Ścieżka fizyczna do aplikacji.</param>
        <param name="failIfExists">
          <see langword="true" /> Aby zgłosić wyjątek, jeśli obiekt określonego typu nie jest obecnie zarejestrowany; <see langword="false" /> do zwrócenia istniejącego zarejestrowanego obiektu określonego typu.</param>
        <param name="throwOnError">
          <see langword="true" /> Aby zgłaszają wyjątki hostingu błędy inicjowania; <see langword="false" /> do nie zgłosi wyjątku inicjowania wyjątki hostingu.</param>
        <summary>Tworzy obiekt do domeny określonej aplikacji na podstawie typu, ścieżki wirtualnej i fizycznej, wartość logiczną wskazującą zachowanie awarii, gdy istnieje już obiekt określonego typu i wartość logiczną wartość wskazującą, czy błąd inicjowania obsługi wyjątki są zgłaszane.</summary>
        <returns>Nowy obiekt z określonym <paramref name="type" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To przeciążenie metody <xref:System.Web.Hosting.ApplicationManager.CreateObject%2A> metoda zapewnia `throwOnError` parametr, który umożliwia kontrolowanie, czy są zgłaszane wyjątki inicjowania obsługi. Przeciążenia <xref:System.Web.Hosting.ApplicationManager.CreateObject%2A> metodę, która nie zapewnia `throwOnError` wywołuje tego przeciążenia z parametrem ustawioną `false`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="physicalPath" /> jest <see langword="null" /> \- lub - <paramref name="physicalPath" /> nie jest prawidłową ścieżkę aplikacji.    \- lub - <paramref name="type" /> nie implementuje <see cref="T:System.Web.Hosting.IRegisteredObject" /> interfejsu.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="appID" /> jest <see langword="null" />.  \- lub - <paramref name="type" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException">
          <paramref name="failIfExists" /> jest <see langword="true" /> i określonego typu obiektu jest już zarejestrowany.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetAppDomain">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Pobiera domeny aplikacji w określonej aplikacji.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetAppDomain">
      <MemberSignature Language="C#" Value="public AppDomain GetAppDomain (string appId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.AppDomain GetAppDomain(string appId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.ApplicationManager.GetAppDomain(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAppDomain (appId As String) As AppDomain" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AppDomain ^ GetAppDomain(System::String ^ appId);" />
      <MemberSignature Language="F#" Value="member this.GetAppDomain : string -&gt; AppDomain" Usage="applicationManager.GetAppDomain appId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.AppDomain</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="appId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="appId">Unikatowy identyfikator dla aplikacji.</param>
        <summary>Pobiera domeny aplikacji w określonej aplikacji.</summary>
        <returns>Domena aplikacji w aplikacji.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAppDomain">
      <MemberSignature Language="C#" Value="public AppDomain GetAppDomain (System.Web.Hosting.IApplicationHost appHost);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.AppDomain GetAppDomain(class System.Web.Hosting.IApplicationHost appHost) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.ApplicationManager.GetAppDomain(System.Web.Hosting.IApplicationHost)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAppDomain (appHost As IApplicationHost) As AppDomain" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AppDomain ^ GetAppDomain(System::Web::Hosting::IApplicationHost ^ appHost);" />
      <MemberSignature Language="F#" Value="member this.GetAppDomain : System.Web.Hosting.IApplicationHost -&gt; AppDomain" Usage="applicationManager.GetAppDomain appHost" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.AppDomain</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="appHost" Type="System.Web.Hosting.IApplicationHost" />
      </Parameters>
      <Docs>
        <param name="appHost">Host, który można uzyskać w domenie aplikacji.</param>
        <summary>Pobiera domeny aplikacji w aplikacji przy użyciu określonego hosta.</summary>
        <returns>Domena aplikacji w aplikacji.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetApplicationManager">
      <MemberSignature Language="C#" Value="public static System.Web.Hosting.ApplicationManager GetApplicationManager ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Hosting.ApplicationManager GetApplicationManager() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.ApplicationManager.GetApplicationManager" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetApplicationManager () As ApplicationManager" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::Hosting::ApplicationManager ^ GetApplicationManager();" />
      <MemberSignature Language="F#" Value="static member GetApplicationManager : unit -&gt; System.Web.Hosting.ApplicationManager" Usage="System.Web.Hosting.ApplicationManager.GetApplicationManager " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Hosting.ApplicationManager</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca pojedyncze wystąpienie <see cref="T:System.Web.Hosting.ApplicationManager" /> obiekt skojarzony z tym procesem hosta platformy ASP.NET.</summary>
        <returns>Pojedyncze wystąpienie <see cref="T:System.Web.Hosting.ApplicationManager" /> obiekt skojarzony z procesem hosta platformy ASP.NET, który jest uruchomiony.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tylko jedno wystąpienie <xref:System.Web.Hosting.ApplicationManager> obiekt jest tworzony przez proces hosta platformy ASP.NET w domyślnej domeny aplikacji. Jeśli wystąpienie <xref:System.Web.Hosting.ApplicationManager> klasy nie jest dostępny, <xref:System.Web.Hosting.ApplicationManager.GetApplicationManager%2A> metody najpierw tworzy wystąpienie <xref:System.Web.Hosting.ApplicationManager> klasy, a następnie zwraca nowo utworzony obiekt. Jeśli wystąpienie <xref:System.Web.Hosting.ApplicationManager> klasa została wcześniej utworzona, <xref:System.Web.Hosting.ApplicationManager.GetApplicationManager%2A> metoda zwraca obiekt istniejący.  
  
   
  
## Examples  
 Poniższy przykład kodu wykorzystuje <xref:System.Web.Hosting.ApplicationManager.GetApplicationManager%2A> metoda pobierania <xref:System.Web.Hosting.ApplicationManager> wystąpienia dla aplikacji sieci Web.  
  
 [!code-aspx-csharp[System.Web.Hosting.ApplicationInfo#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Hosting.ApplicationInfo/CS/applicationInfocs.aspx#1)]
 [!code-aspx-vb[System.Web.Hosting.ApplicationInfo#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Hosting.ApplicationInfo/VB/applicationInfovb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetObject">
      <MemberSignature Language="C#" Value="public System.Web.Hosting.IRegisteredObject GetObject (string appId, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Web.Hosting.IRegisteredObject GetObject(string appId, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.ApplicationManager.GetObject(System.String,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Web::Hosting::IRegisteredObject ^ GetObject(System::String ^ appId, Type ^ type);" />
      <MemberSignature Language="F#" Value="member this.GetObject : string * Type -&gt; System.Web.Hosting.IRegisteredObject" Usage="applicationManager.GetObject (appId, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Hosting.IRegisteredObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="appId" Type="System.String" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="appId">Unikatowy identyfikator dla aplikacji, która jest właścicielem obiektu.</param>
        <param name="type">Typ obiektu do zwrócenia.</param>
        <summary>Zwraca zarejestrowanego obiektu określonego typu z określonej aplikacji.</summary>
        <returns>Zarejestrowany obiekt określonego typu; lub <see langword="null" /> czy typ nie został zarejestrowany za pośrednictwem wywołania <see cref="M:System.Web.Hosting.ApplicationManager.CreateObject(System.String,System.Type,System.String,System.String,System.Boolean)" /> metody.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="appId" /> jest <see langword="null" />.  — lub — <paramref name="type" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetRunningApplications">
      <MemberSignature Language="C#" Value="public System.Web.Hosting.ApplicationInfo[] GetRunningApplications ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Web.Hosting.ApplicationInfo[] GetRunningApplications() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.ApplicationManager.GetRunningApplications" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRunningApplications () As ApplicationInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Web::Hosting::ApplicationInfo ^&gt; ^ GetRunningApplications();" />
      <MemberSignature Language="F#" Value="member this.GetRunningApplications : unit -&gt; System.Web.Hosting.ApplicationInfo[]" Usage="applicationManager.GetRunningApplications " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Hosting.ApplicationInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca migawki uruchomionych aplikacji.</summary>
        <returns>Tablica <see cref="T:System.Web.Hosting.ApplicationInfo" /> obiektów, które zawierają informacje o aplikacjach zarządzanych przez to <see cref="T:System.Web.Hosting.ApplicationManager" /> wystąpienia.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu wykorzystuje <xref:System.Web.Hosting.ApplicationManager.GetRunningApplications%2A> metody, aby wyświetlić informacje o aplikacjach zarządzanych przez <xref:System.Web.Hosting.ApplicationManager> wystąpienia.  
  
 [!code-aspx-csharp[System.Web.Hosting.ApplicationInfo#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Hosting.ApplicationInfo/CS/applicationInfocs.aspx#1)]
 [!code-aspx-vb[System.Web.Hosting.ApplicationInfo#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Hosting.ApplicationInfo/VB/applicationInfovb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InitializeLifetimeService">
      <MemberSignature Language="C#" Value="public override object InitializeLifetimeService ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object InitializeLifetimeService() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.ApplicationManager.InitializeLifetimeService" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function InitializeLifetimeService () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Object ^ InitializeLifetimeService();" />
      <MemberSignature Language="F#" Value="override this.InitializeLifetimeService : unit -&gt; obj" Usage="applicationManager.InitializeLifetimeService " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zapewnia domeny aplikacji bez ograniczeń czasowych okres istnienia, zapobiegając tworzona dzierżawy.</summary>
        <returns>Zawsze <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda zastępuje <xref:System.MarshalByRefObject.InitializeLifetimeService%2A> metody w klasie podstawowej. Zawsze zwraca `null` i tym samym uniemożliwia dzierżawy z tworzona, która będzie ograniczona istnienia domeny aplikacji.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsIdle">
      <MemberSignature Language="C#" Value="public bool IsIdle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsIdle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.ApplicationManager.IsIdle" />
      <MemberSignature Language="VB.NET" Value="Public Function IsIdle () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsIdle();" />
      <MemberSignature Language="F#" Value="member this.IsIdle : unit -&gt; bool" Usage="applicationManager.IsIdle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca wartość wskazującą, czy wszystkie aplikacje należące do procesu są w stanie bezczynności i nie przetwarza żądań.</summary>
        <returns>
          <see langword="true" /> Jeśli wszystkie aplikacje w procesie są w stanie bezczynności; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Hosting.ApplicationManager.IsIdle%2A> Metoda zwraca `true` Jeśli wszystkie aplikacje należące do procesu są w stanie bezczynności.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public void Open ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Open() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.ApplicationManager.Open" />
      <MemberSignature Language="VB.NET" Value="Public Sub Open ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Open();" />
      <MemberSignature Language="F#" Value="member this.Open : unit -&gt; unit" Usage="applicationManager.Open " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zgłasza przyrostu wątkowo liczebności referencyjnej użytkownika wystąpienia menedżera aplikacji.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShutdownAll">
      <MemberSignature Language="C#" Value="public void ShutdownAll ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ShutdownAll() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.ApplicationManager.ShutdownAll" />
      <MemberSignature Language="VB.NET" Value="Public Sub ShutdownAll ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ShutdownAll();" />
      <MemberSignature Language="F#" Value="member this.ShutdownAll : unit -&gt; unit" Usage="applicationManager.ShutdownAll " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwalnia wszystkie zasoby aplikacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wywoływanie <xref:System.Web.Hosting.ApplicationManager.ShutdownAll%2A> jest odpowiednikiem wywołania metody <xref:System.Web.Hosting.HostingEnvironment.InitiateShutdown%2A?displayProperty=nameWithType> metody we wszystkich domenach aplikacji zarządzanych przez to <xref:System.Web.Hosting.ApplicationManager> wystąpienia; jednak <xref:System.Web.Hosting.ApplicationManager.ShutdownAll%2A> metodę można wywołać z spoza domeny aplikacji zarządzanych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShutdownApplication">
      <MemberSignature Language="C#" Value="public void ShutdownApplication (string appId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ShutdownApplication(string appId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.ApplicationManager.ShutdownApplication(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ShutdownApplication (appId As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ShutdownApplication(System::String ^ appId);" />
      <MemberSignature Language="F#" Value="member this.ShutdownApplication : string -&gt; unit" Usage="applicationManager.ShutdownApplication appId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="appId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="appId">Unikatowy identyfikator aplikacji do zwolnienia.</param>
        <summary>Zwalnia określonej aplikacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wywoływanie <xref:System.Web.Hosting.ApplicationManager.ShutdownApplication%2A> jest odpowiednikiem wywołania metody <xref:System.Web.Hosting.HostingEnvironment.InitiateShutdown%2A?displayProperty=nameWithType> metodę dla określonej domenie aplikacji; jednak <xref:System.Web.Hosting.ApplicationManager.ShutdownApplication%2A> metodę można wywołać z domeny zewnętrznej zarządzanych aplikacji.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="appId" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="StopObject">
      <MemberSignature Language="C#" Value="public void StopObject (string appId, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StopObject(string appId, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.ApplicationManager.StopObject(System.String,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StopObject(System::String ^ appId, Type ^ type);" />
      <MemberSignature Language="F#" Value="member this.StopObject : string * Type -&gt; unit" Usage="applicationManager.StopObject (appId, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="appId" Type="System.String" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="appId">Unikatowy identyfikator dla aplikacji, która jest właścicielem obiektu.</param>
        <param name="type">Typ obiektu do zwolnienia.</param>
        <summary>Usuwa określony obiekt z listy zarejestrowanych obiektów w aplikacji. Jeśli obiekt do usunięcia jest ostatni obiekt pozostałe na liście zarejestrowanych obiektów w aplikacji, aplikacja nie jest załadowany.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="appId" /> jest <see langword="null" />.  \- lub - <paramref name="type" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>