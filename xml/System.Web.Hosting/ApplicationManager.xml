<Type Name="ApplicationManager" FullName="System.Web.Hosting.ApplicationManager">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d478505a23a56d849504ea42b2be0c3c39f84d49" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69139298" /></Metadata><TypeSignature Language="C#" Value="public sealed class ApplicationManager : MarshalByRefObject" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit ApplicationManager extends System.MarshalByRefObject" />
  <TypeSignature Language="DocId" Value="T:System.Web.Hosting.ApplicationManager" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ApplicationManager&#xA;Inherits MarshalByRefObject" />
  <TypeSignature Language="C++ CLI" Value="public ref class ApplicationManager sealed : MarshalByRefObject" />
  <TypeSignature Language="F#" Value="type ApplicationManager = class&#xA;    inherit MarshalByRefObject" />
  <AssemblyInfo>
    <AssemblyName>System.Web</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Zarządza domenami aplikacji ASP.NET dla aplikacji hostingu ASP.NET.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Hosting.ApplicationManager> Obiekt umożliwia zarządzanie obiektami w środowisku hostingu dla aplikacji ASP.NET. Jest on odpowiedzialny za:  
  
-   Aktywowanie i Inicjowanie aplikacji ASP.NET.  
  
-   Zarządzanie okresem istnienia aplikacji oraz okresem istnienia obiektów zarejestrowanych w aplikacji.  
  
-   Uwidacznianie obiektów używanych przez środowisko hostingu do przetwarzania żądań aplikacji ASP.NET.  
  
-   Udostępnianie w danym momencie listy aplikacji działających w procesie hostingu.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.ApplicationManager.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="applicationManager.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zamyka wszystkie domeny aplikacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli wywołanie <xref:System.Web.Hosting.ApplicationManager.Close%2A> metody zmniejsza liczbę odwołań aplikacji korzystających z Menedżera aplikacji do 0 <xref:System.Web.Hosting.ApplicationManager.Close%2A> , metoda wywołuje <xref:System.Web.Hosting.ApplicationManager.ShutdownAll%2A> metodę.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CreateObject">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Tworzy obiekt dla określonej domeny aplikacji i typu obiektu.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CreateObject">
      <MemberSignature Language="C#" Value="public System.Web.Hosting.IRegisteredObject CreateObject (System.Web.Hosting.IApplicationHost appHost, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Web.Hosting.IRegisteredObject CreateObject(class System.Web.Hosting.IApplicationHost appHost, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.ApplicationManager.CreateObject(System.Web.Hosting.IApplicationHost,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Web::Hosting::IRegisteredObject ^ CreateObject(System::Web::Hosting::IApplicationHost ^ appHost, Type ^ type);" />
      <MemberSignature Language="F#" Value="member this.CreateObject : System.Web.Hosting.IApplicationHost * Type -&gt; System.Web.Hosting.IRegisteredObject" Usage="applicationManager.CreateObject (appHost, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Hosting.IRegisteredObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="appHost" Type="System.Web.Hosting.IApplicationHost" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="appHost"><see cref="T:System.Web.Hosting.IApplicationHost" /> Obiekt.</param>
        <param name="type">Typ obiektu do utworzenia.</param>
        <summary>Tworzy obiekt dla określonej domeny aplikacji w oparciu o typ.</summary>
        <returns>Nowy obiekt typu określonego w <paramref name="type" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Hosting.ApplicationManager.CreateObject%2A>wprowadzono w .NET Framework w wersji 3,5.  Aby uzyskać więcej informacji, zobacz [wersje i zależności](~/docs/framework/migration-guide/versions-and-dependencies.md).  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Ścieżka fizyczna aplikacji nie istnieje.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="appHost" />jest <see langword="null" />.  
  
—lub— 
 <paramref name="type" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateObject">
      <MemberSignature Language="C#" Value="public System.Web.Hosting.IRegisteredObject CreateObject (string appId, Type type, string virtualPath, string physicalPath, bool failIfExists);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Web.Hosting.IRegisteredObject CreateObject(string appId, class System.Type type, string virtualPath, string physicalPath, bool failIfExists) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.ApplicationManager.CreateObject(System.String,System.Type,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Web::Hosting::IRegisteredObject ^ CreateObject(System::String ^ appId, Type ^ type, System::String ^ virtualPath, System::String ^ physicalPath, bool failIfExists);" />
      <MemberSignature Language="F#" Value="member this.CreateObject : string * Type * string * string * bool -&gt; System.Web.Hosting.IRegisteredObject" Usage="applicationManager.CreateObject (appId, type, virtualPath, physicalPath, failIfExists)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Web.Hosting.IRegisteredObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="appId" Type="System.String" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="virtualPath" Type="System.String" />
        <Parameter Name="physicalPath" Type="System.String" />
        <Parameter Name="failIfExists" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="appId">Unikatowy identyfikator aplikacji, która jest właścicielem obiektu.</param>
        <param name="type">Typ obiektu do utworzenia.</param>
        <param name="virtualPath">Ścieżka wirtualna do aplikacji.</param>
        <param name="physicalPath">Ścieżka fizyczna do aplikacji.</param>
        <param name="failIfExists"><see langword="true" />Aby zgłosić wyjątek, jeśli obiekt określonego typu jest obecnie zarejestrowany; <see langword="false" /> aby zwrócić istniejący zarejestrowany obiekt określonego typu.</param>
        <summary>Tworzy obiekt dla określonej domeny aplikacji w oparciu o ścieżki typu, wirtualne i fizyczne, a wartość logiczna wskazująca, że zachowanie nie powiodło się, gdy obiekt określonego typu już istnieje.</summary>
        <returns>Nowy obiekt określonego <paramref name="type" />elementu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Web.Hosting.ApplicationManager.CreateObject%2A> Metoda jest używana do tworzenia i rejestrowania obiektów w aplikacji. Można utworzyć tylko jeden obiekt każdego typu. Jeśli musisz utworzyć wiele obiektów tego samego typu, musisz zaimplementować fabrykę obiektów. Aby uzyskać więcej informacji, zobacz przykład kodu w tym temacie.  
  
 Każda aplikacja identyfikowana przy użyciu unikatowego identyfikatora aplikacji jest uruchamiana we własnej domenie aplikacji. Metoda tworzy obiekt określonego typu w domenie aplikacji aplikacji określonej `appID` w parametrze. <xref:System.Web.Hosting.ApplicationManager.CreateObject%2A> Jeśli domena aplikacji nie istnieje dla określonej aplikacji, zostanie ona utworzona przed utworzeniem obiektu.  
  
 Parametr steruje zachowaniem metody, <xref:System.Web.Hosting.ApplicationManager.CreateObject%2A> gdy obiekt określonego typu już istnieje w aplikacji. `failIfExists` Gdy `failIfExists` ma `true`wartość ,<xref:System.Web.Hosting.ApplicationManager.CreateObject%2A>Metodazgłaszawyjątek. <xref:System.InvalidOperationException>  
  
 Gdy `failIfExists` jest `false` ,<xref:System.Web.Hosting.ApplicationManager.CreateObject%2A> Metoda zwraca istniejący zarejestrowany obiekt określonego typu.  
  
 Metoda wywołuje Przeciążenie, które pobiera dodatkowy `throwOnError` parametr z `throwOnError` ustawioną na `false`. <xref:System.Web.Hosting.ApplicationManager.CreateObject%2A>  
  
   
  
## Examples  
 Poniższy przykład kodu jest implementacją wzorca projektowania obiektu-fabryki dla zarejestrowanych obiektów. Użycie wzorca fabryki umożliwia zarejestrowanie wielu wystąpień obiektu. Przykład zawiera dwa obiekty: `SampleComponent`, który jest obiektem, w którym aplikacja będzie używać wielu wystąpień, i `SampleComponentFactory`, `SampleComponent` która zarządza listą wystąpień.  
  
 [!code-csharp[System.Web.Hosting.ApplicationManager#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Hosting.ApplicationManager/CS/appManagercs.aspx.cs#1)]
 [!code-vb[System.Web.Hosting.ApplicationManager#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Hosting.ApplicationManager/VB/appManagervb.aspx.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="physicalPath" />była<see langword="null" />  
  
—lub— 
 <paramref name="physicalPath" />nie jest prawidłową ścieżką aplikacji.  
  
—lub— 
 <paramref name="type" />nie implementuje <see cref="T:System.Web.Hosting.IRegisteredObject" /> interfejsu.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="appID" />jest <see langword="null" />.  
  
—lub— 
 <paramref name="type" />jest <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException"><paramref name="failIfExists" />jest <see langword="true" /> i obiekt określonego typu jest już zarejestrowany.</exception>
      </Docs>
    </Member>
    <Member MemberName="CreateObject">
      <MemberSignature Language="C#" Value="public System.Web.Hosting.IRegisteredObject CreateObject (string appId, Type type, string virtualPath, string physicalPath, bool failIfExists, bool throwOnError);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Web.Hosting.IRegisteredObject CreateObject(string appId, class System.Type type, string virtualPath, string physicalPath, bool failIfExists, bool throwOnError) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.ApplicationManager.CreateObject(System.String,System.Type,System.String,System.String,System.Boolean,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Web::Hosting::IRegisteredObject ^ CreateObject(System::String ^ appId, Type ^ type, System::String ^ virtualPath, System::String ^ physicalPath, bool failIfExists, bool throwOnError);" />
      <MemberSignature Language="F#" Value="member this.CreateObject : string * Type * string * string * bool * bool -&gt; System.Web.Hosting.IRegisteredObject" Usage="applicationManager.CreateObject (appId, type, virtualPath, physicalPath, failIfExists, throwOnError)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Hosting.IRegisteredObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="appId" Type="System.String" />
        <Parameter Name="type" Type="System.Type" />
        <Parameter Name="virtualPath" Type="System.String" />
        <Parameter Name="physicalPath" Type="System.String" />
        <Parameter Name="failIfExists" Type="System.Boolean" />
        <Parameter Name="throwOnError" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="appId">Unikatowy identyfikator aplikacji, która jest właścicielem obiektu.</param>
        <param name="type">Typ obiektu do utworzenia.</param>
        <param name="virtualPath">Ścieżka wirtualna do aplikacji.</param>
        <param name="physicalPath">Ścieżka fizyczna do aplikacji.</param>
        <param name="failIfExists"><see langword="true" />Aby zgłosić wyjątek, jeśli obiekt określonego typu jest obecnie zarejestrowany; <see langword="false" /> aby zwrócić istniejący zarejestrowany obiekt określonego typu.</param>
        <param name="throwOnError"><see langword="true" />Aby zgłosić wyjątki dla błędów inicjowania obsługi; <see langword="false" /> nie zgłaszaj wyjątków inicjowania hostingu.</param>
        <summary>Tworzy obiekt dla określonej domeny aplikacji w oparciu o ścieżki typu, wirtualne i fizyczne, wartość logiczna wskazująca niepowodzenie, gdy obiekt określonego typu już istnieje, i wartość logiczna wskazującą, czy błąd inicjowania hostingu zostały zgłoszone wyjątki.</summary>
        <returns>Nowy obiekt określonego <paramref name="type" />elementu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To Przeciążenie <xref:System.Web.Hosting.ApplicationManager.CreateObject%2A> metody `throwOnError` zapewnia parametr, który umożliwia kontrolowanie, czy są zgłaszane wyjątki inicjowania obsługi. Przeciążenie <xref:System.Web.Hosting.ApplicationManager.CreateObject%2A> metody, która nie zapewnia `throwOnError` wywołania tego przeciążenia z parametrem ustawionym na `false`.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="physicalPath" />była<see langword="null" />  
  
—lub— 
 <paramref name="physicalPath" />nie jest prawidłową ścieżką aplikacji.  
  
—lub— 
 <paramref name="type" />nie implementuje <see cref="T:System.Web.Hosting.IRegisteredObject" /> interfejsu.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="appID" />jest <see langword="null" />.  
  
—lub— 
 <paramref name="type" />jest <see langword="null" />.</exception>
        <exception cref="T:System.InvalidOperationException"><paramref name="failIfExists" />jest <see langword="true" /> i obiekt określonego typu jest już zarejestrowany.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GetAppDomain">
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Pobiera domenę aplikacji określonej aplikacji.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetAppDomain">
      <MemberSignature Language="C#" Value="public AppDomain GetAppDomain (string appId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.AppDomain GetAppDomain(string appId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.ApplicationManager.GetAppDomain(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAppDomain (appId As String) As AppDomain" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AppDomain ^ GetAppDomain(System::String ^ appId);" />
      <MemberSignature Language="F#" Value="member this.GetAppDomain : string -&gt; AppDomain" Usage="applicationManager.GetAppDomain appId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.AppDomain</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="appId" Type="System.String" Index="0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="appId">Unikatowy identyfikator aplikacji.</param>
        <summary>Pobiera domenę aplikacji określonej aplikacji.</summary>
        <returns>Domena aplikacji aplikacji.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetAppDomain">
      <MemberSignature Language="C#" Value="public AppDomain GetAppDomain (System.Web.Hosting.IApplicationHost appHost);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.AppDomain GetAppDomain(class System.Web.Hosting.IApplicationHost appHost) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.ApplicationManager.GetAppDomain(System.Web.Hosting.IApplicationHost)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetAppDomain (appHost As IApplicationHost) As AppDomain" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; AppDomain ^ GetAppDomain(System::Web::Hosting::IApplicationHost ^ appHost);" />
      <MemberSignature Language="F#" Value="member this.GetAppDomain : System.Web.Hosting.IApplicationHost -&gt; AppDomain" Usage="applicationManager.GetAppDomain appHost" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.AppDomain</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="appHost" Type="System.Web.Hosting.IApplicationHost" Index="0" FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="appHost">Host, dla którego ma zostać uzyskana domena aplikacji.</param>
        <summary>Pobiera domenę aplikacji aplikacji przy użyciu określonego hosta.</summary>
        <returns>Domena aplikacji aplikacji.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetApplicationManager">
      <MemberSignature Language="C#" Value="public static System.Web.Hosting.ApplicationManager GetApplicationManager ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Web.Hosting.ApplicationManager GetApplicationManager() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.ApplicationManager.GetApplicationManager" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetApplicationManager () As ApplicationManager" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Web::Hosting::ApplicationManager ^ GetApplicationManager();" />
      <MemberSignature Language="F#" Value="static member GetApplicationManager : unit -&gt; System.Web.Hosting.ApplicationManager" Usage="System.Web.Hosting.ApplicationManager.GetApplicationManager " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Hosting.ApplicationManager</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca pojedyncze wystąpienie <see cref="T:System.Web.Hosting.ApplicationManager" /> obiektu skojarzonego z tym procesem hosta ASP.NET.</summary>
        <returns>Pojedyncze wystąpienie <see cref="T:System.Web.Hosting.ApplicationManager" /> obiektu skojarzone z uruchomionym procesem hosta ASP.NET.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tylko jedno wystąpienie <xref:System.Web.Hosting.ApplicationManager> obiektu jest tworzone przez proces hosta ASP.NET w domyślnej domenie aplikacji. Jeśli wystąpienie <xref:System.Web.Hosting.ApplicationManager> klasy jest niedostępne <xref:System.Web.Hosting.ApplicationManager.GetApplicationManager%2A> , Metoda najpierw <xref:System.Web.Hosting.ApplicationManager> tworzy wystąpienie klasy, a następnie zwraca nowo utworzony obiekt. Jeśli wcześniej utworzono wystąpienie <xref:System.Web.Hosting.ApplicationManager> klasy <xref:System.Web.Hosting.ApplicationManager.GetApplicationManager%2A> , metoda zwraca istniejący obiekt.  
  
   
  
## Examples  
 Poniższy przykład kodu używa metody, <xref:System.Web.Hosting.ApplicationManager.GetApplicationManager%2A> aby <xref:System.Web.Hosting.ApplicationManager> pobrać wystąpienie dla aplikacji sieci Web.  
  
 [!code-aspx-csharp[System.Web.Hosting.ApplicationInfo#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Hosting.ApplicationInfo/CS/applicationInfocs.aspx#1)]
 [!code-aspx-vb[System.Web.Hosting.ApplicationInfo#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Hosting.ApplicationInfo/VB/applicationInfovb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetObject">
      <MemberSignature Language="C#" Value="public System.Web.Hosting.IRegisteredObject GetObject (string appId, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Web.Hosting.IRegisteredObject GetObject(string appId, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.ApplicationManager.GetObject(System.String,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Web::Hosting::IRegisteredObject ^ GetObject(System::String ^ appId, Type ^ type);" />
      <MemberSignature Language="F#" Value="member this.GetObject : string * Type -&gt; System.Web.Hosting.IRegisteredObject" Usage="applicationManager.GetObject (appId, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Hosting.IRegisteredObject</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="appId" Type="System.String" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="appId">Unikatowy identyfikator aplikacji, która jest właścicielem obiektu.</param>
        <param name="type">Typ obiektu do zwrócenia.</param>
        <summary>Zwraca zarejestrowany obiekt określonego typu z określonej aplikacji.</summary>
        <returns>Zarejestrowano obiekt określonego typu; lub <see langword="null" /> Jeśli typ nie został zarejestrowany za pomocą wywołania <see cref="M:System.Web.Hosting.ApplicationManager.CreateObject(System.String,System.Type,System.String,System.String,System.Boolean)" /> metody.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="appId" />jest <see langword="null" />.  
  
—lub— 
 <paramref name="type" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetRunningApplications">
      <MemberSignature Language="C#" Value="public System.Web.Hosting.ApplicationInfo[] GetRunningApplications ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Web.Hosting.ApplicationInfo[] GetRunningApplications() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.ApplicationManager.GetRunningApplications" />
      <MemberSignature Language="VB.NET" Value="Public Function GetRunningApplications () As ApplicationInfo()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Web::Hosting::ApplicationInfo ^&gt; ^ GetRunningApplications();" />
      <MemberSignature Language="F#" Value="member this.GetRunningApplications : unit -&gt; System.Web.Hosting.ApplicationInfo[]" Usage="applicationManager.GetRunningApplications " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Web.Hosting.ApplicationInfo[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca migawkę uruchomionych aplikacji.</summary>
        <returns>Tablica <see cref="T:System.Web.Hosting.ApplicationInfo" /> obiektów, które zawierają informacje o aplikacjach zarządzanych przez to <see cref="T:System.Web.Hosting.ApplicationManager" /> wystąpienie.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu używa <xref:System.Web.Hosting.ApplicationManager.GetRunningApplications%2A> metody do wyświetlania informacji o aplikacjach zarządzanych <xref:System.Web.Hosting.ApplicationManager> przez wystąpienie.  
  
 [!code-aspx-csharp[System.Web.Hosting.ApplicationInfo#1](~/samples/snippets/csharp/VS_Snippets_WebNet/System.Web.Hosting.ApplicationInfo/CS/applicationInfocs.aspx#1)]
 [!code-aspx-vb[System.Web.Hosting.ApplicationInfo#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/System.Web.Hosting.ApplicationInfo/VB/applicationInfovb.aspx#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="InitializeLifetimeService">
      <MemberSignature Language="C#" Value="public override object InitializeLifetimeService ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object InitializeLifetimeService() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.ApplicationManager.InitializeLifetimeService" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function InitializeLifetimeService () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Object ^ InitializeLifetimeService();" />
      <MemberSignature Language="F#" Value="override this.InitializeLifetimeService : unit -&gt; obj" Usage="applicationManager.InitializeLifetimeService " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Nadaje domenie aplikacji nieskończony okres istnienia, uniemożliwiając utworzenie dzierżawy.</summary>
        <returns>Zawsze <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda przesłania <xref:System.MarshalByRefObject.InitializeLifetimeService%2A> metodę w klasie bazowej. Zawsze zwraca `null` i w ten sposób zapobiega utworzeniu dzierżawy, co spowodowałoby ograniczenie okresu istnienia domeny aplikacji.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsIdle">
      <MemberSignature Language="C#" Value="public bool IsIdle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool IsIdle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.ApplicationManager.IsIdle" />
      <MemberSignature Language="VB.NET" Value="Public Function IsIdle () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool IsIdle();" />
      <MemberSignature Language="F#" Value="member this.IsIdle : unit -&gt; bool" Usage="applicationManager.IsIdle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca wartość wskazującą, czy wszystkie aplikacje hostowane przez proces są bezczynne i nie przetwarzają żądań.</summary>
        <returns><see langword="true" />Jeśli wszystkie aplikacje w procesie są bezczynne; w przeciwnym razie. <see langword="false" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda <xref:System.Web.Hosting.ApplicationManager.IsIdle%2A> zwraca wartość `true` , jeśli wszystkie aplikacje hostowane przez proces są w stanie bezczynności.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public void Open ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Open() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.ApplicationManager.Open" />
      <MemberSignature Language="VB.NET" Value="Public Sub Open ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Open();" />
      <MemberSignature Language="F#" Value="member this.Open : unit -&gt; unit" Usage="applicationManager.Open " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwiększa bezpieczny wątkowo przyrost liczby odwołań użytkownika wystąpienia Menedżera aplikacji.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ShutdownAll">
      <MemberSignature Language="C#" Value="public void ShutdownAll ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ShutdownAll() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.ApplicationManager.ShutdownAll" />
      <MemberSignature Language="VB.NET" Value="Public Sub ShutdownAll ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ShutdownAll();" />
      <MemberSignature Language="F#" Value="member this.ShutdownAll : unit -&gt; unit" Usage="applicationManager.ShutdownAll " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwalnia wszystkie zasoby aplikacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wywołanie metody jest równoważne <xref:System.Web.Hosting.HostingEnvironment.InitiateShutdown%2A?displayProperty=nameWithType> wywołaniu metody we wszystkich domenach aplikacji zarządzanych przez to <xref:System.Web.Hosting.ApplicationManager> wystąpienie, jednak <xref:System.Web.Hosting.ApplicationManager.ShutdownAll%2A> Metoda może być wywoływana spoza domen aplikacji zarządzanych. <xref:System.Web.Hosting.ApplicationManager.ShutdownAll%2A>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShutdownApplication">
      <MemberSignature Language="C#" Value="public void ShutdownApplication (string appId);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ShutdownApplication(string appId) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.ApplicationManager.ShutdownApplication(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ShutdownApplication (appId As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ShutdownApplication(System::String ^ appId);" />
      <MemberSignature Language="F#" Value="member this.ShutdownApplication : string -&gt; unit" Usage="applicationManager.ShutdownApplication appId" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="appId" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="appId">Unikatowy identyfikator aplikacji do zwolnienia.</param>
        <summary>Zwalnia określoną aplikację.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wywołanie metody jest równoważne <xref:System.Web.Hosting.HostingEnvironment.InitiateShutdown%2A?displayProperty=nameWithType> wywołaniu metody dla konkretnej <xref:System.Web.Hosting.ApplicationManager.ShutdownApplication%2A> domeny aplikacji, jednak metoda może być wywoływana z zewnątrz domen aplikacji zarządzanych. <xref:System.Web.Hosting.ApplicationManager.ShutdownApplication%2A>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="appId" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="StopObject">
      <MemberSignature Language="C#" Value="public void StopObject (string appId, Type type);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void StopObject(string appId, class System.Type type) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Web.Hosting.ApplicationManager.StopObject(System.String,System.Type)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void StopObject(System::String ^ appId, Type ^ type);" />
      <MemberSignature Language="F#" Value="member this.StopObject : string * Type -&gt; unit" Usage="applicationManager.StopObject (appId, type)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Web</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="appId" Type="System.String" />
        <Parameter Name="type" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="appId">Unikatowy identyfikator aplikacji, która jest właścicielem obiektu.</param>
        <param name="type">Typ obiektu do zwolnienia.</param>
        <summary>Usuwa określony obiekt z listy zarejestrowanych obiektów w aplikacji. Jeśli obiekt do usunięcia jest ostatnim pozostałym obiektem na liście zarejestrowanych obiektów w aplikacji, aplikacja zostanie zwolniona.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="appId" />jest <see langword="null" />.  
  
—lub— 
 <paramref name="type" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
  </Members>
</Type>
