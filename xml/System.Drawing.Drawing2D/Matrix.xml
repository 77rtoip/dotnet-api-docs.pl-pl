<Type Name="Matrix" FullName="System.Drawing.Drawing2D.Matrix">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a65e3ba88f758ba0e325ee6bbe7d6adcfc16159f" /><Meta Name="ms.sourcegitcommit" Value="1bb00d2f4343e73ae8d58668f02297a3cf10a4c1" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="06/15/2019" /><Meta Name="ms.locfileid" Value="63881751" /></Metadata><TypeSignature Language="C#" Value="public sealed class Matrix : MarshalByRefObject, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit Matrix extends System.MarshalByRefObject implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Drawing.Drawing2D.Matrix" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class Matrix&#xA;Inherits MarshalByRefObject&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Matrix sealed : MarshalByRefObject, IDisposable" />
  <TypeSignature Language="F#" Value="type Matrix = class&#xA;    inherit MarshalByRefObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Drawing</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Drawing.Common</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.1</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Hermetyzuje macierzy affine — 3, 3, reprezentujący geometrycznych transformacji. Klasa ta nie może być dziedziczona.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W [!INCLUDE[ndptecgdiplus](~/includes/ndptecgdiplus-md.md)] można przechowywać affine — przekształcenia w <xref:System.Drawing.Drawing2D.Matrix> obiektu. Ponieważ trzecia kolumna macierzy, który reprezentuje affine — przekształcenia jest zawsze (0, 0, 1), określ tylko sześć cyfr w pierwszych dwóch kolumn będących jej podczas konstruowania <xref:System.Drawing.Drawing2D.Matrix> obiektu. Wykonywanie instrukcji `Matrix myMatrix = new Matrix(0, 1, -1, 0, 3, 4)` tworzy macierzy pokazano na poniższej ilustracji.  
  
 ![Przekształcenia](~/add/media/aboutgdip05-art10.gif "przekształcenia")  
  
## <a name="composite-transformations"></a>Composite — przekształcenia  
 Złożone przekształcenia to sekwencja przekształceń, jeden następuje drugiego. Należy wziąć pod uwagę macierzy, a przekształcenia na poniższej liście:  
  
|||  
|-|-|  
|Tabela A|Obrót o 90 stopni|  
|Tabela B|Możesz zmieniać skalę, współczynnik 2 w kierunku x|  
|Matrix C|Tłumaczenie 3 jednostki w kierunku y|  
  
 Jeśli Możemy zaczynać punkt (2, 1) - o macierzy [2 1 1 -] i mnożenia, następnie B, następnie C, punkt, (2, 1), zostaną poddane trzy przekształcenia w podanej kolejności.  
  
 [2 1 1]ABC = [-2 5 1]  
  
 Raczej niż trzy części złożone przekształcenia są przechowywane w trzech oddzielnych macierzy, należy pomnożyć A, B i C ze sobą można pobrać jednej macierzy 3 x 3, która przechowuje cały przekształcenia złożonego. Załóżmy, że ABC = D. Następnie punkt pomnożona przez D daje ten sam wynik jako punkt pomnożona przez A, następnie B, następnie C.  
  
 [2 1 1]D = [-2 5 1]  
  
 Na poniższej ilustracji przedstawiono macierzy, A, B, C i D.  
  
 ![Przekształcenia](~/add/media/aboutgdip05-art12.gif "przekształcenia")  
  
 Fakt, że macierzy transformacji złożonych mogą powstawać przez mnożenie macierzy transformacji poszczególnych oznacza, że dowolnej sekwencji affine — przekształcenia mogą być przechowywane w jednej <xref:System.Drawing.Drawing2D.Matrix> obiektu.  
  
> [!CAUTION]
>  Kolejność złożonych transformacji jest ważna. Ogólnie rzecz biorąc, obracanie, skalowanie, a następnie tłumaczenie jest nie sam jako skali, obracanie, następnie tłumaczenie. Podobnie ważne jest kolejność mnożenie macierzy. Ogólnie rzecz biorąc ABC nie jest taka sama jak KOPIE.  
  
 <xref:System.Drawing.Drawing2D.Matrix> Klasa udostępnia kilka metod do tworzenia złożonych transformacji: <xref:System.Drawing.Drawing2D.Matrix.Multiply%2A>, <xref:System.Drawing.Drawing2D.Matrix.Rotate%2A>, <xref:System.Drawing.Drawing2D.Matrix.RotateAt%2A>, <xref:System.Drawing.Drawing2D.Matrix.Scale%2A>, <xref:System.Drawing.Drawing2D.Matrix.Shear%2A>, i <xref:System.Drawing.Drawing2D.Matrix.Translate%2A>. Poniższy przykład tworzy macierzy transformacji złożonego, najpierw obraca się 30 stopni, a następnie skaluje się o 2 w kierunku y, która przetwarza 5 jednostek w kierunku x:  
  
 [!code-csharp[System.Drawing.CoordinateSystems#11](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.CoordinateSystems/CS/Class1.cs#11)]
 [!code-vb[System.Drawing.CoordinateSystems#11](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.CoordinateSystems/VB/Class1.vb#11)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/9fef7451-bddf-4c68-9350-400d1f1f25a3">Systemy i przekształcenia współrzędnych</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Drawing.Drawing2D.Matrix" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Matrix ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.Matrix.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Matrix();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Drawing.Drawing2D.Matrix" /> klasy jako macierz tożsamości.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Matrix (System.Drawing.Rectangle rect, System.Drawing.Point[] plgpts);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Drawing.Rectangle rect, valuetype System.Drawing.Point[] plgpts) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.Matrix.#ctor(System.Drawing.Rectangle,System.Drawing.Point[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (rect As Rectangle, plgpts As Point())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Matrix(System::Drawing::Rectangle rect, cli::array &lt;System::Drawing::Point&gt; ^ plgpts);" />
      <MemberSignature Language="F#" Value="new System.Drawing.Drawing2D.Matrix : System.Drawing.Rectangle * System.Drawing.Point[] -&gt; System.Drawing.Drawing2D.Matrix" Usage="new System.Drawing.Drawing2D.Matrix (rect, plgpts)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
        <Parameter Name="plgpts" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <param name="rect">A <see cref="T:System.Drawing.Rectangle" /> strukturę, która reprezentuje prostokąt, które mają zostać przetworzone.</param>
        <param name="plgpts">Tablica trzy <see cref="T:System.Drawing.Point" /> struktur, które reprezentuje punkty równoległobok, do której ma zostać przekształcone lewym, prawym górnym rogu i lewym dolnym rogu prostokąta. W prawym dolnym rogu równoległobok jest implikowany przez pierwsze trzy rogi.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Drawing.Drawing2D.Matrix" /> klasy w celu przekształcenia geometryczne, zdefiniowane przez określony prostokąt, tablica punktów.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda inicjuje nowej macierzy w taki sposób, że reprezentuje przekształcenie geometryczne, mapująca prostokąt określony przez `rect` parametr równoległobok zdefiniowane przez trzy punkty w `plgpts` parametru. W lewym górnym rogu prostokąta jest mapowany na pierwszy punkt `plgpts` tablicy, w prawym górnym rogu jest mapowany do drugiego i lewego dolnego rogu jest mapowany do punktu trzeci. Prawy dolny punkt równoległobok jest implikowany przez pierwsze trzy.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Matrix (System.Drawing.RectangleF rect, System.Drawing.PointF[] plgpts);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Drawing.RectangleF rect, valuetype System.Drawing.PointF[] plgpts) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.Matrix.#ctor(System.Drawing.RectangleF,System.Drawing.PointF[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (rect As RectangleF, plgpts As PointF())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Matrix(System::Drawing::RectangleF rect, cli::array &lt;System::Drawing::PointF&gt; ^ plgpts);" />
      <MemberSignature Language="F#" Value="new System.Drawing.Drawing2D.Matrix : System.Drawing.RectangleF * System.Drawing.PointF[] -&gt; System.Drawing.Drawing2D.Matrix" Usage="new System.Drawing.Drawing2D.Matrix (rect, plgpts)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
        <Parameter Name="plgpts" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <param name="rect">A <see cref="T:System.Drawing.RectangleF" /> strukturę, która reprezentuje prostokąt, które mają zostać przetworzone.</param>
        <param name="plgpts">Tablica trzy <see cref="T:System.Drawing.PointF" /> struktur, które reprezentuje punkty równoległobok, do której ma zostać przekształcone lewym, prawym górnym rogu i lewym dolnym rogu prostokąta. W prawym dolnym rogu równoległobok jest implikowany przez pierwsze trzy rogi.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Drawing.Drawing2D.Matrix" /> klasy w celu przekształcenia geometryczne, zdefiniowane przez określony prostokąt, tablica punktów.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda inicjuje nową <xref:System.Drawing.Drawing2D.Matrix> taki sposób, że reprezentuje przekształcenie geometryczne, mapująca prostokąt określony przez `rect` parametr równoległobok zdefiniowane przez trzy punkty w `plgpts` parametru. W lewym górnym rogu prostokąta jest mapowany na pierwszy punkt `plgpts` tablicy, w prawym górnym rogu jest mapowany do drugiego i lewego dolnego rogu jest mapowany do punktu trzeci. Prawy dolny punkt równoległobok jest implikowany przez pierwsze trzy.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Matrix (float m11, float m12, float m21, float m22, float dx, float dy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(float32 m11, float32 m12, float32 m21, float32 m22, float32 dx, float32 dy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.Matrix.#ctor(System.Single,System.Single,System.Single,System.Single,System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (m11 As Single, m12 As Single, m21 As Single, m22 As Single, dx As Single, dy As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Matrix(float m11, float m12, float m21, float m22, float dx, float dy);" />
      <MemberSignature Language="F#" Value="new System.Drawing.Drawing2D.Matrix : single * single * single * single * single * single -&gt; System.Drawing.Drawing2D.Matrix" Usage="new System.Drawing.Drawing2D.Matrix (m11, m12, m21, m22, dx, dy)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="m11" Type="System.Single" />
        <Parameter Name="m12" Type="System.Single" />
        <Parameter Name="m21" Type="System.Single" />
        <Parameter Name="m22" Type="System.Single" />
        <Parameter Name="dx" Type="System.Single" />
        <Parameter Name="dy" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="m11">Wartość w pierwszym wierszu i pierwszą kolumnę nowej <see cref="T:System.Drawing.Drawing2D.Matrix" />.</param>
        <param name="m12">Wartości z pierwszej kolumny wiersza i sekundę nowej <see cref="T:System.Drawing.Drawing2D.Matrix" />.</param>
        <param name="m21">Wartość w drugim wierszu i pierwszą kolumnę nowej <see cref="T:System.Drawing.Drawing2D.Matrix" />.</param>
        <param name="m22">Wartość w drugiej kolumnie wierszy i sekundę nowej <see cref="T:System.Drawing.Drawing2D.Matrix" />.</param>
        <param name="dx">Wartość w trzecim rzędzie i pierwszą kolumnę nowej <see cref="T:System.Drawing.Drawing2D.Matrix" />.</param>
        <param name="dy">Wartość w trzeciej kolumnie wierszy i sekundę nowej <see cref="T:System.Drawing.Drawing2D.Matrix" />.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Drawing.Drawing2D.Matrix" /> klasy przy użyciu określonych elementów.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.Matrix Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Drawing.Drawing2D.Matrix Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.Matrix.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As Matrix" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Drawing::Drawing2D::Matrix ^ Clone();" />
      <MemberSignature Language="F#" Value="member this.Clone : unit -&gt; System.Drawing.Drawing2D.Matrix" Usage="matrix.Clone " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.Matrix</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Tworzy dokładną kopię tego <see cref="T:System.Drawing.Drawing2D.Matrix" />.</summary>
        <returns><see cref="T:System.Drawing.Drawing2D.Matrix" /> Tworzącą tę metodę.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.Matrix.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="matrix.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwalnia wszelkie zasoby używane przez to <see cref="T:System.Drawing.Drawing2D.Matrix" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wywoływanie `Dispose` umożliwia zasoby używane przez to <xref:System.Drawing.Drawing2D.Matrix> obiektu zostają przeniesione do innych celów.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Elements">
      <MemberSignature Language="C#" Value="public float[] Elements { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32[] Elements" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Drawing2D.Matrix.Elements" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Elements As Single()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;float&gt; ^ Elements { cli::array &lt;float&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Elements : single[]" Usage="System.Drawing.Drawing2D.Matrix.Elements" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera tablicę wartości zmiennoprzecinkowych reprezentuje elementy tego <see cref="T:System.Drawing.Drawing2D.Matrix" />.</summary>
        <value>Tablica wartości zmiennoprzecinkowych reprezentuje elementy tego <see cref="T:System.Drawing.Drawing2D.Matrix" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Elementy m11, m12, m21 m22, dx i dy z <xref:System.Drawing.Drawing2D.Matrix> są reprezentowane przez wartości w tablicy w tej kolejności.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.Matrix.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="matrix.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Obiekt do przetestowania.</param>
        <summary>Sprawdza, czy określony obiekt jest <see cref="T:System.Drawing.Drawing2D.Matrix" /> i jest taka sama jak to <see cref="T:System.Drawing.Drawing2D.Matrix" />.</summary>
        <returns>Ta metoda zwraca <see langword="true" /> Jeśli <paramref name="obj" /> jest określony <see cref="T:System.Drawing.Drawing2D.Matrix" /> taka sama jak ta <see cref="T:System.Drawing.Drawing2D.Matrix" />; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~Matrix ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.Matrix.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!Matrix ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="matrix.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Umożliwia obiektu spróbuj zwolnić zasoby i wykonywać inne operacje oczyszczania, zanim go jest odzyskiwane przez wyrzucanie elementów bezużytecznych.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.Matrix.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="matrix.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca wartość skrótu.</summary>
        <returns>Wartość skrótu dla tego <see cref="T:System.Drawing.Drawing2D.Matrix" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Invert">
      <MemberSignature Language="C#" Value="public void Invert ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Invert() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.Matrix.Invert" />
      <MemberSignature Language="VB.NET" Value="Public Sub Invert ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Invert();" />
      <MemberSignature Language="F#" Value="member this.Invert : unit -&gt; unit" Usage="matrix.Invert " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Odwraca to <see cref="T:System.Drawing.Drawing2D.Matrix" />, jeśli jest on invertible.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu tworzy macierzy, a jego odwraca:  
  
```csharp  
Matrix myMatrix = new Matrix(3, 5, 1, 2, 2, 4);  
 myMatrix.Invert();  
```  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsIdentity">
      <MemberSignature Language="C#" Value="public bool IsIdentity { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsIdentity" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Drawing2D.Matrix.IsIdentity" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsIdentity As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsIdentity { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsIdentity : bool" Usage="System.Drawing.Drawing2D.Matrix.IsIdentity" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą czy to <see cref="T:System.Drawing.Drawing2D.Matrix" /> jest macierzą.</summary>
        <value>Ta właściwość jest <see langword="true" /> Jeśli <see cref="T:System.Drawing.Drawing2D.Matrix" /> tożsamości; w przeciwnym razie <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsInvertible">
      <MemberSignature Language="C#" Value="public bool IsInvertible { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsInvertible" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Drawing2D.Matrix.IsInvertible" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsInvertible As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsInvertible { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsInvertible : bool" Usage="System.Drawing.Drawing2D.Matrix.IsInvertible" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą czy to <see cref="T:System.Drawing.Drawing2D.Matrix" /> jest invertible.</summary>
        <value>Ta właściwość jest <see langword="true" /> Jeśli <see cref="T:System.Drawing.Drawing2D.Matrix" /> jest invertible; w przeciwnym razie <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Multiply">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Mnoży to <see cref="T:System.Drawing.Drawing2D.Matrix" /> przez określony <see cref="T:System.Drawing.Drawing2D.Matrix" /> przez poprzedzenie jej określonego <see cref="T:System.Drawing.Drawing2D.Matrix" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Multiply">
      <MemberSignature Language="C#" Value="public void Multiply (System.Drawing.Drawing2D.Matrix matrix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Multiply(class System.Drawing.Drawing2D.Matrix matrix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.Matrix.Multiply(System.Drawing.Drawing2D.Matrix)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Multiply(System::Drawing::Drawing2D::Matrix ^ matrix);" />
      <MemberSignature Language="F#" Value="member this.Multiply : System.Drawing.Drawing2D.Matrix -&gt; unit" Usage="matrix.Multiply matrix" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="matrix" Type="System.Drawing.Drawing2D.Matrix" />
      </Parameters>
      <Docs>
        <param name="matrix"><see cref="T:System.Drawing.Drawing2D.Matrix" /> , Do którego należy to <see cref="T:System.Drawing.Drawing2D.Matrix" /> jest mnożona.</param>
        <summary>Mnoży to <see cref="T:System.Drawing.Drawing2D.Matrix" /> przez macierz określone w <paramref name="matrix" /> parametru przez poprzedzenie jej określonego <see cref="T:System.Drawing.Drawing2D.Matrix" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Aby uzyskać przykład, zobacz <xref:System.Drawing.Drawing2D.Matrix.Multiply%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Multiply">
      <MemberSignature Language="C#" Value="public void Multiply (System.Drawing.Drawing2D.Matrix matrix, System.Drawing.Drawing2D.MatrixOrder order);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Multiply(class System.Drawing.Drawing2D.Matrix matrix, valuetype System.Drawing.Drawing2D.MatrixOrder order) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.Matrix.Multiply(System.Drawing.Drawing2D.Matrix,System.Drawing.Drawing2D.MatrixOrder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Multiply(System::Drawing::Drawing2D::Matrix ^ matrix, System::Drawing::Drawing2D::MatrixOrder order);" />
      <MemberSignature Language="F#" Value="member this.Multiply : System.Drawing.Drawing2D.Matrix * System.Drawing.Drawing2D.MatrixOrder -&gt; unit" Usage="matrix.Multiply (matrix, order)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="matrix" Type="System.Drawing.Drawing2D.Matrix" />
        <Parameter Name="order" Type="System.Drawing.Drawing2D.MatrixOrder" />
      </Parameters>
      <Docs>
        <param name="matrix"><see cref="T:System.Drawing.Drawing2D.Matrix" /> , Do którego należy to <see cref="T:System.Drawing.Drawing2D.Matrix" /> jest mnożona.</param>
        <param name="order"><see cref="T:System.Drawing.Drawing2D.MatrixOrder" /> Reprezentująca kolejność mnożenia.</param>
        <summary>Mnoży to <see cref="T:System.Drawing.Drawing2D.Matrix" /> przez macierz określone w <paramref name="matrix" /> parametru w kolejności określonej w <paramref name="order" /> parametru.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli jest w określonej kolejności <xref:System.Drawing.Drawing2D.MatrixOrder.Prepend>ten <xref:System.Drawing.Drawing2D.Matrix> jest mnożony przez określony macierzy w kolejności prepended. Jeśli jest w określonej kolejności <xref:System.Drawing.Drawing2D.MatrixOrder.Append>ten <xref:System.Drawing.Drawing2D.Matrix> jest mnożony przez określony macierzy w kolejności dołączonych.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, <xref:System.Windows.Forms.Control.Paint> obiektem zdarzenia. Kod wykonuje następujące czynności:  
  
-   Tworzy trzy macierzy.  
  
-   Wyświetla zawartość macierzy 1 na ekranie.  
  
-   Mnoży macierzy 1 przez macierz 2 i zapisuje wynik w macierzy 1.  
  
-   Wyświetla zawartość macierzy 1 na ekranie.  
  
-   Mnoży wynik przechowywany w macierzy 1 przez macierz 3, a ponownie zapisuje wynik w macierzy 1.  
  
-   Wyświetla zawartość macierzy 1 na ekranie.  
  
-   Rysuje prostokąt na ekranie sprzed zastosowania przekształcenia macierzy 1 (niebieski prostokąt).  
  
-   Stosuje przekształcenia przycinania na prostokąt.  
  
-   Rysuje prostokąt przekształcone na ekranie (czerwony prostokąt), jako poprzedniego prostokąt przy użyciu takich samych współrzędnych.  
  
 Powiadomienia skalowania przez dwukrotne w kierunku poziomym czerwonym prostokątem następnie obróconą o 90 stopni, a następnie przenoszone (tłumaczenia) 250 punktów w kierunku x i 50 punktów w kierunku y.  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicMatrixExamples#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicMatrixExamples/CPP/form1.cpp#1)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicMatrixExamples#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicMatrixExamples/CS/form1.cs#1)]
 [!code-vb[System.Drawing.Drawing2D.ClassicMatrixExamples#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicMatrixExamples/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OffsetX">
      <MemberSignature Language="C#" Value="public float OffsetX { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 OffsetX" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Drawing2D.Matrix.OffsetX" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OffsetX As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property float OffsetX { float get(); };" />
      <MemberSignature Language="F#" Value="member this.OffsetX : single" Usage="System.Drawing.Drawing2D.Matrix.OffsetX" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera tłumaczenia wartość x (wartość dx lub element w trzecim rzędzie i pierwszej kolumny) to <see cref="T:System.Drawing.Drawing2D.Matrix" />.</summary>
        <value>Tłumaczenie wartość x to <see cref="T:System.Drawing.Drawing2D.Matrix" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OffsetY">
      <MemberSignature Language="C#" Value="public float OffsetY { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float32 OffsetY" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Drawing2D.Matrix.OffsetY" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property OffsetY As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property float OffsetY { float get(); };" />
      <MemberSignature Language="F#" Value="member this.OffsetY : single" Usage="System.Drawing.Drawing2D.Matrix.OffsetY" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera tłumaczenia wartość y (wartości dy lub elementu w trzeciej kolumnie wierszy i sekundę) to <see cref="T:System.Drawing.Drawing2D.Matrix" />.</summary>
        <value>Tłumaczenie wartość y to <see cref="T:System.Drawing.Drawing2D.Matrix" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.Matrix.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Reset();" />
      <MemberSignature Language="F#" Value="member this.Reset : unit -&gt; unit" Usage="matrix.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Spowoduje to zresetowanie <see cref="T:System.Drawing.Drawing2D.Matrix" /> mieć elementy macierz tożsamości.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Elementy na głównym przekątnej macierzą to 1. Wszystkie inne elementy macierzą to 0.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, <xref:System.Windows.Forms.Control.Paint> obiektem zdarzenia. Kod wykonuje następujące czynności:  
  
-   Tworzy skalowania macierzy.  
  
-   Wyświetla listę elementów macierzy do ekranu.  
  
-   Resetuje macierz tożsamości.  
  
-   Wyświetla listę elementów do ekranu.  
  
-   Tłumaczy macierzy o 50 punktów w osi x i 40 punktów w osi y.  
  
-   Wyświetla listę elementów macierzy przetłumaczone na ekranie.  
  
-   Rysuje prostokąt — a jest rysowana na ekranie sprzed zastosowania przekształcenia macierzy (niebieski prostokąt).  
  
-   Stosuje przekształcenia przycinania na prostokąt.  
  
-   Rysuje, który po przekształceniu prostokąta jest rysowana na ekranie (prostokąt czerwony), jako poprzedniego prostokąt przy użyciu takich samych współrzędnych.  
  
 Należy zauważyć, że czerwonym prostokątem nie została przeskalowana (ze względu na reset), ale został przetłumaczony na osi x i y.  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicMatrixExamples#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicMatrixExamples/CPP/form1.cpp#2)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicMatrixExamples#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicMatrixExamples/CS/form1.cs#2)]
 [!code-vb[System.Drawing.Drawing2D.ClassicMatrixExamples#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicMatrixExamples/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Rotate">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Dotyczy to obrót w prawo wokół określonego kąta podany o pochodzenie <see cref="T:System.Drawing.Drawing2D.Matrix" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Rotate">
      <MemberSignature Language="C#" Value="public void Rotate (float angle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Rotate(float32 angle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.Matrix.Rotate(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Rotate (angle As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Rotate(float angle);" />
      <MemberSignature Language="F#" Value="member this.Rotate : single -&gt; unit" Usage="matrix.Rotate angle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="angle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="angle">Kąt obrotu w stopniach.</param>
        <summary>Dołącz do tego <see cref="T:System.Drawing.Drawing2D.Matrix" /> obrót w prawo wokół, wokół źródła oraz o określony kąt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Aby uzyskać przykład, zobacz <xref:System.Drawing.Drawing2D.Matrix.Rotate%28System.Single%2CSystem.Drawing.Drawing2D.MatrixOrder%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rotate">
      <MemberSignature Language="C#" Value="public void Rotate (float angle, System.Drawing.Drawing2D.MatrixOrder order);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Rotate(float32 angle, valuetype System.Drawing.Drawing2D.MatrixOrder order) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.Matrix.Rotate(System.Single,System.Drawing.Drawing2D.MatrixOrder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Rotate (angle As Single, order As MatrixOrder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Rotate(float angle, System::Drawing::Drawing2D::MatrixOrder order);" />
      <MemberSignature Language="F#" Value="member this.Rotate : single * System.Drawing.Drawing2D.MatrixOrder -&gt; unit" Usage="matrix.Rotate (angle, order)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="angle" Type="System.Single" />
        <Parameter Name="order" Type="System.Drawing.Drawing2D.MatrixOrder" />
      </Parameters>
      <Docs>
        <param name="angle">Kąt (zakres) obrotu w stopniach.</param>
        <param name="order">A <see cref="T:System.Drawing.Drawing2D.MatrixOrder" /> , który określa kolejność (Dołącz lub dołączana), w których są stosowane do tego obrót <see cref="T:System.Drawing.Drawing2D.Matrix" />.</param>
        <summary>Ma zastosowanie do ruchu wskazówek zegara obrót kwotę określoną w <paramref name="angle" /> parametrze wokół źródła (współrzędne x i y cechujące się) dla tego <see cref="T:System.Drawing.Drawing2D.Matrix" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, <xref:System.Windows.Forms.Control.Paint> obiektem zdarzenia. Kod wykonuje następujące czynności:  
  
-   Rysuje prostokąt na ekranie sprzed zastosowania przekształcenia obrót (niebieski prostokąt).  
  
-   Tworzy macierzy i obraca go o 45 stopni.  
  
-   Stosuje przekształcenia macierzy obszar przycinania na prostokąt.  
  
-   Rysuje prostokąt przekształcone na ekranie (prostokąt czerwony).  
  
 Zwróć uwagę, czy czerwonym prostokątem zostały obrócone wokół 0, 0 ekranu współrzędnych.  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicMatrixExamples#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicMatrixExamples/CPP/form1.cpp#3)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicMatrixExamples#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicMatrixExamples/CS/form1.cs#3)]
 [!code-vb[System.Drawing.Drawing2D.ClassicMatrixExamples#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicMatrixExamples/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="RotateAt">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Dotyczy to obrót w prawo o określony punkt wokół <see cref="T:System.Drawing.Drawing2D.Matrix" /> przez poprzedzenie jej obrót.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RotateAt">
      <MemberSignature Language="C#" Value="public void RotateAt (float angle, System.Drawing.PointF point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RotateAt(float32 angle, valuetype System.Drawing.PointF point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.Matrix.RotateAt(System.Single,System.Drawing.PointF)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RotateAt (angle As Single, point As PointF)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RotateAt(float angle, System::Drawing::PointF point);" />
      <MemberSignature Language="F#" Value="member this.RotateAt : single * System.Drawing.PointF -&gt; unit" Usage="matrix.RotateAt (angle, point)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="angle" Type="System.Single" />
        <Parameter Name="point" Type="System.Drawing.PointF" />
      </Parameters>
      <Docs>
        <param name="angle">Kąt (zakres) obrotu w stopniach.</param>
        <param name="point">A <see cref="T:System.Drawing.PointF" /> reprezentujący środek obrotu.</param>
        <summary>Dotyczy to obrót w prawo wokół <see cref="T:System.Drawing.Drawing2D.Matrix" /> wokół punktu określonego w <paramref name="point" /> parametru, a przez poprzedzenie jej obrót.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu demonstruje sposób użycia <xref:System.Drawing.Drawing2D.Matrix> i <xref:System.Drawing.Drawing2D.GraphicsPath.Transform%2A> metodę, aby obrócić ciągu. W tym przykładzie jest przeznaczona do użycia za pomocą interfejsu Windows Forms. Tworzenie formularza i wklej następujący kod. Wywołaj `DrawVerticalStringFromBottomUp` metody w postaci <xref:System.Windows.Forms.Control.Paint> programu obsługi zdarzeń, przekazując `e` jako <xref:System.Windows.Forms.PaintEventArgs>.  
  
 [!code-cpp[System.Drawing.MiscExamples#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.MiscExamples/CPP/form1.cpp#5)]
 [!code-csharp[System.Drawing.MiscExamples#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.MiscExamples/CS/form1.cs#5)]
 [!code-vb[System.Drawing.MiscExamples#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.MiscExamples/VB/form1.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RotateAt">
      <MemberSignature Language="C#" Value="public void RotateAt (float angle, System.Drawing.PointF point, System.Drawing.Drawing2D.MatrixOrder order);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RotateAt(float32 angle, valuetype System.Drawing.PointF point, valuetype System.Drawing.Drawing2D.MatrixOrder order) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.Matrix.RotateAt(System.Single,System.Drawing.PointF,System.Drawing.Drawing2D.MatrixOrder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RotateAt (angle As Single, point As PointF, order As MatrixOrder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RotateAt(float angle, System::Drawing::PointF point, System::Drawing::Drawing2D::MatrixOrder order);" />
      <MemberSignature Language="F#" Value="member this.RotateAt : single * System.Drawing.PointF * System.Drawing.Drawing2D.MatrixOrder -&gt; unit" Usage="matrix.RotateAt (angle, point, order)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="angle" Type="System.Single" />
        <Parameter Name="point" Type="System.Drawing.PointF" />
        <Parameter Name="order" Type="System.Drawing.Drawing2D.MatrixOrder" />
      </Parameters>
      <Docs>
        <param name="angle">Kąt obrotu w stopniach.</param>
        <param name="point">A <see cref="T:System.Drawing.PointF" /> reprezentujący środek obrotu.</param>
        <param name="order">Element <see cref="T:System.Drawing.Drawing2D.MatrixOrder" /> , który określa kolejność (Dołącz lub dołączana), w których są stosowane obrót.</param>
        <summary>Dotyczy to obrót w prawo o określony punkt wokół <see cref="T:System.Drawing.Drawing2D.Matrix" /> w określonej kolejności.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, <xref:System.Windows.Forms.Control.Paint> obiektem zdarzenia. Kod wykonuje następujące czynności:  
  
-   Rysuje prostokąt na ekranie sprzed zastosowania przekształcenia obrót (niebieski prostokąt).  
  
-   Tworzy macierzy i obraca go o 45 stopni wokół punktu określonego.  
  
-   Zastosowanie tej macierzy transformacji jest obszar przycinania na prostokąt.  
  
-   Rysuje prostokąt przekształcone na ekranie (prostokąt czerwony).  
  
 Należy zauważyć, że czerwonym prostokątem został obrócony wokół lewym górnym rogu prostokąta (punkt obrotu określony <xref:System.Drawing.Drawing2D.Matrix.RotateAt%2A> metody).  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicMatrixExamples#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicMatrixExamples/CPP/form1.cpp#4)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicMatrixExamples#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicMatrixExamples/CS/form1.cs#4)]
 [!code-vb[System.Drawing.Drawing2D.ClassicMatrixExamples#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicMatrixExamples/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Scale">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Dotyczy to wektor określona Skala <see cref="T:System.Drawing.Drawing2D.Matrix" /> przez poprzedzenie jej o wektor skalowania.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Scale">
      <MemberSignature Language="C#" Value="public void Scale (float scaleX, float scaleY);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Scale(float32 scaleX, float32 scaleY) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.Matrix.Scale(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Scale (scaleX As Single, scaleY As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Scale(float scaleX, float scaleY);" />
      <MemberSignature Language="F#" Value="member this.Scale : single * single -&gt; unit" Usage="matrix.Scale (scaleX, scaleY)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scaleX" Type="System.Single" />
        <Parameter Name="scaleY" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="scaleX">Wartość, przez którą chcesz skalować <see cref="T:System.Drawing.Drawing2D.Matrix" /> w kierunku osi x.</param>
        <param name="scaleY">Wartość, przez którą chcesz skalować <see cref="T:System.Drawing.Drawing2D.Matrix" /> w kierunku y.</param>
        <summary>Dotyczy to wektor określona Skala <see cref="T:System.Drawing.Drawing2D.Matrix" /> przez poprzedzenie jej o wektor skalowania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Aby uzyskać przykład, zobacz <xref:System.Drawing.Drawing2D.Matrix.Scale%28System.Single%2CSystem.Single%2CSystem.Drawing.Drawing2D.MatrixOrder%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Scale">
      <MemberSignature Language="C#" Value="public void Scale (float scaleX, float scaleY, System.Drawing.Drawing2D.MatrixOrder order);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Scale(float32 scaleX, float32 scaleY, valuetype System.Drawing.Drawing2D.MatrixOrder order) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.Matrix.Scale(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Scale (scaleX As Single, scaleY As Single, order As MatrixOrder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Scale(float scaleX, float scaleY, System::Drawing::Drawing2D::MatrixOrder order);" />
      <MemberSignature Language="F#" Value="member this.Scale : single * single * System.Drawing.Drawing2D.MatrixOrder -&gt; unit" Usage="matrix.Scale (scaleX, scaleY, order)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="scaleX" Type="System.Single" />
        <Parameter Name="scaleY" Type="System.Single" />
        <Parameter Name="order" Type="System.Drawing.Drawing2D.MatrixOrder" />
      </Parameters>
      <Docs>
        <param name="scaleX">Wartość, przez którą chcesz skalować <see cref="T:System.Drawing.Drawing2D.Matrix" /> w kierunku osi x.</param>
        <param name="scaleY">Wartość, przez którą chcesz skalować <see cref="T:System.Drawing.Drawing2D.Matrix" /> w kierunku y.</param>
        <param name="order">A <see cref="T:System.Drawing.Drawing2D.MatrixOrder" /> , który określa kolejność (Dołącz lub dołączana), w których o wektor skalowania są stosowane do tego <see cref="T:System.Drawing.Drawing2D.Matrix" />.</param>
        <summary>Stosuje wektor określona skala (<paramref name="scaleX" /> i <paramref name="scaleY" />) do tego <see cref="T:System.Drawing.Drawing2D.Matrix" /> przy użyciu określonej kolejności.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, <xref:System.Windows.Forms.Control.Paint> obiektem zdarzenia. Kod wykonuje następujące czynności:  
  
-   Rysuje prostokąt na ekranie sprzed zastosowania przekształcenia skalowania (niebieski prostokąt).  
  
-   Tworzy macierzy i którą można skalować 3 w osi x i 2 w osi y.  
  
-   Stosuje przekształcenia macierzy obszar przycinania na prostokąt.  
  
-   Rysuje prostokąt przekształcone na ekranie (prostokąt czerwony).  
  
 Należy zauważyć, że czerwonym prostokątem skalowania przez składnik 3 w osi x i 2 w osi y, łącznie z lewym górnym rogu prostokąta (punkt początkowy prostokąta).  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicMatrixExamples#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicMatrixExamples/CPP/form1.cpp#5)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicMatrixExamples#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicMatrixExamples/CS/form1.cs#5)]
 [!code-vb[System.Drawing.Drawing2D.ClassicMatrixExamples#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicMatrixExamples/VB/form1.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Shear">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Dotyczy to wektor określonego Pochyl <see cref="T:System.Drawing.Drawing2D.Matrix" /> przez poprzedzenie jej Pochyl wektora.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Shear">
      <MemberSignature Language="C#" Value="public void Shear (float shearX, float shearY);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Shear(float32 shearX, float32 shearY) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.Matrix.Shear(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Shear (shearX As Single, shearY As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Shear(float shearX, float shearY);" />
      <MemberSignature Language="F#" Value="member this.Shear : single * single -&gt; unit" Usage="matrix.Shear (shearX, shearY)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="shearX" Type="System.Single" />
        <Parameter Name="shearY" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="shearX">Współczynnik Pochyl poziomej.</param>
        <param name="shearY">Współczynnik Pochyl pionowy.</param>
        <summary>Dotyczy to wektor określonego Pochyl <see cref="T:System.Drawing.Drawing2D.Matrix" /> przez poprzedzenie jej transformacji Pochyl.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Przekształcenie zastosowane w przypadku tej metody jest czysty Pochyl tylko, jeśli jeden z parametrów ma wartość 0. Stosowane do prostokąta w źródle, gdy `shearY` współczynnik wynosi 0, przekształcenie przenosi do dolnej krawędzi w poziomie przez `shearX` razy wysokość prostokąta. Gdy `shearX` współczynnik wynosi 0, przenosi w pionie przy prawej krawędzi `shearY` razy szerokość prostokąta. Ostrzeżenie jest w porządku, gdy oba parametry mają wartość różną od zera, ponieważ wyniki są trudne do przewidzenia. Na przykład, jeśli zarówno czynników 1, transformacja jest pojedyncza (dlatego noninvertible), ściskanie płaszczyzna w jeden wiersz.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, <xref:System.Windows.Forms.Control.Paint> obiektem zdarzenia. Kod wykonuje następujące czynności:  
  
-   Rysuje prostokąt na ekranie za pomocą pióra zielony, sprzed zastosowania przekształcenia skalowania.  
  
-   Tworzy <xref:System.Drawing.Drawing2D.Matrix> i używa jej do ustawienia dla przekształcenia współrzędnych świata <xref:System.Drawing.Graphics>.  
  
-   Rysuje prostokąt innego za pomocą czerwonego pióra.  
  
-   Rysuje elipsę za pomocą pióra niebieski.  
  
 Wynik jest zielony prostokąt, czerwony równoległobok i elipsy przekształcone, niebieski. Należy zauważyć, że prostokąt zielony (pobranych przed ustawienie przekształcenia) bezpośrednio używa współrzędnych podane w <xref:System.Drawing.Graphics.DrawRectangle%2A> wywołania. Inne rysunki są transformowane przed rysowaniem. Prostokąt jest przekształcana w równoległobok (czerwony), a wielokropek (niebieski) jest przekształcana mieści się w równoległobok przekształcone. Zwróć uwagę, że dolnej krawędzi prostokąta jest przenoszony w osi x o dwa razy wysokość prostokąta, w związku z tym tworzących równoległobok (pochylone).  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicMatrixExamples#6](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicMatrixExamples/CPP/form1.cpp#6)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicMatrixExamples#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicMatrixExamples/CS/form1.cs#6)]
 [!code-vb[System.Drawing.Drawing2D.ClassicMatrixExamples#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicMatrixExamples/VB/form1.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Shear">
      <MemberSignature Language="C#" Value="public void Shear (float shearX, float shearY, System.Drawing.Drawing2D.MatrixOrder order);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Shear(float32 shearX, float32 shearY, valuetype System.Drawing.Drawing2D.MatrixOrder order) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.Matrix.Shear(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Shear (shearX As Single, shearY As Single, order As MatrixOrder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Shear(float shearX, float shearY, System::Drawing::Drawing2D::MatrixOrder order);" />
      <MemberSignature Language="F#" Value="member this.Shear : single * single * System.Drawing.Drawing2D.MatrixOrder -&gt; unit" Usage="matrix.Shear (shearX, shearY, order)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="shearX" Type="System.Single" />
        <Parameter Name="shearY" Type="System.Single" />
        <Parameter Name="order" Type="System.Drawing.Drawing2D.MatrixOrder" />
      </Parameters>
      <Docs>
        <param name="shearX">Współczynnik Pochyl poziomej.</param>
        <param name="shearY">Współczynnik Pochyl pionowy.</param>
        <param name="order">Element <see cref="T:System.Drawing.Drawing2D.MatrixOrder" /> , który określa kolejność (Dołącz lub dołączana), w których są stosowane Pochyl.</param>
        <summary>Dotyczy to wektor określonego Pochyl <see cref="T:System.Drawing.Drawing2D.Matrix" /> w określonej kolejności.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Przekształcenie zastosowane w przypadku tej metody jest czysty Pochyl tylko, jeśli jeden z parametrów ma wartość 0. Stosowane do prostokąta w źródle, gdy `shearY` współczynnik wynosi 0, przekształcenie przenosi do dolnej krawędzi w poziomie przez `shearX` razy wysokość prostokąta. Gdy `shearX` współczynnik wynosi 0, przenosi w pionie przy prawej krawędzi `shearY` razy szerokość prostokąta. Ostrzeżenie jest w porządku, gdy oba parametry mają wartość różną od zera, ponieważ wyniki są trudne do przewidzenia. Na przykład, jeśli zarówno czynników 1, transformacja jest pojedyncza (dlatego noninvertible), ściskanie płaszczyzna w jeden wiersz.  
  
   
  
## Examples  
 Aby uzyskać przykład, zobacz <xref:System.Drawing.Drawing2D.Matrix.Shear%28System.Single%2CSystem.Single%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TransformPoints">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Stosuje przekształcenia geometryczne, ten <see cref="T:System.Drawing.Drawing2D.Matrix" /> reprezentuje tablicę punktów.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TransformPoints">
      <MemberSignature Language="C#" Value="public void TransformPoints (System.Drawing.Point[] pts);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TransformPoints(valuetype System.Drawing.Point[] pts) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.Matrix.TransformPoints(System.Drawing.Point[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub TransformPoints (pts As Point())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TransformPoints(cli::array &lt;System::Drawing::Point&gt; ^ pts);" />
      <MemberSignature Language="F#" Value="member this.TransformPoints : System.Drawing.Point[] -&gt; unit" Usage="matrix.TransformPoints pts" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pts" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <param name="pts">Tablica <see cref="T:System.Drawing.Point" /> struktur, które reprezentuje punktów do przekształcenia.</param>
        <summary>Stosuje przekształcenia geometryczne, reprezentowane przez ten <see cref="T:System.Drawing.Drawing2D.Matrix" /> do określonej tablicy punktów.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, <xref:System.Windows.Forms.Control.Paint> obiektem zdarzenia. Kod wykonuje następujące czynności:  
  
-   Tworzy tablicę punkty, które tworzą prostokąt.  
  
-   Rysuje tej tablicy punkty (ekran sprzed zastosowania przekształcenia skalowania (niebieski prostokąt).  
  
-   Tworzy macierzy i którą można skalować 3 w osi x i 2 w osi y.  
  
-   Dotyczy tej macierzy transformacji tablica punktów.  
  
-   Rysuje tablicy przekształcone na ekranie (prostokąt czerwony).  
  
 Należy zauważyć, że czerwonym prostokątem skalowania przez składnik 3 w osi x i 2 w osi y, łącznie z lewym górnym rogu prostokąta (punkt początkowy prostokąta).  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicMatrixExamples#7](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicMatrixExamples/CPP/form1.cpp#7)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicMatrixExamples#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicMatrixExamples/CS/form1.cs#7)]
 [!code-vb[System.Drawing.Drawing2D.ClassicMatrixExamples#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicMatrixExamples/VB/form1.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TransformPoints">
      <MemberSignature Language="C#" Value="public void TransformPoints (System.Drawing.PointF[] pts);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TransformPoints(valuetype System.Drawing.PointF[] pts) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.Matrix.TransformPoints(System.Drawing.PointF[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub TransformPoints (pts As PointF())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TransformPoints(cli::array &lt;System::Drawing::PointF&gt; ^ pts);" />
      <MemberSignature Language="F#" Value="member this.TransformPoints : System.Drawing.PointF[] -&gt; unit" Usage="matrix.TransformPoints pts" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pts" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <param name="pts">Tablica <see cref="T:System.Drawing.PointF" /> struktur, które reprezentuje punktów do przekształcenia.</param>
        <summary>Stosuje przekształcenia geometryczne, reprezentowane przez ten <see cref="T:System.Drawing.Drawing2D.Matrix" /> do określonej tablicy punktów.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Aby uzyskać przykład, zobacz <xref:System.Drawing.Drawing2D.Matrix.TransformPoints%28System.Drawing.Point%5B%5D%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TransformVectors">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Mnoży każdy wektor w tablicy, macierzy. Elementy tłumaczenia w tej macierzy (trzeci wiersz) są ignorowane.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TransformVectors">
      <MemberSignature Language="C#" Value="public void TransformVectors (System.Drawing.Point[] pts);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TransformVectors(valuetype System.Drawing.Point[] pts) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.Matrix.TransformVectors(System.Drawing.Point[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub TransformVectors (pts As Point())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TransformVectors(cli::array &lt;System::Drawing::Point&gt; ^ pts);" />
      <MemberSignature Language="F#" Value="member this.TransformVectors : System.Drawing.Point[] -&gt; unit" Usage="matrix.TransformVectors pts" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pts" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <param name="pts">Tablica <see cref="T:System.Drawing.Point" /> struktur, które reprezentuje punktów do przekształcenia.</param>
        <summary>Dotyczy tylko skalowania i obracania składników to <see cref="T:System.Drawing.Drawing2D.Matrix" /> do określonej tablicy punktów.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, <xref:System.Windows.Forms.Control.Paint> obiektem zdarzenia. Kod wykonuje następujące czynności:  
  
-   Tworzy tablicę punkty, które tworzą prostokąt.  
  
-   Rysuje Ta tablica punktów do ekranu sprzed zastosowania przekształcenia skalowania (niebieski prostokąt).  
  
-   Tworzy macierzy i skaluje się 3 w osi x i 2 w osi y i tłumaczy to 100 w obu osi.  
  
-   Wyświetla listę elementów macierzy do ekranu.  
  
-   Dotyczy tej macierzy transformacji tablica punktów.  
  
-   Rysuje tablicy przekształcone na ekranie (prostokąt czerwony).  
  
 Zwróć uwagę, skalowania czerwony prostokąt o 3 na osi x i 2 w osi y, łącznie z lewym górnym rogu prostokąta (punkt początkowy prostokąta), ale wektor tłumaczenia (ostatnie dwa elementy macierzy) jest ignorowana.  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicMatrixExamples#8](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicMatrixExamples/CPP/form1.cpp#8)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicMatrixExamples#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicMatrixExamples/CS/form1.cs#8)]
 [!code-vb[System.Drawing.Drawing2D.ClassicMatrixExamples#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicMatrixExamples/VB/form1.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TransformVectors">
      <MemberSignature Language="C#" Value="public void TransformVectors (System.Drawing.PointF[] pts);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TransformVectors(valuetype System.Drawing.PointF[] pts) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.Matrix.TransformVectors(System.Drawing.PointF[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub TransformVectors (pts As PointF())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TransformVectors(cli::array &lt;System::Drawing::PointF&gt; ^ pts);" />
      <MemberSignature Language="F#" Value="member this.TransformVectors : System.Drawing.PointF[] -&gt; unit" Usage="matrix.TransformVectors pts" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pts" Type="System.Drawing.PointF[]" />
      </Parameters>
      <Docs>
        <param name="pts">Tablica <see cref="T:System.Drawing.Point" /> struktur, które reprezentuje punktów do przekształcenia.</param>
        <summary>Mnoży każdy wektor w tablicy, macierzy. Elementy tłumaczenia w tej macierzy (trzeci wiersz) są ignorowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Aby uzyskać przykład, zobacz <xref:System.Drawing.Drawing2D.Matrix.TransformVectors%28System.Drawing.Point%5B%5D%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Translate">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Dotyczy to wektor określonego tłumaczenia <see cref="T:System.Drawing.Drawing2D.Matrix" /> przez poprzedzenie jej wektor tłumaczenia.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Translate">
      <MemberSignature Language="C#" Value="public void Translate (float offsetX, float offsetY);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Translate(float32 offsetX, float32 offsetY) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.Matrix.Translate(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Translate (offsetX As Single, offsetY As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Translate(float offsetX, float offsetY);" />
      <MemberSignature Language="F#" Value="member this.Translate : single * single -&gt; unit" Usage="matrix.Translate (offsetX, offsetY)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offsetX" Type="System.Single" />
        <Parameter Name="offsetY" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="offsetX">Wartość x za pomocą którego do translacji to <see cref="T:System.Drawing.Drawing2D.Matrix" />.</param>
        <param name="offsetY">Wartość y, za pomocą którego do translacji to <see cref="T:System.Drawing.Drawing2D.Matrix" />.</param>
        <summary>Stosuje wektor określonego tłumaczenia (<paramref name="offsetX" /> i <paramref name="offsetY" />) do tego <see cref="T:System.Drawing.Drawing2D.Matrix" /> przez poprzedzenie jej wektor tłumaczenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Aby uzyskać przykład, zobacz <xref:System.Drawing.Drawing2D.Matrix.Translate%28System.Single%2CSystem.Single%2CSystem.Drawing.Drawing2D.MatrixOrder%29>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Translate">
      <MemberSignature Language="C#" Value="public void Translate (float offsetX, float offsetY, System.Drawing.Drawing2D.MatrixOrder order);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Translate(float32 offsetX, float32 offsetY, valuetype System.Drawing.Drawing2D.MatrixOrder order) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.Matrix.Translate(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Translate (offsetX As Single, offsetY As Single, order As MatrixOrder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Translate(float offsetX, float offsetY, System::Drawing::Drawing2D::MatrixOrder order);" />
      <MemberSignature Language="F#" Value="member this.Translate : single * single * System.Drawing.Drawing2D.MatrixOrder -&gt; unit" Usage="matrix.Translate (offsetX, offsetY, order)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="offsetX" Type="System.Single" />
        <Parameter Name="offsetY" Type="System.Single" />
        <Parameter Name="order" Type="System.Drawing.Drawing2D.MatrixOrder" />
      </Parameters>
      <Docs>
        <param name="offsetX">Wartość x za pomocą którego do translacji to <see cref="T:System.Drawing.Drawing2D.Matrix" />.</param>
        <param name="offsetY">Wartość y, za pomocą którego do translacji to <see cref="T:System.Drawing.Drawing2D.Matrix" />.</param>
        <param name="order">A <see cref="T:System.Drawing.Drawing2D.MatrixOrder" /> , który określa kolejność (Dołącz lub dołączana), w których tłumaczenia są stosowane do tego <see cref="T:System.Drawing.Drawing2D.Matrix" />.</param>
        <summary>Dotyczy to wektor określonego tłumaczenia <see cref="T:System.Drawing.Drawing2D.Matrix" /> w określonej kolejności.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z formularzami Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, <xref:System.Windows.Forms.Control.Paint> obiektem zdarzenia. Kod wykonuje następujące czynności:  
  
-   Rysuje prostokąt na ekranie sprzed zastosowania przekład — przekształcenie (niebieski prostokąt).  
  
-   Tworzy macierzy i przekształca ją przez 100 w obu osi.  
  
-   Stosuje przekształcenia macierzy do prostokąta  
  
-   Rysuje prostokąt przekształcone na ekranie (prostokąt czerwony).  
  
 Zauważ, że początkiem czerwonym prostokątem znajduje się 100 punktów w obu osi, od początku niebieski trójkąt.  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicMatrixExamples#9](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicMatrixExamples/CPP/form1.cpp#9)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicMatrixExamples#9](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicMatrixExamples/CS/form1.cs#9)]
 [!code-vb[System.Drawing.Drawing2D.ClassicMatrixExamples#9](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicMatrixExamples/VB/form1.vb#9)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="VectorTransformPoints">
      <MemberSignature Language="C#" Value="public void VectorTransformPoints (System.Drawing.Point[] pts);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void VectorTransformPoints(valuetype System.Drawing.Point[] pts) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.Matrix.VectorTransformPoints(System.Drawing.Point[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub VectorTransformPoints (pts As Point())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void VectorTransformPoints(cli::array &lt;System::Drawing::Point&gt; ^ pts);" />
      <MemberSignature Language="F#" Value="member this.VectorTransformPoints : System.Drawing.Point[] -&gt; unit" Usage="matrix.VectorTransformPoints pts" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pts" Type="System.Drawing.Point[]" />
      </Parameters>
      <Docs>
        <param name="pts">Tablica <see cref="T:System.Drawing.Point" /> struktur, które reprezentuje punktów do przekształcenia.</param>
        <summary>Mnoży każdy wektor w tablicy, macierzy. Elementy tłumaczenia w tej macierzy (trzeci wiersz) są ignorowane.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>