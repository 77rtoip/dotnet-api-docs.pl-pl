<Type Name="LinearGradientBrush" FullName="System.Drawing.Drawing2D.LinearGradientBrush">
  <Metadata><Meta Name="ms.openlocfilehash" Value="596bf9b9d853089811dc27601f2f88b4c81ad6da" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69361689" /></Metadata><TypeSignature Language="C#" Value="public sealed class LinearGradientBrush : System.Drawing.Brush" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit LinearGradientBrush extends System.Drawing.Brush" />
  <TypeSignature Language="DocId" Value="T:System.Drawing.Drawing2D.LinearGradientBrush" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class LinearGradientBrush&#xA;Inherits Brush" />
  <TypeSignature Language="C++ CLI" Value="public ref class LinearGradientBrush sealed : System::Drawing::Brush" />
  <TypeSignature Language="F#" Value="type LinearGradientBrush = class&#xA;    inherit Brush" />
  <AssemblyInfo>
    <AssemblyName>System.Drawing</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Drawing.Common</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.1</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Drawing.Brush</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Hermetyzuje <see cref="T:System.Drawing.Brush" /> z gradientem liniowym. Klasa ta nie może być dziedziczona.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta klasa hermetyzuje gradienty dwukolorowe i niestandardowe gradienty Multicolor.  
  
 Wszystkie gradienty liniowe są definiowane wzdłuż linii określonej przez szerokość prostokąta lub przez dwa punkty.  
  
 Domyślnie gradient liniowy dwukolorowej to nawet pozioma liniowa linia mieszania od koloru początkowego do końcowego koloru wzdłuż określonego wiersza. Dostosuj wzorzec mieszania przy użyciu <xref:System.Drawing.Drawing2D.Blend> klasy <xref:System.Drawing.Drawing2D.LinearGradientBrush.SetSigmaBellShape%2A> , metod lub <xref:System.Drawing.Drawing2D.LinearGradientBrush.SetBlendTriangularShape%2A> metod. Dostosuj kierunek gradientu, określając <xref:System.Drawing.Drawing2D.LinearGradientMode> Wyliczenie lub kąt w konstruktorze.  
  
 Użyj właściwości <xref:System.Drawing.Drawing2D.LinearGradientBrush.InterpolationColors%2A> , aby utworzyć gradient Multicolor.  
  
 <xref:System.Drawing.Drawing2D.LinearGradientBrush.Transform%2A> Właściwość określa lokalne przekształcenie geometryczne zastosowane do gradientu.  
  
   
  
## Examples  
 Poniższy przykład tworzy poziomą <xref:System.Drawing.Drawing2D.LinearGradientBrush>; składniki koloru zmieniają się liniowo podczas przenoszenia z współrzędnej poziomej równej 0 do współrzędnej poziomej 200. Na przykład punkt, którego pierwsza Współrzędna jest w połowie między 0 a 200, będzie miał niebieski składnik, który jest w połowie między 0 a 255. Ten przykład został zaprojektowany do użycia z Windows Forms. Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e`, <xref:System.Windows.Forms.PaintEventHandler>który jest parametrem.  
  
 [!code-csharp[System.Drawing.UsingaGradientBrush#21](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.UsingaGradientBrush/CS/Class1.cs#21)]
 [!code-vb[System.Drawing.UsingaGradientBrush#21](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.UsingaGradientBrush/VB/Class1.vb#21)]  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/6c88e1cc-1217-4399-ac12-cb37592b9f01">Instrukcje: Tworzenie gradientu liniowego</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" /> klasy z określonymi punktami i kolorami.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinearGradientBrush (System.Drawing.Point point1, System.Drawing.Point point2, System.Drawing.Color color1, System.Drawing.Color color2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Drawing.Point point1, valuetype System.Drawing.Point point2, valuetype System.Drawing.Color color1, valuetype System.Drawing.Color color2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.LinearGradientBrush.#ctor(System.Drawing.Point,System.Drawing.Point,System.Drawing.Color,System.Drawing.Color)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (point1 As Point, point2 As Point, color1 As Color, color2 As Color)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LinearGradientBrush(System::Drawing::Point point1, System::Drawing::Point point2, System::Drawing::Color color1, System::Drawing::Color color2);" />
      <MemberSignature Language="F#" Value="new System.Drawing.Drawing2D.LinearGradientBrush : System.Drawing.Point * System.Drawing.Point * System.Drawing.Color * System.Drawing.Color -&gt; System.Drawing.Drawing2D.LinearGradientBrush" Usage="new System.Drawing.Drawing2D.LinearGradientBrush (point1, point2, color1, color2)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="point1" Type="System.Drawing.Point" />
        <Parameter Name="point2" Type="System.Drawing.Point" />
        <Parameter Name="color1" Type="System.Drawing.Color" />
        <Parameter Name="color2" Type="System.Drawing.Color" />
      </Parameters>
      <Docs>
        <param name="point1"><see cref="T:System.Drawing.Point" /> Struktura, która reprezentuje punkt początkowy gradientu liniowego.</param>
        <param name="point2"><see cref="T:System.Drawing.Point" /> Struktura, która reprezentuje punkt końcowy gradientu liniowego.</param>
        <param name="color1"><see cref="T:System.Drawing.Color" /> Struktura, która przedstawia początkowy kolor gradientu liniowego.</param>
        <param name="color2"><see cref="T:System.Drawing.Color" /> Struktura, która reprezentuje kolor końcowy gradientu liniowego.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" /> klasy z określonymi punktami i kolorami.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinearGradientBrush (System.Drawing.PointF point1, System.Drawing.PointF point2, System.Drawing.Color color1, System.Drawing.Color color2);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Drawing.PointF point1, valuetype System.Drawing.PointF point2, valuetype System.Drawing.Color color1, valuetype System.Drawing.Color color2) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.LinearGradientBrush.#ctor(System.Drawing.PointF,System.Drawing.PointF,System.Drawing.Color,System.Drawing.Color)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (point1 As PointF, point2 As PointF, color1 As Color, color2 As Color)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LinearGradientBrush(System::Drawing::PointF point1, System::Drawing::PointF point2, System::Drawing::Color color1, System::Drawing::Color color2);" />
      <MemberSignature Language="F#" Value="new System.Drawing.Drawing2D.LinearGradientBrush : System.Drawing.PointF * System.Drawing.PointF * System.Drawing.Color * System.Drawing.Color -&gt; System.Drawing.Drawing2D.LinearGradientBrush" Usage="new System.Drawing.Drawing2D.LinearGradientBrush (point1, point2, color1, color2)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="point1" Type="System.Drawing.PointF" />
        <Parameter Name="point2" Type="System.Drawing.PointF" />
        <Parameter Name="color1" Type="System.Drawing.Color" />
        <Parameter Name="color2" Type="System.Drawing.Color" />
      </Parameters>
      <Docs>
        <param name="point1"><see cref="T:System.Drawing.PointF" /> Struktura, która reprezentuje punkt początkowy gradientu liniowego.</param>
        <param name="point2"><see cref="T:System.Drawing.PointF" /> Struktura, która reprezentuje punkt końcowy gradientu liniowego.</param>
        <param name="color1"><see cref="T:System.Drawing.Color" /> Struktura, która przedstawia początkowy kolor gradientu liniowego.</param>
        <param name="color2"><see cref="T:System.Drawing.Color" /> Struktura, która reprezentuje kolor końcowy gradientu liniowego.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" /> klasy z określonymi punktami i kolorami.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinearGradientBrush (System.Drawing.Rectangle rect, System.Drawing.Color color1, System.Drawing.Color color2, System.Drawing.Drawing2D.LinearGradientMode linearGradientMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Drawing.Rectangle rect, valuetype System.Drawing.Color color1, valuetype System.Drawing.Color color2, valuetype System.Drawing.Drawing2D.LinearGradientMode linearGradientMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.LinearGradientBrush.#ctor(System.Drawing.Rectangle,System.Drawing.Color,System.Drawing.Color,System.Drawing.Drawing2D.LinearGradientMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LinearGradientBrush(System::Drawing::Rectangle rect, System::Drawing::Color color1, System::Drawing::Color color2, System::Drawing::Drawing2D::LinearGradientMode linearGradientMode);" />
      <MemberSignature Language="F#" Value="new System.Drawing.Drawing2D.LinearGradientBrush : System.Drawing.Rectangle * System.Drawing.Color * System.Drawing.Color * System.Drawing.Drawing2D.LinearGradientMode -&gt; System.Drawing.Drawing2D.LinearGradientBrush" Usage="new System.Drawing.Drawing2D.LinearGradientBrush (rect, color1, color2, linearGradientMode)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
        <Parameter Name="color1" Type="System.Drawing.Color" />
        <Parameter Name="color2" Type="System.Drawing.Color" />
        <Parameter Name="linearGradientMode" Type="System.Drawing.Drawing2D.LinearGradientMode" />
      </Parameters>
      <Docs>
        <param name="rect"><see cref="T:System.Drawing.Rectangle" /> Struktura, która określa granice gradientu liniowego.</param>
        <param name="color1"><see cref="T:System.Drawing.Color" /> Struktura, która reprezentuje kolor początkowy gradientu.</param>
        <param name="color2"><see cref="T:System.Drawing.Color" /> Struktura, która reprezentuje kolor końcowy gradientu.</param>
        <param name="linearGradientMode">Element <see cref="T:System.Drawing.Drawing2D.LinearGradientMode" /> wyliczenia, który określa orientację gradientu. Orientacja Określa początkową i końcową punkty gradientu. Na przykład <see langword="LinearGradientMode.ForwardDiagonal" /> określa, że punkt początkowy jest lewym górnym rogu prostokąta, a punkt końcowy to prawy dolny róg prostokąta.</param>
        <summary>Tworzy nowe wystąpienie <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" /> klasy na podstawie prostokąta, początkowych i końcowych kolorów oraz orientacji.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinearGradientBrush (System.Drawing.Rectangle rect, System.Drawing.Color color1, System.Drawing.Color color2, float angle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Drawing.Rectangle rect, valuetype System.Drawing.Color color1, valuetype System.Drawing.Color color2, float32 angle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.LinearGradientBrush.#ctor(System.Drawing.Rectangle,System.Drawing.Color,System.Drawing.Color,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (rect As Rectangle, color1 As Color, color2 As Color, angle As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LinearGradientBrush(System::Drawing::Rectangle rect, System::Drawing::Color color1, System::Drawing::Color color2, float angle);" />
      <MemberSignature Language="F#" Value="new System.Drawing.Drawing2D.LinearGradientBrush : System.Drawing.Rectangle * System.Drawing.Color * System.Drawing.Color * single -&gt; System.Drawing.Drawing2D.LinearGradientBrush" Usage="new System.Drawing.Drawing2D.LinearGradientBrush (rect, color1, color2, angle)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
        <Parameter Name="color1" Type="System.Drawing.Color" />
        <Parameter Name="color2" Type="System.Drawing.Color" />
        <Parameter Name="angle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="rect"><see cref="T:System.Drawing.Rectangle" /> Struktura, która określa granice gradientu liniowego.</param>
        <param name="color1"><see cref="T:System.Drawing.Color" /> Struktura, która reprezentuje kolor początkowy gradientu.</param>
        <param name="color2"><see cref="T:System.Drawing.Color" /> Struktura, która reprezentuje kolor końcowy gradientu.</param>
        <param name="angle">Kąt (w stopniach od prawej) od osi x linii orientacji gradientu.</param>
        <summary>Tworzy nowe wystąpienie <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" /> klasy na podstawie prostokąta, początkowych i końcowych kolorów oraz kąta orientacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wszystkie punkty wzdłuż linii pionowej są tego samego koloru.  
  
 Linia początkowa jest prostopadła do linii orientacji i przechodzi przez jeden z rogów prostokąta. Wszystkie punkty w wierszu początku są kolorem początkowym. Następnie końcowy wiersz jest prostopadły do linii orientacji i przechodzi przez jeden z rogów prostokąta. Wszystkie punkty w wierszu końcowym są kolorem końcowym.  
  
 Kąt linii orientacji określa, w których rogach są przekazywane linie początkowe i końcowe. Na przykład, jeśli kąt jest z zakresu od 0 do 90 stopni, linia początkowa przechodzi w lewym górnym rogu, a końcowy wiersz przechodzi przez prawy dolny róg.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinearGradientBrush (System.Drawing.RectangleF rect, System.Drawing.Color color1, System.Drawing.Color color2, System.Drawing.Drawing2D.LinearGradientMode linearGradientMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Drawing.RectangleF rect, valuetype System.Drawing.Color color1, valuetype System.Drawing.Color color2, valuetype System.Drawing.Drawing2D.LinearGradientMode linearGradientMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.LinearGradientBrush.#ctor(System.Drawing.RectangleF,System.Drawing.Color,System.Drawing.Color,System.Drawing.Drawing2D.LinearGradientMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LinearGradientBrush(System::Drawing::RectangleF rect, System::Drawing::Color color1, System::Drawing::Color color2, System::Drawing::Drawing2D::LinearGradientMode linearGradientMode);" />
      <MemberSignature Language="F#" Value="new System.Drawing.Drawing2D.LinearGradientBrush : System.Drawing.RectangleF * System.Drawing.Color * System.Drawing.Color * System.Drawing.Drawing2D.LinearGradientMode -&gt; System.Drawing.Drawing2D.LinearGradientBrush" Usage="new System.Drawing.Drawing2D.LinearGradientBrush (rect, color1, color2, linearGradientMode)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
        <Parameter Name="color1" Type="System.Drawing.Color" />
        <Parameter Name="color2" Type="System.Drawing.Color" />
        <Parameter Name="linearGradientMode" Type="System.Drawing.Drawing2D.LinearGradientMode" />
      </Parameters>
      <Docs>
        <param name="rect"><see cref="T:System.Drawing.RectangleF" /> Struktura, która określa granice gradientu liniowego.</param>
        <param name="color1"><see cref="T:System.Drawing.Color" /> Struktura, która reprezentuje kolor początkowy gradientu.</param>
        <param name="color2"><see cref="T:System.Drawing.Color" /> Struktura, która reprezentuje kolor końcowy gradientu.</param>
        <param name="linearGradientMode">Element <see cref="T:System.Drawing.Drawing2D.LinearGradientMode" /> wyliczenia, który określa orientację gradientu. Orientacja Określa początkową i końcową punkty gradientu. Na przykład <see langword="LinearGradientMode.ForwardDiagonal" /> określa, że punkt początkowy jest lewym górnym rogu prostokąta, a punkt końcowy to prawy dolny róg prostokąta.</param>
        <summary>Tworzy nowe wystąpienie <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" /> w oparciu o prostokąt, kolory początkowe i końcowe oraz tryb orientacji.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinearGradientBrush (System.Drawing.RectangleF rect, System.Drawing.Color color1, System.Drawing.Color color2, float angle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Drawing.RectangleF rect, valuetype System.Drawing.Color color1, valuetype System.Drawing.Color color2, float32 angle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.LinearGradientBrush.#ctor(System.Drawing.RectangleF,System.Drawing.Color,System.Drawing.Color,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (rect As RectangleF, color1 As Color, color2 As Color, angle As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LinearGradientBrush(System::Drawing::RectangleF rect, System::Drawing::Color color1, System::Drawing::Color color2, float angle);" />
      <MemberSignature Language="F#" Value="new System.Drawing.Drawing2D.LinearGradientBrush : System.Drawing.RectangleF * System.Drawing.Color * System.Drawing.Color * single -&gt; System.Drawing.Drawing2D.LinearGradientBrush" Usage="new System.Drawing.Drawing2D.LinearGradientBrush (rect, color1, color2, angle)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
        <Parameter Name="color1" Type="System.Drawing.Color" />
        <Parameter Name="color2" Type="System.Drawing.Color" />
        <Parameter Name="angle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="rect"><see cref="T:System.Drawing.RectangleF" /> Struktura, która określa granice gradientu liniowego.</param>
        <param name="color1"><see cref="T:System.Drawing.Color" /> Struktura, która reprezentuje kolor początkowy gradientu.</param>
        <param name="color2"><see cref="T:System.Drawing.Color" /> Struktura, która reprezentuje kolor końcowy gradientu.</param>
        <param name="angle">Kąt (w stopniach od prawej) od osi x linii orientacji gradientu.</param>
        <summary>Tworzy nowe wystąpienie <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" /> klasy na podstawie prostokąta, początkowych i końcowych kolorów oraz kąta orientacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wszystkie punkty wzdłuż linii pionowej są tego samego koloru.  
  
 Linia początkowa jest prostopadła do linii orientacji i przechodzi przez jeden z rogów prostokąta. Wszystkie punkty w wierszu początku są kolorem początkowym. Następnie końcowy wiersz jest prostopadły do linii orientacji i przechodzi przez jeden z rogów prostokąta. Wszystkie punkty w wierszu końcowym są kolorem końcowym.  
  
 Kąt linii orientacji określa, w których rogach są przekazywane linie początkowe i końcowe. Na przykład, jeśli kąt jest z zakresu od 0 do 90 stopni, linia początkowa przechodzi w lewym górnym rogu, a końcowy wiersz przechodzi przez prawy dolny róg.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinearGradientBrush (System.Drawing.Rectangle rect, System.Drawing.Color color1, System.Drawing.Color color2, float angle, bool isAngleScaleable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Drawing.Rectangle rect, valuetype System.Drawing.Color color1, valuetype System.Drawing.Color color2, float32 angle, bool isAngleScaleable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.LinearGradientBrush.#ctor(System.Drawing.Rectangle,System.Drawing.Color,System.Drawing.Color,System.Single,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (rect As Rectangle, color1 As Color, color2 As Color, angle As Single, isAngleScaleable As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LinearGradientBrush(System::Drawing::Rectangle rect, System::Drawing::Color color1, System::Drawing::Color color2, float angle, bool isAngleScaleable);" />
      <MemberSignature Language="F#" Value="new System.Drawing.Drawing2D.LinearGradientBrush : System.Drawing.Rectangle * System.Drawing.Color * System.Drawing.Color * single * bool -&gt; System.Drawing.Drawing2D.LinearGradientBrush" Usage="new System.Drawing.Drawing2D.LinearGradientBrush (rect, color1, color2, angle, isAngleScaleable)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.Rectangle" />
        <Parameter Name="color1" Type="System.Drawing.Color" />
        <Parameter Name="color2" Type="System.Drawing.Color" />
        <Parameter Name="angle" Type="System.Single" />
        <Parameter Name="isAngleScaleable" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="rect"><see cref="T:System.Drawing.Rectangle" /> Struktura, która określa granice gradientu liniowego.</param>
        <param name="color1"><see cref="T:System.Drawing.Color" /> Struktura, która reprezentuje kolor początkowy gradientu.</param>
        <param name="color2"><see cref="T:System.Drawing.Color" /> Struktura, która reprezentuje kolor końcowy gradientu.</param>
        <param name="angle">Kąt (w stopniach od prawej) od osi x linii orientacji gradientu.</param>
        <param name="isAngleScaleable">Ustaw, <see langword="true" /> <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" /> Abyokreślić,czykątmawpływnatransformacjęskojarzonąztymelementem;<see langword="false" />w przeciwnym razie.</param>
        <summary>Tworzy nowe wystąpienie <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" /> klasy na podstawie prostokąta, początkowych i końcowych kolorów oraz kąta orientacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wszystkie punkty wzdłuż linii pionowej są tego samego koloru.  
  
 Linia początkowa jest prostopadła do linii orientacji i przechodzi przez jeden z rogów prostokąta. Wszystkie punkty w wierszu początku są kolorem początkowym. Następnie końcowy wiersz jest prostopadły do linii orientacji i przechodzi przez jeden z rogów prostokąta. Wszystkie punkty w wierszu końcowym są kolorem końcowym.  
  
 Kąt linii orientacji określa, w których rogach są przekazywane linie początkowe i końcowe. Na przykład, jeśli kąt jest z zakresu od 0 do 90 stopni, linia początkowa przechodzi w lewym górnym rogu, a końcowy wiersz przechodzi przez prawy dolny róg.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LinearGradientBrush (System.Drawing.RectangleF rect, System.Drawing.Color color1, System.Drawing.Color color2, float angle, bool isAngleScaleable);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Drawing.RectangleF rect, valuetype System.Drawing.Color color1, valuetype System.Drawing.Color color2, float32 angle, bool isAngleScaleable) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.LinearGradientBrush.#ctor(System.Drawing.RectangleF,System.Drawing.Color,System.Drawing.Color,System.Single,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (rect As RectangleF, color1 As Color, color2 As Color, angle As Single, isAngleScaleable As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LinearGradientBrush(System::Drawing::RectangleF rect, System::Drawing::Color color1, System::Drawing::Color color2, float angle, bool isAngleScaleable);" />
      <MemberSignature Language="F#" Value="new System.Drawing.Drawing2D.LinearGradientBrush : System.Drawing.RectangleF * System.Drawing.Color * System.Drawing.Color * single * bool -&gt; System.Drawing.Drawing2D.LinearGradientBrush" Usage="new System.Drawing.Drawing2D.LinearGradientBrush (rect, color1, color2, angle, isAngleScaleable)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="rect" Type="System.Drawing.RectangleF" />
        <Parameter Name="color1" Type="System.Drawing.Color" />
        <Parameter Name="color2" Type="System.Drawing.Color" />
        <Parameter Name="angle" Type="System.Single" />
        <Parameter Name="isAngleScaleable" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="rect"><see cref="T:System.Drawing.RectangleF" /> Struktura, która określa granice gradientu liniowego.</param>
        <param name="color1"><see cref="T:System.Drawing.Color" /> Struktura, która reprezentuje kolor początkowy gradientu.</param>
        <param name="color2"><see cref="T:System.Drawing.Color" /> Struktura, która reprezentuje kolor końcowy gradientu.</param>
        <param name="angle">Kąt (w stopniach od prawej) od osi x linii orientacji gradientu.</param>
        <param name="isAngleScaleable">Ustaw, <see langword="true" /> <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" /> Abyokreślić,czykątmawpływnatransformacjęskojarzonąztymelementem;<see langword="false" />w przeciwnym razie.</param>
        <summary>Tworzy nowe wystąpienie <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" /> klasy na podstawie prostokąta, początkowych i końcowych kolorów oraz kąta orientacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wszystkie punkty wzdłuż linii pionowej są tego samego koloru.  
  
 Linia początkowa jest prostopadła do linii orientacji i przechodzi przez jeden z rogów prostokąta. Wszystkie punkty w wierszu początku są kolorem początkowym. Następnie końcowy wiersz jest prostopadły do linii orientacji i przechodzi przez jeden z rogów prostokąta. Wszystkie punkty w wierszu końcowym są kolorem końcowym.  
  
 Kąt linii orientacji określa, w których rogach są przekazywane linie początkowe i końcowe. Na przykład, jeśli kąt jest z zakresu od 0 do 90 stopni, linia początkowa przechodzi w lewym górnym rogu, a końcowy wiersz przechodzi przez prawy dolny róg.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Blend">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.Blend Blend { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Drawing2D.Blend Blend" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Drawing2D.LinearGradientBrush.Blend" />
      <MemberSignature Language="VB.NET" Value="Public Property Blend As Blend" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::Blend ^ Blend { System::Drawing::Drawing2D::Blend ^ get(); void set(System::Drawing::Drawing2D::Blend ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Blend : System.Drawing.Drawing2D.Blend with get, set" Usage="System.Drawing.Drawing2D.LinearGradientBrush.Blend" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.Blend</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość <see cref="T:System.Drawing.Drawing2D.Blend" /> określającą pozycje i czynniki, które definiują niestandardowy zanik dla gradientu.</summary>
        <value><see cref="T:System.Drawing.Drawing2D.Blend" /> Reprezentujący niestandardowy zanik dla gradientu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.Drawing.Drawing2D.Blend> zawiera odpowiednie tablice współczynników i pozycji mieszania. Współczynniki mieszania określają wartości procentowe koloru początkowego i końcowego koloru do użycia w odpowiedniej pozycji. Pozycje są podane jako procent odległości wzdłuż linii gradientu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public override object Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.LinearGradientBrush.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Clone () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Object ^ Clone();" />
      <MemberSignature Language="F#" Value="override this.Clone : unit -&gt; obj" Usage="linearGradientBrush.Clone " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Tworzy dokładną kopię tego <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" />elementu.</summary>
        <returns><see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" /> Ta metoda tworzy, Rzutowanie jako obiekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e` <xref:System.Windows.Forms.Form.OnPaint%2A> obiektu zdarzenia. Kod wykonuje następujące czynności:  
  
-   Tworzy nowy <xref:System.Drawing.Drawing2D.LinearGradientBrush>.  
  
-   Rysuje elipsę na ekranie przy użyciu tego pędzla.  
  
-   Klonuje`clonedLGBrush`(). <xref:System.Drawing.Drawing2D.LinearGradientBrush>  
  
-   Rysuje elipsę do ekranu bezpośrednio poniżej pierwszej elipsy przy użyciu sklonowanego pędzla.  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicLinearGradientBrush#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicLinearGradientBrush/CPP/form1.cpp#1)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicLinearGradientBrush#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicLinearGradientBrush/CS/form1.cs#1)]
 [!code-vb[System.Drawing.Drawing2D.ClassicLinearGradientBrush#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicLinearGradientBrush/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GammaCorrection">
      <MemberSignature Language="C#" Value="public bool GammaCorrection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool GammaCorrection" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Drawing2D.LinearGradientBrush.GammaCorrection" />
      <MemberSignature Language="VB.NET" Value="Public Property GammaCorrection As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool GammaCorrection { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.GammaCorrection : bool with get, set" Usage="System.Drawing.Drawing2D.LinearGradientBrush.GammaCorrection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy dla tego <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" />ustawienia korekcji gamma jest włączona.</summary>
        <value>Wartość jest <see langword="true" /> w przypadku włączenia korekcji gamma dla tego <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" />elementu; w <see langword="false" />przeciwnym razie.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="InterpolationColors">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.ColorBlend InterpolationColors { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Drawing2D.ColorBlend InterpolationColors" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Drawing2D.LinearGradientBrush.InterpolationColors" />
      <MemberSignature Language="VB.NET" Value="Public Property InterpolationColors As ColorBlend" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::ColorBlend ^ InterpolationColors { System::Drawing::Drawing2D::ColorBlend ^ get(); void set(System::Drawing::Drawing2D::ColorBlend ^ value); };" />
      <MemberSignature Language="F#" Value="member this.InterpolationColors : System.Drawing.Drawing2D.ColorBlend with get, set" Usage="System.Drawing.Drawing2D.LinearGradientBrush.InterpolationColors" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.ColorBlend</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia element <see cref="T:System.Drawing.Drawing2D.ColorBlend" /> definiujący gradient liniowy Multicolor.</summary>
        <value>A <see cref="T:System.Drawing.Drawing2D.ColorBlend" /> , który definiuje gradient liniowy Multicolor.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.Drawing.Drawing2D.ColorBlend> zawiera odpowiednie tablice kolorów i pozycji. Pozycje są wartościami z przenoszącą od 0 do 1, które określają procent odległości wzdłuż linii gradientu, w której znajduje się odpowiedni kolor.  
  
 Ustawienie tej właściwości powoduje utworzenie gradientu Multicolor z jednym kolorem w każdej pozycji wzdłuż linii gradientu. Ustawienie tej właściwości NULLIFIES wszystkie poprzednie ustawienia koloru, położenia i zanikania dla tego <xref:System.Drawing.Drawing2D.LinearGradientBrush>elementu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="LinearColors">
      <MemberSignature Language="C#" Value="public System.Drawing.Color[] LinearColors { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color[] LinearColors" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Drawing2D.LinearGradientBrush.LinearColors" />
      <MemberSignature Language="VB.NET" Value="Public Property LinearColors As Color()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::Drawing::Color&gt; ^ LinearColors { cli::array &lt;System::Drawing::Color&gt; ^ get(); void set(cli::array &lt;System::Drawing::Color&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.LinearColors : System.Drawing.Color[] with get, set" Usage="System.Drawing.Drawing2D.LinearGradientBrush.LinearColors" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Color[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia kolor początkowy i końcowy gradientu.</summary>
        <value>Tablica dwóch <see cref="T:System.Drawing.Color" /> struktur, która przedstawia początkowy i końcowy kolor gradientu.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="MultiplyTransform">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Mnoży, <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" /> <see cref="T:System.Drawing.Drawing2D.Matrix" /> <see cref="T:System.Drawing.Drawing2D.Matrix" />które reprezentuje lokalną transformację tego elementu przez określony, w zależności od określonego. <see cref="T:System.Drawing.Drawing2D.Matrix" /></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MultiplyTransform">
      <MemberSignature Language="C#" Value="public void MultiplyTransform (System.Drawing.Drawing2D.Matrix matrix);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MultiplyTransform(class System.Drawing.Drawing2D.Matrix matrix) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.LinearGradientBrush.MultiplyTransform(System.Drawing.Drawing2D.Matrix)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MultiplyTransform(System::Drawing::Drawing2D::Matrix ^ matrix);" />
      <MemberSignature Language="F#" Value="member this.MultiplyTransform : System.Drawing.Drawing2D.Matrix -&gt; unit" Usage="linearGradientBrush.MultiplyTransform matrix" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="matrix" Type="System.Drawing.Drawing2D.Matrix" />
      </Parameters>
      <Docs>
        <param name="matrix">, <see cref="T:System.Drawing.Drawing2D.Matrix" /> Przez który ma zostać pomnożone przekształcenie geometryczne.</param>
        <summary>Mnoży, <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" /> <see cref="T:System.Drawing.Drawing2D.Matrix" /> <see cref="T:System.Drawing.Drawing2D.Matrix" />które reprezentuje lokalną transformację tego elementu przez określony, w zależności od określonego. <see cref="T:System.Drawing.Drawing2D.Matrix" /></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Aby zapoznać się z przykładem, zobacz <xref:System.Drawing.Drawing2D.LinearGradientBrush.MultiplyTransform%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MultiplyTransform">
      <MemberSignature Language="C#" Value="public void MultiplyTransform (System.Drawing.Drawing2D.Matrix matrix, System.Drawing.Drawing2D.MatrixOrder order);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MultiplyTransform(class System.Drawing.Drawing2D.Matrix matrix, valuetype System.Drawing.Drawing2D.MatrixOrder order) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.LinearGradientBrush.MultiplyTransform(System.Drawing.Drawing2D.Matrix,System.Drawing.Drawing2D.MatrixOrder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MultiplyTransform(System::Drawing::Drawing2D::Matrix ^ matrix, System::Drawing::Drawing2D::MatrixOrder order);" />
      <MemberSignature Language="F#" Value="member this.MultiplyTransform : System.Drawing.Drawing2D.Matrix * System.Drawing.Drawing2D.MatrixOrder -&gt; unit" Usage="linearGradientBrush.MultiplyTransform (matrix, order)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="matrix" Type="System.Drawing.Drawing2D.Matrix" />
        <Parameter Name="order" Type="System.Drawing.Drawing2D.MatrixOrder" />
      </Parameters>
      <Docs>
        <param name="matrix">, <see cref="T:System.Drawing.Drawing2D.Matrix" /> Przez który ma zostać pomnożone przekształcenie geometryczne.</param>
        <param name="order"><see cref="T:System.Drawing.Drawing2D.MatrixOrder" /> Określa kolejność, w której mają zostać pomnożone dwie macierze.</param>
        <summary>Mnoży, <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" /> <see cref="T:System.Drawing.Drawing2D.Matrix" /> które reprezentuje lokalną transformację tego obiektu przez określony w określonej kolejności. <see cref="T:System.Drawing.Drawing2D.Matrix" /></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e` <xref:System.Windows.Forms.Form.OnPaint%2A> obiektu zdarzenia. Kod wykonuje następujące czynności:  
  
-   Tworzy nowy <xref:System.Drawing.Drawing2D.LinearGradientBrush>.  
  
-   Rysuje elipsę na ekranie przy użyciu tego pędzla.  
  
-   Wywołuje metodę, aby <xref:System.Drawing.Drawing2D.LinearGradientBrush>przekształcić. <xref:System.Drawing.Drawing2D.LinearGradientBrush.MultiplyTransform%2A>  
  
-   Rysuje elipsę do ekranu bezpośrednio poniżej pierwszej elipsy przy użyciu przekształconego pędzla.  
  
 Zauważ, że Dolna elipsa jest rozciągana w kierunku poziomym i że gradient jest rozciągany w celu dopasowania go do nowego kształtu.  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicLinearGradientBrush#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicLinearGradientBrush/CPP/form1.cpp#2)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicLinearGradientBrush#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicLinearGradientBrush/CS/form1.cs#2)]
 [!code-vb[System.Drawing.Drawing2D.ClassicLinearGradientBrush#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicLinearGradientBrush/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rectangle">
      <MemberSignature Language="C#" Value="public System.Drawing.RectangleF Rectangle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.RectangleF Rectangle" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Drawing2D.LinearGradientBrush.Rectangle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Rectangle As RectangleF" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::RectangleF Rectangle { System::Drawing::RectangleF get(); };" />
      <MemberSignature Language="F#" Value="member this.Rectangle : System.Drawing.RectangleF" Usage="System.Drawing.Drawing2D.LinearGradientBrush.Rectangle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.RectangleF</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera prostokątny region, który definiuje początkową i końcową punkty gradientu.</summary>
        <value><see cref="T:System.Drawing.RectangleF" /> Struktura, która określa początkową i końcową punkty gradientu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Lewa strona prostokąta określa punkt początkowy gradientu liniowego, a po prawej stronie prostokąta określa punkt końcowy.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ResetTransform">
      <MemberSignature Language="C#" Value="public void ResetTransform ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResetTransform() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.LinearGradientBrush.ResetTransform" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResetTransform ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResetTransform();" />
      <MemberSignature Language="F#" Value="member this.ResetTransform : unit -&gt; unit" Usage="linearGradientBrush.ResetTransform " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Resetuje <see cref="P:System.Drawing.Drawing2D.LinearGradientBrush.Transform" /> właściwość do Identity.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e` <xref:System.Windows.Forms.Form.OnPaint%2A> obiektu zdarzenia. Kod wykonuje następujące czynności:  
  
-   Tworzy nowy <xref:System.Drawing.Drawing2D.LinearGradientBrush>.  
  
-   Rysuje elipsę na ekranie przy użyciu tego pędzla.  
  
-   Wywołuje metodę, aby <xref:System.Drawing.Drawing2D.LinearGradientBrush>przekształcić. <xref:System.Drawing.Drawing2D.LinearGradientBrush.MultiplyTransform%2A>  
  
-   Rysuje elipsę do ekranu bezpośrednio poniżej pierwszej elipsy przy użyciu przekształconego pędzla.  
  
-   Resetuje transformację.  
  
-   Rysuje trzecią elipsę na ekranie poniżej dwóch pierwszych.  
  
 Zauważ, że najniższa elipsa jest rysowana o takim samym rozmiarze jak pierwszy, i że ze względu na wywołanie <xref:System.Drawing.Drawing2D.LinearGradientBrush.ResetTransform%2A> metody gradient został zredukowany do dopasowania.  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicLinearGradientBrush#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicLinearGradientBrush/CPP/form1.cpp#3)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicLinearGradientBrush#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicLinearGradientBrush/CS/form1.cs#3)]
 [!code-vb[System.Drawing.Drawing2D.ClassicLinearGradientBrush#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicLinearGradientBrush/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="RotateTransform">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Obraca lokalną transformację geometryczną o określoną wartość. Ta metoda dołącza obrót do przekształcenia.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="RotateTransform">
      <MemberSignature Language="C#" Value="public void RotateTransform (float angle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RotateTransform(float32 angle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.LinearGradientBrush.RotateTransform(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RotateTransform (angle As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RotateTransform(float angle);" />
      <MemberSignature Language="F#" Value="member this.RotateTransform : single -&gt; unit" Usage="linearGradientBrush.RotateTransform angle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="angle" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="angle">Kąt obrotu.</param>
        <summary>Obraca lokalną transformację geometryczną o określoną wartość. Ta metoda dołącza obrót do przekształcenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Aby zapoznać się z przykładem, zobacz <xref:System.Drawing.Drawing2D.LinearGradientBrush.RotateTransform%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RotateTransform">
      <MemberSignature Language="C#" Value="public void RotateTransform (float angle, System.Drawing.Drawing2D.MatrixOrder order);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RotateTransform(float32 angle, valuetype System.Drawing.Drawing2D.MatrixOrder order) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.LinearGradientBrush.RotateTransform(System.Single,System.Drawing.Drawing2D.MatrixOrder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RotateTransform (angle As Single, order As MatrixOrder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RotateTransform(float angle, System::Drawing::Drawing2D::MatrixOrder order);" />
      <MemberSignature Language="F#" Value="member this.RotateTransform : single * System.Drawing.Drawing2D.MatrixOrder -&gt; unit" Usage="linearGradientBrush.RotateTransform (angle, order)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="angle" Type="System.Single" />
        <Parameter Name="order" Type="System.Drawing.Drawing2D.MatrixOrder" />
      </Parameters>
      <Docs>
        <param name="angle">Kąt obrotu.</param>
        <param name="order">A <see cref="T:System.Drawing.Drawing2D.MatrixOrder" /> , która określa, czy dołączać czy dołączyć macierz obrotu.</param>
        <summary>Obraca lokalną transformację geometryczną o określoną wartość w określonej kolejności.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e` <xref:System.Windows.Forms.Form.OnPaint%2A> obiektu zdarzenia. Kod  
  
-   Tworzy nowy <xref:System.Drawing.Drawing2D.LinearGradientBrush>.  
  
-   Rysuje elipsę na ekranie przy użyciu tego pędzla.  
  
-   Obraca 45 stopni przez <xref:System.Drawing.Drawing2D.LinearGradientBrush.RotateTransform%2A> wywołanie metody. <xref:System.Drawing.Drawing2D.LinearGradientBrush>  
  
-   Rysuje elipsę do ekranu bezpośrednio poniżej pierwszej elipsy, używając obróconego pędzla.  
  
 Zwróć uwagę, że gradient dolnej elipsy ma kąt o 45 stopni do osi x górnej elipsy. Zwróć również uwagę, że wywołanie <xref:System.Drawing.Drawing2D.LinearGradientBrush.TranslateTransform%2A> metody jest używane do justowania lewej krawędzi wypełnienia gradientem z lewą krawędzią dolnej elipsy.  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicLinearGradientBrush#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicLinearGradientBrush/CPP/form1.cpp#4)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicLinearGradientBrush#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicLinearGradientBrush/CS/form1.cs#4)]
 [!code-vb[System.Drawing.Drawing2D.ClassicLinearGradientBrush#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicLinearGradientBrush/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="ScaleTransform">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Skaluje lokalną transformację geometryczną o określonych ilościach. Ta metoda dołącza macierz skalowania do przekształcenia.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ScaleTransform">
      <MemberSignature Language="C#" Value="public void ScaleTransform (float sx, float sy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScaleTransform(float32 sx, float32 sy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.LinearGradientBrush.ScaleTransform(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ScaleTransform (sx As Single, sy As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ScaleTransform(float sx, float sy);" />
      <MemberSignature Language="F#" Value="member this.ScaleTransform : single * single -&gt; unit" Usage="linearGradientBrush.ScaleTransform (sx, sy)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sx" Type="System.Single" />
        <Parameter Name="sy" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="sx">Wartość, według której ma być skalowane przekształcenie w kierunku osi x.</param>
        <param name="sy">Wartość, według której ma być skalowane przekształcenie w kierunku osi y.</param>
        <summary>Skaluje lokalną transformację geometryczną o określonych ilościach. Ta metoda dołącza macierz skalowania do przekształcenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Aby zapoznać się z przykładem, zobacz <xref:System.Drawing.Drawing2D.LinearGradientBrush.ScaleTransform%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ScaleTransform">
      <MemberSignature Language="C#" Value="public void ScaleTransform (float sx, float sy, System.Drawing.Drawing2D.MatrixOrder order);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScaleTransform(float32 sx, float32 sy, valuetype System.Drawing.Drawing2D.MatrixOrder order) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.LinearGradientBrush.ScaleTransform(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ScaleTransform (sx As Single, sy As Single, order As MatrixOrder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ScaleTransform(float sx, float sy, System::Drawing::Drawing2D::MatrixOrder order);" />
      <MemberSignature Language="F#" Value="member this.ScaleTransform : single * single * System.Drawing.Drawing2D.MatrixOrder -&gt; unit" Usage="linearGradientBrush.ScaleTransform (sx, sy, order)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="sx" Type="System.Single" />
        <Parameter Name="sy" Type="System.Single" />
        <Parameter Name="order" Type="System.Drawing.Drawing2D.MatrixOrder" />
      </Parameters>
      <Docs>
        <param name="sx">Wartość, według której ma być skalowane przekształcenie w kierunku osi x.</param>
        <param name="sy">Wartość, według której ma być skalowane przekształcenie w kierunku osi y.</param>
        <param name="order">A <see cref="T:System.Drawing.Drawing2D.MatrixOrder" /> , która określa, czy dołączać czy dołączyć macierz skalowania.</param>
        <summary>Skaluje lokalne przekształcenie geometryczne według określonych kwot w określonej kolejności.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e` <xref:System.Windows.Forms.Form.OnPaint%2A> obiektu zdarzenia. Kod wykonuje następujące czynności:  
  
-   Tworzy nowy <xref:System.Drawing.Drawing2D.LinearGradientBrush>.  
  
-   Rysuj elipsę na ekranie przy użyciu tego pędzla.  
  
-   Skaluje <xref:System.Drawing.Drawing2D.LinearGradientBrush> się przy użyciu współczynnika dwóch w osi x.  
  
-   Rysuje elipsę do ekranu bezpośrednio poniżej pierwszej elipsy przy użyciu skalowanego pędzla.  
  
 Zwróć uwagę, że gradient dolnej elipsy jest rozciągany przez współczynnik dwóch. Zauważ również, że wywołanie <xref:System.Drawing.Drawing2D.LinearGradientBrush.TranslateTransform%2A> metody jest używane do justowania lewej krawędzi wypełnienia gradientem z lewą krawędzią elipsy.  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicLinearGradientBrush#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicLinearGradientBrush/CPP/form1.cpp#5)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicLinearGradientBrush#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicLinearGradientBrush/CS/form1.cs#5)]
 [!code-vb[System.Drawing.Drawing2D.ClassicLinearGradientBrush#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicLinearGradientBrush/VB/form1.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetBlendTriangularShape">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Tworzy gradient liniowy z kolorem środka i zanik liniowy do jednego koloru na obu końcach.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetBlendTriangularShape">
      <MemberSignature Language="C#" Value="public void SetBlendTriangularShape (float focus);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetBlendTriangularShape(float32 focus) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.LinearGradientBrush.SetBlendTriangularShape(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetBlendTriangularShape (focus As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetBlendTriangularShape(float focus);" />
      <MemberSignature Language="F#" Value="member this.SetBlendTriangularShape : single -&gt; unit" Usage="linearGradientBrush.SetBlendTriangularShape focus" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="focus" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="focus">Wartość z przedziału od 0 do 1, która określa środek gradientu (punkt, w którym Gradient składa się tylko z koloru końcowego).</param>
        <summary>Tworzy gradient liniowy z kolorem środka i zanik liniowy do jednego koloru na obu końcach.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda określa `focus`, który jest punktem, w którym Gradient składa się tylko z koloru końcowego. `focus` Parametr reprezentuje lokalizację jako część odległości wzdłuż linii gradientu. Gradient jest przypadany do koloru początkowego liniowo po obu stronach.  
  
   
  
## Examples  
 Aby zapoznać się z przykładem, zobacz <xref:System.Drawing.Drawing2D.LinearGradientBrush.SetBlendTriangularShape%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetBlendTriangularShape">
      <MemberSignature Language="C#" Value="public void SetBlendTriangularShape (float focus, float scale);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetBlendTriangularShape(float32 focus, float32 scale) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.LinearGradientBrush.SetBlendTriangularShape(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetBlendTriangularShape (focus As Single, scale As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetBlendTriangularShape(float focus, float scale);" />
      <MemberSignature Language="F#" Value="member this.SetBlendTriangularShape : single * single -&gt; unit" Usage="linearGradientBrush.SetBlendTriangularShape (focus, scale)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="focus" Type="System.Single" />
        <Parameter Name="scale" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="focus">Wartość z przedziału od 0 do 1, która określa środek gradientu (punkt, w którym Gradient składa się tylko z koloru końcowego).</param>
        <param name="scale">Wartość z wartości 0 through1, która określa, jak szybko kolory są zanikać od koloru <paramref name="focus" /> początkowego do (kolor końcowy).</param>
        <summary>Tworzy gradient liniowy z kolorem środka i zanik liniowy do jednego koloru na obu końcach.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda określa `focus`, który jest punktem, w którym Gradient składa się tylko z koloru końcowego. `focus` Parametr reprezentuje lokalizację jako część odległości wzdłuż linii gradientu. Gradient jest przypadany do koloru początkowego liniowo po obu stronach.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e` <xref:System.Windows.Forms.Form.OnPaint%2A> obiektu zdarzenia. Kod wykonuje następujące czynności:  
  
-   Tworzy nowy <xref:System.Drawing.Drawing2D.LinearGradientBrush>.  
  
-   Używa tego pędzla do rysowania elipsy na ekranie, który ma liniowe, od lewej do prawej przejścia kolorów.  
  
-   <xref:System.Drawing.Drawing2D.LinearGradientBrush> Przekształca w trójkątny kształt z szczytem w środku.  
  
-   Rysuje drugą elipsę na ekranie przy użyciu przekształconego pędzla.  
  
 Zwróć uwagę, że gradient dolnej elipsy przechodzi z niebieskiego do czerwonego, a następnie z powrotem na niebieską.  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicLinearGradientBrush#6](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicLinearGradientBrush/CPP/form1.cpp#6)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicLinearGradientBrush#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicLinearGradientBrush/CS/form1.cs#6)]
 [!code-vb[System.Drawing.Drawing2D.ClassicLinearGradientBrush#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicLinearGradientBrush/VB/form1.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SetSigmaBellShape">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Tworzy zanik gradientu na podstawie krzywej o kształcie dzwonka.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetSigmaBellShape">
      <MemberSignature Language="C#" Value="public void SetSigmaBellShape (float focus);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetSigmaBellShape(float32 focus) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.LinearGradientBrush.SetSigmaBellShape(System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetSigmaBellShape (focus As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetSigmaBellShape(float focus);" />
      <MemberSignature Language="F#" Value="member this.SetSigmaBellShape : single -&gt; unit" Usage="linearGradientBrush.SetSigmaBellShape focus" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="focus" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="focus">Wartość z przedziału od 0 do 1, która określa środek gradientu (punkt, w którym kolor początkowy i końcowy są mieszane w równym stopniu).</param>
        <summary>Tworzy zanik gradientu na podstawie krzywej o kształcie dzwonka.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda określa `focus`, który jest punktem, w którym Gradient składa się tylko z koloru końcowego. `focus` Parametr reprezentuje lokalizację jako część odległości wzdłuż linii gradientu. Gradient jest przypadany do koloru początkowego na podstawie kształtu krzywej dzwonka (rozkład normalny) po obu stronach.  
  
   
  
## Examples  
 Aby zapoznać się z przykładem, zobacz<xref:System.Drawing.Drawing2D.LinearGradientBrush.SetSigmaBellShape%2A>`.`  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SetSigmaBellShape">
      <MemberSignature Language="C#" Value="public void SetSigmaBellShape (float focus, float scale);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void SetSigmaBellShape(float32 focus, float32 scale) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.LinearGradientBrush.SetSigmaBellShape(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetSigmaBellShape (focus As Single, scale As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetSigmaBellShape(float focus, float scale);" />
      <MemberSignature Language="F#" Value="member this.SetSigmaBellShape : single * single -&gt; unit" Usage="linearGradientBrush.SetSigmaBellShape (focus, scale)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="focus" Type="System.Single" />
        <Parameter Name="scale" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="focus">Wartość z przedziału od 0 do 1, która określa środek gradientu (punkt, w którym Gradient składa się tylko z koloru końcowego).</param>
        <param name="scale">Wartość od 0 do 1 określająca szybkość, z jaką kolory <paramref name="focus" />są używane.</param>
        <summary>Tworzy zanik gradientu na podstawie krzywej o kształcie dzwonka.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda określa `focus`, który jest punktem, w którym Gradient składa się tylko z koloru końcowego. `focus` Parametr reprezentuje lokalizację jako część odległości wzdłuż linii gradientu. Gradient jest przypadany do koloru początkowego na podstawie kształtu krzywej dzwonka (rozkład normalny) po obu stronach.  
  
   
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e` <xref:System.Windows.Forms.Form.OnPaint%2A> obiektu zdarzenia. Kod wykonuje następujące czynności:  
  
-   Tworzy nowy <xref:System.Drawing.Drawing2D.LinearGradientBrush>.  
  
-   Używa tego pędzla do rysowania elipsy na ekranie, który ma liniowe, od lewej do prawej przejścia kolorów.  
  
-   Przekształca, <xref:System.Drawing.Drawing2D.LinearGradientBrush> aby mieć krzywą kształt dzwonka z szczytem w środku.  
  
-   Rysuje drugą elipsę na ekranie przy użyciu pędzla w kształcie dzwonka.  
  
 Zwróć uwagę, że gradient dolnej elipsy przechodzi z niebieskiego do czerwonego, a następnie z powrotem na niebieską.  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicLinearGradientBrush#7](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicLinearGradientBrush/CPP/form1.cpp#7)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicLinearGradientBrush#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicLinearGradientBrush/CS/form1.cs#7)]
 [!code-vb[System.Drawing.Drawing2D.ClassicLinearGradientBrush#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicLinearGradientBrush/VB/form1.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Transform">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.Matrix Transform { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Drawing.Drawing2D.Matrix Transform" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Drawing2D.LinearGradientBrush.Transform" />
      <MemberSignature Language="VB.NET" Value="Public Property Transform As Matrix" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::Matrix ^ Transform { System::Drawing::Drawing2D::Matrix ^ get(); void set(System::Drawing::Drawing2D::Matrix ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Transform : System.Drawing.Drawing2D.Matrix with get, set" Usage="System.Drawing.Drawing2D.LinearGradientBrush.Transform" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.Matrix</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia kopię <see cref="T:System.Drawing.Drawing2D.Matrix" /> definiującą lokalną transformację geometryczną dla <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" />tego elementu.</summary>
        <value>Kopia <see cref="T:System.Drawing.Drawing2D.Matrix" /> , która definiuje transformację geometryczną, która dotyczy tylko wypełnień rysowanych <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" />za pomocą tego elementu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Przekształcenie geometryczne może służyć do tłumaczenia, skalowania, obracania lub pochylania wypełnienia gradientu. Ponieważ macierz zwracana i według <xref:System.Drawing.Drawing2D.LinearGradientBrush.Transform%2A> właściwości jest kopią przekształcenia geometrycznego pędzla, należy usunąć macierz, gdy nie jest już potrzebna.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TranslateTransform">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Tłumaczy lokalną transformację geometryczną o określone wymiary. Ta metoda dołącza tłumaczenie do przekształcenia.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TranslateTransform">
      <MemberSignature Language="C#" Value="public void TranslateTransform (float dx, float dy);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TranslateTransform(float32 dx, float32 dy) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.LinearGradientBrush.TranslateTransform(System.Single,System.Single)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TranslateTransform (dx As Single, dy As Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TranslateTransform(float dx, float dy);" />
      <MemberSignature Language="F#" Value="member this.TranslateTransform : single * single -&gt; unit" Usage="linearGradientBrush.TranslateTransform (dx, dy)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dx" Type="System.Single" />
        <Parameter Name="dy" Type="System.Single" />
      </Parameters>
      <Docs>
        <param name="dx">Wartość tłumaczenia w x.</param>
        <param name="dy">Wartość tłumaczenia w osi y.</param>
        <summary>Tłumaczy lokalną transformację geometryczną o określone wymiary. Ta metoda dołącza tłumaczenie do przekształcenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Aby zapoznać się z przykładem, zobacz <xref:System.Drawing.Drawing2D.LinearGradientBrush.TranslateTransform%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TranslateTransform">
      <MemberSignature Language="C#" Value="public void TranslateTransform (float dx, float dy, System.Drawing.Drawing2D.MatrixOrder order);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void TranslateTransform(float32 dx, float32 dy, valuetype System.Drawing.Drawing2D.MatrixOrder order) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.LinearGradientBrush.TranslateTransform(System.Single,System.Single,System.Drawing.Drawing2D.MatrixOrder)" />
      <MemberSignature Language="VB.NET" Value="Public Sub TranslateTransform (dx As Single, dy As Single, order As MatrixOrder)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void TranslateTransform(float dx, float dy, System::Drawing::Drawing2D::MatrixOrder order);" />
      <MemberSignature Language="F#" Value="member this.TranslateTransform : single * single * System.Drawing.Drawing2D.MatrixOrder -&gt; unit" Usage="linearGradientBrush.TranslateTransform (dx, dy, order)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dx" Type="System.Single" />
        <Parameter Name="dy" Type="System.Single" />
        <Parameter Name="order" Type="System.Drawing.Drawing2D.MatrixOrder" />
      </Parameters>
      <Docs>
        <param name="dx">Wartość tłumaczenia w x.</param>
        <param name="dy">Wartość tłumaczenia w osi y.</param>
        <param name="order">Kolejność (poprzedź lub Append), w której ma zostać zastosowane tłumaczenie.</param>
        <summary>Tłumaczy lokalną transformację geometryczną o określone wymiary w określonej kolejności.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e` <xref:System.Windows.Forms.Form.OnPaint%2A> obiektu zdarzenia. Kod wykonuje następujące czynności:  
  
-   Tworzy nowy <xref:System.Drawing.Drawing2D.LinearGradientBrush>.  
  
-   Używa tego pędzla do rysowania prostokąta na ekranie, który ma liniowe, od lewej do prawej przejścia kolorów.  
  
-   <xref:System.Drawing.Drawing2D.LinearGradientBrush> Obraca o 90 stopni i skaluje gradient.  
  
-   Rysuje prostokąt z gradientem obróconym i skalowanym na ekranie.  
  
-   Tłumaczy prostokąt tak, aby miał gradient liniowy uruchomiony z góry do dołu.  
  
-   Rysuje przetłumaczony prostokąt do ekranu.  
  
 Należy zauważyć, że istnieją trzy prostokąty, które pokazują gradient z lewej strony, a drugie przedstawia gradient obrócony i skalowany, a dolny, a pierwszy przedstawia końcowy, przetłumaczony gradient.  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicLinearGradientBrush#8](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicLinearGradientBrush/CPP/form1.cpp#8)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicLinearGradientBrush#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicLinearGradientBrush/CS/form1.cs#8)]
 [!code-vb[System.Drawing.Drawing2D.ClassicLinearGradientBrush#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicLinearGradientBrush/VB/form1.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WrapMode">
      <MemberSignature Language="C#" Value="public System.Drawing.Drawing2D.WrapMode WrapMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Drawing2D.WrapMode WrapMode" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Drawing2D.LinearGradientBrush.WrapMode" />
      <MemberSignature Language="VB.NET" Value="Public Property WrapMode As WrapMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Drawing2D::WrapMode WrapMode { System::Drawing::Drawing2D::WrapMode get(); void set(System::Drawing::Drawing2D::WrapMode value); };" />
      <MemberSignature Language="F#" Value="member this.WrapMode : System.Drawing.Drawing2D.WrapMode with get, set" Usage="System.Drawing.Drawing2D.LinearGradientBrush.WrapMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.Drawing2D.WrapMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia <see cref="T:System.Drawing.Drawing2D.WrapMode" /> Wyliczenie wskazujące tryb <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" />zawijania.</summary>
        <value>A <see cref="T:System.Drawing.Drawing2D.WrapMode" /> , który określa, jak wypełniane <see cref="T:System.Drawing.Drawing2D.LinearGradientBrush" /> są wypełnienia przy użyciu tego fragmentu.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
