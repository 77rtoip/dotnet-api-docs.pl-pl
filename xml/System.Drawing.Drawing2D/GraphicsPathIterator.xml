<Type Name="GraphicsPathIterator" FullName="System.Drawing.Drawing2D.GraphicsPathIterator">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d54ae05beb29ca7f9355be8521f5adad9053cfe5" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69361747" /></Metadata><TypeSignature Language="C#" Value="public sealed class GraphicsPathIterator : MarshalByRefObject, IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit GraphicsPathIterator extends System.MarshalByRefObject implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Drawing.Drawing2D.GraphicsPathIterator" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class GraphicsPathIterator&#xA;Inherits MarshalByRefObject&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class GraphicsPathIterator sealed : MarshalByRefObject, IDisposable" />
  <TypeSignature Language="F#" Value="type GraphicsPathIterator = class&#xA;    inherit MarshalByRefObject&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Drawing</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Drawing.Common</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.1</AssemblyVersion>
    <AssemblyVersion>4.0.1.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Umożliwia wykonywanie iteracji przez ścieżki podrzędne w <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> i testowanie typów kształtów zawartych w każdej ścieżce podrzędnej. Klasa ta nie może być dziedziczona.</summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public GraphicsPathIterator (System.Drawing.Drawing2D.GraphicsPath path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Drawing.Drawing2D.GraphicsPath path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.#ctor(System.Drawing.Drawing2D.GraphicsPath)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (path As GraphicsPath)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; GraphicsPathIterator(System::Drawing::Drawing2D::GraphicsPath ^ path);" />
      <MemberSignature Language="F#" Value="new System.Drawing.Drawing2D.GraphicsPathIterator : System.Drawing.Drawing2D.GraphicsPath -&gt; System.Drawing.Drawing2D.GraphicsPathIterator" Usage="new System.Drawing.Drawing2D.GraphicsPathIterator path" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="path" Type="System.Drawing.Drawing2D.GraphicsPath" />
      </Parameters>
      <Docs>
        <param name="path"><see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> Obiekt, dla którego ma zostać zainicjowana Klasa pomocnika.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Drawing.Drawing2D.GraphicsPathIterator" /> klasy z określonym <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> obiektem.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyData">
      <MemberSignature Language="C#" Value="public int CopyData (ref System.Drawing.PointF[] points, ref byte[] types, int startIndex, int endIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 CopyData(valuetype System.Drawing.PointF[]&amp; points, unsigned int8[]&amp; types, int32 startIndex, int32 endIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.CopyData(System.Drawing.PointF[]@,System.Byte[]@,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function CopyData (ByRef points As PointF(), ByRef types As Byte(), startIndex As Integer, endIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int CopyData(cli::array &lt;System::Drawing::PointF&gt; ^ % points, cli::array &lt;System::Byte&gt; ^ % types, int startIndex, int endIndex);" />
      <MemberSignature Language="F#" Value="member this.CopyData :  *  * int * int -&gt; int" Usage="graphicsPathIterator.CopyData (points, types, startIndex, endIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="points" Type="System.Drawing.PointF[]" RefType="ref" />
        <Parameter Name="types" Type="System.Byte[]" RefType="ref" />
        <Parameter Name="startIndex" Type="System.Int32" />
        <Parameter Name="endIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="points">Po powrocie zawiera tablicę <see cref="T:System.Drawing.PointF" /> struktur, które reprezentują punkty w ścieżce.</param>
        <param name="types">Po powrocie zawiera tablicę bajtów reprezentującą typy punktów w ścieżce.</param>
        <param name="startIndex">Określa początkowy indeks tablic.</param>
        <param name="endIndex">Określa końcowy indeks tablic.</param>
        <summary>Kopiuje tablicę <see cref="P:System.Drawing.Drawing2D.GraphicsPath.PathTypes" />właściwościi właściwości skojarzonych <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> do dwóch określonych tablic. <see cref="P:System.Drawing.Drawing2D.GraphicsPath.PathPoints" /></summary>
        <returns>Liczba skopiowanych punktów.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj parametrów `endIndex` i, aby skopiować określony zakres danych ścieżki. `startIndex`  
  
   
  
## Examples  
 Poniższy przykład jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e` <xref:System.Windows.Forms.Form.OnPaint%2A> obiektu zdarzenia. Kod wykonuje następujące czynności:  
  
-   Tworzy ścieżkę grafiki.  
  
-   Wypełnia je kilkoma pierwotnymi i niektórymi znacznikami.  
  
-   Wyświetla dane ścieżki po lewej stronie ekranu.  
  
-   <xref:System.Drawing.Drawing2D.GraphicsPathIterator> Tworzy i przewija.  
  
-   Zwiększa indeks danych ścieżki do drugiego znacznika.  
  
-   <xref:System.Drawing.Drawing2D.GraphicsPathIterator.CopyData%2A> Wywołuje metodę w celu skopiowania danych ścieżki zawartych między indeksem początkowym i końcowym do tablic punktów i typów.  
  
-   Wyświetla listę skopiowanych danych po prawej stronie ekranu.  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CPP/form1.cpp#1)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CS/form1.cs#1)]
 [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Drawing2D.GraphicsPathIterator.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Drawing.Drawing2D.GraphicsPathIterator.Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera liczbę punktów w ścieżce.</summary>
        <value>Liczba punktów w ścieżce.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="graphicsPathIterator.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwalnia wszystkie zasoby używane przez ten <see cref="T:System.Drawing.Drawing2D.GraphicsPathIterator" /> obiekt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wywołanie `Dispose` zezwala na przydzielenie zasobów używanych <xref:System.Drawing.Drawing2D.GraphicsPathIterator> przez ten obiekt do innych celów.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Enumerate">
      <MemberSignature Language="C#" Value="public int Enumerate (ref System.Drawing.PointF[] points, ref byte[] types);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Enumerate(valuetype System.Drawing.PointF[]&amp; points, unsigned int8[]&amp; types) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.Enumerate(System.Drawing.PointF[]@,System.Byte[]@)" />
      <MemberSignature Language="VB.NET" Value="Public Function Enumerate (ByRef points As PointF(), ByRef types As Byte()) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Enumerate(cli::array &lt;System::Drawing::PointF&gt; ^ % points, cli::array &lt;System::Byte&gt; ^ % types);" />
      <MemberSignature Language="F#" Value="member this.Enumerate :  *  -&gt; int" Usage="graphicsPathIterator.Enumerate (points, types)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="points" Type="System.Drawing.PointF[]" RefType="ref" />
        <Parameter Name="types" Type="System.Byte[]" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="points">Po powrocie zawiera tablicę <see cref="T:System.Drawing.PointF" /> struktur, które reprezentują punkty w ścieżce.</param>
        <param name="types">Po powrocie zawiera tablicę bajtów reprezentującą typy punktów w ścieżce.</param>
        <summary>Kopiuje tablicę <see cref="P:System.Drawing.Drawing2D.GraphicsPath.PathTypes" />właściwościi właściwości skojarzonych <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> do dwóch określonych tablic. <see cref="P:System.Drawing.Drawing2D.GraphicsPath.PathPoints" /></summary>
        <returns>Liczba skopiowanych punktów.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e` <xref:System.Windows.Forms.Form.OnPaint%2A> obiektu zdarzenia. Kod wykonuje następujące czynności:  
  
-   Tworzy ścieżkę grafiki.  
  
-   Wypełnia je kilkoma pierwotnymi i niektórymi znacznikami.  
  
-   Wyświetla dane ścieżki po lewej stronie ekranu.  
  
-   <xref:System.Drawing.Drawing2D.GraphicsPathIterator> Tworzy i przewija.  
  
-   Zwiększa indeks danych ścieżki do drugiego znacznika.  
  
-   Wywołuje metodę w celu skopiowania danych ścieżki `points` do tablic i `types`. <xref:System.Drawing.Drawing2D.GraphicsPathIterator.Enumerate%2A>  
  
-   Wyświetla listę skopiowanych danych po prawej stronie ekranu.  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CPP/form1.cpp#2)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CS/form1.cs#2)]
 [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~GraphicsPathIterator ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!GraphicsPathIterator ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="graphicsPathIterator.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Umożliwia obiektowi podjęcie próby zwolnienia zasobów i wykonywanie innych operacji czyszczenia przed odinstalowaniem ich przez wyrzucanie elementów bezużytecznych.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="HasCurve">
      <MemberSignature Language="C#" Value="public bool HasCurve ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool HasCurve() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.HasCurve" />
      <MemberSignature Language="VB.NET" Value="Public Function HasCurve () As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool HasCurve();" />
      <MemberSignature Language="F#" Value="member this.HasCurve : unit -&gt; bool" Usage="graphicsPathIterator.HasCurve " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Wskazuje, czy ścieżka skojarzona z <see cref="T:System.Drawing.Drawing2D.GraphicsPathIterator" /> tym zawiera krzywą.</summary>
        <returns>Ta metoda zwraca <see langword="true" /> wartość, <see langword="false" />Jeśli bieżąca ścieżka podrzędna zawiera krzywą; w przeciwnym razie.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wszystkie krzywe w ścieżce są przechowywane jako sekwencje krzywych Beziera. Na przykład po dodaniu elipsy do ścieżki należy określić górny róg, Szerokość i wysokość prostokąta obwiedni. Te liczby (lewy górny róg, Szerokość i wysokość) nie są przechowywane w ścieżce; INSTEAD Elipsa jest konwertowana na sekwencję czterech krzywych Beziera. Ścieżka przechowuje punkty końcowe i punkty kontrolne tych krzywych Beziera.  
  
 Ścieżka przechowuje tablicę punktów danych, z których każdy należy do linii lub krzywej łamanej Beziera. Jeśli niektóre punkty w tablicy należą do krzywych Beziera, a następnie <xref:System.Drawing.Drawing2D.GraphicsPathIterator.HasCurve%2A> zwraca. `true` Jeśli wszystkie punkty w tablicy należą do wierszy, a następnie <xref:System.Drawing.Drawing2D.GraphicsPathIterator.HasCurve%2A> zwraca `false`.  
  
 Niektóre metody spłaszczają ścieżkę, co oznacza, że wszystkie krzywe w ścieżce są konwertowane na sekwencje wierszy. Gdy ścieżka zostanie spłaszczona, <xref:System.Drawing.Drawing2D.GraphicsPathIterator.HasCurve%2A> program zawsze zwróci `false`wartość. <xref:System.Drawing.Drawing2D.GraphicsPath.Widen%2A> <xref:System.Drawing.Drawing2D.GraphicsPath.Warp%2A> Wywołanie metody <xref:System.Drawing.Drawing2D.GraphicsPath.Flatten%2A> ,<xref:System.Drawing.Drawing2D.GraphicsPath> , lub klasy spowoduje spłaszczenie ścieżki.  
  
   
  
## Examples  
 Poniższy przykład jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e` <xref:System.Windows.Forms.Form.OnPaint%2A> obiektu zdarzenia. Kod wykonuje następujące czynności:  
  
-   Tworzy obiekt, `myPath`. <xref:System.Drawing.Drawing2D.GraphicsPath>  
  
-   Dodaje trzy linie, prostokąt i wielokropek.  
  
-   Tworzy obiekt dla elementu `myPath`. <xref:System.Drawing.Drawing2D.GraphicsPathIterator>  
  
-   Testuje, czy bieżąca ścieżka `myPath` zawiera krzywą.  
  
-   Pokazuje wynik testu w oknie komunikatu.  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CPP/form1.cpp#3)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CS/form1.cs#3)]
 [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="NextMarker">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Przenosi iterator do następnego znacznika w ścieżce.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="NextMarker">
      <MemberSignature Language="C#" Value="public int NextMarker (System.Drawing.Drawing2D.GraphicsPath path);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 NextMarker(class System.Drawing.Drawing2D.GraphicsPath path) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker(System.Drawing.Drawing2D.GraphicsPath)" />
      <MemberSignature Language="VB.NET" Value="Public Function NextMarker (path As GraphicsPath) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int NextMarker(System::Drawing::Drawing2D::GraphicsPath ^ path);" />
      <MemberSignature Language="F#" Value="member this.NextMarker : System.Drawing.Drawing2D.GraphicsPath -&gt; int" Usage="graphicsPathIterator.NextMarker path" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.Drawing.Drawing2D.GraphicsPath" />
      </Parameters>
      <Docs>
        <param name="path"><see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> Obiekt, do którego zostaną skopiowane punkty.</param>
        <summary>Z <see cref="T:System.Drawing.Drawing2D.GraphicsPathIterator" /> tym obiektem <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> jest skojarzony obiekt. Metoda zwiększa wartość skojarzoną <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> z następnym znacznikiem w swojej ścieżce i kopiuje wszystkie punkty zawarte między bieżącym znacznikiem a następnym znacznikiem (lub końcem ścieżki) do drugiego <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> obiektu przekazaną do parametru. <see cref="M:System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker(System.Drawing.Drawing2D.GraphicsPath)" /></summary>
        <returns>Liczba punktów między tym znacznikiem a następnym.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj metody <xref:System.Drawing.Drawing2D.GraphicsPath.SetMarkers%2A> , aby ustawić znaczniki w ścieżce. Znaczniki są używane do tworzenia grup ścieżek. Co najmniej jedna ścieżka podrzędna może być między dwoma znacznikami.  
  
   
  
## Examples  
 Poniższy przykład jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e` <xref:System.Windows.Forms.Form.OnPaint%2A> obiektu zdarzenia. Kod wykonuje następujące czynności:  
  
-   <xref:System.Drawing.Drawing2D.GraphicsPath> Tworzy obiekt.  
  
-   Dodaje trzy linie, prostokąt, wielokropek i dwa znaczniki.  
  
-   Wyświetla listę wartości wszystkich punktów ścieżki do lewej strony ekranu.  
  
-   <xref:System.Drawing.Drawing2D.GraphicsPathIterator> Tworzy obiekt.  
  
-   Tworzy obiekt, `myPathSection`, aby otrzymywać skopiowane punkty. <xref:System.Drawing.Drawing2D.GraphicsPath>  
  
-   Wywołuje metodę, która iteruje do pierwszego znacznika i kopiuje wszystkie punkty zawarte między tym znacznikiem a `myPathSection`obok. <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker%2A>  
  
-   Zwraca liczbę punktów skopiowanych do `markerPoints`.  
  
-   Wyświetla numer znacznika (pierwszy znacznik) i liczbę punktów, które zawiera po prawej stronie ekranu.  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#4](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CPP/form1.cpp#4)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#4](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CS/form1.cs#4)]
 [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#4](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/VB/form1.vb#4)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NextMarker">
      <MemberSignature Language="C#" Value="public int NextMarker (out int startIndex, out int endIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 NextMarker([out] int32&amp; startIndex, [out] int32&amp; endIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker(System.Int32@,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Function NextMarker (ByRef startIndex As Integer, ByRef endIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int NextMarker([Runtime::InteropServices::Out] int % startIndex, [Runtime::InteropServices::Out] int % endIndex);" />
      <MemberSignature Language="F#" Value="member this.NextMarker :  *  -&gt; int" Usage="graphicsPathIterator.NextMarker (startIndex, endIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndex" Type="System.Int32" RefType="out" />
        <Parameter Name="endIndex" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="startIndex">określoną Odwołanie do liczby całkowitej dostarczone do tego parametru otrzymuje indeks punktu, który rozpoczyna ścieżkę podrzędną.</param>
        <param name="endIndex">określoną Odwołanie do liczby całkowitej dostarczone do tego parametru otrzymuje indeks punktu kończącego ścieżkę podrzędną, do której <paramref name="startIndex" /> wskazuje.</param>
        <summary><see cref="T:System.Drawing.Drawing2D.GraphicsPathIterator" /> Zwiększa do następnego znacznika w ścieżce i zwraca indeksy uruchomienia i zatrzymania według parametrów [out].</summary>
        <returns>Liczba punktów między tym znacznikiem a następnym.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj metody <xref:System.Drawing.Drawing2D.GraphicsPath.SetMarkers%2A> , aby ustawić znaczniki w ścieżce. Znaczniki są używane do tworzenia grup ścieżek. Co najmniej jedna ścieżka podrzędna może być między dwoma znacznikami.  
  
   
  
## Examples  
 Poniższy przykład jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e` <xref:System.Windows.Forms.Form.OnPaint%2A> obiektu zdarzenia. Kod wykonuje następujące czynności:  
  
-   <xref:System.Drawing.Drawing2D.GraphicsPath> Tworzy obiekt.  
  
-   Dodaje trzy linie, prostokąt i wielokropek 3/4 ze znacznikami między nimi.  
  
-   Rysuje wartości dla tablicy punktów na ekranie.  
  
-   <xref:System.Drawing.Drawing2D.GraphicsPathIterator> Tworzy obiekt.  
  
-   <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker%2A> Wywołuje metodę.  
  
-   Używa wartości zwracanych z wywołań <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker%2A> iteracyjnych do rysowania punktów początkowych i końcowych dla każdego znacznika na ekranie.  
  
-   Rysuje wartość dla łącznej liczby punktów na ekranie.  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#5](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CPP/form1.cpp#5)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CS/form1.cs#5)]
 [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/VB/form1.vb#5)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NextPathType">
      <MemberSignature Language="C#" Value="public int NextPathType (out byte pathType, out int startIndex, out int endIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 NextPathType([out] unsigned int8&amp; pathType, [out] int32&amp; startIndex, [out] int32&amp; endIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.NextPathType(System.Byte@,System.Int32@,System.Int32@)" />
      <MemberSignature Language="VB.NET" Value="Public Function NextPathType (ByRef pathType As Byte, ByRef startIndex As Integer, ByRef endIndex As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int NextPathType([Runtime::InteropServices::Out] System::Byte % pathType, [Runtime::InteropServices::Out] int % startIndex, [Runtime::InteropServices::Out] int % endIndex);" />
      <MemberSignature Language="F#" Value="member this.NextPathType :  *  *  -&gt; int" Usage="graphicsPathIterator.NextPathType (pathType, startIndex, endIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pathType" Type="System.Byte" RefType="out" />
        <Parameter Name="startIndex" Type="System.Int32" RefType="out" />
        <Parameter Name="endIndex" Type="System.Int32" RefType="out" />
      </Parameters>
      <Docs>
        <param name="pathType">określoną Odbiera typ punktu współdzielony przez wszystkie punkty w grupie. Możliwe typy można pobrać z <see cref="T:System.Drawing.Drawing2D.PathPointType" /> wyliczenia.</param>
        <param name="startIndex">określoną Odbiera początkowy indeks grupy punktów.</param>
        <param name="endIndex">określoną Odbiera końcowy indeks grupy punktów.</param>
        <summary>Pobiera indeks początkowy i końcowy indeks następnej grupy punktów danych, które mają ten sam typ.</summary>
        <returns>Ta metoda zwraca liczbę punktów danych w grupie. Jeśli ścieżka nie zawiera więcej grup, ta metoda zwraca wartość 0.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e` <xref:System.Windows.Forms.Form.OnPaint%2A> obiektu zdarzenia. Kod wykonuje następujące czynności:  
  
-   <xref:System.Drawing.Drawing2D.GraphicsPath> Tworzy obiekt.  
  
-   Dodaje trzy linie, prostokąt i wielokropek.  
  
-   Wyświetla listę wartości wszystkich punktów po lewej stronie ekranu.  
  
-   <xref:System.Drawing.Drawing2D.GraphicsPathIterator> Tworzy i przewija.  
  
-   W pętli iteracja przechodzi przez punkty <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextPathType%2A> przy użyciu metod i <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextPathType%2A>. `for`  
  
-   Używa wartości zwracanych z wywołań iteracyjnych, aby wyświetlić listę podścieżki, liczbę punktów w nim i typ ścieżki wskazuje prawą stronę ekranu.  
  
-   Wyświetla wartość dla łącznej liczby punktów na ekranie.  
  
 Należy pamiętać `ListPathPoints` , że jest funkcją pomocnika, która oddziela większość (nie wszystkie) kodu wyświetlania od kodu ścieżki grafiki.  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#6](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CPP/form1.cpp#6)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CS/form1.cs#6)]
 [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/VB/form1.vb#6)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="NextSubpath">
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Przenosi podścieżkę do następnej ścieżki podrzędnej w określonej <see cref="T:System.Drawing.Drawing2D.GraphicsPath" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="NextSubpath">
      <MemberSignature Language="C#" Value="public int NextSubpath (System.Drawing.Drawing2D.GraphicsPath path, out bool isClosed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 NextSubpath(class System.Drawing.Drawing2D.GraphicsPath path, [out] bool&amp; isClosed) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath(System.Drawing.Drawing2D.GraphicsPath,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Function NextSubpath (path As GraphicsPath, ByRef isClosed As Boolean) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int NextSubpath(System::Drawing::Drawing2D::GraphicsPath ^ path, [Runtime::InteropServices::Out] bool % isClosed);" />
      <MemberSignature Language="F#" Value="member this.NextSubpath : System.Drawing.Drawing2D.GraphicsPath *  -&gt; int" Usage="graphicsPathIterator.NextSubpath (path, isClosed)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="path" Type="System.Drawing.Drawing2D.GraphicsPath" />
        <Parameter Name="isClosed" Type="System.Boolean" RefType="out" />
      </Parameters>
      <Docs>
        <param name="path">To <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> , że punkty danych są ustawione tak, aby odpowiadały punktom danych pobranego rysunku (subpath) dla tego iteratora.</param>
        <param name="isClosed">określoną Wskazuje, czy bieżąca podścieżka jest zamknięta. Jeśli rysunek jest zamknięty, w przeciwnym razie jest <see langword="false" />to możliwe. <see langword="true" /></param>
        <summary>Pobiera następny rysunek (subpath) ze ścieżki <see cref="T:System.Drawing.Drawing2D.GraphicsPathIterator" />skojarzonej.</summary>
        <returns>Liczba punktów danych na rysunku pobranym (subpath). Jeśli nie ma więcej ilustracji do pobrania, zwracana jest wartość zero.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e` <xref:System.Windows.Forms.Form.OnPaint%2A> obiektu zdarzenia. Kod wykonuje następujące czynności:  
  
-   <xref:System.Drawing.Drawing2D.GraphicsPath> Tworzy obiekt.  
  
-   Dodaje trzy linie, prostokąt, wielokropek i dwa znaczniki.  
  
-   Wyświetla listę wartości wszystkich punktów ścieżki do lewej strony ekranu.  
  
-   <xref:System.Drawing.Drawing2D.GraphicsPathIterator> Tworzy obiekt.  
  
-   Tworzy obiekt, `myPathSection`, aby otrzymywać skopiowane punkty. <xref:System.Drawing.Drawing2D.GraphicsPath>  
  
-   Wywołuje metodę, która iteruje do trzeciej ścieżki podrzędnej (rysunek) i kopiuje wszystkie punkty zawarte w tej ścieżce podrzędnej `myPathSection` do ścieżki, a także zwraca liczbę punktów skopiowanych do `subpathPoints`. <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath%2A>  
  
-   Wyświetla numer ścieżki podrzędnej oraz liczbę punktów, które zawiera po prawej stronie ekranu.  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#7](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CPP/form1.cpp#7)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#7](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CS/form1.cs#7)]
 [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#7](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/VB/form1.vb#7)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NextSubpath">
      <MemberSignature Language="C#" Value="public int NextSubpath (out int startIndex, out int endIndex, out bool isClosed);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 NextSubpath([out] int32&amp; startIndex, [out] int32&amp; endIndex, [out] bool&amp; isClosed) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath(System.Int32@,System.Int32@,System.Boolean@)" />
      <MemberSignature Language="VB.NET" Value="Public Function NextSubpath (ByRef startIndex As Integer, ByRef endIndex As Integer, ByRef isClosed As Boolean) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int NextSubpath([Runtime::InteropServices::Out] int % startIndex, [Runtime::InteropServices::Out] int % endIndex, [Runtime::InteropServices::Out] bool % isClosed);" />
      <MemberSignature Language="F#" Value="member this.NextSubpath :  *  *  -&gt; int" Usage="graphicsPathIterator.NextSubpath (startIndex, endIndex, isClosed)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="startIndex" Type="System.Int32" RefType="out" />
        <Parameter Name="endIndex" Type="System.Int32" RefType="out" />
        <Parameter Name="isClosed" Type="System.Boolean" RefType="out" />
      </Parameters>
      <Docs>
        <param name="startIndex">określoną Odbiera początkowy indeks następnej ścieżki podrzędnej.</param>
        <param name="endIndex">określoną Odbiera końcowy indeks następnej ścieżki podrzędnej.</param>
        <param name="isClosed">określoną Wskazuje, czy podścieżka jest zamknięta.</param>
        <summary><see cref="T:System.Drawing.Drawing2D.GraphicsPathIterator" /> Przenosi do następnej ścieżki podrzędnej w ścieżce. Indeks początkowy i końcowy następnej ścieżki podrzędnej są zawarte w parametrach [out].</summary>
        <returns>Liczba ścieżek podścieżk w <see cref="T:System.Drawing.Drawing2D.GraphicsPath" /> obiekcie.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład jest przeznaczony do użytku z Windows Forms i wymaga <xref:System.Windows.Forms.PaintEventArgs> `e` <xref:System.Windows.Forms.Form.OnPaint%2A> obiektu zdarzenia. Kod wykonuje następujące czynności:  
  
-   <xref:System.Drawing.Drawing2D.GraphicsPath> Tworzy obiekt.  
  
-   Dodaje trzy linie, prostokąt i wielokropek.  
  
-   Rysuje wartości dla tablicy punktów na ekranie.  
  
-   <xref:System.Drawing.Drawing2D.GraphicsPathIterator> Tworzy obiekt.  
  
-   <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath%2A> Wywołuje metodę.  
  
-   Używa wartości zwracanych z wywołań iteracyjnych do <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath%2A> rysowania wartości początkowych i zatrzymywania dla każdej ścieżki podrzędnej na ekranie.  
  
-   Rysuje wartość całkowitej liczby podścieżk do ekranu.  
  
 [!code-cpp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#8](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CPP/form1.cpp#8)]
 [!code-csharp[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/CS/form1.cs#8)]
 [!code-vb[System.Drawing.Drawing2D.ClassicGraphicsPathIterator#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Drawing.Drawing2D.ClassicGraphicsPathIterator/VB/form1.vb#8)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Rewind">
      <MemberSignature Language="C#" Value="public void Rewind ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Rewind() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Drawing.Drawing2D.GraphicsPathIterator.Rewind" />
      <MemberSignature Language="VB.NET" Value="Public Sub Rewind ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Rewind();" />
      <MemberSignature Language="F#" Value="member this.Rewind : unit -&gt; unit" Usage="graphicsPathIterator.Rewind " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Przewija ten <see cref="T:System.Drawing.Drawing2D.GraphicsPathIterator" /> stan na początku skojarzonej ze swoją ścieżką.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Przy pierwszym wywołaniu <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath%2A> metody iteratora Pobiera pierwszy rysunek (podścieżkę) skojarzonej ścieżki iteratora. Drugi raz otrzymuje drugi rysunek i tak dalej. Gdy wywołasz <xref:System.Drawing.Drawing2D.GraphicsPathIterator.Rewind%2A> metodę, Sekwencja zaczyna się od, czyli po wywołaniu <xref:System.Drawing.Drawing2D.GraphicsPathIterator.Rewind%2A>, następne wywołanie do <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextSubpath%2A> Pobiera pierwszego rysunku w ścieżce. Metody <xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextMarker%2A> i<xref:System.Drawing.Drawing2D.GraphicsPathIterator.NextPathType%2A> zachowują się podobnie.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SubpathCount">
      <MemberSignature Language="C#" Value="public int SubpathCount { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 SubpathCount" />
      <MemberSignature Language="DocId" Value="P:System.Drawing.Drawing2D.GraphicsPathIterator.SubpathCount" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SubpathCount As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int SubpathCount { int get(); };" />
      <MemberSignature Language="F#" Value="member this.SubpathCount : int" Usage="System.Drawing.Drawing2D.GraphicsPathIterator.SubpathCount" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Drawing</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Drawing.Common</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.1</AssemblyVersion>
        <AssemblyVersion>4.0.1.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera liczbę ścieżek podścieżky w ścieżce.</summary>
        <value>Liczba ścieżek w ścieżce.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
