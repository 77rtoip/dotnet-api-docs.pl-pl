<Type Name="ISendMessageCallback" FullName="System.ServiceModel.Activities.ISendMessageCallback">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="8c133f1593af34a1a6fc2456733b13f416cbc459" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="08/24/2018" />
    <Meta Name="ms.locfileid" Value="36526690" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface ISendMessageCallback" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract ISendMessageCallback" />
  <TypeSignature Language="DocId" Value="T:System.ServiceModel.Activities.ISendMessageCallback" />
  <TypeSignature Language="VB.NET" Value="Public Interface ISendMessageCallback" />
  <TypeSignature Language="C++ CLI" Value="public interface class ISendMessageCallback" />
  <TypeSignature Language="F#" Value="type ISendMessageCallback = interface" />
  <AssemblyInfo>
    <AssemblyName>System.ServiceModel.Activities</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Interfejs, który implementuje wywołanie zwrotne, które jest wywoływana tuż przed, komunikat jest wysyłany na potrzeby przesyłu przez <see cref="T:System.ServiceModel.Activities.Send" /> lub <see cref="T:System.ServiceModel.Activities.SendParametersContent" /> działań.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład pokazuje, jak zaimplementować <xref:System.ServiceModel.Activities.ISendMessageCallback> interfejs do nowego nagłówka do wiadomości, zanim zostanie wysłane na łączu.  
  
 [!code-csharp[AccessingOperationContext#0](~/samples/snippets/csharp/VS_Snippets_CFX/accessingoperationcontext/cs/sendinstanceidcallback.cs#0)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="OnSendMessage">
      <MemberSignature Language="C#" Value="public void OnSendMessage (System.ServiceModel.OperationContext operationContext);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void OnSendMessage(class System.ServiceModel.OperationContext operationContext) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.ServiceModel.Activities.ISendMessageCallback.OnSendMessage(System.ServiceModel.OperationContext)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void OnSendMessage(System::ServiceModel::OperationContext ^ operationContext);" />
      <MemberSignature Language="F#" Value="abstract member OnSendMessage : System.ServiceModel.OperationContext -&gt; unit" Usage="iSendMessageCallback.OnSendMessage operationContext" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.ServiceModel.Activities</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="operationContext" Type="System.ServiceModel.OperationContext" />
      </Parameters>
      <Docs>
        <param name="operationContext">Kontekst operacji w ramach której wiadomość zostanie wysłana.</param>
        <summary>Wykonywane po wysłaniu wiadomości usługi.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład pokazuje, jak zaimplementować <xref:System.ServiceModel.Activities.ISendMessageCallback> interfejs do nowego nagłówka do wiadomości, zanim zostanie wysłane na łączu.  
  
 [!code-csharp[AccessingOperationContext#0](~/samples/snippets/csharp/VS_Snippets_CFX/accessingoperationcontext/cs/sendinstanceidcallback.cs#0)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>