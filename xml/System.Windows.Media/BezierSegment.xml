<Type Name="BezierSegment" FullName="System.Windows.Media.BezierSegment">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="289d601f34a78fd5db5018f9e40be9f18ff1f579" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30712094" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class BezierSegment : System.Windows.Media.PathSegment" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed BezierSegment extends System.Windows.Media.PathSegment" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Media.BezierSegment" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class BezierSegment&#xA;Inherits PathSegment" />
  <TypeSignature Language="C++ CLI" Value="public ref class BezierSegment sealed : System::Windows::Media::PathSegment" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Media.PathSegment</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Reprezentuje sześcienny krzywej Beziera między dwoma punktami.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Windows.Media.PathFigure> obiekt, aby zapisać <xref:System.Windows.Media.BezierSegment> obiektów i inne segmenty.  
  
 Trzeciego krzywej Beziera jest definiowana za pomocą czterech punktów: punkt początkowy, punkt końcowy (<xref:System.Windows.Media.BezierSegment.Point3%2A>), dwa punktów kontrolnych i (<xref:System.Windows.Media.BezierSegment.Point1%2A> i <xref:System.Windows.Media.BezierSegment.Point2%2A>). <xref:System.Windows.Media.BezierSegment> Klasa nie zawiera właściwości dla punktu początkowego krzywej; definiuje on tylko punkt końcowy. Punkt początkowy krzywej jest bieżący punkt <xref:System.Windows.Media.PathFigure> do której <xref:System.Windows.Media.BezierSegment> został dodany.  
  
 Punkty kontrolne dwóch sześcienny krzywej Beziera przypominają pól, korzystające z części co byłoby prostej kierunku się i tworzenie krzywą. Formant pierwszego punktu, <xref:System.Windows.Media.BezierSegment.Point1%2A>, ma wpływ na początku części krzywej; drugi punkt kontrolny, <xref:System.Windows.Media.BezierSegment.Point2%2A>, ma wpływ na końcową części krzywej. Należy pamiętać, że krzywej nie musi przechodzić przez jednego z punktów kontrolnych; Każdy punkt kontrolny przenosi jego część wiersza do samej siebie, ale nie do samej siebie.  
  
## <a name="freezable-features"></a>Funkcje obiektu freezable  
 A <xref:System.Windows.Media.BezierSegment> jest typem <xref:System.Windows.Freezable> obiektu. Aby uzyskać informacje o <xref:System.Windows.Freezable> funkcje, takie jak zamrażanie i klonowania, zobacz [obiektu Freezable Przegląd obiektów](~/docs/framework/wpf/advanced/freezable-objects-overview.md).  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Media.PathFigure" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Media.BezierSegment" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BezierSegment ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.BezierSegment.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BezierSegment();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Media.BezierSegment" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Trzeciego krzywej Beziera jest definiowana za pomocą czterech punktów: punkt początkowy, punkt końcowy (`point3`), dwa punktów kontrolnych i (`point1` i `point2`). Ta metoda nie umożliwiają określenie punkt początkowy krzywej; krzywej zaczyna się od bieżącego punktu <xref:System.Windows.Media.PathFigure> obiektu, do którego <xref:System.Windows.Media.BezierSegment> został dodany.  
  
 Punkty kontrolne dwóch sześcienny krzywej Beziera przypominają pól, korzystające z części co byłoby prostej kierunku się i tworzenie krzywą. Formant pierwszego punktu, `point1`, ma wpływ na początku części krzywej; drugi punkt kontrolny, `point2`, ma wpływ na końcową części krzywej. Należy pamiętać, że krzywej nie musi przechodzić przez jednego z punktów kontrolnych; Każdy punkt kontrolny przenosi jego część wiersza do samej siebie, ale nie do samej siebie.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BezierSegment (System.Windows.Point point1, System.Windows.Point point2, System.Windows.Point point3, bool isStroked);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Windows.Point point1, valuetype System.Windows.Point point2, valuetype System.Windows.Point point3, bool isStroked) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.BezierSegment.#ctor(System.Windows.Point,System.Windows.Point,System.Windows.Point,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (point1 As Point, point2 As Point, point3 As Point, isStroked As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BezierSegment(System::Windows::Point point1, System::Windows::Point point2, System::Windows::Point point3, bool isStroked);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="point1" Type="System.Windows.Point" />
        <Parameter Name="point2" Type="System.Windows.Point" />
        <Parameter Name="point3" Type="System.Windows.Point" />
        <Parameter Name="isStroked" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="point1">Pierwszy punkt, który określa początek części krzywej.</param>
        <param name="point2">Drugi punkt kontrolny, który określa końcowy części krzywej.</param>
        <param name="point3">Punkt jest narysowanie krzywej.</param>
        <param name="isStroked">
          <see langword="true" /> Aby obrysu krzywej po <see cref="T:System.Windows.Media.Pen" /> jest używany do renderowania segmentu; w przeciwnym razie <see langword="false" />.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Media.BezierSegment" /> klasy z punktów kontrolnych określonego punktu końcowego i obrysu opcji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Trzeciego krzywej Beziera jest definiowana za pomocą czterech punktów: punkt początkowy, punkt końcowy (`point3`), dwa punktów kontrolnych i (`point1` i `point2`). Ta metoda nie umożliwiają określenie punkt początkowy krzywej; krzywej zaczyna się od bieżącego punktu <xref:System.Windows.Media.PathFigure> obiektu, do którego <xref:System.Windows.Media.BezierSegment> został dodany.  
  
 Punkty kontrolne dwóch sześcienny krzywej Beziera przypominają pól, korzystające z części co byłoby prostej kierunku się i tworzenie krzywą. Formant pierwszego punktu, `point1`, ma wpływ na początku części krzywej; drugi punkt kontrolny, `point2`, ma wpływ na końcową części krzywej. Należy pamiętać, że krzywej nie musi przechodzić przez jednego z punktów kontrolnych; Każdy punkt kontrolny przenosi jego część wiersza do samej siebie, ale nie do samej siebie.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public System.Windows.Media.BezierSegment Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Media.BezierSegment Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.BezierSegment.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As BezierSegment" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Media::BezierSegment ^ Clone();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.BezierSegment</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Tworzy modyfikowalną klonu tego <see cref="T:System.Windows.Media.BezierSegment" />, tworzenie bezpośrednich kopii wartości tego obiektu. Podczas kopiowania właściwości zależności, ta metoda umożliwia skopiowanie powiązania odwołań i dane zasobów, ale nie rozpoznają może ale animacje lub ich bieżącymi wartościami.</summary>
        <returns>Można modyfikować klonowania bieżącego obiektu. Sklonowany obiekt <see cref="P:System.Windows.Freezable.IsFrozen" /> właściwość będzie <see langword="false" /> nawet wtedy, gdy źródło <see cref="P:System.Windows.Freezable.IsFrozen" /> właściwość <see langword="true." /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda służy do tworzenia kopii można modyfikować zablokowane <xref:System.Windows.Freezable> obiektów (lub dowolnej <xref:System.Windows.Freezable> obiektu). Dla wygody ta metoda zasłania dziedziczone wersji z silnie typizowaną implementację.  
  
 Aby uzyskać więcej informacji, zobacz <xref:System.Windows.Freezable.Clone%2A?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CloneCurrentValue">
      <MemberSignature Language="C#" Value="public System.Windows.Media.BezierSegment CloneCurrentValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Media.BezierSegment CloneCurrentValue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.BezierSegment.CloneCurrentValue" />
      <MemberSignature Language="VB.NET" Value="Public Function CloneCurrentValue () As BezierSegment" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Media::BezierSegment ^ CloneCurrentValue();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.BezierSegment</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Tworzy modyfikowalną klonu tego <see cref="T:System.Windows.Media.BezierSegment" /> obiekt Tworzenie bezpośrednich kopii wartości bieżących tego obiektu. Odwołania do zasobu, powiązania danych i animacji nie są kopiowane, ale są ich bieżącymi wartościami.</summary>
        <returns>Można modyfikować klonowania bieżącego obiektu. Sklonowany obiekt <see cref="P:System.Windows.Freezable.IsFrozen" /> właściwość będzie <see langword="false" /> nawet wtedy, gdy źródło <see cref="P:System.Windows.Freezable.IsFrozen" /> właściwość <see langword="true" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda służy do tworzenia kopii można modyfikować zablokowane <xref:System.Windows.Freezable> obiektów (lub dowolnej <xref:System.Windows.Freezable> obiektu). Dla wygody ta metoda zasłania dziedziczone wersji z silnie typizowaną implementację.  
  
 Aby uzyskać więcej informacji, zobacz <xref:System.Windows.Freezable.CloneCurrentValue%2A?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateInstanceCore">
      <MemberSignature Language="C#" Value="protected override System.Windows.Freezable CreateInstanceCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Freezable CreateInstanceCore() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.BezierSegment.CreateInstanceCore" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateInstanceCore () As Freezable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Freezable ^ CreateInstanceCore();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Freezable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Point1">
      <MemberSignature Language="C#" Value="public System.Windows.Point Point1 { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Point Point1" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.BezierSegment.Point1" />
      <MemberSignature Language="VB.NET" Value="Public Property Point1 As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Point Point1 { System::Windows::Point get(); void set(System::Windows::Point value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Point</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia pierwszy punkt kontrolny krzywej.</summary>
        <value>Pierwszy punkt kontrolny krzywej.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Punkty kontrolne dwóch sześcienny krzywej Beziera przypominają pól, korzystające z części co byłoby prostej kierunku się i tworzenie krzywą. Formant pierwszego punktu, <xref:System.Windows.Media.BezierSegment.Point1%2A>, ma wpływ na początku części krzywej; drugi punkt kontrolny, <xref:System.Windows.Media.BezierSegment.Point2%2A>, ma wpływ na końcową części krzywej. Należy pamiętać, że krzywej nie musi przechodzić przez jednego z punktów kontrolnych; Każdy punkt kontrolny przenosi jego część wiersza do samej siebie, ale nie do samej siebie.  
  
<a name="dependencyPropertyInfo_Point1"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.Media.BezierSegment.Point1Property>|  
|Wartość właściwości metadanych `true`|Brak|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Point1Property">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty Point1Property;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty Point1Property" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Media.BezierSegment.Point1Property" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Point1Property As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ Point1Property;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="P:System.Windows.Media.BezierSegment.Point1" /> właściwości zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Point2">
      <MemberSignature Language="C#" Value="public System.Windows.Point Point2 { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Point Point2" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.BezierSegment.Point2" />
      <MemberSignature Language="VB.NET" Value="Public Property Point2 As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Point Point2 { System::Windows::Point get(); void set(System::Windows::Point value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Point</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia drugi punkt kontrolny krzywej.</summary>
        <value>Drugi punkt kontrolny krzywej.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Punkty kontrolne dwóch sześcienny krzywej Beziera przypominają pól, korzystające z części co byłoby prostej kierunku się i tworzenie krzywą. Formant pierwszego punktu, <xref:System.Windows.Media.BezierSegment.Point1%2A>, ma wpływ na początku części krzywej; drugi punkt kontrolny, <xref:System.Windows.Media.BezierSegment.Point2%2A>, ma wpływ na końcową części krzywej. Należy pamiętać, że krzywej nie musi przechodzić przez jednego z punktów kontrolnych; Każdy punkt kontrolny przenosi jego część wiersza do samej siebie, ale nie do samej siebie.  
  
<a name="dependencyPropertyInfo_Point2"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.Media.BezierSegment.Point2Property>|  
|Wartość właściwości metadanych `true`|Brak|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Point2Property">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty Point2Property;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty Point2Property" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Media.BezierSegment.Point2Property" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Point2Property As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ Point2Property;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="P:System.Windows.Media.BezierSegment.Point2" /> właściwości zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Point3">
      <MemberSignature Language="C#" Value="public System.Windows.Point Point3 { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Point Point3" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.BezierSegment.Point3" />
      <MemberSignature Language="VB.NET" Value="Public Property Point3 As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Point Point3 { System::Windows::Point get(); void set(System::Windows::Point value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Point</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia punkt końcowy krzywej.</summary>
        <value>Punkt końcowy krzywej.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Media.BezierSegment> Klasa nie zawiera właściwości dla punktu początkowego krzywej; definiuje on tylko punkt końcowy. Punkt początkowy krzywej jest bieżący punkt <xref:System.Windows.Media.PathFigure> do której <xref:System.Windows.Media.BezierSegment> został dodany.  
  
<a name="dependencyPropertyInfo_Point3"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.Media.BezierSegment.Point3Property>|  
|Wartość właściwości metadanych `true`|Brak|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Point3Property">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty Point3Property;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty Point3Property" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Media.BezierSegment.Point3Property" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly Point3Property As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ Point3Property;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="P:System.Windows.Media.BezierSegment.Point3" /> właściwości zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>