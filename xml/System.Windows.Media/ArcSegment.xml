<Type Name="ArcSegment" FullName="System.Windows.Media.ArcSegment">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="de2ef145439a2e9823922980d2564a4cdb09d1b0" />
    <Meta Name="ms.sourcegitcommit" Value="0e1f030650a307c745ee84ed547ef858acaea587" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="11/29/2018" />
    <Meta Name="ms.locfileid" Value="52612451" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class ArcSegment : System.Windows.Media.PathSegment" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ArcSegment extends System.Windows.Media.PathSegment" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Media.ArcSegment" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ArcSegment&#xA;Inherits PathSegment" />
  <TypeSignature Language="C++ CLI" Value="public ref class ArcSegment sealed : System::Windows::Media::PathSegment" />
  <TypeSignature Language="F#" Value="type ArcSegment = class&#xA;    inherit PathSegment" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Media.PathSegment</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Reprezentuje łuk eliptyczny między dwoma punktami.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Windows.Media.PathFigure> obiekt ma być przechowywany <xref:System.Windows.Media.ArcSegment> obiektów i inne segmenty.  
  
 Łuk eliptyczny jest definiowany przez jego punkt początkowy i końcowy, x i y-radius, osi x obrotu współczynnik, wartość wskazującą, czy łuk powinna być większa niż 180 stopni i wartości opisujące kierunek, w którym łuku. <xref:System.Windows.Media.ArcSegment> Klasa nie zawiera właściwości dla punktu początkowego łuku; definiuje tylko docelowy punkt łuku, czyli przedstawia liczbę. Punkt początkowy łuk jest bieżący punkt <xref:System.Windows.Media.PathFigure> do której <xref:System.Windows.Media.ArcSegment> zostanie dodany.  
  
 Poniższe ilustracje pokazują różne punktu końcowego <xref:System.Windows.Media.ArcSegment.Size%2A>, i <xref:System.Windows.Media.ArcSegment.RotationAngle%2A> ustawienia.  
  
 ![Obiekty ArcSegment z różnymi ustawieniami punktu](~/add/media/arcsegment-point.png "Obiekty ArcSegment z różnymi ustawieniami punktu")  
  
 ![Obiekty ArcSegment z różnymi ustawieniami rozmiar](~/add/media/arcsegment-size.png "Obiekty ArcSegment z różnymi ustawieniami rozmiar")  
  
 ![Obiekty ArcSegment z różnymi ustawieniami RotationAngle](~/add/media/arcsegment-rotationangle.png "Obiekty ArcSegment z różnymi ustawieniami RotationAngle")  
  
## <a name="islargearc-and-sweepdirection"></a>IsLargeArc i SweepDirection  
 W przypadku większości Łuki na określonej pozycji, rozmiar i obrót istnieją cztery Łuki różnych, które mogą być wystawiane; <xref:System.Windows.Media.ArcSegment.IsLargeArc%2A> i <xref:System.Windows.Media.ArcSegment.SweepDirection%2A> właściwości wskazują, które łuk do użycia.  
  
 Symulacji łuk cztery Release candidate reprezentują dwie duże łuki z symulacji 180 stopni lub nowszej, a dwa reprezentują mniejszych łuki z symulacji 180 stopni lub mniej. Jeśli <xref:System.Windows.Media.ArcSegment.IsLargeArc%2A> jest `true`, a następnie jedną z dwóch większych symulacji łuk jest wybrany; w przeciwnym razie jeśli jest `false`, jednego mniejszych łuku wybrano symulacji. Pozostałe kandydatów dwóch łuk każdego rysowane są w innym kierunku: <xref:System.Windows.Media.SweepDirection.Counterclockwise> lub <xref:System.Windows.Media.SweepDirection.Clockwise>. <xref:System.Windows.Media.ArcSegment.SweepDirection%2A> Właściwość określa, który z nich do użycia.  
  
 Na poniższych ilustracjach przedstawiono różne <xref:System.Windows.Media.ArcSegment.IsLargeArc%2A> i <xref:System.Windows.Media.ArcSegment.SweepDirection%2A> ustawienia.  
  
 ![Obiekty ArcSegment z różnymi ustawieniami IsLargeArc](~/add/media/arcsegment-islargearc.png "Obiekty ArcSegment z różnymi ustawieniami IsLargeArc")  
Element ArcSegment obiektów z różnymi ustawieniami IsLargeArc  
  
 ![Obiekty ArcSegment z różnymi ustawieniami SweepDirection](~/add/media/arcsegment-sweepdirection.png "Obiekty ArcSegment z różnymi ustawieniami SweepDirection")  
Element ArcSegment obiektów z różnymi ustawieniami SweepDirection  
  
## <a name="freezable-features"></a>Funkcje freezable  
 <xref:System.Windows.Media.ArcSegment> Jest typem <xref:System.Windows.Freezable> obiektu. Aby uzyskać informacje o <xref:System.Windows.Freezable> funkcje, np. zawiesza się i klonowanie, zobacz [Przegląd obiektów Freezable](~/docs/framework/wpf/advanced/freezable-objects-overview.md).  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Media.PathFigure" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Media.ArcSegment" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Media.ArcSegment> Klasy definiuje tylko punkt docelowy arc, czyli przedstawia liczbę; punkt początkowy łuk jest bieżący punkt <xref:System.Windows.Media.PathFigure>, do którego <xref:System.Windows.Media.ArcSegment> zostanie dodany.  
  
 W przypadku najbardziej eliptyczne Łuki na określonej pozycji, rozmiar i obrót istnieją cztery Łuki różnych, które mogą być wystawiane; `largeArc` i `sweepDirection` parametry oznaczają, które łuk do użycia.  
  
 Symulacji łuk cztery Release candidate reprezentują dwie duże łuki z symulacji 180 stopni lub nowszej, a dwa reprezentują mniejszych łuki z symulacji 180 stopni lub mniej. Jeśli `largeArc` jest `true`, a następnie jedną z dwóch większych symulacji łuk jest wybrany; w przeciwnym razie jeśli `largeArc` jest `false`, jednego mniejszych łuku wybrano symulacji.  
  
 Jeśli `sweepDirection` jest <xref:System.Windows.Media.SweepDirection.Clockwise>, łuku w kierunku Kąt dodatni. Jeśli `sweepDirection` jest <xref:System.Windows.Media.SweepDirection.Counterclockwise>, łuku w kierunku kąt ujemna.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ArcSegment ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.ArcSegment.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ArcSegment();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Media.ArcSegment" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Media.ArcSegment> Klasy definiuje tylko punkt docelowy arc, czyli przedstawia liczbę; punkt początkowy łuk jest bieżący punkt <xref:System.Windows.Media.PathFigure>, do którego <xref:System.Windows.Media.ArcSegment> zostanie dodany.  
  
 W przypadku najbardziej eliptyczne Łuki na określonej pozycji, rozmiar i obrót istnieją cztery Łuki różnych, które mogą być wystawiane; `largeArc` i `sweepDirection` parametry oznaczają, które łuk do użycia.  
  
 Symulacji łuk cztery Release candidate reprezentują dwie duże łuki z symulacji 180 stopni lub nowszej, a dwa reprezentują mniejszych łuki z symulacji 180 stopni lub mniej. Jeśli `largeArc` jest `true`, a następnie jedną z dwóch większych symulacji łuk jest wybrany; w przeciwnym razie jeśli `largeArc` jest `false`, jednego mniejszych łuku wybrano symulacji.  
  
 Jeśli `sweepDirection` jest <xref:System.Windows.Media.SweepDirection.Clockwise>, łuku w kierunku Kąt dodatni. Jeśli `sweepDirection` jest <xref:System.Windows.Media.SweepDirection.Counterclockwise>, łuku w kierunku kąt ujemna.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ArcSegment (System.Windows.Point point, System.Windows.Size size, double rotationAngle, bool isLargeArc, System.Windows.Media.SweepDirection sweepDirection, bool isStroked);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Windows.Point point, valuetype System.Windows.Size size, float64 rotationAngle, bool isLargeArc, valuetype System.Windows.Media.SweepDirection sweepDirection, bool isStroked) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.ArcSegment.#ctor(System.Windows.Point,System.Windows.Size,System.Double,System.Boolean,System.Windows.Media.SweepDirection,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ArcSegment(System::Windows::Point point, System::Windows::Size size, double rotationAngle, bool isLargeArc, System::Windows::Media::SweepDirection sweepDirection, bool isStroked);" />
      <MemberSignature Language="F#" Value="new System.Windows.Media.ArcSegment : System.Windows.Point * System.Windows.Size * double * bool * System.Windows.Media.SweepDirection * bool -&gt; System.Windows.Media.ArcSegment" Usage="new System.Windows.Media.ArcSegment (point, size, rotationAngle, isLargeArc, sweepDirection, isStroked)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="point" Type="System.Windows.Point" />
        <Parameter Name="size" Type="System.Windows.Size" />
        <Parameter Name="rotationAngle" Type="System.Double" />
        <Parameter Name="isLargeArc" Type="System.Boolean" />
        <Parameter Name="sweepDirection" Type="System.Windows.Media.SweepDirection" />
        <Parameter Name="isStroked" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="point">Docelowy punkt łuku; punkt początkowy łuku jest zdefiniowany jako bieżący punkt <see cref="T:System.Windows.Media.PathFigure" /> do której <see cref="T:System.Windows.Media.ArcSegment" /> zostanie dodany.</param>
        <param name="size">X - i -promień y łuku. Promień x jest określona przez <see cref="T:System.Windows.Size" /> struktury <see cref="P:System.Windows.Size.Width" /> określoną przez właściwość, a następnie promień y <see cref="T:System.Windows.Size" /> struktury <see cref="P:System.Windows.Size.Height" /> właściwości.</param>
        <param name="rotationAngle">Obrót wokół osi x elipsy.</param>
        <param name="isLargeArc">Czy łuk powinna być większa niż 180 stopni.</param>
        <param name="sweepDirection">Ustaw <see cref="F:System.Windows.Media.SweepDirection.Clockwise" /> do rysowania łuk w dodatnią kąt Kierunek; ustaw <see cref="F:System.Windows.Media.SweepDirection.Counterclockwise" /> do rysowania łuk w kierunku ujemną.</param>
        <param name="isStroked">Ustaw <c>true</c> do obrysu łuk podczas <see cref="T:System.Windows.Media.Pen" /> jest używany do renderowania segmentu; w przeciwnym razie <c>false</c>.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Media.ArcSegment" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Media.ArcSegment> Klasy definiuje tylko punkt docelowy arc, czyli przedstawia liczbę; punkt początkowy łuk jest bieżący punkt <xref:System.Windows.Media.PathFigure>, do którego <xref:System.Windows.Media.ArcSegment> zostanie dodany.  
  
 W przypadku najbardziej eliptyczne Łuki na określonej pozycji, rozmiar i obrót istnieją cztery Łuki różnych, które mogą być wystawiane; `largeArc` i `sweepDirection` parametry oznaczają, które łuk do użycia.  
  
 Symulacji łuk cztery Release candidate reprezentują dwie duże łuki z symulacji 180 stopni lub nowszej, a dwa reprezentują mniejszych łuki z symulacji 180 stopni lub mniej. Jeśli `largeArc` jest `true`, a następnie jedną z dwóch większych symulacji łuk jest wybrany; w przeciwnym razie jeśli `largeArc` jest `false`, jednego mniejszych łuku wybrano symulacji.  
  
 Jeśli `sweepDirection` jest <xref:System.Windows.Media.SweepDirection.Clockwise>, łuku w kierunku Kąt dodatni. Jeśli `sweepDirection` jest <xref:System.Windows.Media.SweepDirection.Counterclockwise>, łuku w kierunku kąt ujemna.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public System.Windows.Media.ArcSegment Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Media.ArcSegment Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.ArcSegment.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As ArcSegment" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Media::ArcSegment ^ Clone();" />
      <MemberSignature Language="F#" Value="override this.Clone : unit -&gt; System.Windows.Media.ArcSegment" Usage="arcSegment.Clone " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.ArcSegment</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Tworzy klon można modyfikować tego <see cref="T:System.Windows.Media.ArcSegment" />, tworzenie kopii głębokiego wartości tego obiektu. Podczas kopiowania właściwości zależności, ta metoda kopiuje zasobów odwołania i powiązania danych (ale nie rozpoznają może) ale animacji lub ich bieżącymi wartościami.</summary>
        <returns>Można modyfikować klonowania bieżącego obiektu. Sklonowany obiekt <see cref="P:System.Windows.Freezable.IsFrozen" /> właściwość będzie miała <see langword="false" /> nawet wtedy, gdy źródło <see cref="P:System.Windows.Freezable.IsFrozen" /> właściwość <see langword="true." /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda jest używana do tworzenia kopii można modyfikować zamrożone <xref:System.Windows.Freezable> obiektów (lub dowolnego <xref:System.Windows.Freezable> obiektu). Dla wygody ta metoda zasłania dziedziczone wersji z silnie typizowaną implementację.  
  
 Aby uzyskać więcej informacji, zobacz <xref:System.Windows.Freezable.Clone%2A?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CloneCurrentValue">
      <MemberSignature Language="C#" Value="public System.Windows.Media.ArcSegment CloneCurrentValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Media.ArcSegment CloneCurrentValue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.ArcSegment.CloneCurrentValue" />
      <MemberSignature Language="VB.NET" Value="Public Function CloneCurrentValue () As ArcSegment" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Media::ArcSegment ^ CloneCurrentValue();" />
      <MemberSignature Language="F#" Value="override this.CloneCurrentValue : unit -&gt; System.Windows.Media.ArcSegment" Usage="arcSegment.CloneCurrentValue " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.ArcSegment</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Tworzy klon można modyfikować tego <see cref="T:System.Windows.Media.ArcSegment" /> obiektu, tworzenie kopii głębokiego wartości bieżących tego obiektu. Odwołania do zasobów, powiązań danych i animacji nie są kopiowane, ale są w ich bieżących wartości.</summary>
        <returns>Można modyfikować klonowania bieżącego obiektu. Sklonowany obiekt <see cref="P:System.Windows.Freezable.IsFrozen" /> właściwość będzie miała <see langword="false" /> nawet wtedy, gdy źródło <see cref="P:System.Windows.Freezable.IsFrozen" /> właściwość <see langword="true" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda jest używana do tworzenia kopii można modyfikować zamrożone <xref:System.Windows.Freezable> obiektów (lub dowolnego <xref:System.Windows.Freezable> obiektu). Dla wygody ta metoda zasłania dziedziczone wersji z silnie typizowaną implementację.  
  
 Aby uzyskać więcej informacji, zobacz <xref:System.Windows.Freezable.CloneCurrentValue%2A?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateInstanceCore">
      <MemberSignature Language="C#" Value="protected override System.Windows.Freezable CreateInstanceCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Freezable CreateInstanceCore() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.ArcSegment.CreateInstanceCore" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateInstanceCore () As Freezable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Freezable ^ CreateInstanceCore();" />
      <MemberSignature Language="F#" Value="abstract member CreateInstanceCore : unit -&gt; System.Windows.Freezable&#xA;override this.CreateInstanceCore : unit -&gt; System.Windows.Freezable" Usage="arcSegment.CreateInstanceCore " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Freezable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLargeArc">
      <MemberSignature Language="C#" Value="public bool IsLargeArc { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsLargeArc" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.ArcSegment.IsLargeArc" />
      <MemberSignature Language="VB.NET" Value="Public Property IsLargeArc As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsLargeArc { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsLargeArc : bool with get, set" Usage="System.Windows.Media.ArcSegment.IsLargeArc" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy łuk powinna być większa niż 180 stopni.</summary>
        <value>
          <see langword="true" /> Jeśli łuk powinna być większa niż 180 stopni; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W przypadku większości Łuki na określonej pozycji, rozmiar i obrót istnieją cztery Łuki różnych, które mogą być wystawiane; <xref:System.Windows.Media.ArcSegment.IsLargeArc%2A> i <xref:System.Windows.Media.ArcSegment.SweepDirection%2A> właściwości wskazują, które łuk do użycia.  
  
 Symulacji łuk cztery Release candidate reprezentują dwie duże łuki z symulacji 180 stopni lub nowszej, a dwa reprezentują mniejszych łuki z symulacji 180 stopni lub mniej. Jeśli <xref:System.Windows.Media.ArcSegment.IsLargeArc%2A> jest `true`, a następnie jedną z dwóch większych symulacji łuk jest wybrany; w przeciwnym razie jeśli jest `false`, jednego mniejszych łuku wybrano symulacji. Pozostałe kandydatów dwóch łuk każdego rysowane są w innym kierunku: <xref:System.Windows.Media.SweepDirection.Counterclockwise> lub <xref:System.Windows.Media.SweepDirection.Clockwise>. <xref:System.Windows.Media.ArcSegment.SweepDirection%2A> Właściwość określa, który z nich do użycia.  
  
 Na poniższej ilustracji przedstawiono dwie eliptyczne łuki, które są identyczne, z wyjątkiem ich <xref:System.Windows.Media.ArcSegment.IsLargeArc%2A> ustawienia.  
  
 ![Obiekty ArcSegment z różnymi ustawieniami IsLargeArc](~/add/media/arcsegment-islargearc.png "Obiekty ArcSegment z różnymi ustawieniami IsLargeArc")  
Element ArcSegment obiektów z różnymi ustawieniami IsLargeArc  
  
<a name="dependencyPropertyInfo_IsLargeArc"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.Media.ArcSegment.IsLargeArcProperty>|  
|Ustaw właściwości metadanych `true`|Brak|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLargeArcProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsLargeArcProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsLargeArcProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Media.ArcSegment.IsLargeArcProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsLargeArcProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsLargeArcProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsLargeArcProperty : System.Windows.DependencyProperty" Usage="System.Windows.Media.ArcSegment.IsLargeArcProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="P:System.Windows.Media.ArcSegment.IsLargeArc" /> właściwość zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Point">
      <MemberSignature Language="C#" Value="public System.Windows.Point Point { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Point Point" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.ArcSegment.Point" />
      <MemberSignature Language="VB.NET" Value="Public Property Point As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Point Point { System::Windows::Point get(); void set(System::Windows::Point value); };" />
      <MemberSignature Language="F#" Value="member this.Point : System.Windows.Point with get, set" Usage="System.Windows.Media.ArcSegment.Point" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Point</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia punkt końcowy łuk eliptyczny.</summary>
        <value>Punkt, do którego łuku. Wartość domyślna to (0,0).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Media.ArcSegment> Klasy definiuje tylko punkt docelowy arc, czyli przedstawia liczbę; punkt początkowy łuk jest bieżący punkt <xref:System.Windows.Media.PathFigure> do której <xref:System.Windows.Media.ArcSegment> zostanie dodany.  
  
 Jeśli punkt początkowy i punkt końcowy segmentu łuk są takie same, nie łuku.  
  
 W przypadku większości Łuki na określonej pozycji, rozmiar i obrót istnieją cztery Łuki różnych, które mogą być wystawiane; <xref:System.Windows.Media.ArcSegment.IsLargeArc%2A> i <xref:System.Windows.Media.ArcSegment.SweepDirection%2A> właściwości wskazują, które łuk do użycia.  
  
 Symulacji łuk cztery Release candidate reprezentują dwie duże łuki z symulacji 180 stopni lub nowszej, a dwa reprezentują mniejszych łuki z symulacji 180 stopni lub mniej. Jeśli <xref:System.Windows.Media.ArcSegment.IsLargeArc%2A> jest `true`, a następnie jedną z dwóch większych symulacji łuk jest wybrany; w przeciwnym razie jeśli jest `false`, jednego mniejszych łuku wybrano symulacji. Pozostałe kandydatów dwóch łuk każdego rysowane są w innym kierunku: <xref:System.Windows.Media.SweepDirection.Counterclockwise> lub <xref:System.Windows.Media.SweepDirection.Clockwise>. <xref:System.Windows.Media.ArcSegment.SweepDirection%2A> Właściwość określa, który z nich do użycia.  
  
 Na poniższej ilustracji przedstawiono kilka eliptyczne łuki, które są identyczne, z wyjątkiem ich <xref:System.Windows.Media.ArcSegment.Point%2A> ustawienia.  
  
 ![Obiekty ArcSegment z różnymi ustawieniami punktu](~/add/media/arcsegment-point.png "Obiekty ArcSegment z różnymi ustawieniami punktu")  
Niektóre obiekty ArcSegment — z różnymi ustawieniami punktu  
  
<a name="dependencyPropertyInfo_Point"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.Media.ArcSegment.PointProperty>|  
|Ustaw właściwości metadanych `true`|Brak|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PointProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty PointProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty PointProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Media.ArcSegment.PointProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PointProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ PointProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable PointProperty : System.Windows.DependencyProperty" Usage="System.Windows.Media.ArcSegment.PointProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="P:System.Windows.Media.ArcSegment.Point" /> właściwość zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RotationAngle">
      <MemberSignature Language="C#" Value="public double RotationAngle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 RotationAngle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.ArcSegment.RotationAngle" />
      <MemberSignature Language="VB.NET" Value="Public Property RotationAngle As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double RotationAngle { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.RotationAngle : double with get, set" Usage="System.Windows.Media.ArcSegment.RotationAngle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość (w stopniach) za pomocą którego obraca się elipsę o osi x.</summary>
        <value>Kwota (w stopniach) za pomocą którego obraca się elipsę o osi x. Wartość domyślna to 0.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Na poniższej ilustracji przedstawiono kilka eliptyczne łuki, które są identyczne, z wyjątkiem ich <xref:System.Windows.Media.ArcSegment.RotationAngle%2A> ustawienia.  
  
 ![Obiekty ArcSegment z różnymi ustawieniami RotationAngle](~/add/media/arcsegment-rotationangle.png "Obiekty ArcSegment z różnymi ustawieniami RotationAngle")  
Niektóre obiekty ArcSegment — z różnymi ustawieniami RotationAngle  
  
 Należy pamiętać, że jeśli szerokość i wysokość łuku są takie same, ustawienie tej właściwości nie ma znaczenia.  
  
<a name="dependencyPropertyInfo_RotationAngle"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.Media.ArcSegment.RotationAngleProperty>|  
|Ustaw właściwości metadanych `true`|Brak|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RotationAngleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty RotationAngleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty RotationAngleProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Media.ArcSegment.RotationAngleProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly RotationAngleProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ RotationAngleProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable RotationAngleProperty : System.Windows.DependencyProperty" Usage="System.Windows.Media.ArcSegment.RotationAngleProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="P:System.Windows.Media.ArcSegment.RotationAngle" /> właściwość zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Size">
      <MemberSignature Language="C#" Value="public System.Windows.Size Size { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Size Size" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.ArcSegment.Size" />
      <MemberSignature Language="VB.NET" Value="Public Property Size As Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Size Size { System::Windows::Size get(); void set(System::Windows::Size value); };" />
      <MemberSignature Language="F#" Value="member this.Size : System.Windows.Size with get, set" Usage="System.Windows.Media.ArcSegment.Size" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia promień x i y łuk jako <see cref="T:System.Windows.Size" /> struktury.</summary>
        <value>A <see cref="T:System.Windows.Size" /> strukturę, która opisuje promień x i y łuk eliptyczny. <see cref="T:System.Windows.Size" /> Struktury <see cref="P:System.Windows.Size.Width" /> właściwość określa łuku x-radius; jej <see cref="P:System.Windows.Size.Height" /> właściwość określa promień y łuku. Wartość domyślna to 0,0.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Na poniższej ilustracji przedstawiono kilka eliptyczne łuki, które są identyczne, z wyjątkiem ich <xref:System.Windows.Media.ArcSegment.Size%2A> ustawienia.  
  
 ![Obiekty ArcSegment z różnymi ustawieniami rozmiar](~/add/media/arcsegment-size.png "Obiekty ArcSegment z różnymi ustawieniami rozmiar")  
Niektóre obiekty ArcSegment — z różnymi ustawieniami rozmiar  
  
<a name="dependencyPropertyInfo_Size"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.Media.ArcSegment.SizeProperty>|  
|Ustaw właściwości metadanych `true`|Brak|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SizeProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty SizeProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty SizeProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Media.ArcSegment.SizeProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly SizeProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ SizeProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable SizeProperty : System.Windows.DependencyProperty" Usage="System.Windows.Media.ArcSegment.SizeProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="P:System.Windows.Media.ArcSegment.Size" /> właściwość zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SweepDirection">
      <MemberSignature Language="C#" Value="public System.Windows.Media.SweepDirection SweepDirection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Media.SweepDirection SweepDirection" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.ArcSegment.SweepDirection" />
      <MemberSignature Language="VB.NET" Value="Public Property SweepDirection As SweepDirection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::SweepDirection SweepDirection { System::Windows::Media::SweepDirection get(); void set(System::Windows::Media::SweepDirection value); };" />
      <MemberSignature Language="F#" Value="member this.SweepDirection : System.Windows.Media.SweepDirection with get, set" Usage="System.Windows.Media.ArcSegment.SweepDirection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.SweepDirection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość określającą, czy łuku <see cref="F:System.Windows.Media.SweepDirection.Clockwise" /> lub <see cref="F:System.Windows.Media.SweepDirection.Counterclockwise" /> kierunku.</summary>
        <value>Wartość, która określa kierunek, w którym łuku. Wartość domyślna to <see cref="F:System.Windows.Media.SweepDirection.Counterclockwise" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dla <xref:System.Windows.Media.ArcSegment> z danego <xref:System.Windows.Media.ArcSegment.Size%2A>, <xref:System.Windows.Media.ArcSegment.RotationAngle%2A>punkt początkowy i zakończyć <xref:System.Windows.Media.ArcSegment.Point%2A>, cztery różne Łuki są możliwe. Określanie <xref:System.Windows.Media.ArcSegment.IsLargeArc%2A> właściwości zmniejsza liczbę możliwych Łuki dwóch: łuk pobierane z punktu początkowego do końca <xref:System.Windows.Media.ArcSegment.Point%2A> w <xref:System.Windows.Media.SweepDirection.Clockwise> kierunek i łuk pobierane z punktu początkowego do punktu końcowego w <xref:System.Windows.Media.SweepDirection.Counterclockwise> kierunku.  
  
 Na poniższej ilustracji przedstawiono dwie eliptyczne łuki, które są identyczne, z wyjątkiem ich <xref:System.Windows.Media.ArcSegment.SweepDirection%2A> ustawienia.  
  
 ![Obiekty ArcSegment z różnymi ustawieniami SweepDirection](~/add/media/arcsegment-sweepdirection.png "Obiekty ArcSegment z różnymi ustawieniami SweepDirection")  
Element ArcSegment obiektów z różnymi ustawieniami SweepDirection  
  
<a name="dependencyPropertyInfo_SweepDirection"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.Media.ArcSegment.SweepDirectionProperty>|  
|Ustaw właściwości metadanych `true`|Brak|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SweepDirectionProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty SweepDirectionProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty SweepDirectionProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Media.ArcSegment.SweepDirectionProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly SweepDirectionProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ SweepDirectionProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable SweepDirectionProperty : System.Windows.DependencyProperty" Usage="System.Windows.Media.ArcSegment.SweepDirectionProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="P:System.Windows.Media.ArcSegment.SweepDirection" /> właściwość zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>