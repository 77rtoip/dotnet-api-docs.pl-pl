<Type Name="ArcSegment" FullName="System.Windows.Media.ArcSegment">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="4ea813a0debea0d5d584dbffe701f14ae99e44bf" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30712310" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class ArcSegment : System.Windows.Media.PathSegment" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ArcSegment extends System.Windows.Media.PathSegment" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Media.ArcSegment" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ArcSegment&#xA;Inherits PathSegment" />
  <TypeSignature Language="C++ CLI" Value="public ref class ArcSegment sealed : System::Windows::Media::PathSegment" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Media.PathSegment</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Reprezentuje łuku między dwoma punktami.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Windows.Media.PathFigure> obiekt, aby zapisać <xref:System.Windows.Media.ArcSegment> obiektów i inne segmenty.  
  
 Łuku jest określony przez jego początkowy i końcowy, x i y-radius, osi x obrotu współczynnik, wartość wskazującą, czy łuk musi być większa niż 180 stopni, a wartość opisujące kierunek, w którym zostanie narysowana łuk. <xref:System.Windows.Media.ArcSegment> Klasa nie zawiera właściwości dla punktu początkowego łuku; definiuje on tylko punkt docelowy łuku reprezentuje. Punkt początkowy łuku jest bieżący punkt <xref:System.Windows.Media.PathFigure> do której <xref:System.Windows.Media.ArcSegment> został dodany.  
  
 Poniższe ilustracje pokazują punktu końcowego innej <xref:System.Windows.Media.ArcSegment.Size%2A>, i <xref:System.Windows.Media.ArcSegment.RotationAngle%2A> ustawienia.  
  
 ![Obiekty ArcSegment z różnymi ustawieniami punktu](~/add/media/arcsegment-point.png "Obiekty ArcSegment z różnymi ustawieniami Point")  
  
 ![Obiekty ArcSegment z różnymi ustawieniami rozmiar](~/add/media/arcsegment-size.png "Obiekty ArcSegment z różnymi ustawieniami rozmiaru")  
  
 ![Obiekty ArcSegment z różnymi ustawieniami RotationAngle](~/add/media/arcsegment-rotationangle.png "Obiekty ArcSegment z różnymi ustawieniami RotationAngle")  
  
## <a name="islargearc-and-sweepdirection"></a>IsLargeArc i SweepDirection  
 Dla większości Łuki w określonej pozycji, rozmiarem i rotacją istnieją cztery różne łuki, które mogą być wystawiane; <xref:System.Windows.Media.ArcSegment.IsLargeArc%2A> i <xref:System.Windows.Media.ArcSegment.SweepDirection%2A> właściwości wskazują, które łuk do użycia.  
  
 Przeszukiwanie łuk cztery kandydujących dwa reprezentują dużych łuki z przeszukiwanie 180 stopni lub nowszej, a dwa reprezentują mniejszych łuki z przeszukiwanie 180 stopni lub mniej. Jeśli <xref:System.Windows.Media.ArcSegment.IsLargeArc%2A> jest **true**, następnie jedną z dwóch większych przeszukiwanie łuk jest wybrany; w przeciwnym razie jeśli jest **false**, co mniejszych łuku przeszukiwanie zostanie wybrany. Pozostałe kandydatów dwóch łuk każdego rysowane są w innym kierunku: <xref:System.Windows.Media.SweepDirection.Counterclockwise> lub <xref:System.Windows.Media.SweepDirection.Clockwise>. <xref:System.Windows.Media.ArcSegment.SweepDirection%2A> Określa właściwość, która z nich do używania.  
  
 Na poniższych ilustracjach przedstawiono różne <xref:System.Windows.Media.ArcSegment.IsLargeArc%2A> i <xref:System.Windows.Media.ArcSegment.SweepDirection%2A> ustawienia.  
  
 ![Obiekty ArcSegment z różnymi ustawieniami IsLargeArc](~/add/media/arcsegment-islargearc.png "Obiekty ArcSegment z różnymi ustawieniami IsLargeArc")  
Element ArcSegment obiekty z różnymi ustawieniami IsLargeArc  
  
 ![Obiekty ArcSegment z różnymi ustawieniami SweepDirection](~/add/media/arcsegment-sweepdirection.png "Obiekty ArcSegment z różnymi ustawieniami SweepDirection")  
Element ArcSegment obiekty z różnymi ustawieniami SweepDirection  
  
## <a name="freezable-features"></a>Funkcje obiektu freezable  
 <xref:System.Windows.Media.ArcSegment> Jest typem <xref:System.Windows.Freezable> obiektu. Aby uzyskać informacje o <xref:System.Windows.Freezable> funkcje, takie jak zamrażanie i klonowania, zobacz [obiektu Freezable Przegląd obiektów](~/docs/framework/wpf/advanced/freezable-objects-overview.md).  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Media.PathFigure" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Media.ArcSegment" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Media.ArcSegment> Klasy definiuje tylko punkt docelowy łuk reprezentuje; punkt początkowy łuku jest bieżący punkt <xref:System.Windows.Media.PathFigure>, do którego <xref:System.Windows.Media.ArcSegment> został dodany.  
  
 Do najbardziej eliptycznej Łuki w określonej pozycji, rozmiarem i rotacją istnieją cztery różne łuki, które mogą być wystawiane; `largeArc` i `sweepDirection` parametry wskazać, który łuk do użycia.  
  
 Przeszukiwanie łuk cztery kandydujących dwa reprezentują dużych łuki z przeszukiwanie 180 stopni lub nowszej, a dwa reprezentują mniejszych łuki z przeszukiwanie 180 stopni lub mniej. Jeśli `largeArc` jest **true**, następnie jedną z dwóch większych przeszukiwanie łuk jest wybrany; w przeciwnym razie jeśli `largeArc` jest **false**, co mniejszych łuku przeszukiwanie zostanie wybrany.  
  
 Jeśli `sweepDirection` jest <xref:System.Windows.Media.SweepDirection.Clockwise>, łuku w kierunku kąt dodatnia. Jeśli `sweepDirection` jest <xref:System.Windows.Media.SweepDirection.Counterclockwise>, łuku w kierunku kąt ujemna.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ArcSegment ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.ArcSegment.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ArcSegment();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Media.ArcSegment" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Media.ArcSegment> Klasy definiuje tylko punkt docelowy łuk reprezentuje; punkt początkowy łuku jest bieżący punkt <xref:System.Windows.Media.PathFigure>, do którego <xref:System.Windows.Media.ArcSegment> został dodany.  
  
 Do najbardziej eliptycznej Łuki w określonej pozycji, rozmiarem i rotacją istnieją cztery różne łuki, które mogą być wystawiane; `largeArc` i `sweepDirection` parametry wskazać, który łuk do użycia.  
  
 Przeszukiwanie łuk cztery kandydujących dwa reprezentują dużych łuki z przeszukiwanie 180 stopni lub nowszej, a dwa reprezentują mniejszych łuki z przeszukiwanie 180 stopni lub mniej. Jeśli `largeArc` jest **true**, następnie jedną z dwóch większych przeszukiwanie łuk jest wybrany; w przeciwnym razie jeśli `largeArc` jest **false**, co mniejszych łuku przeszukiwanie zostanie wybrany.  
  
 Jeśli `sweepDirection` jest <xref:System.Windows.Media.SweepDirection.Clockwise>, łuku w kierunku kąt dodatnia. Jeśli `sweepDirection` jest <xref:System.Windows.Media.SweepDirection.Counterclockwise>, łuku w kierunku kąt ujemna.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ArcSegment (System.Windows.Point point, System.Windows.Size size, double rotationAngle, bool isLargeArc, System.Windows.Media.SweepDirection sweepDirection, bool isStroked);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Windows.Point point, valuetype System.Windows.Size size, float64 rotationAngle, bool isLargeArc, valuetype System.Windows.Media.SweepDirection sweepDirection, bool isStroked) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.ArcSegment.#ctor(System.Windows.Point,System.Windows.Size,System.Double,System.Boolean,System.Windows.Media.SweepDirection,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ArcSegment(System::Windows::Point point, System::Windows::Size size, double rotationAngle, bool isLargeArc, System::Windows::Media::SweepDirection sweepDirection, bool isStroked);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="point" Type="System.Windows.Point" />
        <Parameter Name="size" Type="System.Windows.Size" />
        <Parameter Name="rotationAngle" Type="System.Double" />
        <Parameter Name="isLargeArc" Type="System.Boolean" />
        <Parameter Name="sweepDirection" Type="System.Windows.Media.SweepDirection" />
        <Parameter Name="isStroked" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="point">Punkt docelowy łuku; punkt początkowy łuku jest zdefiniowany jako bieżący punkt <see cref="T:System.Windows.Media.PathFigure" /> do której <see cref="T:System.Windows.Media.ArcSegment" /> został dodany.</param>
        <param name="size">X - i y promień łuku. X-radius jest określona przez <see cref="T:System.Windows.Size" /> struktury <see cref="P:System.Windows.Size.Width" /> określonym przez właściwość i y-radius <see cref="T:System.Windows.Size" /> struktury <see cref="P:System.Windows.Size.Height" /> właściwości.</param>
        <param name="rotationAngle">Obrotu osi x elipsy.</param>
        <param name="isLargeArc">Określa, czy łuk musi być większa niż 180 stopni.</param>
        <param name="sweepDirection">Ustaw <see cref="F:System.Windows.Media.SweepDirection.Clockwise" /> do rysowania łuk w dodatnią kąt kierunku; ustawioną <see cref="F:System.Windows.Media.SweepDirection.Counterclockwise" /> do rysowania łuk w kierunku ujemną.</param>
        <param name="isStroked">Wartość <c>true</c> do obrysu łuk podczas <see cref="T:System.Windows.Media.Pen" /> jest używany do renderowania segmentu; w przeciwnym razie <c>false</c>.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Media.ArcSegment" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Media.ArcSegment> Klasy definiuje tylko punkt docelowy łuk reprezentuje; punkt początkowy łuku jest bieżący punkt <xref:System.Windows.Media.PathFigure>, do którego <xref:System.Windows.Media.ArcSegment> został dodany.  
  
 Do najbardziej eliptycznej Łuki w określonej pozycji, rozmiarem i rotacją istnieją cztery różne łuki, które mogą być wystawiane; `largeArc` i `sweepDirection` parametry wskazać, który łuk do użycia.  
  
 Przeszukiwanie łuk cztery kandydujących dwa reprezentują dużych łuki z przeszukiwanie 180 stopni lub nowszej, a dwa reprezentują mniejszych łuki z przeszukiwanie 180 stopni lub mniej. Jeśli `largeArc` jest **true**, następnie jedną z dwóch większych przeszukiwanie łuk jest wybrany; w przeciwnym razie jeśli `largeArc` jest **false**, co mniejszych łuku przeszukiwanie zostanie wybrany.  
  
 Jeśli `sweepDirection` jest <xref:System.Windows.Media.SweepDirection.Clockwise>, łuku w kierunku kąt dodatnia. Jeśli `sweepDirection` jest <xref:System.Windows.Media.SweepDirection.Counterclockwise>, łuku w kierunku kąt ujemna.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public System.Windows.Media.ArcSegment Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Media.ArcSegment Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.ArcSegment.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As ArcSegment" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Media::ArcSegment ^ Clone();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.ArcSegment</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Tworzy modyfikowalną klonu tego <see cref="T:System.Windows.Media.ArcSegment" />, tworzenie bezpośrednich kopii wartości tego obiektu. Podczas kopiowania właściwości zależności, ta metoda umożliwia skopiowanie powiązania odwołań i dane zasobów, ale nie rozpoznają może ale animacje lub ich bieżącymi wartościami.</summary>
        <returns>Można modyfikować klonowania bieżącego obiektu. Sklonowany obiekt <see cref="P:System.Windows.Freezable.IsFrozen" /> właściwość będzie <see langword="false" /> nawet wtedy, gdy źródło <see cref="P:System.Windows.Freezable.IsFrozen" /> właściwość <see langword="true." /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda służy do tworzenia kopii można modyfikować zablokowane <xref:System.Windows.Freezable> obiektów (lub dowolnej <xref:System.Windows.Freezable> obiektu). Dla wygody ta metoda zasłania dziedziczone wersji z silnie typizowaną implementację.  
  
 Aby uzyskać więcej informacji, zobacz <xref:System.Windows.Freezable.Clone%2A?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CloneCurrentValue">
      <MemberSignature Language="C#" Value="public System.Windows.Media.ArcSegment CloneCurrentValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Media.ArcSegment CloneCurrentValue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.ArcSegment.CloneCurrentValue" />
      <MemberSignature Language="VB.NET" Value="Public Function CloneCurrentValue () As ArcSegment" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Media::ArcSegment ^ CloneCurrentValue();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.ArcSegment</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Tworzy modyfikowalną klonu tego <see cref="T:System.Windows.Media.ArcSegment" /> obiekt Tworzenie bezpośrednich kopii wartości bieżących tego obiektu. Odwołania do zasobu, powiązania danych i animacji nie są kopiowane, ale są ich bieżącymi wartościami.</summary>
        <returns>Można modyfikować klonowania bieżącego obiektu. Sklonowany obiekt <see cref="P:System.Windows.Freezable.IsFrozen" /> właściwość będzie <see langword="false" /> nawet wtedy, gdy źródło <see cref="P:System.Windows.Freezable.IsFrozen" /> właściwość <see langword="true" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda służy do tworzenia kopii można modyfikować zablokowane <xref:System.Windows.Freezable> obiektów (lub dowolnej <xref:System.Windows.Freezable> obiektu). Dla wygody ta metoda zasłania dziedziczone wersji z silnie typizowaną implementację.  
  
 Aby uzyskać więcej informacji, zobacz <xref:System.Windows.Freezable.CloneCurrentValue%2A?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateInstanceCore">
      <MemberSignature Language="C#" Value="protected override System.Windows.Freezable CreateInstanceCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Freezable CreateInstanceCore() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.ArcSegment.CreateInstanceCore" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateInstanceCore () As Freezable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Freezable ^ CreateInstanceCore();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Freezable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLargeArc">
      <MemberSignature Language="C#" Value="public bool IsLargeArc { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsLargeArc" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.ArcSegment.IsLargeArc" />
      <MemberSignature Language="VB.NET" Value="Public Property IsLargeArc As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsLargeArc { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy łuk musi być większa niż 180 stopni.</summary>
        <value>**wartość true,** Jeśli łuk powinna być większa niż 180 stopni; w przeciwnym razie **false**. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dla większości Łuki w określonej pozycji, rozmiarem i rotacją istnieją cztery różne łuki, które mogą być wystawiane; <xref:System.Windows.Media.ArcSegment.IsLargeArc%2A> i <xref:System.Windows.Media.ArcSegment.SweepDirection%2A> właściwości wskazują, które łuk do użycia.  
  
 Przeszukiwanie łuk cztery kandydujących dwa reprezentują dużych łuki z przeszukiwanie 180 stopni lub nowszej, a dwa reprezentują mniejszych łuki z przeszukiwanie 180 stopni lub mniej. Jeśli <xref:System.Windows.Media.ArcSegment.IsLargeArc%2A> jest **true**, następnie jedną z dwóch większych przeszukiwanie łuk jest wybrany; w przeciwnym razie jeśli jest **false**, co mniejszych łuku przeszukiwanie zostanie wybrany. Pozostałe kandydatów dwóch łuk każdego rysowane są w innym kierunku: <xref:System.Windows.Media.SweepDirection.Counterclockwise> lub <xref:System.Windows.Media.SweepDirection.Clockwise>. <xref:System.Windows.Media.ArcSegment.SweepDirection%2A> Określa właściwość, która z nich do używania.  
  
 Na poniższej ilustracji przedstawiono dwa łuki eliptycznej, które są identyczne z wyjątkiem ich <xref:System.Windows.Media.ArcSegment.IsLargeArc%2A> ustawienia.  
  
 ![Obiekty ArcSegment z różnymi ustawieniami IsLargeArc](~/add/media/arcsegment-islargearc.png "Obiekty ArcSegment z różnymi ustawieniami IsLargeArc")  
Element ArcSegment obiekty z różnymi ustawieniami IsLargeArc  
  
<a name="dependencyPropertyInfo_IsLargeArc"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.Media.ArcSegment.IsLargeArcProperty>|  
|Wartość właściwości metadanych **true**|Brak|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLargeArcProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsLargeArcProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsLargeArcProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Media.ArcSegment.IsLargeArcProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsLargeArcProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsLargeArcProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="P:System.Windows.Media.ArcSegment.IsLargeArc" /> właściwości zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Point">
      <MemberSignature Language="C#" Value="public System.Windows.Point Point { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Point Point" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.ArcSegment.Point" />
      <MemberSignature Language="VB.NET" Value="Public Property Point As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Point Point { System::Windows::Point get(); void set(System::Windows::Point value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Point</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia punkt końcowy łuku.</summary>
        <value>Punkt jest narysowanie łuk. Wartość domyślna to (0,0).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Media.ArcSegment> Klasy definiuje tylko punkt docelowy łuk reprezentuje; punkt początkowy łuku jest bieżący punkt <xref:System.Windows.Media.PathFigure> do której <xref:System.Windows.Media.ArcSegment> został dodany.  
  
 Jeśli punkt początkowy i punkt końcowy segment łuk są takie same, nie łuku.  
  
 Dla większości Łuki w określonej pozycji, rozmiarem i rotacją istnieją cztery różne łuki, które mogą być wystawiane; <xref:System.Windows.Media.ArcSegment.IsLargeArc%2A> i <xref:System.Windows.Media.ArcSegment.SweepDirection%2A> właściwości wskazują, które łuk do użycia.  
  
 Przeszukiwanie łuk cztery kandydujących dwa reprezentują dużych łuki z przeszukiwanie 180 stopni lub nowszej, a dwa reprezentują mniejszych łuki z przeszukiwanie 180 stopni lub mniej. Jeśli <xref:System.Windows.Media.ArcSegment.IsLargeArc%2A> jest **true**, następnie jedną z dwóch większych przeszukiwanie łuk jest wybrany; w przeciwnym razie jeśli jest **false**, co mniejszych łuku przeszukiwanie zostanie wybrany. Pozostałe kandydatów dwóch łuk każdego rysowane są w innym kierunku: <xref:System.Windows.Media.SweepDirection.Counterclockwise> lub <xref:System.Windows.Media.SweepDirection.Clockwise>. <xref:System.Windows.Media.ArcSegment.SweepDirection%2A> Określa właściwość, która z nich do używania.  
  
 Na poniższej ilustracji przedstawiono kilka Łuki eliptycznej, które są identyczne z wyjątkiem ich <xref:System.Windows.Media.ArcSegment.Point%2A> ustawienia.  
  
 ![Obiekty ArcSegment z różnymi ustawieniami punktu](~/add/media/arcsegment-point.png "Obiekty ArcSegment z różnymi ustawieniami Point")  
Element ArcSegment obiekty o różnych ustawieniach punktu  
  
<a name="dependencyPropertyInfo_Point"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.Media.ArcSegment.PointProperty>|  
|Wartość właściwości metadanych **true**|Brak|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PointProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty PointProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty PointProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Media.ArcSegment.PointProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PointProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ PointProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="P:System.Windows.Media.ArcSegment.Point" /> właściwości zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RotationAngle">
      <MemberSignature Language="C#" Value="public double RotationAngle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 RotationAngle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.ArcSegment.RotationAngle" />
      <MemberSignature Language="VB.NET" Value="Public Property RotationAngle As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double RotationAngle { double get(); void set(double value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość (w stopniach) za pomocą którego obraca się elipsy o osi x.</summary>
        <value>Wielkość (w stopniach) za pomocą którego obraca się elipsy o osi x. Wartość domyślna to 0.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Na poniższej ilustracji przedstawiono kilka Łuki eliptycznej, które są identyczne z wyjątkiem ich <xref:System.Windows.Media.ArcSegment.RotationAngle%2A> ustawienia.  
  
 ![Obiekty ArcSegment z różnymi ustawieniami RotationAngle](~/add/media/arcsegment-rotationangle.png "Obiekty ArcSegment z różnymi ustawieniami RotationAngle")  
Niektóre obiekty element ArcSegment z różnymi ustawieniami RotationAngle  
  
 Należy pamiętać, że jeśli szerokość i wysokość łuku są takie same, ustawienie dla tej właściwości nie ma znaczenia.  
  
<a name="dependencyPropertyInfo_RotationAngle"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.Media.ArcSegment.RotationAngleProperty>|  
|Wartość właściwości metadanych **true**|Brak|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RotationAngleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty RotationAngleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty RotationAngleProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Media.ArcSegment.RotationAngleProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly RotationAngleProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ RotationAngleProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="P:System.Windows.Media.ArcSegment.RotationAngle" /> właściwości zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Size">
      <MemberSignature Language="C#" Value="public System.Windows.Size Size { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Size Size" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.ArcSegment.Size" />
      <MemberSignature Language="VB.NET" Value="Public Property Size As Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Size Size { System::Windows::Size get(); void set(System::Windows::Size value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia promień x i y łuk jako <see cref="T:System.Windows.Size" /> struktury.</summary>
        <value>A <see cref="T:System.Windows.Size" /> strukturę, która opisuje radius x i y elipsy łuk. <see cref="T:System.Windows.Size" /> Struktury <see cref="P:System.Windows.Size.Width" /> właściwość określa łuku x-radius; jego <see cref="P:System.Windows.Size.Height" /> właściwość określa łuku y-radius. Wartość domyślna to 0,0.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Na poniższej ilustracji przedstawiono kilka Łuki eliptycznej, które są identyczne z wyjątkiem ich <xref:System.Windows.Media.ArcSegment.Size%2A> ustawienia.  
  
 ![Obiekty ArcSegment z różnymi ustawieniami rozmiar](~/add/media/arcsegment-size.png "Obiekty ArcSegment z różnymi ustawieniami rozmiaru")  
Niektóre obiekty element ArcSegment z różnymi ustawieniami rozmiaru  
  
<a name="dependencyPropertyInfo_Size"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.Media.ArcSegment.SizeProperty>|  
|Wartość właściwości metadanych **true**|Brak|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SizeProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty SizeProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty SizeProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Media.ArcSegment.SizeProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly SizeProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ SizeProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="P:System.Windows.Media.ArcSegment.Size" /> właściwości zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SweepDirection">
      <MemberSignature Language="C#" Value="public System.Windows.Media.SweepDirection SweepDirection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Media.SweepDirection SweepDirection" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.ArcSegment.SweepDirection" />
      <MemberSignature Language="VB.NET" Value="Public Property SweepDirection As SweepDirection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::SweepDirection SweepDirection { System::Windows::Media::SweepDirection get(); void set(System::Windows::Media::SweepDirection value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.SweepDirection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość określającą, czy łuku <see cref="F:System.Windows.Media.SweepDirection.Clockwise" /> lub <see cref="F:System.Windows.Media.SweepDirection.Counterclockwise" /> kierunku.</summary>
        <value>Wartość, która określa kierunek, w którym zostanie narysowana łuk. Wartość domyślna to <see cref="F:System.Windows.Media.SweepDirection.Counterclockwise" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dla <xref:System.Windows.Media.ArcSegment> z danym <xref:System.Windows.Media.ArcSegment.Size%2A>, <xref:System.Windows.Media.ArcSegment.RotationAngle%2A>punktu początkowego i kończyć <xref:System.Windows.Media.ArcSegment.Point%2A>, cztery różne Łuki są możliwe. Określanie <xref:System.Windows.Media.ArcSegment.IsLargeArc%2A> właściwości zmniejsza liczbę Łuki możliwych do dwóch: łuk pobierane z punktu początkowego na końcu <xref:System.Windows.Media.ArcSegment.Point%2A> w <xref:System.Windows.Media.SweepDirection.Clockwise> kierunek i łuk pobierane z punktu początkowego do punktu końcowego w <xref:System.Windows.Media.SweepDirection.Counterclockwise> kierunku.  
  
 Na poniższej ilustracji przedstawiono dwa łuki eliptycznej, które są identyczne z wyjątkiem ich <xref:System.Windows.Media.ArcSegment.SweepDirection%2A> ustawienia.  
  
 ![Obiekty ArcSegment z różnymi ustawieniami SweepDirection](~/add/media/arcsegment-sweepdirection.png "Obiekty ArcSegment z różnymi ustawieniami SweepDirection")  
Element ArcSegment obiekty z różnymi ustawieniami SweepDirection  
  
<a name="dependencyPropertyInfo_SweepDirection"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.Media.ArcSegment.SweepDirectionProperty>|  
|Wartość właściwości metadanych **true**|Brak|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SweepDirectionProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty SweepDirectionProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty SweepDirectionProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Media.ArcSegment.SweepDirectionProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly SweepDirectionProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ SweepDirectionProperty;" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje <see cref="P:System.Windows.Media.ArcSegment.SweepDirection" /> właściwości zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>