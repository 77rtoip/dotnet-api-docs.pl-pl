<Type Name="ArcSegment" FullName="System.Windows.Media.ArcSegment">
  <Metadata><Meta Name="ms.openlocfilehash" Value="c6a6ab09f4590fee6a055a53a243695debe0f246" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69437048" /></Metadata><TypeSignature Language="C#" Value="public sealed class ArcSegment : System.Windows.Media.PathSegment" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed ArcSegment extends System.Windows.Media.PathSegment" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Media.ArcSegment" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class ArcSegment&#xA;Inherits PathSegment" />
  <TypeSignature Language="C++ CLI" Value="public ref class ArcSegment sealed : System::Windows::Media::PathSegment" />
  <TypeSignature Language="F#" Value="type ArcSegment = class&#xA;    inherit PathSegment" />
  <AssemblyInfo>
    <AssemblyName>PresentationCore</AssemblyName>
    <AssemblyVersion>3.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Media.PathSegment</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Przedstawia Łuk eliptyczny między dwoma punktami.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj obiektu, aby przechowywać <xref:System.Windows.Media.ArcSegment> obiekty i inne segmenty. <xref:System.Windows.Media.PathFigure>  
  
 Łuk eliptyczny jest definiowany przy użyciu punktów początkowych i końcowych, typu x-i y-RADIUS, współczynnika rotacji osi x, wartości wskazującej, czy łuk powinien być większy niż 180 stopni i wartość opisującą kierunek rysowania łuku. <xref:System.Windows.Media.ArcSegment> Klasa nie zawiera właściwości punktu początkowego łuku; definiuje tylko punkt docelowy łuku, który reprezentuje. Punkt początkowy łuku jest bieżącym punktem, <xref:System.Windows.Media.PathFigure> do <xref:System.Windows.Media.ArcSegment> którego jest dodawany.  
  
 Na poniższych ilustracjach przedstawiono różne ustawienia punktu końcowego <xref:System.Windows.Media.ArcSegment.Size%2A>, i <xref:System.Windows.Media.ArcSegment.RotationAngle%2A> .  
  
 ![ArcSegments z różnymi ustawieniami punktu] (~/add/media/arcsegment-point.png "ArcSegments z różnymi ustawieniami punktu")  
  
 ![ArcSegments z różnymi ustawieniami rozmiaru] (~/add/media/arcsegment-size.png "ArcSegments z różnymi ustawieniami rozmiaru")  
  
 ![ArcSegments z różnymi ustawieniami RotationAngle] (~/add/media/arcsegment-rotationangle.png "ArcSegments z różnymi ustawieniami RotationAngle")  
  
## <a name="islargearc-and-sweepdirection"></a>IsLargeArc i SweepDirection  
 W przypadku większości łuków określonego położenia, rozmiaru i obrotu istnieją cztery różne łuki, które mogą być narysowane; właściwości <xref:System.Windows.Media.ArcSegment.IsLargeArc%2A> i<xref:System.Windows.Media.ArcSegment.SweepDirection%2A> wskazują, którego łuku użyć.  
  
 Z czterech łuku kandydujących, dwa reprezentują duże łuki z wychyleniami 180 stopni lub więcej, a dwa przedstawiają mniejsze łuki z odchyleniami o wielkości 180 stopni lub mniej. Jeśli <xref:System.Windows.Media.ArcSegment.IsLargeArc%2A> `false`jest `true`, wybierany jest jeden z dwóch większych odchylenia łuku; w przeciwnym razie, jeśli jest, wybierany jest jeden z mniejszych łuków. Pozostałe dwa kandydatów łuku są rysowane w innym kierunku: <xref:System.Windows.Media.SweepDirection.Counterclockwise> lub. <xref:System.Windows.Media.SweepDirection.Clockwise> <xref:System.Windows.Media.ArcSegment.SweepDirection%2A> Właściwość określa, która z nich ma być używana.  
  
 Na poniższych ilustracjach przedstawiono <xref:System.Windows.Media.ArcSegment.IsLargeArc%2A> różne <xref:System.Windows.Media.ArcSegment.SweepDirection%2A> i ustawienia.  
  
 ![ArcSegments z różnymi ustawieniami IsLargeArc] (~/add/media/arcsegment-islargearc.png "ArcSegments z różnymi ustawieniami IsLargeArc")  
ArcSegment obiektów z różnymi ustawieniami IsLargeArc  
  
 ![ArcSegments z różnymi ustawieniami SweepDirection] (~/add/media/arcsegment-sweepdirection.png "ArcSegments z różnymi ustawieniami SweepDirection")  
ArcSegment obiektów z różnymi ustawieniami SweepDirection  
  
## <a name="freezable-features"></a>Funkcje freezable  
 <xref:System.Windows.Media.ArcSegment> Jest<xref:System.Windows.Freezable> typem obiektu. Aby uzyskać informacje <xref:System.Windows.Freezable> o funkcjach, takich jak zamrażanie i klonowanie, zobacz [Omówienie obiektów Freezable](~/docs/framework/wpf/advanced/freezable-objects-overview.md).  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Media.PathFigure" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Media.ArcSegment" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Klasa definiuje tylko punkt docelowy łuku <xref:System.Windows.Media.PathFigure>, który reprezentuje; punkt początkowy łuku jest bieżącym punktem, do którego <xref:System.Windows.Media.ArcSegment> zostanie dodany. <xref:System.Windows.Media.ArcSegment>  
  
 W przypadku większości łukówów eliptycznych o określonej pozycji, rozmiarze i obrocie istnieją cztery różne łuki, które mogą być narysowane; parametry `largeArc` i`sweepDirection` wskazują, których łuku użyć.  
  
 Z czterech łuku kandydujących, dwa reprezentują duże łuki z wychyleniami 180 stopni lub więcej, a dwa przedstawiają mniejsze łuki z odchyleniami o wielkości 180 stopni lub mniej. Jeśli `largeArc` `largeArc` `false`jest `true`, wybierany jest jeden z dwóch większych odchylenia łuku; w przeciwnym razie, jeśli jest, wybierany jest jeden z mniejszych łuków.  
  
 Jeśli `sweepDirection` jest<xref:System.Windows.Media.SweepDirection.Clockwise>, łuk jest rysowany w kierunku o dodatnim kącie. Jeśli `sweepDirection` jest<xref:System.Windows.Media.SweepDirection.Counterclockwise>, łuk jest rysowany w kierunku kątu ujemnego.  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ArcSegment ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.ArcSegment.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ArcSegment();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Media.ArcSegment" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Klasa definiuje tylko punkt docelowy łuku <xref:System.Windows.Media.PathFigure>, który reprezentuje; punkt początkowy łuku jest bieżącym punktem, do którego <xref:System.Windows.Media.ArcSegment> zostanie dodany. <xref:System.Windows.Media.ArcSegment>  
  
 W przypadku większości łukówów eliptycznych o określonej pozycji, rozmiarze i obrocie istnieją cztery różne łuki, które mogą być narysowane; parametry `largeArc` i`sweepDirection` wskazują, których łuku użyć.  
  
 Z czterech łuku kandydujących, dwa reprezentują duże łuki z wychyleniami 180 stopni lub więcej, a dwa przedstawiają mniejsze łuki z odchyleniami o wielkości 180 stopni lub mniej. Jeśli `largeArc` `largeArc` `false`jest `true`, wybierany jest jeden z dwóch większych odchylenia łuku; w przeciwnym razie, jeśli jest, wybierany jest jeden z mniejszych łuków.  
  
 Jeśli `sweepDirection` jest<xref:System.Windows.Media.SweepDirection.Clockwise>, łuk jest rysowany w kierunku o dodatnim kącie. Jeśli `sweepDirection` jest<xref:System.Windows.Media.SweepDirection.Counterclockwise>, łuk jest rysowany w kierunku kątu ujemnego.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ArcSegment (System.Windows.Point point, System.Windows.Size size, double rotationAngle, bool isLargeArc, System.Windows.Media.SweepDirection sweepDirection, bool isStroked);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Windows.Point point, valuetype System.Windows.Size size, float64 rotationAngle, bool isLargeArc, valuetype System.Windows.Media.SweepDirection sweepDirection, bool isStroked) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.ArcSegment.#ctor(System.Windows.Point,System.Windows.Size,System.Double,System.Boolean,System.Windows.Media.SweepDirection,System.Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ArcSegment(System::Windows::Point point, System::Windows::Size size, double rotationAngle, bool isLargeArc, System::Windows::Media::SweepDirection sweepDirection, bool isStroked);" />
      <MemberSignature Language="F#" Value="new System.Windows.Media.ArcSegment : System.Windows.Point * System.Windows.Size * double * bool * System.Windows.Media.SweepDirection * bool -&gt; System.Windows.Media.ArcSegment" Usage="new System.Windows.Media.ArcSegment (point, size, rotationAngle, isLargeArc, sweepDirection, isStroked)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="point" Type="System.Windows.Point" />
        <Parameter Name="size" Type="System.Windows.Size" />
        <Parameter Name="rotationAngle" Type="System.Double" />
        <Parameter Name="isLargeArc" Type="System.Boolean" />
        <Parameter Name="sweepDirection" Type="System.Windows.Media.SweepDirection" />
        <Parameter Name="isStroked" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="point">Punkt docelowy łuku; punkt początkowy łuku jest definiowany jako bieżący punkt, <see cref="T:System.Windows.Media.PathFigure" /> do <see cref="T:System.Windows.Media.ArcSegment" /> którego jest dodawany.</param>
        <param name="size">Wartości x i y promienia łuku. Wartość x-RADIUS jest określana przez <see cref="T:System.Windows.Size" /> <see cref="P:System.Windows.Size.Width" /> Właściwość struktury, a wartość y- <see cref="T:System.Windows.Size" /> RADIUS jest <see cref="P:System.Windows.Size.Height" /> określana przez właściwość struktury.</param>
        <param name="rotationAngle">Obrót osi x elipsy.</param>
        <param name="isLargeArc">Czy łuk powinien być większy niż 180 stopni.</param>
        <param name="sweepDirection">Ustaw, aby narysować łuk w kierunku dodatnim; <see cref="F:System.Windows.Media.SweepDirection.Counterclockwise" /> ustaw, aby narysować łuk w kierunku kąta ujemnego. <see cref="F:System.Windows.Media.SweepDirection.Clockwise" /></param>
        <param name="isStroked">Ustaw <c>wartość true</c> , aby pociągnięcia łuk, <see cref="T:System.Windows.Media.Pen" /> gdy jest używany do renderowania segmentu; w przeciwnym razie, <c>Fałsz</c>.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Media.ArcSegment" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Klasa definiuje tylko punkt docelowy łuku <xref:System.Windows.Media.PathFigure>, który reprezentuje; punkt początkowy łuku jest bieżącym punktem, do którego <xref:System.Windows.Media.ArcSegment> zostanie dodany. <xref:System.Windows.Media.ArcSegment>  
  
 W przypadku większości łukówów eliptycznych o określonej pozycji, rozmiarze i obrocie istnieją cztery różne łuki, które mogą być narysowane; parametry `largeArc` i`sweepDirection` wskazują, których łuku użyć.  
  
 Z czterech łuku kandydujących, dwa reprezentują duże łuki z wychyleniami 180 stopni lub więcej, a dwa przedstawiają mniejsze łuki z odchyleniami o wielkości 180 stopni lub mniej. Jeśli `largeArc` `largeArc` `false`jest `true`, wybierany jest jeden z dwóch większych odchylenia łuku; w przeciwnym razie, jeśli jest, wybierany jest jeden z mniejszych łuków.  
  
 Jeśli `sweepDirection` jest<xref:System.Windows.Media.SweepDirection.Clockwise>, łuk jest rysowany w kierunku o dodatnim kącie. Jeśli `sweepDirection` jest<xref:System.Windows.Media.SweepDirection.Counterclockwise>, łuk jest rysowany w kierunku kątu ujemnego.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Clone">
      <MemberSignature Language="C#" Value="public System.Windows.Media.ArcSegment Clone ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Media.ArcSegment Clone() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.ArcSegment.Clone" />
      <MemberSignature Language="VB.NET" Value="Public Function Clone () As ArcSegment" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Media::ArcSegment ^ Clone();" />
      <MemberSignature Language="F#" Value="override this.Clone : unit -&gt; System.Windows.Media.ArcSegment" Usage="arcSegment.Clone " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.ArcSegment</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Tworzy modyfikowalny klon tego <see cref="T:System.Windows.Media.ArcSegment" />elementu, tworząc głębokie kopie wartości tego obiektu. Podczas kopiowania właściwości zależności ta metoda kopiuje odwołania do zasobów i powiązania danych (ale mogą nie być już rozpoznawane), ale nie ma animacji ani ich bieżących wartości.</summary>
        <returns>Modyfikowalny klon bieżącego obiektu. <see cref="P:System.Windows.Freezable.IsFrozen" /> Właściwość sklonowanego obiektu <see langword="false" /> będzie <see cref="P:System.Windows.Freezable.IsFrozen" /> nawet wtedy, gdy właściwość źródła była<see langword="true." /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda służy do tworzenia modyfikowalnych kopii obiektów zamrożonych <xref:System.Windows.Freezable> (lub dowolnego <xref:System.Windows.Freezable> obiektu). Dla wygody ta metoda zaciemnienia dziedziczonej wersji z silnie wpisaną implementacją.  
  
 Aby uzyskać więcej informacji, zobacz <xref:System.Windows.Freezable.Clone%2A?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CloneCurrentValue">
      <MemberSignature Language="C#" Value="public System.Windows.Media.ArcSegment CloneCurrentValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Media.ArcSegment CloneCurrentValue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.ArcSegment.CloneCurrentValue" />
      <MemberSignature Language="VB.NET" Value="Public Function CloneCurrentValue () As ArcSegment" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Media::ArcSegment ^ CloneCurrentValue();" />
      <MemberSignature Language="F#" Value="override this.CloneCurrentValue : unit -&gt; System.Windows.Media.ArcSegment" Usage="arcSegment.CloneCurrentValue " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.ArcSegment</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Tworzy modyfikowalny klon tego <see cref="T:System.Windows.Media.ArcSegment" /> obiektu, tworząc głębokie kopie bieżących wartości tego obiektu. Odwołania do zasobów, powiązania danych i animacje nie są kopiowane, ale ich bieżące wartości to.</summary>
        <returns>Modyfikowalny klon bieżącego obiektu. <see cref="P:System.Windows.Freezable.IsFrozen" /> Właściwość sklonowanego obiektu <see langword="false" /> będzie <see cref="P:System.Windows.Freezable.IsFrozen" /> nawet wtedy, gdy właściwość źródła była <see langword="true" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda służy do tworzenia modyfikowalnych kopii obiektów zamrożonych <xref:System.Windows.Freezable> (lub dowolnego <xref:System.Windows.Freezable> obiektu). Dla wygody ta metoda zaciemnienia dziedziczonej wersji z silnie wpisaną implementacją.  
  
 Aby uzyskać więcej informacji, zobacz <xref:System.Windows.Freezable.CloneCurrentValue%2A?displayProperty=nameWithType>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateInstanceCore">
      <MemberSignature Language="C#" Value="protected override System.Windows.Freezable CreateInstanceCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Freezable CreateInstanceCore() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Media.ArcSegment.CreateInstanceCore" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateInstanceCore () As Freezable" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Freezable ^ CreateInstanceCore();" />
      <MemberSignature Language="F#" Value="override this.CreateInstanceCore : unit -&gt; System.Windows.Freezable" Usage="arcSegment.CreateInstanceCore " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Freezable</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLargeArc">
      <MemberSignature Language="C#" Value="public bool IsLargeArc { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsLargeArc" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.ArcSegment.IsLargeArc" />
      <MemberSignature Language="VB.NET" Value="Public Property IsLargeArc As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsLargeArc { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.IsLargeArc : bool with get, set" Usage="System.Windows.Media.ArcSegment.IsLargeArc" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy łuk powinien być większy niż 180 stopni.</summary>
        <value><see langword="true" />Jeśli łuk powinien być większy niż 180 stopni; w przeciwnym razie. <see langword="false" /> Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W przypadku większości łuków określonego położenia, rozmiaru i obrotu istnieją cztery różne łuki, które mogą być narysowane; właściwości <xref:System.Windows.Media.ArcSegment.IsLargeArc%2A> i<xref:System.Windows.Media.ArcSegment.SweepDirection%2A> wskazują, którego łuku użyć.  
  
 Z czterech łuku kandydujących, dwa reprezentują duże łuki z wychyleniami 180 stopni lub więcej, a dwa przedstawiają mniejsze łuki z odchyleniami o wielkości 180 stopni lub mniej. Jeśli <xref:System.Windows.Media.ArcSegment.IsLargeArc%2A> `false`jest `true`, wybierany jest jeden z dwóch większych odchylenia łuku; w przeciwnym razie, jeśli jest, wybierany jest jeden z mniejszych łuków. Pozostałe dwa kandydatów łuku są rysowane w innym kierunku: <xref:System.Windows.Media.SweepDirection.Counterclockwise> lub. <xref:System.Windows.Media.SweepDirection.Clockwise> <xref:System.Windows.Media.ArcSegment.SweepDirection%2A> Właściwość określa, która z nich ma być używana.  
  
 Na poniższej ilustracji przedstawiono dwa łuki eliptyczne, które są identyczne z wyjątkiem <xref:System.Windows.Media.ArcSegment.IsLargeArc%2A> ich ustawień.  
  
 ![ArcSegments z różnymi ustawieniami IsLargeArc] (~/add/media/arcsegment-islargearc.png "ArcSegments z różnymi ustawieniami IsLargeArc")  
ArcSegment obiektów z różnymi ustawieniami IsLargeArc  
  
<a name="dependencyPropertyInfo_IsLargeArc"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.Media.ArcSegment.IsLargeArcProperty>|  
|Właściwości metadanych ustawione na`true`|Brak|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsLargeArcProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty IsLargeArcProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty IsLargeArcProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Media.ArcSegment.IsLargeArcProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly IsLargeArcProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ IsLargeArcProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable IsLargeArcProperty : System.Windows.DependencyProperty" Usage="System.Windows.Media.ArcSegment.IsLargeArcProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje właściwość <see cref="P:System.Windows.Media.ArcSegment.IsLargeArc" /> zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Point">
      <MemberSignature Language="C#" Value="public System.Windows.Point Point { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Point Point" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.ArcSegment.Point" />
      <MemberSignature Language="VB.NET" Value="Public Property Point As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Point Point { System::Windows::Point get(); void set(System::Windows::Point value); };" />
      <MemberSignature Language="F#" Value="member this.Point : System.Windows.Point with get, set" Usage="System.Windows.Media.ArcSegment.Point" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Point</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia punkt końcowy łuku eliptycznego.</summary>
        <value>Punkt, do którego jest rysowany łuk. Wartość domyślna to (0, 0).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Klasa definiuje tylko punkt docelowy łuku, który reprezentuje; punkt początkowy łuku jest bieżącym punktem, <xref:System.Windows.Media.PathFigure> do którego <xref:System.Windows.Media.ArcSegment> jest dodawany. <xref:System.Windows.Media.ArcSegment>  
  
 Jeśli punkt początkowy i punkt końcowy segmentu łuku są takie same, nie jest rysowany żaden łuk.  
  
 W przypadku większości łuków określonego położenia, rozmiaru i obrotu istnieją cztery różne łuki, które mogą być narysowane; właściwości <xref:System.Windows.Media.ArcSegment.IsLargeArc%2A> i<xref:System.Windows.Media.ArcSegment.SweepDirection%2A> wskazują, którego łuku użyć.  
  
 Z czterech łuku kandydujących, dwa reprezentują duże łuki z wychyleniami 180 stopni lub więcej, a dwa przedstawiają mniejsze łuki z odchyleniami o wielkości 180 stopni lub mniej. Jeśli <xref:System.Windows.Media.ArcSegment.IsLargeArc%2A> `false`jest `true`, wybierany jest jeden z dwóch większych odchylenia łuku; w przeciwnym razie, jeśli jest, wybierany jest jeden z mniejszych łuków. Pozostałe dwa kandydatów łuku są rysowane w innym kierunku: <xref:System.Windows.Media.SweepDirection.Counterclockwise> lub. <xref:System.Windows.Media.SweepDirection.Clockwise> <xref:System.Windows.Media.ArcSegment.SweepDirection%2A> Właściwość określa, która z nich ma być używana.  
  
 Na poniższej ilustracji przedstawiono kilka łuków eliptycznych, które są identyczne z <xref:System.Windows.Media.ArcSegment.Point%2A> wyjątkiem ich ustawień.  
  
 ![ArcSegments z różnymi ustawieniami punktu] (~/add/media/arcsegment-point.png "ArcSegments z różnymi ustawieniami punktu")  
Kilka obiektów ArcSegment z różnymi ustawieniami punktu  
  
<a name="dependencyPropertyInfo_Point"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.Media.ArcSegment.PointProperty>|  
|Właściwości metadanych ustawione na`true`|Brak|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PointProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty PointProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty PointProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Media.ArcSegment.PointProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly PointProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ PointProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable PointProperty : System.Windows.DependencyProperty" Usage="System.Windows.Media.ArcSegment.PointProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje właściwość <see cref="P:System.Windows.Media.ArcSegment.Point" /> zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RotationAngle">
      <MemberSignature Language="C#" Value="public double RotationAngle { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance float64 RotationAngle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.ArcSegment.RotationAngle" />
      <MemberSignature Language="VB.NET" Value="Public Property RotationAngle As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property double RotationAngle { double get(); void set(double value); };" />
      <MemberSignature Language="F#" Value="member this.RotationAngle : double with get, set" Usage="System.Windows.Media.ArcSegment.RotationAngle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia liczbę (w stopniach), przez którą wielokropek jest obracany wokół osi x.</summary>
        <value>Wartość (w stopniach), o którą Elipsa została obrócona wokół osi x. Wartość domyślna to 0.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Na poniższej ilustracji przedstawiono kilka łuków eliptycznych, które są identyczne z <xref:System.Windows.Media.ArcSegment.RotationAngle%2A> wyjątkiem ich ustawień.  
  
 ![ArcSegments z różnymi ustawieniami RotationAngle] (~/add/media/arcsegment-rotationangle.png "ArcSegments z różnymi ustawieniami RotationAngle")  
Kilka obiektów ArcSegment z różnymi ustawieniami RotationAngle  
  
 Należy pamiętać, że jeśli szerokość i wysokość łuku są takie same, ustawienie tej właściwości nie ma żadnego efektu.  
  
<a name="dependencyPropertyInfo_RotationAngle"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.Media.ArcSegment.RotationAngleProperty>|  
|Właściwości metadanych ustawione na`true`|Brak|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RotationAngleProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty RotationAngleProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty RotationAngleProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Media.ArcSegment.RotationAngleProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly RotationAngleProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ RotationAngleProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable RotationAngleProperty : System.Windows.DependencyProperty" Usage="System.Windows.Media.ArcSegment.RotationAngleProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje właściwość <see cref="P:System.Windows.Media.ArcSegment.RotationAngle" /> zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Size">
      <MemberSignature Language="C#" Value="public System.Windows.Size Size { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Size Size" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.ArcSegment.Size" />
      <MemberSignature Language="VB.NET" Value="Public Property Size As Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Size Size { System::Windows::Size get(); void set(System::Windows::Size value); };" />
      <MemberSignature Language="F#" Value="member this.Size : System.Windows.Size with get, set" Usage="System.Windows.Media.ArcSegment.Size" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość x-i y-promieniowy łuku jako <see cref="T:System.Windows.Size" /> strukturę.</summary>
        <value><see cref="T:System.Windows.Size" /> Struktura opisująca wartości x i y promienia łuku eliptycznego. Właściwość Structure określa wartość właściwości x-RADIUS łuku; jej <see cref="P:System.Windows.Size.Height" /> Właściwość określa promień łuku (y). <see cref="T:System.Windows.Size" /> <see cref="P:System.Windows.Size.Width" /> Wartość domyślna to 0, 0.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Na poniższej ilustracji przedstawiono kilka łuków eliptycznych, które są identyczne z <xref:System.Windows.Media.ArcSegment.Size%2A> wyjątkiem ich ustawień.  
  
 ![ArcSegments z różnymi ustawieniami rozmiaru] (~/add/media/arcsegment-size.png "ArcSegments z różnymi ustawieniami rozmiaru")  
Kilka obiektów ArcSegment z różnymi ustawieniami rozmiaru  
  
<a name="dependencyPropertyInfo_Size"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.Media.ArcSegment.SizeProperty>|  
|Właściwości metadanych ustawione na`true`|Brak|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SizeProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty SizeProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty SizeProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Media.ArcSegment.SizeProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly SizeProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ SizeProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable SizeProperty : System.Windows.DependencyProperty" Usage="System.Windows.Media.ArcSegment.SizeProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje właściwość <see cref="P:System.Windows.Media.ArcSegment.Size" /> zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SweepDirection">
      <MemberSignature Language="C#" Value="public System.Windows.Media.SweepDirection SweepDirection { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Media.SweepDirection SweepDirection" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Media.ArcSegment.SweepDirection" />
      <MemberSignature Language="VB.NET" Value="Public Property SweepDirection As SweepDirection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Media::SweepDirection SweepDirection { System::Windows::Media::SweepDirection get(); void set(System::Windows::Media::SweepDirection value); };" />
      <MemberSignature Language="F#" Value="member this.SweepDirection : System.Windows.Media.SweepDirection with get, set" Usage="System.Windows.Media.ArcSegment.SweepDirection" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Media.SweepDirection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość określającą, czy łuk jest rysowany w <see cref="F:System.Windows.Media.SweepDirection.Clockwise" /> kierunku lub. <see cref="F:System.Windows.Media.SweepDirection.Counterclockwise" /></summary>
        <value>Wartość określająca kierunek rysowania łuku. Wartość domyślna to <see cref="F:System.Windows.Media.SweepDirection.Counterclockwise" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dla z danego <xref:System.Windows.Media.ArcSegment.Size%2A> <xref:System.Windows.Media.ArcSegment.Point%2A>, <xref:System.Windows.Media.ArcSegment.RotationAngle%2A>, punktu początkowego i końca jest możliwe cztery różne łuki. <xref:System.Windows.Media.ArcSegment> Określenie właściwości zmniejsza liczbę możliwych łuków do dwóch: łuk rysowany od punktu początkowego do końca <xref:System.Windows.Media.ArcSegment.Point%2A> w <xref:System.Windows.Media.SweepDirection.Clockwise> kierunku i łuku rysowany od punktu <xref:System.Windows.Media.SweepDirection.Counterclockwise> początkowego do punktu końcowego w kierunku. <xref:System.Windows.Media.ArcSegment.IsLargeArc%2A>  
  
 Na poniższej ilustracji przedstawiono dwa łuki eliptyczne, które są identyczne z wyjątkiem <xref:System.Windows.Media.ArcSegment.SweepDirection%2A> ich ustawień.  
  
 ![ArcSegments z różnymi ustawieniami SweepDirection] (~/add/media/arcsegment-sweepdirection.png "ArcSegments z różnymi ustawieniami SweepDirection")  
ArcSegment obiektów z różnymi ustawieniami SweepDirection  
  
<a name="dependencyPropertyInfo_SweepDirection"></a>   
## <a name="dependency-property-information"></a>Informacje dotyczące właściwości zależności  
  
|||  
|-|-|  
|Pole identyfikatora|<xref:System.Windows.Media.ArcSegment.SweepDirectionProperty>|  
|Właściwości metadanych ustawione na`true`|Brak|  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SweepDirectionProperty">
      <MemberSignature Language="C#" Value="public static readonly System.Windows.DependencyProperty SweepDirectionProperty;" />
      <MemberSignature Language="ILAsm" Value=".field public static initonly class System.Windows.DependencyProperty SweepDirectionProperty" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Media.ArcSegment.SweepDirectionProperty" />
      <MemberSignature Language="VB.NET" Value="Public Shared ReadOnly SweepDirectionProperty As DependencyProperty " />
      <MemberSignature Language="C++ CLI" Value="public: static initonly System::Windows::DependencyProperty ^ SweepDirectionProperty;" />
      <MemberSignature Language="F#" Value=" staticval mutable SweepDirectionProperty : System.Windows.DependencyProperty" Usage="System.Windows.Media.ArcSegment.SweepDirectionProperty" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>PresentationCore</AssemblyName>
        <AssemblyVersion>3.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.DependencyProperty</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Identyfikuje właściwość <see cref="P:System.Windows.Media.ArcSegment.SweepDirection" /> zależności.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>
