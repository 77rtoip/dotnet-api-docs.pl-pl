<Type Name="ColorDialog" FullName="System.Windows.Forms.ColorDialog">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3e0b985b4388cf4041127c5f4ee5005b50e7fd9d" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30703451" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ColorDialog : System.Windows.Forms.CommonDialog" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ColorDialog extends System.Windows.Forms.CommonDialog" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.ColorDialog" />
  <TypeSignature Language="VB.NET" Value="Public Class ColorDialog&#xA;Inherits CommonDialog" />
  <TypeSignature Language="C++ CLI" Value="public ref class ColorDialog : System::Windows::Forms::CommonDialog" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Forms.CommonDialog</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("Color")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Reprezentuje typowe okno dialogowe wyświetla dostępne kolory razem z formantami, które umożliwiają użytkownikowi zdefiniowanie kolorów niestandardowych.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dziedziczony element członkowski <xref:System.Windows.Forms.CommonDialog.ShowDialog%2A> musi wywoływane w celu utworzenia określonych wspólnych okno dialogowe. <xref:System.Windows.Forms.CommonDialog.HookProc%2A> może zostać zastąpiona w celu wykonania funkcji punktów zaczepienia pole określonego okna dialogowego. Użyj <xref:System.Windows.Forms.ColorDialog.Color%2A> można pobrać kolor wybrany przez użytkownika.  
  
 Podczas tworzenia wystąpienia <xref:System.Windows.Forms.ColorDialog>, niektóre właściwości odczytu/zapisu są ustawione na wartości początkowe. Aby uzyskać listę tych wartości, zobacz <xref:System.Windows.Forms.ColorDialog.%23ctor%2A> konstruktora.  
  
   
  
## Examples  
 Poniższy przykład przedstawia tworzenie nowych <xref:System.Windows.Forms.ColorDialog>. W tym przykładzie wymaga się, że metoda jest wywoływana z wewnątrz istniejącego formularza, który ma <xref:System.Windows.Forms.TextBox> i <xref:System.Windows.Forms.Button> dla niej.  
  
 [!code-cpp[Classic ColorDialog Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ColorDialog Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ColorDialog Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ColorDialog Example/CS/source.cs#1)]
 [!code-vb[Classic ColorDialog Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ColorDialog Example/VB/Form1.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.CommonDialog" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ColorDialog ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ColorDialog.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ColorDialog();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Forms.ColorDialog" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podczas tworzenia wystąpienia <xref:System.Windows.Forms.ColorDialog>, następujące właściwości odczytu/zapisu są ustawione na wartości początkowe.  
  
|Właściwość|Wartość początkowa|  
|--------------|-------------------|  
|<xref:System.Windows.Forms.ColorDialog.AllowFullOpen%2A>|`true`|  
|<xref:System.Windows.Forms.ColorDialog.AnyColor%2A>|`false`|  
|<xref:System.Windows.Forms.ColorDialog.Color%2A>|`Color.Black`|  
|<xref:System.Windows.Forms.ColorDialog.CustomColors%2A>|`null`|  
|<xref:System.Windows.Forms.ColorDialog.FullOpen%2A>|`false`|  
|<xref:System.Windows.Forms.ColorDialog.ShowHelp%2A>|`false`|  
|<xref:System.Windows.Forms.ColorDialog.SolidColorOnly%2A>|`false`|  
  
 Można zmienić wartości dla żadnego z tych właściwości, za pomocą oddzielnego wywołania do właściwości.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AllowFullOpen">
      <MemberSignature Language="C#" Value="public virtual bool AllowFullOpen { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowFullOpen" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ColorDialog.AllowFullOpen" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property AllowFullOpen As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool AllowFullOpen { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy użytkownik może użyć okna dialogowego do Definiuj kolory niestandardowe.</summary>
        <value>
          <see langword="true" /> Jeśli użytkownik może zdefiniować kolorów niestandardowych; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli wartość `false`, skojarzone przycisk w oknie dialogowym jest wyłączona, a użytkownik nie może uzyskać dostępu kolory niestandardowe kontrolki w oknie dialogowym.  
  
   
  
## Examples  
 Poniższy przykład przedstawia tworzenie nowych <xref:System.Windows.Forms.ColorDialog>. W tym przykładzie wymaga się, że metoda jest wywoływana z wewnątrz istniejącego formularza, który ma <xref:System.Windows.Forms.TextBox> i <xref:System.Windows.Forms.Button> dla niej.  
  
 [!code-cpp[Classic ColorDialog Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ColorDialog Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ColorDialog Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ColorDialog Example/CS/source.cs#1)]
 [!code-vb[Classic ColorDialog Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ColorDialog Example/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ColorDialog.FullOpen" />
      </Docs>
    </Member>
    <Member MemberName="AnyColor">
      <MemberSignature Language="C#" Value="public virtual bool AnyColor { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AnyColor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ColorDialog.AnyColor" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property AnyColor As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool AnyColor { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy okno dialogowe wyświetla wszystkie dostępne kolory w zestawie kolorów podstawowych.</summary>
        <value>
          <see langword="true" /> Jeśli okno dialogowe wyświetla wszystkie dostępne kolory w zestawie kolorów podstawowych; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu pokazuje inicjowanie <xref:System.Windows.Forms.ColorDialog> ustawienie <xref:System.Windows.Forms.ColorDialog.AnyColor%2A>, <xref:System.Windows.Forms.ColorDialog.AllowFullOpen%2A> właściwości. <xref:System.Windows.Forms.ColorDialog> Zrezygnować z włączenia pełny zestaw pozwala użytkownikowi na ustawianie koloru niestandardowego, ale można wyświetlić kolorów podstawowych. Podczas ustawiania <xref:System.Windows.Forms.ColorDialog.SolidColorOnly%2A> właściwości `false`, umożliwia wyświetlanie kolorów, które są kombinacji innych kolorów w systemach z 256 lub mniej kolorów. W przykładzie przedstawiono również ustawienie <xref:System.Windows.Forms.ColorDialog.ShowHelp%2A> właściwości i obsługa <xref:System.Windows.Forms.CommonDialog.HelpRequest> zdarzenia dla okna dialogowego. Aby uruchomić przykład, wklej następujący kod w postaci i wywołanie `InitializeColorDialog` metody w Konstruktorze formularza lub `Load` — metoda. W tym przykładzie wymaga, aby `Click` zdarzeń przycisku jest połączona z metody obsługi zdarzeń zdefiniowanych w przykładzie.  
  
 [!code-cpp[System.Windows.Forms.ColorDialogHelp#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ColorDialogHelp/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ColorDialogHelp#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ColorDialogHelp/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ColorDialogHelp#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ColorDialogHelp/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ColorDialog.CustomColors" />
      </Docs>
    </Member>
    <Member MemberName="Color">
      <MemberSignature Language="C#" Value="public System.Drawing.Color Color { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Color Color" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ColorDialog.Color" />
      <MemberSignature Language="VB.NET" Value="Public Property Color As Color" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Color Color { System::Drawing::Color get(); void set(System::Drawing::Color value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Color</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia kolor wybrany przez użytkownika.</summary>
        <value>Kolor wybrany przez użytkownika. Jeśli nie wybrano koloru, wartością domyślną jest czarny.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Kolor wybrany przez użytkownika w oknie dialogowym w czasie wykonywania, zgodnie z definicją w <xref:System.Drawing.Color> struktury.  
  
   
  
## Examples  
 Poniższy przykład przedstawia tworzenie nowych <xref:System.Windows.Forms.ColorDialog>. W tym przykładzie wymaga się, że metoda jest wywoływana z wewnątrz istniejącego formularza, który ma <xref:System.Windows.Forms.TextBox> i <xref:System.Windows.Forms.Button> dla niej.  
  
 [!code-cpp[Classic ColorDialog Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ColorDialog Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ColorDialog Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ColorDialog Example/CS/source.cs#1)]
 [!code-vb[Classic ColorDialog Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ColorDialog Example/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.Color" />
      </Docs>
    </Member>
    <Member MemberName="CustomColors">
      <MemberSignature Language="C#" Value="public int[] CustomColors { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32[] CustomColors" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ColorDialog.CustomColors" />
      <MemberSignature Language="VB.NET" Value="Public Property CustomColors As Integer()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;int&gt; ^ CustomColors { cli::array &lt;int&gt; ^ get(); void set(cli::array &lt;int&gt; ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia zestaw niestandardowych kolorów wyświetlany w oknie dialogowym.</summary>
        <value>Zestaw niestandardowych kolorów wyświetlany w oknie dialogowym. Wartość domyślna to <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użytkownicy mogą tworzyć własne zestaw kolorów niestandardowych. Kolorów te są zawarte w <xref:System.Int32> składa się z niezbędnych do utworzenia kolor wartości BGR (blue, zielony, czerwony). Aby uzyskać więcej informacji o strukturze tych danych zobacz <xref:System.Drawing.Color>.  
  
 Kolory niestandardowe można zdefiniować tylko w przypadku <xref:System.Windows.Forms.ColorDialog.AllowFullOpen%2A> ma ustawioną wartość `true`.  
  
   
  
## Examples  
 W poniższym przykładzie przedstawiono sposób dodawania tablicy typu <xref:System.Int32> reprezentujący kolorów niestandardowych do <xref:System.Windows.Forms.ColorDialog.CustomColors%2A>. W tym przykładzie wymaga, że kod jest uruchamiany z wewnątrz <xref:System.Windows.Forms.Form>.  
  
 [!code-cpp[System.Windows.Forms.ColorDialog CustomColors Property Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ColorDialog CustomColors Property Example/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ColorDialog CustomColors Property Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ColorDialog CustomColors Property Example/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ColorDialog CustomColors Property Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ColorDialog CustomColors Property Example/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ColorDialog.AnyColor" />
      </Docs>
    </Member>
    <Member MemberName="FullOpen">
      <MemberSignature Language="C#" Value="public virtual bool FullOpen { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool FullOpen" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ColorDialog.FullOpen" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property FullOpen As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool FullOpen { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy formanty używane do tworzenia kolorów niestandardowych są widoczne, gdy zostanie otwarte okno dialogowe</summary>
        <value>
          <see langword="true" /> Jeśli formanty niestandardowego koloru są dostępne, gdy zostanie otwarte okno dialogowe; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślnie przez formanty niestandardowego koloru nie są widoczne, po pierwszym otwarciu okna dialogowego. Należy kliknąć opcję `Custom Colors` przycisk umożliwiający ich wyświetlenie.  
  
> [!NOTE]
>  Jeśli <xref:System.Windows.Forms.ColorDialog.AllowFullOpen%2A> jest `false`, następnie <xref:System.Windows.Forms.ColorDialog.FullOpen%2A> nie ma wpływu.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.ColorDialog.AllowFullOpen" />
      </Docs>
    </Member>
    <Member MemberName="Instance">
      <MemberSignature Language="C#" Value="protected virtual IntPtr Instance { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Instance" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ColorDialog.Instance" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property Instance As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property IntPtr Instance { IntPtr get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera podstawowy dojście wystąpienia okna (wystąpienie HINSTANCE).</summary>
        <value>
          <see cref="T:System.IntPtr" /> Zawierający wartość wystąpienie HINSTANCE uchwytu okna.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  Ta metoda używa <xref:System.Security.Permissions.SecurityAction.LinkDemand?displayProperty=nameWithType> aby zapobiec jest wywoływany z kodu niezaufane; musi mieć tylko bezpośredniego obiektu wywołującego <xref:System.Security.Permissions.SecurityPermissionAttribute.UnmanagedCode%2A?displayProperty=nameWithType> uprawnienia. Jeśli kod może być wywołana z częściowo zaufanego kodu, nie przekazuj danych wejściowych użytkownika na <xref:System.Runtime.InteropServices.Marshal> metody bez sprawdzania poprawności klasy. Ważne ograniczenia dotyczące używania `LinkDemand` — członek, zobacz [żądanie vs. Żądanie LinkDemand](http://msdn.microsoft.com/library/1ab877f2-70f4-4e0d-8116-943999dfe8f5).  
  
 Ta właściwość używa również <xref:System.Security.Permissions.SecurityAction.InheritanceDemand?displayProperty=nameWithType> atrybutu zabezpieczeń; do zastąpienia tego elementu członkowskiego, klasa pochodna musi mieć `CustomPermission` uprawnienia.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">do pracy z kodem niezarządzanym. Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Options">
      <MemberSignature Language="C#" Value="protected virtual int Options { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Options" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ColorDialog.Options" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property Options As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property int Options { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartości w celu zainicjowania <see cref="T:System.Windows.Forms.ColorDialog" />.</summary>
        <value>Bitowe połączenie wartości wewnętrznej, która inicjuje <see cref="T:System.Windows.Forms.ColorDialog" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ColorDialog.Options%2A> Właściwość odpowiada flagi używaną do inicjalizacji okno dialogowe kolorów przy użyciu systemu Win32. Użyj właściwości <xref:System.Windows.Forms.ColorDialog> klasy do pobierania i ustawiania opcji.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public override void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ColorDialog.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Reset();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Resetuje wszystkie opcje do wartości domyślnych, ostatniego wybranego koloru na kolor czarny i kolory niestandardowe do wartości domyślnych.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Forms.ColorDialog" />
      </Docs>
    </Member>
    <Member MemberName="RunDialog">
      <MemberSignature Language="C#" Value="protected override bool RunDialog (IntPtr hwndOwner);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool RunDialog(native int hwndOwner) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ColorDialog.RunDialog(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function RunDialog (hwndOwner As IntPtr) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool RunDialog(IntPtr hwndOwner);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hwndOwner" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hwndOwner">Wartość, która reprezentuje uchwyt okna okno właściciela wspólnego okna dialogowego.</param>
        <summary>W przypadku przesłonięcia w klasie pochodnej, określa wspólne okno dialogowe.</summary>
        <returns>
          <see langword="true" /> Jeśli okno dialogowe został uruchomiony pomyślnie; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.CommonDialog.RunDialog(System.IntPtr)" />
      </Docs>
    </Member>
    <Member MemberName="ShowHelp">
      <MemberSignature Language="C#" Value="public virtual bool ShowHelp { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowHelp" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ColorDialog.ShowHelp" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property ShowHelp As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool ShowHelp { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy przycisk Pomoc jest wyświetlany w oknie dialogowym koloru.</summary>
        <value>
          <see langword="true" /> Jeśli przycisk Pomoc jest wyświetlany w oknie dialogowym. w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykładowy kod przedstawia tworzenie nowych <xref:System.Windows.Forms.ColorDialog>. W tym przykładzie wymaga się, że metoda jest wywoływana z wewnątrz istniejącego formularza, który ma <xref:System.Windows.Forms.TextBox> i <xref:System.Windows.Forms.Button> dla niej.  
  
 [!code-cpp[Classic ColorDialog Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ColorDialog Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ColorDialog Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ColorDialog Example/CS/source.cs#1)]
 [!code-vb[Classic ColorDialog Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ColorDialog Example/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SolidColorOnly">
      <MemberSignature Language="C#" Value="public virtual bool SolidColorOnly { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SolidColorOnly" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ColorDialog.SolidColorOnly" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property SolidColorOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool SolidColorOnly { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy okno dialogowe ogranicza użytkowników wybierania wyłącznie pełnych kolorów.</summary>
        <value>
          <see langword="true" /> Jeśli użytkownicy mogą wybrać wyłącznie pełnych kolorów w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość ma zastosowanie do systemów z 256 kolorów. W tych typach systemów niektóre kolory są kompozyty innych osób.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje inicjowanie <xref:System.Windows.Forms.ColorDialog> ustawienie <xref:System.Windows.Forms.ColorDialog.AnyColor%2A>, <xref:System.Windows.Forms.ColorDialog.AllowFullOpen%2A> właściwości. <xref:System.Windows.Forms.ColorDialog> Zrezygnować z włączenia pełny zestaw pozwala użytkownikowi na ustawianie koloru niestandardowego, ale można wyświetlić kolorów podstawowych. Podczas ustawiania <xref:System.Windows.Forms.ColorDialog.SolidColorOnly%2A> właściwości `false`, umożliwia wyświetlanie kolorów, które są kombinacji innych kolorów w systemach z 256 lub mniej kolorów. W przykładzie przedstawiono również ustawienie <xref:System.Windows.Forms.ColorDialog.ShowHelp%2A> właściwości i obsługa <xref:System.Windows.Forms.CommonDialog.HelpRequest> zdarzenia dla okna dialogowego. Aby uruchomić przykład, wklej następujący kod w postaci i wywołanie `InitializeColorDialog` metody w Konstruktorze formularza lub `Load` — metoda. W tym przykładzie wymaga `Click` zdarzeń przycisku jest połączona z metody obsługi zdarzeń zdefiniowanych w przykładzie.  
  
 [!code-cpp[System.Windows.Forms.ColorDialogHelp#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ColorDialogHelp/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ColorDialogHelp#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ColorDialogHelp/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ColorDialogHelp#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ColorDialogHelp/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ColorDialog.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca ciąg reprezentujący <see cref="T:System.Windows.Forms.ColorDialog" />.</summary>
        <returns>A <see cref="T:System.String" /> reprezentujący bieżącą <see cref="T:System.Windows.Forms.ColorDialog" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zwracany ciąg zawiera typ i wartość <xref:System.Windows.Forms.ColorDialog.Color%2A> właściwości.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>