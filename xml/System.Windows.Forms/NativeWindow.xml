<Type Name="NativeWindow" FullName="System.Windows.Forms.NativeWindow">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b630f0b25c5228ede23f6c9148474edc66d269bd" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69183004" /></Metadata><TypeSignature Language="C#" Value="public class NativeWindow : MarshalByRefObject, System.Windows.Forms.IWin32Window" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi NativeWindow extends System.MarshalByRefObject implements class System.Windows.Forms.IWin32Window" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.NativeWindow" />
  <TypeSignature Language="VB.NET" Value="Public Class NativeWindow&#xA;Inherits MarshalByRefObject&#xA;Implements IWin32Window" />
  <TypeSignature Language="C++ CLI" Value="public ref class NativeWindow : MarshalByRefObject, System::Windows::Forms::IWin32Window" />
  <TypeSignature Language="F#" Value="type NativeWindow = class&#xA;    inherit MarshalByRefObject&#xA;    interface IWin32Window" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.Forms.IWin32Window</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Zapewnia hermetyzację dolnego poziomu uchwytu okna i procedurę okna.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta klasa automatycznie zarządza tworzeniem i rejestracją klas okien.  
  
 Okno nie kwalifikuje się do wyrzucania elementów bezużytecznych, gdy jest skojarzone z uchwytem okna. Aby zapewnić prawidłowe wyrzucanie elementów bezużytecznych, uchwyty muszą <xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A> zostać zniszczone <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>ręcznie przy użyciu lub wydane za pomocą.  
  
> [!NOTE]
>  <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> Metoda jest wywoływana, gdy komunikat WM_NCDESTROY jest przetwarzany. Oznacza to, że istnieją przypadki, w których nie jest konieczne ręczne wywoływanie <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>, ale jest to dobre rozwiązanie.  
  
 <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> <xref:System.Windows.Forms.NativeWindow.Handle%2A> <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> <xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A>Klasa zawiera następujące właściwości i metody do zarządzania dojściami:,,, i. <xref:System.Windows.Forms.NativeWindow>  
  
   
  
## Examples  
 Poniższy przykład kodu ilustruje przechwycenie komunikatów systemu operacyjnego w procedurze okna i utworzenie okna z określoną nazwą klasy okna systemu operacyjnego. Przykład tworzy dwie klasy dziedziczące po tym elemencie <xref:System.Windows.Forms.NativeWindow> .  
  
 Klasa przechwytuje do procedury okna formularza przekazaną do konstruktora i <xref:System.Windows.Forms.NativeWindow.WndProc%2A> przesłania metodę, aby przechwycić `WM_ACTIVATEAPP` komunikat okna. `MyNativeWindowListener` Klasa pokazuje użycie <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> metod i <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> , aby zidentyfikować uchwyt okna, który <xref:System.Windows.Forms.NativeWindow> będzie używany. Dojście jest przypisywane na podstawie <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType> zdarzeń <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType> i. Po odebraniu komunikatu w `form1.ApplicationActivated` oknieKlasawywołujemetodę.`WM_ACTIVATEAPP`  
  
 Klasa tworzy nowe okno <xref:System.Windows.Forms.CreateParams.ClassName%2A> z ustawionym na `BUTTON`. `MyNativeWindow` Klasa ilustruje użycie <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> metody i <xref:System.Windows.Forms.NativeWindow.WndProc%2A> przesłanianie metody do przechwycenia komunikatów okna, które są odbierane.  
  
 [!code-cpp[NativeWindow#1](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#1)]
 [!code-csharp[NativeWindow#1](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#1)]
 [!code-vb[NativeWindow#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Security.Permissions.SecurityPermission">dla bezpośredniego wywołującego wywołanie kodu niezarządzanego. Skojarzone Wyliczenie:<see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
    <altmember cref="T:System.IntPtr" />
    <altmember cref="T:System.Windows.Forms.Application" />
    <altmember cref="T:System.Windows.Forms.AxHost" />
    <altmember cref="T:System.Windows.Forms.Control" />
    <altmember cref="T:System.Windows.Forms.Form" />
    <altmember cref="T:System.Windows.Forms.IWin32Window" />
    <altmember cref="T:System.Windows.Forms.Message" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NativeWindow ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; NativeWindow();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje wystąpienie <see cref="T:System.Windows.Forms.NativeWindow" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jest to domyślny <xref:System.Windows.Forms.NativeWindow.%23ctor%2A> Konstruktor dostarczany przez kompilator. <xref:System.Windows.Forms.NativeWindow> Klasa ma także statyczny Konstruktor, który inicjuje obsługę komunikatów w całej domenie aplikacji i tabele skrótów.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
        <altmember cref="T:System.AppDomain" />
      </Docs>
    </Member>
    <Member MemberName="AssignHandle">
      <MemberSignature Language="C#" Value="public void AssignHandle (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AssignHandle(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AssignHandle (handle As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AssignHandle(IntPtr handle);" />
      <MemberSignature Language="F#" Value="member this.AssignHandle : nativeint -&gt; unit" Usage="nativeWindow.AssignHandle handle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Uchwyt do przypisania do tego okna.</param>
        <summary>Przypisuje dojście do tego okna.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.NativeWindow.WndProc%2A>przechwytuje komunikaty okna wysyłane do `handle` parametru. Użyj <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> , aby zresetować procedurę okna dojścia do domyślnej procedury okna.  
  
 Metoda wywołuje metodę w celu wskazania <xref:System.Windows.Forms.NativeWindow.Handle%2A> , że wartość właściwości została zmieniona. <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A>  
  
> [!NOTE]
>  Dojście do przypisania nie może znajdować się w innym procesie aplikacji.  
  
   
  
## Examples  
 Poniższy przykład kodu ilustruje przechwycenie komunikatów okna systemu operacyjnego w procedurze okna. Przykład tworzy klasę, która dziedziczy z <xref:System.Windows.Forms.NativeWindow> , aby to osiągnąć.  
  
 Klasa przechwytuje do procedury okna formularza przekazaną do konstruktora i <xref:System.Windows.Forms.NativeWindow.WndProc%2A> przesłania `WM_ACTIVATEAPP` metodę, aby przechwycić komunikat okna. `MyNativeWindowListener` Klasa pokazuje użycie <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> metod i <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> , aby <xref:System.Windows.Forms.NativeWindow> określić, które okno ma być używane. Dojście jest przypisane na podstawie <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType> zdarzeń i. <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType> Po odebraniu komunikatu w `form1.ApplicationActivated` oknieKlasawywołujemetodę.`WM_ACTIVATEAPP`  
  
 Ten kod jest fragmentem z przykładu przedstawionego w <xref:System.Windows.Forms.NativeWindow> przeglądzie klasy. Kod nie jest pokazywany na potrzeby zwięzłości. Zobacz <xref:System.Windows.Forms.NativeWindow> , aby uzyskać pełną listę kodu.  
  
 [!code-cpp[NativeWindow#2](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#2)]
 [!code-csharp[NativeWindow#2](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#2)]
 [!code-vb[NativeWindow#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">To okno ma już uchwyt.</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">Nie można pobrać procedury systemu Windows dla skojarzonego okna natywnego.</exception>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
      </Docs>
    </Member>
    <Member MemberName="CreateHandle">
      <MemberSignature Language="C#" Value="public virtual void CreateHandle (System.Windows.Forms.CreateParams cp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CreateHandle(class System.Windows.Forms.CreateParams cp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub CreateHandle (cp As CreateParams)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CreateHandle(System::Windows::Forms::CreateParams ^ cp);" />
      <MemberSignature Language="F#" Value="abstract member CreateHandle : System.Windows.Forms.CreateParams -&gt; unit&#xA;override this.CreateHandle : System.Windows.Forms.CreateParams -&gt; unit" Usage="nativeWindow.CreateHandle cp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cp" Type="System.Windows.Forms.CreateParams" />
      </Parameters>
      <Docs>
        <param name="cp">A <see cref="T:System.Windows.Forms.CreateParams" /> , który określa parametry tworzenia dla tego okna.</param>
        <summary>Tworzy okno i jego uchwyt z określonymi parametrami tworzenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Parametr określa wartości, które są przesyłane do natywnej metody Win32 `CreateWindowEx` w celu utworzenia okna i jego uchwytu. `cp`  
  
 Gdy pole nie `null`jest, nowo utworzone okno uchwytu okna dziedziczy z określonej klasy. <xref:System.Windows.Forms.CreateParams.ClassName%2A> Na przykład jeśli <xref:System.Windows.Forms.CreateParams.ClassName%2A> jest ustawiona na `BUTTON`, nowo utworzone okno jest oparte na klasie okna Win32 `BUTTON` . Właściwość obiektu musi być`null` lub odwoływać się do wystąpienia klasy, która została zadeklarowana jako struktura. <xref:System.Windows.Forms.CreateParams.ClassName%2A> <xref:System.Windows.Forms.CreateParams.Param%2A>  
  
 Ten kod jest fragmentem z przykładu przedstawionego w <xref:System.Windows.Forms.NativeWindow> przeglądzie klasy. Kod nie jest pokazywany na potrzeby zwięzłości. Zobacz <xref:System.Windows.Forms.NativeWindow> , aby uzyskać pełną listę kodu.  
  
> [!NOTE]
>  Podana nazwa klasy jest zarejestrowana w systemie operacyjnym.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje utworzenie okna z określoną nazwą klasy okna systemu operacyjnego. Przykład tworzy klasę, która dziedziczy z <xref:System.Windows.Forms.NativeWindow> , aby to osiągnąć.  
  
 Klasa tworzy nowe okno <xref:System.Windows.Forms.CreateParams.ClassName%2A> z ustawionym na `BUTTON`. `MyNativeWindow` Spowoduje to utworzenie okna przycisku Win32. Lokalizacja i rozmiar przycisku są ustawiane wraz z określeniem dodatkowych stylów okna. Klasa pokazuje, jak używać <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> metody i <xref:System.Windows.Forms.NativeWindow.WndProc%2A> przesłaniać metodę do przechwycenia komunikatów okna, które są odbierane. Chociaż przykład wyszukuje komunikat WM_ACTIVATEAPP, można go zastąpić w rzeczywistym programie komunikatami systemu Windows specyficznymi dla tworzonego typu.  
  
> [!NOTE]
>  Niektóre typy formantów wysyłają wiadomości okna do elementu nadrzędnego okna zamiast okna. Aby uzyskać więcej informacji, zobacz zestaw SDK platformy systemu Windows.  
  
 [!code-cpp[NativeWindow#3](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#3)]
 [!code-csharp[NativeWindow#3](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#3)]
 [!code-vb[NativeWindow#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException">Za mało zasobów systemu operacyjnego podczas próby utworzenia okna natywnego.</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">Natywny interfejs API systemu Windows nie może utworzyć określonego okna.</exception>
        <exception cref="T:System.InvalidOperationException">Dojście bieżącego okna natywnego zostało już przypisane; w wyjaśnieniu <see cref="P:System.Windows.Forms.NativeWindow.Handle" /> właściwość nie jest <see cref="F:System.IntPtr.Zero" />równa.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">w celu utworzenia okna najwyższego poziomu. To uprawnienie jest dostępne tylko wtedy, gdy styl okna nie jest obiektem podrzędnym lub okno nie ma elementu nadrzędnego. Skojarzone Wyliczenie:<see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="T:System.Windows.Forms.CreateParams" />
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
      </Docs>
    </Member>
    <Member MemberName="DefWndProc">
      <MemberSignature Language="C#" Value="public void DefWndProc (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DefWndProc(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.DefWndProc(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DefWndProc (ByRef m As Message)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DefWndProc(System::Windows::Forms::Message % m);" />
      <MemberSignature Language="F#" Value="member this.DefWndProc :  -&gt; unit" Usage="nativeWindow.DefWndProc m" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">Komunikat, który jest aktualnie przetwarzany.</param>
        <summary>Wywołuje domyślną procedurę okna skojarzoną z tym oknem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zazwyczaj Metoda jest wywoływana tylko w <xref:System.Windows.Forms.NativeWindow.DefWndProc%2A> przypadku przechwytywania komunikatów okna i powinna być taka sama jak domyślna procedura okna do obsługi wiadomości. <xref:System.Windows.Forms.NativeWindow.DefWndProc%2A>nie należy wywoływać, aby wysłać komunikat okna do okna; Wywołaj zamiast `SendMessage` tego funkcję Win32.  
  
 Wystąpił błąd podczas wywoływania <xref:System.Windows.Forms.NativeWindow.DefWndProc%2A> , <xref:System.Windows.Forms.NativeWindow.Handle%2A> gdy właściwość jest równa 0.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Zastąp tę metodę w klasie pochodnej, aby zaimplementować uogólnioną obsługę komunikatów niestandardowych dla określonego okna natywnego lub platformy <see cref="T:System.Windows.Forms.Control" />.NET Windows Forms. Przetwarzanie niestandardowe można wykonać przed, po lub zamiast wywołania implementacji klasy bazowej tej metody, która wykonuje standardowe przetwarzanie komunikatów.  
  
Z kolei Dodawanie dostosowanej obsługi komunikatów dla aplikacji może być realizowane za pomocą <see cref="M:System.Windows.Forms.Application.AddMessageFilter(System.Windows.Forms.IMessageFilter)" /> metody <see cref="T:System.Windows.Forms.Application" /> klasy.</para></block>
        <altmember cref="T:System.Windows.Forms.Message" />
        <altmember cref="M:System.Windows.Forms.Application.SetUnhandledExceptionMode(System.Windows.Forms.UnhandledExceptionMode)" />
        <altmember cref="M:System.Windows.Forms.Application.AddMessageFilter(System.Windows.Forms.IMessageFilter)" />
      </Docs>
    </Member>
    <Member MemberName="DestroyHandle">
      <MemberSignature Language="C#" Value="public virtual void DestroyHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DestroyHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub DestroyHandle ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void DestroyHandle();" />
      <MemberSignature Language="F#" Value="abstract member DestroyHandle : unit -&gt; unit&#xA;override this.DestroyHandle : unit -&gt; unit" Usage="nativeWindow.DestroyHandle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Niszczy okno i jego uchwyt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda niszczy okno skojarzone z <xref:System.Windows.Forms.NativeWindow.Handle%2A>, <xref:System.Windows.Forms.NativeWindow.Handle%2A> ustawia właściwość na <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> 0 i wywołuje metodę w celu odzwierciedlenia zmiany. Zazwyczaj wywoływany <xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A> jest tylko po wykonaniu okna natywnego.  
  
> [!NOTE]
>  <xref:System.Windows.Forms.NativeWindow> Klasa automatycznie niszczy skojarzone okno i zwolni swoje zasoby w odpowiedzi na komunikat WM_DESTROY.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~NativeWindow ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!NativeWindow ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="nativeWindow.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwalnia zasoby skojarzone z tym oknem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda usuwa klasę pochodną Win32 skojarzoną z bieżącym <xref:System.Windows.Forms.NativeWindow> wystąpieniem, zwalnia dojście i ogłasza komunikat WM_CLOSE w skojarzonym oknie. <xref:System.Windows.Forms.NativeWindow.Finalize%2A>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.NativeWindow.#ctor" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
      </Docs>
    </Member>
    <Member MemberName="FromHandle">
      <MemberSignature Language="C#" Value="public static System.Windows.Forms.NativeWindow FromHandle (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Forms.NativeWindow FromHandle(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.FromHandle(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromHandle (handle As IntPtr) As NativeWindow" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Forms::NativeWindow ^ FromHandle(IntPtr handle);" />
      <MemberSignature Language="F#" Value="static member FromHandle : nativeint -&gt; System.Windows.Forms.NativeWindow" Usage="System.Windows.Forms.NativeWindow.FromHandle handle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.NativeWindow</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Uchwyt do okna.</param>
        <summary>Pobiera okno skojarzone z określonym dojściem.</summary>
        <returns><see cref="T:System.Windows.Forms.NativeWindow" /> Skojarzono z określonym dojściem. Ta metoda zwraca <see langword="null" /> , gdy dojście nie ma skojarzonego okna.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli otrzymujesz uchwyt z innej metody, Użyj tej metody, aby pobrać okno skojarzone z dojściem. Uchwyt musi być już własnością innego <xref:System.Windows.Forms.NativeWindow> w bieżącym procesie; `null` w przeciwnym razie jest zwracany.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
      </Docs>
    </Member>
    <Member MemberName="Handle">
      <MemberSignature Language="C#" Value="public IntPtr Handle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Handle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.NativeWindow.Handle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Handle As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr Handle { IntPtr get(); };" />
      <MemberSignature Language="F#" Value="member this.Handle : nativeint" Usage="System.Windows.Forms.NativeWindow.Handle" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.Forms.IWin32Window.Handle</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera uchwyt dla tego okna.</summary>
        <value>Jeśli to się powiedzie, <see cref="T:System.IntPtr" /> reprezentuje dojście do skojarzonego macierzystego okna Win32; w przeciwnym razie, 0, jeśli żadne dojście nie jest skojarzone z oknem.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj tej metody podczas wywoływania metod interfejsu API systemu Windows, które wymagają uchwytu dla okna lub formantu.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje utworzenie okna z określoną nazwą klasy okna systemu operacyjnego. Przykład tworzy klasę, która dziedziczy z <xref:System.Windows.Forms.NativeWindow> , aby to osiągnąć. W przykładzie pokazano również przesłanianie <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> metody do powiadamiania <xref:System.Windows.Forms.NativeWindow.Handle%2A> o zmianach.  
  
 Klasa tworzy nowe okno <xref:System.Windows.Forms.CreateParams.ClassName%2A> z ustawionym przyciskiem. `MyNativeWindow` Spowoduje to utworzenie okna przycisku Win32. Lokalizacja i rozmiar przycisku są ustawiane wraz z określeniem dodatkowych stylów okna. Klasa pokazuje, jak używać <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> metody i <xref:System.Windows.Forms.NativeWindow.WndProc%2A> przesłaniać metodę do przechwycenia komunikatów okna, które są odbierane. Chociaż przykład wyszukuje komunikat WM_ACTIVATEAPP, można go zastąpić w rzeczywistym programie komunikatami systemu Windows specyficznymi dla tworzonego typu.  
  
> [!NOTE]
>  Niektóre typy formantów wysyłają wiadomości okna do elementu nadrzędnego okna zamiast okna. Aby uzyskać więcej informacji, zobacz zestaw SDK platformy systemu Windows.  
  
 [!code-cpp[NativeWindow#3](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#3)]
 [!code-csharp[NativeWindow#3](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#3)]
 [!code-vb[NativeWindow#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
      </Docs>
    </Member>
    <Member MemberName="OnHandleChange">
      <MemberSignature Language="C#" Value="protected virtual void OnHandleChange ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnHandleChange() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnHandleChange ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnHandleChange();" />
      <MemberSignature Language="F#" Value="abstract member OnHandleChange : unit -&gt; unit&#xA;override this.OnHandleChange : unit -&gt; unit" Usage="nativeWindow.OnHandleChange " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Określa metodę powiadamiania, która jest wywoływana po zmianie uchwytu okna.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda jest wywoływana, gdy wartość <xref:System.Windows.Forms.NativeWindow.Handle%2A> właściwości została zmieniona.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje utworzenie okna z określoną nazwą klasy okna systemu operacyjnego. Przykład tworzy klasę, która dziedziczy z <xref:System.Windows.Forms.NativeWindow> , aby to osiągnąć. W przykładzie pokazano również przesłanianie <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> metody do powiadamiania <xref:System.Windows.Forms.NativeWindow.Handle%2A> o zmianach.  
  
 Klasa tworzy nowe okno <xref:System.Windows.Forms.CreateParams.ClassName%2A> z ustawionym na `BUTTON`. `MyNativeWindow` Spowoduje to utworzenie okna przycisku Win32. Lokalizacja i rozmiar przycisku są ustawiane wraz z określeniem dodatkowych stylów okna. Klasa pokazuje, jak używać <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> metody i <xref:System.Windows.Forms.NativeWindow.WndProc%2A> przesłaniać metodę do przechwycenia komunikatów okna, które są odbierane. Chociaż przykład wyszukuje komunikat WM_ACTIVATEAPP, można go zastąpić w rzeczywistym programie komunikatami systemu Windows specyficznymi dla tworzonego typu.  
  
 Ten kod jest fragmentem z przykładu przedstawionego w <xref:System.Windows.Forms.NativeWindow> przeglądzie klasy. Kod nie jest pokazywany na potrzeby zwięzłości. Zobacz <xref:System.Windows.Forms.NativeWindow> , aby uzyskać pełną listę kodu.  
  
> [!NOTE]
>  Niektóre typy formantów wysyłają wiadomości okna do elementu nadrzędnego okna zamiast okna. Aby uzyskać więcej informacji, zobacz zestaw SDK platformy systemu Windows.  
  
 [!code-cpp[NativeWindow#3](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#3)]
 [!code-csharp[NativeWindow#3](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#3)]
 [!code-vb[NativeWindow#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Zastąp tę metodę, aby śledzić zmiany wprowadzone w dojściu do okna.</para></block>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)" />
      </Docs>
    </Member>
    <Member MemberName="OnThreadException">
      <MemberSignature Language="C#" Value="protected virtual void OnThreadException (Exception e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnThreadException(class System.Exception e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.OnThreadException(System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnThreadException (e As Exception)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnThreadException(Exception ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnThreadException : Exception -&gt; unit&#xA;override this.OnThreadException : Exception -&gt; unit" Usage="nativeWindow.OnThreadException e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.Exception" /> Określa wyjątek nieobsłużonego wątku.</param>
        <summary>Gdy jest zastępowany w klasie pochodnej, zarządza wyjątek nieobsłużonego wątku.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.Application.OnThreadException%2A> Zwykle obsługuje wyjątki wątków.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)" />
        <altmember cref="T:System.Windows.Forms.Application" />
      </Docs>
    </Member>
    <Member MemberName="ReleaseHandle">
      <MemberSignature Language="C#" Value="public virtual void ReleaseHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ReleaseHandle ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ReleaseHandle();" />
      <MemberSignature Language="F#" Value="abstract member ReleaseHandle : unit -&gt; unit&#xA;override this.ReleaseHandle : unit -&gt; unit" Usage="nativeWindow.ReleaseHandle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwalnia dojście skojarzone z tym oknem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie niszczy uchwytu okna. Zamiast tego ustawia procedurę okna dojścia do domyślnej procedury okna. Ustawia <xref:System.Windows.Forms.NativeWindow.Handle%2A> właściwość na 0 i wywołuje <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> , aby odzwierciedlić zmianę.  
  
 Okno automatycznie wywołuje tę metodę, Jeśli odbierze natywny komunikat Win32 WM_NCDESTROY, wskazując, że system Windows niszczy dojście.  
  
   
  
## Examples  
 Poniższy przykład kodu ilustruje przechwycenie komunikatów okna systemu operacyjnego w procedurze okna. Przykład tworzy klasę, która dziedziczy z <xref:System.Windows.Forms.NativeWindow> , aby to osiągnąć.  
  
 Klasa przechwytuje do procedury okna formularza przekazaną do konstruktora i <xref:System.Windows.Forms.NativeWindow.WndProc%2A> przesłania `WM_ACTIVATEAPP` metodę, aby przechwycić komunikat okna. `MyNativeWindowListener` Klasa pokazuje użycie <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> metod i <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> , aby zidentyfikować uchwyt okna, który <xref:System.Windows.Forms.NativeWindow> będzie używany. Dojście jest przypisywane na podstawie <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType> zdarzeń <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType> i. Po odebraniu komunikatu w `form1.ApplicationActivated` oknieKlasawywołujemetodę.`WM_ACTIVATEAPP`  
  
 Ten kod jest fragmentem z przykładu przedstawionego w <xref:System.Windows.Forms.NativeWindow> przeglądzie klasy. Kod nie jest pokazywany na potrzeby zwięzłości. Zobacz <xref:System.Windows.Forms.NativeWindow> , aby uzyskać pełną listę kodu.  
  
 [!code-cpp[NativeWindow#2](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#2)]
 [!code-csharp[NativeWindow#2](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#2)]
 [!code-vb[NativeWindow#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
      </Docs>
    </Member>
    <Member MemberName="WndProc">
      <MemberSignature Language="C#" Value="protected virtual void WndProc (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void WndProc(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub WndProc (ByRef m As Message)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void WndProc(System::Windows::Forms::Message % m);" />
      <MemberSignature Language="F#" Value="abstract member WndProc :  -&gt; unit&#xA;override this.WndProc :  -&gt; unit" Usage="nativeWindow.WndProc m" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m"><see cref="T:System.Windows.Forms.Message" /> Skojarzony z bieżącym komunikatem systemu Windows.</param>
        <summary>Wywołuje domyślną procedurę okna skojarzoną z tym oknem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda jest wywoływana, gdy komunikat okna jest wysyłany do uchwytu okna.  
  
   
  
## Examples  
 Poniższy przykład kodu ilustruje przechwycenie komunikatów okna systemu operacyjnego w procedurze okna. Przykład tworzy klasę, która dziedziczy z <xref:System.Windows.Forms.NativeWindow> , aby to osiągnąć.  
  
 Klasa przechwytuje do procedury okna formularza przekazaną do konstruktora i <xref:System.Windows.Forms.NativeWindow.WndProc%2A> przesłania metodę, aby przechwycić `WM_ACTIVATEAPP` komunikat okna. `MyNativeWindowListener` Klasa pokazuje użycie <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> metod i <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> , aby zidentyfikować uchwyt okna, który <xref:System.Windows.Forms.NativeWindow> będzie używany. Dojście jest przypisane na podstawie <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType> zdarzeń i. <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType> Po odebraniu komunikatu w `form1.ApplicationActivated` oknieKlasawywołujemetodę.`WM_ACTIVATEAPP`  
  
 Ten kod jest fragmentem z przykładu przedstawionego w <xref:System.Windows.Forms.NativeWindow> przeglądzie klasy. Kod nie jest pokazywany na potrzeby zwięzłości. Zobacz <xref:System.Windows.Forms.NativeWindow> , aby uzyskać pełną listę kodu.  
  
 [!code-cpp[NativeWindow#2](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#2)]
 [!code-csharp[NativeWindow#2](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#2)]
 [!code-vb[NativeWindow#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Zastąp tę metodę w celu zaimplementowania określonego przetwarzania komunikatów. Wywołanie <c>bazowe. WndProc</c> dla nieobsługiwanych komunikatów.</para></block>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="T:System.Windows.Forms.Message" />
        <altmember cref="M:System.Windows.Forms.Application.SetUnhandledExceptionMode(System.Windows.Forms.UnhandledExceptionMode)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnThreadException(System.Exception)" />
      </Docs>
    </Member>
  </Members>
</Type>
