<Type Name="NativeWindow" FullName="System.Windows.Forms.NativeWindow">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="1f08773771fb4a10a7de82ed774e9bbcb32dbf4e" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39979290" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class NativeWindow : MarshalByRefObject, System.Windows.Forms.IWin32Window" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi NativeWindow extends System.MarshalByRefObject implements class System.Windows.Forms.IWin32Window" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.NativeWindow" />
  <TypeSignature Language="VB.NET" Value="Public Class NativeWindow&#xA;Inherits MarshalByRefObject&#xA;Implements IWin32Window" />
  <TypeSignature Language="C++ CLI" Value="public ref class NativeWindow : MarshalByRefObject, System::Windows::Forms::IWin32Window" />
  <TypeSignature Language="F#" Value="type NativeWindow = class&#xA;    inherit MarshalByRefObject&#xA;    interface IWin32Window" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.Forms.IWin32Window</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Zapewnia niskiego poziomu hermetyzacji uchwyt okna i procedurę okna.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta klasa jest automatycznie zarządza Tworzenie klasy okien i rejestracji.  
  
 Okno jest nieodpowiedni dla wyrzucania elementów bezużytecznych, gdy jest on skojarzony z uchwyt okna. Aby zapewnić właściwe wyrzucania elementów bezużytecznych, dojścia musi albo zostać zniszczona, ręcznie przy użyciu <xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A> lub wydania przy użyciu <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>.  
  
> [!NOTE]
>  <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> Metoda jest wywoływana, gdy komunikat WM_NCDESTROY jest przetwarzany. Oznacza to, istnieją przypadki, w który, gdy jest konieczne ręcznego wywoływania <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>, ale jest dobrą praktyką, aby to zrobić.  
  
 <xref:System.Windows.Forms.NativeWindow> Klasa oferuje poniższe właściwości i metody do zarządzania obsługuje: <xref:System.Windows.Forms.NativeWindow.Handle%2A>, <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A>, <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A>, <xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A>, i <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje przechwytujący komunikaty okna systemu operacyjnego w procedurę okna i tworzenia okna o nazwie klasy okna określonego systemu operacyjnego. Przykład tworzy dwie klasy dziedziczące <xref:System.Windows.Forms.NativeWindow> , w tym celu.  
  
 `MyNativeWindowListener` Punkty zaczepienia do procedury okna w formularzu, który został przekazany do konstruktora klasy i zastępuje <xref:System.Windows.Forms.NativeWindow.WndProc%2A> metodę, aby przechwycić `WM_ACTIVATEAPP` komunikatów okien. Klasa prezentuje sposób użycia <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> i <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> metodami do identyfikowania uchwyt okna <xref:System.Windows.Forms.NativeWindow> użyje. Dojście jest przypisywanie na podstawie <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType> i <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType> zdarzenia. Gdy `WM_ACTIVATEAPP` odebraniu komunikatu w oknie wywołania klasy `form1.ApplicationActivated` metody.  
  
 `MyNativeWindow` Klasy tworzy nowe okno z <xref:System.Windows.Forms.CreateParams.ClassName%2A> równa `BUTTON`. Klasy, który demonstruje sposób użycia <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> metody i zastępowanie <xref:System.Windows.Forms.NativeWindow.WndProc%2A> metody intercept komunikatów okien, które są odbierane.  
  
 [!code-cpp[NativeWindow#1](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#1)]
 [!code-csharp[NativeWindow#1](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#1)]
 [!code-vb[NativeWindow#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Security.Permissions.SecurityPermission">do bezpośredniego obiektu wywołującego można wywoływać kod niezarządzany. Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
    <altmember cref="T:System.IntPtr" />
    <altmember cref="T:System.Windows.Forms.Application" />
    <altmember cref="T:System.Windows.Forms.AxHost" />
    <altmember cref="T:System.Windows.Forms.Control" />
    <altmember cref="T:System.Windows.Forms.Form" />
    <altmember cref="T:System.Windows.Forms.IWin32Window" />
    <altmember cref="T:System.Windows.Forms.Message" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NativeWindow ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; NativeWindow();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje wystąpienie <see cref="T:System.Windows.Forms.NativeWindow" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jest to opcja domyślna <xref:System.Windows.Forms.NativeWindow.%23ctor%2A> Konstruktor dostarczany przez kompilator. <xref:System.Windows.Forms.NativeWindow> Klasa ma także statyczny Konstruktor, który inicjuje programy obsługi komunikatów na poziomie domeny aplikacji i tabel skrótów.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
        <altmember cref="T:System.AppDomain" />
      </Docs>
    </Member>
    <Member MemberName="AssignHandle">
      <MemberSignature Language="C#" Value="public void AssignHandle (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AssignHandle(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AssignHandle (handle As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AssignHandle(IntPtr handle);" />
      <MemberSignature Language="F#" Value="member this.AssignHandle : nativeint -&gt; unit" Usage="nativeWindow.AssignHandle handle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Dojście do przypisania do tego okna.</param>
        <summary>Przypisuje dojścia do tego okna.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.NativeWindow.WndProc%2A> przechwytuje okna komunikatów wysłanych do `handle` parametru. Użyj <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> Aby przywrócić domyślną procedurę okna procedurę okna uchwytu.  
  
 <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> Wywołania metody <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> metodę, aby wskazać, że wartość <xref:System.Windows.Forms.NativeWindow.Handle%2A> właściwości została zmieniona.  
  
> [!NOTE]
>  Dojście do przypisywania nie może być w procesie innej aplikacji.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje przechwytujący komunikaty okna systemu operacyjnego w ramach procedury okna. Przykład tworzy klasę, która dziedziczy po elemencie <xref:System.Windows.Forms.NativeWindow> w tym celu.  
  
 `MyNativeWindowListener` Punkty zaczepienia do procedury okna w formularzu, który został przekazany do konstruktora klasy i zastępuje <xref:System.Windows.Forms.NativeWindow.WndProc%2A> metoda przechwytuje `WM_ACTIVATEAPP` komunikatów okien. Klasa demonstruje użycie <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> i <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> metody do identyfikowania okna, które obsługują <xref:System.Windows.Forms.NativeWindow> użyje. Dojście jest przypisany, na podstawie <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType> i <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType> zdarzenia. Gdy `WM_ACTIVATEAPP` odebraniu komunikatu w oknie wywołania klasy `form1.ApplicationActivated` metody.  
  
 Ten kod znajduje się fragment z przykładu w <xref:System.Windows.Forms.NativeWindow> klasa — Przegląd. Kod nie jest wyświetlany w celu skrócenia programu. Zobacz <xref:System.Windows.Forms.NativeWindow> listę całego kodu.  
  
 [!code-cpp[NativeWindow#2](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#2)]
 [!code-csharp[NativeWindow#2](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#2)]
 [!code-vb[NativeWindow#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">To okno ma już dojście.</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">Nie można pobrać procedury windows skojarzone okna natywnych.</exception>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
      </Docs>
    </Member>
    <Member MemberName="CreateHandle">
      <MemberSignature Language="C#" Value="public virtual void CreateHandle (System.Windows.Forms.CreateParams cp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CreateHandle(class System.Windows.Forms.CreateParams cp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub CreateHandle (cp As CreateParams)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CreateHandle(System::Windows::Forms::CreateParams ^ cp);" />
      <MemberSignature Language="F#" Value="abstract member CreateHandle : System.Windows.Forms.CreateParams -&gt; unit&#xA;override this.CreateHandle : System.Windows.Forms.CreateParams -&gt; unit" Usage="nativeWindow.CreateHandle cp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cp" Type="System.Windows.Forms.CreateParams" />
      </Parameters>
      <Docs>
        <param name="cp">Element <see cref="T:System.Windows.Forms.CreateParams" /> , który określa parametry tworzenia dla tego okna.</param>
        <summary>Tworzy i jego uchwyt okna z parametrami tworzenia określony.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `cp` Parametr określa wartości, które są przekazywane do natywnego Win32 `CreateWindowEx` metodę w celu utworzenia i jego uchwyt okna.  
  
 Gdy <xref:System.Windows.Forms.CreateParams.ClassName%2A> pole nie jest `null`, uchwyt okna nowo utworzony dziedziczy po określonej klasy. Na przykład jeśli <xref:System.Windows.Forms.CreateParams.ClassName%2A> ustawiono `BUTTON`, nowo utworzony okna jest oparty na Win32 `BUTTON` klasy okna. <xref:System.Windows.Forms.CreateParams.Param%2A> Właściwość <xref:System.Windows.Forms.CreateParams.ClassName%2A> obiektu musi być `null` lub odwołaj się do wystąpienia klasy, który został zadeklarowany jako struktury.  
  
 Ten kod znajduje się fragment z przykładu w <xref:System.Windows.Forms.NativeWindow> klasa — Przegląd. Kod nie jest wyświetlany w celu skrócenia programu. Zobacz <xref:System.Windows.Forms.NativeWindow> listę całego kodu.  
  
> [!NOTE]
>  Podana nazwa klasy jest zarejestrowany w systemie operacyjnym.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje, tworzenia okna o nazwie klasy okna określonego systemu operacyjnego. Przykład tworzy klasę, która dziedziczy po elemencie <xref:System.Windows.Forms.NativeWindow> w tym celu.  
  
 `MyNativeWindow` Klasy tworzy nowe okno z <xref:System.Windows.Forms.CreateParams.ClassName%2A> równa `BUTTON`. Spowoduje to utworzenie okna przycisk Win32. Lokalizacja i rozmiar przycisku jest ustawiona, oraz określając style dodatkowe okna. Klasa pokazuje sposób użycia <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> metodę i Zastąp <xref:System.Windows.Forms.NativeWindow.WndProc%2A> metody intercept komunikatów okien, które są odbierane. Mimo że przykład szuka komunikat WM_ACTIVATEAPP, to można zastąpić w to prawdziwy program za pomocą komunikatów okien specyficzne dla typu utworzony.  
  
> [!NOTE]
>  Niektóre typy formantów wysyłać ich okna do nadrzędnego okna zamiast okna. Zobacz zestaw SDK platformy Windows, aby uzyskać więcej informacji.  
  
 [!code-cpp[NativeWindow#3](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#3)]
 [!code-csharp[NativeWindow#3](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#3)]
 [!code-vb[NativeWindow#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException">Podczas próby utworzenia natywnej okna systemu operacyjnego za mało zasobów.</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">Natywny Win32 API nie można utworzyć określonego okna.</exception>
        <exception cref="T:System.InvalidOperationException">Uchwyt bieżące okno natywnych jest już przypisany; w wyjaśnienie <see cref="P:System.Windows.Forms.NativeWindow.Handle" /> właściwość nie jest równa <see cref="F:System.IntPtr.Zero" />.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">Aby utworzyć okno najwyższego poziomu. To uprawnienie jest wymagane tylko, jeśli styl okna nie jest elementem podrzędnym lub okno nie ma elementu nadrzędnego. Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="T:System.Windows.Forms.CreateParams" />
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
      </Docs>
    </Member>
    <Member MemberName="DefWndProc">
      <MemberSignature Language="C#" Value="public void DefWndProc (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DefWndProc(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.DefWndProc(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DefWndProc (ByRef m As Message)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DefWndProc(System::Windows::Forms::Message % m);" />
      <MemberSignature Language="F#" Value="member this.DefWndProc :  -&gt; unit" Usage="nativeWindow.DefWndProc m" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">Komunikat, który jest aktualnie przetwarzany.</param>
        <summary>Wywołuje domyślną procedurę okna skojarzone z tego okna.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zazwyczaj można wywołać tylko <xref:System.Windows.Forms.NativeWindow.DefWndProc%2A> metody, gdy są przechwytuje komunikatów okien i chcesz domyślną procedurę okna, by obsłużyć komunikat. <xref:System.Windows.Forms.NativeWindow.DefWndProc%2A> nie należy wywoływać wysyłać komunikatu w oknie oknie. wywołanie Win32 `SendMessage` zamiast tego funkcji.  
  
 Jest to błąd, aby wywołać <xref:System.Windows.Forms.NativeWindow.DefWndProc%2A> podczas <xref:System.Windows.Forms.NativeWindow.Handle%2A> właściwość ma wartość 0.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Należy przesłonić tę metodę w klasie pochodnej, aby zaimplementować uogólnionego niestandardowych komunikatów dla określonego okna natywny lub .NET Windows Forms <see cref="T:System.Windows.Forms.Control" />. Niestandardowe przetwarzanie można wykonać przed i za nimi, zamiast wywołanie do implementacji klasy podstawowej przez tę metodę, która przetwarza standardową wiadomość.  Z kolei Dodawanie dostosowanego komunikatu obsługi dla aplikacji może się odbywać za pośrednictwem <see cref="M:System.Windows.Forms.Application.AddMessageFilter(System.Windows.Forms.IMessageFilter)" /> metody <see cref="T:System.Windows.Forms.Application" /> klasy.</para>
        </block>
        <altmember cref="T:System.Windows.Forms.Message" />
        <altmember cref="M:System.Windows.Forms.Application.SetUnhandledExceptionMode(System.Windows.Forms.UnhandledExceptionMode)" />
        <altmember cref="M:System.Windows.Forms.Application.AddMessageFilter(System.Windows.Forms.IMessageFilter)" />
      </Docs>
    </Member>
    <Member MemberName="DestroyHandle">
      <MemberSignature Language="C#" Value="public virtual void DestroyHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DestroyHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub DestroyHandle ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void DestroyHandle();" />
      <MemberSignature Language="F#" Value="abstract member DestroyHandle : unit -&gt; unit&#xA;override this.DestroyHandle : unit -&gt; unit" Usage="nativeWindow.DestroyHandle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Niszczy okno i jego uchwyt.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda niszczy okno skojarzone z <xref:System.Windows.Forms.NativeWindow.Handle%2A>, ustawia <xref:System.Windows.Forms.NativeWindow.Handle%2A> właściwość jako 0 i wywołania <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> metodę, aby odzwierciedlić zmiany. Zazwyczaj można wywołać tylko <xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A> po zakończeniu w oknie natywnych.  
  
> [!NOTE]
>  <xref:System.Windows.Forms.NativeWindow> Klasy automatycznie spowoduje usunięcie skojarzonego okna i wersji swoich zasobów w odpowiedzi na wiadomość WM_DESTROY.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~NativeWindow ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!NativeWindow ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="nativeWindow.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwalnia zasoby skojarzone z tego okna.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.NativeWindow.Finalize%2A> Metoda usuwa klasy pochodnej Win32 skojarzone z bieżącym <xref:System.Windows.Forms.NativeWindow> wystąpienia, zwalnia dojścia i publikuje komunikat WM_CLOSE do odpowiedniego okna.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.NativeWindow.#ctor" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
      </Docs>
    </Member>
    <Member MemberName="FromHandle">
      <MemberSignature Language="C#" Value="public static System.Windows.Forms.NativeWindow FromHandle (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Forms.NativeWindow FromHandle(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.FromHandle(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromHandle (handle As IntPtr) As NativeWindow" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Forms::NativeWindow ^ FromHandle(IntPtr handle);" />
      <MemberSignature Language="F#" Value="static member FromHandle : nativeint -&gt; System.Windows.Forms.NativeWindow" Usage="System.Windows.Forms.NativeWindow.FromHandle handle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.NativeWindow</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Dojście do okna.</param>
        <summary>Pobiera okna skojarzone z określonego dojścia.</summary>
        <returns>
          <see cref="T:System.Windows.Forms.NativeWindow" /> Skojarzone z określonego dojścia. Ta metoda zwraca <see langword="null" /> gdy dojścia nie ma odpowiedniego okna.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli uchwyt zostanie wyświetlony z innej metody, ta metoda umożliwia okna skojarzone z dojściem do pobrania. Dojście musi już być własnością innego <xref:System.Windows.Forms.NativeWindow> w bieżącym procesu; w przeciwnym razie `null` jest zwracana.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
      </Docs>
    </Member>
    <Member MemberName="Handle">
      <MemberSignature Language="C#" Value="public IntPtr Handle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Handle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.NativeWindow.Handle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Handle As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr Handle { IntPtr get(); };" />
      <MemberSignature Language="F#" Value="member this.Handle : nativeint" Usage="System.Windows.Forms.NativeWindow.Handle" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.Forms.IWin32Window.Handle</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera uchwyt dla tego okna.</summary>
        <value>W przypadku powodzenia <see cref="T:System.IntPtr" /> reprezentujący dojście skojarzone natywny Win32 okna; w przeciwnym razie 0, jeśli brak dojścia jest skojarzony z oknem.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podczas wywoływania metody interfejsu API Windows, które wymagają uchwyt okna lub formantu, należy użyć tej metody.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje, tworzenia okna o nazwie klasy okna określonego systemu operacyjnego. Przykład tworzy klasę, która dziedziczy po elemencie <xref:System.Windows.Forms.NativeWindow> w tym celu. W przykładzie pokazano, zastępowanie <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> metody, aby otrzymywać powiadomienia, gdy <xref:System.Windows.Forms.NativeWindow.Handle%2A> zmiany.  
  
 `MyNativeWindow` Klasy tworzy nowe okno z <xref:System.Windows.Forms.CreateParams.ClassName%2A> ustawiony na przycisku. Spowoduje to utworzenie okna przycisk Win32. Lokalizacja i rozmiar przycisku jest ustawiona, oraz określając style dodatkowe okna. Klasa pokazuje sposób użycia <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> metodę i Zastąp <xref:System.Windows.Forms.NativeWindow.WndProc%2A> metody intercept komunikatów okien, które są odbierane. Mimo że przykład szuka komunikat WM_ACTIVATEAPP, to może zastąpione w to prawdziwy program specyficzne dla typu utworzony komunikatów okien.  
  
> [!NOTE]
>  Niektóre typy formantów wysyłać ich okna do nadrzędnego okna zamiast okna. Zobacz zestaw SDK platformy Windows, aby uzyskać więcej informacji.  
  
 [!code-cpp[NativeWindow#3](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#3)]
 [!code-csharp[NativeWindow#3](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#3)]
 [!code-vb[NativeWindow#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
      </Docs>
    </Member>
    <Member MemberName="OnHandleChange">
      <MemberSignature Language="C#" Value="protected virtual void OnHandleChange ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnHandleChange() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnHandleChange ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnHandleChange();" />
      <MemberSignature Language="F#" Value="abstract member OnHandleChange : unit -&gt; unit&#xA;override this.OnHandleChange : unit -&gt; unit" Usage="nativeWindow.OnHandleChange " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Określa metodę powiadomienia, która jest wywoływana, gdy zostanie zmieniona uchwyt okna.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda jest wywoływana po wartości <xref:System.Windows.Forms.NativeWindow.Handle%2A> właściwości została zmieniona.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje, tworzenia okna o nazwie klasy okna określonego systemu operacyjnego. Przykład tworzy klasę, która dziedziczy po elemencie <xref:System.Windows.Forms.NativeWindow> w tym celu. W przykładzie pokazano, zastępowanie <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> metody, aby otrzymywać powiadomienia, gdy <xref:System.Windows.Forms.NativeWindow.Handle%2A> zmiany.  
  
 `MyNativeWindow` Klasy tworzy nowe okno z <xref:System.Windows.Forms.CreateParams.ClassName%2A> równa `BUTTON`. Spowoduje to utworzenie okna przycisk Win32. Lokalizacja i rozmiar przycisku jest ustawiona, oraz określając style dodatkowe okna. Klasa pokazuje sposób użycia <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> metodę i Zastąp <xref:System.Windows.Forms.NativeWindow.WndProc%2A> metody intercept komunikatów okien, które są odbierane. Mimo że przykład szuka komunikat WM_ACTIVATEAPP, to można zastąpić w to prawdziwy program za pomocą komunikatów okien specyficzne dla typu utworzony.  
  
 Ten kod znajduje się fragment z przykładu w <xref:System.Windows.Forms.NativeWindow> klasa — Przegląd. Kod nie jest wyświetlany w celu skrócenia programu. Zobacz <xref:System.Windows.Forms.NativeWindow> listę całego kodu.  
  
> [!NOTE]
>  Niektóre typy formantów wysyłać ich okna do nadrzędnego okna zamiast okna. Zobacz zestaw SDK platformy Windows, aby uzyskać więcej informacji.  
  
 [!code-cpp[NativeWindow#3](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#3)]
 [!code-csharp[NativeWindow#3](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#3)]
 [!code-vb[NativeWindow#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Zastępuje tę metodę, aby śledzić zmiany wprowadzone do uchwyt okna.</para>
        </block>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)" />
      </Docs>
    </Member>
    <Member MemberName="OnThreadException">
      <MemberSignature Language="C#" Value="protected virtual void OnThreadException (Exception e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnThreadException(class System.Exception e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.OnThreadException(System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnThreadException (e As Exception)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnThreadException(Exception ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnThreadException : Exception -&gt; unit&#xA;override this.OnThreadException : Exception -&gt; unit" Usage="nativeWindow.OnThreadException e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Exception" /> Określający wyjątek nieobsługiwany wątku.</param>
        <summary>W przypadku przesłonięcia w klasie pochodnej, zarządza wątku nieobsługiwany wyjątek.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zazwyczaj <xref:System.Windows.Forms.Application.OnThreadException%2A> uchwyty wątku wyjątków.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)" />
        <altmember cref="T:System.Windows.Forms.Application" />
      </Docs>
    </Member>
    <Member MemberName="ReleaseHandle">
      <MemberSignature Language="C#" Value="public virtual void ReleaseHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ReleaseHandle ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ReleaseHandle();" />
      <MemberSignature Language="F#" Value="abstract member ReleaseHandle : unit -&gt; unit&#xA;override this.ReleaseHandle : unit -&gt; unit" Usage="nativeWindow.ReleaseHandle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwalnia dojście skojarzone z tego okna.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie niszczy uchwyt okna. Zamiast tego ustawia procedurę okna uchwytu domyślną procedurę okna. Ustawia <xref:System.Windows.Forms.NativeWindow.Handle%2A> właściwość 0 i wywołania <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> w celu odzwierciedlenia zmiany.  
  
 Okno automatycznie wywołuje tę metodę, jeżeli otrzyma natywnych wiadomości Win32 WM_NCDESTROY, wskazującą, czy Windows został zniszczony uchwytu.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje przechwytujący komunikaty okna systemu operacyjnego w ramach procedury okna. Przykład tworzy klasę, która dziedziczy po elemencie <xref:System.Windows.Forms.NativeWindow> w tym celu.  
  
 `MyNativeWindowListener` Punkty zaczepienia do procedury okna w formularzu, który został przekazany do konstruktora klasy i zastępuje <xref:System.Windows.Forms.NativeWindow.WndProc%2A> metoda przechwytuje `WM_ACTIVATEAPP` komunikatów okien. Klasa demonstruje użycie <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> i <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> metodami do identyfikowania uchwyt okna <xref:System.Windows.Forms.NativeWindow> użyje. Dojście jest przypisywanie na podstawie <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType> i <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType> zdarzenia. Gdy `WM_ACTIVATEAPP` odebraniu komunikatu w oknie wywołania klasy `form1.ApplicationActivated` metody.  
  
 Ten kod znajduje się fragment z przykładu w <xref:System.Windows.Forms.NativeWindow> klasa — Przegląd. Kod nie jest wyświetlany w celu skrócenia programu. Zobacz <xref:System.Windows.Forms.NativeWindow> listę całego kodu.  
  
 [!code-cpp[NativeWindow#2](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#2)]
 [!code-csharp[NativeWindow#2](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#2)]
 [!code-vb[NativeWindow#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
      </Docs>
    </Member>
    <Member MemberName="WndProc">
      <MemberSignature Language="C#" Value="protected virtual void WndProc (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void WndProc(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub WndProc (ByRef m As Message)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void WndProc(System::Windows::Forms::Message % m);" />
      <MemberSignature Language="F#" Value="abstract member WndProc :  -&gt; unit&#xA;override this.WndProc :  -&gt; unit" Usage="nativeWindow.WndProc m" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">A <see cref="T:System.Windows.Forms.Message" /> skojarzonego z bieżącą wiadomość Windows.</param>
        <summary>Wywołuje domyślną procedurę okna skojarzone z tego okna.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda jest wywoływana, gdy komunikatów okien są wysyłane do uchwytu okna.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje przechwytujący komunikaty okna systemu operacyjnego w ramach procedury okna. Przykład tworzy klasę, która dziedziczy po elemencie <xref:System.Windows.Forms.NativeWindow> w tym celu.  
  
 `MyNativeWindowListener` Punkty zaczepienia do procedury okna w formularzu, który został przekazany do konstruktora klasy i zastępuje <xref:System.Windows.Forms.NativeWindow.WndProc%2A> metodę, aby przechwycić `WM_ACTIVATEAPP` komunikatów okien. Klasa demonstruje użycie <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> i <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> metodami do identyfikowania uchwyt okna <xref:System.Windows.Forms.NativeWindow> użyje. Dojście jest przypisany, na podstawie <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType> i <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType> zdarzenia. Gdy `WM_ACTIVATEAPP` odebraniu komunikatu w oknie wywołania klasy `form1.ApplicationActivated` metody.  
  
 Ten kod znajduje się fragment z przykładu w <xref:System.Windows.Forms.NativeWindow> klasa — Przegląd. Kod nie jest wyświetlany w celu skrócenia programu. Zobacz <xref:System.Windows.Forms.NativeWindow> listę całego kodu.  
  
 [!code-cpp[NativeWindow#2](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#2)]
 [!code-csharp[NativeWindow#2](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#2)]
 [!code-vb[NativeWindow#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Zastąpienie tej metody do zaimplementowania przetwarzania szczegółowy komunikat o błędzie. Wywołaj <c>podstawowej. WndProc</c> nieobsługiwany komunikatów.</para>
        </block>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="T:System.Windows.Forms.Message" />
        <altmember cref="M:System.Windows.Forms.Application.SetUnhandledExceptionMode(System.Windows.Forms.UnhandledExceptionMode)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnThreadException(System.Exception)" />
      </Docs>
    </Member>
  </Members>
</Type>