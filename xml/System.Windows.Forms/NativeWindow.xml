<Type Name="NativeWindow" FullName="System.Windows.Forms.NativeWindow">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="547a0fa86ff2ce303d6c98e4bb8cd3b372c52847" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36517317" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class NativeWindow : MarshalByRefObject, System.Windows.Forms.IWin32Window" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi NativeWindow extends System.MarshalByRefObject implements class System.Windows.Forms.IWin32Window" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.NativeWindow" />
  <TypeSignature Language="VB.NET" Value="Public Class NativeWindow&#xA;Inherits MarshalByRefObject&#xA;Implements IWin32Window" />
  <TypeSignature Language="C++ CLI" Value="public ref class NativeWindow : MarshalByRefObject, System::Windows::Forms::IWin32Window" />
  <TypeSignature Language="F#" Value="type NativeWindow = class&#xA;    inherit MarshalByRefObject&#xA;    interface IWin32Window" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.MarshalByRefObject</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Windows.Forms.IWin32Window</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>Niskiego poziomu hermetyzację uchwyt okna i procedurę okna.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta klasa automatycznie zarządza Tworzenie klasy okien i rejestracji.  
  
 Okno nie jest uprawniony do wyrzucanie elementów bezużytecznych, gdy jest on skojarzony z uchwytu okna. W celu zapewnienia prawidłowego wyrzucanie elementów bezużytecznych, uchwytów musi albo zostać zniszczone ręcznie przy użyciu <xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A> lub przy użyciu <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>.  
  
> [!NOTE]
>  <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> Metoda jest wywoływana podczas przetwarzania wiadomości WM_NCDESTROY. Oznacza to, istnieją przypadki, w których gdy jest konieczne ręczne wywołać <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>, ale jest dobrym rozwiązaniem, aby to zrobić.  
  
 <xref:System.Windows.Forms.NativeWindow> Klasa udostępnia poniższe właściwości i metod do zarządzania uchwytów: <xref:System.Windows.Forms.NativeWindow.Handle%2A>, <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A>, <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A>, <xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A>, i <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A>.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje przechwytywaniu komunikaty okna systemu operacyjnego w procedurę okna i tworzenia okna z określonym systemem operacyjnym nazwa klasy okna. W przykładzie jest tworzony dwie klasy, które dziedziczą z <xref:System.Windows.Forms.NativeWindow> który w tym celu.  
  
 `MyNativeWindowListener` Przechwytuje do procedury okna formularza przekazany do konstruktora klasy i zastępuje <xref:System.Windows.Forms.NativeWindow.WndProc%2A> metodę, aby przechwycić `WM_ACTIVATEAPP` komunikatów okien. Klasa przedstawia użycie <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> i <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> metodami do identyfikowania uchwytu okna <xref:System.Windows.Forms.NativeWindow> będzie używana. Dojście jest przypisywanie na podstawie <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType> i <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType> zdarzenia. Gdy `WM_ACTIVATEAPP` okna wiadomość zostanie odebrana, wywołania klasy `form1.ApplicationActivated` metody.  
  
 `MyNativeWindow` Klasy tworzy nowe okno z <xref:System.Windows.Forms.CreateParams.ClassName%2A> ustawioną `BUTTON`. Przedstawia klasy przy użyciu <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> — metoda i zastępowanie <xref:System.Windows.Forms.NativeWindow.WndProc%2A> metody do przechwycenia okna komunikatów, które są odbierane.  
  
 [!code-cpp[NativeWindow#1](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#1)]
 [!code-csharp[NativeWindow#1](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#1)]
 [!code-vb[NativeWindow#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#1)]  
  
 ]]></format>
    </remarks>
    <permission cref="T:System.Security.Permissions.SecurityPermission">do obiektu wywołującego bezpośrednio wywoływać kodu niezarządzanego. Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
    <altmember cref="T:System.IntPtr" />
    <altmember cref="T:System.Windows.Forms.Application" />
    <altmember cref="T:System.Windows.Forms.AxHost" />
    <altmember cref="T:System.Windows.Forms.Control" />
    <altmember cref="T:System.Windows.Forms.Form" />
    <altmember cref="T:System.Windows.Forms.IWin32Window" />
    <altmember cref="T:System.Windows.Forms.Message" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public NativeWindow ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; NativeWindow();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje wystąpienie klasy <see cref="T:System.Windows.Forms.NativeWindow" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jest to domyślny <xref:System.Windows.Forms.NativeWindow.%23ctor%2A> Konstruktor udostępniane przez kompilator. <xref:System.Windows.Forms.NativeWindow> Klasa ma również statycznego konstruktora, który inicjuje programy obsługi wiadomości w całej domenie aplikacji i tabele wyznaczania wartości skrótu.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
        <altmember cref="T:System.AppDomain" />
      </Docs>
    </Member>
    <Member MemberName="AssignHandle">
      <MemberSignature Language="C#" Value="public void AssignHandle (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AssignHandle(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AssignHandle (handle As IntPtr)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AssignHandle(IntPtr handle);" />
      <MemberSignature Language="F#" Value="member this.AssignHandle : nativeint -&gt; unit" Usage="nativeWindow.AssignHandle handle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Dojście do przypisania do tego okna.</param>
        <summary>Przypisuje dojścia do tego okna.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.NativeWindow.WndProc%2A> przechwytuje okna komunikatów wysyłanych do `handle` parametru. Użyj <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> mają zostać przywrócone procedurę okna uchwytu domyślną procedurę okna.  
  
 <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> Wywołania metody <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> metody w celu wskazania, że wartość <xref:System.Windows.Forms.NativeWindow.Handle%2A> właściwość zostanie zmieniona.  
  
> [!NOTE]
>  Dojście do przypisania nie może być w procesie inną aplikację.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje przechwycenia systemu operacyjnego okna komunikatów w procedurę okna. W przykładzie jest tworzony klasy, która dziedziczy <xref:System.Windows.Forms.NativeWindow> w tym celu.  
  
 `MyNativeWindowListener` Przechwytuje do procedury okna formularza przekazany do konstruktora klasy i zastępuje <xref:System.Windows.Forms.NativeWindow.WndProc%2A> metodę przechwytuje `WM_ACTIVATEAPP` komunikatów okien. Klasa zademonstrowano użycie <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> i <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> metodami do identyfikowania które okno obsługi <xref:System.Windows.Forms.NativeWindow> będzie używana. Dojście jest przypisany na podstawie <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType> i <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType> zdarzenia. Gdy `WM_ACTIVATEAPP` okna wiadomość zostanie odebrana, wywołania klasy `form1.ApplicationActivated` metody.  
  
 Ten kod jest fragment przykład pokazany na <xref:System.Windows.Forms.NativeWindow> Przegląd klasy. Kod nie jest wyświetlana wyłącznie w celu skrócenia. Zobacz <xref:System.Windows.Forms.NativeWindow> listę całego kodu.  
  
 [!code-cpp[NativeWindow#2](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#2)]
 [!code-csharp[NativeWindow#2](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#2)]
 [!code-vb[NativeWindow#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">To okno ma już dojścia.</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">Nie można pobrać procedury windows skojarzone okna macierzystego.</exception>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
      </Docs>
    </Member>
    <Member MemberName="CreateHandle">
      <MemberSignature Language="C#" Value="public virtual void CreateHandle (System.Windows.Forms.CreateParams cp);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CreateHandle(class System.Windows.Forms.CreateParams cp) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub CreateHandle (cp As CreateParams)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CreateHandle(System::Windows::Forms::CreateParams ^ cp);" />
      <MemberSignature Language="F#" Value="abstract member CreateHandle : System.Windows.Forms.CreateParams -&gt; unit&#xA;override this.CreateHandle : System.Windows.Forms.CreateParams -&gt; unit" Usage="nativeWindow.CreateHandle cp" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cp" Type="System.Windows.Forms.CreateParams" />
      </Parameters>
      <Docs>
        <param name="cp">A <see cref="T:System.Windows.Forms.CreateParams" /> , który określa parametry tworzenia dla tego okna.</param>
        <summary>Tworzy i uchwytu okna z parametrami tworzenia określony.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `cp` Parametr określa wartości, które są przekazywane do natywnej Win32 `CreateWindowEx` metodę w celu utworzenia i uchwytu okna.  
  
 Gdy <xref:System.Windows.Forms.CreateParams.ClassName%2A> pole nie jest `null`, uchwytu okna nowo utworzony dziedziczy określonej klasy. Na przykład jeśli <xref:System.Windows.Forms.CreateParams.ClassName%2A> ustawiono `BUTTON`, nowo utworzony okna jest oparta na Win32 `BUTTON` klasy okna. <xref:System.Windows.Forms.CreateParams.Param%2A> Właściwość <xref:System.Windows.Forms.CreateParams.ClassName%2A> obiektu musi być `null` lub odwołania do wystąpienia klasy, która została zadeklarowana jako struktura.  
  
 Ten kod jest fragment przykład pokazany na <xref:System.Windows.Forms.NativeWindow> Przegląd klasy. Kod nie jest wyświetlana wyłącznie w celu skrócenia. Zobacz <xref:System.Windows.Forms.NativeWindow> listę całego kodu.  
  
> [!NOTE]
>  Podana nazwa klasy jest zarejestrowany w systemie operacyjnym.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje tworzenia okna z określonym systemem operacyjnym nazwa klasy okna. W przykładzie jest tworzony klasy, która dziedziczy <xref:System.Windows.Forms.NativeWindow> w tym celu.  
  
 `MyNativeWindow` Klasy tworzy nowe okno z <xref:System.Windows.Forms.CreateParams.ClassName%2A> ustawioną `BUTTON`. Spowoduje to utworzenie okna przycisk Win32. Lokalizacja i rozmiar przycisku jest ustawiona, oraz określenia style dodatkowe okna. Klasa przedstawiono sposób użycia <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> — metoda i zastąpienie <xref:System.Windows.Forms.NativeWindow.WndProc%2A> metody do przechwycenia okna komunikatów, które są odbierane. Mimo że przykładzie szuka komunikat WM_ACTIVATEAPP, to można zastąpić w programie rzeczywistych komunikatów okien specyficzne dla typu utworzony.  
  
> [!NOTE]
>  Niektóre typy formantów wysyłać ich okna do nadrzędnego okna zamiast okna. Zobacz zestawu SDK platformy Windows, aby uzyskać więcej informacji.  
  
 [!code-cpp[NativeWindow#3](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#3)]
 [!code-csharp[NativeWindow#3](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#3)]
 [!code-vb[NativeWindow#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.OutOfMemoryException">Podczas próby utworzenia okna natywnego systemu operacyjnego za mało zasobów.</exception>
        <exception cref="T:System.ComponentModel.Win32Exception">Natywnego interfejsu API Win32 nie może utworzyć określone okno.</exception>
        <exception cref="T:System.InvalidOperationException">Dojście bieżące okno natywnych jest już przypisany; w wyjaśnienie <see cref="P:System.Windows.Forms.NativeWindow.Handle" /> właściwość nie jest równa <see cref="F:System.IntPtr.Zero" />.</exception>
        <permission cref="T:System.Security.Permissions.UIPermission">Aby utworzyć okno najwyższego poziomu. To uprawnienie jest wymagane tylko, jeśli styl okna nie jest elementem podrzędnym lub jeśli okno nie ma elementu nadrzędnego. Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.UIPermissionWindow.SafeTopLevelWindows" /></permission>
        <altmember cref="T:System.Windows.Forms.CreateParams" />
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
      </Docs>
    </Member>
    <Member MemberName="DefWndProc">
      <MemberSignature Language="C#" Value="public void DefWndProc (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DefWndProc(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.DefWndProc(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Public Sub DefWndProc (ByRef m As Message)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DefWndProc(System::Windows::Forms::Message % m);" />
      <MemberSignature Language="F#" Value="member this.DefWndProc :  -&gt; unit" Usage="nativeWindow.DefWndProc m" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">Komunikat, który jest obecnie przetwarzane.</param>
        <summary>Wywołuje domyślną procedurę okna skojarzone z tego okna.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zazwyczaj można wywołać tylko <xref:System.Windows.Forms.NativeWindow.DefWndProc%2A> metody, gdy są przechwytywaniu komunikatów okien i chcesz, by obsłużyć komunikat domyślną procedurę okna. <xref:System.Windows.Forms.NativeWindow.DefWndProc%2A> Nie można wywołać, aby wysłać wiadomość okna dla okna; wywołanie Win32 `SendMessage` zamiast tego działania.  
  
 Błąd do wywołania <xref:System.Windows.Forms.NativeWindow.DefWndProc%2A> podczas <xref:System.Windows.Forms.NativeWindow.Handle%2A> właściwości jest równa 0.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Należy przesłonić tę metodę w klasie pochodnej do zaimplementowania Obsługa określone okno native lub formularzy systemu Windows .NET ogólnych komunikatów niestandardowych <see cref="T:System.Windows.Forms.Control" />. Niestandardowe przetwarzania mogą być wykonywane przed, po lub zamiast wywołanie implementacji klasy podstawowej tej metody, która wykonuje przetwarzanie komunikatów standardowych.  Z kolei dodawanie dostosowanych wiadomościami dla aplikacji, które można wykonywać za pomocą <see cref="M:System.Windows.Forms.Application.AddMessageFilter(System.Windows.Forms.IMessageFilter)" /> metody <see cref="T:System.Windows.Forms.Application" /> klasy.</para>
        </block>
        <altmember cref="T:System.Windows.Forms.Message" />
        <altmember cref="M:System.Windows.Forms.Application.SetUnhandledExceptionMode(System.Windows.Forms.UnhandledExceptionMode)" />
        <altmember cref="M:System.Windows.Forms.Application.AddMessageFilter(System.Windows.Forms.IMessageFilter)" />
      </Docs>
    </Member>
    <Member MemberName="DestroyHandle">
      <MemberSignature Language="C#" Value="public virtual void DestroyHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void DestroyHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub DestroyHandle ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void DestroyHandle();" />
      <MemberSignature Language="F#" Value="abstract member DestroyHandle : unit -&gt; unit&#xA;override this.DestroyHandle : unit -&gt; unit" Usage="nativeWindow.DestroyHandle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Niszczy okno i uchwytu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda niszczy okno skojarzone z <xref:System.Windows.Forms.NativeWindow.Handle%2A>, ustawia <xref:System.Windows.Forms.NativeWindow.Handle%2A> właściwości 0 i wywołania <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> metody w celu odzwierciedlenia zmian. Zazwyczaj można wywołać tylko <xref:System.Windows.Forms.NativeWindow.DestroyHandle%2A> po zakończeniu okno z macierzystego.  
  
> [!NOTE]
>  <xref:System.Windows.Forms.NativeWindow> Klasy automatycznie będzie usunięcie skojarzone okna i wersji swoich zasobów w odpowiedzi na wiadomość WM_DESTROY.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
      </Docs>
    </Member>
    <Member MemberName="Finalize">
      <MemberSignature Language="C#" Value="~NativeWindow ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Finalize() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.Finalize" />
      <MemberSignature Language="VB.NET" Value="Finalize ()" />
      <MemberSignature Language="C++ CLI" Value="!NativeWindow ()" />
      <MemberSignature Language="F#" Value="override this.Finalize : unit -&gt; unit" Usage="nativeWindow.Finalize " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwalnia zasoby skojarzone z tego okna.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.NativeWindow.Finalize%2A> Metoda usuwa klasy pochodnej Win32 skojarzone z bieżącym <xref:System.Windows.Forms.NativeWindow> wystąpienia, zwalnia dojście i zapisuje komunikat WM_CLOSE do odpowiedniego okna.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.NativeWindow.#ctor" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
      </Docs>
    </Member>
    <Member MemberName="FromHandle">
      <MemberSignature Language="C#" Value="public static System.Windows.Forms.NativeWindow FromHandle (IntPtr handle);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Windows.Forms.NativeWindow FromHandle(native int handle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.FromHandle(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function FromHandle (handle As IntPtr) As NativeWindow" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Windows::Forms::NativeWindow ^ FromHandle(IntPtr handle);" />
      <MemberSignature Language="F#" Value="static member FromHandle : nativeint -&gt; System.Windows.Forms.NativeWindow" Usage="System.Windows.Forms.NativeWindow.FromHandle handle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.NativeWindow</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="handle" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="handle">Dojście do okna.</param>
        <summary>Pobiera skojarzone z określonego dojścia okna.</summary>
        <returns>
          <see cref="T:System.Windows.Forms.NativeWindow" /> Skojarzone z określonego dojścia. Ta metoda zwraca <see langword="null" /> gdy dojście nie ma odpowiedniego okna.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli zostanie wyświetlony uchwyt z innej metody, ta metoda umożliwia pobieranie skojarzono uchwyt okna. Dojście już musi należeć do żadnego innego <xref:System.Windows.Forms.NativeWindow> w bieżącym procesu; w przeciwnym razie `null` jest zwracany.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
      </Docs>
    </Member>
    <Member MemberName="Handle">
      <MemberSignature Language="C#" Value="public IntPtr Handle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Handle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.NativeWindow.Handle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Handle As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr Handle { IntPtr get(); };" />
      <MemberSignature Language="F#" Value="member this.Handle : nativeint" Usage="System.Windows.Forms.NativeWindow.Handle" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Windows.Forms.IWin32Window.Handle</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera dojście dla tego okna.</summary>
        <value>W przypadku powodzenia <see cref="T:System.IntPtr" /> reprezentujący dojście do skojarzonego natywnego okna Win32; w przeciwnym razie wartość 0, jeśli dojście nie jest skojarzony z oknem.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj tej metody, podczas wywoływania metody interfejsu API systemu Windows, które wymagają uchwyt okna lub kontrolki.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje tworzenia okna z określonym systemem operacyjnym nazwa klasy okna. W przykładzie jest tworzony klasy, która dziedziczy <xref:System.Windows.Forms.NativeWindow> w tym celu. W przykładzie pokazano, zastępowanie <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> metody, aby otrzymać powiadomienie po <xref:System.Windows.Forms.NativeWindow.Handle%2A> zmiany.  
  
 `MyNativeWindow` Klasy tworzy nowe okno z <xref:System.Windows.Forms.CreateParams.ClassName%2A> ustawioną przycisku. Spowoduje to utworzenie okna przycisk Win32. Lokalizacja i rozmiar przycisku jest ustawiona, oraz określenia style dodatkowe okna. Klasa przedstawiono sposób użycia <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> — metoda i zastąpienie <xref:System.Windows.Forms.NativeWindow.WndProc%2A> metody do przechwycenia okna komunikatów, które są odbierane. Mimo że przykładzie szuka komunikat WM_ACTIVATEAPP, to można zastąpione w programie rzeczywistych komunikatów okien specyficzne dla typu utworzony.  
  
> [!NOTE]
>  Niektóre typy formantów wysyłać ich okna do nadrzędnego okna zamiast okna. Zobacz zestawu SDK platformy Windows, aby uzyskać więcej informacji.  
  
 [!code-cpp[NativeWindow#3](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#3)]
 [!code-csharp[NativeWindow#3](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#3)]
 [!code-vb[NativeWindow#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
      </Docs>
    </Member>
    <Member MemberName="OnHandleChange">
      <MemberSignature Language="C#" Value="protected virtual void OnHandleChange ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnHandleChange() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnHandleChange ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnHandleChange();" />
      <MemberSignature Language="F#" Value="abstract member OnHandleChange : unit -&gt; unit&#xA;override this.OnHandleChange : unit -&gt; unit" Usage="nativeWindow.OnHandleChange " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Określa metodę powiadomień, która jest wywoływana, gdy uchwyt okna zostanie zmieniona.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda jest wywoływana po wartości <xref:System.Windows.Forms.NativeWindow.Handle%2A> właściwość zostanie zmieniona.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje tworzenia okna z określonym systemem operacyjnym nazwa klasy okna. W przykładzie jest tworzony klasy, która dziedziczy <xref:System.Windows.Forms.NativeWindow> w tym celu. W przykładzie pokazano, zastępowanie <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> metody, aby otrzymać powiadomienie po <xref:System.Windows.Forms.NativeWindow.Handle%2A> zmiany.  
  
 `MyNativeWindow` Klasy tworzy nowe okno z <xref:System.Windows.Forms.CreateParams.ClassName%2A> ustawioną `BUTTON`. Spowoduje to utworzenie okna przycisk Win32. Lokalizacja i rozmiar przycisku jest ustawiona, oraz określenia style dodatkowe okna. Klasa przedstawiono sposób użycia <xref:System.Windows.Forms.NativeWindow.CreateHandle%2A> — metoda i zastąpienie <xref:System.Windows.Forms.NativeWindow.WndProc%2A> metody do przechwycenia okna komunikatów, które są odbierane. Mimo że przykładzie szuka komunikat WM_ACTIVATEAPP, to można zastąpić w programie rzeczywistych komunikatów okien specyficzne dla typu utworzony.  
  
 Ten kod jest fragment przykład pokazany na <xref:System.Windows.Forms.NativeWindow> Przegląd klasy. Kod nie jest wyświetlana wyłącznie w celu skrócenia. Zobacz <xref:System.Windows.Forms.NativeWindow> listę całego kodu.  
  
> [!NOTE]
>  Niektóre typy formantów wysyłać ich okna do nadrzędnego okna zamiast okna. Zobacz zestawu SDK platformy Windows, aby uzyskać więcej informacji.  
  
 [!code-cpp[NativeWindow#3](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#3)]
 [!code-csharp[NativeWindow#3](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#3)]
 [!code-vb[NativeWindow#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Zastępuje tę metodę, aby śledzić zmiany wprowadzone do uchwytu okna.</para>
        </block>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)" />
      </Docs>
    </Member>
    <Member MemberName="OnThreadException">
      <MemberSignature Language="C#" Value="protected virtual void OnThreadException (Exception e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnThreadException(class System.Exception e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.OnThreadException(System.Exception)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnThreadException (e As Exception)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnThreadException(Exception ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnThreadException : Exception -&gt; unit&#xA;override this.OnThreadException : Exception -&gt; unit" Usage="nativeWindow.OnThreadException e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Exception" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Exception" /> , Który określa wątku nieobsługiwany wyjątek.</param>
        <summary>W przypadku przesłonięcia w klasie pochodnej, zarządza wątku nieobsługiwany wyjątek.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zazwyczaj <xref:System.Windows.Forms.Application.OnThreadException%2A> dojść wątku wyjątków.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)" />
        <altmember cref="T:System.Windows.Forms.Application" />
      </Docs>
    </Member>
    <Member MemberName="ReleaseHandle">
      <MemberSignature Language="C#" Value="public virtual void ReleaseHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ReleaseHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.ReleaseHandle" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub ReleaseHandle ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void ReleaseHandle();" />
      <MemberSignature Language="F#" Value="abstract member ReleaseHandle : unit -&gt; unit&#xA;override this.ReleaseHandle : unit -&gt; unit" Usage="nativeWindow.ReleaseHandle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwalnia dojście skojarzone z tego okna.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda nie niszczy uchwytu okna. Zamiast tego ustawia procedurę okna uchwytu domyślną procedurę okna. Ustawia <xref:System.Windows.Forms.NativeWindow.Handle%2A> właściwości 0 i wywołania <xref:System.Windows.Forms.NativeWindow.OnHandleChange%2A> celu odzwierciedlenia zmian.  
  
 Okno automatycznie wywołuje tę metodę, gdy odbierze wiadomość natywnego Win32 WM_NCDESTROY, wskazującą, czy system Windows ma zniszczone dojście.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje przechwycenia systemu operacyjnego okna komunikatów w procedurę okna. W przykładzie jest tworzony klasy, która dziedziczy <xref:System.Windows.Forms.NativeWindow> w tym celu.  
  
 `MyNativeWindowListener` Przechwytuje do procedury okna formularza przekazany do konstruktora klasy i zastępuje <xref:System.Windows.Forms.NativeWindow.WndProc%2A> metodę przechwytuje `WM_ACTIVATEAPP` komunikatów okien. Klasa zademonstrowano użycie <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> i <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> metodami do identyfikowania uchwytu okna <xref:System.Windows.Forms.NativeWindow> będzie używana. Dojście jest przypisywanie na podstawie <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType> i <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType> zdarzenia. Gdy `WM_ACTIVATEAPP` okna wiadomość zostanie odebrana, wywołania klasy `form1.ApplicationActivated` metody.  
  
 Ten kod jest fragment przykład pokazany na <xref:System.Windows.Forms.NativeWindow> Przegląd klasy. Kod nie jest wyświetlana wyłącznie w celu skrócenia. Zobacz <xref:System.Windows.Forms.NativeWindow> listę całego kodu.  
  
 [!code-cpp[NativeWindow#2](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#2)]
 [!code-csharp[NativeWindow#2](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#2)]
 [!code-vb[NativeWindow#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.AssignHandle(System.IntPtr)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.CreateHandle(System.Windows.Forms.CreateParams)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.DestroyHandle" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnHandleChange" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.Finalize" />
      </Docs>
    </Member>
    <Member MemberName="WndProc">
      <MemberSignature Language="C#" Value="protected virtual void WndProc (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void WndProc(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.NativeWindow.WndProc(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub WndProc (ByRef m As Message)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void WndProc(System::Windows::Forms::Message % m);" />
      <MemberSignature Language="F#" Value="abstract member WndProc :  -&gt; unit&#xA;override this.WndProc :  -&gt; unit" Usage="nativeWindow.WndProc m" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">A <see cref="T:System.Windows.Forms.Message" /> skojarzonego z bieżącego komunikatu systemu Windows.</param>
        <summary>Wywołuje domyślną procedurę okna skojarzone z tego okna.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda jest wywoływana podczas wysyłania komunikatów okien do uchwytu okna.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje przechwycenia systemu operacyjnego okna komunikatów w procedurę okna. W przykładzie jest tworzony klasy, która dziedziczy <xref:System.Windows.Forms.NativeWindow> w tym celu.  
  
 `MyNativeWindowListener` Przechwytuje do procedury okna formularza przekazany do konstruktora klasy i zastępuje <xref:System.Windows.Forms.NativeWindow.WndProc%2A> metodę, aby przechwycić `WM_ACTIVATEAPP` komunikatów okien. Klasa zademonstrowano użycie <xref:System.Windows.Forms.NativeWindow.AssignHandle%2A> i <xref:System.Windows.Forms.NativeWindow.ReleaseHandle%2A> metodami do identyfikowania uchwytu okna <xref:System.Windows.Forms.NativeWindow> będzie używana. Dojście jest przypisany na podstawie <xref:System.Windows.Forms.Control.HandleCreated?displayProperty=nameWithType> i <xref:System.Windows.Forms.Control.HandleDestroyed?displayProperty=nameWithType> zdarzenia. Gdy `WM_ACTIVATEAPP` okna wiadomość zostanie odebrana, wywołania klasy `form1.ApplicationActivated` metody.  
  
 Ten kod jest fragment przykład pokazany na <xref:System.Windows.Forms.NativeWindow> Przegląd klasy. Kod nie jest wyświetlana wyłącznie w celu skrócenia. Zobacz <xref:System.Windows.Forms.NativeWindow> listę całego kodu.  
  
 [!code-cpp[NativeWindow#2](~/samples/snippets/cpp/VS_Snippets_Winforms/NativeWindow/CPP/form1.cpp#2)]
 [!code-csharp[NativeWindow#2](~/samples/snippets/csharp/VS_Snippets_Winforms/NativeWindow/CS/form1.cs#2)]
 [!code-vb[NativeWindow#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/NativeWindow/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Zastępuje tę metodę do zaimplementowania przetwarzania określonego komunikatu. Wywołanie <c>podstawowej. WndProc</c> nieobsługiwany komunikatów.</para>
        </block>
        <altmember cref="P:System.Windows.Forms.NativeWindow.Handle" />
        <altmember cref="T:System.Windows.Forms.Message" />
        <altmember cref="M:System.Windows.Forms.Application.SetUnhandledExceptionMode(System.Windows.Forms.UnhandledExceptionMode)" />
        <altmember cref="M:System.Windows.Forms.NativeWindow.OnThreadException(System.Exception)" />
      </Docs>
    </Member>
  </Members>
</Type>