<Type Name="ListBox+ObjectCollection" FullName="System.Windows.Forms.ListBox+ObjectCollection">
  <Metadata><Meta Name="ms.openlocfilehash" Value="9fd081b80cd0f2058c3fa2e1453a2d310e73ff10" /><Meta Name="ms.sourcegitcommit" Value="8e213bb5e6801f6e29861ba72664978ad00e34fa" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="02/18/2019" /><Meta Name="ms.locfileid" Value="56380453" /></Metadata><TypeSignature Language="C#" Value="public class ListBox.ObjectCollection : System.Collections.IList" />
  <TypeSignature Language="ILAsm" Value=".class nested public auto ansi beforefieldinit ListBox/ObjectCollection extends System.Object implements class System.Collections.ICollection, class System.Collections.IEnumerable, class System.Collections.IList" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.ListBox.ObjectCollection" />
  <TypeSignature Language="VB.NET" Value="Public Class ListBox.ObjectCollection&#xA;Implements IList" />
  <TypeSignature Language="C++ CLI" Value="public: ref class ListBox::ObjectCollection : System::Collections::IList" />
  <TypeSignature Language="F#" Value="type ListBox.ObjectCollection = class&#xA;    interface IList&#xA;    interface ICollection&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IList</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.ListBindable(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Reprezentuje kolekcję elementów na liście <see cref="T:System.Windows.Forms.ListBox" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListBox.ObjectCollection> Klasa przechowuje elementy wyświetlane w <xref:System.Windows.Forms.ListBox>. Istnieją dwie inne kolekcje zdefiniowane <xref:System.Windows.Forms.ListBox> klasy, które umożliwiają określenie, jakie elementy są zaznaczone w tej kolekcji. <xref:System.Windows.Forms.ListBox.SelectedObjectCollection> Klasa udostępnia właściwości i metod do określania, jakie elementy są zaznaczone w <xref:System.Windows.Forms.ListBox.ObjectCollection>, podczas gdy <xref:System.Windows.Forms.ListBox.SelectedIndexCollection> klasy umożliwia określenie, jakie indeksy w <xref:System.Windows.Forms.ListBox.ObjectCollection> są zaznaczone.  
  
 Istnieją różne sposoby, aby dodać elementy do kolekcji. <xref:System.Windows.Forms.ListBox.ObjectCollection.Add%2A> Metoda zapewnia możliwość dodawania jednego obiektu do kolekcji. Aby dodać wiele obiektów do kolekcji, utworzyć tablicę elementów i przypisz ją do <xref:System.Windows.Forms.ListBox.ObjectCollection.AddRange%2A> metody. Jeśli chcesz wstawić obiektu z określonej lokalizacji w tej kolekcji, możesz użyć <xref:System.Windows.Forms.ListBox.ObjectCollection.Insert%2A> metody. Aby usunąć elementy, można użyć albo <xref:System.Windows.Forms.ListBox.ObjectCollection.Remove%2A> metody lub <xref:System.Windows.Forms.ListBox.ObjectCollection.RemoveAt%2A> metodę, jeśli wiesz, gdzie element znajduje się w tej kolekcji. <xref:System.Windows.Forms.ListBox.ObjectCollection.Clear%2A> Metoda umożliwia usunięcie wszystkich elementów z kolekcji zamiast <xref:System.Windows.Forms.ListBox.ObjectCollection.Remove%2A> metodę, aby usunąć pojedynczy element w danym momencie.  
  
 Możesz też manipulować elementy <xref:System.Windows.Forms.ListBox> przy użyciu <xref:System.Windows.Forms.ListControl.DataSource%2A> właściwości. Jeśli używasz <xref:System.Windows.Forms.ListControl.DataSource%2A> właściwości, aby dodać elementy do <xref:System.Windows.Forms.ListBox>, można wyświetlać elementy w <xref:System.Windows.Forms.ListBox> przy użyciu <xref:System.Windows.Forms.ListBox.Items%2A> właściwość, ale nie można dodać lub usunąć elementy z listy za pomocą metody <xref:System.Windows.Forms.ListBox.ObjectCollection>.  
  
 Oprócz metod i właściwości do dodawania i usuwania elementów <xref:System.Windows.Forms.ListBox.ObjectCollection> zapewnia także metody, aby znaleźć elementy w kolekcji. <xref:System.Windows.Forms.ListBox.ObjectCollection.Contains%2A> Metody umożliwia określenie, czy obiekt jest członkiem kolekcji. Gdy wiesz, że element znajduje się w tej kolekcji, możesz użyć <xref:System.Windows.Forms.ListBox.ObjectCollection.IndexOf%2A> metodę, aby określić, gdzie element znajduje się w tej kolekcji.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje, rysowanych przez właściciela <xref:System.Windows.Forms.ListBox> , ustawiając <xref:System.Windows.Forms.ListBox.DrawMode%2A> właściwości `OwnerDrawVariable` wartość i obsługa <xref:System.Windows.Forms.ListBox.DrawItem> i <xref:System.Windows.Forms.ListBox.MeasureItem> zdarzenia. Ilustruje też ustawienie <xref:System.Windows.Forms.ListBox.BorderStyle%2A> i <xref:System.Windows.Forms.ListBox.ScrollAlwaysVisible%2A> właściwości i za pomocą <xref:System.Windows.Forms.ListBox.ObjectCollection.AddRange%2A> metody.  
  
 Aby uruchomić ten przykład, wkleić go do pusty formularz, który importuje <xref:System.Drawing> przestrzeni nazw i <xref:System.Windows.Forms> przestrzeni nazw. Wywołaj `InitializeOwnerDrawnListBox` z konstruktora formularza lub `Load` metody.  
  
 [!code-cpp[System.Windows.Forms.ListBoxExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListBoxExample/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListBoxExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListBoxExample/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListBoxExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListBoxExample/VB/form1.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.ListBox.SelectedObjectCollection" />
    <altmember cref="T:System.Windows.Forms.ListBox.SelectedIndexCollection" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Forms.ListBox.ObjectCollection" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ObjectCollection (System.Windows.Forms.ListBox owner);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Forms.ListBox owner) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.ObjectCollection.#ctor(System.Windows.Forms.ListBox)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (owner As ListBox)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ObjectCollection(System::Windows::Forms::ListBox ^ owner);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.ListBox.ObjectCollection : System.Windows.Forms.ListBox -&gt; System.Windows.Forms.ListBox.ObjectCollection" Usage="new System.Windows.Forms.ListBox.ObjectCollection owner" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="owner" Type="System.Windows.Forms.ListBox" />
      </Parameters>
      <Docs>
        <param name="owner"><see cref="T:System.Windows.Forms.ListBox" /> , Który jest właścicielem kolekcji.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Forms.ListBox.ObjectCollection" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nie można utworzyć wystąpienia tej klasy, bez skojarzenia z <xref:System.Windows.Forms.ListBox> kontroli.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ObjectCollection (System.Windows.Forms.ListBox owner, object[] value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Forms.ListBox owner, object[] value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.ObjectCollection.#ctor(System.Windows.Forms.ListBox,System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (owner As ListBox, value As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ObjectCollection(System::Windows::Forms::ListBox ^ owner, cli::array &lt;System::Object ^&gt; ^ value);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.ListBox.ObjectCollection : System.Windows.Forms.ListBox * obj[] -&gt; System.Windows.Forms.ListBox.ObjectCollection" Usage="new System.Windows.Forms.ListBox.ObjectCollection (owner, value)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="owner" Type="System.Windows.Forms.ListBox" />
        <Parameter Name="value" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="owner"><see cref="T:System.Windows.Forms.ListBox" /> , Który jest właścicielem kolekcji.</param>
        <param name="value">Tablica obiektów do dodania do kolekcji.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Forms.ListBox.ObjectCollection" /> zawierający tablicę obiektów.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nie można utworzyć wystąpienia tej klasy, bez skojarzenia z <xref:System.Windows.Forms.ListBox> kontroli.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ObjectCollection (System.Windows.Forms.ListBox owner, System.Windows.Forms.ListBox.ObjectCollection value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Forms.ListBox owner, class System.Windows.Forms.ListBox/ObjectCollection value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.ObjectCollection.#ctor(System.Windows.Forms.ListBox,System.Windows.Forms.ListBox.ObjectCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (owner As ListBox, value As ListBox.ObjectCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ObjectCollection(System::Windows::Forms::ListBox ^ owner, System::Windows::Forms::ListBox::ObjectCollection ^ value);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.ListBox.ObjectCollection : System.Windows.Forms.ListBox * System.Windows.Forms.ListBox.ObjectCollection -&gt; System.Windows.Forms.ListBox.ObjectCollection" Usage="new System.Windows.Forms.ListBox.ObjectCollection (owner, value)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="owner" Type="System.Windows.Forms.ListBox" />
        <Parameter Name="value" Type="System.Windows.Forms.ListBox+ObjectCollection" />
      </Parameters>
      <Docs>
        <param name="owner"><see cref="T:System.Windows.Forms.ListBox" /> , Który jest właścicielem kolekcji.</param>
        <param name="value">A <see cref="T:System.Windows.Forms.ListBox.ObjectCollection" /> z którym zawartość jest kopiowana do tej kolekcji.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Forms.ListBox.ObjectCollection" /> oparte na innym <see cref="T:System.Windows.Forms.ListBox.ObjectCollection" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nie można utworzyć wystąpienia tej klasy, bez skojarzenia z <xref:System.Windows.Forms.ListBox> kontroli. Ta wersja konstruktora pozwala przy użyciu elementów określonych w istniejącym wystąpieniu programu <xref:System.Windows.Forms.ListBox.ObjectCollection> klasy, aby dodać elementy do kolekcji, podczas jego tworzenia. Można użyć tego konstruktora do użycia elementów określony w innym <xref:System.Windows.Forms.ListBox> kontrolki z tą kolekcją.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public int Add (object item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Add(object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.ObjectCollection.Add(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Add (item As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Add(System::Object ^ item);" />
      <MemberSignature Language="F#" Value="member this.Add : obj -&gt; int" Usage="objectCollection.Add item" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Add(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="item">Obiekt reprezentujący element do dodania do kolekcji.</param>
        <summary>Dodaje element do listy elementów do <see cref="T:System.Windows.Forms.ListBox" />.</summary>
        <returns>Liczony od zera indeks elementu w kolekcji lub wartość-1, jeśli <see cref="M:System.Windows.Forms.ListBox.BeginUpdate" /> została wywołana.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli <xref:System.Windows.Forms.ListBox.Sorted%2A> właściwość <xref:System.Windows.Forms.ListBox> ustawiono `true`, element jest umieszczone na liście w kolejności alfabetycznej. W przeciwnym razie element jest wstawiany na końcu listy. Aby wstawić element do pola listy na określonej pozycji, użyj <xref:System.Windows.Forms.ListBox.ObjectCollection.Insert%2A> metody. Aby dodać zestaw elementów do pola listy, w ramach jednej operacji, użyj <xref:System.Windows.Forms.ListBox.ObjectCollection.AddRange%2A> metody. Jeśli chcesz używać <xref:System.Windows.Forms.ListBox.ObjectCollection.Add%2A> metodę, aby dodać dużą liczbę elementów do listy, użyj <xref:System.Windows.Forms.ListBox.BeginUpdate%2A> i <xref:System.Windows.Forms.ListBox.EndUpdate%2A> metody, aby zapobiec <xref:System.Windows.Forms.ListBox> z odświeżenie na każdym dodaniu elementu do listy do momentu wszystkie elementy są dodawane do listy. Podczas dodawania elementów do <xref:System.Windows.Forms.ListBox>, jest bardziej wydajne elementy można sortować najpierw, a następnie dodaj nowe elementy.  
  
 Gdy obiekt zostanie dodany do kolekcji, <xref:System.Windows.Forms.ListBox> najpierw sprawdza, czy aby sprawdzić, czy <xref:System.Windows.Forms.ListControl.DisplayMember%2A> właściwość <xref:System.Windows.Forms.ListControl> klasy ma nazwę elementu członkowskiego w obiekcie określonym do odwołania podczas uzyskiwania tekstu elementu. Jeśli <xref:System.Windows.Forms.ListControl.DisplayMember%2A> właściwość nie ma członka, który został określony, <xref:System.Windows.Forms.ListBox> następnie wywołuje <xref:System.Object.ToString%2A> metody obiektu można uzyskać tekst do wyświetlenia na liście.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje sposób tworzenia <xref:System.Windows.Forms.ListBox> formant, który zawiera wiele elementów w kolumnach i może mieć więcej niż jeden element zaznaczony na liście formantu. Przykładowy kod dodaje 50 elementów do <xref:System.Windows.Forms.ListBox> przy użyciu <xref:System.Windows.Forms.ListBox.ObjectCollection.Add%2A> metody <xref:System.Windows.Forms.ListBox.ObjectCollection> klasy, a następnie wybiera trzy elementy z listy przy użyciu <xref:System.Windows.Forms.ListBox.SetSelected%2A> metody. Kod następnie wyświetla wartości z <xref:System.Windows.Forms.ListBox.SelectedObjectCollection> kolekcji (za pośrednictwem <xref:System.Windows.Forms.ListBox.SelectedItems%2A> właściwości) i <xref:System.Windows.Forms.ListBox.SelectedIndexCollection> (za pośrednictwem <xref:System.Windows.Forms.ListBox.SelectedIndices%2A> właściwości). W tym przykładzie wymaga czy kod jest na terenie i wywoływane z <xref:System.Windows.Forms.Form>.  
  
 [!code-cpp[Classic ListBox Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic ListBox Example/CPP/source.cpp#1)]
 [!code-csharp[Classic ListBox Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic ListBox Example/CS/source.cs#1)]
 [!code-vb[Classic ListBox Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic ListBox Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.SystemException">Ma za mało miejsca dodać nowy element do listy.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="item" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="AddRange">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Dodaje grupę elementów na liście elementów <see cref="T:System.Windows.Forms.ListBox" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="AddRange">
      <MemberSignature Language="C#" Value="public void AddRange (object[] items);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddRange(object[] items) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.ObjectCollection.AddRange(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddRange (items As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddRange(cli::array &lt;System::Object ^&gt; ^ items);" />
      <MemberSignature Language="F#" Value="member this.AddRange : obj[] -&gt; unit" Usage="objectCollection.AddRange items" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="items">Tablica obiektów, aby dodać do listy.</param>
        <summary>Dodaje tablica elementów do listy elementów do <see cref="T:System.Windows.Forms.ListBox" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli <xref:System.Windows.Forms.ListBox.Sorted%2A> właściwość <xref:System.Windows.Forms.ListBox> ustawiono `true`, elementy są umieszczone na liście w kolejności alfabetycznej. W przeciwnym razie elementy są wstawiane w kolejności występowania w tablicy. Ta metoda jest zwykle przekazywany tablicę <xref:System.String> obiektów, ale tablica obiekty dowolnego typu może być przekazywany do tej metody. Gdy obiekt zostanie dodany do kolekcji, <xref:System.Windows.Forms.ListBox> najpierw sprawdza, czy aby sprawdzić, czy <xref:System.Windows.Forms.ListControl.DisplayMember%2A> właściwość <xref:System.Windows.Forms.ListControl> klasy ma nazwę elementu członkowskiego w obiekcie określonym do odwołania podczas uzyskiwania tekstu elementu. Jeśli <xref:System.Windows.Forms.ListControl.DisplayMember%2A> właściwość nie ma członka, który został określony, <xref:System.Windows.Forms.ListBox> następnie wywołuje <xref:System.Object.ToString%2A> metody obiektu można uzyskać tekst do wyświetlenia na liście. Przy użyciu tej metody, aby dodać elementy do <xref:System.Windows.Forms.ListBox>, nie trzeba wywoływać <xref:System.Windows.Forms.ListBox.BeginUpdate%2A> i <xref:System.Windows.Forms.ListBox.EndUpdate%2A> metod w celu zoptymalizowania wydajności. Podczas dodawania elementów do <xref:System.Windows.Forms.ListBox>, jest bardziej wydajne elementy można sortować najpierw, a następnie dodaj nowe elementy. Można użyć tej metody, aby dodać grupę elementów do listy lub ponownie użyć elementy przechowywane w innej <xref:System.Windows.Forms.ListBox>.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje, rysowanych przez właściciela <xref:System.Windows.Forms.ListBox> , ustawiając <xref:System.Windows.Forms.ListBox.DrawMode%2A> właściwości `OwnerDrawVariable` wartość i obsługa <xref:System.Windows.Forms.ListBox.DrawItem> i <xref:System.Windows.Forms.ListBox.MeasureItem> zdarzenia. Ilustruje też ustawienie <xref:System.Windows.Forms.ListBox.BorderStyle%2A> i <xref:System.Windows.Forms.ListBox.ScrollAlwaysVisible%2A> właściwości i za pomocą <xref:System.Windows.Forms.ListBox.ObjectCollection.AddRange%2A> metody.  
  
 Aby uruchomić ten przykład, wkleić go do pusty formularz, który importuje <xref:System.Drawing> przestrzeni nazw i <xref:System.Windows.Forms> przestrzeni nazw. Wywołaj `InitializeOwnerDrawnListBox` z konstruktora formularza lub `Load` metody.  
  
 [!code-cpp[System.Windows.Forms.ListBoxExample#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListBoxExample/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListBoxExample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListBoxExample/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListBoxExample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListBoxExample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ListBox.ObjectCollection.Add(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="AddRange">
      <MemberSignature Language="C#" Value="public void AddRange (System.Windows.Forms.ListBox.ObjectCollection value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddRange(class System.Windows.Forms.ListBox/ObjectCollection value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.ObjectCollection.AddRange(System.Windows.Forms.ListBox.ObjectCollection)" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddRange (value As ListBox.ObjectCollection)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddRange(System::Windows::Forms::ListBox::ObjectCollection ^ value);" />
      <MemberSignature Language="F#" Value="member this.AddRange : System.Windows.Forms.ListBox.ObjectCollection -&gt; unit" Usage="objectCollection.AddRange value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Windows.Forms.ListBox+ObjectCollection" />
      </Parameters>
      <Docs>
        <param name="value">A <see cref="T:System.Windows.Forms.ListBox.ObjectCollection" /> do załadowania do tej kolekcji.</param>
        <summary>Dodaje elementy do istniejącego <see cref="T:System.Windows.Forms.ListBox.ObjectCollection" /> do listy elementów w <see cref="T:System.Windows.Forms.ListBox" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli <xref:System.Windows.Forms.ListBox.Sorted%2A> właściwość <xref:System.Windows.Forms.ListBox> ustawiono `true`, elementy są umieszczone na liście w kolejności alfabetycznej. W przeciwnym razie elementy są wstawiane w kolejności występowania w tablicy. Ta metoda jest zwykle przekazywany tablicę <xref:System.String> obiektów, ale tablica obiekty dowolnego typu może być przekazywany do tej metody. Gdy obiekt zostanie dodany do kolekcji, <xref:System.Windows.Forms.ListBox> najpierw sprawdza, czy aby sprawdzić, czy <xref:System.Windows.Forms.ListControl.DisplayMember%2A> właściwość <xref:System.Windows.Forms.ListControl> klasy ma nazwę elementu członkowskiego w obiekcie określonym do odwołania podczas uzyskiwania tekstu elementu. Jeśli <xref:System.Windows.Forms.ListControl.DisplayMember%2A> właściwość nie ma członka, który został określony, <xref:System.Windows.Forms.ListBox> następnie wywołuje <xref:System.Object.ToString%2A> metody obiektu można uzyskać tekst do wyświetlenia na liście.  
  
 Przy użyciu tej metody, aby dodać elementy do <xref:System.Windows.Forms.ListBox>, nie trzeba wywoływać <xref:System.Windows.Forms.ListBox.BeginUpdate%2A> i <xref:System.Windows.Forms.ListBox.EndUpdate%2A> metod w celu zoptymalizowania wydajności. Podczas dodawania elementów do <xref:System.Windows.Forms.ListBox>, jest bardziej wydajne elementy można sortować najpierw, a następnie dodaj nowe elementy. Ta metoda służy do ponownego użycia elementy przechowywane w innej <xref:System.Windows.Forms.ListBox>.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ListBox.ObjectCollection.Add(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public virtual void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.ObjectCollection.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Clear();" />
      <MemberSignature Language="F#" Value="abstract member Clear : unit -&gt; unit&#xA;override this.Clear : unit -&gt; unit" Usage="objectCollection.Clear " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Usuwa wszystkie elementy z kolekcji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Po usunięciu elementów z listy wszystkich informacji o usuniętych elementów zostaną utracone. Aby usunąć pojedynczy element z <xref:System.Windows.Forms.ListBox>, użyj <xref:System.Windows.Forms.ListBox.ObjectCollection.Remove%2A> lub <xref:System.Windows.Forms.ListBox.ObjectCollection.RemoveAt%2A> metody.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Contains(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.ObjectCollection.Contains(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Contains(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member Contains : obj -&gt; bool&#xA;override this.Contains : obj -&gt; bool" Usage="objectCollection.Contains value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Contains(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Obiekt reprezentujący element do zlokalizowania w kolekcji.</param>
        <summary>Określa, czy określony element znajduje się w tej kolekcji.</summary>
        <returns><see langword="true" /> Jeśli element znajduje się w kolekcji; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListBox.ObjectCollection.Contains%2A> Metody umożliwia określenie, czy obiekt jest członkiem kolekcji. Gdy wiesz, że element znajduje się w tej kolekcji, możesz użyć <xref:System.Windows.Forms.ListBox.ObjectCollection.IndexOf%2A> metodę, aby określić, gdzie element znajduje się w tej kolekcji.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="value" /> jest <see langword="null" />.</exception>
        <altmember cref="M:System.Windows.Forms.ListBox.ObjectCollection.IndexOf(System.Object)" />
        <altmember cref="M:System.Windows.Forms.ListBox.FindString(System.String)" />
        <altmember cref="M:System.Windows.Forms.ListBox.FindStringExact(System.String)" />
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (object[] dest, int arrayIndex);" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(object[] dest, int32 arrayIndex) cil managed" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.ObjectCollection.CopyTo(System.Object[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (dest As Object(), arrayIndex As Integer)" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(cli::array &lt;System::Object ^&gt; ^ dest, int arrayIndex);" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="F#" Value="member this.CopyTo : obj[] * int -&gt; unit" Usage="objectCollection.CopyTo (dest, arrayIndex)" FrameworkAlternate="netcore-3.0;netframework-1.1;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      <MemberSignature Language="C#" Value="public void CopyTo (object[] destination, int arrayIndex);" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(object[] destination, int32 arrayIndex) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (destination As Object(), arrayIndex As Integer)" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(cli::array &lt;System::Object ^&gt; ^ destination, int arrayIndex);" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      <MemberSignature Language="F#" Value="member this.CopyTo : obj[] * int -&gt; unit" Usage="objectCollection.CopyTo (destination, arrayIndex)" FrameworkAlternate="netframework-2.0" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dest" Type="System.Object[]" Index="0" FrameworkAlternate="netframework-1.1" />
        <Parameter Name="destination" Type="System.Object[]" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="arrayIndex" Type="System.Int32" Index="1" />
      </Parameters>
      <Docs>
        <param name="destination">Tablica obiektów, do której są kopiowane elementy z kolekcji.</param>
        <param name="dest">Tablica obiektów, do której są kopiowane elementy z kolekcji.</param>
        <param name="arrayIndex">Lokalizacja, w tablicy docelowej, aby skopiować elementy z kolekcji.</param>
        <summary>Kopiuje całą kolekcję do istniejącej tablicy obiektów w określonej lokalizacji w tablicy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda umożliwia łączenie elementów z wieloma kolekcjami w jedną. Następnie można użyć tej tablicy, do wypełniania zawartość innego <xref:System.Windows.Forms.ListBox> sterować za pomocą <xref:System.Windows.Forms.ListBox.ObjectCollection.AddRange%2A> metody <xref:System.Windows.Forms.ListBox.ObjectCollection> klasy.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.ObjectCollection.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Windows.Forms.ListBox.ObjectCollection.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera liczbę elementów w kolekcji.</summary>
        <value>Liczba elementów w kolekcji</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość umożliwia określenie liczby elementów w <xref:System.Windows.Forms.ListBox>. Następnie można użyć tej wartości, gdy są pętli wartości kolekcji należy podać liczbę iteracji do wykonania pętli.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.ObjectCollection.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IEnumerator ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.IEnumerator&#xA;override this.GetEnumerator : unit -&gt; System.Collections.IEnumerator" Usage="objectCollection.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca moduł wyliczający służące do iterowania po kolekcji elementów.</summary>
        <returns><see cref="T:System.Collections.IEnumerator" /> Reprezentujący kolekcji elementów.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.ObjectCollection.IndexOf(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (value As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member IndexOf : obj -&gt; int&#xA;override this.IndexOf : obj -&gt; int" Usage="objectCollection.IndexOf value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.IndexOf(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Obiekt reprezentujący element do zlokalizowania w kolekcji.</param>
        <summary>Zwraca indeks w kolekcji określonego elementu.</summary>
        <returns>Liczony od zera indeks, w którym element znajduje się w kolekcji; w przeciwnym razie wartość ujemną (-1).</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ListBox.ObjectCollection.IndexOf%2A> Metody umożliwia określenie, gdzie element znajduje się w tej kolekcji. Aby określić, czy element znajduje się w obrębie kolekcji przed wywołaniem tej metody, należy użyć <xref:System.Windows.Forms.ListBox.ObjectCollection.Contains%2A> metody.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="value" /> Parametr ma wartość null.</exception>
        <altmember cref="M:System.Windows.Forms.ListBox.ObjectCollection.Contains(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public void Insert (int index, object item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Insert(int32 index, object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.ObjectCollection.Insert(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Insert (index As Integer, item As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Insert(int index, System::Object ^ item);" />
      <MemberSignature Language="F#" Value="abstract member Insert : int * obj -&gt; unit&#xA;override this.Insert : int * obj -&gt; unit" Usage="objectCollection.Insert (index, item)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Insert(System.Int32,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index">Lokalizacja liczony od zera indeks polegający na wstawieniu elementu.</param>
        <param name="item">Obiekt reprezentujący element do wstawienia.</param>
        <summary>Wstawia element do pola listy w określonym indeksie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda umożliwia wstawianie elementu na określonej pozycji w ciągu <xref:System.Windows.Forms.ListBox>. Jeśli <xref:System.Windows.Forms.ListBox.Sorted%2A> właściwość <xref:System.Windows.Forms.ListBox> jest ustawiona na wartość true, element jest dodawany w odpowiednich miejscach w posortowanej listy niezależnie od wartości określonej w `index` parametru. Gdy obiekt zostanie dodany do kolekcji, <xref:System.Windows.Forms.ListBox> najpierw sprawdza, czy aby sprawdzić, czy <xref:System.Windows.Forms.ListControl.DisplayMember%2A> właściwość <xref:System.Windows.Forms.ListControl> klasy ma nazwę elementu członkowskiego w obiekcie określonym do odwołania podczas uzyskiwania tekstu elementu. Jeśli <xref:System.Windows.Forms.ListControl.DisplayMember%2A> właściwość nie ma członka, który został określony, <xref:System.Windows.Forms.ListBox> następnie wywołuje <xref:System.Object.ToString%2A> metody obiektu można uzyskać tekst do wyświetlenia na liście.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> Parametr jest mniejsza od zera lub większa niż wartość <see cref="P:System.Windows.Forms.ListBox.ObjectCollection.Count" /> właściwość <see cref="T:System.Windows.Forms.ListBox.ObjectCollection" /> klasy.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="item" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.ObjectCollection.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReadOnly : bool" Usage="System.Windows.Forms.ListBox.ObjectCollection.IsReadOnly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy kolekcja jest tylko do odczytu.</summary>
        <value><see langword="true" /> Jeśli ta kolekcja jest tylko do odczytu. w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość jest zawsze `false` dla tej kolekcji.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public virtual object this[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.ObjectCollection.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public Overridable Property Item(index As Integer) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Object ^ default[int] { System::Object ^ get(int index); void set(int index, System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Item(int) : obj with get, set" Usage="System.Windows.Forms.ListBox.ObjectCollection.Item" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.Item(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Indeks elementu w kolekcji do pobrania lub ustawienia.</param>
        <summary>Pobiera lub ustawia element pod określonym indeksem w tej kolekcji.</summary>
        <value>Obiekt reprezentujący element znajdujący się w określonym indeksie kolekcji.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda służy do uzyskiwania <xref:System.Windows.Forms.ListBox> elementu przechowywaną w określonej lokalizacji w tej kolekcji. Aby określić indeks konkretny element w kolekcji, użyj <xref:System.Windows.Forms.ListBox.ObjectCollection.IndexOf%2A> metody.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> Parametru jest mniejsza od zera i mniejszy niż wartość <see cref="P:System.Windows.Forms.ListBox.ObjectCollection.Count" /> właściwość <see cref="T:System.Windows.Forms.ListBox.ObjectCollection" /> klasy.</exception>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Remove(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.ObjectCollection.Remove(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Remove(System::Object ^ value);" />
      <MemberSignature Language="F#" Value="abstract member Remove : obj -&gt; unit&#xA;override this.Remove : obj -&gt; unit" Usage="objectCollection.Remove value" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Remove(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Obiekt reprezentujący element do usunięcia z kolekcji.</param>
        <summary>Usuwa określony obiekt z kolekcji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Po usunięciu elementu z listy indeksów zmienić w przypadku kolejnych elementów na liście. Wszystkie informacje o usunięty element zostanie usunięty. Aby usunąć określony element z listy, określając rzeczywisty element, aby usunąć z listy, można użyć tej metody. Aby określić indeks elementu do usunięcia, a nie sam element, należy użyć <xref:System.Windows.Forms.ListBox.ObjectCollection.RemoveAt%2A> metody. Aby usunąć wszystkie elementy z listy, należy użyć <xref:System.Windows.Forms.ListBox.ObjectCollection.Clear%2A> metody.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.ListBox.ObjectCollection.Clear" />
        <altmember cref="M:System.Windows.Forms.ListBox.ObjectCollection.RemoveAt(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.ObjectCollection.RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAt (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveAt(int index);" />
      <MemberSignature Language="F#" Value="abstract member RemoveAt : int -&gt; unit&#xA;override this.RemoveAt : int -&gt; unit" Usage="objectCollection.RemoveAt index" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.RemoveAt(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Liczony od zera indeks elementu, który ma zostać usunięty.</param>
        <summary>Usuwa element o określonym indeksie kolekcji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Po usunięciu elementu z listy indeksów zmienić w przypadku kolejnych elementów na liście. Wszystkie informacje o usunięty element zostanie usunięty. Ta metoda służy do usuwania określonego elementu listy, określając indeks elementu do usunięcia z listy. Aby określić element do usunięcia, a nie wskaźnik do elementu, użyj <xref:System.Windows.Forms.ListBox.ObjectCollection.Remove%2A> metody. Aby usunąć wszystkie elementy z listy, należy użyć <xref:System.Windows.Forms.ListBox.ObjectCollection.Clear%2A> metody.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje sposób używania <xref:System.Windows.Forms.ListBox.SelectedIndex%2A> właściwość o <xref:System.Windows.Forms.ListBox.TopIndex%2A> właściwości, aby przenieść aktualnie wybranego elementu do górnej części listy elementów w obszarze podglądu <xref:System.Windows.Forms.ListBox>. Dalej pokazuje, jak i usuwanie elementów za pomocą <xref:System.Windows.Forms.ListBox.ObjectCollection.RemoveAt%2A> metody <xref:System.Windows.Forms.ListBox.ObjectCollection?displayProperty=nameWithType> klasy i jak wyczyścić wszystkie zaznaczenia elementu przy użyciu <xref:System.Windows.Forms.ListBox.ClearSelected%2A> metody. Kod najpierw Przenosi zaznaczony element w <xref:System.Windows.Forms.ListBox> na górze listy. Następnie kod usuwa wszystkie elementy przed aktualnie wybranego elementu i czyści wszystkie wybory w <xref:System.Windows.Forms.ListBox>. W tym przykładzie wymaga, aby <xref:System.Windows.Forms.ListBox> zawierające elementy zostanie dodany do formularza, a element jest aktualnie wybrany w <xref:System.Windows.Forms.ListBox>.  
  
 [!code-cpp[ListBox.SelectedIndex#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ListBox.SelectedIndex/CPP/form1.cpp#1)]
 [!code-csharp[ListBox.SelectedIndex#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ListBox.SelectedIndex/CS/form1.cs#1)]
 [!code-vb[ListBox.SelectedIndex#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ListBox.SelectedIndex/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> Parametru jest mniejsza od zera i mniejszy niż wartość <see cref="P:System.Windows.Forms.ListBox.ObjectCollection.Count" /> właściwość <see cref="T:System.Windows.Forms.ListBox.ObjectCollection" /> klasy.</exception>
        <altmember cref="M:System.Windows.Forms.ListBox.ObjectCollection.Clear" />
        <altmember cref="M:System.Windows.Forms.ListBox.ObjectCollection.Remove(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.CopyTo">
      <MemberSignature Language="C#" Value="void ICollection.CopyTo (Array dest, int index);" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.ICollection.CopyTo(class System.Array dest, int32 index) cil managed" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.ObjectCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Sub CopyTo (dest As Array, index As Integer) Implements ICollection.CopyTo" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.ICollection.CopyTo(Array ^ dest, int index) = System::Collections::ICollection::CopyTo;" FrameworkAlternate="netframework-1.1" />
      <MemberSignature Language="C#" Value="void ICollection.CopyTo (Array destination, int index);" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.ICollection.CopyTo(class System.Array destination, int32 index) cil managed" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      <MemberSignature Language="VB.NET" Value="Sub CopyTo (destination As Array, index As Integer) Implements ICollection.CopyTo" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.ICollection.CopyTo(Array ^ destination, int index) = System::Collections::ICollection::CopyTo;" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dest" Type="System.Array" Index="0" FrameworkAlternate="netframework-1.1" />
        <Parameter Name="destination" Type="System.Array" Index="0" FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0" />
        <Parameter Name="index" Type="System.Int32" Index="1" />
      </Parameters>
      <Docs>
        <param name="destination">Jednowymiarowa tablica, która jest lokalizacją docelową elementów kopiowanych z <see cref="T:System.Collections.ICollection" />. Tablica musi mieć indeksowane zaczynające od zera.</param>
        <param name="dest">Jednowymiarowa tablica, która jest lokalizacją docelową elementów kopiowanych z <see cref="T:System.Collections.ICollection" />. Tablica musi mieć indeksowane zaczynające od zera.</param>
        <param name="index">Rozpoczyna się od zera indeks w tablicy, w których kopiowanie.</param>
        <summary>Kopiuje elementy kolekcji do tablicy, zaczynając od określonego indeksu tablicy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Mogą być używane tylko wtedy, gdy <xref:System.Windows.Forms.ListBox.ObjectCollection> wystąpienia jest rzutowany na <xref:System.Collections.ICollection> interfejsu.  
  
 ]]></format>
        </remarks>
        <forInternalUseOnly />
        <exception cref="T:System.ArrayTypeMismatchException">Typ tablicy nie jest zgodny z elementami w <see cref="T:System.Windows.Forms.ListBox.ObjectCollection" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.IsSynchronized">
      <MemberSignature Language="C#" Value="bool System.Collections.ICollection.IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.ICollection.IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.ObjectCollection.System#Collections#ICollection#IsSynchronized" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsSynchronized As Boolean Implements ICollection.IsSynchronized" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::ICollection::IsSynchronized { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ICollection.IsSynchronized" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Aby uzyskać opis tego elementu członkowskiego, zobacz <see cref="P:System.Collections.ICollection.IsSynchronized" />.</summary>
        <value><see langword="false" /> we wszystkich przypadkach.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Mogą być używane tylko wtedy, gdy <xref:System.Windows.Forms.ListBox.ObjectCollection> wystąpienia jest rzutowany na <xref:System.Collections.ICollection> interfejsu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.SyncRoot">
      <MemberSignature Language="C#" Value="object System.Collections.ICollection.SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.ICollection.SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.ObjectCollection.System#Collections#ICollection#SyncRoot" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property SyncRoot As Object Implements ICollection.SyncRoot" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::ICollection::SyncRoot { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ICollection.SyncRoot" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Aby uzyskać opis tego elementu członkowskiego, zobacz <see cref="P:System.Collections.ICollection.SyncRoot" />.</summary>
        <value>Obiekt, który może służyć do synchronizowania dostępu do <see cref="T:System.Windows.Forms.ListBox.ObjectCollection" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Mogą być używane tylko wtedy, gdy <xref:System.Windows.Forms.ListBox.ObjectCollection> wystąpienia jest rzutowany na <xref:System.Collections.ICollection> interfejsu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Add">
      <MemberSignature Language="C#" Value="int IList.Add (object item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.Add(object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListBox.ObjectCollection.System#Collections#IList#Add(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Add (item As Object) As Integer Implements IList.Add" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IList.Add(System::Object ^ item) = System::Collections::IList::Add;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Add(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="item">Obiekt, który ma zostać dodany do <see cref="T:System.Windows.Forms.ListBox" />.</param>
        <summary>Dodaje obiekt, do którego <see cref="T:System.Windows.Forms.ListBox" /> klasy.</summary>
        <returns>To be added.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Mogą być używane tylko wtedy, gdy <xref:System.Windows.Forms.ListBox.ObjectCollection> wystąpienia jest rzutowany na <xref:System.Collections.IList> interfejsu.  
  
 ]]></format>
        </remarks>
        <forInternalUseOnly />
        <exception cref="T:System.ArgumentNullException"><paramref name="item" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">Bieżący <see cref="T:System.Windows.Forms.ListBox" /> ma źródła danych.</exception>
        <exception cref="T:System.SystemException">Ma za mało miejsca zapisać nowy element.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IsFixedSize">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IsFixedSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.IList.IsFixedSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ListBox.ObjectCollection.System#Collections#IList#IsFixedSize" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsFixedSize As Boolean Implements IList.IsFixedSize" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::IList::IsFixedSize { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IList.IsFixedSize" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.IsFixedSize</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Aby uzyskać opis tego elementu członkowskiego, zobacz <see cref="P:System.Collections.IList.IsFixedSize" />.</summary>
        <value><see langword="true" /> we wszystkich przypadkach.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Mogą być używane tylko wtedy, gdy <xref:System.Windows.Forms.ListBox.ObjectCollection> wystąpienia jest rzutowany na <xref:System.Collections.IList> interfejsu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>