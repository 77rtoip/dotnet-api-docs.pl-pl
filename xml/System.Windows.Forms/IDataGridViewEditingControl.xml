<Type Name="IDataGridViewEditingControl" FullName="System.Windows.Forms.IDataGridViewEditingControl">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="50269d82218fb858d594b5025d5cea2d72788127" />
    <Meta Name="ms.sourcegitcommit" Value="9e06b87bcfa4347dbbaaa4b3cc36b43b93b5badb" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="11/20/2018" />
    <Meta Name="ms.locfileid" Value="52193335" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IDataGridViewEditingControl" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDataGridViewEditingControl" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.IDataGridViewEditingControl" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDataGridViewEditingControl" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDataGridViewEditingControl" />
  <TypeSignature Language="F#" Value="type IDataGridViewEditingControl = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Definiuje typowe funkcje dla kontrolek, które są hostowane w komórkach <see cref="T:System.Windows.Forms.DataGridView" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten interfejs jest implementowany przez formanty, takie jak <xref:System.Windows.Forms.DataGridViewComboBoxEditingControl> i <xref:System.Windows.Forms.DataGridViewTextBoxEditingControl>, które są hostowane przez odpowiadający <xref:System.Windows.Forms.DataGridView> komórek, takich jak <xref:System.Windows.Forms.DataGridViewComboBoxCell> i <xref:System.Windows.Forms.DataGridViewTextBoxCell>, gdy są one w trybie edycji.  
  
 Komórka typy, które mogą hostować edycji zestawu formantów ich <xref:System.Windows.Forms.DataGridViewCell.EditType%2A> właściwość <xref:System.Type> reprezentujący edycji kontrolowanie typu. Gdy komórka przejdzie do trybu edycji, wykonywane są następujące czynności:  
  
1.  <xref:System.Windows.Forms.DataGridView> Kontroli tworzy wystąpienie typu kontrolki edycji.  
  
2.  <xref:System.Windows.Forms.DataGridView> Kontrolki wywołuje komórki <xref:System.Windows.Forms.DataGridViewCell.InitializeEditingControl%2A> metody. Można zastąpić tę metodę, aby przenieść wartość komórki do edycji kontrolek.  
  
3.  <xref:System.Windows.Forms.DataGridView> Kontrolki wywołuje kontrolka edycji <xref:System.Windows.Forms.IDataGridViewEditingControl.ApplyCellStyleToEditingControl%2A> metody i przekazuje w stylu bieżącej komórki. Możesz zaimplementować tę metodę, aby zainicjować wyglądu formantu edycji, aby odpowiadały one wygląd komórki.  
  
4.  <xref:System.Windows.Forms.DataGridView> Kontrolki wywołuje kontrolka edycji <xref:System.Windows.Forms.IDataGridViewEditingControl.PrepareEditingControlForEdit%2A> metody. Możesz zaimplementować tę metodę w celu wprowadzenie ostatecznych poprawek do kontrolki edycji, takie jak wybieranie wartości kontrolki.  
  
 Aby uzyskać więcej informacji o implementowaniu <xref:System.Windows.Forms.IDataGridViewEditingControl>, zobacz [instrukcje: kontrolki hosta w komórkach kontrolki DataGridView formularzy Windows](~/docs/framework/winforms/controls/how-to-host-controls-in-windows-forms-datagridview-cells.md).  
  
 Komórka typy, takie jak <xref:System.Windows.Forms.DataGridViewCheckBoxCell> , udostępniają interfejs użytkownika (UI) do określenia wartości bez obsługi edycji Implementowanie kontroli <xref:System.Windows.Forms.IDataGridViewEditingCell> interfejsu. Interfejs użytkownika w tym przypadku jest wyświetlany niezależnie od tego, czy komórka jest w trybie edycji.  
  
 Komórki innych typów, takich jak <xref:System.Windows.Forms.DataGridViewButtonCell>, udostępniają interfejs użytkownika, ale nie przechowuj wartości określonych przez użytkownika. W tym przypadku typ komórki nie implementuje <xref:System.Windows.Forms.IDataGridViewEditingCell> lub edycji kontrolki hosta.  
  
   
  
## Examples  
 W poniższym przykładzie kodu przedstawiono implementację tego interfejsu, która pochodzi od klasy <xref:System.Windows.Forms.DateTimePicker>. W tym przykładzie jest częścią większego przykładu dostępne w [instrukcje: kontrolki hosta w komórkach kontrolki DataGridView formularzy Windows](~/docs/framework/winforms/controls/how-to-host-controls-in-windows-forms-datagridview-cells.md).  
  
 [!code-csharp[System.Windows.Forms.DataGridViewCalendarColumn#300](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewCalendarColumn/CS/datagridviewcalendarcolumn.cs#300)]
 [!code-vb[System.Windows.Forms.DataGridViewCalendarColumn#300](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewCalendarColumn/VB/datagridviewcalendarcolumn.vb#300)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.DataGridView" />
    <altmember cref="T:System.Windows.Forms.DataGridViewCell" />
    <altmember cref="T:System.Windows.Forms.IDataGridViewEditingCell" />
    <altmember cref="T:System.Windows.Forms.DataGridViewComboBoxCell" />
    <altmember cref="T:System.Windows.Forms.DataGridViewComboBoxEditingControl" />
    <altmember cref="T:System.Windows.Forms.DataGridViewTextBoxCell" />
    <altmember cref="P:System.Windows.Forms.DataGridViewCell.EditType" />
    <altmember cref="T:System.Windows.Forms.DataGridViewTextBoxEditingControl" />
    <related type="Article" href="https://msdn.microsoft.com/library/e79a9d4e-64ec-41f5-93ec-f5492633cbb2">Porady: kontrolki hosta w komórkach DataGridView formularzy systemu Windows</related>
  </Docs>
  <Members>
    <Member MemberName="ApplyCellStyleToEditingControl">
      <MemberSignature Language="C#" Value="public void ApplyCellStyleToEditingControl (System.Windows.Forms.DataGridViewCellStyle dataGridViewCellStyle);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void ApplyCellStyleToEditingControl(class System.Windows.Forms.DataGridViewCellStyle dataGridViewCellStyle) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataGridViewEditingControl.ApplyCellStyleToEditingControl(System.Windows.Forms.DataGridViewCellStyle)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ApplyCellStyleToEditingControl(System::Windows::Forms::DataGridViewCellStyle ^ dataGridViewCellStyle);" />
      <MemberSignature Language="F#" Value="abstract member ApplyCellStyleToEditingControl : System.Windows.Forms.DataGridViewCellStyle -&gt; unit" Usage="iDataGridViewEditingControl.ApplyCellStyleToEditingControl dataGridViewCellStyle" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataGridViewCellStyle" Type="System.Windows.Forms.DataGridViewCellStyle" />
      </Parameters>
      <Docs>
        <param name="dataGridViewCellStyle">
          <see cref="T:System.Windows.Forms.DataGridViewCellStyle" /> Służące jako model dla interfejsu użytkownika.</param>
        <summary>Zmienia kontrolki interfejsu użytkownika (UI), aby były zgodne ze stylem określona komórka.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zazwyczaj implementacja tej metody zostanie ustawione właściwości interfejsu użytkownika dla kontrolki edycji, na przykład czcionkę, kolor tła i kolor pierwszego planu wartości odpowiednich właściwości w `dataGridViewCellStyle`, czyli styl używany do hostowania komórki formant.  
  
   
  
## Examples  
 Poniższy przykład kodu zawiera implementację tego elementu członkowskiego. W tym przykładzie jest częścią większego przykładu dostępne w [instrukcje: kontrolki hosta w komórkach kontrolki DataGridView formularzy Windows](~/docs/framework/winforms/controls/how-to-host-controls-in-windows-forms-datagridview-cells.md).  
  
 [!code-csharp[System.Windows.Forms.DataGridViewCalendarColumn#303](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewCalendarColumn/CS/datagridviewcalendarcolumn.cs#303)]
 [!code-vb[System.Windows.Forms.DataGridViewCalendarColumn#303](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewCalendarColumn/VB/datagridviewcalendarcolumn.vb#303)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
        <altmember cref="T:System.Windows.Forms.DataGridViewCellStyle" />
      </Docs>
    </Member>
    <Member MemberName="EditingControlDataGridView">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataGridView EditingControlDataGridView { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.DataGridView EditingControlDataGridView" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.IDataGridViewEditingControl.EditingControlDataGridView" />
      <MemberSignature Language="VB.NET" Value="Public Property EditingControlDataGridView As DataGridView" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::DataGridView ^ EditingControlDataGridView { System::Windows::Forms::DataGridView ^ get(); void set(System::Windows::Forms::DataGridView ^ value); };" />
      <MemberSignature Language="F#" Value="member this.EditingControlDataGridView : System.Windows.Forms.DataGridView with get, set" Usage="System.Windows.Forms.IDataGridViewEditingControl.EditingControlDataGridView" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataGridView</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia <see cref="T:System.Windows.Forms.DataGridView" /> zawierający komórki.</summary>
        <value>
          <see cref="T:System.Windows.Forms.DataGridView" /> Zawierający <see cref="T:System.Windows.Forms.DataGridViewCell" /> , jest edytowany; <see langword="null" /> w przypadku nie skojarzone <see cref="T:System.Windows.Forms.DataGridView" />.</value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
      </Docs>
    </Member>
    <Member MemberName="EditingControlFormattedValue">
      <MemberSignature Language="C#" Value="public object EditingControlFormattedValue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object EditingControlFormattedValue" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.IDataGridViewEditingControl.EditingControlFormattedValue" />
      <MemberSignature Language="VB.NET" Value="Public Property EditingControlFormattedValue As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ EditingControlFormattedValue { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.EditingControlFormattedValue : obj with get, set" Usage="System.Windows.Forms.IDataGridViewEditingControl.EditingControlFormattedValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia sformatowaną wartość komórki, modyfikowana przez edytor.</summary>
        <value>
          <see cref="T:System.Object" /> Reprezentujący sformatowaną wartość komórki.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sformatowana wartość reprezentuje wartość wyświetlaną w interfejsu użytkownika formantu. Sformatowana wartość mogą różnić się w wartość bezwzględna i typ danych nawet od rzeczywistego wartość zawartą w kontrolce.  
  
   
  
## Examples  
 Poniższy przykład kodu zawiera implementację tego elementu członkowskiego. W tym przykładzie jest częścią większego przykładu dostępne w [instrukcje: kontrolki hosta w komórkach kontrolki DataGridView formularzy Windows](~/docs/framework/winforms/controls/how-to-host-controls-in-windows-forms-datagridview-cells.md).  
  
 [!code-csharp[System.Windows.Forms.DataGridViewCalendarColumn#301](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewCalendarColumn/CS/datagridviewcalendarcolumn.cs#301)]
 [!code-vb[System.Windows.Forms.DataGridViewCalendarColumn#301](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewCalendarColumn/VB/datagridviewcalendarcolumn.vb#301)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
        <altmember cref="M:System.Windows.Forms.IDataGridViewEditingControl.GetEditingControlFormattedValue(System.Windows.Forms.DataGridViewDataErrorContexts)" />
        <altmember cref="P:System.Windows.Forms.IDataGridViewEditingControl.EditingControlValueChanged" />
      </Docs>
    </Member>
    <Member MemberName="EditingControlRowIndex">
      <MemberSignature Language="C#" Value="public int EditingControlRowIndex { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 EditingControlRowIndex" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.IDataGridViewEditingControl.EditingControlRowIndex" />
      <MemberSignature Language="VB.NET" Value="Public Property EditingControlRowIndex As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int EditingControlRowIndex { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.EditingControlRowIndex : int with get, set" Usage="System.Windows.Forms.IDataGridViewEditingControl.EditingControlRowIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia indeks wiersza nadrzędnego hostingu komórki.</summary>
        <value>Indeks wiersza, który zawiera komórki lub -1, jeśli istnieje bez wiersza nadrzędnego.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.IDataGridViewEditingControl> Interfejs nie definiuje odpowiednią `ColumnIndex` właściwości. Możesz użyć <xref:System.Windows.Forms.IDataGridViewEditingControl.EditingControlDataGridView%2A> właściwość służąca do pobierania obiektu nadrzędnego <xref:System.Windows.Forms.DataGridView> kontroli i używać <xref:System.Windows.Forms.DataGridView.CurrentCellAddress%2A?displayProperty=nameWithType> właściwości w celu określenia indeksy wierszy i kolumn z aktywną komórką.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
        <altmember cref="T:System.Windows.Forms.DataGridViewRow" />
        <altmember cref="P:System.Windows.Forms.DataGridViewCell.RowIndex" />
      </Docs>
    </Member>
    <Member MemberName="EditingControlValueChanged">
      <MemberSignature Language="C#" Value="public bool EditingControlValueChanged { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool EditingControlValueChanged" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.IDataGridViewEditingControl.EditingControlValueChanged" />
      <MemberSignature Language="VB.NET" Value="Public Property EditingControlValueChanged As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool EditingControlValueChanged { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.EditingControlValueChanged : bool with get, set" Usage="System.Windows.Forms.IDataGridViewEditingControl.EditingControlValueChanged" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy wartość kontrolki edycji różni się od wartości w komórce hostingu.</summary>
        <value>
          <see langword="true" /> Jeśli wartość kontrolki różni się od wartości komórki; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.IDataGridViewEditingControl.EditingControlValueChanged%2A> Właściwość jest ustawiona na `true` oznacza, że hostingu komórki stan został zmieniony i interfejs użytkownika (UI) musi zostać zaktualizowana w celu odzwierciedlenia tej zmiany w wartości. Właścicielem komórki lub tabeli spowoduje zresetowanie tej właściwości, aby `false` po aktualizacji.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Zwracanie <see langword="true" /> w danej implementacji tej właściwości nie automatycznie zmienia wartość wyświetlana. Po zmianie wartości w kontrolce edycji, musi powiadomić <see cref="T:System.Windows.Forms.DataGridView" /> zmiany, przekazując <see langword="true" /> do <see cref="M:System.Windows.Forms.DataGridView.NotifyCurrentCellDirty(System.Boolean)" /> metody.</para>
        </block>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
        <altmember cref="P:System.Windows.Forms.IDataGridViewEditingControl.EditingControlFormattedValue" />
        <altmember cref="M:System.Windows.Forms.IDataGridViewEditingControl.GetEditingControlFormattedValue(System.Windows.Forms.DataGridViewDataErrorContexts)" />
      </Docs>
    </Member>
    <Member MemberName="EditingControlWantsInputKey">
      <MemberSignature Language="C#" Value="public bool EditingControlWantsInputKey (System.Windows.Forms.Keys keyData, bool dataGridViewWantsInputKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool EditingControlWantsInputKey(valuetype System.Windows.Forms.Keys keyData, bool dataGridViewWantsInputKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataGridViewEditingControl.EditingControlWantsInputKey(System.Windows.Forms.Keys,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function EditingControlWantsInputKey (keyData As Keys, dataGridViewWantsInputKey As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool EditingControlWantsInputKey(System::Windows::Forms::Keys keyData, bool dataGridViewWantsInputKey);" />
      <MemberSignature Language="F#" Value="abstract member EditingControlWantsInputKey : System.Windows.Forms.Keys * bool -&gt; bool" Usage="iDataGridViewEditingControl.EditingControlWantsInputKey (keyData, dataGridViewWantsInputKey)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
        <Parameter Name="dataGridViewWantsInputKey" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="keyData">A <see cref="T:System.Windows.Forms.Keys" /> reprezentujący klucz, który został naciśnięty.</param>
        <param name="dataGridViewWantsInputKey">
          <see langword="true" /> gdy <see cref="T:System.Windows.Forms.DataGridView" /> chce przetwarzać <see cref="T:System.Windows.Forms.Keys" /> w <paramref name="keyData" />; w przeciwnym razie <see langword="false" />.</param>
        <summary>Określa, czy określony klucz jest kluczem wejściowych regularne kontrolka edycji należy przetworzyć lub specjalnego klucza, który <see cref="T:System.Windows.Forms.DataGridView" /> należy przetworzyć.</summary>
        <returns>
          <see langword="true" /> Jeśli określony klucz jest kluczem wejściowych regularne powinno zostać obsłużone przez kontrolka edycji; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Kontrolka edycji zaimplementowano tę metodę w celu określenia, których kluczy wejściowe powinny zostać przetworzone przez kontrolkę, a które wejściowe kluczy powinny być przetwarzane przez <xref:System.Windows.Forms.DataGridView>.  
  
 <xref:System.Windows.Forms.IDataGridViewEditingControl.EditingControlWantsInputKey%2A> Metoda jest wywoływana przez <xref:System.Windows.Forms.DataGridView>. <xref:System.Windows.Forms.DataGridView> Przejdzie w `true` dla `dataGridViewWantsInputKey` po może przetwarzać `keyData`. Jeśli kontrolka edycji można pozwolić <xref:System.Windows.Forms.DataGridView> obsługi `keyData`, <xref:System.Windows.Forms.IDataGridViewEditingControl.EditingControlWantsInputKey%2A> powinna zwrócić `false` podczas `dataGridViewWantsInputKey` jest `true`. Inne implementacje <xref:System.Windows.Forms.IDataGridViewEditingControl.EditingControlWantsInputKey%2A> zignorować `dataGridViewWantsInputKey` wartość `true` i obsługiwać `keyData` w formancie edycji.  
  
   
  
## Examples  
 Poniższy przykład kodu zawiera implementację tego elementu członkowskiego. W tym przykładzie jest częścią większego przykładu dostępne w [instrukcje: kontrolki hosta w komórkach kontrolki DataGridView formularzy Windows](~/docs/framework/winforms/controls/how-to-host-controls-in-windows-forms-datagridview-cells.md).  
  
 [!code-csharp[System.Windows.Forms.DataGridViewCalendarColumn#305](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewCalendarColumn/CS/datagridviewcalendarcolumn.cs#305)]
 [!code-vb[System.Windows.Forms.DataGridViewCalendarColumn#305](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewCalendarColumn/VB/datagridviewcalendarcolumn.vb#305)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
      </Docs>
    </Member>
    <Member MemberName="EditingPanelCursor">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Cursor EditingPanelCursor { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Cursor EditingPanelCursor" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.IDataGridViewEditingControl.EditingPanelCursor" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property EditingPanelCursor As Cursor" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Cursor ^ EditingPanelCursor { System::Windows::Forms::Cursor ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.EditingPanelCursor : System.Windows.Forms.Cursor" Usage="System.Windows.Forms.IDataGridViewEditingControl.EditingPanelCursor" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Cursor</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera kursor używany, gdy wskaźnik myszy znajduje się nad <see cref="P:System.Windows.Forms.DataGridView.EditingPanel" /> , ale nie kontrolka edycji.</summary>
        <value>A <see cref="T:System.Windows.Forms.Cursor" /> reprezentujący wskaźnik myszy używany do panelu edycji.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jest panelu edycji <xref:System.Windows.Forms.Panel> hosty edycji kontrolują kiedy <xref:System.Windows.Forms.DataGridView> kontrolka jest w trybie edycji. Rzeczywiste kontrolka edycji nie może obejmować cały obszar panelu edycji. W tym przypadku <xref:System.Windows.Forms.IDataGridViewEditingControl.EditingPanelCursor%2A> implementacji powinna zwrócić kursora do wykorzystania, gdy wskaźnik myszy znajduje się za pośrednictwem panelu, ale nie nad kontrolką. Zazwyczaj należy zwracać tej samej kursora, która używa kontrolki. Jeśli chcesz zmienić kursor, który jest wyświetlany, gdy wskaźnik znajduje się nad formantem, musisz ustawić <xref:System.Windows.Forms.Control.Cursor%2A> właściwości. Możesz ustawić w Konstruktorze typu <xref:System.Windows.Forms.IDataGridViewEditingControl> wdrożenia, lub można ustawić go <xref:System.Windows.Forms.IDataGridViewEditingControl.PrepareEditingControlForEdit%2A> implementacji.  
  
   
  
## Examples  
 Poniższy przykład kodu zawiera implementację tego elementu członkowskiego. W tym przykładzie jest częścią większego przykładu dostępne w [instrukcje: kontrolki hosta w komórkach kontrolki DataGridView formularzy Windows](~/docs/framework/winforms/controls/how-to-host-controls-in-windows-forms-datagridview-cells.md).  
  
 [!code-csharp[System.Windows.Forms.DataGridViewCalendarColumn#311](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewCalendarColumn/CS/datagridviewcalendarcolumn.cs#311)]
 [!code-vb[System.Windows.Forms.DataGridViewCalendarColumn#311](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataGridViewCalendarColumn/VB/datagridviewcalendarcolumn.vb#311)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
        <altmember cref="T:System.Windows.Forms.Panel" />
        <altmember cref="P:System.Windows.Forms.Control.Cursor" />
        <altmember cref="M:System.Windows.Forms.IDataGridViewEditingControl.PrepareEditingControlForEdit(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="GetEditingControlFormattedValue">
      <MemberSignature Language="C#" Value="public object GetEditingControlFormattedValue (System.Windows.Forms.DataGridViewDataErrorContexts context);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetEditingControlFormattedValue(valuetype System.Windows.Forms.DataGridViewDataErrorContexts context) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataGridViewEditingControl.GetEditingControlFormattedValue(System.Windows.Forms.DataGridViewDataErrorContexts)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEditingControlFormattedValue (context As DataGridViewDataErrorContexts) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetEditingControlFormattedValue(System::Windows::Forms::DataGridViewDataErrorContexts context);" />
      <MemberSignature Language="F#" Value="abstract member GetEditingControlFormattedValue : System.Windows.Forms.DataGridViewDataErrorContexts -&gt; obj" Usage="iDataGridViewEditingControl.GetEditingControlFormattedValue context" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.Windows.Forms.DataGridViewDataErrorContexts" />
      </Parameters>
      <Docs>
        <param name="context">Bitowa kombinacja <see cref="T:System.Windows.Forms.DataGridViewDataErrorContexts" /> wartości, które określa kontekst, w którym dane są potrzebne.</param>
        <summary>Pobiera sformatowaną wartość komórki.</summary>
        <returns>
          <see cref="T:System.Object" /> Reprezentujący wersji sformatowaną zawartość komórki.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sformatowana wartość reprezentuje wartość wyświetlaną w interfejsu użytkownika formantu. Sformatowana wartość mogą różnić się w wartość bezwzględna i typ danych nawet od rzeczywistego wartość zawartą w kontrolce.  
  
 Aby ustawić sformatowana wartość kontrolki, należy użyć <xref:System.Windows.Forms.IDataGridViewEditingControl.EditingControlFormattedValue%2A> właściwości.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Zmiana wartości zwracanej w danej implementacji tej metody nie automatycznie zmienia wartość wyświetlana. Po zmianie wartości w kontrolce edycji, musi powiadomić <see cref="T:System.Windows.Forms.DataGridView" /> zmiany, przekazując <see langword="true" /> do <see cref="M:System.Windows.Forms.DataGridView.NotifyCurrentCellDirty(System.Boolean)" /> metody.</para>
        </block>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
        <altmember cref="P:System.Windows.Forms.IDataGridViewEditingControl.EditingControlFormattedValue" />
        <altmember cref="P:System.Windows.Forms.IDataGridViewEditingControl.EditingControlValueChanged" />
      </Docs>
    </Member>
    <Member MemberName="PrepareEditingControlForEdit">
      <MemberSignature Language="C#" Value="public void PrepareEditingControlForEdit (bool selectAll);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PrepareEditingControlForEdit(bool selectAll) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataGridViewEditingControl.PrepareEditingControlForEdit(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub PrepareEditingControlForEdit (selectAll As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PrepareEditingControlForEdit(bool selectAll);" />
      <MemberSignature Language="F#" Value="abstract member PrepareEditingControlForEdit : bool -&gt; unit" Usage="iDataGridViewEditingControl.PrepareEditingControlForEdit selectAll" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="selectAll" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="selectAll">
          <see langword="true" /> Zaznacz wszystkie komórki zawartości; w przeciwnym razie <see langword="false" />.</param>
        <summary>Przygotowuje aktualnie zaznaczonej komórki do edycji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda ma na celu przygotowanie formantem i jego zawartość do edycji. Na przykład możesz chcieć umieścić kursor na końcu zawartości lub zmienić sposób wyrównania zawartości.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
      </Docs>
    </Member>
    <Member MemberName="RepositionEditingControlOnValueChange">
      <MemberSignature Language="C#" Value="public bool RepositionEditingControlOnValueChange { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RepositionEditingControlOnValueChange" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.IDataGridViewEditingControl.RepositionEditingControlOnValueChange" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property RepositionEditingControlOnValueChange As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool RepositionEditingControlOnValueChange { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.RepositionEditingControlOnValueChange : bool" Usage="System.Windows.Forms.IDataGridViewEditingControl.RepositionEditingControlOnValueChange" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy zawartość komórki musi przeniesiony, zawsze wtedy, gdy zmieni się wartość.</summary>
        <value>
          <see langword="true" /> Jeśli zawartość musi być przeniesiony; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Sytuacje wymagają po zmianie wartości zmienić położenie zawartość komórki. Na przykład zawartość komórki może być konieczne zmiany położenia, gdy komórka zawija tekst i zawartość wydają się większe.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.DataGridView" />
      </Docs>
    </Member>
  </Members>
</Type>