<Type Name="IButtonControl" FullName="System.Windows.Forms.IButtonControl">
  <Metadata><Meta Name="ms.openlocfilehash" Value="42984f65aa9a0d97f468634d8079057f060f761d" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69187960" /></Metadata><TypeSignature Language="C#" Value="public interface IButtonControl" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IButtonControl" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.IButtonControl" />
  <TypeSignature Language="VB.NET" Value="Public Interface IButtonControl" />
  <TypeSignature Language="C++ CLI" Value="public interface class IButtonControl" />
  <TypeSignature Language="F#" Value="type IButtonControl = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Docs>
    <summary>Umożliwia kontrolce działanie jako przycisk w formularzu.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Przykładem lokalizacji, w której można zaimplementować ten interfejs, jest domyślne i przycisk anulowania. Przyciski domyślne są powiadamiane o wprowadzeniu nieprzetworzonego klawisza ENTER dla formularza, podobnie jak okno dialogowe zostanie zamknięte. Podobnie przyciski Anuluj są powiadamiane za każdym razem, gdy w formularzu zostanie wprowadzony nieprzetworzony klawisz ESC, podobnie jak okno dialogowe.  
  
   
  
## Examples  
 Poniższy przykład dziedziczy z <xref:System.Windows.Forms.ButtonBase> klasy i <xref:System.Windows.Forms.IButtonControl> implementuje interfejs. Implementacja jest dodawana do <xref:System.Windows.Forms.IButtonControl.DialogResult%2A> właściwości <xref:System.Windows.Forms.IButtonControl.NotifyDefault%2A> i metod i <xref:System.Windows.Forms.IButtonControl.PerformClick%2A> .  
  
 [!code-cpp[IButtonControl Implementation#1](~/samples/snippets/cpp/VS_Snippets_Winforms/IButtonControl Implementation/CPP/mybutton.cpp#1)]
 [!code-csharp[IButtonControl Implementation#1](~/samples/snippets/csharp/VS_Snippets_Winforms/IButtonControl Implementation/CS/mybutton.cs#1)]
 [!code-vb[IButtonControl Implementation#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/IButtonControl Implementation/VB/mybutton.vb#1)]  
  
 ]]></format>
    </remarks>
    <block subset="none" type="overrides"><para>Zaimplementuj ten interfejs w klasach, które działają jako kontrolki przycisków. Elementy członkowskie tego interfejsu zapewniają podstawowe funkcje przycisków, takie jak dostarczanie <see cref="T:System.Windows.Forms.DialogResult" /> do formularza nadrzędnego lub możliwość <see cref="E:System.Windows.Forms.Control.Click" /> wykonania zdarzenia, lub działa jako przycisk domyślny formularza.</para></block>
    <altmember cref="T:System.Windows.Forms.Button" />
    <altmember cref="T:System.Windows.Forms.Form" />
  </Docs>
  <Members>
    <Member MemberName="DialogResult">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DialogResult DialogResult { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DialogResult DialogResult" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.IButtonControl.DialogResult" />
      <MemberSignature Language="VB.NET" Value="Public Property DialogResult As DialogResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::DialogResult DialogResult { System::Windows::Forms::DialogResult get(); void set(System::Windows::Forms::DialogResult value); };" />
      <MemberSignature Language="F#" Value="member this.DialogResult : System.Windows.Forms.DialogResult with get, set" Usage="System.Windows.Forms.IButtonControl.DialogResult" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DialogResult</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość zwracaną do formularza nadrzędnego po kliknięciu przycisku.</summary>
        <value>Jedna z <see cref="T:System.Windows.Forms.DialogResult" /> wartości.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy formularz zostanie wyświetlony jako okno dialogowe przy użyciu <xref:System.Windows.Forms.Form.ShowDialog%2A> metody, a jeden z jego przycisków zostanie kliknięty, <xref:System.Windows.Forms.IButtonControl.DialogResult%2A> wartość przycisku zostanie <xref:System.Windows.Forms.Form.DialogResult%2A> przypisana do właściwości formularza.  
  
   
  
## Examples  
 Poniższy przykład dziedziczy z <xref:System.Windows.Forms.ButtonBase> klasy i <xref:System.Windows.Forms.IButtonControl> implementuje interfejs. Implementacja jest dodawana do <xref:System.Windows.Forms.IButtonControl.DialogResult%2A> właściwości <xref:System.Windows.Forms.IButtonControl.NotifyDefault%2A> i metod i <xref:System.Windows.Forms.IButtonControl.PerformClick%2A> .  
  
 [!code-cpp[IButtonControl Implementation#1](~/samples/snippets/cpp/VS_Snippets_Winforms/IButtonControl Implementation/CPP/mybutton.cpp#1)]
 [!code-csharp[IButtonControl Implementation#1](~/samples/snippets/csharp/VS_Snippets_Winforms/IButtonControl Implementation/CS/mybutton.cs#1)]
 [!code-vb[IButtonControl Implementation#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/IButtonControl Implementation/VB/mybutton.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Form.AcceptButton" />
        <altmember cref="P:System.Windows.Forms.Form.CancelButton" />
        <altmember cref="P:System.Windows.Forms.Form.DialogResult" />
      </Docs>
    </Member>
    <Member MemberName="NotifyDefault">
      <MemberSignature Language="C#" Value="public void NotifyDefault (bool value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void NotifyDefault(bool value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IButtonControl.NotifyDefault(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub NotifyDefault (value As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void NotifyDefault(bool value);" />
      <MemberSignature Language="F#" Value="abstract member NotifyDefault : bool -&gt; unit" Usage="iButtonControl.NotifyDefault value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="value"><see langword="true" />Jeśli kontrolka powinna zachowywać się jako przycisk domyślny; w <see langword="false" />przeciwnym razie.</param>
        <summary>Powiadamia formant, że jest przyciskiem domyślnym, aby jego wygląd i zachowanie zostały odpowiednio dostosowane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda jest wywoływana przez formularz nadrzędny w celu utworzenia kontrolki jako przycisku domyślnego. Domyślne przyciski są ustawione jako mające dodatkowe obramowanie.  
  
   
  
## Examples  
 Poniższy przykład dziedziczy z <xref:System.Windows.Forms.ButtonBase> klasy i <xref:System.Windows.Forms.IButtonControl> implementuje interfejs. Implementacja jest dodawana do <xref:System.Windows.Forms.IButtonControl.DialogResult%2A> właściwości <xref:System.Windows.Forms.IButtonControl.NotifyDefault%2A> i metod i <xref:System.Windows.Forms.IButtonControl.PerformClick%2A> .  
  
 [!code-cpp[IButtonControl Implementation#1](~/samples/snippets/cpp/VS_Snippets_Winforms/IButtonControl Implementation/CPP/mybutton.cpp#1)]
 [!code-csharp[IButtonControl Implementation#1](~/samples/snippets/csharp/VS_Snippets_Winforms/IButtonControl Implementation/CS/mybutton.cs#1)]
 [!code-vb[IButtonControl Implementation#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/IButtonControl Implementation/VB/mybutton.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PerformClick">
      <MemberSignature Language="C#" Value="public void PerformClick ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PerformClick() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IButtonControl.PerformClick" />
      <MemberSignature Language="VB.NET" Value="Public Sub PerformClick ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PerformClick();" />
      <MemberSignature Language="F#" Value="abstract member PerformClick : unit -&gt; unit" Usage="iButtonControl.PerformClick " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="E:System.Windows.Forms.Control.Click" /> Generuje zdarzenie dla kontrolki.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda jest wywoływana dla przycisku z fokusem lub dla przycisku domyślnego (Jeśli żaden inny przycisk nie ma fokusu), gdy użytkownik naciśnie klawisz ENTER. Ta metoda jest również wywoływana, gdy użytkownik naciśnie klawisz ESC, jeśli przycisk jest ustawiony jako przycisk Anuluj.  
  
   
  
## Examples  
 Poniższy przykład dziedziczy z <xref:System.Windows.Forms.ButtonBase> klasy i <xref:System.Windows.Forms.IButtonControl> implementuje interfejs. Implementacja jest dodawana do <xref:System.Windows.Forms.IButtonControl.DialogResult%2A> właściwości <xref:System.Windows.Forms.IButtonControl.NotifyDefault%2A> i metod i <xref:System.Windows.Forms.IButtonControl.PerformClick%2A> .  
  
 [!code-cpp[IButtonControl Implementation#1](~/samples/snippets/cpp/VS_Snippets_Winforms/IButtonControl Implementation/CPP/mybutton.cpp#1)]
 [!code-csharp[IButtonControl Implementation#1](~/samples/snippets/csharp/VS_Snippets_Winforms/IButtonControl Implementation/CS/mybutton.cs#1)]
 [!code-vb[IButtonControl Implementation#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/IButtonControl Implementation/VB/mybutton.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.Control.Click" />
      </Docs>
    </Member>
  </Members>
</Type>
