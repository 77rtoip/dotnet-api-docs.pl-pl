<Type Name="LabelEditEventArgs" FullName="System.Windows.Forms.LabelEditEventArgs">
  <Metadata><Meta Name="ms.openlocfilehash" Value="fb51fe8a20396c037f5233e15e328fd3d9d2d042" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69188030" /></Metadata><TypeSignature Language="C#" Value="public class LabelEditEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit LabelEditEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.LabelEditEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class LabelEditEventArgs&#xA;Inherits EventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class LabelEditEventArgs : EventArgs" />
  <TypeSignature Language="F#" Value="type LabelEditEventArgs = class&#xA;    inherit EventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Dostarcza dane dla <see cref="E:System.Windows.Forms.ListView.BeforeLabelEdit" /> zdarzeń i <see cref="E:System.Windows.Forms.ListView.AfterLabelEdit" /> .</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.Windows.Forms.LabelEditEventArgs> Określa indeks i podpis <xref:System.Windows.Forms.ListViewItem> , a i podpis po edytowaniu przez użytkownika. Ta klasa udostępnia <xref:System.Windows.Forms.LabelEditEventArgs.CancelEdit%2A> również właściwość. Tej właściwości można użyć w programie <xref:System.Windows.Forms.ListView.BeforeLabelEdit?displayProperty=nameWithType> obsługi zdarzeń, aby uniemożliwić użytkownikowi edytowanie etykiety. Można go również użyć w programie <xref:System.Windows.Forms.ListView.AfterLabelEdit?displayProperty=nameWithType> obsługi zdarzeń, aby przywrócić zmianę, zwracając etykietę na oryginalną wartość. Jest to przydatne, gdy chcesz sprawdzić poprawność danych wejściowych użytkownika przed zatwierdzeniem zmiany.  
  
> [!NOTE]
>  Ponieważ zdarzenie ma miejsce przed zatwierdzeniem przez Edytowanie etykiety, <xref:System.Windows.Forms.ListView.Sort%2A?displayProperty=nameWithType> wywołanie metody w procedurze obsługi dla tego zdarzenia spowoduje posortowanie elementu przy użyciu oryginalnej wartości. <xref:System.Windows.Forms.ListView.AfterLabelEdit?displayProperty=nameWithType>  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje obsługę <xref:System.Windows.Forms.ListView.BeforeLabelEdit?displayProperty=nameWithType> zdarzenia i <xref:System.Windows.Forms.LabelEditEventArgs.Item%2A> przy użyciu właściwości i <xref:System.Windows.Forms.LabelEditEventArgs.CancelEdit%2A> . Aby uruchomić przykład, wklej następujący kod w postaci zawierającej <xref:System.Windows.Forms.ListView> kontrolkę o nazwie `ListView1` i wypełnioną co najmniej 3 elementów. Upewnij się, że wszystkie zdarzenia są skojarzone z ich metodami obsługi zdarzeń.  
  
 [!code-cpp[System.Windows.Forms.ListView3#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView3/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView3#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView3/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListView3#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView3/VB/form1.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.ListView" />
    <altmember cref="T:System.Windows.Forms.ListViewItem" />
    <altmember cref="E:System.Windows.Forms.ListView.BeforeLabelEdit" />
    <altmember cref="E:System.Windows.Forms.ListView.AfterLabelEdit" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Forms.LabelEditEventArgs" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LabelEditEventArgs (int item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.LabelEditEventArgs.#ctor(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (item As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LabelEditEventArgs(int item);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.LabelEditEventArgs : int -&gt; System.Windows.Forms.LabelEditEventArgs" Usage="new System.Windows.Forms.LabelEditEventArgs item" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="item" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="item">Indeks <see cref="T:System.Windows.Forms.ListViewItem" />(liczony od zera) zawierający etykietę do edycji.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Windows.Forms.LabelEditEventArgs" /> klasy z określonym indeksem <see cref="T:System.Windows.Forms.ListViewItem" /> do edycji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tego konstruktora można użyć podczas podniesienia <xref:System.Windows.Forms.ListView.BeforeLabelEdit?displayProperty=nameWithType> lub <xref:System.Windows.Forms.ListView.AfterLabelEdit?displayProperty=nameWithType> zdarzenia w czasie wykonywania, aby określić konkretny element listy w obszarze <xref:System.Windows.Forms.ListView> do edycji.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public LabelEditEventArgs (int item, string label);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(int32 item, string label) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.LabelEditEventArgs.#ctor(System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (item As Integer, label As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; LabelEditEventArgs(int item, System::String ^ label);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.LabelEditEventArgs : int * string -&gt; System.Windows.Forms.LabelEditEventArgs" Usage="new System.Windows.Forms.LabelEditEventArgs (item, label)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="item" Type="System.Int32" />
        <Parameter Name="label" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="item">Indeks <see cref="T:System.Windows.Forms.ListViewItem" />(liczony od zera) zawierający etykietę do edycji.</param>
        <param name="label">Nowy tekst przypisany do etykiety <see cref="T:System.Windows.Forms.ListViewItem" />.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Windows.Forms.LabelEditEventArgs" /> klasy z określonym indeksem <see cref="T:System.Windows.Forms.ListViewItem" /> do edytowanego i nowym tekstem <see cref="T:System.Windows.Forms.ListViewItem" />dla etykiety.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tego konstruktora można użyć podczas <xref:System.Windows.Forms.ListView.BeforeLabelEdit?displayProperty=nameWithType> wywoływania lub <xref:System.Windows.Forms.ListView.AfterLabelEdit?displayProperty=nameWithType> zdarzenia w czasie wykonywania, aby określić element listy w <xref:System.Windows.Forms.ListView> do edycji. Konstruktor umożliwia również określenie nowego tekstu skojarzonego z etykietą <xref:System.Windows.Forms.ListViewItem>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CancelEdit">
      <MemberSignature Language="C#" Value="public bool CancelEdit { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CancelEdit" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.LabelEditEventArgs.CancelEdit" />
      <MemberSignature Language="VB.NET" Value="Public Property CancelEdit As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CancelEdit { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CancelEdit : bool with get, set" Usage="System.Windows.Forms.LabelEditEventArgs.CancelEdit" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy zmiany wprowadzone do etykiety <see cref="T:System.Windows.Forms.ListViewItem" /> powinny być anulowane.</summary>
        <value><see langword="true" />Jeśli operacja edytowania etykiety dla elementu <see cref="T:System.Windows.Forms.ListViewItem" /> powinna zostać anulowana, w przeciwnym razie. <see langword="false" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość umożliwia anulowanie zmian wprowadzonych w etykiecie <xref:System.Windows.Forms.ListViewItem> a i przywrócenie oryginalnego tekstu. Użyj tej właściwości, aby uniemożliwić zmianę podpisu elementu na wartość, która nie spełnia wymagań aplikacji.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje obsługę <xref:System.Windows.Forms.ListView.BeforeLabelEdit?displayProperty=nameWithType> zdarzenia i <xref:System.Windows.Forms.LabelEditEventArgs.Item%2A> przy użyciu właściwości i <xref:System.Windows.Forms.LabelEditEventArgs.CancelEdit%2A> . Aby uruchomić przykład, wklej następujący kod w postaci zawierającej kontrolkę ListView o nazwie ListView1 i zapełnienie co najmniej 3 elementów. Upewnij się, że wszystkie zdarzenia są skojarzone z ich metodami obsługi zdarzeń.  
  
 [!code-cpp[System.Windows.Forms.ListView3#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView3/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView3#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView3/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListView3#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView3/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public int Item { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Item" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.LabelEditEventArgs.Item" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Item As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Item { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Item : int" Usage="System.Windows.Forms.LabelEditEventArgs.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera indeks <see cref="T:System.Windows.Forms.ListViewItem" /> (liczony od zera) zawierający etykietę do edycji.</summary>
        <value>Indeks (liczony od zera) <see cref="T:System.Windows.Forms.ListViewItem" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu demonstruje obsługę <xref:System.Windows.Forms.ListView.BeforeLabelEdit?displayProperty=nameWithType> zdarzenia i <xref:System.Windows.Forms.LabelEditEventArgs.Item%2A> przy użyciu właściwości i <xref:System.Windows.Forms.LabelEditEventArgs.CancelEdit%2A> . Aby uruchomić przykład, wklej następujący kod w postaci zawierającej kontrolkę ListView o nazwie ListView1 i zapełnienie co najmniej 3 elementów. Upewnij się, że wszystkie zdarzenia są skojarzone z ich metodami obsługi zdarzeń.  
  
 [!code-cpp[System.Windows.Forms.ListView3#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ListView3/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ListView3#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ListView3/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ListView3#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ListView3/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Label">
      <MemberSignature Language="C#" Value="public string Label { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Label" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.LabelEditEventArgs.Label" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Label As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Label { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Label : string" Usage="System.Windows.Forms.LabelEditEventArgs.Label" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera nowy tekst przypisany do etykiety <see cref="T:System.Windows.Forms.ListViewItem" />.</summary>
        <value>Nowy tekst, który ma zostać skojarzony <see cref="T:System.Windows.Forms.ListViewItem" /> z <see langword="null" /> lub jeśli tekst nie został zmieniony.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu demonstruje użycie tego elementu członkowskiego. W tym przykładzie program obsługi zdarzeń raportuje wystąpienie <xref:System.Windows.Forms.ListView.AfterLabelEdit?displayProperty=nameWithType> zdarzenia. Ten raport pomaga dowiedzieć się, kiedy wystąpi zdarzenie i może pomóc w debugowaniu. Aby zgłosić wiele zdarzeń lub zdarzenia, które występują często, należy rozważyć <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> zamianę <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> lub dołączenie komunikatu do wielowierszowego <xref:System.Windows.Forms.TextBox>.  
  
 Aby uruchomić przykładowy kod, wklej go do projektu zawierającego wystąpienie typu <xref:System.Windows.Forms.ListView> o nazwie. `ListView1` Następnie upewnij się, że program obsługi zdarzeń jest skojarzony <xref:System.Windows.Forms.ListView.AfterLabelEdit?displayProperty=nameWithType> ze zdarzeniem.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#463](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#463)]
 [!code-vb[System.Windows.Forms.EventExamples#463](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#463)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
