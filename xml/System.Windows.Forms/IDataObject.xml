<Type Name="IDataObject" FullName="System.Windows.Forms.IDataObject">
  <Metadata><Meta Name="ms.openlocfilehash" Value="5abc2b039389d79c9a7337771dae53202d6337a9" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69187741" /></Metadata><TypeSignature Language="C#" Value="public interface IDataObject" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDataObject" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.IDataObject" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDataObject" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDataObject" />
  <TypeSignature Language="F#" Value="type IDataObject = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Zapewnia mechanizm niezależny od formatu do transferowania danych.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Interfejs jest używany <xref:System.Windows.Forms.Clipboard> przez klasę i podczas operacji przeciągania i upuszczania. `IDataObject`  
  
 W przypadku implementacji w klasie <xref:System.Windows.Forms.IDataObject> metody zezwalają użytkownikowi na przechowywanie danych w wielu formatach w wystąpieniu klasy. Przechowywanie danych w więcej niż jednym formacie zwiększa szansę, że aplikacja docelowa, której wymagania dotyczące formatu mogą nie być znane, może pobrać przechowywane dane. Aby przechowywać dane w wystąpieniu <xref:System.Windows.Forms.IDataObject>, należy <xref:System.Windows.Forms.IDataObject.SetData%2A> wywołać metodę i określić format danych w `format` parametrze. Ustaw parametr na `false` , jeśli nie chcesz, aby przechowywane dane były konwertowane na inny format podczas pobierania. `autoConvert` Wywołaj <xref:System.Windows.Forms.IDataObject.SetData%2A> wiele razy w jednym <xref:System.Windows.Forms.IDataObject> wystąpieniu do przechowywania danych w więcej niż jednym formacie.  
  
 Dane przechowywane są <xref:System.Windows.Forms.IDataObject.GetData%2A> pobierane z obiektu <xref:System.Windows.Forms.IDataObject> przez wywołanie metody i określenie formatu danych w `format` parametrze. `autoConvert` Ustaw`false` parametr na, aby pobierać tylko dane zapisane w określonym formacie. Aby przekonwertować przechowywane dane w określonym formacie, ustaw wartość `autoConvert` `true`lub nie używaj `autoConvert`.  
  
 Aby określić formaty danych przechowywanych w <xref:System.Windows.Forms.IDataObject>, użyj następujących <xref:System.Windows.Forms.IDataObject> metod.  
  
-   Wywołaj <xref:System.Windows.Forms.IDataObject.GetFormats%2A> metodę, aby pobrać tablicę wszystkich formatów, w których dane są dostępne. Ustaw parametr na `false` , aby uzyskać tylko formaty, w których są przechowywane dane. `autoConvert` Aby uzyskać wszystkie formaty, w których dane są dostępne, ustaw wartość `autoConvert` `true`lub nie używaj tego parametru.  
  
-   Wywołaj <xref:System.Windows.Forms.IDataObject.GetDataPresent%2A> metodę, aby określić, czy przechowywane dane są dostępne w określonym formacie. Jeśli nie chcesz, aby przechowywane dane były konwertowane do określonego formatu, ustaw `autoConvert` parametr na. `false`  
  
 Zapoznaj <xref:System.Windows.Forms.DataObject> się z klasą implementacji tego interfejsu. Zapoznaj <xref:System.Windows.Forms.DataFormats> się z klasą <xref:System.Windows.Forms.Clipboard> wstępnie zdefiniowanych formatów danych.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.DataObject" />
    <altmember cref="T:System.Windows.Forms.DataFormats" />
  </Docs>
  <Members>
    <MemberGroup MemberName="GetData">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Pobiera dane skojarzone z określonym formatem danych.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetData">
      <MemberSignature Language="C#" Value="public object GetData (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetData(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetData(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetData (format As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetData(System::String ^ format);" />
      <MemberSignature Language="F#" Value="abstract member GetData : string -&gt; obj" Usage="iDataObject.GetData format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format">Format danych do pobrania. Zobacz <see cref="T:System.Windows.Forms.DataFormats" /> , aby uzyskać wstępnie zdefiniowane formaty.</param>
        <summary>Pobiera dane skojarzone z określonym formatem danych.</summary>
        <returns>Dane skojarzone z określonym formatem lub <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli ta metoda nie może znaleźć danych w określonym formacie, próbuje przekonwertować dane do formatu. Jeśli dane nie mogą zostać skonwertowane do określonego formatu, ta metoda zwraca `null`.  
  
 Aby określić, czy dane są skojarzone z lub można je przekonwertować na format <xref:System.Windows.Forms.IDataObject.GetDataPresent%2A> , przed wywołaniem. <xref:System.Windows.Forms.IDataObject.GetData%2A> Wywołaj <xref:System.Windows.Forms.IDataObject.GetFormats%2A> listę prawidłowych formatów dla danych przechowywanych w tym wystąpieniu.  
  
> [!NOTE]
>  Dane można przekonwertować na inny format, jeśli został on zapisany, określając, że konwersja jest dozwolona, i jeśli żądany format jest zgodny z zapisanym formatem. Na przykład dane przechowywane w formacie Unicode można przekonwertować na tekst.  
  
 Aby uzyskać implementację tej metody, zobacz <xref:System.Windows.Forms.DataObject.GetData%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 W tym przykładzie użyto <xref:System.Windows.Forms.DataObject> klasy, która implementuje `IDataObject,` , aby `GetData` pokazać użycie metody. Metoda jest używana do pobierania danych przechowywanych w `myDataObject`, które są skojarzone `Text` z formatem. W <xref:System.Windows.Forms.Form> przykładzie założono, że utworzono już nazwę `Form1` i <xref:System.Windows.Forms.TextBox> nazwę `textBox1`.  
  
 [!code-cpp[GetData1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetData1/CPP/getdata1.cpp#1)]
 [!code-csharp[GetData1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetData1/CS/getdata1.cs#1)]
 [!code-vb[GetData1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetData1/VB/getdata1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="T:System.Windows.Forms.DataFormats" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetFormats(System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetDataPresent(System.Type)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetFormats(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="GetData">
      <MemberSignature Language="C#" Value="public object GetData (Type format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetData(class System.Type format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetData(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetData (format As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetData(Type ^ format);" />
      <MemberSignature Language="F#" Value="abstract member GetData : Type -&gt; obj" Usage="iDataObject.GetData format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="format"><see cref="T:System.Type" /> Reprezentujący format danych do pobrania. Zobacz <see cref="T:System.Windows.Forms.DataFormats" /> , aby uzyskać wstępnie zdefiniowane formaty.</param>
        <summary>Pobiera dane skojarzone z określonym formatem typu klasy.</summary>
        <returns>Dane skojarzone z określonym formatem lub <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli ta metoda nie może znaleźć danych w określonym formacie, próbuje przekonwertować dane do formatu. Jeśli dane nie mogą zostać skonwertowane do określonego formatu, ta metoda zwraca `null`.  
  
 Aby określić, czy dane są skojarzone z lub można je przekonwertować na format <xref:System.Windows.Forms.IDataObject.GetDataPresent%2A> , przed wywołaniem. <xref:System.Windows.Forms.IDataObject.GetData%2A> Wywołaj <xref:System.Windows.Forms.IDataObject.GetFormats%2A> listę prawidłowych formatów dla danych przechowywanych w tym wystąpieniu.  
  
> [!NOTE]
>  Dane można przekonwertować na inny format, jeśli został on zapisany, określając, że konwersja jest dozwolona, i jeśli żądany format jest zgodny z zapisanym formatem. Na przykład dane przechowywane w formacie Unicode można przekonwertować na tekst.  
  
 Aby uzyskać implementację tej metody, zobacz <xref:System.Windows.Forms.DataObject.GetData%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 W tym przykładzie użyto <xref:System.Windows.Forms.DataObject> klasy, która implementuje `IDataObject`, aby `GetData` pokazać użycie metody. Metoda jest używana do pobierania danych przechowywanych w `myObject`, które są skojarzone z określonym typem,. `myType` Typ pobranych danych jest wyświetlany w oknie komunikatu. W przykładzie założono, że utworzono <xref:System.Windows.Forms.Form> już nazwę. `Form1`  
  
 [!code-cpp[GetData2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetData2/CPP/getdata2.cpp#1)]
 [!code-csharp[GetData2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetData2/CS/getdata2.cs#1)]
 [!code-vb[GetData2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetData2/VB/getdata2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="T:System.Windows.Forms.DataFormats" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetFormats(System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetDataPresent(System.Type)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetFormats(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="GetData">
      <MemberSignature Language="C#" Value="public object GetData (string format, bool autoConvert);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetData(string format, bool autoConvert) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetData (format As String, autoConvert As Boolean) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetData(System::String ^ format, bool autoConvert);" />
      <MemberSignature Language="F#" Value="abstract member GetData : string * bool -&gt; obj" Usage="iDataObject.GetData (format, autoConvert)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="autoConvert" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="format">Format danych do pobrania. Zobacz <see cref="T:System.Windows.Forms.DataFormats" /> , aby uzyskać wstępnie zdefiniowane formaty.</param>
        <param name="autoConvert"><see langword="true" />Aby przekonwertować dane do określonego formatu; w przeciwnym razie. <see langword="false" /></param>
        <summary>Pobiera dane skojarzone z określonym formatem danych przy użyciu wartości logicznej, aby określić, czy dane mają być konwertowane w formacie.</summary>
        <returns>Dane skojarzone z określonym formatem lub <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli parametr jest `true` i ta metoda nie może znaleźć danych w określonym formacie, próbuje przekonwertować dane w formacie. `autoConvert` Jeśli dane nie mogą zostać skonwertowane do określonego formatu lub jeśli dane były przechowywane z `autoConvert` parametrem ustawionym na `false`, ta metoda zwraca `null`.  
  
 Jeśli parametr jest `false`, Metoda ta zwraca dane w określonym formacie lub `null` Jeśli nie można znaleźć danych w tym formacie. `autoConvert`  
  
 Aby określić, czy dane są skojarzone z lub można je przekonwertować na format <xref:System.Windows.Forms.IDataObject.GetDataPresent%2A> , przed wywołaniem. <xref:System.Windows.Forms.IDataObject.GetData%2A> Wywołaj <xref:System.Windows.Forms.IDataObject.GetFormats%2A> listę prawidłowych formatów dla danych przechowywanych w tym wystąpieniu.  
  
> [!NOTE]
>  Dane można przekonwertować na inny format, jeśli został on zapisany, określając, że konwersja jest dozwolona, i jeśli żądany format jest zgodny z zapisanym formatem. Na przykład dane przechowywane w formacie Unicode można przekonwertować na tekst.  
  
 Aby uzyskać implementację tej metody, zobacz <xref:System.Windows.Forms.DataObject.GetData%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 W tym przykładzie użyto <xref:System.Windows.Forms.DataObject> klasy, która implementuje `IDataObject`, aby `GetData` pokazać użycie metody. Przykład pobiera dane przechowywane w `DataObject`, `autoConvert` przy użyciu parametru, aby określić, czy format danych ma być konwertowany. Po pierwsze `myDataObject` , jest tworzony przy użyciu danych tekstowych. Następnie przykład próbuje pobrać dane. W pierwszej wersji próbnej określa ona format jako ciąg i ustawia `autoConvert` parametr na. `false` Ta wersja próbna kończy się niepowodzeniem, a wynik jest wyświetlany w oknie komunikatu o nazwie "komunikat #1". W drugiej wersji próbnej przykład pobiera te same dane z `autoConvert` parametrem ustawionym na. `true` Ta wersja próbna powiedzie się, a w oknie komunikatu zatytułowanym "komunikat #2" zostanie wyświetlony wynik. W przykładzie przyjęto założenie, że <xref:System.Windows.Forms.Form> utworzono `Form1`nazwę.  
  
 [!code-cpp[GetData3#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetData3/CPP/getdata3.cpp#1)]
 [!code-csharp[GetData3#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetData3/CS/getdata3.cs#1)]
 [!code-vb[GetData3#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetData3/VB/getdata3.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="T:System.Windows.Forms.DataFormats" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetFormats(System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetDataPresent(System.Type)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetFormats(System.Boolean)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetDataPresent">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Określa, czy dane przechowywane w tym wystąpieniu są skojarzone z określonym formatem.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetDataPresent">
      <MemberSignature Language="C#" Value="public bool GetDataPresent (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GetDataPresent(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDataPresent (format As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool GetDataPresent(System::String ^ format);" />
      <MemberSignature Language="F#" Value="abstract member GetDataPresent : string -&gt; bool" Usage="iDataObject.GetDataPresent format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format">Format, który ma zostać wyszukany. Zobacz <see cref="T:System.Windows.Forms.DataFormats" /> , aby uzyskać wstępnie zdefiniowane formaty.</param>
        <summary>Określa, czy dane przechowywane w tym wystąpieniu są skojarzone z lub można je przekonwertować na format w określonym formacie.</summary>
        <returns><see langword="true" />Jeśli dane przechowywane w tym wystąpieniu są skojarzone z lub mogą być konwertowane na, w określonym formacie; w <see langword="false" />przeciwnym razie.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wywołaj tę metodę, aby określić, czy w tym <xref:System.Windows.Forms.DataObject> formacie istnieje <xref:System.Windows.Forms.IDataObject.GetData%2A>przed wywołaniem. Wywołaj <xref:System.Windows.Forms.IDataObject.GetFormats%2A> formaty, które są dostępne w tym wystąpieniu.  
  
> [!NOTE]
>  Dane można przekonwertować na inny format, jeśli został on zapisany, określając, że konwersja jest dozwolona, i jeśli żądany format jest zgodny z zapisanym formatem. Na przykład dane przechowywane w formacie Unicode można przekonwertować na tekst.  
  
 Aby uzyskać implementację tej metody, zobacz <xref:System.Windows.Forms.DataObject.GetDataPresent%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 W tym przykładzie użyto <xref:System.Windows.Forms.DataObject> klasy, która implementuje `IDataObject`, aby `GetDataPresent` pokazać użycie metody. Po pierwsze tworzy obiekt danych przy użyciu ciągu i `Text` formatu. Następnie sprawdza, czy dane są obecne w `Text` formacie i wyświetla wyniki w oknie komunikatu. W przykładzie przyjęto założenie, że <xref:System.Windows.Forms.Form> utworzono `Form1`nazwę.  
  
 [!code-cpp[GetDataPresent1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetDataPresent1/CPP/getdatapresent1.cpp#1)]
 [!code-csharp[GetDataPresent1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetDataPresent1/CS/getdatapresent1.cs#1)]
 [!code-vb[GetDataPresent1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetDataPresent1/VB/getdatapresent1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetDataPresent(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="GetDataPresent">
      <MemberSignature Language="C#" Value="public bool GetDataPresent (Type format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GetDataPresent(class System.Type format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetDataPresent(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDataPresent (format As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool GetDataPresent(Type ^ format);" />
      <MemberSignature Language="F#" Value="abstract member GetDataPresent : Type -&gt; bool" Usage="iDataObject.GetDataPresent format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="format"><see cref="T:System.Type" /> Reprezentujący format do sprawdzenia. Zobacz <see cref="T:System.Windows.Forms.DataFormats" /> , aby uzyskać wstępnie zdefiniowane formaty.</param>
        <summary>Określa, czy dane przechowywane w tym wystąpieniu są skojarzone z lub można je przekonwertować na format w określonym formacie.</summary>
        <returns><see langword="true" />Jeśli dane przechowywane w tym wystąpieniu są skojarzone z lub mogą być konwertowane na, w określonym formacie; w przeciwnym razie. <see langword="false" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wywołaj tę metodę, aby określić, czy w tym <xref:System.Windows.Forms.DataObject> formacie istnieje <xref:System.Windows.Forms.IDataObject.GetData%2A>przed wywołaniem. Wywołaj <xref:System.Windows.Forms.IDataObject.GetFormats%2A> formaty, które są dostępne w tym wystąpieniu.  
  
> [!NOTE]
>  Dane można przekonwertować na inny format, jeśli został on zapisany, określając, że konwersja jest dozwolona, i jeśli żądany format jest zgodny z zapisanym formatem. Na przykład dane przechowywane w formacie Unicode można przekonwertować na tekst.  
  
 Aby uzyskać implementację tej metody, zobacz <xref:System.Windows.Forms.DataObject.GetDataPresent%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 W tym przykładzie użyto <xref:System.Windows.Forms.DataObject> klasy, która implementuje `IDataObject`, aby `GetDataPresent` pokazać użycie metody. Najpierw tworzy składnik (`myComponent`) i zapisuje go w obiekcie danych (`myDataObject`). Następnie sprawdza, czy określone dane są przechowywane w `myDataObject`. Jeśli test szacuje `true`się, wyświetla wynik w oknie komunikatu i wyświetla typ danych w polu tekstowym. W tym przykładzie przyjęto założenie, że <xref:System.Windows.Forms.Form> utworzono `Form1` już nazwę <xref:System.Windows.Forms.TextBox> i `textBox1`nazwę.  
  
 [!code-cpp[GetDataPresent2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetDataPresent2/CPP/getdatapresent2.cpp#1)]
 [!code-csharp[GetDataPresent2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetDataPresent2/CS/getdatapresent2.cs#1)]
 [!code-vb[GetDataPresent2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetDataPresent2/VB/getdatapresent2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetDataPresent(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="GetDataPresent">
      <MemberSignature Language="C#" Value="public bool GetDataPresent (string format, bool autoConvert);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GetDataPresent(string format, bool autoConvert) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDataPresent (format As String, autoConvert As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool GetDataPresent(System::String ^ format, bool autoConvert);" />
      <MemberSignature Language="F#" Value="abstract member GetDataPresent : string * bool -&gt; bool" Usage="iDataObject.GetDataPresent (format, autoConvert)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="autoConvert" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="format">Format, który ma zostać wyszukany. Zobacz <see cref="T:System.Windows.Forms.DataFormats" /> , aby uzyskać wstępnie zdefiniowane formaty.</param>
        <param name="autoConvert"><see langword="true" />Aby określić, czy dane przechowywane w tym wystąpieniu mogą być konwertowane do określonego formatu; <see langword="false" /> , aby sprawdzić, czy dane są w określonym formacie.</param>
        <summary>Określa, czy dane przechowywane w tym wystąpieniu są skojarzone z określonym formatem, przy użyciu wartości logicznej, aby określić, czy dane mają być konwertowane w formacie.</summary>
        <returns><see langword="true" />Jeśli dane są w lub mogą być konwertowane na, w określonym formacie; w przeciwnym razie. <see langword="false" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wywołaj tę metodę, aby określić, czy w tym <xref:System.Windows.Forms.DataObject> formacie istnieje <xref:System.Windows.Forms.IDataObject.GetData%2A>przed wywołaniem. Wywołaj <xref:System.Windows.Forms.IDataObject.GetFormats%2A> formaty, które są dostępne w tym wystąpieniu.  
  
 Ta metoda zwraca `true` :  
  
-   `autoConvert` Parametr jest`true` i dane są w formacie, który można przekonwertować na odpowiedni format.  
  
-   `autoConvert` Parametr jest`false` i dane są w odpowiednim formacie.  
  
 Ta metoda zwraca `false` :  
  
-   Parametr jest `true` i ta metoda nie może znaleźć danych w określonym formacie i nie może przekonwertować danych do określonego formatu lub dane były przechowywane z `autoConvert` ustawioną na `false`. `autoConvert`  
  
-   Parametr ma wartość `false`, a dane nie istnieją w tym wystąpieniu w określonym formacie. `autoConvert`  
  
> [!NOTE]
>  Dane można przekonwertować na inny format, jeśli został on zapisany, określając, że konwersja jest dozwolona, i jeśli żądany format jest zgodny z zapisanym formatem. Na przykład dane przechowywane w formacie Unicode można przekonwertować na tekst.  
  
 Aby uzyskać implementację tej metody, zobacz <xref:System.Windows.Forms.DataObject.GetDataPresent%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 W tym przykładzie użyto <xref:System.Windows.Forms.DataObject> klasy, która implementuje `IDataObject`, aby `GetDataPresent` pokazać użycie metody. Najpierw tworzy obiekt danych (`myDataObject`) przy użyciu ciągu `Text` i formatu. Następnie wysyła zapytanie do obiektu dla danych skojarzonych z `Text` formatem, `autoConvert` z parametrem ustawionym na `false`. Ta wersja próbna kończy się niepowodzeniem, a wynik jest wyświetlany w oknie komunikatu o nazwie "komunikat #1". W drugiej wersji próbnej ustawia `autoConvert` parametr na. `true` Ta wersja próbna powiedzie się, a w oknie komunikatu zatytułowanym "komunikat #2" zostanie wyświetlony wynik. W przykładzie przyjęto założenie, że <xref:System.Windows.Forms.Form> utworzono `Form1`nazwę.  
  
 [!code-cpp[GetDataPresent3#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetDataPresent3/CPP/getdatapresent3.cpp#1)]
 [!code-csharp[GetDataPresent3#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetDataPresent3/CS/getdatapresent3.cs#1)]
 [!code-vb[GetDataPresent3#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetDataPresent3/VB/getdatapresent3.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetDataPresent(System.Type)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetFormats(System.Boolean)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetFormats">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwraca listę wszystkich formatów, do których są skojarzone dane przechowywane w tym wystąpieniu lub które można przekonwertować na.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetFormats">
      <MemberSignature Language="C#" Value="public string[] GetFormats ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string[] GetFormats() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetFormats" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFormats () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetFormats();" />
      <MemberSignature Language="F#" Value="abstract member GetFormats : unit -&gt; string[]" Usage="iDataObject.GetFormats " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca listę wszystkich formatów, do których są skojarzone dane przechowywane w tym wystąpieniu lub które można przekonwertować na.</summary>
        <returns>Tablica nazw reprezentująca listę wszystkich formatów, które są obsługiwane przez dane przechowywane w tym obiekcie.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wywołaj tę metodę, aby pobrać obsługiwane formaty danych przed wywołaniem <xref:System.Windows.Forms.IDataObject.GetData%2A> metody. Zapoznaj <xref:System.Windows.Forms.DataFormats> się z klasą wstępnie zdefiniowanych formatów.  
  
> [!NOTE]
>  Dane można przekonwertować na inny format, jeśli został on zapisany, określając, że konwersja jest dozwolona, i jeśli żądany format jest zgodny z zapisanym formatem. Na przykład dane przechowywane w formacie Unicode można przekonwertować na tekst.  
  
 Aby uzyskać implementację tej metody, zobacz <xref:System.Windows.Forms.DataObject.GetFormats%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 W tym przykładzie użyto <xref:System.Windows.Forms.DataObject> klasy, która implementuje `IDataObject`, aby `GetFormats` pokazać użycie metody. Najpierw tworzy obiekt danych (`myDataObject`) przy użyciu ciągu `Text` i formatu. Następnie pobiera wszystkie formaty danych i formaty konwersji danych w obiekcie danych, a następnie wyświetla listę wyników w oknie komunikatu. W <xref:System.Windows.Forms.Form> tym przykładzie przyjęto założenie, że `Form1`utworzono nazwę.  
  
 [!code-cpp[GetFormats1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetFormats1/CPP/getformats1.cpp#1)]
 [!code-csharp[GetFormats1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetFormats1/CS/getformats1.cs#1)]
 [!code-vb[GetFormats1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetFormats1/VB/getformats1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.DataObject.GetFormats(System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetData(System.String,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="GetFormats">
      <MemberSignature Language="C#" Value="public string[] GetFormats (bool autoConvert);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string[] GetFormats(bool autoConvert) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetFormats(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFormats (autoConvert As Boolean) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetFormats(bool autoConvert);" />
      <MemberSignature Language="F#" Value="abstract member GetFormats : bool -&gt; string[]" Usage="iDataObject.GetFormats autoConvert" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="autoConvert" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="autoConvert"><see langword="true" />Aby pobrać wszystkie formaty, do których są skojarzone dane przechowywane w tym wystąpieniu lub które mogą być konwertowane na; <see langword="false" /> aby pobrać tylko natywne formaty danych.</param>
        <summary>Pobiera listę wszystkich formatów, do których są skojarzone dane przechowywane w tym wystąpieniu lub które mogą być konwertowane na, przy użyciu wartości logicznej, aby określić, czy mają być pobierane wszystkie formaty, do których dane mogą być konwertowane lub tylko natywne formaty danych.</summary>
        <returns>Tablica nazw reprezentująca listę wszystkich formatów, które są obsługiwane przez dane przechowywane w tym obiekcie.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wywołaj tę metodę, aby pobrać obsługiwane formaty danych przed wywołaniem <xref:System.Windows.Forms.IDataObject.GetData%2A> metody. Zapoznaj <xref:System.Windows.Forms.DataFormats> się z klasą wstępnie zdefiniowanych formatów.  
  
> [!NOTE]
>  Dane można przekonwertować na inny format, jeśli został on zapisany, określając, że konwersja jest dozwolona, i jeśli żądany format jest zgodny z zapisanym formatem. Na przykład dane przechowywane w formacie Unicode można przekonwertować na tekst.  
  
 Aby uzyskać implementację tej metody, zobacz <xref:System.Windows.Forms.DataObject.GetFormats%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 W tym przykładzie użyto <xref:System.Windows.Forms.DataObject> klasy, która implementuje `IDataObject`, aby `GetFormats` pokazać użycie metody. Najpierw tworzy obiekt danych (`myDataObject`) przy użyciu ciągu `UnicodeText` i formatu. Następnie tworzy dwa zapytania, aby pobrać formaty skojarzone z danymi. W pierwszej kwerendzie ustawia `autoConvert` parametr na `false` : w tym przypadku zwracany jest tylko format natywny danych. W drugim zapytaniu ustawia `autoConvert` parametr na `true`, tak aby pobiera listę formatów, włącznie z formatami, do których dane mogą być konwertowane. W każdym przypadku lista wyników zostanie wyświetlona w oknie komunikatu. W <xref:System.Windows.Forms.Form> tym przykładzie przyjęto założenie, że `Form1`utworzono nazwę.  
  
 [!code-cpp[GetFormats2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetFormats2/CPP/getformats2.cpp#1)]
 [!code-csharp[GetFormats2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetFormats2/CS/getformats2.cs#1)]
 [!code-vb[GetFormats2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetFormats2/VB/getformats2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.DataObject.GetFormats(System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetData(System.String,System.Boolean)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="SetData">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Przechowuje określone dane i powiązane z nim formatowanie w tym wystąpieniu.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetData">
      <MemberSignature Language="C#" Value="public void SetData (object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetData(object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.SetData(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetData (data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetData(System::Object ^ data);" />
      <MemberSignature Language="F#" Value="abstract member SetData : obj -&gt; unit" Usage="iDataObject.SetData data" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="data">Dane do zapisania.</param>
        <summary>Przechowuje określone dane w tym wystąpieniu przy użyciu klasy danych formatu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Format pochodzi od klasy danych.  
  
 Dane przechowywane przy użyciu tej metody można przekonwertować na format zgodny podczas pobierania.  
  
 Aby uzyskać implementację tej metody, zobacz <xref:System.Windows.Forms.DataObject.SetData%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 W tym przykładzie użyto <xref:System.Windows.Forms.DataObject> klasy, która implementuje `IDataObject`, aby `SetData` pokazać użycie metody. Najpierw tworzy składnik (`myComponent`) i zapisuje go w obiekcie danych (`myDataObject`). Następnie sprawdza, czy określone dane są przechowywane w obiekcie danych, i wyświetla wyniki w oknie komunikatu. W przykładzie przyjęto założenie, że <xref:System.Windows.Forms.Form> utworzono `Form1`nazwę.  
  
 [!code-cpp[SetData1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/SetData1/CPP/setdata1.cpp#1)]
 [!code-csharp[SetData1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/SetData1/CS/setdata1.cs#1)]
 [!code-vb[SetData1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/SetData1/VB/setdata1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.SetData(System.String,System.Boolean,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="SetData">
      <MemberSignature Language="C#" Value="public void SetData (string format, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetData(string format, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetData (format As String, data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetData(System::String ^ format, System::Object ^ data);" />
      <MemberSignature Language="F#" Value="abstract member SetData : string * obj -&gt; unit" Usage="iDataObject.SetData (format, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">Format skojarzony z danymi. Zobacz <see cref="T:System.Windows.Forms.DataFormats" /> , aby uzyskać wstępnie zdefiniowane formaty.</param>
        <param name="data">Dane do zapisania.</param>
        <summary>Przechowuje określone dane i powiązane z nim formatowanie w tym wystąpieniu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli nie znasz formatu aplikacji docelowej, możesz przechowywać dane w wielu formatach za pomocą tej metody.  
  
 Dane przechowywane przy użyciu tej metody można przekonwertować na format zgodny podczas pobierania.  
  
 Aby uzyskać implementację tej metody, zobacz <xref:System.Windows.Forms.DataObject.SetData%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 W tym przykładzie użyto <xref:System.Windows.Forms.DataObject> klasy, która implementuje `IDataObject`, aby `SetData` pokazać użycie metody. Najpierw tworzy obiekt danych (`myDataObject`) i przechowuje ciąg w obiekcie, `UnicodeText` określając format. Następnie pobiera te dane przechowywane w obiekcie, określając `Text` format, tak aby dane były konwertowane `Text` na format. Wynik jest wyświetlany w oknie komunikatu. W <xref:System.Windows.Forms.Form> tym przykładzie przyjęto założenie, że `Form1`utworzono nazwę.  
  
 [!code-cpp[SetData2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/SetData2/CPP/setdata2.cpp#1)]
 [!code-csharp[SetData2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/SetData2/CS/setdata2.cs#1)]
 [!code-vb[SetData2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/SetData2/VB/setdata2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.SetData(System.String,System.Boolean,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="SetData">
      <MemberSignature Language="C#" Value="public void SetData (Type format, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetData(class System.Type format, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.SetData(System.Type,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetData (format As Type, data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetData(Type ^ format, System::Object ^ data);" />
      <MemberSignature Language="F#" Value="abstract member SetData : Type * obj -&gt; unit" Usage="iDataObject.SetData (format, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Type" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format"><see cref="T:System.Type" /> Reprezentujący format skojarzony z danymi. Zobacz <see cref="T:System.Windows.Forms.DataFormats" /> , aby uzyskać wstępnie zdefiniowane formaty.</param>
        <param name="data">Dane do zapisania.</param>
        <summary>Przechowuje określone dane i powiązane z nimi typy klas w tym wystąpieniu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli nie znasz formatu aplikacji docelowej, możesz przechowywać dane w wielu formatach za pomocą tej metody.  
  
 Dane przechowywane przy użyciu tej metody można przekonwertować na format zgodny podczas pobierania.  
  
 Aby uzyskać implementację tej metody, zobacz <xref:System.Windows.Forms.DataObject.SetData%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 W tym przykładzie użyto <xref:System.Windows.Forms.DataObject> klasy, która implementuje `IDataObject`, aby `SetData` pokazać użycie metody. Najpierw tworzy składnik (`myComponent`) i zapisuje go w obiekcie danych (`myDataObject`) przy użyciu `myType` , aby określić format danych. Następnie sprawdza, czy dane określonego typu są przechowywane w obiekcie, i wyświetla wyniki w oknie komunikatu. W przykładzie przyjęto założenie, że <xref:System.Windows.Forms.Form> utworzono `Form1`nazwę.  
  
 [!code-cpp[SetData3#1](~/samples/snippets/cpp/VS_Snippets_Winforms/SetData3/CPP/setdata3.cpp#1)]
 [!code-csharp[SetData3#1](~/samples/snippets/csharp/VS_Snippets_Winforms/SetData3/CS/setdata3.cs#1)]
 [!code-vb[SetData3#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/SetData3/VB/setdata3.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetFormats(System.Boolean)" />
        <altmember cref="T:System.Windows.Forms.DataFormats" />
      </Docs>
    </Member>
    <Member MemberName="SetData">
      <MemberSignature Language="C#" Value="public void SetData (string format, bool autoConvert, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetData(string format, bool autoConvert, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetData (format As String, autoConvert As Boolean, data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetData(System::String ^ format, bool autoConvert, System::Object ^ data);" />
      <MemberSignature Language="F#" Value="abstract member SetData : string * bool * obj -&gt; unit" Usage="iDataObject.SetData (format, autoConvert, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="autoConvert" Type="System.Boolean" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">Format skojarzony z danymi. Zobacz <see cref="T:System.Windows.Forms.DataFormats" /> , aby uzyskać wstępnie zdefiniowane formaty.</param>
        <param name="autoConvert"><see langword="true" />Aby umożliwić konwersję danych do innego formatu; w przeciwnym razie. <see langword="false" /></param>
        <param name="data">Dane do zapisania.</param>
        <summary>Przechowuje określone dane i powiązane z nim formatowanie w tym wystąpieniu przy użyciu wartości logicznej, aby określić, czy dane mogą być konwertowane na inny format.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli nie znasz formatu aplikacji docelowej, możesz przechowywać dane w wielu formatach za pomocą tej metody.  
  
 Aby uzyskać implementację tej metody, zobacz <xref:System.Windows.Forms.DataObject.SetData%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 W tym przykładzie użyto <xref:System.Windows.Forms.DataObject> klasy, która implementuje `IDataObject`, aby `SetData` pokazać użycie metody. Najpierw tworzy`myDataObject`obiekt danych () i `UnicodeText` zapisuje `autoConvert` w nim ciąg, z parametrem ustawionym na `false`. Następnie pobiera formaty skojarzone z danymi przechowywanymi w obiekcie i wyświetla wynik w oknie komunikatu. Jedynym formatem skojarzonym z danymi jest `UnicodeText` format. W <xref:System.Windows.Forms.Form> tym przykładzie przyjęto założenie, że `Form1`utworzono nazwę.  
  
 [!code-cpp[SetData4#1](~/samples/snippets/cpp/VS_Snippets_Winforms/SetData4/CPP/form1.cpp#1)]
 [!code-csharp[SetData4#1](~/samples/snippets/csharp/VS_Snippets_Winforms/SetData4/CS/form1.cs#1)]
 [!code-vb[SetData4#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/SetData4/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.SetData(System.String,System.Boolean,System.Object)" />
      </Docs>
    </Member>
  </Members>
</Type>
