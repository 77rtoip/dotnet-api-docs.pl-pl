<Type Name="IDataObject" FullName="System.Windows.Forms.IDataObject">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="6e6648e6c3a4d4e1d1117188c5b0c1df0c53a5f0" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36520850" />
  </Metadata>
  <TypeSignature Language="C#" Value="public interface IDataObject" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDataObject" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.IDataObject" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDataObject" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDataObject" />
  <TypeSignature Language="F#" Value="type IDataObject = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Udostępnia mechanizm format niezależny od transferu danych.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `IDataObject` Interfejs jest używany przez <xref:System.Windows.Forms.Clipboard> klasy w operacji przeciągania i upuszczania.  
  
 Po zaimplementowaniu w klasie, <xref:System.Windows.Forms.IDataObject> metody umożliwiają użytkownikom przechowywanie danych w wielu formatach w wystąpieniu klasy. Przechowywanie danych w więcej niż jeden format zwiększa prawdopodobieństwo, że aplikacja docelowa, których użytkownik może nie wiedzieć, wymagania dotyczące formatu można pobrać przechowywanych danych. Do przechowywania danych w wystąpieniu <xref:System.Windows.Forms.IDataObject>, wywołania <xref:System.Windows.Forms.IDataObject.SetData%2A> metodę i określić format danych `format` parametru. Ustaw `autoConvert` parametr `false` , jeśli nie chcesz przechowywanych danych ma zostać przekonwertowany do innego formatu podczas pobierania. Wywołanie <xref:System.Windows.Forms.IDataObject.SetData%2A> wiele razy w jednym wystąpieniu <xref:System.Windows.Forms.IDataObject> do przechowywania danych w więcej niż jeden format.  
  
 Pobieranie danych przechowywanych <xref:System.Windows.Forms.IDataObject> przez wywołanie metody <xref:System.Windows.Forms.IDataObject.GetData%2A> — metoda i określania danych formatowania w `format` parametru. Ustaw `autoConvert` parametr `false` pobierać tylko te dane, które były przechowywane w określonym formacie. Aby przekonwertować określony format przechowywanych danych, ustaw `autoConvert` do `true`, albo nie używaj `autoConvert`.  
  
 Aby określić format danych przechowywanych w <xref:System.Windows.Forms.IDataObject>, należy użyć następującego <xref:System.Windows.Forms.IDataObject> metody.  
  
-   Wywołanie <xref:System.Windows.Forms.IDataObject.GetFormats%2A> metoda pobierania tablicy wszystkich formatów, w którym dane są dostępne. Ustaw `autoConvert` parametr `false` uzyskać formatów, w których dane są przechowywane. Aby uzyskać wszystkie formaty, w których dane są dostępne, należy ustawić `autoConvert` do `true`, albo nie używaj tego parametru.  
  
-   Wywołanie <xref:System.Windows.Forms.IDataObject.GetDataPresent%2A> metodę, aby określić, czy przechowywanych danych jest dostępna w określonym formacie. Jeśli nie chcesz, aby przechowywane dane, które ma zostać przekonwertowane na określony format, ustaw `autoConvert` parametr `false`.  
  
 Zobacz <xref:System.Windows.Forms.DataObject> klasy dla implementację tego interfejsu. Zobacz <xref:System.Windows.Forms.DataFormats> klasy dla wstępnie zdefiniowane <xref:System.Windows.Forms.Clipboard> format danych.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.DataObject" />
    <altmember cref="T:System.Windows.Forms.DataFormats" />
  </Docs>
  <Members>
    <MemberGroup MemberName="GetData">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Pobiera dane skojarzone z formatu określone dane.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetData">
      <MemberSignature Language="C#" Value="public object GetData (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetData(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetData(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetData (format As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetData(System::String ^ format);" />
      <MemberSignature Language="F#" Value="abstract member GetData : string -&gt; obj" Usage="iDataObject.GetData format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format">Format danych do pobrania. Zobacz <see cref="T:System.Windows.Forms.DataFormats" /> formatów wstępnie zdefiniowane.</param>
        <summary>Pobiera dane skojarzone z formatu określone dane.</summary>
        <returns>Dane skojarzone z określonym formacie lub <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli ta metoda nie może znaleźć danych w określonym formacie, próbuje przekonwertować na format danych. Jeśli dane nie można przekonwertować na określony format, ta metoda zwraca `null`.  
  
 Aby ustalić, czy jest skojarzony z danych, czy można przekonwertować na format, należy wywołać <xref:System.Windows.Forms.IDataObject.GetDataPresent%2A> przed wywołaniem <xref:System.Windows.Forms.IDataObject.GetData%2A>. Wywołanie <xref:System.Windows.Forms.IDataObject.GetFormats%2A> listę prawidłowe formaty danych przechowywanych w tym wystąpieniu.  
  
> [!NOTE]
>  Można przekonwertować danych do innego formatu był przechowywany określenie, czy konwersja jest dozwolone, a żądany format jest zgodny z formatem przechowywane. Na przykład dane przechowywane jako Unicode można przekonwertować na tekst.  
  
 Implementacja tej metody dla <xref:System.Windows.Forms.DataObject.GetData%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 W tym przykładzie użyto <xref:System.Windows.Forms.DataObject> klasy, która implementuje `IDataObject,` do przedstawiają sposób używania `GetData` metody. Metoda służy do pobierania danych przechowywanych w `myDataObject`, który jest skojarzony z `Text` format. W przykładzie założono, że utworzono już <xref:System.Windows.Forms.Form> o nazwie `Form1` i <xref:System.Windows.Forms.TextBox> o nazwie `textBox1`.  
  
 [!code-cpp[GetData1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetData1/CPP/getdata1.cpp#1)]
 [!code-csharp[GetData1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetData1/CS/getdata1.cs#1)]
 [!code-vb[GetData1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetData1/VB/getdata1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="T:System.Windows.Forms.DataFormats" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetFormats(System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetDataPresent(System.Type)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetFormats(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="GetData">
      <MemberSignature Language="C#" Value="public object GetData (Type format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetData(class System.Type format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetData(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetData (format As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetData(Type ^ format);" />
      <MemberSignature Language="F#" Value="abstract member GetData : Type -&gt; obj" Usage="iDataObject.GetData format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="format">A <see cref="T:System.Type" /> reprezentujący format danych do pobrania. Zobacz <see cref="T:System.Windows.Forms.DataFormats" /> formatów wstępnie zdefiniowane.</param>
        <summary>Pobiera dane skojarzone z formatem typu określonej klasy.</summary>
        <returns>Dane skojarzone z określonym formacie lub <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli ta metoda nie może znaleźć danych w określonym formacie, próbuje przekonwertować na format danych. Jeśli dane nie można przekonwertować na określony format, ta metoda zwraca `null`.  
  
 Aby ustalić, czy jest skojarzony z danych, czy można przekonwertować na format, należy wywołać <xref:System.Windows.Forms.IDataObject.GetDataPresent%2A> przed wywołaniem <xref:System.Windows.Forms.IDataObject.GetData%2A>. Wywołanie <xref:System.Windows.Forms.IDataObject.GetFormats%2A> listę prawidłowe formaty danych przechowywanych w tym wystąpieniu.  
  
> [!NOTE]
>  Można przekonwertować danych do innego formatu był przechowywany określenie, czy konwersja jest dozwolone, a żądany format jest zgodny z formatem przechowywane. Na przykład dane przechowywane jako Unicode można przekonwertować na tekst.  
  
 Implementacja tej metody dla <xref:System.Windows.Forms.DataObject.GetData%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 W tym przykładzie użyto <xref:System.Windows.Forms.DataObject> klasy, która implementuje `IDataObject`, aby przedstawiają sposób używania `GetData` metody. Metoda służy do pobierania danych przechowywanych w `myObject`, która jest skojarzona z typem określonym `myType`. Typ danych pobrane jest wyświetlany w oknie komunikatu. W przykładzie założono, że utworzono już <xref:System.Windows.Forms.Form> o nazwie `Form1`.  
  
 [!code-cpp[GetData2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetData2/CPP/getdata2.cpp#1)]
 [!code-csharp[GetData2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetData2/CS/getdata2.cs#1)]
 [!code-vb[GetData2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetData2/VB/getdata2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="T:System.Windows.Forms.DataFormats" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetFormats(System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetDataPresent(System.Type)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetFormats(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="GetData">
      <MemberSignature Language="C#" Value="public object GetData (string format, bool autoConvert);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetData(string format, bool autoConvert) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetData (format As String, autoConvert As Boolean) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetData(System::String ^ format, bool autoConvert);" />
      <MemberSignature Language="F#" Value="abstract member GetData : string * bool -&gt; obj" Usage="iDataObject.GetData (format, autoConvert)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="autoConvert" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="format">Format danych do pobrania. Zobacz <see cref="T:System.Windows.Forms.DataFormats" /> formatów wstępnie zdefiniowane.</param>
        <param name="autoConvert">
          <see langword="true" /> Aby przekonwertować danych na określonym formacie; w przeciwnym razie <see langword="false" />.</param>
        <summary>Pobiera dane skojarzone z formatem określone dane, do ustalenia, czy do przekonwertowania na format danych przy użyciu wartość logiczną.</summary>
        <returns>Dane skojarzone z określonym formacie lub <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `autoConvert` parametr jest `true` i tej metody nie można odnaleźć danych w określonym formacie, próbuje przekonwertować na format danych. Jeśli dane nie można przekonwertować na określony format lub dane są przechowywane z `autoConvert` ustawiona `false`, ta metoda zwraca `null`.  
  
 Jeśli `autoConvert` parametr jest `false`, ta metoda zwraca dane w określonym formacie lub `null` w przypadku nieodnalezienia żadnych danych w tym formacie.  
  
 Aby ustalić, czy jest skojarzony z danych, czy można przekonwertować na format, należy wywołać <xref:System.Windows.Forms.IDataObject.GetDataPresent%2A> przed wywołaniem <xref:System.Windows.Forms.IDataObject.GetData%2A>. Wywołanie <xref:System.Windows.Forms.IDataObject.GetFormats%2A> listę prawidłowe formaty danych przechowywanych w tym wystąpieniu.  
  
> [!NOTE]
>  Można przekonwertować danych do innego formatu był przechowywany określenie, czy konwersja jest dozwolone, a żądany format jest zgodny z formatem przechowywane. Na przykład dane przechowywane jako Unicode można przekonwertować na tekst.  
  
 Implementacja tej metody dla <xref:System.Windows.Forms.DataObject.GetData%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 W tym przykładzie użyto <xref:System.Windows.Forms.DataObject> klasy, która implementuje `IDataObject`, aby przedstawiają sposób używania `GetData` metody. Przykład pobiera dane przechowywane w `DataObject`za pomocą `autoConvert` parametr, aby określić, czy do przekonwertowania formatu danych. Najpierw `myDataObject` jest tworzony z danymi tekstu. Przykład próbuje dwukrotnie w celu pobrania danych. W pierwszej wersji próbnej, określa format jako ciąg i zestawy `autoConvert` parametr `false`. Ta wersja próbna ulegnie awarii, a wynik jest wyświetlany w oknie komunikatu z etykietą "Komunikat #1". W drugiej wersji próbnej, przykładzie pobiera tych samych danych z `autoConvert` ustawiono parametr `true`. Ta wersja próbna zakończy się pomyślnie, a wynik jest wyświetlany w oknie komunikatu z etykietą "Komunikat #2." W przykładzie założono, że utworzono <xref:System.Windows.Forms.Form> o nazwie `Form1`.  
  
 [!code-cpp[GetData3#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetData3/CPP/getdata3.cpp#1)]
 [!code-csharp[GetData3#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetData3/CS/getdata3.cs#1)]
 [!code-vb[GetData3#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetData3/VB/getdata3.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="T:System.Windows.Forms.DataFormats" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetFormats(System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetDataPresent(System.Type)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetFormats(System.Boolean)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetDataPresent">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Określa, czy dane przechowywane w tym wystąpieniu jest skojarzony z określonym formacie.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetDataPresent">
      <MemberSignature Language="C#" Value="public bool GetDataPresent (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GetDataPresent(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDataPresent (format As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool GetDataPresent(System::String ^ format);" />
      <MemberSignature Language="F#" Value="abstract member GetDataPresent : string -&gt; bool" Usage="iDataObject.GetDataPresent format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format">Format, do których chcesz sprawdzić. Zobacz <see cref="T:System.Windows.Forms.DataFormats" /> formatów wstępnie zdefiniowane.</param>
        <summary>Określa, czy jest skojarzony z danych przechowywanych w tym wystąpieniu i można przekonwertować na określony format.</summary>
        <returns>
          <see langword="true" /> dane przechowywane w tym wystąpieniu jest skojarzony z, czy można przekonwertować na określony format; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wywołaj tę metodę, aby określić, czy format istnieje w tym <xref:System.Windows.Forms.DataObject> przed wywołaniem <xref:System.Windows.Forms.IDataObject.GetData%2A>. Wywołanie <xref:System.Windows.Forms.IDataObject.GetFormats%2A> formatów, które są dostępne w tym wystąpieniu.  
  
> [!NOTE]
>  Można przekonwertować danych do innego formatu był przechowywany określenie, czy konwersja jest dozwolone, a żądany format jest zgodny z formatem przechowywane. Na przykład dane przechowywane jako Unicode można przekonwertować na tekst.  
  
 Implementacja tej metody dla <xref:System.Windows.Forms.DataObject.GetDataPresent%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 W tym przykładzie użyto <xref:System.Windows.Forms.DataObject> klasy, która implementuje `IDataObject`, aby przedstawiają sposób używania `GetDataPresent` metody. Najpierw tworzy obiekt danych przy użyciu ciągu i `Text` format. Następnie sprawdzi, że dane są obecne w `Text` formatowania i wyświetla wyniki w oknie komunikatu. W przykładzie założono, że utworzono <xref:System.Windows.Forms.Form> o nazwie `Form1`.  
  
 [!code-cpp[GetDataPresent1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetDataPresent1/CPP/getdatapresent1.cpp#1)]
 [!code-csharp[GetDataPresent1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetDataPresent1/CS/getdatapresent1.cs#1)]
 [!code-vb[GetDataPresent1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetDataPresent1/VB/getdatapresent1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetDataPresent(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="GetDataPresent">
      <MemberSignature Language="C#" Value="public bool GetDataPresent (Type format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GetDataPresent(class System.Type format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetDataPresent(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDataPresent (format As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool GetDataPresent(Type ^ format);" />
      <MemberSignature Language="F#" Value="abstract member GetDataPresent : Type -&gt; bool" Usage="iDataObject.GetDataPresent format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="format">A <see cref="T:System.Type" /> reprezentujący formatu, do których chcesz sprawdzić. Zobacz <see cref="T:System.Windows.Forms.DataFormats" /> formatów wstępnie zdefiniowane.</param>
        <summary>Określa, czy jest skojarzony z danych przechowywanych w tym wystąpieniu i można przekonwertować na określony format.</summary>
        <returns>
          <see langword="true" /> dane przechowywane w tym wystąpieniu jest skojarzony z, czy można przekonwertować na określony format; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wywołaj tę metodę, aby określić, czy format istnieje w tym <xref:System.Windows.Forms.DataObject> przed wywołaniem <xref:System.Windows.Forms.IDataObject.GetData%2A>. Wywołanie <xref:System.Windows.Forms.IDataObject.GetFormats%2A> formatów, które są dostępne w tym wystąpieniu.  
  
> [!NOTE]
>  Można przekonwertować danych do innego formatu był przechowywany określenie, czy konwersja jest dozwolone, a żądany format jest zgodny z formatem przechowywane. Na przykład dane przechowywane jako Unicode można przekonwertować na tekst.  
  
 Implementacja tej metody dla <xref:System.Windows.Forms.DataObject.GetDataPresent%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 W tym przykładzie użyto <xref:System.Windows.Forms.DataObject> klasy, która implementuje `IDataObject`, aby przedstawiają sposób używania `GetDataPresent` metody. Najpierw tworzy składnik (`myComponent`) i zapisuje go w obiekcie danych (`myDataObject`). Sprawdza, czy określony dane są przechowywane w `myDataObject`. Jeśli wynikiem testu `true`, wyświetla wyniki w oknie komunikatu i zawiera typ danych w polu tekstowym. W tym przykładzie przyjęto założenie, że utworzono już <xref:System.Windows.Forms.Form> o nazwie `Form1` i <xref:System.Windows.Forms.TextBox> o nazwie `textBox1`.  
  
 [!code-cpp[GetDataPresent2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetDataPresent2/CPP/getdatapresent2.cpp#1)]
 [!code-csharp[GetDataPresent2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetDataPresent2/CS/getdatapresent2.cs#1)]
 [!code-vb[GetDataPresent2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetDataPresent2/VB/getdatapresent2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetDataPresent(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="GetDataPresent">
      <MemberSignature Language="C#" Value="public bool GetDataPresent (string format, bool autoConvert);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GetDataPresent(string format, bool autoConvert) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDataPresent (format As String, autoConvert As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool GetDataPresent(System::String ^ format, bool autoConvert);" />
      <MemberSignature Language="F#" Value="abstract member GetDataPresent : string * bool -&gt; bool" Usage="iDataObject.GetDataPresent (format, autoConvert)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="autoConvert" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="format">Format, do których chcesz sprawdzić. Zobacz <see cref="T:System.Windows.Forms.DataFormats" /> formatów wstępnie zdefiniowane.</param>
        <param name="autoConvert">
          <see langword="true" /> Aby określić, czy dane są przechowywane w tym wystąpieniu można przekonwertować na określony format; <see langword="false" /> do sprawdzenia, czy w danych jest w określonym formacie.</param>
        <summary>Określa, czy dane przechowywane w tym wystąpieniu jest skojarzony z określonym formacie przy użyciu wartość logiczną do ustalenia, czy można przekonwertować danych na format.</summary>
        <returns>
          <see langword="true" /> Jeśli dane w lub można przekonwertować na określony format; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wywołaj tę metodę, aby określić, czy format istnieje w tym <xref:System.Windows.Forms.DataObject> przed wywołaniem <xref:System.Windows.Forms.IDataObject.GetData%2A>. Wywołanie <xref:System.Windows.Forms.IDataObject.GetFormats%2A> formatów, które są dostępne w tym wystąpieniu.  
  
 Ta metoda zwraca `true` po:  
  
-   `autoConvert` Parametr jest `true` , a dane są w formacie, który można przekonwertować na odpowiedni format.  
  
-   `autoConvert` Parametr jest `false` i danych jest w odpowiednim formacie.  
  
 Ta metoda zwraca `false` po:  
  
-   `autoConvert` Parametr jest `true` tej metody nie można odnaleźć danych w określonym formacie i nie można go przekonwertować danych na określony format lub przechowywane dane z `autoConvert` ustawioną `false`.  
  
-   `autoConvert` Parametr jest `false`, i danych nie istnieje w tym wystąpieniu w określonym formacie.  
  
> [!NOTE]
>  Można przekonwertować danych do innego formatu był przechowywany określenie, czy konwersja jest dozwolone, a żądany format jest zgodny z formatem przechowywane. Na przykład dane przechowywane jako Unicode można przekonwertować na tekst.  
  
 Implementacja tej metody dla <xref:System.Windows.Forms.DataObject.GetDataPresent%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 W tym przykładzie użyto <xref:System.Windows.Forms.DataObject> klasy, która implementuje `IDataObject`, aby przedstawiają sposób używania `GetDataPresent` metody. Najpierw tworzy obiekt danych (`myDataObject`) za pomocą ciągu i `Text` format. A następnie wysyła zapytanie do obiektu dane skojarzone z `Text` format z `autoConvert` ustawiono parametr `false`. Ta wersja próbna ulegnie awarii, a wynik jest wyświetlany w oknie komunikatu z etykietą "Komunikat #1". W drugiej wersji próbnej, ustawia `autoConvert` parametr `true`. Ta wersja próbna zakończy się pomyślnie, a wynik jest wyświetlany w oknie komunikatu z etykietą "Komunikat #2." W przykładzie założono, że utworzono <xref:System.Windows.Forms.Form> o nazwie `Form1`.  
  
 [!code-cpp[GetDataPresent3#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetDataPresent3/CPP/getdatapresent3.cpp#1)]
 [!code-csharp[GetDataPresent3#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetDataPresent3/CS/getdatapresent3.cs#1)]
 [!code-vb[GetDataPresent3#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetDataPresent3/VB/getdatapresent3.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetDataPresent(System.Type)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetFormats(System.Boolean)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetFormats">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwraca listę wszystkich danych przechowywanych w tym wystąpieniu jest skojarzony z lub może zostać przekonwertowany na formaty.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetFormats">
      <MemberSignature Language="C#" Value="public string[] GetFormats ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string[] GetFormats() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetFormats" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFormats () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetFormats();" />
      <MemberSignature Language="F#" Value="abstract member GetFormats : unit -&gt; string[]" Usage="iDataObject.GetFormats " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca listę wszystkich danych przechowywanych w tym wystąpieniu jest skojarzony z lub może zostać przekonwertowany na formaty.</summary>
        <returns>Tablica nazw reprezentuje listę wszystkich formatów, które są obsługiwane przez dane przechowywane w tym obiekcie.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wywołanie tej metody można pobrać danych obsługiwane formaty przed wywołaniem <xref:System.Windows.Forms.IDataObject.GetData%2A> metody. Zobacz <xref:System.Windows.Forms.DataFormats> klasy dla wstępnie zdefiniowanych formatów.  
  
> [!NOTE]
>  Można przekonwertować danych do innego formatu był przechowywany określenie, czy konwersja jest dozwolone, a żądany format jest zgodny z formatem przechowywane. Na przykład dane przechowywane jako Unicode można przekonwertować na tekst.  
  
 Implementacja tej metody dla <xref:System.Windows.Forms.DataObject.GetFormats%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 W tym przykładzie użyto <xref:System.Windows.Forms.DataObject> klasy, która implementuje `IDataObject`, aby przedstawiają sposób używania `GetFormats` metody. Najpierw tworzy obiekt danych (`myDataObject`) za pomocą ciągu i `Text` format. Następnie je pobiera formaty danych i formaty konwersji danych w obiekcie danych i wyświetla wynikowej listy w oknie komunikatu. W tym przykładzie przyjęto założenie, że utworzono <xref:System.Windows.Forms.Form> o nazwie `Form1`.  
  
 [!code-cpp[GetFormats1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetFormats1/CPP/getformats1.cpp#1)]
 [!code-csharp[GetFormats1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetFormats1/CS/getformats1.cs#1)]
 [!code-vb[GetFormats1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetFormats1/VB/getformats1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.DataObject.GetFormats(System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetData(System.String,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="GetFormats">
      <MemberSignature Language="C#" Value="public string[] GetFormats (bool autoConvert);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string[] GetFormats(bool autoConvert) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetFormats(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFormats (autoConvert As Boolean) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetFormats(bool autoConvert);" />
      <MemberSignature Language="F#" Value="abstract member GetFormats : bool -&gt; string[]" Usage="iDataObject.GetFormats autoConvert" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="autoConvert" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="autoConvert">
          <see langword="true" /> Aby pobrać wszystkie formaty danych przechowywanych w tym wystąpieniu jest skojarzony z lub może zostać przekonwertowany na; <see langword="false" /> można pobrać tylko formaty danych w trybie macierzystym.</param>
        <summary>Pobiera listę wszystkich formatów, które dane przechowywane w tym wystąpieniu jest skojarzony z lub może zostać przekonwertowany na, przy użyciu wartość logiczną w celu określenia, czy można pobrać wszystkich formatów, które można przekonwertować danych lub tylko danych natywnych formaty.</summary>
        <returns>Tablica nazw reprezentuje listę wszystkich formatów, które są obsługiwane przez dane przechowywane w tym obiekcie.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wywołanie tej metody można pobrać danych obsługiwane formaty przed wywołaniem <xref:System.Windows.Forms.IDataObject.GetData%2A> metody. Zobacz <xref:System.Windows.Forms.DataFormats> klasy dla wstępnie zdefiniowanych formatów.  
  
> [!NOTE]
>  Można przekonwertować danych do innego formatu był przechowywany określenie, czy konwersja jest dozwolone, a żądany format jest zgodny z formatem przechowywane. Na przykład dane przechowywane jako Unicode można przekonwertować na tekst.  
  
 Implementacja tej metody dla <xref:System.Windows.Forms.DataObject.GetFormats%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 W tym przykładzie użyto <xref:System.Windows.Forms.DataObject> klasy, która implementuje `IDataObject`, aby przedstawiają sposób używania `GetFormats` metody. Najpierw tworzy obiekt danych (`myDataObject`) za pomocą ciągu i `UnicodeText` format. Następnie tworzy dwie kwerendy w celu uzyskania formatów skojarzonego z danymi. W pierwszym zapytaniu ustawia `autoConvert` parametr `false` : w tym przypadku jest zwracany formatu macierzystego danych. W drugiej kwerendy, ustawia `autoConvert` parametr `true`, dzięki czemu pobiera listę formatów, w tym formatów, które można przekonwertować danych. W każdym przypadku wynikowa lista jest wyświetlana w oknie komunikatu. W tym przykładzie przyjęto założenie, że utworzono <xref:System.Windows.Forms.Form> o nazwie `Form1`.  
  
 [!code-cpp[GetFormats2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetFormats2/CPP/getformats2.cpp#1)]
 [!code-csharp[GetFormats2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetFormats2/CS/getformats2.cs#1)]
 [!code-vb[GetFormats2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetFormats2/VB/getformats2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.DataObject.GetFormats(System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetData(System.String,System.Boolean)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="SetData">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Przechowuje określonych danych i jego skojarzony format, w tym wystąpieniu.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetData">
      <MemberSignature Language="C#" Value="public void SetData (object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetData(object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.SetData(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetData (data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetData(System::Object ^ data);" />
      <MemberSignature Language="F#" Value="abstract member SetData : obj -&gt; unit" Usage="iDataObject.SetData data" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="data">Dane, które mają być przechowywane.</param>
        <summary>Zapisuje określone dane w tym wystąpieniu, za pomocą klasy danych do formatu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Format jest pochodną klasy danych.  
  
 Podczas pobierania danych przechowywane przy użyciu tej metody można przekonwertować na format zgodny.  
  
 Implementacja tej metody dla <xref:System.Windows.Forms.DataObject.SetData%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 W tym przykładzie użyto <xref:System.Windows.Forms.DataObject> klasy, która implementuje `IDataObject`, aby przedstawiają sposób używania `SetData` metody. Najpierw tworzy składnik (`myComponent`) i zapisuje go w obiekcie danych (`myDataObject`). Następnie sprawdza, czy określone dane są przechowywane w obiekcie danych i wyświetla wyniki w oknie komunikatu. W przykładzie założono, że utworzono <xref:System.Windows.Forms.Form> o nazwie `Form1`.  
  
 [!code-cpp[SetData1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/SetData1/CPP/setdata1.cpp#1)]
 [!code-csharp[SetData1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/SetData1/CS/setdata1.cs#1)]
 [!code-vb[SetData1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/SetData1/VB/setdata1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.SetData(System.String,System.Boolean,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="SetData">
      <MemberSignature Language="C#" Value="public void SetData (string format, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetData(string format, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetData (format As String, data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetData(System::String ^ format, System::Object ^ data);" />
      <MemberSignature Language="F#" Value="abstract member SetData : string * obj -&gt; unit" Usage="iDataObject.SetData (format, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">Format skojarzonego z danymi. Zobacz <see cref="T:System.Windows.Forms.DataFormats" /> formatów wstępnie zdefiniowane.</param>
        <param name="data">Dane, które mają być przechowywane.</param>
        <summary>Przechowuje określonych danych i jego skojarzony format, w tym wystąpieniu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli nie znasz format w aplikacji docelowej, można przechowywać dane w wielu formatach za pomocą tej metody.  
  
 Podczas pobierania danych przechowywane przy użyciu tej metody można przekonwertować na format zgodny.  
  
 Implementacja tej metody dla <xref:System.Windows.Forms.DataObject.SetData%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 W tym przykładzie użyto <xref:System.Windows.Forms.DataObject> klasy, która implementuje `IDataObject`, aby przedstawiają sposób używania `SetData` metody. Najpierw tworzy obiekt danych (`myDataObject`) i przechowuje ciąg określania obiektu `UnicodeText` format. Następnie pobiera on dane przechowywane w określania obiektu `Text` sformatować, dzięki czemu dane jest konwertowana na `Text` format. Wynik jest wyświetlany w oknie komunikatu. W tym przykładzie przyjęto założenie, że utworzono <xref:System.Windows.Forms.Form> o nazwie `Form1`.  
  
 [!code-cpp[SetData2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/SetData2/CPP/setdata2.cpp#1)]
 [!code-csharp[SetData2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/SetData2/CS/setdata2.cs#1)]
 [!code-vb[SetData2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/SetData2/VB/setdata2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.SetData(System.String,System.Boolean,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="SetData">
      <MemberSignature Language="C#" Value="public void SetData (Type format, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetData(class System.Type format, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.SetData(System.Type,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetData (format As Type, data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetData(Type ^ format, System::Object ^ data);" />
      <MemberSignature Language="F#" Value="abstract member SetData : Type * obj -&gt; unit" Usage="iDataObject.SetData (format, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Type" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">A <see cref="T:System.Type" /> reprezentujący format skojarzonego z danymi. Zobacz <see cref="T:System.Windows.Forms.DataFormats" /> formatów wstępnie zdefiniowane.</param>
        <param name="data">Dane, które mają być przechowywane.</param>
        <summary>Zapisuje określone dane, a jego typ klasy skojarzone w tym wystąpieniu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli nie znasz format w aplikacji docelowej, można przechowywać dane w wielu formatach za pomocą tej metody.  
  
 Podczas pobierania danych przechowywane przy użyciu tej metody można przekonwertować na format zgodny.  
  
 Implementacja tej metody dla <xref:System.Windows.Forms.DataObject.SetData%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 W tym przykładzie użyto <xref:System.Windows.Forms.DataObject> klasy, która implementuje `IDataObject`, aby przedstawiają sposób używania `SetData` metody. Najpierw tworzy składnik (`myComponent`) i zapisuje go w obiekcie danych (`myDataObject`), za pomocą narzędzia `myType` określić format danych. Następnie sprawdza, czy są przechowywane w obiekcie danych określonego typu i wyświetla wyniki w oknie komunikatu. W przykładzie założono, że utworzono <xref:System.Windows.Forms.Form> o nazwie `Form1`.  
  
 [!code-cpp[SetData3#1](~/samples/snippets/cpp/VS_Snippets_Winforms/SetData3/CPP/setdata3.cpp#1)]
 [!code-csharp[SetData3#1](~/samples/snippets/csharp/VS_Snippets_Winforms/SetData3/CS/setdata3.cs#1)]
 [!code-vb[SetData3#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/SetData3/VB/setdata3.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetFormats(System.Boolean)" />
        <altmember cref="T:System.Windows.Forms.DataFormats" />
      </Docs>
    </Member>
    <Member MemberName="SetData">
      <MemberSignature Language="C#" Value="public void SetData (string format, bool autoConvert, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetData(string format, bool autoConvert, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetData (format As String, autoConvert As Boolean, data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetData(System::String ^ format, bool autoConvert, System::Object ^ data);" />
      <MemberSignature Language="F#" Value="abstract member SetData : string * bool * obj -&gt; unit" Usage="iDataObject.SetData (format, autoConvert, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="autoConvert" Type="System.Boolean" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">Format skojarzonego z danymi. Zobacz <see cref="T:System.Windows.Forms.DataFormats" /> formatów wstępnie zdefiniowane.</param>
        <param name="autoConvert">
          <see langword="true" /> Aby umożliwić danych do innego formatu; w przeciwnym razie <see langword="false" />.</param>
        <param name="data">Dane, które mają być przechowywane.</param>
        <summary>Przechowuje określonych danych i jego skojarzony format w tym wystąpieniu, za pomocą wartość logiczną, aby określić, czy dane mogą być konwertowane do innego formatu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli nie znasz format w aplikacji docelowej, można przechowywać dane w wielu formatach za pomocą tej metody.  
  
 Implementacja tej metody dla <xref:System.Windows.Forms.DataObject.SetData%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 W tym przykładzie użyto <xref:System.Windows.Forms.DataObject> klasy, która implementuje `IDataObject`, aby przedstawiają sposób używania `SetData` metody. Najpierw tworzy obiekt danych (`myDataObject`) i przechowuje `UnicodeText` ciąg, z `autoConvert` ustawiono parametr `false`. Następnie pobiera formaty skojarzony z danych przechowywanych w obiekcie i wyświetla wyniki w oknie komunikatu. Jest tylko format skojarzonego z danymi `UnicodeText` format. W tym przykładzie przyjęto założenie, że utworzono <xref:System.Windows.Forms.Form> o nazwie `Form1`.  
  
 [!code-cpp[SetData4#1](~/samples/snippets/cpp/VS_Snippets_Winforms/SetData4/CPP/form1.cpp#1)]
 [!code-csharp[SetData4#1](~/samples/snippets/csharp/VS_Snippets_Winforms/SetData4/CS/form1.cs#1)]
 [!code-vb[SetData4#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/SetData4/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.SetData(System.String,System.Boolean,System.Object)" />
      </Docs>
    </Member>
  </Members>
</Type>