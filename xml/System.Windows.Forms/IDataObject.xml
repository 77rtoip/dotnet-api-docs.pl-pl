<Type Name="IDataObject" FullName="System.Windows.Forms.IDataObject">
  <Metadata><Meta Name="ms.openlocfilehash" Value="dd78769c002ec6164dd33b8ddba8cc01deb5a7b9" /><Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="10/04/2018" /><Meta Name="ms.locfileid" Value="48704564" /></Metadata><TypeSignature Language="C#" Value="public interface IDataObject" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IDataObject" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.IDataObject" />
  <TypeSignature Language="VB.NET" Value="Public Interface IDataObject" />
  <TypeSignature Language="C++ CLI" Value="public interface class IDataObject" />
  <TypeSignature Language="F#" Value="type IDataObject = interface" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Udostępnia mechanizm niezależny od formatu do przesyłania danych.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `IDataObject` Interfejs jest wykorzystywany przez <xref:System.Windows.Forms.Clipboard> klasy i podczas operacji przeciągania i upuszczania.  
  
 Po zaimplementowaniu w klasie <xref:System.Windows.Forms.IDataObject> metody zezwala użytkownikowi na przechowywanie danych w wielu formatach w wystąpieniu klasy. Przechowywanie danych w wielu formatach zwiększa prawdopodobieństwo, że aplikacja docelowa, których możesz nie znać, wymagania dotyczące formatu można pobrać przechowywanych danych. Do przechowywania danych w wystąpieniu <xref:System.Windows.Forms.IDataObject>, wywołaj <xref:System.Windows.Forms.IDataObject.SetData%2A> metodę i określić format danych `format` parametru. Ustaw `autoConvert` parametr `false` , jeśli nie chcesz przechowywanych danych ma zostać przekonwertowany na inny format, podczas pobierania. Wywoływanie <xref:System.Windows.Forms.IDataObject.SetData%2A> wiele razy w jednym wystąpieniu <xref:System.Windows.Forms.IDataObject> do przechowywania danych w wielu formatach.  
  
 Pobieranie danych przechowywanych <xref:System.Windows.Forms.IDataObject> przez wywołanie metody <xref:System.Windows.Forms.IDataObject.GetData%2A> metody i określając dane, formatowania w `format` parametru. Ustaw `autoConvert` parametr `false` można pobrać dane przechowywane w określonym formacie. Aby przekonwertować przechowywane dane w określonym formacie, należy ustawić `autoConvert` do `true`, albo nie używaj `autoConvert`.  
  
 Aby określić format danych przechowywanych w <xref:System.Windows.Forms.IDataObject>, należy użyć następującego <xref:System.Windows.Forms.IDataObject> metody.  
  
-   Wywołaj <xref:System.Windows.Forms.IDataObject.GetFormats%2A> metodę, która pobierze tablicę wszystkich formatach, w którym dane są dostępne. Ustaw `autoConvert` parametr `false` można pobrać tylko formaty, w których przechowywane są dane. Aby uzyskać wszystkie formaty, w których dane są dostępne, należy ustawić `autoConvert` do `true`, albo nie używaj tego parametru.  
  
-   Wywołaj <xref:System.Windows.Forms.IDataObject.GetDataPresent%2A> metodę pozwala ustalić, czy przechowywane dane są dostępne w określonym formacie. Jeśli nie chcesz przechowywanych danych do przekonwertowania w określonym formacie, ustawić `autoConvert` parametr `false`.  
  
 Zobacz <xref:System.Windows.Forms.DataObject> klasy związanych z implementacją interfejsu. Zobacz <xref:System.Windows.Forms.DataFormats> klasy dla wstępnie zdefiniowanego <xref:System.Windows.Forms.Clipboard> formaty danych.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.DataObject" />
    <altmember cref="T:System.Windows.Forms.DataFormats" />
  </Docs>
  <Members>
    <MemberGroup MemberName="GetData">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Pobiera dane skojarzone z formatu określone dane.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetData">
      <MemberSignature Language="C#" Value="public object GetData (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetData(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetData(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetData (format As String) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetData(System::String ^ format);" />
      <MemberSignature Language="F#" Value="abstract member GetData : string -&gt; obj" Usage="iDataObject.GetData format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format">Format danych do pobrania. Zobacz <see cref="T:System.Windows.Forms.DataFormats" /> wstępnie zdefiniowanych formatów.</param>
        <summary>Pobiera dane skojarzone z formatu określone dane.</summary>
        <returns>Dane skojarzone z określonym formacie lub <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli ta metoda nie może znaleźć danych w określonym formacie, próbuje przekonwertować na format danych. Jeśli dane nie można przekonwertować na określony format, Metoda ta zwraca `null`.  
  
 Aby określić danych jest skojarzony, czy można przekonwertować do formatu, należy wywołać <xref:System.Windows.Forms.IDataObject.GetDataPresent%2A> przed wywołaniem <xref:System.Windows.Forms.IDataObject.GetData%2A>. Wywołaj <xref:System.Windows.Forms.IDataObject.GetFormats%2A> listę poprawnych formatów danych przechowywanych w tym wystąpieniu.  
  
> [!NOTE]
>  Dane można przekonwertować na inny format, jeśli została zapisana, określając, że konwersja jest dozwolona, a Jeśli żądany format jest zgodny z formatem przechowywanych. Na przykład dane przechowywane jako Unicode można przekonwertować na tekst.  
  
 Implementacja tej metody można zobaczyć <xref:System.Windows.Forms.DataObject.GetData%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 W tym przykładzie użyto <xref:System.Windows.Forms.DataObject> klasy, która implementuje `IDataObject,` aby zademonstrować użycie `GetData` metody. Metoda służy do pobierania danych przechowywanych w `myDataObject`, który jest skojarzony z `Text` formatu. W przykładzie założono, że utworzono już <xref:System.Windows.Forms.Form> o nazwie `Form1` i <xref:System.Windows.Forms.TextBox> o nazwie `textBox1`.  
  
 [!code-cpp[GetData1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetData1/CPP/getdata1.cpp#1)]
 [!code-csharp[GetData1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetData1/CS/getdata1.cs#1)]
 [!code-vb[GetData1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetData1/VB/getdata1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="T:System.Windows.Forms.DataFormats" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetFormats(System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetDataPresent(System.Type)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetFormats(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="GetData">
      <MemberSignature Language="C#" Value="public object GetData (Type format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetData(class System.Type format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetData(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetData (format As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetData(Type ^ format);" />
      <MemberSignature Language="F#" Value="abstract member GetData : Type -&gt; obj" Usage="iDataObject.GetData format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="format">A <see cref="T:System.Type" /> reprezentujący format danych do pobrania. Zobacz <see cref="T:System.Windows.Forms.DataFormats" /> wstępnie zdefiniowanych formatów.</param>
        <summary>Pobiera dane skojarzone z formatem typu określonej klasy.</summary>
        <returns>Dane skojarzone z określonym formacie lub <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli ta metoda nie może znaleźć danych w określonym formacie, próbuje przekonwertować na format danych. Jeśli dane nie można przekonwertować na określony format, Metoda ta zwraca `null`.  
  
 Aby określić danych jest skojarzony, czy można przekonwertować do formatu, należy wywołać <xref:System.Windows.Forms.IDataObject.GetDataPresent%2A> przed wywołaniem <xref:System.Windows.Forms.IDataObject.GetData%2A>. Wywołaj <xref:System.Windows.Forms.IDataObject.GetFormats%2A> listę poprawnych formatów danych przechowywanych w tym wystąpieniu.  
  
> [!NOTE]
>  Dane można przekonwertować na inny format, jeśli została zapisana, określając, że konwersja jest dozwolona, a Jeśli żądany format jest zgodny z formatem przechowywanych. Na przykład dane przechowywane jako Unicode można przekonwertować na tekst.  
  
 Implementacja tej metody można zobaczyć <xref:System.Windows.Forms.DataObject.GetData%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 W tym przykładzie użyto <xref:System.Windows.Forms.DataObject> klasy, która implementuje `IDataObject`, aby zademonstrować użycie `GetData` metody. Metoda służy do pobierania danych przechowywanych w `myObject`, który jest skojarzony z określonego typu `myType`. Rodzaj pobrane dane jest wyświetlany w oknie komunikatu. W przykładzie założono, że utworzono już <xref:System.Windows.Forms.Form> o nazwie `Form1`.  
  
 [!code-cpp[GetData2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetData2/CPP/getdata2.cpp#1)]
 [!code-csharp[GetData2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetData2/CS/getdata2.cs#1)]
 [!code-vb[GetData2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetData2/VB/getdata2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="T:System.Windows.Forms.DataFormats" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetFormats(System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetDataPresent(System.Type)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetFormats(System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="GetData">
      <MemberSignature Language="C#" Value="public object GetData (string format, bool autoConvert);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance object GetData(string format, bool autoConvert) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetData (format As String, autoConvert As Boolean) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ GetData(System::String ^ format, bool autoConvert);" />
      <MemberSignature Language="F#" Value="abstract member GetData : string * bool -&gt; obj" Usage="iDataObject.GetData (format, autoConvert)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="autoConvert" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="format">Format danych do pobrania. Zobacz <see cref="T:System.Windows.Forms.DataFormats" /> wstępnie zdefiniowanych formatów.</param>
        <param name="autoConvert"><see langword="true" /> Aby przekonwertować danych na określonym formacie. w przeciwnym razie <see langword="false" />.</param>
        <summary>Pobiera dane skojarzone z formatem określone dane, przy użyciu na wartość logiczną, aby określić, czy przeprowadzenie konwersji danych do formatu.</summary>
        <returns>Dane skojarzone z określonym formacie lub <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `autoConvert` parametr jest `true` i ta metoda nie może znaleźć danych w określonym formacie, próbuje przekonwertować na format danych. Jeśli dane nie można przekonwertować na określony format lub jeśli dane są przechowywane przy użyciu `autoConvert` parametr `false`, Metoda ta zwraca `null`.  
  
 Jeśli `autoConvert` parametr jest `false`, ta metoda zwraca dane w określonym formacie lub `null` Jeśli można znaleźć żadnych danych, w tym formacie.  
  
 Aby określić danych jest skojarzony, czy można przekonwertować do formatu, należy wywołać <xref:System.Windows.Forms.IDataObject.GetDataPresent%2A> przed wywołaniem <xref:System.Windows.Forms.IDataObject.GetData%2A>. Wywołaj <xref:System.Windows.Forms.IDataObject.GetFormats%2A> listę poprawnych formatów danych przechowywanych w tym wystąpieniu.  
  
> [!NOTE]
>  Dane można przekonwertować na inny format, jeśli została zapisana, określając, że konwersja jest dozwolona, a Jeśli żądany format jest zgodny z formatem przechowywanych. Na przykład dane przechowywane jako Unicode można przekonwertować na tekst.  
  
 Implementacja tej metody można zobaczyć <xref:System.Windows.Forms.DataObject.GetData%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 W tym przykładzie użyto <xref:System.Windows.Forms.DataObject> klasy, która implementuje `IDataObject`, aby zademonstrować użycie `GetData` metody. Przykład pobiera dane przechowywane w `DataObject`przy użyciu `autoConvert` parametru, aby określić, czy można przekonwertować na format danych. Po pierwsze, `myDataObject` jest tworzony przy użyciu danych tekstowych. Przykład próbuje dwa razy pobrać dane. W pierwszej wersji próbnej, określa format jako ciąg i zestawy `autoConvert` parametr `false`. Ta wersja próbna ulegnie awarii, a wynik jest wyświetlany w oknie komunikatu z etykietą "Komunikat #1". W drugim okresie próbnym przykład pobiera te same dane z `autoConvert` parametr `true`. Ta wersja próbna zakończy się powodzeniem, a wynik jest wyświetlany w oknie komunikatu z etykietą "Komunikat #2." W przykładzie założono, że utworzono <xref:System.Windows.Forms.Form> o nazwie `Form1`.  
  
 [!code-cpp[GetData3#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetData3/CPP/getdata3.cpp#1)]
 [!code-csharp[GetData3#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetData3/CS/getdata3.cs#1)]
 [!code-vb[GetData3#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetData3/VB/getdata3.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="T:System.Windows.Forms.DataFormats" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetFormats(System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetDataPresent(System.Type)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetFormats(System.Boolean)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetDataPresent">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Określa, czy dane przechowywane w tym wystąpieniu jest skojarzony z określonym formacie.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetDataPresent">
      <MemberSignature Language="C#" Value="public bool GetDataPresent (string format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GetDataPresent(string format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDataPresent (format As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool GetDataPresent(System::String ^ format);" />
      <MemberSignature Language="F#" Value="abstract member GetDataPresent : string -&gt; bool" Usage="iDataObject.GetDataPresent format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="format">Format, na który ma zostać sprawdzony. Zobacz <see cref="T:System.Windows.Forms.DataFormats" /> wstępnie zdefiniowanych formatów.</param>
        <summary>Określa, czy jest skojarzony z — dane przechowywane w tym wystąpieniu i można przekonwertować na określony format.</summary>
        <returns><see langword="true" /> dane przechowywane w tym wystąpieniu jest skojarzony, czy można przekonwertować na określony format; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wywołaj tę metodę, aby określić, czy format istnieje w tym <xref:System.Windows.Forms.DataObject> przed wywołaniem <xref:System.Windows.Forms.IDataObject.GetData%2A>. Wywołaj <xref:System.Windows.Forms.IDataObject.GetFormats%2A> formatów, które są dostępne w tym wystąpieniu.  
  
> [!NOTE]
>  Dane można przekonwertować na inny format, jeśli została zapisana, określając, że konwersja jest dozwolona, a Jeśli żądany format jest zgodny z formatem przechowywanych. Na przykład dane przechowywane jako Unicode można przekonwertować na tekst.  
  
 Implementacja tej metody można zobaczyć <xref:System.Windows.Forms.DataObject.GetDataPresent%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 W tym przykładzie użyto <xref:System.Windows.Forms.DataObject> klasy, która implementuje `IDataObject`, aby zademonstrować użycie `GetDataPresent` metody. Najpierw tworzy obiekt danych przy użyciu ciągu i `Text` formatu. Następnie sprawdza, czy dane są obecne w `Text` formatowania i wyświetla wyniki w oknie komunikatu. W przykładzie założono, że utworzono <xref:System.Windows.Forms.Form> o nazwie `Form1`.  
  
 [!code-cpp[GetDataPresent1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetDataPresent1/CPP/getdatapresent1.cpp#1)]
 [!code-csharp[GetDataPresent1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetDataPresent1/CS/getdatapresent1.cs#1)]
 [!code-vb[GetDataPresent1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetDataPresent1/VB/getdatapresent1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetDataPresent(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="GetDataPresent">
      <MemberSignature Language="C#" Value="public bool GetDataPresent (Type format);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GetDataPresent(class System.Type format) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetDataPresent(System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDataPresent (format As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool GetDataPresent(Type ^ format);" />
      <MemberSignature Language="F#" Value="abstract member GetDataPresent : Type -&gt; bool" Usage="iDataObject.GetDataPresent format" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="format">A <see cref="T:System.Type" /> reprezentujący format, który ma zostać sprawdzony. Zobacz <see cref="T:System.Windows.Forms.DataFormats" /> wstępnie zdefiniowanych formatów.</param>
        <summary>Określa, czy jest skojarzony z — dane przechowywane w tym wystąpieniu i można przekonwertować na określony format.</summary>
        <returns><see langword="true" /> dane przechowywane w tym wystąpieniu jest skojarzony, czy można przekonwertować na określony format; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wywołaj tę metodę, aby określić, czy format istnieje w tym <xref:System.Windows.Forms.DataObject> przed wywołaniem <xref:System.Windows.Forms.IDataObject.GetData%2A>. Wywołaj <xref:System.Windows.Forms.IDataObject.GetFormats%2A> formatów, które są dostępne w tym wystąpieniu.  
  
> [!NOTE]
>  Dane można przekonwertować na inny format, jeśli została zapisana, określając, że konwersja jest dozwolona, a Jeśli żądany format jest zgodny z formatem przechowywanych. Na przykład dane przechowywane jako Unicode można przekonwertować na tekst.  
  
 Implementacja tej metody można zobaczyć <xref:System.Windows.Forms.DataObject.GetDataPresent%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 W tym przykładzie użyto <xref:System.Windows.Forms.DataObject> klasy, która implementuje `IDataObject`, aby zademonstrować użycie `GetDataPresent` metody. Najpierw tworzy składnik (`myComponent`) i zapisuje go w obiekcie danych (`myDataObject`). Następnie sprawdza, czy określone dane są przechowywane w `myDataObject`. Jeśli wynikiem testu `true`, wyświetla wyniki w oknie komunikatu i wyświetla typ danych w polu tekstowym. W tym przykładzie założono, że utworzono już <xref:System.Windows.Forms.Form> o nazwie `Form1` i <xref:System.Windows.Forms.TextBox> o nazwie `textBox1`.  
  
 [!code-cpp[GetDataPresent2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetDataPresent2/CPP/getdatapresent2.cpp#1)]
 [!code-csharp[GetDataPresent2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetDataPresent2/CS/getdatapresent2.cs#1)]
 [!code-vb[GetDataPresent2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetDataPresent2/VB/getdatapresent2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetDataPresent(System.Type)" />
      </Docs>
    </Member>
    <Member MemberName="GetDataPresent">
      <MemberSignature Language="C#" Value="public bool GetDataPresent (string format, bool autoConvert);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool GetDataPresent(string format, bool autoConvert) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetDataPresent (format As String, autoConvert As Boolean) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool GetDataPresent(System::String ^ format, bool autoConvert);" />
      <MemberSignature Language="F#" Value="abstract member GetDataPresent : string * bool -&gt; bool" Usage="iDataObject.GetDataPresent (format, autoConvert)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="autoConvert" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="format">Format, na który ma zostać sprawdzony. Zobacz <see cref="T:System.Windows.Forms.DataFormats" /> wstępnie zdefiniowanych formatów.</param>
        <param name="autoConvert"><see langword="true" /> Aby ustalić, czy dane są przechowywane w tym wystąpieniu można przekonwertować na określonym formacie. <see langword="false" /> do sprawdzenia, czy dane znajdują się w określonym formacie.</param>
        <summary>Określa, czy dane przechowywane w tym wystąpieniu jest skojarzony z określonym formacie, przy użyciu wartość typu Boolean do ustalenia, czy należy przekonwertować na format danych.</summary>
        <returns><see langword="true" /> Jeśli dane w lub można przekonwertować na określonym formacie. w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wywołaj tę metodę, aby określić, czy format istnieje w tym <xref:System.Windows.Forms.DataObject> przed wywołaniem <xref:System.Windows.Forms.IDataObject.GetData%2A>. Wywołaj <xref:System.Windows.Forms.IDataObject.GetFormats%2A> formatów, które są dostępne w tym wystąpieniu.  
  
 Ta metoda zwraca `true` po:  
  
-   `autoConvert` Parametr jest `true` i dane są w formacie, który może zostać przekonwertowany na odpowiedni format.  
  
-   `autoConvert` Parametr jest `false` i dane znajdują się w odpowiednim formacie.  
  
 Ta metoda zwraca `false` po:  
  
-   `autoConvert` Parametr jest `true` tej metody nie można znaleźć danych w określonym formacie i nie może przekonwertować danych w określonym formacie i dane są przechowywane przy użyciu `autoConvert` równa `false`.  
  
-   `autoConvert` Parametr jest `false`, i danych nie istnieje w tym wystąpieniu w określonym formacie.  
  
> [!NOTE]
>  Dane można przekonwertować na inny format, jeśli została zapisana, określając, że konwersja jest dozwolona, a Jeśli żądany format jest zgodny z formatem przechowywanych. Na przykład dane przechowywane jako Unicode można przekonwertować na tekst.  
  
 Implementacja tej metody można zobaczyć <xref:System.Windows.Forms.DataObject.GetDataPresent%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 W tym przykładzie użyto <xref:System.Windows.Forms.DataObject> klasy, która implementuje `IDataObject`, aby zademonstrować użycie `GetDataPresent` metody. Najpierw tworzy obiekt danych (`myDataObject`) przy użyciu ciągu i `Text` formatu. A następnie wysyła zapytanie do obiektu danych skojarzonych z `Text` formatu, za pomocą `autoConvert` parametr `false`. Ta wersja próbna ulegnie awarii, a wynik jest wyświetlany w oknie komunikatu z etykietą "Komunikat #1". W drugim okresie próbnym ustawia `autoConvert` parametr `true`. Ta wersja próbna zakończy się powodzeniem, a wynik jest wyświetlany w oknie komunikatu z etykietą "Komunikat #2." W przykładzie założono, że utworzono <xref:System.Windows.Forms.Form> o nazwie `Form1`.  
  
 [!code-cpp[GetDataPresent3#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetDataPresent3/CPP/getdatapresent3.cpp#1)]
 [!code-csharp[GetDataPresent3#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetDataPresent3/CS/getdatapresent3.cs#1)]
 [!code-vb[GetDataPresent3#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetDataPresent3/VB/getdatapresent3.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetDataPresent(System.Type)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetFormats(System.Boolean)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="GetFormats">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zwraca listę wszystkich formatach, które dane przechowywane w tym wystąpieniu jest skojarzony z lub mogą być konwertowane na.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GetFormats">
      <MemberSignature Language="C#" Value="public string[] GetFormats ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string[] GetFormats() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetFormats" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFormats () As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetFormats();" />
      <MemberSignature Language="F#" Value="abstract member GetFormats : unit -&gt; string[]" Usage="iDataObject.GetFormats " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca listę wszystkich formatach, które dane przechowywane w tym wystąpieniu jest skojarzony z lub mogą być konwertowane na.</summary>
        <returns>Tablica nazw reprezentuje listę wszystkich formatach, które są obsługiwane przez dane przechowywane w tym obiekcie.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wywołanie tej metody, aby uzyskać formaty obsługiwane dane przed wywołaniem <xref:System.Windows.Forms.IDataObject.GetData%2A> metody. Zobacz <xref:System.Windows.Forms.DataFormats> klasy dla wstępnie zdefiniowane formaty.  
  
> [!NOTE]
>  Dane można przekonwertować na inny format, jeśli została zapisana, określając, że konwersja jest dozwolona, a Jeśli żądany format jest zgodny z formatem przechowywanych. Na przykład dane przechowywane jako Unicode można przekonwertować na tekst.  
  
 Implementacja tej metody można zobaczyć <xref:System.Windows.Forms.DataObject.GetFormats%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 W tym przykładzie użyto <xref:System.Windows.Forms.DataObject> klasy, która implementuje `IDataObject`, aby zademonstrować użycie `GetFormats` metody. Najpierw tworzy obiekt danych (`myDataObject`) przy użyciu ciągu i `Text` formatu. Następnie go pobiera wszystkie formaty danych i formaty konwersji danych w obiekcie danych i wyświetla listę wyników w oknie komunikatu. W tym przykładzie założono, że utworzono <xref:System.Windows.Forms.Form> o nazwie `Form1`.  
  
 [!code-cpp[GetFormats1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetFormats1/CPP/getformats1.cpp#1)]
 [!code-csharp[GetFormats1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetFormats1/CS/getformats1.cs#1)]
 [!code-vb[GetFormats1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetFormats1/VB/getformats1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.DataObject.GetFormats(System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetData(System.String,System.Boolean)" />
      </Docs>
    </Member>
    <Member MemberName="GetFormats">
      <MemberSignature Language="C#" Value="public string[] GetFormats (bool autoConvert);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance string[] GetFormats(bool autoConvert) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.GetFormats(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFormats (autoConvert As Boolean) As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::String ^&gt; ^ GetFormats(bool autoConvert);" />
      <MemberSignature Language="F#" Value="abstract member GetFormats : bool -&gt; string[]" Usage="iDataObject.GetFormats autoConvert" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="autoConvert" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="autoConvert"><see langword="true" /> Aby pobrać wszystkie formaty danych przechowywanych w tym wystąpieniu jest skojarzony z lub mogą być konwertowane na; <see langword="false" /> można pobrać tylko formaty danych w trybie macierzystym.</param>
        <summary>Pobiera listę wszystkich formatach, które — dane przechowywane w tym wystąpieniu jest skojarzony z lub mogą być konwertowane na, aby ustalić, czy można pobrać wszystkich formatach, które można przekonwertować danych lub tylko danych natywnych formatuje przy użyciu typu wartość logiczna.</summary>
        <returns>Tablica nazw reprezentuje listę wszystkich formatach, które są obsługiwane przez dane przechowywane w tym obiekcie.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wywołanie tej metody, aby uzyskać formaty obsługiwane dane przed wywołaniem <xref:System.Windows.Forms.IDataObject.GetData%2A> metody. Zobacz <xref:System.Windows.Forms.DataFormats> klasy dla wstępnie zdefiniowane formaty.  
  
> [!NOTE]
>  Dane można przekonwertować na inny format, jeśli została zapisana, określając, że konwersja jest dozwolona, a Jeśli żądany format jest zgodny z formatem przechowywanych. Na przykład dane przechowywane jako Unicode można przekonwertować na tekst.  
  
 Implementacja tej metody można zobaczyć <xref:System.Windows.Forms.DataObject.GetFormats%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 W tym przykładzie użyto <xref:System.Windows.Forms.DataObject> klasy, która implementuje `IDataObject`, aby zademonstrować użycie `GetFormats` metody. Najpierw tworzy obiekt danych (`myDataObject`) przy użyciu ciągu i `UnicodeText` formatu. Następnie tworzy dwa zapytania formaty skojarzonego z danymi. W pierwszym zapytaniu ustawia `autoConvert` parametr `false` : w tym przypadku jest zwracany wyłącznie natywnego formatu danych. W zapytaniu drugie ustawia `autoConvert` parametr `true`, dzięki czemu pobiera listę formatów, w tym formaty, które można przekonwertować danych. W każdym przypadku wynikowa lista jest wyświetlana w oknie komunikatu. W tym przykładzie założono, że utworzono <xref:System.Windows.Forms.Form> o nazwie `Form1`.  
  
 [!code-cpp[GetFormats2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetFormats2/CPP/getformats2.cpp#1)]
 [!code-csharp[GetFormats2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetFormats2/CS/getformats2.cs#1)]
 [!code-vb[GetFormats2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetFormats2/VB/getformats2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.DataObject.GetFormats(System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetData(System.String,System.Boolean)" />
      </Docs>
    </Member>
    <MemberGroup MemberName="SetData">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Przechowuje określonych danych i jego skojarzone format, w tym wystąpieniu.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SetData">
      <MemberSignature Language="C#" Value="public void SetData (object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetData(object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.SetData(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetData (data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetData(System::Object ^ data);" />
      <MemberSignature Language="F#" Value="abstract member SetData : obj -&gt; unit" Usage="iDataObject.SetData data" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="data">Dane, które mają być przechowywane.</param>
        <summary>Zapisuje określone dane w tym wypadku przy użyciu klasy danych dla formatu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Format jest pochodną klasy danych.  
  
 Dane przechowywane przy użyciu tej metody można przekonwertować na format zgodny podczas pobierania.  
  
 Implementacja tej metody można zobaczyć <xref:System.Windows.Forms.DataObject.SetData%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 W tym przykładzie użyto <xref:System.Windows.Forms.DataObject> klasy, która implementuje `IDataObject`, aby zademonstrować użycie `SetData` metody. Najpierw tworzy składnik (`myComponent`) i zapisuje go w obiekcie danych (`myDataObject`). Następnie sprawdza, czy określone dane są przechowywane w obiekcie danych i wyświetla wyniki w oknie komunikatu. W przykładzie założono, że utworzono <xref:System.Windows.Forms.Form> o nazwie `Form1`.  
  
 [!code-cpp[SetData1#1](~/samples/snippets/cpp/VS_Snippets_Winforms/SetData1/CPP/setdata1.cpp#1)]
 [!code-csharp[SetData1#1](~/samples/snippets/csharp/VS_Snippets_Winforms/SetData1/CS/setdata1.cs#1)]
 [!code-vb[SetData1#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/SetData1/VB/setdata1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.SetData(System.String,System.Boolean,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="SetData">
      <MemberSignature Language="C#" Value="public void SetData (string format, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetData(string format, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetData (format As String, data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetData(System::String ^ format, System::Object ^ data);" />
      <MemberSignature Language="F#" Value="abstract member SetData : string * obj -&gt; unit" Usage="iDataObject.SetData (format, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">Format skojarzonego z danymi. Zobacz <see cref="T:System.Windows.Forms.DataFormats" /> wstępnie zdefiniowanych formatów.</param>
        <param name="data">Dane, które mają być przechowywane.</param>
        <summary>Przechowuje określonych danych i jego skojarzone format, w tym wystąpieniu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli nie znasz format aplikacji docelowej, można przechowywać dane w wielu formatach za pomocą tej metody.  
  
 Dane przechowywane przy użyciu tej metody można przekonwertować na format zgodny podczas pobierania.  
  
 Implementacja tej metody można zobaczyć <xref:System.Windows.Forms.DataObject.SetData%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 W tym przykładzie użyto <xref:System.Windows.Forms.DataObject> klasy, która implementuje `IDataObject`, aby zademonstrować użycie `SetData` metody. Najpierw tworzy obiekt danych (`myDataObject`) i przechowuje ciągu podczas określania obiektu `UnicodeText` formatu. Następnie pobiera danych przechowywanych w określania obiektu `Text` formatowania, dzięki czemu dane są konwertowane na `Text` formatu. Wynik jest wyświetlany w oknie komunikatu. W tym przykładzie założono, że utworzono <xref:System.Windows.Forms.Form> o nazwie `Form1`.  
  
 [!code-cpp[SetData2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/SetData2/CPP/setdata2.cpp#1)]
 [!code-csharp[SetData2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/SetData2/CS/setdata2.cs#1)]
 [!code-vb[SetData2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/SetData2/VB/setdata2.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.SetData(System.String,System.Boolean,System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="SetData">
      <MemberSignature Language="C#" Value="public void SetData (Type format, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetData(class System.Type format, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.SetData(System.Type,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetData (format As Type, data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetData(Type ^ format, System::Object ^ data);" />
      <MemberSignature Language="F#" Value="abstract member SetData : Type * obj -&gt; unit" Usage="iDataObject.SetData (format, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.Type" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">A <see cref="T:System.Type" /> reprezentujący formatu skojarzonego z danymi. Zobacz <see cref="T:System.Windows.Forms.DataFormats" /> wstępnie zdefiniowanych formatów.</param>
        <param name="data">Dane, które mają być przechowywane.</param>
        <summary>Zapisuje określone dane, a jego typ klasy skojarzonej w tym wystąpieniu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli nie znasz format aplikacji docelowej, można przechowywać dane w wielu formatach za pomocą tej metody.  
  
 Dane przechowywane przy użyciu tej metody można przekonwertować na format zgodny podczas pobierania.  
  
 Implementacja tej metody można zobaczyć <xref:System.Windows.Forms.DataObject.SetData%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 W tym przykładzie użyto <xref:System.Windows.Forms.DataObject> klasy, która implementuje `IDataObject`, aby zademonstrować użycie `SetData` metody. Najpierw tworzy składnik (`myComponent`) i zapisuje go w obiekcie danych (`myDataObject`) przy użyciu `myType` do określania formatu danych. Następnie sprawdza, czy jest przechowywana w obiekcie danych określonego typu i wyświetla wyniki w oknie komunikatu. W przykładzie założono, że utworzono <xref:System.Windows.Forms.Form> o nazwie `Form1`.  
  
 [!code-cpp[SetData3#1](~/samples/snippets/cpp/VS_Snippets_Winforms/SetData3/CPP/setdata3.cpp#1)]
 [!code-csharp[SetData3#1](~/samples/snippets/csharp/VS_Snippets_Winforms/SetData3/CS/setdata3.cs#1)]
 [!code-vb[SetData3#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/SetData3/VB/setdata3.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.GetFormats(System.Boolean)" />
        <altmember cref="T:System.Windows.Forms.DataFormats" />
      </Docs>
    </Member>
    <Member MemberName="SetData">
      <MemberSignature Language="C#" Value="public void SetData (string format, bool autoConvert, object data);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void SetData(string format, bool autoConvert, object data) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.IDataObject.SetData(System.String,System.Boolean,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub SetData (format As String, autoConvert As Boolean, data As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void SetData(System::String ^ format, bool autoConvert, System::Object ^ data);" />
      <MemberSignature Language="F#" Value="abstract member SetData : string * bool * obj -&gt; unit" Usage="iDataObject.SetData (format, autoConvert, data)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="format" Type="System.String" />
        <Parameter Name="autoConvert" Type="System.Boolean" />
        <Parameter Name="data" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="format">Format skojarzonego z danymi. Zobacz <see cref="T:System.Windows.Forms.DataFormats" /> wstępnie zdefiniowanych formatów.</param>
        <param name="autoConvert"><see langword="true" /> Aby umożliwić danych do przekonwertowania w innym formacie. w przeciwnym razie <see langword="false" />.</param>
        <param name="data">Dane, które mają być przechowywane.</param>
        <summary>Przechowuje określonych danych i jego skojarzone format, w tym wypadku przy użyciu typu wartość logiczna, aby określić, czy można przekonwertować danych na inny format.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli nie znasz format aplikacji docelowej, można przechowywać dane w wielu formatach za pomocą tej metody.  
  
 Implementacja tej metody można zobaczyć <xref:System.Windows.Forms.DataObject.SetData%2A?displayProperty=nameWithType>.  
  
   
  
## Examples  
 W tym przykładzie użyto <xref:System.Windows.Forms.DataObject> klasy, która implementuje `IDataObject`, aby zademonstrować użycie `SetData` metody. Najpierw tworzy obiekt danych (`myDataObject`) i przechowuje `UnicodeText` ciąg, z `autoConvert` parametr `false`. Następnie pobiera formaty skojarzony z danych przechowywanych w obiekcie i wyświetla wyniki w oknie komunikatu. Jedyny format skojarzonego z danymi `UnicodeText` formatu. W tym przykładzie założono, że utworzono <xref:System.Windows.Forms.Form> o nazwie `Form1`.  
  
 [!code-cpp[SetData4#1](~/samples/snippets/cpp/VS_Snippets_Winforms/SetData4/CPP/form1.cpp#1)]
 [!code-csharp[SetData4#1](~/samples/snippets/csharp/VS_Snippets_Winforms/SetData4/CS/form1.cs#1)]
 [!code-vb[SetData4#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/SetData4/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.IDataObject.GetData(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.IDataObject.GetDataPresent(System.String,System.Boolean)" />
        <altmember cref="M:System.Windows.Forms.DataObject.SetData(System.String,System.Boolean,System.Object)" />
      </Docs>
    </Member>
  </Members>
</Type>