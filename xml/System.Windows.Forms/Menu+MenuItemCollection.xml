<Type Name="Menu+MenuItemCollection" FullName="System.Windows.Forms.Menu+MenuItemCollection">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d17a714c23767ac15291baa92fc8e0b73b6ed7a3" />
    <Meta Name="ms.sourcegitcommit" Value="d877ae76e9e11799bf919379507239e2c4072742" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="08/09/2018" />
    <Meta Name="ms.locfileid" Value="39948828" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Menu.MenuItemCollection : System.Collections.IList" />
  <TypeSignature Language="ILAsm" Value=".class nested public auto ansi beforefieldinit Menu/MenuItemCollection extends System.Object implements class System.Collections.ICollection, class System.Collections.IEnumerable, class System.Collections.IList" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.Menu.MenuItemCollection" />
  <TypeSignature Language="VB.NET" Value="Public Class Menu.MenuItemCollection&#xA;Implements IList" />
  <TypeSignature Language="C++ CLI" Value="public: ref class Menu::MenuItemCollection : System::Collections::IList" />
  <TypeSignature Language="F#" Value="type Menu.MenuItemCollection = class&#xA;    interface IList&#xA;    interface ICollection&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IList</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
      <AttributeName>System.ComponentModel.ListBindable(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Reprezentuje kolekcję <see cref="T:System.Windows.Forms.MenuItem" /> obiektów.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta klasa reprezentuje kolekcję <xref:System.Windows.Forms.MenuItem> obiektów przechowywanych w <xref:System.Windows.Forms.MainMenu>, <xref:System.Windows.Forms.ContextMenu>, lub <xref:System.Windows.Forms.MenuItem>. Aby uzyskać <xref:System.Windows.Forms.MainMenu> i <xref:System.Windows.Forms.ContextMenu> klas, ta kolekcja reprezentuje strukturę całe menu dla formantu. Aby uzyskać <xref:System.Windows.Forms.MenuItem> klasy, ta kolekcja reprezentuje listę elementów podmenu skojarzone z <xref:System.Windows.Forms.MenuItem>.  
  
 <xref:System.Windows.Forms.Menu.MenuItemCollection.Add%2A> i <xref:System.Windows.Forms.Menu.MenuItemCollection.Remove%2A> metody pozwalają na dodawanie i usuwanie poszczególnych elementów menu z kolekcji. Można również użyć <xref:System.Windows.Forms.Menu.MenuItemCollection.Clear%2A> metodę, aby usunąć wszystkie elementy menu z kolekcji.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MenuItemCollection (System.Windows.Forms.Menu owner);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Forms.Menu owner) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.MenuItemCollection.#ctor(System.Windows.Forms.Menu)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (owner As Menu)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MenuItemCollection(System::Windows::Forms::Menu ^ owner);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.Menu.MenuItemCollection : System.Windows.Forms.Menu -&gt; System.Windows.Forms.Menu.MenuItemCollection" Usage="new System.Windows.Forms.Menu.MenuItemCollection owner" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="owner" Type="System.Windows.Forms.Menu" />
      </Parameters>
      <Docs>
        <param name="owner">
          <see cref="T:System.Windows.Forms.Menu" /> , Który jest właścicielem tej kolekcji.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Forms.Menu.MenuItemCollection" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta klasa wymaga skojarzenia kolekcji z klasą, która pochodzi od klasy <xref:System.Windows.Forms.Menu>, takich jak <xref:System.Windows.Forms.MainMenu>, <xref:System.Windows.Forms.ContextMenu>, lub <xref:System.Windows.Forms.MenuItem> klasy. Ponieważ konieczne jest określenie menu, który jest skojarzony z tą kolekcją, nie można utworzyć menu wielu kolekcji elementów i skojarzyć je z menu, zgodnie z potrzebami. Aby przełączyć elementy menu, skojarzone z menu, należy wyczyścić kolekcję elementów i dodawanie elementów menu do wyświetlenia w kolekcji.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.MainMenu" />
        <altmember cref="T:System.Windows.Forms.ContextMenu" />
        <altmember cref="T:System.Windows.Forms.MenuItem" />
      </Docs>
    </Member>
    <MemberGroup MemberName="Add">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Dodaje nowy <see cref="T:System.Windows.Forms.MenuItem" /> do kolekcji.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.MenuItem Add (string caption);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.MenuItem Add(string caption) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.MenuItemCollection.Add(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Add (caption As String) As MenuItem" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::MenuItem ^ Add(System::String ^ caption);" />
      <MemberSignature Language="F#" Value="abstract member Add : string -&gt; System.Windows.Forms.MenuItem&#xA;override this.Add : string -&gt; System.Windows.Forms.MenuItem" Usage="menuItemCollection.Add caption" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MenuItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="caption" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="caption">Podpis elementu menu.</param>
        <summary>Dodaje nowy <see cref="T:System.Windows.Forms.MenuItem" />, na koniec bieżącego menu z określonym podpisem.</summary>
        <returns>A <see cref="T:System.Windows.Forms.MenuItem" /> reprezentujący element menu są dodawane do kolekcji.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.Windows.Forms.MenuItem> tylko mogą być zawarte w jednym menu w danym momencie i nie można dodać więcej niż jeden raz do tego samego menu. Aby ponownie użyć <xref:System.Windows.Forms.MenuItem> w menu więcej niż jeden, za pomocą <xref:System.Windows.Forms.MenuItem.CloneMenu%2A> metody <xref:System.Windows.Forms.MenuItem> klasy. Aby usunąć <xref:System.Windows.Forms.MenuItem> dodaną wcześniej, należy użyć <xref:System.Windows.Forms.Menu.MenuItemCollection.Remove%2A> metody.  
  
   
  
## Examples  
 Poniższy przykład kodu używa klasy pochodnej <xref:System.Windows.Forms.MainMenu> utworzyć menu głównego, a `mainMenu1`, ma dwa <xref:System.Windows.Forms.MenuItem> obiekty dodane do jego <xref:System.Windows.Forms.Menu.MenuItems%2A> kolekcji. Kod następnie przypisuje `mainMenu1` do <xref:System.Windows.Forms.Form.Menu%2A> właściwość <xref:System.Windows.Forms.Form>. W tym przykładzie wymaga, że kod zdefiniowany w tym przykładzie znajduje się za pomocą w formularzu.  
  
 [!code-cpp[Classic Menu.MenuItemCollection.Add Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Menu.MenuItemCollection.Add Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Menu.MenuItemCollection.Add Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Menu.MenuItemCollection.Add Example/CS/source.cs#1)]
 [!code-vb[Classic Menu.MenuItemCollection.Add Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Menu.MenuItemCollection.Add Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Menu.MenuItemCollection.Remove(System.Windows.Forms.MenuItem)" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual int Add (System.Windows.Forms.MenuItem item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Add(class System.Windows.Forms.MenuItem item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.MenuItemCollection.Add(System.Windows.Forms.MenuItem)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Add (item As MenuItem) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int Add(System::Windows::Forms::MenuItem ^ item);" />
      <MemberSignature Language="F#" Value="abstract member Add : System.Windows.Forms.MenuItem -&gt; int&#xA;override this.Add : System.Windows.Forms.MenuItem -&gt; int" Usage="menuItemCollection.Add item" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Windows.Forms.MenuItem" />
      </Parameters>
      <Docs>
        <param name="item">
          <see cref="T:System.Windows.Forms.MenuItem" /> Do dodania.</param>
        <summary>Dodaje wcześniej utworzony <see cref="T:System.Windows.Forms.MenuItem" /> do końca bieżącego menu.</summary>
        <returns>Liczony od zera indeks, w którym jest zapisany element w kolekcji.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.Windows.Forms.MenuItem> tylko mogą być zawarte w jednym menu w danym momencie i nie można dodać więcej niż jeden raz do tego samego menu. Aby ponownie użyć <xref:System.Windows.Forms.MenuItem> w menu więcej niż jeden, za pomocą <xref:System.Windows.Forms.MenuItem.CloneMenu%2A> metody <xref:System.Windows.Forms.MenuItem> klasy. Aby usunąć <xref:System.Windows.Forms.MenuItem> dodaną wcześniej, należy użyć <xref:System.Windows.Forms.Menu.MenuItemCollection.Remove%2A> metody.  
  
 Ta wersja <xref:System.Windows.Forms.Menu.MenuItemCollection.Add%2A> metoda pozwala dodać wcześniej utworzony <xref:System.Windows.Forms.MenuItem> obiektów w celu w menu elementu kolekcji.  
  
   
  
## Examples  
 Poniższy przykład kodu tworzy wystąpienie klasy pochodnej <xref:System.Windows.Forms.MainMenu>i dodaje <xref:System.Windows.Forms.MenuItem> do swojej kolekcji <xref:System.Windows.Forms.MenuItem> obiektów. W tym przykładzie wymaga metody zdefiniowanej w tym przykładzie jest znajdujące się w klasie formularza i wywoływane przez metody w klasie tego formularza.  
  
 [!code-cpp[Classic Menu.MenuItems Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Menu.MenuItems Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Menu.MenuItems Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Menu.MenuItems Example/CS/source.cs#1)]
 [!code-vb[Classic Menu.MenuItems Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Menu.MenuItems Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Menu.MenuItemCollection.Remove(System.Windows.Forms.MenuItem)" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual int Add (int index, System.Windows.Forms.MenuItem item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Add(int32 index, class System.Windows.Forms.MenuItem item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.MenuItemCollection.Add(System.Int32,System.Windows.Forms.MenuItem)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Add (index As Integer, item As MenuItem) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int Add(int index, System::Windows::Forms::MenuItem ^ item);" />
      <MemberSignature Language="F#" Value="abstract member Add : int * System.Windows.Forms.MenuItem -&gt; int&#xA;override this.Add : int * System.Windows.Forms.MenuItem -&gt; int" Usage="menuItemCollection.Add (index, item)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="item" Type="System.Windows.Forms.MenuItem" />
      </Parameters>
      <Docs>
        <param name="index">Pozycja, aby dodać nowy element.</param>
        <param name="item">
          <see cref="T:System.Windows.Forms.MenuItem" /> Do dodania.</param>
        <summary>Dodaje wcześniej utworzony <see cref="T:System.Windows.Forms.MenuItem" /> pod określonym indeksem w kolekcji elementów menu.</summary>
        <returns>Liczony od zera indeks, w którym jest zapisany element w kolekcji.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.Windows.Forms.MenuItem> tylko mogą być zawarte w jednym menu w danym momencie i nie można dodać więcej niż jeden raz do tego samego menu. Aby ponownie użyć <xref:System.Windows.Forms.MenuItem> w menu więcej niż jeden, za pomocą <xref:System.Windows.Forms.MenuItem.CloneMenu%2A> metody <xref:System.Windows.Forms.MenuItem> klasy. Aby usunąć <xref:System.Windows.Forms.MenuItem> dodaną wcześniej, należy użyć <xref:System.Windows.Forms.Menu.MenuItemCollection.Remove%2A> metody.  
  
 Ta wersja <xref:System.Windows.Forms.Menu.MenuItemCollection.Add%2A> metoda pozwala dodać wcześniej utworzony <xref:System.Windows.Forms.MenuItem> obiekty do lokalizacji określonego indeksu w kolekcji. Wszelkie <xref:System.Windows.Forms.MenuItem> obecnie znajdującym się na indeksu oraz wszystkie <xref:System.Windows.Forms.MenuItem> obiektów po indeksu, są przenoszone do następnego najniższego indeksu w kolekcji.  
  
   
  
## Examples  
 Poniższy przykład kodu tworzy wystąpienie klasy pochodnej <xref:System.Windows.Forms.MainMenu>i dodaje <xref:System.Windows.Forms.MenuItem> obiektu do swojej kolekcji <xref:System.Windows.Forms.MenuItem> obiektów z określonej lokalizacji, w menu elementu kolekcji. W tym przykładzie wymaga metody zdefiniowanej w tym przykładzie jest znajdujące się w klasie formularza i wywoływane przez metody w klasie tego formularza.  
  
 [!code-cpp[Classic Menu.MenuItemCollection.Add4 Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Menu.MenuItemCollection.Add4 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Menu.MenuItemCollection.Add4 Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Menu.MenuItemCollection.Add4 Example/CS/source.cs#1)]
 [!code-vb[Classic Menu.MenuItemCollection.Add4 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Menu.MenuItemCollection.Add4 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">
          <see cref="T:System.Windows.Forms.MenuItem" /> Dodawany jest już używana.</exception>
        <exception cref="T:System.ArgumentException">Indeks dostarczony w <paramref name="index" /> parametru jest większy niż rozmiar kolekcji.</exception>
        <altmember cref="M:System.Windows.Forms.Menu.MenuItemCollection.Remove(System.Windows.Forms.MenuItem)" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.MenuItem Add (string caption, EventHandler onClick);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.MenuItem Add(string caption, class System.EventHandler onClick) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.MenuItemCollection.Add(System.String,System.EventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Add (caption As String, onClick As EventHandler) As MenuItem" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::MenuItem ^ Add(System::String ^ caption, EventHandler ^ onClick);" />
      <MemberSignature Language="F#" Value="abstract member Add : string * EventHandler -&gt; System.Windows.Forms.MenuItem&#xA;override this.Add : string * EventHandler -&gt; System.Windows.Forms.MenuItem" Usage="menuItemCollection.Add (caption, onClick)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MenuItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="caption" Type="System.String" />
        <Parameter Name="onClick" Type="System.EventHandler" />
      </Parameters>
      <Docs>
        <param name="caption">Podpis elementu menu.</param>
        <param name="onClick">
          <see cref="T:System.EventHandler" /> Który reprezentuje program obsługi zdarzeń, która jest wywoływana po kliknięciu przez użytkownika elementu, lub gdy użytkownik naciśnie klawisz skrótu lub skrótu dla elementu menu.</param>
        <summary>Dodaje nowy <see cref="T:System.Windows.Forms.MenuItem" /> do końca bieżącego menu i określona procedura obsługi zdarzeń dla określonego tytuł <see cref="E:System.Windows.Forms.MenuItem.Click" /> zdarzeń.</summary>
        <returns>A <see cref="T:System.Windows.Forms.MenuItem" /> reprezentujący element menu są dodawane do kolekcji.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.Windows.Forms.MenuItem> tylko mogą być zawarte w jednym menu w danym momencie i nie można dodać więcej niż jeden raz do tego samego menu. Aby ponownie użyć <xref:System.Windows.Forms.MenuItem> w menu więcej niż jeden, za pomocą <xref:System.Windows.Forms.MenuItem.CloneMenu%2A> metody <xref:System.Windows.Forms.MenuItem> klasy. Aby usunąć <xref:System.Windows.Forms.MenuItem> dodaną wcześniej, należy użyć <xref:System.Windows.Forms.Menu.MenuItemCollection.Remove%2A> metody.  
  
 Ta wersja <xref:System.Windows.Forms.Menu.MenuItemCollection.Add%2A> metody umożliwia określenie podpis delegata do obsługi i elementu menu <xref:System.Windows.Forms.MenuItem.Click> zdarzeń. Można użyć tej wersji <xref:System.Windows.Forms.Menu.MenuItemCollection.Add%2A> metody, jeśli aplikacja już ma program obsługi zdarzeń, aby obsłużyć <xref:System.Windows.Forms.MenuItem.Click> zdarzeń.  
  
> [!NOTE]
>  <xref:System.Windows.Forms.MenuItem.Click> Zdarzeń nie jest inicjowane dla <xref:System.Windows.Forms.MenuItem> zawiera elementy podmenu.  
  
   
  
## Examples  
 Poniższy przykład kodu używa klasy pochodnej <xref:System.Windows.Forms.MainMenu> utworzyć menu głównego, a `mainMenu1`, ma dwa <xref:System.Windows.Forms.MenuItem> obiekty dodane do jego <xref:System.Windows.Forms.Menu.MenuItems%2A> kolekcji. Kod używa tej wersji <xref:System.Windows.Forms.Menu.MenuItemCollection.Add%2A> metodę, aby zdefiniować program obsługi zdarzeń dla <xref:System.Windows.Forms.MenuItem.Click> zdarzeń drugi element menu są dodawane do kolekcji. Kod następnie przypisuje `mainMenu1` do <xref:System.Windows.Forms.Form.Menu%2A> właściwość <xref:System.Windows.Forms.Form>. W tym przykładzie wymaga, że kod zdefiniowany w tym przykładzie znajduje się w obrębie formularza.  
  
 [!code-cpp[Classic Menu.MenuItemCollection.Add1 Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Menu.MenuItemCollection.Add1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Menu.MenuItemCollection.Add1 Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Menu.MenuItemCollection.Add1 Example/CS/source.cs#1)]
 [!code-vb[Classic Menu.MenuItemCollection.Add1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Menu.MenuItemCollection.Add1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Menu.MenuItemCollection.Remove(System.Windows.Forms.MenuItem)" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.MenuItem Add (string caption, System.Windows.Forms.MenuItem[] items);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.MenuItem Add(string caption, class System.Windows.Forms.MenuItem[] items) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.MenuItemCollection.Add(System.String,System.Windows.Forms.MenuItem[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Add (caption As String, items As MenuItem()) As MenuItem" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::MenuItem ^ Add(System::String ^ caption, cli::array &lt;System::Windows::Forms::MenuItem ^&gt; ^ items);" />
      <MemberSignature Language="F#" Value="abstract member Add : string * System.Windows.Forms.MenuItem[] -&gt; System.Windows.Forms.MenuItem&#xA;override this.Add : string * System.Windows.Forms.MenuItem[] -&gt; System.Windows.Forms.MenuItem" Usage="menuItemCollection.Add (caption, items)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MenuItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="caption" Type="System.String" />
        <Parameter Name="items" Type="System.Windows.Forms.MenuItem[]" />
      </Parameters>
      <Docs>
        <param name="caption">Podpis elementu menu.</param>
        <param name="items">Tablica <see cref="T:System.Windows.Forms.MenuItem" /> obiektów że <see cref="T:System.Windows.Forms.MenuItem" /> będzie zawierać.</param>
        <summary>Dodaje nowy <see cref="T:System.Windows.Forms.MenuItem" /> na końcu tego menu z określonym podpisem <see cref="E:System.Windows.Forms.MenuItem.Click" /> program obsługi zdarzeń i elementów.</summary>
        <returns>A <see cref="T:System.Windows.Forms.MenuItem" /> reprezentujący element menu są dodawane do kolekcji.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.Windows.Forms.MenuItem> tylko mogą być zawarte w jednym menu w danym momencie i nie można dodać więcej niż jeden raz do tego samego menu. Aby ponownie użyć <xref:System.Windows.Forms.MenuItem> w menu więcej niż jeden, za pomocą <xref:System.Windows.Forms.MenuItem.CloneMenu%2A> metody <xref:System.Windows.Forms.MenuItem> klasy. Aby usunąć <xref:System.Windows.Forms.MenuItem> dodaną wcześniej, należy użyć <xref:System.Windows.Forms.Menu.MenuItemCollection.Remove%2A> metody.  
  
 Ta wersja <xref:System.Windows.Forms.Menu.MenuItemCollection.Add%2A> metody umożliwia określenie podpis dla elementu menu i delegata, która będzie obsługiwać jego <xref:System.Windows.Forms.MenuItem.Click> zdarzeń. Można użyć tej wersji <xref:System.Windows.Forms.Menu.MenuItemCollection.Add%2A> metody, jeśli aplikacja już ma program obsługi zdarzeń, aby obsłużyć <xref:System.Windows.Forms.MenuItem.Click> zdarzeń. Ta wersja metody również pozwala na określenie tablicę utworzone wcześniej <xref:System.Windows.Forms.MenuItem> obiektów, które chcesz dodać do kolekcji. Ta funkcja umożliwia ponowne użycie istniejących <xref:System.Windows.Forms.MenuItem> obiektów, które zostały sklonowane przy użyciu <xref:System.Windows.Forms.MenuItem.CloneMenu%2A> metody. Jeśli `items` parametr nie jest pusty lub `null`, <xref:System.Windows.Forms.MenuItem> dodawany do kolekcji będzie zawierać elementy podmenu.  
  
> [!NOTE]
>  <xref:System.Windows.Forms.MenuItem.Click> Zdarzeń nie jest inicjowane dla <xref:System.Windows.Forms.MenuItem> zawiera elementy podmenu.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Menu.MenuItemCollection.Remove(System.Windows.Forms.MenuItem)" />
      </Docs>
    </Member>
    <Member MemberName="AddRange">
      <MemberSignature Language="C#" Value="public virtual void AddRange (System.Windows.Forms.MenuItem[] items);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddRange(class System.Windows.Forms.MenuItem[] items) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.MenuItemCollection.AddRange(System.Windows.Forms.MenuItem[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddRange (items As MenuItem())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddRange(cli::array &lt;System::Windows::Forms::MenuItem ^&gt; ^ items);" />
      <MemberSignature Language="F#" Value="abstract member AddRange : System.Windows.Forms.MenuItem[] -&gt; unit&#xA;override this.AddRange : System.Windows.Forms.MenuItem[] -&gt; unit" Usage="menuItemCollection.AddRange items" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="System.Windows.Forms.MenuItem[]" />
      </Parameters>
      <Docs>
        <param name="items">Tablica <see cref="T:System.Windows.Forms.MenuItem" /> obiekty reprezentujące elementy menu, aby dodać je do kolekcji.</param>
        <summary>Dodaje tablicę utworzone wcześniej <see cref="T:System.Windows.Forms.MenuItem" /> obiekty do kolekcji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można użyć metody pozwala szybko dodawać grupy utworzone wcześniej <xref:System.Windows.Forms.MenuItem> obiekty kolekcji zamiast ręcznego dodawania każdego <xref:System.Windows.Forms.MenuItem> do kolekcji przy użyciu <xref:System.Windows.Forms.Menu.MenuItemCollection.Add%2A> metody. Jeśli kolekcja zawiera już <xref:System.Windows.Forms.MenuItem> obiektów, wywołanie tej metody spowoduje dodanie nowego <xref:System.Windows.Forms.MenuItem> obiektów na końcu kolekcji.  
  
   
  
## Examples  
 Poniższy przykład kodu tworzy tablicę i kopiuje je <xref:System.Windows.Forms.Menu.MenuItemCollection> obiektów z dwóch <xref:System.Windows.Forms.MenuItem> obiektów w tablicy. Przykład następnie kopiuje tablicę <xref:System.Windows.Forms.MenuItem> obiektów w kolekcji formant <xref:System.Windows.Forms.ContextMenu> o nazwie `contextMenu1`. W tym przykładzie wymaga, że istnieją dwa <xref:System.Windows.Forms.MenuItem> obiektów, które zawierają elementy podmenu o nazwie `menuItem1` i `menuItem2`.  
  
 [!code-cpp[Classic Menu.MenuItemCollection.CopyTo Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Menu.MenuItemCollection.CopyTo Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Menu.MenuItemCollection.CopyTo Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Menu.MenuItemCollection.CopyTo Example/CS/source.cs#1)]
 [!code-vb[Classic Menu.MenuItemCollection.CopyTo Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Menu.MenuItemCollection.CopyTo Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Menu.MenuItemCollection.Add(System.String)" />
        <altmember cref="M:System.Windows.Forms.Menu.MenuItemCollection.CopyTo(System.Array,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public virtual void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.MenuItemCollection.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Clear();" />
      <MemberSignature Language="F#" Value="abstract member Clear : unit -&gt; unit&#xA;override this.Clear : unit -&gt; unit" Usage="menuItemCollection.Clear " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Usuwa wszystkie <see cref="T:System.Windows.Forms.MenuItem" /> obiektów z menu elementu kolekcji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda umożliwia wyczyść całą kolekcję elementów menu w menu. Aby usunąć element menu poszczególnych z kolekcji, należy użyć <xref:System.Windows.Forms.Menu.MenuItemCollection.Remove%2A> metody. Aby dodać nowe <xref:System.Windows.Forms.MenuItem> obiekty do kolekcji, używają <xref:System.Windows.Forms.Menu.MenuItemCollection.Add%2A> metody.  
  
   
  
## Examples  
 W tym przykładzie utworzysz menu głównego, a `myMainMenu`, przy użyciu dwóch <xref:System.Windows.Forms.MenuItem> obiektów `File` i `Edit`. `File` Menu zawiera trzy elementy podmenu, `New`, `Open`, i `Exit`. Za pomocą `Clear` metody, Usuń wszystkie <xref:System.Windows.Forms.MenuItem> obiekty w `File` menu kolekcji. Ten program wymaga, że utworzono już <xref:System.Windows.Forms.Form> o nazwie `Form1`.  
  
 [!code-cpp[ClearItems#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ClearItems/CPP/clearitems.cpp#1)]
 [!code-csharp[ClearItems#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ClearItems/CS/clearitems.cs#1)]
 [!code-vb[ClearItems#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ClearItems/VB/clearitems.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Menu.MenuItems" />
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (System.Windows.Forms.MenuItem value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(class System.Windows.Forms.MenuItem value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.MenuItemCollection.Contains(System.Windows.Forms.MenuItem)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (value As MenuItem) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(System::Windows::Forms::MenuItem ^ value);" />
      <MemberSignature Language="F#" Value="member this.Contains : System.Windows.Forms.MenuItem -&gt; bool" Usage="menuItemCollection.Contains value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Windows.Forms.MenuItem" />
      </Parameters>
      <Docs>
        <param name="value">
          <see cref="T:System.Windows.Forms.MenuItem" /> Do zlokalizowania w kolekcji.</param>
        <summary>Określa, czy określony <see cref="T:System.Windows.Forms.MenuItem" /> jest elementem członkowskim kolekcji.</summary>
        <returns>
          <see langword="true" /> Jeśli <see cref="T:System.Windows.Forms.MenuItem" /> jest elementem członkowskim kolekcji; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda umożliwia określenie czy <xref:System.Windows.Forms.MenuItem> jest członkiem kolekcji przed podjęciem próby wykonania operacji na <xref:System.Windows.Forms.MenuItem>. Ta metoda służy do upewnij się, że <xref:System.Windows.Forms.MenuItem> została dodana do lub nadal jest elementem członkowskim kolekcji.  
  
   
  
## Examples  
 W tym przykładzie utworzysz menu głównego, a `myMainMenu`, przy użyciu dwóch <xref:System.Windows.Forms.MenuItem> obiektów `File` i `Edit`. `File` Menu zawiera trzy elementy podmenu, `New`, `Open`, i `Exit`. Za pomocą <xref:System.Windows.Forms.Menu.MenuItemCollection.Contains%2A> metody, sprawdź czy `File` menu kolekcja zawiera element `Open`. Jeśli element istnieje, wynik jest wyświetlany w polu tekstowym. Ten program wymaga, że utworzono już <xref:System.Windows.Forms.Form> o nazwie `Form1`.  
  
 [!code-cpp[ContainsItems#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ContainsItems/CPP/containsitems.cpp#1)]
 [!code-csharp[ContainsItems#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ContainsItems/CS/containsitems.cs#1)]
 [!code-vb[ContainsItems#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ContainsItems/VB/containsitems.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContainsKey">
      <MemberSignature Language="C#" Value="public virtual bool ContainsKey (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ContainsKey(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.MenuItemCollection.ContainsKey(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ContainsKey (key As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool ContainsKey(System::String ^ key);" />
      <MemberSignature Language="F#" Value="abstract member ContainsKey : string -&gt; bool&#xA;override this.ContainsKey : string -&gt; bool" Usage="menuItemCollection.ContainsKey key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">Nazwa elementu do wyszukania.</param>
        <summary>Określa, czy kolekcja zawiera element z określonym kluczem.</summary>
        <returns>
          <see langword="true" /> Jeśli kolekcja zawiera element z określonym kluczem, w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.Menu.Name%2A> Właściwość odnosi się do klucza dla <xref:System.Windows.Forms.MenuItem> w <xref:System.Windows.Forms.Menu.MenuItemCollection>.  
  
 Porównanie klucza nie jest rozróżniana wielkość liter. Jeśli `key` parametr jest `null` ani być pustym ciągiem <xref:System.Windows.Forms.Menu.MenuItemCollection.ContainsKey%2A> zwraca `false.`  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (Array dest, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(class System.Array dest, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.MenuItemCollection.CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (dest As Array, index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CopyTo(Array ^ dest, int index);" />
      <MemberSignature Language="F#" Value="abstract member CopyTo : Array * int -&gt; unit&#xA;override this.CopyTo : Array * int -&gt; unit" Usage="menuItemCollection.CopyTo (dest, index)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dest" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="dest">Tablica docelowa.</param>
        <param name="index">Indeks w tablicy docelowej, w których przechowywanie rozpoczyna się.</param>
        <summary>Kopiuje całą kolekcję do istniejącej tablicy w określonej lokalizacji w tablicy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda służy do łączenia <xref:System.Windows.Forms.MenuItem> obiektów z wieloma kolekcjami w jedną. Ta funkcja pozwala na łatwe łączenie dwóch lub więcej zestawów elementów menu do użycia w <xref:System.Windows.Forms.ContextMenu> lub <xref:System.Windows.Forms.MainMenu>.  
  
   
  
## Examples  
 Poniższy przykład kodu tworzy tablicę i kopiuje je <xref:System.Windows.Forms.Menu.MenuItemCollection> obiektów z dwóch <xref:System.Windows.Forms.MenuItem> obiektów w tablicy. Przykład następnie kopiuje tablicę <xref:System.Windows.Forms.MenuItem> obiektów w kolekcji formant <xref:System.Windows.Forms.ContextMenu> o nazwie `contextMenu1`. W tym przykładzie wymaga, że istnieją dwa <xref:System.Windows.Forms.MenuItem> obiektów, które zawierają elementy podmenu o nazwie `menuItem1` i `menuItem2`.  
  
 [!code-cpp[Classic Menu.MenuItemCollection.CopyTo Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Menu.MenuItemCollection.CopyTo Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Menu.MenuItemCollection.CopyTo Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Menu.MenuItemCollection.CopyTo Example/CS/source.cs#1)]
 [!code-vb[Classic Menu.MenuItemCollection.CopyTo Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Menu.MenuItemCollection.CopyTo Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Menu.MenuItemCollection.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Windows.Forms.Menu.MenuItemCollection.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą całkowitą liczbę <see cref="T:System.Windows.Forms.MenuItem" /> obiektów w kolekcji.</summary>
        <value>Liczba <see cref="T:System.Windows.Forms.MenuItem" /> obiektów w kolekcji.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `Count` Właściwości jest przechowywana liczba <xref:System.Windows.Forms.MenuItem> przypisanego do kolekcji obiektów. Możesz użyć `Count` wartości właściwości jako górne granice pętli do iterowania po kolekcji. Należy pamiętać, wartość indeksu kolekcji jest liczony od zera indeks, więc należy odjąć, jedną ze zmiennej pętli. Jeśli to nie jest objęty, będzie przekraczać górną granicą kolekcji i zgłosić wyjątek.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, jak utworzyć menu głównego, a `myMainMenu`, za pomocą jednego <xref:System.Windows.Forms.MenuItem>, `File`, która ma trzy elementy podmenu: `New`, `Open`, i `Exit`. Za pomocą `Count` właściwości obliczania liczby obiektów w `File` menu i wyświetlić tę liczbę w oknie komunikatu. W tym przykładzie wymaga, że utworzono już <xref:System.Windows.Forms.Form> o nazwie `Form1`.  
  
 [!code-cpp[CountProperty#1](~/samples/snippets/cpp/VS_Snippets_Winforms/CountProperty/CPP/countitems.cpp#1)]
 [!code-csharp[CountProperty#1](~/samples/snippets/csharp/VS_Snippets_Winforms/CountProperty/CS/countitems.cs#1)]
 [!code-vb[CountProperty#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/CountProperty/VB/countitems.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Menu.MenuItems" />
      </Docs>
    </Member>
    <Member MemberName="Find">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.MenuItem[] Find (string key, bool searchAllChildren);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.MenuItem[] Find(string key, bool searchAllChildren) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.MenuItemCollection.Find(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Find (key As String, searchAllChildren As Boolean) As MenuItem()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Windows::Forms::MenuItem ^&gt; ^ Find(System::String ^ key, bool searchAllChildren);" />
      <MemberSignature Language="F#" Value="member this.Find : string * bool -&gt; System.Windows.Forms.MenuItem[]" Usage="menuItemCollection.Find (key, searchAllChildren)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MenuItem[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="searchAllChildren" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="key">Nazwa elementu menu, aby wyszukać.</param>
        <param name="searchAllChildren">
          <see langword="true" /> Aby wyszukać elementy menu podrzędne; w przeciwnym razie <see langword="false" />.</param>
        <summary>Umożliwia znalezienie elementów z określonym kluczem, opcjonalnie wyszukiwanie elementów podmenu</summary>
        <returns>Tablica <see cref="T:System.Windows.Forms.MenuItem" /> obiekty, których <see cref="P:System.Windows.Forms.Menu.Name" /> właściwość jest zgodny z określonym <paramref name="key" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Porównanie klucza nie jest rozróżniana wielkość liter. Jeśli `key` parametr jest `null` lub ciąg pusty lub nie ma żadnych dopasowań <xref:System.Windows.Forms.Menu.MenuItemCollection.Find%2A> zwraca pustą tablicę.  
  
 <xref:System.Windows.Forms.Menu.Name%2A> Właściwość odnosi się do klucza dla <xref:System.Windows.Forms.MenuItem> w <xref:System.Windows.Forms.Menu.MenuItemCollection>.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="key" /> jest <see langword="null" /> ani być pustym ciągiem.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.MenuItemCollection.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IEnumerator ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.IEnumerator&#xA;override this.GetEnumerator : unit -&gt; System.Collections.IEnumerator" Usage="menuItemCollection.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca moduł wyliczający, który może służyć do iterowania po kolekcji elementów menu.</summary>
        <returns>
          <see cref="T:System.Collections.IEnumerator" /> Reprezentujący kolekcji elementów menu.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (System.Windows.Forms.MenuItem value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(class System.Windows.Forms.MenuItem value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.MenuItemCollection.IndexOf(System.Windows.Forms.MenuItem)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (value As MenuItem) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(System::Windows::Forms::MenuItem ^ value);" />
      <MemberSignature Language="F#" Value="member this.IndexOf : System.Windows.Forms.MenuItem -&gt; int" Usage="menuItemCollection.IndexOf value" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Windows.Forms.MenuItem" />
      </Parameters>
      <Docs>
        <param name="value">
          <see cref="T:System.Windows.Forms.MenuItem" /> Do zlokalizowania w kolekcji.</param>
        <summary>Pobiera indeks konkretny element w kolekcji.</summary>
        <returns>Liczony od zera indeks elementu w kolekcji; w przeciwnym razie, wartość -1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu pokazuje, jak utworzyć menu głównego, a `myMainMenu`, przy użyciu dwóch <xref:System.Windows.Forms.MenuItem> obiektów `File` i `Edit`. `File` Menu zawiera trzy elementy podmenu: `New`, `Open`, i `Exit`. Za pomocą <xref:System.Windows.Forms.Menu.MenuItemCollection.IndexOf%2A> metody, możesz pobrać indeks `Exit` elementu w `File` kolekcji menu, a następnie wyświetl jego wartości w oknie komunikatu. W tym przykładzie wymaga, że utworzono już <xref:System.Windows.Forms.Form> o nazwie `Form1`.  
  
 [!code-cpp[IndexOf#1](~/samples/snippets/cpp/VS_Snippets_Winforms/IndexOf/CPP/indexof.cpp#1)]
 [!code-csharp[IndexOf#1](~/samples/snippets/csharp/VS_Snippets_Winforms/IndexOf/CS/indexof.cs#1)]
 [!code-vb[IndexOf#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/IndexOf/VB/indexof.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOfKey">
      <MemberSignature Language="C#" Value="public virtual int IndexOfKey (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOfKey(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.MenuItemCollection.IndexOfKey(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOfKey (key As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOfKey(System::String ^ key);" />
      <MemberSignature Language="F#" Value="abstract member IndexOfKey : string -&gt; int&#xA;override this.IndexOfKey : string -&gt; int" Usage="menuItemCollection.IndexOfKey key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">Nazwa elementu menu, aby wyszukać.</param>
        <summary>Znajduje indeks pierwszego wystąpienia elementu menu z określonym kluczem.</summary>
        <returns>Liczony od zera indeks pierwszego elementu menu z określonym kluczem.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli <xref:System.Windows.Forms.Menu.MenuItemCollection.IndexOfKey%2A> nazywa się kolejno, ostatni zwrócony indeksu będą sprawdzane pod kątem dopasowania klucza najpierw, a jeśli nie zostanie odnaleziony odpowiednik, wyszukiwanie rozpoczyna się na początku kolekcji.  
  
 <xref:System.Windows.Forms.Menu.Name%2A> Właściwość odnosi się do klucza dla <xref:System.Windows.Forms.MenuItem> w <xref:System.Windows.Forms.Menu.MenuItemCollection>.  
  
 Porównanie klucza nie jest rozróżniana wielkość liter. Jeśli `key` parametr jest `null` lub ciąg pusty lub nie ma żadnych dopasowań <xref:System.Windows.Forms.Menu.MenuItemCollection.IndexOfKey%2A> zwraca wartość -1.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Menu.MenuItemCollection.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReadOnly : bool" Usage="System.Windows.Forms.Menu.MenuItemCollection.IsReadOnly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy kolekcja jest tylko do odczytu.</summary>
        <value>
          <see langword="true" /> Jeśli kolekcja jest tylko do odczytu. w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Item">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Pobiera element z kolekcji.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.MenuItem this[int index] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.MenuItem Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Menu.MenuItemCollection.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public Overridable ReadOnly Property Item(index As Integer) As MenuItem" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::MenuItem ^ default[int] { System::Windows::Forms::MenuItem ^ get(int index); };" />
      <MemberSignature Language="F#" Value="member this.Item(int) : System.Windows.Forms.MenuItem" Usage="System.Windows.Forms.Menu.MenuItemCollection.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MenuItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Lokalizacja indeksowanych <see cref="T:System.Windows.Forms.MenuItem" /> w kolekcji.</param>
        <summary>Pobiera <see cref="T:System.Windows.Forms.MenuItem" /> w określonym indeksowane lokalizacji w kolekcji.</summary>
        <value>
          <see cref="T:System.Windows.Forms.MenuItem" /> w określonej lokalizacji.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby przypisać <xref:System.Windows.Forms.MenuItem> obiekty w określonej lokalizacji lub pobierać je z <xref:System.Windows.Forms.Menu.MenuItemCollection>, można odwołać się do obiektu kolekcji z wartością określonego indeksu. Wartość indeksu <xref:System.Windows.Forms.Menu.MenuItemCollection> to indeks zaczynający się od zera.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="value" /> Parametr <see langword="null" />.  lub <paramref name="index" /> parametru jest mniejsza niż zero.  lub <paramref name="index" /> parametr jest większa niż liczba elementów menu w kolekcji, a kolekcja elementów menu nie jest <see langword="null" />.</exception>
        <altmember cref="P:System.Windows.Forms.Menu.MenuItemCollection.Count" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.MenuItem this[string key] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.MenuItem Item(string)" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Menu.MenuItemCollection.Item(System.String)" />
      <MemberSignature Language="VB.NET" Value="Default Public Overridable ReadOnly Property Item(key As String) As MenuItem" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::MenuItem ^ default[System::String ^] { System::Windows::Forms::MenuItem ^ get(System::String ^ key); };" />
      <MemberSignature Language="F#" Value="member this.Item(string) : System.Windows.Forms.MenuItem" Usage="System.Windows.Forms.Menu.MenuItemCollection.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MenuItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">Nazwa elementu do pobrania z kolekcji.</param>
        <summary>Pobiera element z określonym kluczem z kolekcji.</summary>
        <value>
          <see cref="T:System.Windows.Forms.MenuItem" /> z określonym kluczem.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.Menu.Name%2A> Właściwość odnosi się do klucza dla <xref:System.Windows.Forms.MenuItem> w <xref:System.Windows.Forms.Menu.MenuItemCollection>.  
  
 Porównanie klucza nie jest rozróżniana wielkość liter. Jeśli `key` parametr jest `null` ani być pustym ciągiem <xref:System.Windows.Forms.Menu.MenuItemCollection.Item%2A> zwraca `null.`  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public virtual void Remove (System.Windows.Forms.MenuItem item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Remove(class System.Windows.Forms.MenuItem item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.MenuItemCollection.Remove(System.Windows.Forms.MenuItem)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Remove (item As MenuItem)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Remove(System::Windows::Forms::MenuItem ^ item);" />
      <MemberSignature Language="F#" Value="abstract member Remove : System.Windows.Forms.MenuItem -&gt; unit&#xA;override this.Remove : System.Windows.Forms.MenuItem -&gt; unit" Usage="menuItemCollection.Remove item" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Windows.Forms.MenuItem" />
      </Parameters>
      <Docs>
        <param name="item">
          <see cref="T:System.Windows.Forms.MenuItem" /> Do usunięcia.</param>
        <summary>Usuwa określony <see cref="T:System.Windows.Forms.MenuItem" /> z kolekcji elementów menu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy <xref:System.Windows.Forms.MenuItem> zostanie usunięty z kolekcji elementów menu, wszystkie kolejne menu, elementy są przenoszone w górę o jedną pozycję w kolekcji. Można użyć tej wersji `Remove` można usunąć określonego <xref:System.Windows.Forms.MenuItem> z kolekcji za pomocą odwołania do <xref:System.Windows.Forms.MenuItem> do usunięcia. Jeśli nie masz odwołanie do <xref:System.Windows.Forms.MenuItem> czy chcesz usunąć, możesz użyć inna wersja tej metody, która akceptuje jako parametru, indeks odpowiadający <xref:System.Windows.Forms.MenuItem> do usunięcia.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, jak utworzyć menu głównego, a `myMainMenu`, przy użyciu dwóch <xref:System.Windows.Forms.MenuItem> obiektów `File` i `Edit`. `File` Menu zawiera trzy elementy podmenu: `New`, `Open`, i `Exit`. Za pomocą `Remove` metody, należy usunąć `Open` elementu z `File` menu kolekcji. W tym przykładzie wymaga, że utworzono już <xref:System.Windows.Forms.Form> o nazwie `Form1`.  
  
 [!code-cpp[RemoveMenuItems#1](~/samples/snippets/cpp/VS_Snippets_Winforms/RemoveMenuItems/CPP/removeitems.cpp#1)]
 [!code-csharp[RemoveMenuItems#1](~/samples/snippets/csharp/VS_Snippets_Winforms/RemoveMenuItems/CS/removeitems.cs#1)]
 [!code-vb[RemoveMenuItems#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/RemoveMenuItems/VB/removeitems.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public virtual void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.MenuItemCollection.RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveAt (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveAt(int index);" />
      <MemberSignature Language="F#" Value="abstract member RemoveAt : int -&gt; unit&#xA;override this.RemoveAt : int -&gt; unit" Usage="menuItemCollection.RemoveAt index" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.RemoveAt(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Indeks <see cref="T:System.Windows.Forms.MenuItem" /> do usunięcia.</param>
        <summary>Usuwa <see cref="T:System.Windows.Forms.MenuItem" /> z kolekcji elementów menu z określonym indeksem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy <xref:System.Windows.Forms.MenuItem> zostanie usunięty z kolekcji elementów menu, wszystkie kolejne menu, elementy są przenoszone w górę o jedną pozycję w kolekcji.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, jak utworzyć menu głównego, a `myMainMenu`, przy użyciu dwóch <xref:System.Windows.Forms.MenuItem> obiektów `File` i `Edit`. `File` Menu zawiera trzy elementy podmenu: `New`, `Open`, i `Exit`. Za pomocą `RemoveAt` metody, należy usunąć `Exit` elementu z `File` kolekcji menu przy użyciu jego numer indeksu. W tym przykładzie wymaga, że utworzono już <xref:System.Windows.Forms.Form> o nazwie `Form1`.  
  
 [!code-cpp[RemoveAt#1](~/samples/snippets/cpp/VS_Snippets_Winforms/RemoveAt/CPP/removeat.cpp#1)]
 [!code-csharp[RemoveAt#1](~/samples/snippets/csharp/VS_Snippets_Winforms/RemoveAt/CS/removeat.cs#1)]
 [!code-vb[RemoveAt#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/RemoveAt/VB/removeat.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveByKey">
      <MemberSignature Language="C#" Value="public virtual void RemoveByKey (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveByKey(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.MenuItemCollection.RemoveByKey(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveByKey (key As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveByKey(System::String ^ key);" />
      <MemberSignature Language="F#" Value="abstract member RemoveByKey : string -&gt; unit&#xA;override this.RemoveByKey : string -&gt; unit" Usage="menuItemCollection.RemoveByKey key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">Nazwa elementu menu, aby usunąć.</param>
        <summary>Usuwa element menu z określonym kluczem z kolekcji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.Menu.Name%2A> Właściwość odnosi się do klucza dla <xref:System.Windows.Forms.MenuItem> w <xref:System.Windows.Forms.Menu.MenuItemCollection>.  
  
 Porównanie klucza nie jest rozróżniana wielkość liter.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.IsSynchronized">
      <MemberSignature Language="C#" Value="bool System.Collections.ICollection.IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.ICollection.IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Menu.MenuItemCollection.System#Collections#ICollection#IsSynchronized" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsSynchronized As Boolean Implements ICollection.IsSynchronized" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::ICollection::IsSynchronized { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ICollection.IsSynchronized" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Aby uzyskać opis tego elementu członkowskiego, zobacz <see cref="P:System.Collections.ICollection.IsSynchronized" />.</summary>
        <value>
          <see langword="false" /> we wszystkich przypadkach.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Mogą być używane tylko wtedy, gdy <xref:System.Windows.Forms.Menu.MenuItemCollection> wystąpienia jest rzutowany na <xref:System.Collections.ICollection> interfejsu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.SyncRoot">
      <MemberSignature Language="C#" Value="object System.Collections.ICollection.SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.ICollection.SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Menu.MenuItemCollection.System#Collections#ICollection#SyncRoot" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property SyncRoot As Object Implements ICollection.SyncRoot" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::ICollection::SyncRoot { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ICollection.SyncRoot" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Aby uzyskać opis tego elementu członkowskiego, zobacz <see cref="P:System.Collections.ICollection.SyncRoot" />.</summary>
        <value>Obiekt, który może służyć do synchronizowania dostępu do <see cref="T:System.Windows.Forms.Menu.MenuItemCollection" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Mogą być używane tylko wtedy, gdy <xref:System.Windows.Forms.Menu.MenuItemCollection> wystąpienia jest rzutowany na <xref:System.Collections.ICollection> interfejsu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Add">
      <MemberSignature Language="C#" Value="int IList.Add (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.Add(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.MenuItemCollection.System#Collections#IList#Add(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Add (value As Object) As Integer Implements IList.Add" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IList.Add(System::Object ^ value) = System::Collections::IList::Add;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Add(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <see cref="T:System.Windows.Forms.MenuItem" /> Do dodania do kolekcji.</param>
        <summary>Aby uzyskać opis tego elementu członkowskiego, zobacz <see cref="M:System.Collections.IList.Add(System.Object)" />.</summary>
        <returns>Pozycja, do którego <see cref="T:System.Windows.Forms.MenuItem" /> został wstawiony.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Mogą być używane tylko wtedy, gdy <xref:System.Windows.Forms.Menu.MenuItemCollection> wystąpienia jest rzutowany na <xref:System.Collections.IList> interfejsu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Contains">
      <MemberSignature Language="C#" Value="bool IList.Contains (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.IList.Contains(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.MenuItemCollection.System#Collections#IList#Contains(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Contains (value As Object) As Boolean Implements IList.Contains" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.IList.Contains(System::Object ^ value) = System::Collections::IList::Contains;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Contains(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Obiekt do zlokalizowania w kolekcji.</param>
        <summary>Aby uzyskać opis tego elementu członkowskiego, zobacz <see cref="M:System.Collections.IList.Contains(System.Object)" />.</summary>
        <returns>
          <see langword="true" /> Jeśli określony obiekt jest <see cref="T:System.Windows.Forms.MenuItem" /> w kolekcji; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Mogą być używane tylko wtedy, gdy <xref:System.Windows.Forms.Menu.MenuItemCollection> wystąpienia jest rzutowany na <xref:System.Collections.IList> interfejsu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IndexOf">
      <MemberSignature Language="C#" Value="int IList.IndexOf (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.IndexOf(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.MenuItemCollection.System#Collections#IList#IndexOf(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function IndexOf (value As Object) As Integer Implements IList.IndexOf" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IList.IndexOf(System::Object ^ value) = System::Collections::IList::IndexOf;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.IndexOf(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <see cref="T:System.Windows.Forms.MenuItem" /> Do zlokalizowania w kolekcji.</param>
        <summary>Aby uzyskać opis tego elementu członkowskiego, zobacz <see cref="M:System.Collections.IList.IndexOf(System.Object)" />.</summary>
        <returns>Liczony od zera indeks Jeśli <paramref name="value" /> jest <see cref="T:System.Windows.Forms.MenuItem" /> w kolekcji; w przeciwnym razie wartość -1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Mogą być używane tylko wtedy, gdy <xref:System.Windows.Forms.Menu.MenuItemCollection> wystąpienia jest rzutowany na <xref:System.Collections.IList> interfejsu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Insert">
      <MemberSignature Language="C#" Value="void IList.Insert (int index, object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Insert(int32 index, object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.MenuItemCollection.System#Collections#IList#Insert(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Insert (index As Integer, value As Object) Implements IList.Insert" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Insert(int index, System::Object ^ value) = System::Collections::IList::Insert;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Insert(System.Int32,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index">Liczony od zera indeks, w którym <see cref="T:System.Windows.Forms.MenuItem" /> powinien zostać wstawiony.</param>
        <param name="value">
          <see cref="T:System.Windows.Forms.MenuItem" /> Do wstawienia do <see cref="T:System.Windows.Forms.Menu.MenuItemCollection" />.</param>
        <summary>Aby uzyskać opis tego elementu członkowskiego, zobacz <see cref="M:System.Collections.IList.Insert(System.Int32,System.Object)" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Mogą być używane tylko wtedy, gdy <xref:System.Windows.Forms.Menu.MenuItemCollection> wystąpienia jest rzutowany na <xref:System.Collections.IList> interfejsu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IsFixedSize">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IsFixedSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.IList.IsFixedSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Menu.MenuItemCollection.System#Collections#IList#IsFixedSize" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsFixedSize As Boolean Implements IList.IsFixedSize" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::IList::IsFixedSize { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IList.IsFixedSize" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.IsFixedSize</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Aby uzyskać opis tego elementu członkowskiego, zobacz <see cref="P:System.Collections.IList.IsFixedSize" />.</summary>
        <value>
          <see langword="false" /> we wszystkich przypadkach.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Mogą być używane tylko wtedy, gdy <xref:System.Windows.Forms.Menu.MenuItemCollection> wystąpienia jest rzutowany na <xref:System.Collections.IList> interfejsu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Item">
      <MemberSignature Language="C#" Value="object System.Collections.IList.Item[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IList.Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Menu.MenuItemCollection.System#Collections#IList#Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value=" Property Item(index As Integer) As Object Implements IList.Item" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::IList::Item[int] { System::Object ^ get(int index); void set(int index, System::Object ^ value); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IList.Item" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.Item(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Liczony od zera indeks elementu do pobrania.</param>
        <summary>Aby uzyskać opis tego elementu członkowskiego, zobacz <see cref="P:System.Collections.IList.Item(System.Int32)" />.</summary>
        <value>
          <see cref="T:System.Windows.Forms.MenuItem" /> Pod określonym indeksem.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Mogą być używane tylko wtedy, gdy <xref:System.Windows.Forms.Menu.MenuItemCollection> wystąpienia jest rzutowany na <xref:System.Collections.IList> interfejsu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Remove">
      <MemberSignature Language="C#" Value="void IList.Remove (object value);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Remove(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.MenuItemCollection.System#Collections#IList#Remove(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Remove (value As Object) Implements IList.Remove" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Remove(System::Object ^ value) = System::Collections::IList::Remove;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Remove(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <see cref="T:System.Windows.Forms.MenuItem" /> Do usunięcia.</param>
        <summary>Aby uzyskać opis tego elementu członkowskiego, zobacz <see cref="M:System.Collections.IList.Remove(System.Object)" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Mogą być używane tylko wtedy, gdy <xref:System.Windows.Forms.Menu.MenuItemCollection> wystąpienia jest rzutowany na <xref:System.Collections.IList> interfejsu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>