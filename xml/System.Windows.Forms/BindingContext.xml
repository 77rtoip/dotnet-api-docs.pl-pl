<Type Name="BindingContext" FullName="System.Windows.Forms.BindingContext">
  <Metadata><Meta Name="ms.openlocfilehash" Value="6f1cae204d8bb559f744ca591a22ecb5031c5211" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69195864" /></Metadata><TypeSignature Language="C#" Value="public class BindingContext : System.Collections.ICollection" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit BindingContext extends System.Object implements class System.Collections.ICollection, class System.Collections.IEnumerable" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.BindingContext" />
  <TypeSignature Language="VB.NET" Value="Public Class BindingContext&#xA;Implements ICollection" />
  <TypeSignature Language="C++ CLI" Value="public ref class BindingContext : System::Collections::ICollection" />
  <TypeSignature Language="F#" Value="type BindingContext = class&#xA;    interface ICollection&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("CollectionChanged")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Zarządza kolekcją <see cref="T:System.Windows.Forms.BindingManagerBase" /> obiektów dla każdego obiektu, który dziedziczy <see cref="T:System.Windows.Forms.Control" /> z klasy.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Każdy formularz systemu Windows ma co najmniej <xref:System.Windows.Forms.BindingContext> jeden obiekt, który <xref:System.Windows.Forms.BindingManagerBase> zarządza obiektami formularza. Ponieważ Klasa jest abstrakcyjna, zwracany typ <xref:System.Windows.Forms.BindingContext.Item%2A> właściwości <xref:System.Windows.Forms.PropertyManager>jest <xref:System.Windows.Forms.CurrencyManager> albo lub. <xref:System.Windows.Forms.BindingManagerBase> Jeśli źródło danych jest obiektem, który może zwrócić tylko jedną właściwość (zamiast listy obiektów), <xref:System.Type> <xref:System.Windows.Forms.PropertyManager>jest to. Na przykład, jeśli określisz <xref:System.Windows.Forms.TextBox> jako źródło danych <xref:System.Windows.Forms.PropertyManager> , zostanie zwrócone. Z drugiej strony, jeśli źródło danych jest obiektem, który implementuje <xref:System.Collections.IList> lub <xref:System.ComponentModel.IBindingList>, <xref:System.Windows.Forms.CurrencyManager> jest zwracany.  
  
 Dla każdego źródła danych w formularzu systemu Windows istnieje pojedynczy <xref:System.Windows.Forms.CurrencyManager> element lub. <xref:System.Windows.Forms.PropertyManager> Ze względu na to, że może istnieć wiele źródeł danych skojarzonych z <xref:System.Windows.Forms.BindingContext> formularzem systemu Windows, program <xref:System.Windows.Forms.CurrencyManager> umożliwia pobranie wszelkich określonych skojarzonych ze źródłem danych.  
  
> [!NOTE]
>  Przy użyciu <xref:System.Windows.Forms.BindingContext.Item%2A> właściwości <xref:System.Windows.Forms.BindingContext> tworzy nową <xref:System.Windows.Forms.BindingManagerBase> , jeśli jeszcze nie istnieje. Może to prowadzić do pewnej pomyłki, ponieważ zwrócony obiekt może nie zarządzać listą (lub dowolną listą). Aby zapobiec zwracaniu nieprawidłowego <xref:System.Windows.Forms.BindingManagerBase>elementu, <xref:System.Windows.Forms.BindingContext.Contains%2A> Użyj metody, aby określić <xref:System.Windows.Forms.BindingManagerBase> , czy zamierzone już istnieje.  
  
 Jeśli używasz kontrolki kontenera, takiej <xref:System.Windows.Forms.GroupBox>jak, <xref:System.Windows.Forms.Panel>, lub <xref:System.Windows.Forms.TabControl>, aby zawierać kontrolki powiązane z danymi, możesz utworzyć <xref:System.Windows.Forms.BindingContext> tylko dla tej kontrolki kontenera i jej kontrolek. Następnie każda część formularza może być zarządzana samodzielnie <xref:System.Windows.Forms.BindingManagerBase>. Zobacz Konstruktor <xref:System.Windows.Forms.BindingContext.%23ctor%2A> , aby uzyskać więcej informacji na temat <xref:System.Windows.Forms.BindingManagerBase> tworzenia wielu obiektów dla tego samego źródła danych.  
  
 Jeśli dodasz <xref:System.Windows.Forms.TextBox> kontrolkę do formularza i powiążesz ją z kolumną tabeli w zestawie danych, formant komunikuje się <xref:System.Windows.Forms.BindingContext> z tym formularzem. Z kolei naprowadzi rozmowy do określonego <xref:System.Windows.Forms.CurrencyManager> dla tego skojarzenia danych. <xref:System.Windows.Forms.BindingContext> Jeśli kwerenda `Position` dotyczy właściwości <xref:System.Windows.Forms.CurrencyManager>, będzie ona zgłaszać bieżący rekord dla powiązania tej <xref:System.Windows.Forms.TextBox> kontrolki. W <xref:System.Windows.Forms.TextBox> poniższym przykładzie kodu formant jest powiązany `Customers` `FirstName` z kolumną tabeli w `dataSet1` zestawie danych za pomocą <xref:System.Windows.Forms.BindingContext> dla formularza, w którym jest on.  
  
```vb  
TextBox1.DataBindings.Add("Text", dataSet1, "Customers.FirstName")  
  
```  
  
```csharp  
textBox1.DataBindings.Add("Text", dataSet1, "Customers.FirstName");  
  
```  
  
```cpp  
textBox1->DataBindings->Add("Text", dataSet1, "Customers.FirstName");  
```  
  
 Do formularza można dodać drugą <xref:System.Windows.Forms.TextBox> kontrolkę`TextBox2`() `LastName` i powiązać ją `Customers` z kolumną tabeli w tym samym zestawie danych. `Customers.FirstName``TextBox1` `DataSet1` <xref:System.Windows.Forms.CurrencyManager>Jest on świadomy pierwszego powiązania (do), więc mógłby użyć tego samego, ponieważ oba pola tekstowe są powiązane z tym samym zestawem danych (). <xref:System.Windows.Forms.BindingContext>  
  
```vb  
TextBox2.DataBindings.Add("Text", dataSet1, "Customers.LastName")  
  
```  
  
```csharp  
textBox2.DataBindings.Add("Text", dataSet1, "Customers.LastName");  
  
```  
  
```cpp  
textBox2->DataBindings->Add("Text", dataSet1, "Customers.LastName");  
```  
  
 Jeśli utworzysz powiązanie `TextBox2` z innym zestawem danych <xref:System.Windows.Forms.BindingContext> , program tworzy i zarządza sekundą <xref:System.Windows.Forms.CurrencyManager>.  
  
 Ważne jest, aby zachować spójność sposobu ustawiania <xref:System.Windows.Forms.ListControl.DataSource%2A> <xref:System.Windows.Forms.BindingContext> właściwości i <xref:System.Windows.Forms.ListControl.DisplayMember%2A> . w przeciwnym razie tworzy wielu menedżerów walut dla tego samego zestawu danych, co powoduje błędy. Poniższy przykład kodu pokazuje kilka sposobów ustawiania właściwości i skojarzonych <xref:System.Windows.Forms.BindingContext> z nimi obiektów. Właściwości można ustawić przy użyciu jednej z następujących metod, o ile są spójne w całym kodzie.  
  
```vb  
ComboBox1.DataSource = DataSet1  
ComboBox1.DisplayMember = "Customers.FirstName"  
Me.BindingContext(dataSet1, "Customers").Position = 1  
  
```  
  
```csharp  
comboBox1.DataSource = DataSet1;  
comboBox1.DisplayMember = "Customers.FirstName";  
this.BindingContext[dataSet1, "Customers"].Position = 1;  
  
```  
  
```cpp  
comboBox1->DataSource = dataSet1;  
comboBox1->DisplayMember = "Customers.FirstName";  
this->BindingContext->get_Item(dataSet1, "Customers")->Position = 1;  
  
```  
  
```vb  
ComboBox1.DataSource = DataSet1.Customers  
ComboBox1.DisplayMember = "FirstName"  
Me.BindingContext(dataSet1.Customers).Position = 1  
  
```  
  
```csharp  
comboBox1.DataSource = DataSet1.Customers;  
comboBox1.DisplayMember = "FirstName";  
this.BindingContext[dataSet1.Customers].Position = 1;  
  
```  
  
```cpp  
comboBox1->DataSource = dataSet1->Customers;  
comboBox1->DisplayMember = "FirstName";  
this->BindingContext->get_Item(dataSet1->Customers)->Position = 1;  
  
```  
  
> [!NOTE]
>  Większość Windows Forms aplikacji jest <xref:System.Windows.Forms.BindingSource>powiązana przez. Składnik hermetyzuje <xref:System.Windows.Forms.CurrencyManager> i uwidacznia <xref:System.Windows.Forms.CurrencyManager> interfejs programowania. <xref:System.Windows.Forms.BindingSource> W przypadku używania <xref:System.Windows.Forms.BindingSource> elementu for należy używać członków narażonych <xref:System.Windows.Forms.BindingSource> na działanie w celu manipulowania "walutą" (czyli) `Position`, a nie za pośrednictwem <xref:System.Windows.Forms.BindingContext>.  
  
   
  
## Examples  
 Poniższy przykład kodu tworzy cztery <xref:System.Windows.Forms.Binding> obiekty, aby powiązać pięć formantów <xref:System.Windows.Forms.DateTimePicker> -a i cztery <xref:System.Windows.Forms.TextBox> kontrolki z kilkoma źródłami danych. Jest następnie używany do <xref:System.Windows.Forms.BindingManagerBase> uzyskania dla każdego źródła danych. <xref:System.Windows.Forms.BindingContext>  
  
 [!code-cpp[Classic BindingContext Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic BindingContext Example/CPP/source.cpp#1)]
 [!code-csharp[Classic BindingContext Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic BindingContext Example/CS/source.cs#1)]
 [!code-vb[Classic BindingContext Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic BindingContext Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.BindingManagerBase" />
    <altmember cref="T:System.Windows.Forms.Binding" />
    <altmember cref="T:System.Windows.Forms.BindingsCollection" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public BindingContext ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.BindingContext.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; BindingContext();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Forms.BindingContext" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.BindingManagerBase> Jeśli chcesz mieć wiele wystąpień dla tego samego źródła danych, Utwórz nowe <xref:System.Windows.Forms.BindingContext> <xref:System.Windows.Forms.Control.BindingContext%2A> i ustaw dla niego <xref:System.Windows.Forms.Control> właściwość obiektu, który dziedziczy z klasy. Na przykład <xref:System.Windows.Forms.BindingManagerBase> Jeśli masz dwa obiekty (z dwóch różnych <xref:System.Windows.Forms.BindingContext> obiektów) <xref:System.Windows.Forms.BindingManagerBase.Position%2A> , możesz ustawić właściwości każdej z nich <xref:System.Windows.Forms.BindingManagerBase> na różne wartości. Powoduje to, że każdy zestaw formantów powiązanych z danymi wyświetla różne wartości z tego samego źródła danych.  
  
   
  
## Examples  
 Poniższy przykład kodu tworzy dwa nowe <xref:System.Windows.Forms.BindingContext> obiekty i przypisuje każdy obiekt <xref:System.Windows.Forms.BindingContext> do właściwości <xref:System.Windows.Forms.GroupBox> formantu. `GroupBox1`zawiera `TextBox1`i `GroupBox2` zawiera (`TextBox2`który jest realizowanyprzyużyciu<xref:System.Windows.Forms.Control.ControlCollection>metodyklasy). <xref:System.Windows.Forms.Control.ControlCollection.AddRange%2A> Przykład dodaje <xref:System.Windows.Forms.Binding> obiekty do dwóch <xref:System.Windows.Forms.TextBox> kontrolek, powiązania każdego z tym samym źródłem danych i składową danych. W przykładzie pokazano również dwa programy obsługi zdarzeń, które używają <xref:System.Windows.Forms.BindingContext> <xref:System.Windows.Forms.GroupBox> z kontrolek, aby ustawić <xref:System.Windows.Forms.BindingManagerBase.Position%2A> właściwość dla różnych <xref:System.Windows.Forms.BindingManagerBase> obiektów.  
  
 [!code-cpp[Classic BindingContext.BindingContext Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic BindingContext.BindingContext Example/CPP/source.cpp#1)]
 [!code-csharp[Classic BindingContext.BindingContext Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic BindingContext.BindingContext Example/CS/source.cs#1)]
 [!code-vb[Classic BindingContext.BindingContext Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic BindingContext.BindingContext Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.BindingManagerBase" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="protected internal void Add (object dataSource, System.Windows.Forms.BindingManagerBase listManager);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void Add(object dataSource, class System.Windows.Forms.BindingManagerBase listManager) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.BindingContext.Add(System.Object,System.Windows.Forms.BindingManagerBase)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub Add (dataSource As Object, listManager As BindingManagerBase)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; void Add(System::Object ^ dataSource, System::Windows::Forms::BindingManagerBase ^ listManager);" />
      <MemberSignature Language="F#" Value="member this.Add : obj * System.Windows.Forms.BindingManagerBase -&gt; unit" Usage="bindingContext.Add (dataSource, listManager)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSource" Type="System.Object" />
        <Parameter Name="listManager" Type="System.Windows.Forms.BindingManagerBase" />
      </Parameters>
      <Docs>
        <param name="dataSource">Skojarzona<see cref="T:System.Windows.Forms.BindingManagerBase" />z. <see cref="T:System.Object" /></param>
        <param name="listManager"><see cref="T:System.Windows.Forms.BindingManagerBase" /> Do dodania.</param>
        <summary><see cref="T:System.Windows.Forms.BindingManagerBase" /> Dodaje skojarzone z określonym źródłem danych do kolekcji.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="AddCore">
      <MemberSignature Language="C#" Value="protected virtual void AddCore (object dataSource, System.Windows.Forms.BindingManagerBase listManager);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void AddCore(object dataSource, class System.Windows.Forms.BindingManagerBase listManager) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.BindingContext.AddCore(System.Object,System.Windows.Forms.BindingManagerBase)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub AddCore (dataSource As Object, listManager As BindingManagerBase)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void AddCore(System::Object ^ dataSource, System::Windows::Forms::BindingManagerBase ^ listManager);" />
      <MemberSignature Language="F#" Value="abstract member AddCore : obj * System.Windows.Forms.BindingManagerBase -&gt; unit&#xA;override this.AddCore : obj * System.Windows.Forms.BindingManagerBase -&gt; unit" Usage="bindingContext.AddCore (dataSource, listManager)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSource" Type="System.Object" />
        <Parameter Name="listManager" Type="System.Windows.Forms.BindingManagerBase" />
      </Parameters>
      <Docs>
        <param name="dataSource">Obiekt skojarzony z <see cref="T:System.Windows.Forms.BindingManagerBase" />.</param>
        <param name="listManager"><see cref="T:System.Windows.Forms.BindingManagerBase" /> Do dodania.</param>
        <summary><see cref="T:System.Windows.Forms.BindingManagerBase" /> Dodaje skojarzone z określonym źródłem danych do kolekcji.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="dataSource" />jest <see langword="null" />.  
  
—lub— 
 <paramref name="listManager" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="protected internal void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.BindingContext.Clear" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; void Clear();" />
      <MemberSignature Language="F#" Value="member this.Clear : unit -&gt; unit" Usage="bindingContext.Clear " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Czyści kolekcję dowolnych <see cref="T:System.Windows.Forms.BindingManagerBase" /> obiektów.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ClearCore">
      <MemberSignature Language="C#" Value="protected virtual void ClearCore ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void ClearCore() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.BindingContext.ClearCore" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub ClearCore ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void ClearCore();" />
      <MemberSignature Language="F#" Value="abstract member ClearCore : unit -&gt; unit&#xA;override this.ClearCore : unit -&gt; unit" Usage="bindingContext.ClearCore " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Czyści kolekcję.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CollectionChanged">
      <MemberSignature Language="C#" Value="public event System.ComponentModel.CollectionChangeEventHandler CollectionChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ComponentModel.CollectionChangeEventHandler CollectionChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.BindingContext.CollectionChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event CollectionChanged As CollectionChangeEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::ComponentModel::CollectionChangeEventHandler ^ CollectionChanged;" />
      <MemberSignature Language="F#" Value="member this.CollectionChanged : System.ComponentModel.CollectionChangeEventHandler " Usage="member this.CollectionChanged : System.ComponentModel.CollectionChangeEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ComponentModel.CollectionChangeEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Zawsze wywołuje, <see cref="T:System.NotImplementedException" /> gdy jest obsługiwany.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zdarzenie jest przestarzałe i zawsze zgłasza, <xref:System.NotImplementedException> gdy jest obsługiwane. <xref:System.Windows.Forms.BindingContext.CollectionChanged> Aby uzyskać więcej informacji na temat obsługi zdarzeń, zobacz [Obsługa i](~/docs/standard/events/index.md)wywoływanie zdarzeń.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotImplementedException">Występuje we wszystkich przypadkach.</exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Contains">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy <see cref="T:System.Windows.Forms.BindingContext" /> zawiera określony <see cref="T:System.Windows.Forms.BindingManagerBase" />element.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (object dataSource);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(object dataSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.BindingContext.Contains(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (dataSource As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(System::Object ^ dataSource);" />
      <MemberSignature Language="F#" Value="member this.Contains : obj -&gt; bool" Usage="bindingContext.Contains dataSource" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSource" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="dataSource"><see cref="T:System.Object" /> Reprezentuje źródło danych.</param>
        <summary>Pobiera wartość wskazującą, <see cref="T:System.Windows.Forms.BindingContext" /> <see cref="T:System.Windows.Forms.BindingManagerBase" /> czy zawiera skojarzoną z określonym źródłem danych.</summary>
        <returns><see langword="true" />Jeśli zawiera określony <see cref="T:System.Windows.Forms.BindingManagerBase" />; w przeciwnym razie, <see langword="false" />. <see cref="T:System.Windows.Forms.BindingContext" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zapoznaj <xref:System.Windows.Forms.Binding> się z klasą, aby uzyskać listę możliwych źródeł danych i informacje o tworzeniu powiązań między kontrolkami i źródłami danych.  
  
 Zobacz Właściwość <xref:System.Windows.Forms.BindingContext.Item%2A> , aby uzyskać informacje dotyczące <xref:System.Windows.Forms.BindingManagerBase> zwracania tylko źródła danych.  
  
   
  
## Examples  
 Poniższy przykład kodu używa metody, <xref:System.Windows.Forms.BindingContext.Contains%2A> aby określić, <xref:System.Windows.Forms.BindingManagerBase> czy istnieje dla każdej kontrolki w formularzu. Przykład przekazuje każdy <xref:System.Data.DataTable> w oddzielnym <xref:System.Data.DataSet> metodzie.  
  
 [!code-cpp[Classic BindingContext.Contains Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic BindingContext.Contains Example/CPP/source.cpp#1)]
 [!code-csharp[Classic BindingContext.Contains Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic BindingContext.Contains Example/CS/source.cs#1)]
 [!code-vb[Classic BindingContext.Contains Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic BindingContext.Contains Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.BindingContext.Item(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (object dataSource, string dataMember);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(object dataSource, string dataMember) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.BindingContext.Contains(System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (dataSource As Object, dataMember As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(System::Object ^ dataSource, System::String ^ dataMember);" />
      <MemberSignature Language="F#" Value="member this.Contains : obj * string -&gt; bool" Usage="bindingContext.Contains (dataSource, dataMember)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSource" Type="System.Object" />
        <Parameter Name="dataMember" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dataSource"><see cref="T:System.Object" /> Reprezentuje źródło danych.</param>
        <param name="dataMember">Informacje, które są konieczne do rozpoznania <see cref="T:System.Windows.Forms.BindingManagerBase" />do określonego.</param>
        <summary>Pobiera wartość wskazującą, <see cref="T:System.Windows.Forms.BindingContext" /> <see cref="T:System.Windows.Forms.BindingManagerBase" /> czy zawiera skojarzoną z określonym źródłem danych i składową danych.</summary>
        <returns><see langword="true" />Jeśli zawiera określony <see cref="T:System.Windows.Forms.BindingManagerBase" />; w przeciwnym razie, <see langword="false" />. <see cref="T:System.Windows.Forms.BindingContext" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zapoznaj <xref:System.Windows.Forms.Binding> się z klasą, aby uzyskać listę możliwych źródeł danych i informacje o tworzeniu powiązań między kontrolkami i źródłami danych.  
  
 Zapoznaj <xref:System.Windows.Forms.BindingContext.Item%2A> się z właściwością, aby <xref:System.Windows.Forms.BindingManagerBase> uzyskać informacje na temat powrotu przy użyciu źródła danych i elementu członkowskiego danych.  
  
   
  
## Examples  
 Poniższy przykład kodu używa metody, <xref:System.Windows.Forms.BindingContext.Contains%2A> aby sprawdzić, czy określony <xref:System.Windows.Forms.BindingManagerBase> istnieje przed podjęciem próby pobrania go za pośrednictwem <xref:System.Windows.Forms.BindingContext.Item%2A> właściwości.  
  
 [!code-cpp[Classic BindingContext.Contains1 Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic BindingContext.Contains1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic BindingContext.Contains1 Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic BindingContext.Contains1 Example/CS/source.cs#1)]
 [!code-vb[Classic BindingContext.Contains1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic BindingContext.Contains1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.BindingContext.Item(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.BindingContext.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReadOnly : bool" Usage="System.Windows.Forms.BindingContext.IsReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy kolekcja jest tylko do odczytu.</summary>
        <value><see langword="true" />Jeśli kolekcja jest tylko do odczytu; w przeciwnym razie. <see langword="false" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość jest pochodną <xref:System.Collections.ICollection>i jest zastępowana, aby zawsze `false`zwracać.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Item">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><see cref="T:System.Windows.Forms.BindingManagerBase" />Pobiera.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.BindingManagerBase this[object dataSource] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.BindingManagerBase Item(object)" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.BindingContext.Item(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(dataSource As Object) As BindingManagerBase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::BindingManagerBase ^ default[System::Object ^] { System::Windows::Forms::BindingManagerBase ^ get(System::Object ^ dataSource); };" />
      <MemberSignature Language="F#" Value="member this.Item(obj) : System.Windows.Forms.BindingManagerBase" Usage="System.Windows.Forms.BindingContext.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.BindingManagerBase</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSource" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="dataSource">Źródło danych skojarzone z określonym <see cref="T:System.Windows.Forms.BindingManagerBase" />.</param>
        <summary><see cref="T:System.Windows.Forms.BindingManagerBase" /> Pobiera, który jest skojarzony z określonym źródłem danych.</summary>
        <value>A <see cref="T:System.Windows.Forms.BindingManagerBase" /> dla określonego źródła danych.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj tego przeciążenia, jeśli <xref:System.Windows.Forms.BindingManagerBase> chcesz, aby ścieżka nawigacji nie była wymagana. Na <xref:System.Windows.Forms.BindingManagerBase> przykład jeśli <xref:System.Windows.Forms.Binding.DataSource%2A>zarządza <xref:System.Windows.Forms.Binding> zestawem obiektów, które używają <xref:System.Collections.ArrayList> lub <xref:System.Data.DataTable> jako, nie jest wymagana żadna ścieżka nawigacji.  
  
> [!NOTE]
>  Właściwość zawsze zwróci wartość <xref:System.Windows.Forms.BindingManagerBase>i nigdy nie zwraca `null`. <xref:System.Windows.Forms.BindingContext.Item%2A>  
  
 Zapoznaj <xref:System.Windows.Forms.Binding> się z klasą, aby uzyskać listę możliwych źródeł danych i informacje o tworzeniu powiązań między kontrolkami i źródłami danych.  
  
   
  
## Examples  
 Poniższy <xref:System.Windows.Forms.BindingManagerBase> przykład kodu zwraca trzy obiekty: jeden dla a <xref:System.Data.DataView>, jeden dla <xref:System.Collections.ArrayList>i jeden <xref:System.Windows.Forms.TextBox> dla <xref:System.Windows.Forms.Binding.DataSource%2A> <xref:System.Windows.Forms.Binding> elementu, który należy do kontrolki.  
  
 [!code-cpp[Classic BindingContext.this Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic BindingContext.this Example/CPP/source.cpp#1)]
 [!code-csharp[Classic BindingContext.this Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic BindingContext.this Example/CS/source.cs#1)]
 [!code-vb[Classic BindingContext.this Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic BindingContext.this Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.BindingsCollection" />
        <altmember cref="T:System.Windows.Forms.Binding" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.BindingManagerBase this[object dataSource, string dataMember] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.BindingManagerBase Item(object, string)" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.BindingContext.Item(System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Default Public ReadOnly Property Item(dataSource As Object, dataMember As String) As BindingManagerBase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::BindingManagerBase ^ default[System::Object ^, System::String ^] { System::Windows::Forms::BindingManagerBase ^ get(System::Object ^ dataSource, System::String ^ dataMember); };" />
      <MemberSignature Language="F#" Value="member this.Item(obj * string) : System.Windows.Forms.BindingManagerBase" Usage="System.Windows.Forms.BindingContext.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.BindingManagerBase</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSource" Type="System.Object" />
        <Parameter Name="dataMember" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="dataSource">Źródło danych skojarzone z określonym <see cref="T:System.Windows.Forms.BindingManagerBase" />.</param>
        <param name="dataMember">Ścieżka nawigacji zawierająca informacje, które są rozpoznawane jako <see cref="T:System.Windows.Forms.BindingManagerBase" />określone.</param>
        <summary>Pobiera obiekt <see cref="T:System.Windows.Forms.BindingManagerBase" /> , który jest skojarzony z określonym źródłem danych i składową danych.</summary>
        <value><see cref="T:System.Windows.Forms.BindingManagerBase" /> Dla określonego źródła danych i elementu członkowskiego danych.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj tego przeciążenia, <xref:System.Windows.Forms.BindingManagerBase> gdy zarządza <xref:System.Windows.Forms.Binding> zestawem obiektów, dla którego źródło danych zawiera wiele obiektów. Na przykład <xref:System.Data.DataSet> może zawierać kilka <xref:System.Data.DataTable> obiektów połączonych przez <xref:System.Data.DataRelation> obiekty. W takim przypadku ścieżka nawigacji jest wymagana, aby <xref:System.Windows.Forms.BindingContext> można było zwrócić poprawne. <xref:System.Windows.Forms.BindingManagerBase>  
  
> [!NOTE]
>  Właściwość zawsze zwróci wartość <xref:System.Windows.Forms.BindingManagerBase>, gdy `dataMember` parametr jest prawidłowy. <xref:System.Windows.Forms.BindingContext.Item%2A> Nigdy nie zwróci `null`.  
  
 Zapoznaj <xref:System.Windows.Forms.Binding> się z klasą, aby uzyskać listę możliwych źródeł danych i informacje o tworzeniu powiązań między kontrolkami i źródłami danych.  
  
 Jeśli pożądane <xref:System.Windows.Forms.BindingManagerBase> jest zarządzanie listą, ścieżka nawigacji musi również kończyć się listą. Na przykład poniższy C# kod wiąże <xref:System.Windows.Forms.TextBox> formant z datą zamówienia w tabeli Orders. Ścieżka nawigacji zawiera <xref:System.Data.DataTable.TableName%2A> <xref:System.Data.DataRelation.RelationName%2A>, i i <xref:System.Data.DataColumn.ColumnName%2A>. Należy jednak pobrać <xref:System.Data.DataTable.TableName%2A> tylko przy użyciu i <xref:System.Data.DataRelation.RelationName%2A> (który jest rozpoznawany jako lista). <xref:System.Windows.Forms.BindingManagerBase>  
  
```  
// The navigation path for a Binding ends with a property.  
textBox1.DataBindings.Add  
("Text", dataSet1, "Customers.custToOrders.OrderDate");  
// The navigation path for the BindingManagerBase ends with a list.  
BindingManagerBase bmOrders = this.BindingContext  
[dataSet1, "Customers.custToOrders"];  
```  
  
 W przypadku powrotu <xref:System.Windows.Forms.BindingManagerBase>a należy użyć tego samego źródła danych <xref:System.Windows.Forms.Binding> co i zmodyfikować tylko ścieżkę nawigacji.  
  
 Użyj metody, aby określić, czy pożądany <xref:System.Windows.Forms.BindingManagerBase> już istnieje. <xref:System.Windows.Forms.BindingContext.Contains%2A>  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje, jak użyć, <xref:System.Windows.Forms.BindingContext.Item%2A> aby <xref:System.Windows.Forms.BindingManagerBase> pobrać dla określonego powiązania. Pokazano również, jak obsłużyć <xref:System.Windows.Forms.BindingManagerBase.BindingComplete> zdarzenie dla programu <xref:System.Windows.Forms.BindingManagerBase> , aby upewnić się, że wiele kontrolek powiązanych z tym samym źródłem danych pozostanie zsynchronizowane po zmianie jednej z wartości kontrolnych. Aby uruchomić ten przykład, wklej kod do formularza systemu Windows i Wywołaj `InitializeControlsAndData` metodę z konstruktora lub <xref:System.Windows.Forms.Form.Load> metody obsługi zdarzeń.  
  
 [!code-csharp[System.Windows.Forms.BindingSourceMultipleControls#11](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.BindingSourceMultipleControls/CS/Form1.cs#11)]
 [!code-vb[System.Windows.Forms.BindingSourceMultipleControls#11](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.BindingSourceMultipleControls/VB/Form1.vb#11)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">Określony <paramref name="dataMember" /> nie istnieje w źródle danych.</exception>
        <altmember cref="T:System.Windows.Forms.BindingsCollection" />
        <altmember cref="T:System.Windows.Forms.Binding" />
      </Docs>
    </Member>
    <Member MemberName="OnCollectionChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnCollectionChanged (System.ComponentModel.CollectionChangeEventArgs ccevent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCollectionChanged(class System.ComponentModel.CollectionChangeEventArgs ccevent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.BindingContext.OnCollectionChanged(System.ComponentModel.CollectionChangeEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnCollectionChanged (ccevent As CollectionChangeEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnCollectionChanged(System::ComponentModel::CollectionChangeEventArgs ^ ccevent);" />
      <MemberSignature Language="F#" Value="abstract member OnCollectionChanged : System.ComponentModel.CollectionChangeEventArgs -&gt; unit&#xA;override this.OnCollectionChanged : System.ComponentModel.CollectionChangeEventArgs -&gt; unit" Usage="bindingContext.OnCollectionChanged ccevent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ccevent" Type="System.ComponentModel.CollectionChangeEventArgs" />
      </Parameters>
      <Docs>
        <param name="ccevent">A <see cref="T:System.ComponentModel.CollectionChangeEventArgs" /> , który zawiera dane zdarzenia.</param>
        <summary><see cref="E:System.Windows.Forms.BindingContext.CollectionChanged" /> Podnosi zdarzenie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podnoszenie zdarzenia wywołuje program obsługi zdarzeń przez delegata. Aby uzyskać więcej informacji, zobacz [Obsługa i](~/docs/standard/events/index.md)wywoływanie zdarzeń.  
  
 <xref:System.Windows.Forms.BindingContext.OnCollectionChanged%2A> Metoda umożliwia również klasom pochodnym obsłużenia zdarzenia bez dołączania delegata. Jest to preferowana technika obsługi zdarzenia w klasie pochodnej.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Podczas zastępowania <see cref="M:System.Windows.Forms.BindingContext.OnCollectionChanged(System.ComponentModel.CollectionChangeEventArgs)" /> klasy pochodnej należy wywołać <see cref="M:System.Windows.Forms.BindingContext.OnCollectionChanged(System.ComponentModel.CollectionChangeEventArgs)" /> metodę klasy bazowej, aby zarejestrowani delegowani odbierał zdarzenie.</para></block>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="protected internal void Remove (object dataSource);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void Remove(object dataSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.BindingContext.Remove(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub Remove (dataSource As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; void Remove(System::Object ^ dataSource);" />
      <MemberSignature Language="F#" Value="member this.Remove : obj -&gt; unit" Usage="bindingContext.Remove dataSource" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSource" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="dataSource">Źródło danych skojarzone z <see cref="T:System.Windows.Forms.BindingManagerBase" /> do usunięcia.</param>
        <summary><see cref="T:System.Windows.Forms.BindingManagerBase" /> Usuwa skojarzone z określonym źródłem danych.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RemoveCore">
      <MemberSignature Language="C#" Value="protected virtual void RemoveCore (object dataSource);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void RemoveCore(object dataSource) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.BindingContext.RemoveCore(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub RemoveCore (dataSource As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void RemoveCore(System::Object ^ dataSource);" />
      <MemberSignature Language="F#" Value="abstract member RemoveCore : obj -&gt; unit&#xA;override this.RemoveCore : obj -&gt; unit" Usage="bindingContext.RemoveCore dataSource" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dataSource" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="dataSource">Źródło danych skojarzone z <see cref="T:System.Windows.Forms.BindingManagerBase" /> do usunięcia.</param>
        <summary><see cref="T:System.Windows.Forms.BindingManagerBase" /> Usuwa skojarzone z określonym źródłem danych.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.CopyTo">
      <MemberSignature Language="C#" Value="void ICollection.CopyTo (Array ar, int index);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.ICollection.CopyTo(class System.Array ar, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.BindingContext.System#Collections#ICollection#CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Sub CopyTo (ar As Array, index As Integer) Implements ICollection.CopyTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.ICollection.CopyTo(Array ^ ar, int index) = System::Collections::ICollection::CopyTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="ar" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="ar"><see cref="T:System.Array" /> Do kopiowania do.</param>
        <param name="index">Indeks kolekcji, z którego ma zostać rozpoczęte kopiowanie.</param>
        <summary>Kopiuje elementy kolekcji do określonej tablicy, rozpoczynając od indeksu kolekcji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 [!code-cpp[Classic BindingContext.ICollection.CopyTo Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic BindingContext.ICollection.CopyTo Example/CPP/source.cpp#1)]
 [!code-csharp[Classic BindingContext.ICollection.CopyTo Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic BindingContext.ICollection.CopyTo Example/CS/source.cs#1)]
 [!code-vb[Classic BindingContext.ICollection.CopyTo Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic BindingContext.ICollection.CopyTo Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.Count">
      <MemberSignature Language="C#" Value="int System.Collections.ICollection.Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 System.Collections.ICollection.Count" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.BindingContext.System#Collections#ICollection#Count" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property Count As Integer Implements ICollection.Count" />
      <MemberSignature Language="C++ CLI" Value="property int System::Collections::ICollection::Count { int get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ICollection.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera łączną liczbę <see cref="T:System.Windows.Forms.CurrencyManager" /> obiektów zarządzanych <see cref="T:System.Windows.Forms.BindingContext" />przez.</summary>
        <value>Liczba źródeł danych zarządzanych przez <see cref="T:System.Windows.Forms.BindingContext" />program.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu zwraca liczbę <xref:System.Windows.Forms.CurrencyManager> obiektów zarządzanych <xref:System.Windows.Forms.BindingContext>przez.  
  
 [!code-cpp[Classic BindingContext.ICollection.Count Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic BindingContext.ICollection.Count Example/CPP/source.cpp#1)]
 [!code-csharp[Classic BindingContext.ICollection.Count Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic BindingContext.ICollection.Count Example/CS/source.cs#1)]
 [!code-vb[Classic BindingContext.ICollection.Count Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic BindingContext.ICollection.Count Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.IsSynchronized">
      <MemberSignature Language="C#" Value="bool System.Collections.ICollection.IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.ICollection.IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.BindingContext.System#Collections#ICollection#IsSynchronized" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsSynchronized As Boolean Implements ICollection.IsSynchronized" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::ICollection::IsSynchronized { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ICollection.IsSynchronized" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy kolekcja jest synchronizowana.</summary>
        <value><see langword="true" />Jeśli kolekcja jest bezpieczna wątkowo; w przeciwnym razie. <see langword="false" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość jest pochodną <xref:System.Collections.ICollection>i jest zastępowana, aby zawsze `false`zwracać.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.SyncRoot">
      <MemberSignature Language="C#" Value="object System.Collections.ICollection.SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.ICollection.SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.BindingContext.System#Collections#ICollection#SyncRoot" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property SyncRoot As Object Implements ICollection.SyncRoot" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::ICollection::SyncRoot { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ICollection.SyncRoot" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera obiekt do użycia podczas synchronizacji (bezpieczeństwo wątku).</summary>
        <value>Ta właściwość jest pochodną <see cref="T:System.Collections.ICollection" />i jest zastępowana, aby zawsze <see langword="null" />zwracać.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IEnumerable.GetEnumerator">
      <MemberSignature Language="C#" Value="System.Collections.IEnumerator IEnumerable.GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance class System.Collections.IEnumerator System.Collections.IEnumerable.GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.BindingContext.System#Collections#IEnumerable#GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Function GetEnumerator () As IEnumerator Implements IEnumerable.GetEnumerator" />
      <MemberSignature Language="C++ CLI" Value=" virtual System::Collections::IEnumerator ^ System.Collections.IEnumerable.GetEnumerator() = System::Collections::IEnumerable::GetEnumerator;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pobiera moduł wyliczający dla kolekcji.</summary>
        <returns><see cref="T:System.Collections.IEnumerator" /> Dla kolekcji.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zwracany przez metodę pozwala na iterację kolekcji zarządzanej przez <xref:System.Windows.Forms.BindingContext>. <xref:System.Collections.IEnumerator> <xref:System.Windows.Forms.BindingContext.System%23Collections%23IEnumerable%23GetEnumerator%2A>  
  
   
  
## Examples  
 Poniższy przykład kodu używa <xref:System.Windows.Forms.BindingContext.System%23Collections%23IEnumerable%23GetEnumerator%2A> metody do <xref:System.Collections.IEnumerator> zwrócenia dla <xref:System.Windows.Forms.BindingContext>.  
  
 [!code-cpp[Classic BindingContext.IEnumerable.GetEnumerator Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic BindingContext.IEnumerable.GetEnumerator Example/CPP/source.cpp#1)]
 [!code-csharp[Classic BindingContext.IEnumerable.GetEnumerator Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic BindingContext.IEnumerable.GetEnumerator Example/CS/source.cs#1)]
 [!code-vb[Classic BindingContext.IEnumerable.GetEnumerator Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic BindingContext.IEnumerable.GetEnumerator Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UpdateBinding">
      <MemberSignature Language="C#" Value="public static void UpdateBinding (System.Windows.Forms.BindingContext newBindingContext, System.Windows.Forms.Binding binding);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void UpdateBinding(class System.Windows.Forms.BindingContext newBindingContext, class System.Windows.Forms.Binding binding) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.BindingContext.UpdateBinding(System.Windows.Forms.BindingContext,System.Windows.Forms.Binding)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void UpdateBinding(System::Windows::Forms::BindingContext ^ newBindingContext, System::Windows::Forms::Binding ^ binding);" />
      <MemberSignature Language="F#" Value="static member UpdateBinding : System.Windows.Forms.BindingContext * System.Windows.Forms.Binding -&gt; unit" Usage="System.Windows.Forms.BindingContext.UpdateBinding (newBindingContext, binding)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="newBindingContext" Type="System.Windows.Forms.BindingContext" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="binding" Type="System.Windows.Forms.Binding" Index="1" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="newBindingContext">Nowy <see cref="T:System.Windows.Forms.BindingContext" /> do skojarzenia <see cref="T:System.Windows.Forms.Binding" />z.</param>
        <param name="binding">Do skojarzenia z nowym <see cref="T:System.Windows.Forms.BindingContext" />. <see cref="T:System.Windows.Forms.Binding" /></param>
        <summary>Kojarzy <see cref="T:System.Windows.Forms.Binding" /> a z nowym <see cref="T:System.Windows.Forms.BindingContext" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda jest przeznaczona do aktualizacji powiązań składników, które implementują <xref:System.Windows.Forms.IBindableComponent>, gdy ich <xref:System.Windows.Forms.BindingContext> zmiany zostały wprowadzone.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
