<Type Name="Binding" FullName="System.Windows.Forms.Binding">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="3e4984d03b4d295a484905b4224f78cefcf41340" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36348814" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Binding" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Binding extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.Binding" />
  <TypeSignature Language="VB.NET" Value="Public Class Binding" />
  <TypeSignature Language="C++ CLI" Value="public ref class Binding" />
  <TypeSignature Language="F#" Value="type Binding = class" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Forms.ListBindingConverter))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Reprezentuje proste powiązanie między wartością właściwości obiektu i wartość właściwości formantu.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Windows.Forms.Binding> klasy można tworzyć i obsługiwać proste powiązanie między właściwości formantu a właściwości obiektu lub właściwości bieżącego obiektu w postaci listy obiektów.  
  
 Na przykład pierwszym przypadku można powiązać <xref:System.Windows.Forms.Control.Text%2A> właściwość <xref:System.Windows.Forms.TextBox> formant `FirstName` właściwość `Customer` obiektu. Na przykład drugim przypadku można powiązać <xref:System.Windows.Forms.Control.Text%2A> właściwość <xref:System.Windows.Forms.TextBox> formant `FirstName` właściwość <xref:System.Data.DataTable> zawierający klientów.  
  
 <xref:System.Windows.Forms.Binding> Klasa umożliwia także formatowania wartości do wyświetlenia za pomocą <xref:System.Windows.Forms.Binding.Format> zdarzeń oraz do pobierania wartości sformatowanych za pośrednictwem <xref:System.Windows.Forms.Binding.Parse> zdarzeń.  
  
 Podczas konstruowania <xref:System.Windows.Forms.Binding> wystąpienia z <xref:System.Windows.Forms.Binding.%23ctor%2A> konstruktora, należy określić trzy elementy:  
  
-   Nazwa właściwości kontrolki powiązać.  
  
-   Źródło danych.  
  
-   Ścieżka nawigacji, który jest rozpoznawany jako listy lub właściwości w źródle danych. Ścieżka nawigacji jest również używana do utworzenia obiektu <xref:System.Windows.Forms.Binding.BindingMemberInfo%2A> właściwości.  
  
 Najpierw należy określić nazwę właściwości formantu chcesz powiązać dane. Na przykład, aby wyświetlić dane w <xref:System.Windows.Forms.TextBox> kontrolować, określ <xref:System.Windows.Forms.TextBoxBase.Text%2A> właściwości.  
  
 Po drugie można określić wystąpienia jednej z klas w poniższej tabeli jako źródła danych.  
  
  Trzecie, należy określić ścieżkę nawigacji, który może być pustym ciągiem (""), nazwę jednej właściwości lub rozdzielaną kropkami hierarchię nazw. Jeśli ustawisz ścieżki nawigacji do ciągu pustego <xref:System.Object.ToString%2A> metoda zostanie wywołana na obiekcie źródła danych.  
  
 Jeśli źródło danych jest <xref:System.Data.DataTable>, które zawierają wiele <xref:System.Data.DataColumn> obiektów, należy użyć ścieżki do nawigacji można rozpoznać określonej kolumny.  
  
> [!NOTE]
>  Jeśli źródło danych jest <xref:System.Data.DataSet>, <xref:System.Data.DataViewManager>, lub <xref:System.Data.DataTable>, które są rzeczywiście wiązane <xref:System.Data.DataView>. W rezultacie powiązane wiersze są faktycznie <xref:System.Data.DataRowView> obiektów.  
  
 Wymagana jest ścieżka rozdzielonym nawigacji, gdy źródło danych ma wartość do obiektu, który zawiera wiele <xref:System.Data.DataTable> obiektów (takich jak <xref:System.Data.DataSet> lub <xref:System.Data.DataViewManager>). Umożliwia także ścieżka rozdzielonym nawigacji po powiązać obiektu, którego właściwości zwracać odwołań do innych obiektów (np. klasa o właściwościach, które zwracają inne obiekty klasy). Na przykład wszystkich następujących ścieżkach nawigacji opisano pola prawidłowych danych:  
  
-   "Size.Height"  
  
-   "Suppliers.CompanyName"  
  
-   "Regions.regionsToCustomers.CustomerFirstName"  
  
-   "Regions.regionsToCustomers.customersToOrders.ordersToDetails.Quantity"  
  
 Każdy element członkowski ścieżki może zwrócić właściwości, który jest rozpoznawany jako pojedynczej wartości (takie jak liczba całkowita) lub listę wartości (na przykład na tablicę ciągów). Mimo że każdy element członkowski w ścieżce mogą być listy lub właściwości, końcowego element członkowski należy rozwiązać do właściwości. Każdy element członkowski opiera się na poprzedni element członkowski: "Size.Height" jest rozpoznawana jako <xref:System.Drawing.Size.Height%2A> właściwości dla bieżącego <xref:System.Drawing.Size>; "Regions.regionsToCustomers.CustomerFirstName" jest rozpoznawany jako pierwszej nazwy dla bieżącego odbiorcy, gdzie klient jest jednym z klientów dla bieżącego obszaru.  
  
 A <xref:System.Data.DataRelation> zwraca listę wartości, łącząc jedną <xref:System.Data.DataTable> do drugiej <xref:System.Data.DataTable> w <xref:System.Data.DataSet>. Jeśli <xref:System.Data.DataSet> zawiera <xref:System.Data.DataRelation> obiektów, można określić jako element członkowski danych <xref:System.Data.DataTable.TableName%2A> następuje <xref:System.Data.DataRelation.RelationName%2A>, a następnie <xref:System.Data.DataColumn.ColumnName%2A>. Na przykład jeśli <xref:System.Data.DataTable> o nazwie "Dostawcy" zawiera <xref:System.Data.DataRelation> o nazwie "suppliers2products", element członkowski danych może być "Suppliers.suppliers2products.ProductName".  
  
 Źródło danych może zawierać zestaw powiązanymi klasami. Załóżmy na przykład zestaw klas kataloguje systemy słoneczne. Klasa o nazwie `System` zawiera właściwość o nazwie `Stars` która zwraca kolekcję `Star` obiektów. Każdy `Star` obiekt ma `Name` i `Mass` właściwości, a także `Planets` właściwość, która zwraca kolekcję `Planet` obiektów. W tym systemie ma również każdego planety `Mass` i `Name` właściwości. Każdy `Planet` dalsze obiekt ma `Moons` właściwość, która zwraca kolekcję `Moon` obiektów, z których każdy ma również `Name` i `Mass` właściwości. Jeśli określisz `System` obiekt jako źródło danych, można określić dowolny z następujących jako element członkowski danych:  
  
-   "Stars.Name"  
  
-   "Stars.Mass"  
  
-   "Stars.Planets.Name"  
  
-   "Stars.Planets.Mass"  
  
-   "Stars.Planets.Moons.Name"  
  
-   "Stars.Planets.Moons.Mass"  
  
 Formantów, które mogą być powiązane z prostej funkcji kolekcję <xref:System.Windows.Forms.Binding> obiekty w <xref:System.Windows.Forms.ControlBindingsCollection>, które można otworzyć za pomocą formantu <xref:System.Windows.Forms.Control.DataBindings%2A> właściwości. Możesz dodać <xref:System.Windows.Forms.Binding> do kolekcji, wywołując <xref:System.Windows.Forms.ControlBindingsCollection.Add%2A> metody, w tym samym powiązań właściwości formantu do właściwości obiektu (lub do właściwości bieżącego obiektu na liście).  
  
 Możesz można prosty — wiązanie z dowolnych obiektów, która pochodzi z <xref:System.Windows.Forms.Control?displayProperty=nameWithType> klasy, na przykład z poniższych formantów systemu Windows:  
  
-   <xref:System.Windows.Forms.Button>  
  
-   <xref:System.Windows.Forms.CheckBox>  
  
-   <xref:System.Windows.Forms.CheckedListBox>  
  
-   <xref:System.Windows.Forms.ComboBox>  
  
-   <xref:System.Windows.Forms.DateTimePicker>  
  
-   <xref:System.Windows.Forms.DomainUpDown>  
  
-   <xref:System.Windows.Forms.GroupBox>  
  
-   <xref:System.Windows.Forms.HScrollBar>  
  
-   <xref:System.Windows.Forms.Label>  
  
-   <xref:System.Windows.Forms.LinkLabel>  
  
-   <xref:System.Windows.Forms.ListBox>  
  
-   <xref:System.Windows.Forms.ListView>  
  
-   <xref:System.Windows.Forms.MonthCalendar>  
  
-   <xref:System.Windows.Forms.NumericUpDown>  
  
-   <xref:System.Windows.Forms.PictureBox>  
  
-   <xref:System.Windows.Forms.ProgressBar>  
  
-   <xref:System.Windows.Forms.RadioButton>  
  
-   <xref:System.Windows.Forms.RichTextBox>  
  
-   <xref:System.Windows.Forms.ScrollBar>  
  
-   <xref:System.Windows.Forms.StatusBar>  
  
-   <xref:System.Windows.Forms.TextBox>  
  
-   <xref:System.Windows.Forms.TreeView>  
  
-   <xref:System.Windows.Forms.VScrollBar>  
  
> [!NOTE]
>  Tylko <xref:System.Windows.Forms.ListControl.SelectedValue%2A> właściwość <xref:System.Windows.Forms.ComboBox>, <xref:System.Windows.Forms.CheckedListBox>, i <xref:System.Windows.Forms.ListBox> formant jest powiązany z prostego.  
  
 <xref:System.Windows.Forms.BindingManagerBase> Klasa jest klasą abstrakcyjną, która zarządza wszystkich <xref:System.Windows.Forms.Binding> obiektów dla źródła danych i element członkowski danych. Klasy, które pochodzą z <xref:System.Windows.Forms.BindingManagerBase> są <xref:System.Windows.Forms.CurrencyManager> i <xref:System.Windows.Forms.PropertyManager> klasy. Jak <xref:System.Windows.Forms.Binding> odbywa się zależy od tego, czy <xref:System.Windows.Forms.Binding> jest powiązanie listy lub powiązania właściwości. Na przykład, jeśli jest powiązanie listy, można użyć <xref:System.Windows.Forms.BindingManagerBase> do określenia <xref:System.Windows.Forms.BindingManagerBase.Position%2A> na liście <xref:System.Windows.Forms.BindingManagerBase.Position%2A>, w związku z tym Określa, który element (poza wszystkie elementy na liście) faktycznie jest powiązana z formantem. Aby przywrócić odpowiednie <xref:System.Windows.Forms.BindingManagerBase>, użyj <xref:System.Windows.Forms.BindingContext>.  
  
 Aby dodać nowy wiersz do zestaw kontrolek powiązanych do tej samej <xref:System.Windows.Forms.Binding.DataSource%2A>, użyj <xref:System.Windows.Forms.BindingManagerBase.AddNew%2A> metody <xref:System.Windows.Forms.BindingManagerBase> klasy. Użyj <xref:System.Windows.Forms.BindingContext.Item%2A> właściwość <xref:System.Windows.Forms.BindingContext> służącą do zwracania odpowiednie <xref:System.Windows.Forms.CurrencyManager>. Aby wyjść dodanie nowego wiersza, należy użyć <xref:System.Windows.Forms.CurrencyManager.CancelCurrentEdit%2A> metody.  
  
   
  
## Examples  
 Poniższy przykład kodu tworzy formularz systemu Windows z kilku formantów, które przedstawiają proste powiązanie danych. W przykładzie jest tworzony <xref:System.Data.DataSet> dwóch tabel o nazwie `Customers` i `Orders`, a <xref:System.Data.DataRelation> o nazwie `custToOrders`. Cztery kontrolki ( <xref:System.Windows.Forms.DateTimePicker> i trzy <xref:System.Windows.Forms.TextBox> formantów) danych powiązanych z kolumn w tabelach. Dla każdego formantu w przykładzie tworzy i dodaje <xref:System.Windows.Forms.Binding> do formantu za pośrednictwem <xref:System.Windows.Forms.Control.DataBindings%2A> właściwości. Przykład zwraca <xref:System.Windows.Forms.BindingManagerBase> dla każdej tabeli za pomocą formularza <xref:System.Windows.Forms.BindingContext>. Cztery <xref:System.Windows.Forms.Button> Określa przyrost lub zmniejszenie <xref:System.Windows.Forms.BindingManagerBase.Position%2A> właściwość <xref:System.Windows.Forms.BindingManagerBase> obiektów.  
  
 [!code-cpp[Classic Binding Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Binding Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Binding Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Binding Example/CS/source.cs#1)]
 [!code-vb[Classic Binding Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Binding Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.BindingContext" />
    <altmember cref="T:System.Windows.Forms.BindingManagerBase" />
    <altmember cref="T:System.Windows.Forms.ComboBox" />
    <altmember cref="T:System.Windows.Forms.DataGrid" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Forms.Binding" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Binding (string propertyName, object dataSource, string dataMember);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string propertyName, object dataSource, string dataMember) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Binding.#ctor(System.String,System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (propertyName As String, dataSource As Object, dataMember As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Binding(System::String ^ propertyName, System::Object ^ dataSource, System::String ^ dataMember);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.Binding : string * obj * string -&gt; System.Windows.Forms.Binding" Usage="new System.Windows.Forms.Binding (propertyName, dataSource, dataMember)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="dataSource" Type="System.Object" />
        <Parameter Name="dataMember" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName">Nazwa właściwości kontrolki do powiązania.</param>
        <param name="dataSource">
          <see cref="T:System.Object" /> Reprezentujący źródło danych.</param>
        <param name="dataMember">Właściwość lub listy, aby powiązać.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Forms.Binding" /> klasy, która wiązania proste właściwość wskazanych formantu do elementu członkowskiego danych określonego źródła danych.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można określić wystąpienia któregokolwiek z następujących klas dla źródła danych:  
  
-   <xref:System.Data.DataSet>  
  
-   <xref:System.Data.DataTable>  
  
-   <xref:System.Data.DataView>  
  
-   <xref:System.Data.DataViewManager>  
  
-   <xref:System.Windows.Forms.BindingSource>  
  
-   Każda klasa implementująca <xref:System.Collections.IList> — interfejs  
  
-   Każda klasa  
  
 Zobacz <xref:System.Windows.Forms.Binding> klasy, aby uzyskać więcej informacji o tworzeniu `dataMember` ciągu.  
  
 Podczas tworzenia powiązania dla właściwości formantu, nowe <xref:System.Windows.Forms.Binding> bada zdarzeń udostępnianych przez formant związany i dołącza do dwóch określonego zdarzenia:  
  
-   <xref:System.Windows.Forms.Control.Validating?displayProperty=nameWithType>  
  
-   Zdarzenia o nazwie *PropertyName* `Changed` (na przykład <xref:System.Windows.Forms.Control.BackColorChanged?displayProperty=nameWithType>)  
  
 Jeśli próba powiązania do właściwości, która nie istnieje, <xref:System.ArgumentException> będzie zostać zgłoszony, gdy <xref:System.Windows.Forms.Binding> zostanie dodany do formantu <xref:System.Windows.Forms.Control.DataBindings%2A?displayProperty=nameWithType> kolekcji.  
  
   
  
## Examples  
 Poniższy kod przykładowy wiązania <xref:System.Windows.Forms.TextBox> formantu do kolumny tabeli <xref:System.Data.DataSet> o nazwie `myDataSet`. Przykład wymaga, aby zadeklarowaniu `myDataSet` w sekcji deklaracji modułu.  
  
 [!code-cpp[Classic Binding.Binding Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Binding.Binding Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Binding.Binding Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Binding.Binding Example/CS/source.cs#1)]
 [!code-vb[Classic Binding.Binding Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Binding.Binding Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">
          <paramref name="propertyName" /> nie jest prawidłową właściwością formantu, ani ani ciągiem pustym ("").</exception>
        <exception cref="T:System.ArgumentException">Właściwość określonego przez <paramref name="propertyName" /> nie istnieje w formancie.</exception>
        <altmember cref="T:System.Windows.Forms.BindingsCollection" />
        <altmember cref="T:System.Windows.Forms.CurrencyManager" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Binding (string propertyName, object dataSource, string dataMember, bool formattingEnabled);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string propertyName, object dataSource, string dataMember, bool formattingEnabled) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Binding.#ctor(System.String,System.Object,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (propertyName As String, dataSource As Object, dataMember As String, formattingEnabled As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Binding(System::String ^ propertyName, System::Object ^ dataSource, System::String ^ dataMember, bool formattingEnabled);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.Binding : string * obj * string * bool -&gt; System.Windows.Forms.Binding" Usage="new System.Windows.Forms.Binding (propertyName, dataSource, dataMember, formattingEnabled)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="dataSource" Type="System.Object" />
        <Parameter Name="dataMember" Type="System.String" />
        <Parameter Name="formattingEnabled" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName">Nazwa właściwości kontrolki do powiązania.</param>
        <param name="dataSource">
          <see cref="T:System.Object" /> Reprezentujący źródło danych.</param>
        <param name="dataMember">Właściwość lub listy, aby powiązać.</param>
        <param name="formattingEnabled">
          <see langword="true" /> Aby sformatować wyświetlanych danych; w przeciwnym razie <see langword="false" />.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Forms.Binding" /> klasy, która wiąże właściwości formantu wskazany element członkowski danych określonego źródła danych i opcjonalnie umożliwia formatowanie stosowane.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Właściwość określonego przez <paramref name="propertyName" /> nie istnieje w formancie.  - lub - podane właściwość jest właściwością tylko do odczytu.</exception>
        <exception cref="T:System.Exception">Formatowanie jest wyłączona i <paramref name="propertyName" /> nie jest prawidłową właściwością formantu, ani ani ciągiem pustym ("").</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Binding (string propertyName, object dataSource, string dataMember, bool formattingEnabled, System.Windows.Forms.DataSourceUpdateMode dataSourceUpdateMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string propertyName, object dataSource, string dataMember, bool formattingEnabled, valuetype System.Windows.Forms.DataSourceUpdateMode dataSourceUpdateMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Binding.#ctor(System.String,System.Object,System.String,System.Boolean,System.Windows.Forms.DataSourceUpdateMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Binding(System::String ^ propertyName, System::Object ^ dataSource, System::String ^ dataMember, bool formattingEnabled, System::Windows::Forms::DataSourceUpdateMode dataSourceUpdateMode);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.Binding : string * obj * string * bool * System.Windows.Forms.DataSourceUpdateMode -&gt; System.Windows.Forms.Binding" Usage="new System.Windows.Forms.Binding (propertyName, dataSource, dataMember, formattingEnabled, dataSourceUpdateMode)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="dataSource" Type="System.Object" />
        <Parameter Name="dataMember" Type="System.String" />
        <Parameter Name="formattingEnabled" Type="System.Boolean" />
        <Parameter Name="dataSourceUpdateMode" Type="System.Windows.Forms.DataSourceUpdateMode" />
      </Parameters>
      <Docs>
        <param name="propertyName">Nazwa właściwości kontrolki do powiązania.</param>
        <param name="dataSource">
          <see cref="T:System.Object" /> Reprezentujący źródło danych.</param>
        <param name="dataMember">Właściwość lub listy, aby powiązać.</param>
        <param name="formattingEnabled">
          <see langword="true" /> Aby sformatować wyświetlanych danych; w przeciwnym razie <see langword="false" />.</param>
        <param name="dataSourceUpdateMode">Jeden z <see cref="T:System.Windows.Forms.DataSourceUpdateMode" /> wartości.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Forms.Binding" /> klasy, która wiąże właściwości określonego formantu do elementu członkowskiego określone dane z określonego źródła danych. Opcjonalnie umożliwia formatowanie i propaguje wartości do źródła danych na podstawie ustawienia określona aktualizacja.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można określić wystąpienia któregokolwiek z następujących klas dla źródła danych:  
  
-   <xref:System.Data.DataSet>  
  
-   <xref:System.Data.DataTable>  
  
-   <xref:System.Data.DataView>  
  
-   <xref:System.Data.DataViewManager>  
  
-   <xref:System.Windows.Forms.BindingSource>  
  
-   Każda klasa implementująca <xref:System.Collections.IList> — interfejs  
  
-   Każda klasa  
  
 Zobacz <xref:System.Windows.Forms.Binding> klasy, aby uzyskać więcej informacji o tworzeniu `dataMember` ciągu.  
  
 Podczas tworzenia powiązania dla właściwości formantu, nowe <xref:System.Windows.Forms.Binding> bada zdarzeń udostępnianych przez formant związany i dołącza do dwóch określonego zdarzenia:  
  
-   <xref:System.Windows.Forms.Control.Validating?displayProperty=nameWithType>.  
  
-   Zdarzenia o nazwie *PropertyName* `Changed` (na przykład <xref:System.Windows.Forms.Control.BackColorChanged?displayProperty=nameWithType>)  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Właściwość określonego przez <paramref name="propertyName" /> nie istnieje w formancie.  - lub - źródła lub danych elementu członkowskiego lub formant właściwości danych określoną są skojarzone z inną powiązania w kolekcji.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Binding (string propertyName, object dataSource, string dataMember, bool formattingEnabled, System.Windows.Forms.DataSourceUpdateMode dataSourceUpdateMode, object nullValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string propertyName, object dataSource, string dataMember, bool formattingEnabled, valuetype System.Windows.Forms.DataSourceUpdateMode dataSourceUpdateMode, object nullValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Binding.#ctor(System.String,System.Object,System.String,System.Boolean,System.Windows.Forms.DataSourceUpdateMode,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Binding(System::String ^ propertyName, System::Object ^ dataSource, System::String ^ dataMember, bool formattingEnabled, System::Windows::Forms::DataSourceUpdateMode dataSourceUpdateMode, System::Object ^ nullValue);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.Binding : string * obj * string * bool * System.Windows.Forms.DataSourceUpdateMode * obj -&gt; System.Windows.Forms.Binding" Usage="new System.Windows.Forms.Binding (propertyName, dataSource, dataMember, formattingEnabled, dataSourceUpdateMode, nullValue)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="dataSource" Type="System.Object" />
        <Parameter Name="dataMember" Type="System.String" />
        <Parameter Name="formattingEnabled" Type="System.Boolean" />
        <Parameter Name="dataSourceUpdateMode" Type="System.Windows.Forms.DataSourceUpdateMode" />
        <Parameter Name="nullValue" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="propertyName">Nazwa właściwości kontrolki do powiązania.</param>
        <param name="dataSource">
          <see cref="T:System.Object" /> Reprezentujący źródło danych.</param>
        <param name="dataMember">Właściwość lub listy, aby powiązać.</param>
        <param name="formattingEnabled">
          <see langword="true" /> Aby sformatować wyświetlanych danych; w przeciwnym razie <see langword="false" />.</param>
        <param name="dataSourceUpdateMode">Jeden z <see cref="T:System.Windows.Forms.DataSourceUpdateMode" /> wartości.</param>
        <param name="nullValue">
          <see cref="T:System.Object" /> Ma zostać zastosowany do właściwości powiązanej kontrolki, jeśli wartość źródła danych jest <see cref="T:System.DBNull" />.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Forms.Binding" /> klasy, która wiąże właściwość wskazanych sterowania do elementu członkowskiego określone dane z określonego źródła danych. Opcjonalnie umożliwia formatowanie propaguje wartości do źródła danych na podstawie ustawienia określona aktualizacja i ustawia właściwość do określonej wartości podczas <see cref="T:System.DBNull" /> jest zwracana ze źródła danych.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można określić wystąpienia któregokolwiek z następujących klas dla źródła danych:  
  
-   <xref:System.Data.DataSet>  
  
-   <xref:System.Data.DataTable>  
  
-   <xref:System.Data.DataView>  
  
-   <xref:System.Data.DataViewManager>  
  
-   <xref:System.Windows.Forms.BindingSource>  
  
-   Każda klasa implementująca <xref:System.Collections.IList> — interfejs  
  
-   Każda klasa  
  
 Zobacz <xref:System.Windows.Forms.Binding> klasy, aby uzyskać więcej informacji o tworzeniu `dataMember` ciągu.  
  
 Podczas tworzenia powiązania dla właściwości formantu, nowe <xref:System.Windows.Forms.Binding> bada zdarzeń udostępnianych przez formant związany i dołącza do dwóch określonego zdarzenia:  
  
-   <xref:System.Windows.Forms.Control.Validating?displayProperty=nameWithType>  
  
-   Zdarzenia o nazwie *PropertyName* `Changed` (na przykład <xref:System.Windows.Forms.Control.BackColorChanged?displayProperty=nameWithType>)  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Właściwość określonego przez <paramref name="propertyName" /> nie istnieje w formancie.  - lub - źródła lub danych elementu członkowskiego lub formant właściwości danych określoną są skojarzone z inną powiązania w kolekcji.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Binding (string propertyName, object dataSource, string dataMember, bool formattingEnabled, System.Windows.Forms.DataSourceUpdateMode dataSourceUpdateMode, object nullValue, string formatString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string propertyName, object dataSource, string dataMember, bool formattingEnabled, valuetype System.Windows.Forms.DataSourceUpdateMode dataSourceUpdateMode, object nullValue, string formatString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Binding.#ctor(System.String,System.Object,System.String,System.Boolean,System.Windows.Forms.DataSourceUpdateMode,System.Object,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Binding(System::String ^ propertyName, System::Object ^ dataSource, System::String ^ dataMember, bool formattingEnabled, System::Windows::Forms::DataSourceUpdateMode dataSourceUpdateMode, System::Object ^ nullValue, System::String ^ formatString);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.Binding : string * obj * string * bool * System.Windows.Forms.DataSourceUpdateMode * obj * string -&gt; System.Windows.Forms.Binding" Usage="new System.Windows.Forms.Binding (propertyName, dataSource, dataMember, formattingEnabled, dataSourceUpdateMode, nullValue, formatString)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="dataSource" Type="System.Object" />
        <Parameter Name="dataMember" Type="System.String" />
        <Parameter Name="formattingEnabled" Type="System.Boolean" />
        <Parameter Name="dataSourceUpdateMode" Type="System.Windows.Forms.DataSourceUpdateMode" />
        <Parameter Name="nullValue" Type="System.Object" />
        <Parameter Name="formatString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName">Nazwa właściwości kontrolki do powiązania.</param>
        <param name="dataSource">
          <see cref="T:System.Object" /> Reprezentujący źródło danych.</param>
        <param name="dataMember">Właściwość lub listy, aby powiązać.</param>
        <param name="formattingEnabled">
          <see langword="true" /> Aby sformatować wyświetlanych danych; w przeciwnym razie <see langword="false" />.</param>
        <param name="dataSourceUpdateMode">Jeden z <see cref="T:System.Windows.Forms.DataSourceUpdateMode" /> wartości.</param>
        <param name="nullValue">
          <see cref="T:System.Object" /> Ma zostać zastosowany do właściwości powiązanej kontrolki, jeśli wartość źródła danych jest <see cref="T:System.DBNull" />.</param>
        <param name="formatString">Co najmniej jeden format specyfikator znaki, które wskazują, jak wartość ma być wyświetlany.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Forms.Binding" /> klasy, która wiąże właściwości określonego formantu do elementu członkowskiego określone dane z określonego źródła danych. Opcjonalnie umożliwia formatowanie z określonego ciągu formatu; propaguje wartości do źródła danych na podstawie ustawienia określona aktualizacja; i ustawia właściwość do określonej wartości podczas <see cref="T:System.DBNull" /> jest zwracana ze źródła danych.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można określić wystąpienia któregokolwiek z następujących klas dla źródła danych:  
  
-   <xref:System.Data.DataSet>  
  
-   <xref:System.Data.DataTable>  
  
-   <xref:System.Data.DataView>  
  
-   <xref:System.Data.DataViewManager>  
  
-   <xref:System.Windows.Forms.BindingSource>  
  
-   Każda klasa implementująca <xref:System.Collections.IList> — interfejs  
  
-   Każda klasa  
  
 Zobacz <xref:System.Windows.Forms.Binding> klasy, aby uzyskać więcej informacji o tworzeniu `dataMember` ciągu.  
  
 Podczas tworzenia powiązania dla właściwości formantu, nowe <xref:System.Windows.Forms.Binding> bada zdarzeń udostępnianych przez formant związany i dołącza do dwóch określonego zdarzenia:  
  
-   <xref:System.Windows.Forms.Control.Validating?displayProperty=nameWithType>  
  
-   Zdarzenia o nazwie *PropertyName* `Changed` (na przykład <xref:System.Windows.Forms.Control.BackColorChanged?displayProperty=nameWithType>)  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Właściwość określonego przez <paramref name="propertyName" /> nie istnieje w formancie.  - lub - źródła lub danych elementu członkowskiego lub formant właściwości danych określoną są skojarzone z inną powiązania w kolekcji.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Binding (string propertyName, object dataSource, string dataMember, bool formattingEnabled, System.Windows.Forms.DataSourceUpdateMode dataSourceUpdateMode, object nullValue, string formatString, IFormatProvider formatInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string propertyName, object dataSource, string dataMember, bool formattingEnabled, valuetype System.Windows.Forms.DataSourceUpdateMode dataSourceUpdateMode, object nullValue, string formatString, class System.IFormatProvider formatInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Binding.#ctor(System.String,System.Object,System.String,System.Boolean,System.Windows.Forms.DataSourceUpdateMode,System.Object,System.String,System.IFormatProvider)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Binding(System::String ^ propertyName, System::Object ^ dataSource, System::String ^ dataMember, bool formattingEnabled, System::Windows::Forms::DataSourceUpdateMode dataSourceUpdateMode, System::Object ^ nullValue, System::String ^ formatString, IFormatProvider ^ formatInfo);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.Binding : string * obj * string * bool * System.Windows.Forms.DataSourceUpdateMode * obj * string * IFormatProvider -&gt; System.Windows.Forms.Binding" Usage="new System.Windows.Forms.Binding (propertyName, dataSource, dataMember, formattingEnabled, dataSourceUpdateMode, nullValue, formatString, formatInfo)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="dataSource" Type="System.Object" />
        <Parameter Name="dataMember" Type="System.String" />
        <Parameter Name="formattingEnabled" Type="System.Boolean" />
        <Parameter Name="dataSourceUpdateMode" Type="System.Windows.Forms.DataSourceUpdateMode" />
        <Parameter Name="nullValue" Type="System.Object" />
        <Parameter Name="formatString" Type="System.String" />
        <Parameter Name="formatInfo" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="propertyName">Nazwa właściwości kontrolki do powiązania.</param>
        <param name="dataSource">
          <see cref="T:System.Object" /> Reprezentujący źródło danych.</param>
        <param name="dataMember">Właściwość lub listy, aby powiązać.</param>
        <param name="formattingEnabled">
          <see langword="true" /> Aby sformatować wyświetlanych danych; w przeciwnym razie <see langword="false" />.</param>
        <param name="dataSourceUpdateMode">Jeden z <see cref="T:System.Windows.Forms.DataSourceUpdateMode" /> wartości.</param>
        <param name="nullValue">
          <see cref="T:System.Object" /> Ma zostać zastosowany do właściwości powiązanej kontrolki, jeśli wartość źródła danych jest <see cref="T:System.DBNull" />.</param>
        <param name="formatString">Co najmniej jeden format specyfikator znaki, które wskazują, jak wartość ma być wyświetlany.</param>
        <param name="formatInfo">Implementacja interfejsu <see cref="T:System.IFormatProvider" /> do przesłonięcia formatowanie zachowanie domyślne.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Forms.Binding" /> z właściwością określonego formantu do elementu członkowskiego określone dane z określonego źródła danych. Opcjonalnie umożliwia formatowanie z określonego ciągu formatu; propaguje wartości do źródła danych na podstawie ustawienia określona aktualizacja; Umożliwia formatowanie z określonego ciągu formatu; Ustawia właściwość do określonej wartości podczas <see cref="T:System.DBNull" /> jest zwracana z tego źródła danych; i Ustawia dostawcę określonego formatu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można określić wystąpienia któregokolwiek z następujących klas dla źródła danych:  
  
-   <xref:System.Data.DataSet>  
  
-   <xref:System.Data.DataTable>  
  
-   <xref:System.Data.DataView>  
  
-   <xref:System.Data.DataViewManager>  
  
-   <xref:System.Windows.Forms.BindingSource>  
  
-   Każda klasa implementująca <xref:System.Collections.IList> — interfejs  
  
-   Każda klasa  
  
 Zobacz <xref:System.Windows.Forms.Binding> klasy, aby uzyskać więcej informacji o tworzeniu `dataMember` ciągu.  
  
 Podczas tworzenia powiązania dla właściwości formantu, nowe <xref:System.Windows.Forms.Binding> bada zdarzeń udostępnianych przez formant związany i dołącza do dwóch określonego zdarzenia:  
  
-   <xref:System.Windows.Forms.Control.Validating?displayProperty=nameWithType>  
  
-   Zdarzenia o nazwie *PropertyName* `Changed` (na przykład <xref:System.Windows.Forms.Control.BackColorChanged?displayProperty=nameWithType>)  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Właściwość określonego przez <paramref name="propertyName" /> nie istnieje w formancie.  - lub - źródła lub danych elementu członkowskiego lub formant właściwości danych określoną są skojarzone z inną powiązania w kolekcji.</exception>
      </Docs>
    </Member>
    <Member MemberName="BindableComponent">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.IBindableComponent BindableComponent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.IBindableComponent BindableComponent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.BindableComponent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BindableComponent As IBindableComponent" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::IBindableComponent ^ BindableComponent { System::Windows::Forms::IBindableComponent ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.BindableComponent : System.Windows.Forms.IBindableComponent" Usage="System.Windows.Forms.Binding.BindableComponent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.IBindableComponent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera formant <see cref="T:System.Windows.Forms.Binding" /> jest skojarzony.</summary>
        <value>
          <see cref="T:System.Windows.Forms.IBindableComponent" />
          <see cref="T:System.Windows.Forms.Binding" /> Jest skojarzony.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BindingComplete">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.BindingCompleteEventHandler BindingComplete;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.BindingCompleteEventHandler BindingComplete" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Binding.BindingComplete" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event BindingComplete As BindingCompleteEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::BindingCompleteEventHandler ^ BindingComplete;" />
      <MemberSignature Language="F#" Value="member this.BindingComplete : System.Windows.Forms.BindingCompleteEventHandler " Usage="member this.BindingComplete : System.Windows.Forms.BindingCompleteEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.BindingCompleteEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy <see cref="P:System.Windows.Forms.Binding.FormattingEnabled" /> właściwość jest ustawiona na <see langword="true" /> ukończenia, takie jak kiedy przekazania danych z kontroli źródła danych lub odwrotnie i operacji wiązania</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie jest zgłaszane w następujących warunkach, kiedy <xref:System.Windows.Forms.Binding.FormattingEnabled%2A> jest `true`:  
  
-   Dane ze źródła danych spoczywa na właściwość formantu.  
  
-   Dane z właściwości formantu spoczywa na źródle danych.  
  
 To zdarzenie jest wywoływane po zakończeniu tych operacji, niezależnie od stanu ukończenia. Na przykład, jeśli operacja powiązania wiąże wartości null na <xref:System.Windows.Forms.DateTimePicker.Value%2A> właściwości, jest zgłaszany wyjątek, ale <xref:System.Windows.Forms.Binding.BindingComplete> wystąpi zdarzenie. Program obsługi tego zdarzenia może podejmij odpowiednią akcję, oparte na sukces, błędu lub wyjątki w procesie powiązanie, sprawdzając <xref:System.Windows.Forms.BindingCompleteEventArgs.BindingCompleteState%2A> właściwość <xref:System.Windows.Forms.BindingCompleteEventArgs> parametru.  
  
 Aby uzyskać więcej informacji na temat obsługi zdarzeń, zobacz [Obsługa i wywoływanie zdarzeń](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób obsługi <xref:System.Windows.Forms.Binding.BindingComplete> zdarzeń.  
  
 [!code-cpp[System.Windows.Forms.DataConnectorBindingComplete#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.DataConnectorBindingComplete/CPP/form1.cpp#3)]
 [!code-csharp[System.Windows.Forms.DataConnectorBindingComplete#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataConnectorBindingComplete/CS/form1.cs#3)]
 [!code-vb[System.Windows.Forms.DataConnectorBindingComplete#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataConnectorBindingComplete/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Binding.FormattingEnabled" />
        <altmember cref="M:System.Windows.Forms.Binding.OnBindingComplete(System.Windows.Forms.BindingCompleteEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="BindingManagerBase">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.BindingManagerBase BindingManagerBase { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.BindingManagerBase BindingManagerBase" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.BindingManagerBase" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BindingManagerBase As BindingManagerBase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::BindingManagerBase ^ BindingManagerBase { System::Windows::Forms::BindingManagerBase ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.BindingManagerBase : System.Windows.Forms.BindingManagerBase" Usage="System.Windows.Forms.Binding.BindingManagerBase" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.BindingManagerBase</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera <see cref="T:System.Windows.Forms.BindingManagerBase" /> dla tego <see cref="T:System.Windows.Forms.Binding" />.</summary>
        <value>
          <see cref="T:System.Windows.Forms.BindingManagerBase" /> Który zarządza to <see cref="T:System.Windows.Forms.Binding" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Windows.Forms.BindingManagerBase> do iteracji powiązanej danymi listy zwiększanie lub zmniejszanie <xref:System.Windows.Forms.BindingManagerBase.Position%2A> właściwości. <xref:System.Windows.Forms.BindingManagerBase> Klasa jest abstrakcyjna. <xref:System.Windows.Forms.CurrencyManager> Dziedziczy klasa, która zarządza list powiązanych z danymi, <xref:System.Windows.Forms.BindingManagerBase> klasy.  
  
   
  
## Examples  
 Poniższy kod pobiera przykład <xref:System.Windows.Forms.BindingManagerBase> z każdym <xref:System.Windows.Forms.Binding> formularza i odbitek <xref:System.Windows.Forms.BindingManagerBase.Position%2A> właściwości dla każdego <xref:System.Windows.Forms.BindingManagerBase>.  
  
 [!code-cpp[Classic Binding.BindingManagerBase Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Binding.BindingManagerBase Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Binding.BindingManagerBase Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Binding.BindingManagerBase Example/CS/source.cs#1)]
 [!code-vb[Classic Binding.BindingManagerBase Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Binding.BindingManagerBase Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BindingMemberInfo">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.BindingMemberInfo BindingMemberInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.BindingMemberInfo BindingMemberInfo" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.BindingMemberInfo" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BindingMemberInfo As BindingMemberInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::BindingMemberInfo BindingMemberInfo { System::Windows::Forms::BindingMemberInfo get(); };" />
      <MemberSignature Language="F#" Value="member this.BindingMemberInfo : System.Windows.Forms.BindingMemberInfo" Usage="System.Windows.Forms.Binding.BindingMemberInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.BindingMemberInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera obiekt, który zawiera informacje dotyczące tego powiązania na podstawie <paramref name="dataMember" /> parametru w <see cref="Overload:System.Windows.Forms.Binding.#ctor" /> konstruktora.</summary>
        <value>A <see cref="T:System.Windows.Forms.BindingMemberInfo" /> zawierający informacje o tym <see cref="T:System.Windows.Forms.Binding" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.BindingMemberInfo> Jest tworzona na podstawie `dataMember` ciąg przekazany do <xref:System.Windows.Forms.Binding.%23ctor%2A> konstruktora.  
  
   
  
## Examples  
 Poniższy kod pobiera przykład <xref:System.Windows.Forms.BindingMemberInfo> każdego <xref:System.Windows.Forms.Binding> w formularzu i odbitek <xref:System.Windows.Forms.BindingMemberInfo.BindingPath%2A>, <xref:System.Windows.Forms.BindingMemberInfo.BindingField%2A>, i <xref:System.Windows.Forms.BindingMemberInfo.BindingMember%2A> wartości właściwości, które <xref:System.Windows.Forms.Binding>.  
  
 [!code-cpp[Classic Binding.BindingMemberInfo Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Binding.BindingMemberInfo Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Binding.BindingMemberInfo Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Binding.BindingMemberInfo Example/CS/source.cs#1)]
 [!code-vb[Classic Binding.BindingMemberInfo Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Binding.BindingMemberInfo Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.BindingsCollection" />
      </Docs>
    </Member>
    <Member MemberName="Control">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Control Control { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Control Control" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.Control" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Control As Control" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Control ^ Control { System::Windows::Forms::Control ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Control : System.Windows.Forms.Control" Usage="System.Windows.Forms.Binding.Control" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Control</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera formant należącą do powiązania.</summary>
        <value>
          <see cref="T:System.Windows.Forms.Control" /> Należącą do powiązania.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy kod pobiera przykład <xref:System.Windows.Forms.BindingManagerBase> dla określonego źródła danych i odbitek informacje o poszczególnych <xref:System.Windows.Forms.Binding.Control%2A> właściwość, która jest powiązana ze źródłem danych. W przykładzie użyto <xref:System.Windows.Forms.BindingManagerBase.Bindings%2A> właściwość <xref:System.Windows.Forms.BindingManagerBase> można pobrać wszystkich kontrolek.  
  
 [!code-cpp[Classic Binding.Control Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Binding.Control Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Binding.Control Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Binding.Control Example/CS/source.cs#1)]
 [!code-vb[Classic Binding.Control Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Binding.Control Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ControlUpdateMode">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ControlUpdateMode ControlUpdateMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.ControlUpdateMode ControlUpdateMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.ControlUpdateMode" />
      <MemberSignature Language="VB.NET" Value="Public Property ControlUpdateMode As ControlUpdateMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ControlUpdateMode ControlUpdateMode { System::Windows::Forms::ControlUpdateMode get(); void set(System::Windows::Forms::ControlUpdateMode value); };" />
      <MemberSignature Language="F#" Value="member this.ControlUpdateMode : System.Windows.Forms.ControlUpdateMode with get, set" Usage="System.Windows.Forms.Binding.ControlUpdateMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ControlUpdateMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia podczas zmian w źródle danych są propagowane do właściwości powiązanej kontrolki.</summary>
        <value>Jeden z <see cref="T:System.Windows.Forms.ControlUpdateMode" /> wartości. Wartość domyślna to <see cref="F:System.Windows.Forms.ControlUpdateMode.OnPropertyChanged" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DataSource">
      <MemberSignature Language="C#" Value="public object DataSource { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DataSource" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.DataSource" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DataSource As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ DataSource { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DataSource : obj" Usage="System.Windows.Forms.Binding.DataSource" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera źródło danych dla tego powiązania.</summary>
        <value>
          <see cref="T:System.Object" /> Reprezentujący źródło danych.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Źródła danych zawierają:  
  
-   A <xref:System.Data.DataSet>  
  
-   A <xref:System.Data.DataTable>  
  
-   A <xref:System.Data.DataView>  
  
-   A <xref:System.Data.DataViewManager>  
  
-   Każdy obiekt, który implementuje <xref:System.Collections.IList> — interfejs  
  
-   Dowolny obiekt  
  
   
  
## Examples  
 Poniższy przykład kodu wykorzystuje <xref:System.Windows.Forms.Binding.DataSource%2A> właściwości do zwrócenia <xref:System.Data.DataSet>.  
  
 [!code-cpp[Classic Binding.DataSource Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Binding.DataSource Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Binding.DataSource Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Binding.DataSource Example/CS/source.cs#1)]
 [!code-vb[Classic Binding.DataSource Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Binding.DataSource Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataSourceNullValue">
      <MemberSignature Language="C#" Value="public object DataSourceNullValue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DataSourceNullValue" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.DataSourceNullValue" />
      <MemberSignature Language="VB.NET" Value="Public Property DataSourceNullValue As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ DataSourceNullValue { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DataSourceNullValue : obj with get, set" Usage="System.Windows.Forms.Binding.DataSourceNullValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość, które mają być przechowywane w źródle danych, jeśli wartość formantu jest <see langword="null" /> lub jest pusty.</summary>
        <value>
          <see cref="T:System.Object" /> Mają być przechowywane w źródle danych, gdy właściwość formantu jest pusty lub <see langword="null" />. Wartość domyślna to <see cref="T:System.DBNull" /> dla typów wartości i <see langword="null" /> dla typów innych niż wartości.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można użyć <xref:System.Windows.Forms.Binding.NullValue%2A> właściwości w celu określenia wartości wyświetlane w powiązanej kontrolki, gdy źródło danych zawiera <xref:System.DBNull>.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Binding.NullValue" />
      </Docs>
    </Member>
    <Member MemberName="DataSourceUpdateMode">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataSourceUpdateMode DataSourceUpdateMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DataSourceUpdateMode DataSourceUpdateMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.DataSourceUpdateMode" />
      <MemberSignature Language="VB.NET" Value="Public Property DataSourceUpdateMode As DataSourceUpdateMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::DataSourceUpdateMode DataSourceUpdateMode { System::Windows::Forms::DataSourceUpdateMode get(); void set(System::Windows::Forms::DataSourceUpdateMode value); };" />
      <MemberSignature Language="F#" Value="member this.DataSourceUpdateMode : System.Windows.Forms.DataSourceUpdateMode with get, set" Usage="System.Windows.Forms.Binding.DataSourceUpdateMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataSourceUpdateMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, kiedy zmiany właściwości powiązanej kontrolki są propagowane w źródle danych.</summary>
        <value>Wartość, która wskazuje, kiedy zmiany są propagowane. Wartość domyślna to <see cref="F:System.Windows.Forms.DataSourceUpdateMode.OnValidation" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Należy pamiętać, że nawet jeśli ta właściwość jest ustawiona na <xref:System.Windows.Forms.DataSourceUpdateMode.Never>, powiązanie zaktualizuje co najmniej jeden raz, po raz pierwszy jest nawiązywane.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ConvertEventHandler Format;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ConvertEventHandler Format" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Binding.Format" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Format As ConvertEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::ConvertEventHandler ^ Format;" />
      <MemberSignature Language="F#" Value="member this.Format : System.Windows.Forms.ConvertEventHandler " Usage="member this.Format : System.Windows.Forms.ConvertEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ConvertEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy właściwość formantu jest powiązany z wartością danych.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.Binding.Format> Zdarzenie jest zgłaszane, gdy przekazania danych ze źródła danych w formancie. Może obsłużyć <xref:System.Windows.Forms.Binding.Format> zdarzeń, aby przekonwertować niesformatowanych danych ze źródła danych do sformatowanych danych do wyświetlenia. Gdy dane są pobierane z kontrolki do źródła danych <xref:System.Windows.Forms.Binding.Parse> zdarzenie jest zgłaszane do anulowania formatowania wyświetlanej wartości, a następnie <xref:System.Windows.Forms.Binding.Format> zdarzenie do ponownego formatowania danych w celu wyświetlenia. Dzięki temu, że formant związany wyświetla prawidłowo sformatowane dane niezależnie od tego, czy użytkownik wprowadza sformatowanym lub niesformatowanym danych w formancie.  
  
 <xref:System.Windows.Forms.Binding.Format> i <xref:System.Windows.Forms.Binding.Parse> zdarzenia pozwalają tworzyć niestandardowe formaty do wyświetlania danych. Na przykład, jeśli dane w tabeli typu <xref:System.Decimal>, można wyświetlić dane w formacie waluty lokalnej przez ustawienie <xref:System.Windows.Forms.ConvertEventArgs.Value%2A> właściwość <xref:System.Windows.Forms.ConvertEventArgs> sformatowaną wartość <xref:System.Windows.Forms.Binding.Format> zdarzeń. W związku z tym musi anulowania formatowania wartości wyświetlanej w <xref:System.Windows.Forms.Binding.Parse> zdarzeń.  
  
 <xref:System.Windows.Forms.Binding.Format> Zawsze, gdy wystąpi zdarzenie <xref:System.Windows.Forms.BindingManagerBase.Current%2A> wartość <xref:System.Windows.Forms.BindingManagerBase> zmian, które obejmują:  
  
-   Po raz pierwszy właściwość jest powiązana.  
  
-   Kiedykolwiek <xref:System.Windows.Forms.BindingManagerBase.Position%2A> zmiany.  
  
-   Po każdej zmianie powiązanej danymi listy jest posortowane lub przefiltrowane, co jest osiągnąć, kiedy <xref:System.Data.DataView> dostarcza listy.  
  
 <xref:System.Windows.Forms.Binding.Format> Zdarzeń występuje także po <xref:System.Windows.Forms.Binding.Parse> zdarzeń. Na przykład gdy formant utraci fokus, są parsowane jego zawartość. Natychmiast później, jak nowe dane zostanie przypisany do kontrolki <xref:System.Windows.Forms.Binding.Format> wystąpienia zdarzenia, dzięki czemu nowej zawartości do sformatowania.  
  
 Aby uzyskać więcej informacji na temat obsługi zdarzeń, zobacz [Obsługa i wywoływanie zdarzeń](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 Poniższy przykład kodu tworzy <xref:System.Windows.Forms.Binding>, dodaje <xref:System.Windows.Forms.ConvertEventHandler> delegata zarówno <xref:System.Windows.Forms.Binding.Parse> i <xref:System.Windows.Forms.Binding.Format> zdarzenia i dodaje <xref:System.Windows.Forms.Binding> do <xref:System.Windows.Forms.BindingsCollection> z <xref:System.Windows.Forms.TextBox> kontrolować za pośrednictwem <xref:System.Windows.Forms.Control.DataBindings%2A> Właściwość. `DecimalToCurrencyString` Delegata zdarzenia, dodane do <xref:System.Windows.Forms.Binding.Format> zdarzenia formatuje wartości powiązanej ( <xref:System.Decimal> typu) jako walutę przy użyciu <xref:System.Decimal.ToString%2A> metody. `CurrencyStringToDecimal` Delegata zdarzenia, dodane do <xref:System.Windows.Forms.Binding.Parse> zdarzeń, konwertuje wartości wyświetlanej przez formant do <xref:System.Decimal> typu.  
  
 W tym przykładzie założono obecności <xref:System.Data.DataSet> o nazwie `ds`.  
  
 [!code-cpp[Classic Binding.Format Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Binding.Format Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Binding.Format Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Binding.Format Example/CS/source.cs#1)]
 [!code-vb[Classic Binding.Format Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Binding.Format Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.Binding.Parse" />
        <altmember cref="M:System.Windows.Forms.Binding.OnFormat(System.Windows.Forms.ConvertEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="FormatInfo">
      <MemberSignature Language="C#" Value="public IFormatProvider FormatInfo { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IFormatProvider FormatInfo" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.FormatInfo" />
      <MemberSignature Language="VB.NET" Value="Public Property FormatInfo As IFormatProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IFormatProvider ^ FormatInfo { IFormatProvider ^ get(); void set(IFormatProvider ^ value); };" />
      <MemberSignature Language="F#" Value="member this.FormatInfo : IFormatProvider with get, set" Usage="System.Windows.Forms.Binding.FormatInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IFormatProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia <see cref="T:System.IFormatProvider" /> zapewnia niestandardowe działanie formatowania.</summary>
        <value>
          <see cref="T:System.IFormatProvider" /> Implementację, która zapewnia zachowanie formatowania niestandardowych.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ustawienie tej właściwości spowoduje zastąpienie domyślne zachowanie, który używa formatowanie <xref:System.Windows.Forms.Application.CurrentCulture%2A?displayProperty=nameWithType> ustawienie właściwości.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FormatString">
      <MemberSignature Language="C#" Value="public string FormatString { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FormatString" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.FormatString" />
      <MemberSignature Language="VB.NET" Value="Public Property FormatString As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ FormatString { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.FormatString : string with get, set" Usage="System.Windows.Forms.Binding.FormatString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia format znaki specyfikatora, które wskazują, jak wartość ma być wyświetlany.</summary>
        <value>Ciąg znaki specyfikatora formatu, które wskazują, jak wartość ma być wyświetlany.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ciąg formatu używany należy stosować standardowy specyfikacje formatu .NET Framework. Aby uzyskać więcej informacji, zobacz [typy formatowania w programie .NET Framework](~/docs/standard/base-types/formatting-types.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FormattingEnabled">
      <MemberSignature Language="C#" Value="public bool FormattingEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool FormattingEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.FormattingEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property FormattingEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool FormattingEnabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.FormattingEnabled : bool with get, set" Usage="System.Windows.Forms.Binding.FormattingEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy konwersja typu i formatowanie jest stosowany do kontroli danych właściwości.</summary>
        <value>
          <see langword="true" /> Jeśli konwersja typu i formatowania danych właściwości formantu są włączone; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ustawienie tej właściwości na `true` również umożliwia zachowanie obsługa błędów oraz powoduje, że <xref:System.Windows.Forms.Binding.BindingComplete> się zdarzenia. Program obsługi tego zdarzenia może podejmij odpowiednią akcję, oparte na sukces, błędu lub wyjątki w procesie powiązanie, sprawdzając <xref:System.Windows.Forms.BindingCompleteEventArgs.BindingCompleteState%2A> właściwość <xref:System.Windows.Forms.BindingCompleteEventArgs> parametru.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.Binding.BindingComplete" />
        <altmember cref="T:System.Windows.Forms.BindingCompleteEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="IsBinding">
      <MemberSignature Language="C#" Value="public bool IsBinding { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsBinding" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.IsBinding" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsBinding As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsBinding { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsBinding : bool" Usage="System.Windows.Forms.Binding.IsBinding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy powiązanie jest aktywny.</summary>
        <value>
          <see langword="true" /> Jeśli powiązanie jest aktywna; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Powiązanie jest aktywny, gdy spełnia następujące warunki:  
  
-   Wszystkie właściwości są ustawione.  
  
-   Użytkownik nie wywołał <xref:System.Windows.Forms.BindingManagerBase.ResumeBinding%2A> lub <xref:System.Windows.Forms.BindingManagerBase.SuspendBinding%2A> na <xref:System.Windows.Forms.BindingManagerBase> który <xref:System.Windows.Forms.Binding> należy.  
  
-   Kontrola, do którego <xref:System.Windows.Forms.Binding> należy został utworzony.  
  
   
  
## Examples  
 Poniższy kod przykładowy odbitek <xref:System.Windows.Forms.Binding.PropertyName%2A> i <xref:System.Windows.Forms.Binding.IsBinding%2A> wartość dla każdego <xref:System.Windows.Forms.Binding> w formularzu.  
  
 [!code-cpp[Classic Binding.IsBinding Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Binding.IsBinding Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Binding.IsBinding Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Binding.IsBinding Example/CS/source.cs#1)]
 [!code-vb[Classic Binding.IsBinding Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Binding.IsBinding Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NullValue">
      <MemberSignature Language="C#" Value="public object NullValue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object NullValue" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.NullValue" />
      <MemberSignature Language="VB.NET" Value="Public Property NullValue As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ NullValue { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.NullValue : obj with get, set" Usage="System.Windows.Forms.Binding.NullValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia <see cref="T:System.Object" /> można ustawić jako właściwość formantu, gdy źródło danych zawiera <see cref="T:System.DBNull" /> wartość.</summary>
        <value>
          <see cref="T:System.Object" /> Można ustawić jako właściwość formantu, gdy źródło danych zawiera <see cref="T:System.DBNull" /> wartość. Wartość domyślna to <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Źródło danych musi zawierać <xref:System.DBNull> dla <xref:System.Windows.Forms.Binding.NullValue%2A> właściwości zastosowane poprawnie. Jeśli typ źródła danych jest typu, takiego jak ciąg lub liczba całkowita, wartość <xref:System.Windows.Forms.Binding.NullValue%2A> właściwość zostanie zignorowana. Ponadto <xref:System.Windows.Forms.Binding.NullValue%2A> właściwość jest ignorowana, jeśli jest ustawiona na `null`.  
  
 Wartość null zostanie dodany do źródła danych, gdy właściwość formantu jest ustawiona na obiekt <xref:System.Windows.Forms.Binding.NullValue%2A>. Jeśli <xref:System.Windows.Forms.Binding.NullValue%2A> jest ustawiony na wartość ciągu, bez uwzględniania wielkości liter podczas porównywania.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnBindingComplete">
      <MemberSignature Language="C#" Value="protected virtual void OnBindingComplete (System.Windows.Forms.BindingCompleteEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnBindingComplete(class System.Windows.Forms.BindingCompleteEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Binding.OnBindingComplete(System.Windows.Forms.BindingCompleteEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnBindingComplete (e As BindingCompleteEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnBindingComplete(System::Windows::Forms::BindingCompleteEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnBindingComplete : System.Windows.Forms.BindingCompleteEventArgs -&gt; unit&#xA;override this.OnBindingComplete : System.Windows.Forms.BindingCompleteEventArgs -&gt; unit" Usage="binding.OnBindingComplete e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.BindingCompleteEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.BindingCompleteEventArgs" /> zawierający dane zdarzenia.</param>
        <summary>Zgłasza <see cref="E:System.Windows.Forms.Binding.BindingComplete" /> zdarzeń.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podnoszenie zdarzenia wywołuje program obsługi zdarzeń przez delegata. Aby uzyskać więcej informacji, zobacz [Obsługa i wywoływanie zdarzeń](~/docs/standard/events/index.md).  
  
 <xref:System.Windows.Forms.Binding.OnBindingComplete%2A> Metoda umożliwia również klas pochodnych do obsługi zdarzenia bez dołączanie delegata. Jest to preferowana metoda obsługi zdarzeń w klasie pochodnej.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>W przypadku przesłaniania <see cref="M:System.Windows.Forms.Binding.OnBindingComplete(System.Windows.Forms.BindingCompleteEventArgs)" /> w klasie pochodnej, należy wywołać klasy podstawowej <see cref="M:System.Windows.Forms.Binding.OnBindingComplete(System.Windows.Forms.BindingCompleteEventArgs)" /> metody, które zarejestrowane delegatów odbierać zdarzenia.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnFormat">
      <MemberSignature Language="C#" Value="protected virtual void OnFormat (System.Windows.Forms.ConvertEventArgs cevent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnFormat(class System.Windows.Forms.ConvertEventArgs cevent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Binding.OnFormat(System.Windows.Forms.ConvertEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnFormat (cevent As ConvertEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnFormat(System::Windows::Forms::ConvertEventArgs ^ cevent);" />
      <MemberSignature Language="F#" Value="abstract member OnFormat : System.Windows.Forms.ConvertEventArgs -&gt; unit&#xA;override this.OnFormat : System.Windows.Forms.ConvertEventArgs -&gt; unit" Usage="binding.OnFormat cevent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cevent" Type="System.Windows.Forms.ConvertEventArgs" />
      </Parameters>
      <Docs>
        <param name="cevent">A <see cref="T:System.Windows.Forms.ConvertEventArgs" /> zawierający dane zdarzenia.</param>
        <summary>Zgłasza <see cref="E:System.Windows.Forms.Binding.Format" /> zdarzeń.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podnoszenie zdarzenia wywołuje program obsługi zdarzeń przez delegata. Aby uzyskać więcej informacji, zobacz [Obsługa i wywoływanie zdarzeń](~/docs/standard/events/index.md).  
  
 <xref:System.Windows.Forms.Binding.OnFormat%2A> Metoda umożliwia również klas pochodnych do obsługi zdarzenia bez dołączanie delegata. Jest to preferowana metoda obsługi zdarzeń w klasie pochodnej.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>W przypadku przesłaniania <see cref="M:System.Windows.Forms.Binding.OnFormat(System.Windows.Forms.ConvertEventArgs)" /> w klasie pochodnej, należy wywołać klasy podstawowej <see cref="M:System.Windows.Forms.Binding.OnFormat(System.Windows.Forms.ConvertEventArgs)" /> metody, które zarejestrowane delegatów odbierać zdarzenia.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.Binding.Format" />
        <altmember cref="M:System.Windows.Forms.Binding.OnParse(System.Windows.Forms.ConvertEventArgs)" />
        <altmember cref="E:System.Windows.Forms.Binding.Parse" />
      </Docs>
    </Member>
    <Member MemberName="OnParse">
      <MemberSignature Language="C#" Value="protected virtual void OnParse (System.Windows.Forms.ConvertEventArgs cevent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnParse(class System.Windows.Forms.ConvertEventArgs cevent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Binding.OnParse(System.Windows.Forms.ConvertEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnParse (cevent As ConvertEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnParse(System::Windows::Forms::ConvertEventArgs ^ cevent);" />
      <MemberSignature Language="F#" Value="abstract member OnParse : System.Windows.Forms.ConvertEventArgs -&gt; unit&#xA;override this.OnParse : System.Windows.Forms.ConvertEventArgs -&gt; unit" Usage="binding.OnParse cevent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cevent" Type="System.Windows.Forms.ConvertEventArgs" />
      </Parameters>
      <Docs>
        <param name="cevent">A <see cref="T:System.Windows.Forms.ConvertEventArgs" /> zawierający dane zdarzenia.</param>
        <summary>Zgłasza <see cref="E:System.Windows.Forms.Binding.Parse" /> zdarzeń.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podnoszenie zdarzenia wywołuje program obsługi zdarzeń przez delegata. Aby uzyskać więcej informacji, zobacz [Obsługa i wywoływanie zdarzeń](~/docs/standard/events/index.md).  
  
 <xref:System.Windows.Forms.Binding.OnParse%2A> Metoda umożliwia również klas pochodnych do obsługi zdarzenia bez dołączanie delegata. Jest to preferowana metoda obsługi zdarzeń w klasie pochodnej.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>W przypadku przesłaniania <see cref="M:System.Windows.Forms.Binding.OnParse(System.Windows.Forms.ConvertEventArgs)" /> w klasie pochodnej, należy wywołać klasy podstawowej <see cref="M:System.Windows.Forms.Binding.OnParse(System.Windows.Forms.ConvertEventArgs)" /> metody, które zarejestrowane delegatów odbierać zdarzenia.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.Binding.Format" />
        <altmember cref="M:System.Windows.Forms.Binding.OnFormat(System.Windows.Forms.ConvertEventArgs)" />
        <altmember cref="E:System.Windows.Forms.Binding.Parse" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ConvertEventHandler Parse;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ConvertEventHandler Parse" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Binding.Parse" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Parse As ConvertEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::ConvertEventHandler ^ Parse;" />
      <MemberSignature Language="F#" Value="member this.Parse : System.Windows.Forms.ConvertEventHandler " Usage="member this.Parse : System.Windows.Forms.ConvertEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ConvertEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy zmienia się wartość formantu powiązanego z danymi.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.Binding.Format> i <xref:System.Windows.Forms.Binding.Parse> zdarzenia pozwalają tworzyć niestandardowe formaty do wyświetlania danych. Na przykład, jeśli dane w tabeli typu <xref:System.Decimal>, można wyświetlić dane w formacie waluty lokalnej przez ustawienie <xref:System.Windows.Forms.ConvertEventArgs.Value%2A> właściwość <xref:System.Windows.Forms.ConvertEventArgs> sformatowaną wartość <xref:System.Windows.Forms.Binding.Format> zdarzeń. W związku z tym musi anulowania formatowania wartości wyświetlanej w <xref:System.Windows.Forms.Binding.Parse> zdarzeń.  
  
 <xref:System.Windows.Forms.Binding.Parse> Zdarzenie w następujących warunkach:  
  
-   Po <xref:System.Windows.Forms.Control.Validated> zdarzenie <xref:System.Windows.Forms.Control> występuje.  
  
-   Gdy <xref:System.Windows.Forms.BindingManagerBase.EndCurrentEdit%2A> metoda <xref:System.Windows.Forms.BindingManagerBase> jest wywoływana.  
  
-   Gdy <xref:System.Windows.Forms.BindingManagerBase.Current%2A> z <xref:System.Windows.Forms.BindingManagerBase> zmiany (innymi słowy, gdy <xref:System.Windows.Forms.BindingManagerBase.Position%2A> zmiany).  
  
 Aby uzyskać więcej informacji na temat obsługi zdarzeń, zobacz [Obsługa i wywoływanie zdarzeń](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 Poniższy przykład kodu tworzy <xref:System.Windows.Forms.Binding>, dodaje <xref:System.Windows.Forms.ConvertEventHandler> delegata zarówno <xref:System.Windows.Forms.Binding.Parse> i <xref:System.Windows.Forms.Binding.Format> zdarzenia i dodaje <xref:System.Windows.Forms.Binding> do <xref:System.Windows.Forms.BindingsCollection> z <xref:System.Windows.Forms.TextBox> kontrolować za pośrednictwem <xref:System.Windows.Forms.Control.DataBindings%2A> Właściwość. `DecimalToCurrencyString` Delegata zdarzenia, dodane do <xref:System.Windows.Forms.Binding.Format> zdarzenia formatuje wartości powiązanej ( <xref:System.Decimal> typu) jako walutę przy użyciu <xref:System.Decimal.ToString%2A> metody. `CurrencyStringToDecimal` Delegata zdarzenia, dodane do <xref:System.Windows.Forms.Binding.Parse> zdarzeń, konwertuje wartości wyświetlanej przez formant do <xref:System.Decimal> typu.  
  
 [!code-cpp[Classic Binding.Parse Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Binding.Parse Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Binding.Parse Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Binding.Parse Example/CS/source.cs#1)]
 [!code-vb[Classic Binding.Parse Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Binding.Parse Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.Binding.Format" />
        <altmember cref="M:System.Windows.Forms.Binding.OnParse(System.Windows.Forms.ConvertEventArgs)" />
        <altmember cref="E:System.Windows.Forms.BindingManagerBase.PositionChanged" />
        <altmember cref="E:System.Windows.Forms.BindingManagerBase.CurrentChanged" />
      </Docs>
    </Member>
    <Member MemberName="PropertyName">
      <MemberSignature Language="C#" Value="public string PropertyName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PropertyName" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.PropertyName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PropertyName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ PropertyName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PropertyName : string" Usage="System.Windows.Forms.Binding.PropertyName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia nazwę właściwości formantu powiązanego z danymi.</summary>
        <value>Nazwa właściwości formantu, aby powiązać.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Windows.Forms.Binding.PropertyName%2A> do określania właściwości formantu, który chcesz powiązać z listy w źródle danych. Najczęściej powiązać właściwości wyświetlanej takie jak <xref:System.Windows.Forms.Control.Text%2A> właściwość <xref:System.Windows.Forms.TextBox> formantu. Jednak ponieważ można powiązać żadnych właściwości formantu, można programowo utworzyć formantów przy użyciu danych z bazy danych.  
  
   
  
## Examples  
 Poniższy kod przykładowy odbitek <xref:System.Windows.Forms.Binding.PropertyName%2A> wartość każdego <xref:System.Windows.Forms.Binding> dla każdego formantu w formularzu.  
  
 [!code-cpp[Classic Binding.PropertyName Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Binding.PropertyName Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Binding.PropertyName Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Binding.PropertyName Example/CS/source.cs#1)]
 [!code-vb[Classic Binding.PropertyName Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Binding.PropertyName Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadValue">
      <MemberSignature Language="C#" Value="public void ReadValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReadValue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Binding.ReadValue" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReadValue ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReadValue();" />
      <MemberSignature Language="F#" Value="member this.ReadValue : unit -&gt; unit" Usage="binding.ReadValue " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ustawia właściwość formantu wartości ze źródła danych do odczytu.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteValue">
      <MemberSignature Language="C#" Value="public void WriteValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteValue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Binding.WriteValue" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteValue ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteValue();" />
      <MemberSignature Language="F#" Value="member this.WriteValue : unit -&gt; unit" Usage="binding.WriteValue " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Odczytuje bieżącej wartości z właściwości formantu i zapisuje je w źródle danych.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>