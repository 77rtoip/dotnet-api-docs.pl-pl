<Type Name="Binding" FullName="System.Windows.Forms.Binding">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="cb47e5842602939bd92676cca228598025c82169" />
    <Meta Name="ms.sourcegitcommit" Value="102d07546033d7818b72aa66d7a26c70235baedd" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="07/23/2018" />
    <Meta Name="ms.locfileid" Value="39202235" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class Binding" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Binding extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.Binding" />
  <TypeSignature Language="VB.NET" Value="Public Class Binding" />
  <TypeSignature Language="C++ CLI" Value="public ref class Binding" />
  <TypeSignature Language="F#" Value="type Binding = class" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Forms.ListBindingConverter))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Reprezentuje proste powiązanie między wartością właściwości obiektu i wartości właściwości formantu.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Windows.Forms.Binding> klasy, aby tworzyć i obsługiwać proste powiązanie między właściwość kontrolki i właściwości obiektu lub właściwości bieżącego obiektu w postaci listy obiektów.  
  
 Jako przykład pierwszym przypadku można powiązać <xref:System.Windows.Forms.Control.Text%2A> właściwość <xref:System.Windows.Forms.TextBox> kontrolę `FirstName` właściwość `Customer` obiektu. Jako przykład drugim przypadku można powiązać <xref:System.Windows.Forms.Control.Text%2A> właściwość <xref:System.Windows.Forms.TextBox> kontrolę `FirstName` właściwość <xref:System.Data.DataTable> zawierający klientów.  
  
 <xref:System.Windows.Forms.Binding> Klasy umożliwia także formatowanie wartości do wyświetlenia za pośrednictwem <xref:System.Windows.Forms.Binding.Format> zdarzeń i pobierać wartości sformatowane przy użyciu <xref:System.Windows.Forms.Binding.Parse> zdarzeń.  
  
 Podczas tworzenia <xref:System.Windows.Forms.Binding> wystąpienia z <xref:System.Windows.Forms.Binding.%23ctor%2A> konstruktora, należy określić trzy elementy:  
  
-   Nazwa właściwości kontrolki, które można powiązać.  
  
-   Źródło danych.  
  
-   Ścieżka nawigacji, który jest rozpoznawany jako lista lub właściwości w źródle danych. Ścieżka nawigacji jest również używana do tworzenia obiektu <xref:System.Windows.Forms.Binding.BindingMemberInfo%2A> właściwości.  
  
 Najpierw należy określić nazwę właściwości kontrolki, którą chcesz powiązać dane. Na przykład, aby wyświetlić dane w <xref:System.Windows.Forms.TextBox> sterowania, określ <xref:System.Windows.Forms.TextBoxBase.Text%2A> właściwości.  
  
 Po drugie można określić wystąpienie jednego z klas w poniższej tabeli jako źródła danych.  
  
|Opis|Przykład w języku C#|  
|-----------------|-----------------|  
|Każda klasa implementująca <xref:System.ComponentModel.IBindingList> lub <xref:System.ComponentModel.ITypedList>. Te obejmują następujące elementy: <xref:System.Data.DataSet>, <xref:System.Data.DataTable>, <xref:System.Data.DataView>, lub <xref:System.Data.DataViewManager>.|`DataSet ds = new DataSet("myDataSet");`|  
|Każda klasa implementująca <xref:System.Collections.IList> utworzyć indeksowanej kolekcji obiektów. Kolekcja muszą być tworzone i wypełniane przed utworzeniem <xref:System.Windows.Forms.Binding>. Obiekty na liście muszą być tego samego typu; w przeciwnym razie zostanie zgłoszony wyjątek.|`ArrayList ar1 = new ArrayList;  Customer1 cust1 = new Customer("Louis");  ar1.Add(cust1);`|  
|Silnie typizowane <xref:System.Collections.IList> silnie typizowanych obiektów|`Customer [] custList = new Customer[3];`|  
  
 Po trzecie, należy określić ścieżkę nawigacji, który może być pustym ciągiem (""), nazwę pojedynczej właściwości lub rozdzielaną kropkami hierarchię nazw. Jeśli ścieżki nawigacji jest ustawiony na pusty ciąg, <xref:System.Object.ToString%2A> metoda będzie wywoływana dla obiektu bazowego źródła danych.  
  
 Jeśli źródło danych jest <xref:System.Data.DataTable>, która może zawierać wiele <xref:System.Data.DataColumn> obiektów, należy użyć ścieżki nawigacji do rozpoznawania określonej kolumny.  
  
> [!NOTE]
>  Jeśli źródło danych jest <xref:System.Data.DataSet>, <xref:System.Data.DataViewManager>, lub <xref:System.Data.DataTable>, są faktycznie powiązywanie <xref:System.Data.DataView>. W związku z tym, powiązane wiersze są faktycznie <xref:System.Data.DataRowView> obiektów.  
  
 Wymagana jest ścieżka nawigacji rozdzielanego kropką, gdy źródło danych jest ustawiona na obiekt, który zawiera wiele <xref:System.Data.DataTable> obiektów (takich jak <xref:System.Data.DataSet> lub <xref:System.Data.DataViewManager>). Umożliwia także automatycznie ścieżkę nawigacji rozdzielanego kropką wiążąc się obiekt, którego właściwości zwracają odwołania do innych obiektów (takich jak klasa z właściwościami, które zwracają innych obiektów klasy). Na przykład następujące ścieżki nawigacji wszystkich opisano pola prawidłowych danych:  
  
-   "Size.Height"  
  
-   "Suppliers.CompanyName"  
  
-   "Regions.regionsToCustomers.CustomerFirstName"  
  
-   "Regions.regionsToCustomers.customersToOrders.ordersToDetails.Quantity"  
  
 Każdy element członkowski ścieżka może zwracać właściwość, która jest rozpoznawana jako pojedynczą wartość (na przykład liczba całkowita) lub listę wartości (takie jak tablica ciągów). Mimo że każdy element członkowski w ścieżce może być lista lub właściwości, ostatniego elementu członkowskiego musi zostać rozpoznany właściwości. Każdy element członkowski opiera się na poprzedni element członkowski: "Size.Height" jest rozpoznawana jako <xref:System.Drawing.Size.Height%2A> właściwości dla bieżącego <xref:System.Drawing.Size>; "Regions.regionsToCustomers.CustomerFirstName" jest rozpoznawany jako imię dla bieżącego odbiorcy, gdy klient jest jednym z klientów do bieżącego regionu.  
  
 A <xref:System.Data.DataRelation> zwraca listę wartości, łącząc jeden <xref:System.Data.DataTable> do drugiej <xref:System.Data.DataTable> w <xref:System.Data.DataSet>. Jeśli <xref:System.Data.DataSet> zawiera <xref:System.Data.DataRelation> obiektów, można określić jako element członkowski danych <xref:System.Data.DataTable.TableName%2A> następuje <xref:System.Data.DataRelation.RelationName%2A>, a następnie <xref:System.Data.DataColumn.ColumnName%2A>. Na przykład jeśli <xref:System.Data.DataTable> o nazwie "Dostawcy" zawiera <xref:System.Data.DataRelation> o nazwie "suppliers2products", element członkowski danych może być "Suppliers.suppliers2products.ProductName".  
  
 Źródło danych może zawierać zestaw powiązanych klas. Załóżmy na przykład zestaw klas, które tworzą katalog systemy słoneczne. Klasa o nazwie `System` zawiera właściwość o nazwie `Stars` , zwraca kolekcję `Star` obiektów. Każdy `Star` obiekt ma `Name` i `Mass` właściwości, a także `Planets` właściwość, która zwraca kolekcję obiektów `Planet` obiektów. W tym systemie ma również każdej globalnej `Mass` i `Name` właściwości. Każdy `Planet` dalsze obiekt ma `Moons` właściwość, która zwraca kolekcję `Moon` obiektów, z których każdy ma również `Name` i `Mass` właściwości. Jeśli określisz `System` obiektu jako źródło danych, można określić dowolną z następujących czynności, jako element członkowski danych:  
  
-   "Stars.Name"  
  
-   "Stars.Mass"  
  
-   "Stars.Planets.Name"  
  
-   "Stars.Planets.Mass"  
  
-   "Stars.Planets.Moons.Name"  
  
-   "Stars.Planets.Moons.Mass"  
  
 Formanty, które mogą być powiązane z prostej funkcji zbiór <xref:System.Windows.Forms.Binding> obiekty w <xref:System.Windows.Forms.ControlBindingsCollection>, który jest dostępny za pomocą formantu <xref:System.Windows.Forms.Control.DataBindings%2A> właściwości. Możesz dodać <xref:System.Windows.Forms.Binding> do kolekcji, wywołując <xref:System.Windows.Forms.ControlBindingsCollection.Add%2A> metody, w tym samym powiązania z właściwością kontrolki właściwości obiektu (lub do właściwości bieżącego obiektu na liście).  
  
 Użytkownik może prosty wiązania do dowolnego obiektu, który pochodzi od klasy <xref:System.Windows.Forms.Control?displayProperty=nameWithType> klasy, na przykład, następujące elementy sterujące Windows:  
  
-   <xref:System.Windows.Forms.Button>  
  
-   <xref:System.Windows.Forms.CheckBox>  
  
-   <xref:System.Windows.Forms.CheckedListBox>  
  
-   <xref:System.Windows.Forms.ComboBox>  
  
-   <xref:System.Windows.Forms.DateTimePicker>  
  
-   <xref:System.Windows.Forms.DomainUpDown>  
  
-   <xref:System.Windows.Forms.GroupBox>  
  
-   <xref:System.Windows.Forms.HScrollBar>  
  
-   <xref:System.Windows.Forms.Label>  
  
-   <xref:System.Windows.Forms.LinkLabel>  
  
-   <xref:System.Windows.Forms.ListBox>  
  
-   <xref:System.Windows.Forms.ListView>  
  
-   <xref:System.Windows.Forms.MonthCalendar>  
  
-   <xref:System.Windows.Forms.NumericUpDown>  
  
-   <xref:System.Windows.Forms.PictureBox>  
  
-   <xref:System.Windows.Forms.ProgressBar>  
  
-   <xref:System.Windows.Forms.RadioButton>  
  
-   <xref:System.Windows.Forms.RichTextBox>  
  
-   <xref:System.Windows.Forms.ScrollBar>  
  
-   <xref:System.Windows.Forms.StatusBar>  
  
-   <xref:System.Windows.Forms.TextBox>  
  
-   <xref:System.Windows.Forms.TreeView>  
  
-   <xref:System.Windows.Forms.VScrollBar>  
  
> [!NOTE]
>  Tylko <xref:System.Windows.Forms.ListControl.SelectedValue%2A> właściwość <xref:System.Windows.Forms.ComboBox>, <xref:System.Windows.Forms.CheckedListBox>, i <xref:System.Windows.Forms.ListBox> formant jest powiązany z prostego.  
  
 <xref:System.Windows.Forms.BindingManagerBase> Klasa jest klasą abstrakcyjną, która zarządza wszystkimi <xref:System.Windows.Forms.Binding> obiektów dla określonego źródła danych i element członkowski danych. Klasy, które wynikają z <xref:System.Windows.Forms.BindingManagerBase> są <xref:System.Windows.Forms.CurrencyManager> i <xref:System.Windows.Forms.PropertyManager> klasy. Jak <xref:System.Windows.Forms.Binding> odbywa się zależy od tego, czy <xref:System.Windows.Forms.Binding> powiązania listy lub powiązania właściwości. Na przykład, jeśli jest to powiązanie listy, można użyć <xref:System.Windows.Forms.BindingManagerBase> do określenia <xref:System.Windows.Forms.BindingManagerBase.Position%2A> na liście <xref:System.Windows.Forms.BindingManagerBase.Position%2A>, w związku z tym, określa, który element (poza wszystkie elementy na liście) faktycznie jest powiązany z kontrolką. Aby powrócić do odpowiedniego <xref:System.Windows.Forms.BindingManagerBase>, użyj <xref:System.Windows.Forms.BindingContext>.  
  
 Aby dodać nowy wiersz do zestawu formantów związanych z takie same <xref:System.Windows.Forms.Binding.DataSource%2A>, użyj <xref:System.Windows.Forms.BindingManagerBase.AddNew%2A> metody <xref:System.Windows.Forms.BindingManagerBase> klasy. Użyj <xref:System.Windows.Forms.BindingContext.Item%2A> właściwość <xref:System.Windows.Forms.BindingContext> klasy w celu zwracania odpowiednie <xref:System.Windows.Forms.CurrencyManager>. Aby wyjść dodanie nowego wiersza, należy użyć <xref:System.Windows.Forms.CurrencyManager.CancelCurrentEdit%2A> metody.  
  
   
  
## Examples  
 Poniższy przykład kodu tworzy formularz Windows za pomocą kilku formantów, które pokazują proste powiązanie danych. W przykładzie jest tworzony <xref:System.Data.DataSet> za pomocą dwóch tabel o nazwach `Customers` i `Orders`, a <xref:System.Data.DataRelation> o nazwie `custToOrders`. Cztery formanty ( <xref:System.Windows.Forms.DateTimePicker> i trzema <xref:System.Windows.Forms.TextBox> formantów) kolumn w tabelach są powiązane dane. Dla każdego formantu w przykładzie utworzono i dodaje <xref:System.Windows.Forms.Binding> do formantu za pomocą <xref:System.Windows.Forms.Control.DataBindings%2A> właściwości. W przykładzie zwracany jest <xref:System.Windows.Forms.BindingManagerBase> dla każdej tabeli za pomocą formularza <xref:System.Windows.Forms.BindingContext>. Cztery <xref:System.Windows.Forms.Button> kontroluje inkrementacyjna lub dekrementacyjna <xref:System.Windows.Forms.BindingManagerBase.Position%2A> właściwość <xref:System.Windows.Forms.BindingManagerBase> obiektów.  
  
 [!code-cpp[Classic Binding Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Binding Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Binding Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Binding Example/CS/source.cs#1)]
 [!code-vb[Classic Binding Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Binding Example/VB/source.vb#1)]  
 
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.BindingContext" />
    <altmember cref="T:System.Windows.Forms.BindingManagerBase" />
    <altmember cref="T:System.Windows.Forms.ComboBox" />
    <altmember cref="T:System.Windows.Forms.DataGrid" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Forms.Binding" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Binding (string propertyName, object dataSource, string dataMember);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string propertyName, object dataSource, string dataMember) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Binding.#ctor(System.String,System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (propertyName As String, dataSource As Object, dataMember As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Binding(System::String ^ propertyName, System::Object ^ dataSource, System::String ^ dataMember);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.Binding : string * obj * string -&gt; System.Windows.Forms.Binding" Usage="new System.Windows.Forms.Binding (propertyName, dataSource, dataMember)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="dataSource" Type="System.Object" />
        <Parameter Name="dataMember" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName">Nazwa właściwości kontrolki powiązania.</param>
        <param name="dataSource">
          <see cref="T:System.Object" /> Reprezentujący źródło danych.</param>
        <param name="dataMember">Właściwości lub listy można powiązać.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Forms.Binding" /> klasę, która prostego powiązania właściwości kontrolki wskazany element członkowski danych określonego źródła danych.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można określić wystąpienia któregokolwiek z następujących klas dla źródła danych:  
  
-   <xref:System.Data.DataSet>  
  
-   <xref:System.Data.DataTable>  
  
-   <xref:System.Data.DataView>  
  
-   <xref:System.Data.DataViewManager>  
  
-   <xref:System.Windows.Forms.BindingSource>  
  
-   Każda klasa implementująca <xref:System.Collections.IList> interfejsu  
  
-   Każda klasa  
  
 Zobacz <xref:System.Windows.Forms.Binding> klasy, aby uzyskać więcej informacji o tworzeniu `dataMember` ciągu.  
  
 Podczas tworzenia wiązania do właściwości kontrolki nowy <xref:System.Windows.Forms.Binding> sprawdza zdarzenia udostępnianych przez formant związany i dołącza do dwóch określonych zdarzeń:  
  
-   <xref:System.Windows.Forms.Control.Validating?displayProperty=nameWithType>  
  
-   Zdarzenie o nazwie *PropertyName* `Changed` (na przykład <xref:System.Windows.Forms.Control.BackColorChanged?displayProperty=nameWithType>)  
  
 Jeśli użytkownik podejmie próbę powiązania z właściwością, która nie istnieje, <xref:System.ArgumentException> zostanie zgłoszony, gdy <xref:System.Windows.Forms.Binding> jest dodawany do formantu <xref:System.Windows.Forms.Control.DataBindings%2A?displayProperty=nameWithType> kolekcji.  
  
   
  
## Examples  
 Poniższy kod przykładowy tworzy powiązania <xref:System.Windows.Forms.TextBox> formantu do kolumny tabeli w <xref:System.Data.DataSet> o nazwie `myDataSet`. Przykład wymaga, że zostały zadeklarowane `myDataSet` w sekcji deklaracji modułu.  
  
 [!code-cpp[Classic Binding.Binding Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Binding.Binding Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Binding.Binding Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Binding.Binding Example/CS/source.cs#1)]
 [!code-vb[Classic Binding.Binding Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Binding.Binding Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">
          <paramref name="propertyName" /> jest prawidłową właściwością formantu ani pustym ciągiem ("").</exception>
        <exception cref="T:System.ArgumentException">Właściwości określone przez <paramref name="propertyName" /> na formant nie istnieje.</exception>
        <altmember cref="T:System.Windows.Forms.BindingsCollection" />
        <altmember cref="T:System.Windows.Forms.CurrencyManager" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Binding (string propertyName, object dataSource, string dataMember, bool formattingEnabled);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string propertyName, object dataSource, string dataMember, bool formattingEnabled) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Binding.#ctor(System.String,System.Object,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (propertyName As String, dataSource As Object, dataMember As String, formattingEnabled As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Binding(System::String ^ propertyName, System::Object ^ dataSource, System::String ^ dataMember, bool formattingEnabled);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.Binding : string * obj * string * bool -&gt; System.Windows.Forms.Binding" Usage="new System.Windows.Forms.Binding (propertyName, dataSource, dataMember, formattingEnabled)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="dataSource" Type="System.Object" />
        <Parameter Name="dataMember" Type="System.String" />
        <Parameter Name="formattingEnabled" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="propertyName">Nazwa właściwości kontrolki powiązania.</param>
        <param name="dataSource">
          <see cref="T:System.Object" /> Reprezentujący źródło danych.</param>
        <param name="dataMember">Właściwości lub listy można powiązać.</param>
        <param name="formattingEnabled">
          <see langword="true" /> na formatowanie wyświetlanych danych; w przeciwnym razie <see langword="false" />.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Forms.Binding" /> klasę, która wiąże właściwości kontrolki wskazany element członkowski danych określonego źródła danych i opcjonalnie umożliwia formatowanie mają być stosowane.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Właściwości określone przez <paramref name="propertyName" /> na formant nie istnieje.  - lub - właściwości, biorąc pod uwagę jest właściwością tylko do odczytu.</exception>
        <exception cref="T:System.Exception">Formatowanie jest wyłączona i <paramref name="propertyName" /> jest prawidłową właściwością formantu ani pustym ciągiem ("").</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Binding (string propertyName, object dataSource, string dataMember, bool formattingEnabled, System.Windows.Forms.DataSourceUpdateMode dataSourceUpdateMode);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string propertyName, object dataSource, string dataMember, bool formattingEnabled, valuetype System.Windows.Forms.DataSourceUpdateMode dataSourceUpdateMode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Binding.#ctor(System.String,System.Object,System.String,System.Boolean,System.Windows.Forms.DataSourceUpdateMode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Binding(System::String ^ propertyName, System::Object ^ dataSource, System::String ^ dataMember, bool formattingEnabled, System::Windows::Forms::DataSourceUpdateMode dataSourceUpdateMode);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.Binding : string * obj * string * bool * System.Windows.Forms.DataSourceUpdateMode -&gt; System.Windows.Forms.Binding" Usage="new System.Windows.Forms.Binding (propertyName, dataSource, dataMember, formattingEnabled, dataSourceUpdateMode)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="dataSource" Type="System.Object" />
        <Parameter Name="dataMember" Type="System.String" />
        <Parameter Name="formattingEnabled" Type="System.Boolean" />
        <Parameter Name="dataSourceUpdateMode" Type="System.Windows.Forms.DataSourceUpdateMode" />
      </Parameters>
      <Docs>
        <param name="propertyName">Nazwa właściwości kontrolki powiązania.</param>
        <param name="dataSource">
          <see cref="T:System.Object" /> Reprezentujące źródło danych.</param>
        <param name="dataMember">Właściwości lub listy można powiązać.</param>
        <param name="formattingEnabled">
          <see langword="true" /> na formatowanie wyświetlanych danych; w przeciwnym razie <see langword="false" />.</param>
        <param name="dataSourceUpdateMode">Jedną z <see cref="T:System.Windows.Forms.DataSourceUpdateMode" /> wartości.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Forms.Binding" /> klasę, która wiąże właściwości określonej kontrolki do elementu członkowskiego określone dane z określonego źródła danych. Opcjonalnie włącza, formatowania i propaguje wartości do źródła danych na podstawie ustawienia określona aktualizacja.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można określić wystąpienia któregokolwiek z następujących klas dla źródła danych:  
  
-   <xref:System.Data.DataSet>  
  
-   <xref:System.Data.DataTable>  
  
-   <xref:System.Data.DataView>  
  
-   <xref:System.Data.DataViewManager>  
  
-   <xref:System.Windows.Forms.BindingSource>  
  
-   Każda klasa implementująca <xref:System.Collections.IList> interfejsu  
  
-   Każda klasa  
  
 Zobacz <xref:System.Windows.Forms.Binding> klasy, aby uzyskać więcej informacji o tworzeniu `dataMember` ciągu.  
  
 Podczas tworzenia wiązania do właściwości kontrolki nowy <xref:System.Windows.Forms.Binding> sprawdza zdarzenia udostępnianych przez formant związany i dołącza do dwóch określonych zdarzeń:  
  
-   <xref:System.Windows.Forms.Control.Validating?displayProperty=nameWithType>.  
  
-   Zdarzenie o nazwie *PropertyName* `Changed` (na przykład <xref:System.Windows.Forms.Control.BackColorChanged?displayProperty=nameWithType>)  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Właściwości określone przez <paramref name="propertyName" /> na formant nie istnieje.  - lub - źródłowy lub dane elementu członkowskiego lub kontroli właściwości danych określoną są skojarzone z innym wiązaniu w kolekcji.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Binding (string propertyName, object dataSource, string dataMember, bool formattingEnabled, System.Windows.Forms.DataSourceUpdateMode dataSourceUpdateMode, object nullValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string propertyName, object dataSource, string dataMember, bool formattingEnabled, valuetype System.Windows.Forms.DataSourceUpdateMode dataSourceUpdateMode, object nullValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Binding.#ctor(System.String,System.Object,System.String,System.Boolean,System.Windows.Forms.DataSourceUpdateMode,System.Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Binding(System::String ^ propertyName, System::Object ^ dataSource, System::String ^ dataMember, bool formattingEnabled, System::Windows::Forms::DataSourceUpdateMode dataSourceUpdateMode, System::Object ^ nullValue);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.Binding : string * obj * string * bool * System.Windows.Forms.DataSourceUpdateMode * obj -&gt; System.Windows.Forms.Binding" Usage="new System.Windows.Forms.Binding (propertyName, dataSource, dataMember, formattingEnabled, dataSourceUpdateMode, nullValue)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="dataSource" Type="System.Object" />
        <Parameter Name="dataMember" Type="System.String" />
        <Parameter Name="formattingEnabled" Type="System.Boolean" />
        <Parameter Name="dataSourceUpdateMode" Type="System.Windows.Forms.DataSourceUpdateMode" />
        <Parameter Name="nullValue" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="propertyName">Nazwa właściwości kontrolki powiązania.</param>
        <param name="dataSource">
          <see cref="T:System.Object" /> Reprezentujące źródło danych.</param>
        <param name="dataMember">Właściwości lub listy można powiązać.</param>
        <param name="formattingEnabled">
          <see langword="true" /> na formatowanie wyświetlanych danych; w przeciwnym razie <see langword="false" />.</param>
        <param name="dataSourceUpdateMode">Jedną z <see cref="T:System.Windows.Forms.DataSourceUpdateMode" /> wartości.</param>
        <param name="nullValue">
          <see cref="T:System.Object" /> Mają być stosowane do właściwości powiązanej kontrolki, gdy wartość źródła danych jest <see cref="T:System.DBNull" />.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Forms.Binding" /> klasę, która wiąże właściwości wskazany kontrolki do elementu członkowskiego określone dane z określonego źródła danych. Opcjonalnie umożliwia formatowanie propaguje wartości do źródła danych na podstawie ustawienia określona aktualizacja i ustawia właściwość określonej wartości, gdy <see cref="T:System.DBNull" /> jest zwracany ze źródła danych.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można określić wystąpienia któregokolwiek z następujących klas dla źródła danych:  
  
-   <xref:System.Data.DataSet>  
  
-   <xref:System.Data.DataTable>  
  
-   <xref:System.Data.DataView>  
  
-   <xref:System.Data.DataViewManager>  
  
-   <xref:System.Windows.Forms.BindingSource>  
  
-   Każda klasa implementująca <xref:System.Collections.IList> interfejsu  
  
-   Każda klasa  
  
 Zobacz <xref:System.Windows.Forms.Binding> klasy, aby uzyskać więcej informacji o tworzeniu `dataMember` ciągu.  
  
 Podczas tworzenia wiązania do właściwości kontrolki nowy <xref:System.Windows.Forms.Binding> sprawdza zdarzenia udostępnianych przez formant związany i dołącza do dwóch określonych zdarzeń:  
  
-   <xref:System.Windows.Forms.Control.Validating?displayProperty=nameWithType>  
  
-   Zdarzenie o nazwie *PropertyName* `Changed` (na przykład <xref:System.Windows.Forms.Control.BackColorChanged?displayProperty=nameWithType>)  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Właściwości określone przez <paramref name="propertyName" /> na formant nie istnieje.  - lub - źródłowy lub dane elementu członkowskiego lub kontroli właściwości danych określoną są skojarzone z innym wiązaniu w kolekcji.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Binding (string propertyName, object dataSource, string dataMember, bool formattingEnabled, System.Windows.Forms.DataSourceUpdateMode dataSourceUpdateMode, object nullValue, string formatString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string propertyName, object dataSource, string dataMember, bool formattingEnabled, valuetype System.Windows.Forms.DataSourceUpdateMode dataSourceUpdateMode, object nullValue, string formatString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Binding.#ctor(System.String,System.Object,System.String,System.Boolean,System.Windows.Forms.DataSourceUpdateMode,System.Object,System.String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Binding(System::String ^ propertyName, System::Object ^ dataSource, System::String ^ dataMember, bool formattingEnabled, System::Windows::Forms::DataSourceUpdateMode dataSourceUpdateMode, System::Object ^ nullValue, System::String ^ formatString);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.Binding : string * obj * string * bool * System.Windows.Forms.DataSourceUpdateMode * obj * string -&gt; System.Windows.Forms.Binding" Usage="new System.Windows.Forms.Binding (propertyName, dataSource, dataMember, formattingEnabled, dataSourceUpdateMode, nullValue, formatString)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="dataSource" Type="System.Object" />
        <Parameter Name="dataMember" Type="System.String" />
        <Parameter Name="formattingEnabled" Type="System.Boolean" />
        <Parameter Name="dataSourceUpdateMode" Type="System.Windows.Forms.DataSourceUpdateMode" />
        <Parameter Name="nullValue" Type="System.Object" />
        <Parameter Name="formatString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="propertyName">Nazwa właściwości kontrolki powiązania.</param>
        <param name="dataSource">
          <see cref="T:System.Object" /> Reprezentujące źródło danych.</param>
        <param name="dataMember">Właściwości lub listy można powiązać.</param>
        <param name="formattingEnabled">
          <see langword="true" /> na formatowanie wyświetlanych danych; w przeciwnym razie <see langword="false" />.</param>
        <param name="dataSourceUpdateMode">Jedną z <see cref="T:System.Windows.Forms.DataSourceUpdateMode" /> wartości.</param>
        <param name="nullValue">
          <see cref="T:System.Object" /> Mają być stosowane do właściwości powiązanej kontrolki, gdy wartość źródła danych jest <see cref="T:System.DBNull" />.</param>
        <param name="formatString">Co najmniej jeden format specyfikator znaki, które wskazują, jak wartość ma być wyświetlana.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Forms.Binding" /> klasę, która wiąże właściwości określonej kontrolki do elementu członkowskiego określone dane z określonego źródła danych. Opcjonalnie włącza odpowiadający ustawieniom lokalnym z określonego ciągu formatu; propaguje wartości do źródła danych na podstawie ustawienia określona aktualizacja; i ustawia właściwość określonej wartości, gdy <see cref="T:System.DBNull" /> jest zwracany ze źródła danych.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można określić wystąpienia któregokolwiek z następujących klas dla źródła danych:  
  
-   <xref:System.Data.DataSet>  
  
-   <xref:System.Data.DataTable>  
  
-   <xref:System.Data.DataView>  
  
-   <xref:System.Data.DataViewManager>  
  
-   <xref:System.Windows.Forms.BindingSource>  
  
-   Każda klasa implementująca <xref:System.Collections.IList> interfejsu  
  
-   Każda klasa  
  
 Zobacz <xref:System.Windows.Forms.Binding> klasy, aby uzyskać więcej informacji o tworzeniu `dataMember` ciągu.  
  
 Podczas tworzenia wiązania do właściwości kontrolki nowy <xref:System.Windows.Forms.Binding> sprawdza zdarzenia udostępnianych przez formant związany i dołącza do dwóch określonych zdarzeń:  
  
-   <xref:System.Windows.Forms.Control.Validating?displayProperty=nameWithType>  
  
-   Zdarzenie o nazwie *PropertyName* `Changed` (na przykład <xref:System.Windows.Forms.Control.BackColorChanged?displayProperty=nameWithType>)  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Właściwości określone przez <paramref name="propertyName" /> na formant nie istnieje.  - lub - źródłowy lub dane elementu członkowskiego lub kontroli właściwości danych określoną są skojarzone z innym wiązaniu w kolekcji.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Binding (string propertyName, object dataSource, string dataMember, bool formattingEnabled, System.Windows.Forms.DataSourceUpdateMode dataSourceUpdateMode, object nullValue, string formatString, IFormatProvider formatInfo);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string propertyName, object dataSource, string dataMember, bool formattingEnabled, valuetype System.Windows.Forms.DataSourceUpdateMode dataSourceUpdateMode, object nullValue, string formatString, class System.IFormatProvider formatInfo) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Binding.#ctor(System.String,System.Object,System.String,System.Boolean,System.Windows.Forms.DataSourceUpdateMode,System.Object,System.String,System.IFormatProvider)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Binding(System::String ^ propertyName, System::Object ^ dataSource, System::String ^ dataMember, bool formattingEnabled, System::Windows::Forms::DataSourceUpdateMode dataSourceUpdateMode, System::Object ^ nullValue, System::String ^ formatString, IFormatProvider ^ formatInfo);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.Binding : string * obj * string * bool * System.Windows.Forms.DataSourceUpdateMode * obj * string * IFormatProvider -&gt; System.Windows.Forms.Binding" Usage="new System.Windows.Forms.Binding (propertyName, dataSource, dataMember, formattingEnabled, dataSourceUpdateMode, nullValue, formatString, formatInfo)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="propertyName" Type="System.String" />
        <Parameter Name="dataSource" Type="System.Object" />
        <Parameter Name="dataMember" Type="System.String" />
        <Parameter Name="formattingEnabled" Type="System.Boolean" />
        <Parameter Name="dataSourceUpdateMode" Type="System.Windows.Forms.DataSourceUpdateMode" />
        <Parameter Name="nullValue" Type="System.Object" />
        <Parameter Name="formatString" Type="System.String" />
        <Parameter Name="formatInfo" Type="System.IFormatProvider" />
      </Parameters>
      <Docs>
        <param name="propertyName">Nazwa właściwości kontrolki powiązania.</param>
        <param name="dataSource">
          <see cref="T:System.Object" /> Reprezentujące źródło danych.</param>
        <param name="dataMember">Właściwości lub listy można powiązać.</param>
        <param name="formattingEnabled">
          <see langword="true" /> na formatowanie wyświetlanych danych; w przeciwnym razie <see langword="false" />.</param>
        <param name="dataSourceUpdateMode">Jedną z <see cref="T:System.Windows.Forms.DataSourceUpdateMode" /> wartości.</param>
        <param name="nullValue">
          <see cref="T:System.Object" /> Mają być stosowane do właściwości powiązanej kontrolki, gdy wartość źródła danych jest <see cref="T:System.DBNull" />.</param>
        <param name="formatString">Co najmniej jeden format specyfikator znaki, które wskazują, jak wartość ma być wyświetlana.</param>
        <param name="formatInfo">Implementacja <see cref="T:System.IFormatProvider" /> Aby zastąpić domyślne zachowanie formatowanie.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Forms.Binding" /> klasy za pomocą właściwości kontrolki określonego elementu członkowskiego określone dane z określonego źródła danych. Opcjonalnie włącza odpowiadający ustawieniom lokalnym z określonego ciągu formatu; propaguje wartości do źródła danych na podstawie ustawienia określona aktualizacja; Umożliwia formatowanie przy użyciu określonego ciągu formatu; Ustawia właściwość określonej wartości, gdy <see cref="T:System.DBNull" /> są zwracane z tego źródła danych; i Ustawia dostawcę w określonym formacie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można określić wystąpienia któregokolwiek z następujących klas dla źródła danych:  
  
-   <xref:System.Data.DataSet>  
  
-   <xref:System.Data.DataTable>  
  
-   <xref:System.Data.DataView>  
  
-   <xref:System.Data.DataViewManager>  
  
-   <xref:System.Windows.Forms.BindingSource>  
  
-   Każda klasa implementująca <xref:System.Collections.IList> interfejsu  
  
-   Każda klasa  
  
 Zobacz <xref:System.Windows.Forms.Binding> klasy, aby uzyskać więcej informacji o tworzeniu `dataMember` ciągu.  
  
 Podczas tworzenia wiązania do właściwości kontrolki nowy <xref:System.Windows.Forms.Binding> sprawdza zdarzenia udostępnianych przez formant związany i dołącza do dwóch określonych zdarzeń:  
  
-   <xref:System.Windows.Forms.Control.Validating?displayProperty=nameWithType>  
  
-   Zdarzenie o nazwie *PropertyName* `Changed` (na przykład <xref:System.Windows.Forms.Control.BackColorChanged?displayProperty=nameWithType>)  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Właściwości określone przez <paramref name="propertyName" /> na formant nie istnieje.  - lub - źródłowy lub dane elementu członkowskiego lub kontroli właściwości danych określoną są skojarzone z innym wiązaniu w kolekcji.</exception>
      </Docs>
    </Member>
    <Member MemberName="BindableComponent">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.IBindableComponent BindableComponent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.IBindableComponent BindableComponent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.BindableComponent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BindableComponent As IBindableComponent" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::IBindableComponent ^ BindableComponent { System::Windows::Forms::IBindableComponent ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.BindableComponent : System.Windows.Forms.IBindableComponent" Usage="System.Windows.Forms.Binding.BindableComponent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.IBindableComponent</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera kontrolki <see cref="T:System.Windows.Forms.Binding" /> jest skojarzony.</summary>
        <value>
          <see cref="T:System.Windows.Forms.IBindableComponent" />
          <see cref="T:System.Windows.Forms.Binding" /> Jest skojarzony.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="BindingComplete">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.BindingCompleteEventHandler BindingComplete;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.BindingCompleteEventHandler BindingComplete" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Binding.BindingComplete" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event BindingComplete As BindingCompleteEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::BindingCompleteEventHandler ^ BindingComplete;" />
      <MemberSignature Language="F#" Value="member this.BindingComplete : System.Windows.Forms.BindingCompleteEventHandler " Usage="member this.BindingComplete : System.Windows.Forms.BindingCompleteEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.BindingCompleteEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy <see cref="P:System.Windows.Forms.Binding.FormattingEnabled" /> właściwość jest ustawiona na <see langword="true" /> i operacji wiązania zakończeniu, np. gdy dane są wypychane z kontroli źródła danych lub na odwrót</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie jest wywoływane w żadnej z następujących warunków, gdy <xref:System.Windows.Forms.Binding.FormattingEnabled%2A> jest `true`:  
  
-   Dane ze źródła danych zostanie przypisany do właściwości kontrolki.  
  
-   Dane z właściwości kontrolki są wypychane na źródle danych.  
  
 To zdarzenie jest wywoływane po zakończeniu tych operacji, niezależnie od stanu ukończenia. Na przykład, jeśli operacja powiązania wiąże wartość null, aby <xref:System.Windows.Forms.DateTimePicker.Value%2A> właściwość, jest zgłaszany wyjątek, ale <xref:System.Windows.Forms.Binding.BindingComplete> wystąpi zdarzenie. Program obsługi zdarzenia wykonać odpowiednią akcję, oparte na sukces, błędów lub wyjątków w procesie powiązania, sprawdzając <xref:System.Windows.Forms.BindingCompleteEventArgs.BindingCompleteState%2A> właściwość <xref:System.Windows.Forms.BindingCompleteEventArgs> parametru.  
  
 Aby uzyskać więcej informacji na temat obsługi zdarzeń, zobacz [Handling and Raising Events](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje sposób obsługi <xref:System.Windows.Forms.Binding.BindingComplete> zdarzeń.  
  
 [!code-cpp[System.Windows.Forms.DataConnectorBindingComplete#3](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.DataConnectorBindingComplete/CPP/form1.cpp#3)]
 [!code-csharp[System.Windows.Forms.DataConnectorBindingComplete#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.DataConnectorBindingComplete/CS/form1.cs#3)]
 [!code-vb[System.Windows.Forms.DataConnectorBindingComplete#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.DataConnectorBindingComplete/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Binding.FormattingEnabled" />
        <altmember cref="M:System.Windows.Forms.Binding.OnBindingComplete(System.Windows.Forms.BindingCompleteEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="BindingManagerBase">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.BindingManagerBase BindingManagerBase { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.BindingManagerBase BindingManagerBase" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.BindingManagerBase" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BindingManagerBase As BindingManagerBase" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::BindingManagerBase ^ BindingManagerBase { System::Windows::Forms::BindingManagerBase ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.BindingManagerBase : System.Windows.Forms.BindingManagerBase" Usage="System.Windows.Forms.Binding.BindingManagerBase" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.BindingManagerBase</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera <see cref="T:System.Windows.Forms.BindingManagerBase" /> tego <see cref="T:System.Windows.Forms.Binding" />.</summary>
        <value>
          <see cref="T:System.Windows.Forms.BindingManagerBase" /> Który zarządza to <see cref="T:System.Windows.Forms.Binding" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Windows.Forms.BindingManagerBase> do iteracji przez listę powiązanych z danymi przez zwiększanie lub zmniejszanie <xref:System.Windows.Forms.BindingManagerBase.Position%2A> właściwości. <xref:System.Windows.Forms.BindingManagerBase> Klasa jest klasą abstrakcyjną. <xref:System.Windows.Forms.CurrencyManager> Klasy, która zarządza list powiązanych z danymi, dziedziczy <xref:System.Windows.Forms.BindingManagerBase> klasy.  
  
   
  
## Examples  
 Poniższy kod pobiera przykład <xref:System.Windows.Forms.BindingManagerBase> z każdym <xref:System.Windows.Forms.Binding> na formularzu, a w dzienniku <xref:System.Windows.Forms.BindingManagerBase.Position%2A> właściwości dla każdego <xref:System.Windows.Forms.BindingManagerBase>.  
  
 [!code-cpp[Classic Binding.BindingManagerBase Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Binding.BindingManagerBase Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Binding.BindingManagerBase Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Binding.BindingManagerBase Example/CS/source.cs#1)]
 [!code-vb[Classic Binding.BindingManagerBase Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Binding.BindingManagerBase Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="BindingMemberInfo">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.BindingMemberInfo BindingMemberInfo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.BindingMemberInfo BindingMemberInfo" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.BindingMemberInfo" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property BindingMemberInfo As BindingMemberInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::BindingMemberInfo BindingMemberInfo { System::Windows::Forms::BindingMemberInfo get(); };" />
      <MemberSignature Language="F#" Value="member this.BindingMemberInfo : System.Windows.Forms.BindingMemberInfo" Usage="System.Windows.Forms.Binding.BindingMemberInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.BindingMemberInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera obiekt, który zawiera informacje dotyczące tego powiązania, na podstawie <paramref name="dataMember" /> parametru w <see cref="Overload:System.Windows.Forms.Binding.#ctor" /> konstruktora.</summary>
        <value>A <see cref="T:System.Windows.Forms.BindingMemberInfo" /> zawierający informacje o tym <see cref="T:System.Windows.Forms.Binding" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.BindingMemberInfo> Jest tworzona na podstawie `dataMember` ciąg przekazywany do <xref:System.Windows.Forms.Binding.%23ctor%2A> konstruktora.  
  
   
  
## Examples  
 Poniższy kod pobiera przykład <xref:System.Windows.Forms.BindingMemberInfo> każdego <xref:System.Windows.Forms.Binding> na formularzu, a w dzienniku <xref:System.Windows.Forms.BindingMemberInfo.BindingPath%2A>, <xref:System.Windows.Forms.BindingMemberInfo.BindingField%2A>, i <xref:System.Windows.Forms.BindingMemberInfo.BindingMember%2A> wartości właściwości, które <xref:System.Windows.Forms.Binding>.  
  
 [!code-cpp[Classic Binding.BindingMemberInfo Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Binding.BindingMemberInfo Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Binding.BindingMemberInfo Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Binding.BindingMemberInfo Example/CS/source.cs#1)]
 [!code-vb[Classic Binding.BindingMemberInfo Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Binding.BindingMemberInfo Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.BindingsCollection" />
      </Docs>
    </Member>
    <Member MemberName="Control">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Control Control { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Control Control" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.Control" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Control As Control" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Control ^ Control { System::Windows::Forms::Control ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Control : System.Windows.Forms.Control" Usage="System.Windows.Forms.Binding.Control" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Control</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera formant, który należy powiązania.</summary>
        <value>
          <see cref="T:System.Windows.Forms.Control" /> , Której należy powiązania.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy kod pobiera przykład <xref:System.Windows.Forms.BindingManagerBase> dla określonego źródła danych i wyświetla informacje na temat każdego <xref:System.Windows.Forms.Binding.Control%2A> właściwość, która jest powiązana ze źródłem danych. W przykładzie użyto <xref:System.Windows.Forms.BindingManagerBase.Bindings%2A> właściwość <xref:System.Windows.Forms.BindingManagerBase> można pobrać wszystkich kontrolek.  
  
 [!code-cpp[Classic Binding.Control Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Binding.Control Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Binding.Control Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Binding.Control Example/CS/source.cs#1)]
 [!code-vb[Classic Binding.Control Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Binding.Control Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ControlUpdateMode">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ControlUpdateMode ControlUpdateMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.ControlUpdateMode ControlUpdateMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.ControlUpdateMode" />
      <MemberSignature Language="VB.NET" Value="Public Property ControlUpdateMode As ControlUpdateMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ControlUpdateMode ControlUpdateMode { System::Windows::Forms::ControlUpdateMode get(); void set(System::Windows::Forms::ControlUpdateMode value); };" />
      <MemberSignature Language="F#" Value="member this.ControlUpdateMode : System.Windows.Forms.ControlUpdateMode with get, set" Usage="System.Windows.Forms.Binding.ControlUpdateMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ControlUpdateMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia, kiedy zmiany w źródle danych są propagowane do właściwości kontrolki powiązanej.</summary>
        <value>Jedną z <see cref="T:System.Windows.Forms.ControlUpdateMode" /> wartości. Wartość domyślna to <see cref="F:System.Windows.Forms.ControlUpdateMode.OnPropertyChanged" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DataSource">
      <MemberSignature Language="C#" Value="public object DataSource { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DataSource" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.DataSource" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DataSource As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ DataSource { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DataSource : obj" Usage="System.Windows.Forms.Binding.DataSource" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera źródło danych dla tego powiązania.</summary>
        <value>
          <see cref="T:System.Object" /> Reprezentujący źródło danych.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Źródła danych obejmują:  
  
-   A <xref:System.Data.DataSet>  
  
-   A <xref:System.Data.DataTable>  
  
-   A <xref:System.Data.DataView>  
  
-   A <xref:System.Data.DataViewManager>  
  
-   Dowolny obiekt, który implementuje <xref:System.Collections.IList> interfejsu  
  
-   Każdy obiekt  
  
   
  
## Examples  
 Poniższy przykład kodu wykorzystuje <xref:System.Windows.Forms.Binding.DataSource%2A> właściwości do zwrócenia <xref:System.Data.DataSet>.  
  
 [!code-cpp[Classic Binding.DataSource Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Binding.DataSource Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Binding.DataSource Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Binding.DataSource Example/CS/source.cs#1)]
 [!code-vb[Classic Binding.DataSource Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Binding.DataSource Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DataSourceNullValue">
      <MemberSignature Language="C#" Value="public object DataSourceNullValue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DataSourceNullValue" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.DataSourceNullValue" />
      <MemberSignature Language="VB.NET" Value="Public Property DataSourceNullValue As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ DataSourceNullValue { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DataSourceNullValue : obj with get, set" Usage="System.Windows.Forms.Binding.DataSourceNullValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość, które mają być przechowywane w źródle danych, jeśli wartość kontrolki jest <see langword="null" /> lub jest pusty.</summary>
        <value>
          <see cref="T:System.Object" /> Mają być przechowywane w źródle danych, gdy właściwość formantu jest pusta lub <see langword="null" />. Wartość domyślna to <see cref="T:System.DBNull" /> dla typów wartości i <see langword="null" /> dla typów innych niż wartości.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Możesz użyć <xref:System.Windows.Forms.Binding.NullValue%2A> właściwości w celu określenia wartości wyświetlane w powiązanej kontrolki, gdy źródło danych zawiera <xref:System.DBNull>.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Binding.NullValue" />
      </Docs>
    </Member>
    <Member MemberName="DataSourceUpdateMode">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.DataSourceUpdateMode DataSourceUpdateMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.DataSourceUpdateMode DataSourceUpdateMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.DataSourceUpdateMode" />
      <MemberSignature Language="VB.NET" Value="Public Property DataSourceUpdateMode As DataSourceUpdateMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::DataSourceUpdateMode DataSourceUpdateMode { System::Windows::Forms::DataSourceUpdateMode get(); void set(System::Windows::Forms::DataSourceUpdateMode value); };" />
      <MemberSignature Language="F#" Value="member this.DataSourceUpdateMode : System.Windows.Forms.DataSourceUpdateMode with get, set" Usage="System.Windows.Forms.Binding.DataSourceUpdateMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DataSourceUpdateMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość, która wskazuje, kiedy zmiany wprowadzone do właściwości powiązanej kontrolki są propagowane do źródła danych.</summary>
        <value>Wartość, która wskazuje, kiedy zmiany są propagowane. Wartość domyślna to <see cref="F:System.Windows.Forms.DataSourceUpdateMode.OnValidation" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Należy pamiętać, że nawet wtedy, gdy ta właściwość jest ustawiona <xref:System.Windows.Forms.DataSourceUpdateMode.Never>, powiązanie zaktualizuje co najmniej jeden raz, po raz pierwszy jest nawiązywane.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Format">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ConvertEventHandler Format;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ConvertEventHandler Format" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Binding.Format" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Format As ConvertEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::ConvertEventHandler ^ Format;" />
      <MemberSignature Language="F#" Value="member this.Format : System.Windows.Forms.ConvertEventHandler " Usage="member this.Format : System.Windows.Forms.ConvertEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ConvertEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy właściwość kontrolki jest powiązany z wartością danych.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.Binding.Format> Zdarzenie jest wywoływane, gdy dane są przesyłane z źródła danych do kontrolki. Może obsługiwać <xref:System.Windows.Forms.Binding.Format> zdarzenie, aby przekonwertować niesformatowanych danych ze źródła danych do sformatowanych danych do wyświetlenia. Gdy dane są pobierane z kontrolki do źródła danych <xref:System.Windows.Forms.Binding.Parse> zdarzenie jest zgłaszane do anulowania formatowania wyświetlanej wartości, a następnie <xref:System.Windows.Forms.Binding.Format> wystąpi zdarzenie do formatowania danych w celu wyświetlenia. Daje to gwarancję, że formant związany wyświetla poprawnie sformatowane dane niezależnie od tego, czy użytkownik wprowadza dane w układzie sformatowanym lub niesformatowanym w formancie.  
  
 <xref:System.Windows.Forms.Binding.Format> i <xref:System.Windows.Forms.Binding.Parse> zdarzenia pozwalają tworzyć niestandardowe formaty wyświetlania danych. Na przykład, jeśli dane w tabeli jest typu <xref:System.Decimal>, dane można wyświetlić w formacie waluty lokalnej, ustawiając <xref:System.Windows.Forms.ConvertEventArgs.Value%2A> właściwość <xref:System.Windows.Forms.ConvertEventArgs> sformatowaną wartość <xref:System.Windows.Forms.Binding.Format> zdarzeń. W związku z tym należy anulowania formatowania wartości wyświetlanej w <xref:System.Windows.Forms.Binding.Parse> zdarzeń.  
  
 <xref:System.Windows.Forms.Binding.Format> Zawsze, gdy wystąpi zdarzenie <xref:System.Windows.Forms.BindingManagerBase.Current%2A> wartość <xref:System.Windows.Forms.BindingManagerBase> zmian, które obejmują:  
  
-   Po raz pierwszy właściwość jest powiązana.  
  
-   Ilekroć <xref:System.Windows.Forms.BindingManagerBase.Position%2A> zmiany.  
  
-   Zawsze, gdy lista powiązanych z danymi jest sortowane lub filtrowane, co jest wykonywane, kiedy <xref:System.Data.DataView> dostarcza listy.  
  
 <xref:System.Windows.Forms.Binding.Format> Zdarzenie zachodzi po <xref:System.Windows.Forms.Binding.Parse> zdarzeń. Na przykład po utracie fokusu przez kontrolki są parsowane jego zawartość. Zaraz potem, jak nowe dane są przesyłane do kontrolki <xref:System.Windows.Forms.Binding.Format> wystąpi zdarzenie, dzięki czemu nowej zawartości do sformatowania.  
  
 Aby uzyskać więcej informacji na temat obsługi zdarzeń, zobacz [Handling and Raising Events](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 Poniższy przykład kodu tworzy <xref:System.Windows.Forms.Binding>, dodaje <xref:System.Windows.Forms.ConvertEventHandler> delegata do obu <xref:System.Windows.Forms.Binding.Parse> i <xref:System.Windows.Forms.Binding.Format> zdarzenia i dodaje <xref:System.Windows.Forms.Binding> do <xref:System.Windows.Forms.BindingsCollection> z <xref:System.Windows.Forms.TextBox> kontrolować za pośrednictwem <xref:System.Windows.Forms.Control.DataBindings%2A> Właściwość. `DecimalToCurrencyString` Delegata zdarzenia, dodane do <xref:System.Windows.Forms.Binding.Format> zdarzeń, formatuje wiązana wartość ( <xref:System.Decimal> typu) jako walutę przy użyciu <xref:System.Decimal.ToString%2A> metody. `CurrencyStringToDecimal` Delegata zdarzenia, dodane do <xref:System.Windows.Forms.Binding.Parse> zdarzeń, konwertuje wartości wyświetlanej przez formant do <xref:System.Decimal> typu.  
  
 W tym przykładzie założono obecności <xref:System.Data.DataSet> o nazwie `ds`.  
  
 [!code-cpp[Classic Binding.Format Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Binding.Format Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Binding.Format Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Binding.Format Example/CS/source.cs#1)]
 [!code-vb[Classic Binding.Format Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Binding.Format Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.Binding.Parse" />
        <altmember cref="M:System.Windows.Forms.Binding.OnFormat(System.Windows.Forms.ConvertEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="FormatInfo">
      <MemberSignature Language="C#" Value="public IFormatProvider FormatInfo { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IFormatProvider FormatInfo" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.FormatInfo" />
      <MemberSignature Language="VB.NET" Value="Public Property FormatInfo As IFormatProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IFormatProvider ^ FormatInfo { IFormatProvider ^ get(); void set(IFormatProvider ^ value); };" />
      <MemberSignature Language="F#" Value="member this.FormatInfo : IFormatProvider with get, set" Usage="System.Windows.Forms.Binding.FormatInfo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IFormatProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia <see cref="T:System.IFormatProvider" /> zapewniający zachowania formatowania niestandardowego.</summary>
        <value>
          <see cref="T:System.IFormatProvider" /> Wdrożenia, który zawiera niestandardowe zachowanie formatowania.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ustawienie tej właściwości spowoduje przesłonięcie domyślne zachowanie, które używa formatowanie <xref:System.Windows.Forms.Application.CurrentCulture%2A?displayProperty=nameWithType> ustawienie właściwości.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FormatString">
      <MemberSignature Language="C#" Value="public string FormatString { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FormatString" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.FormatString" />
      <MemberSignature Language="VB.NET" Value="Public Property FormatString As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ FormatString { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.FormatString : string with get, set" Usage="System.Windows.Forms.Binding.FormatString" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia format specyfikator znaków, które wskazują, jak wartość ma być wyświetlana.</summary>
        <value>Ciąg znaków specyfikatora formatu, które wskazują, jak wartość ma być wyświetlana.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ciąg formatu używany, należy przestrzegać standardowych specyfikacji formatu .NET Framework. Aby uzyskać więcej informacji, zobacz [typy formatowania na platformie .NET Framework](~/docs/standard/base-types/formatting-types.md).  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FormattingEnabled">
      <MemberSignature Language="C#" Value="public bool FormattingEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool FormattingEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.FormattingEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property FormattingEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool FormattingEnabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.FormattingEnabled : bool with get, set" Usage="System.Windows.Forms.Binding.FormattingEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy formatowania i konwersji typu jest stosowany do kontroli danych właściwości.</summary>
        <value>
          <see langword="true" /> Jeśli konwersja typu i formatowania danych właściwości kontrolki jest włączony; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ustawienie tej właściwości na `true` również włącza zachowanie obsługi błędów i powoduje, że <xref:System.Windows.Forms.Binding.BindingComplete> zdarzenia. Program obsługi zdarzenia wykonać odpowiednią akcję, oparte na sukces, błędów lub wyjątków w procesie powiązania, sprawdzając <xref:System.Windows.Forms.BindingCompleteEventArgs.BindingCompleteState%2A> właściwość <xref:System.Windows.Forms.BindingCompleteEventArgs> parametru.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.Binding.BindingComplete" />
        <altmember cref="T:System.Windows.Forms.BindingCompleteEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="IsBinding">
      <MemberSignature Language="C#" Value="public bool IsBinding { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsBinding" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.IsBinding" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsBinding As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsBinding { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsBinding : bool" Usage="System.Windows.Forms.Binding.IsBinding" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy powiązanie jest aktywny.</summary>
        <value>
          <see langword="true" /> Jeśli wiązanie jest aktywny; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Powiązanie jest aktywny, gdy spełnia następujące warunki:  
  
-   Wszystkie właściwości są ustawione.  
  
-   Użytkownik nie wywołał <xref:System.Windows.Forms.BindingManagerBase.ResumeBinding%2A> lub <xref:System.Windows.Forms.BindingManagerBase.SuspendBinding%2A> na <xref:System.Windows.Forms.BindingManagerBase> , <xref:System.Windows.Forms.Binding> należy.  
  
-   Formant, do którego <xref:System.Windows.Forms.Binding> należy została utworzona.  
  
   
  
## Examples  
 Poniższy kod wyświetla przykład <xref:System.Windows.Forms.Binding.PropertyName%2A> i <xref:System.Windows.Forms.Binding.IsBinding%2A> wartość dla każdego <xref:System.Windows.Forms.Binding> w formularzu.  
  
 [!code-cpp[Classic Binding.IsBinding Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Binding.IsBinding Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Binding.IsBinding Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Binding.IsBinding Example/CS/source.cs#1)]
 [!code-vb[Classic Binding.IsBinding Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Binding.IsBinding Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NullValue">
      <MemberSignature Language="C#" Value="public object NullValue { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object NullValue" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.NullValue" />
      <MemberSignature Language="VB.NET" Value="Public Property NullValue As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ NullValue { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.NullValue : obj with get, set" Usage="System.Windows.Forms.Binding.NullValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia <see cref="T:System.Object" /> można ustawić jako właściwości kontrolki, gdy źródło danych zawiera <see cref="T:System.DBNull" /> wartość.</summary>
        <value>
          <see cref="T:System.Object" /> Można ustawić jako właściwości kontrolki, gdy źródło danych zawiera <see cref="T:System.DBNull" /> wartość. Wartość domyślna to <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Źródło danych musi zawierać <xref:System.DBNull> dla <xref:System.Windows.Forms.Binding.NullValue%2A> właściwości, które mają być prawidłowo stosowane. Jeśli typ źródła danych jest typu, takiego jak ciąg lub liczba całkowita, wartość <xref:System.Windows.Forms.Binding.NullValue%2A> właściwość zostanie zignorowana. Ponadto <xref:System.Windows.Forms.Binding.NullValue%2A> właściwość jest ignorowana, jeśli jest równa `null`.  
  
 Wartość null zostanie dodany do źródła danych po właściwość kontrolki jest ustawiona na obiekt <xref:System.Windows.Forms.Binding.NullValue%2A>. Jeśli <xref:System.Windows.Forms.Binding.NullValue%2A> jest ustawiona na wartość ciągu, porównania jest rozróżniana wielkość liter.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnBindingComplete">
      <MemberSignature Language="C#" Value="protected virtual void OnBindingComplete (System.Windows.Forms.BindingCompleteEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnBindingComplete(class System.Windows.Forms.BindingCompleteEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Binding.OnBindingComplete(System.Windows.Forms.BindingCompleteEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnBindingComplete (e As BindingCompleteEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnBindingComplete(System::Windows::Forms::BindingCompleteEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnBindingComplete : System.Windows.Forms.BindingCompleteEventArgs -&gt; unit&#xA;override this.OnBindingComplete : System.Windows.Forms.BindingCompleteEventArgs -&gt; unit" Usage="binding.OnBindingComplete e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.BindingCompleteEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Element <see cref="T:System.Windows.Forms.BindingCompleteEventArgs" /> zawierający dane zdarzenia.</param>
        <summary>Wywołuje <see cref="E:System.Windows.Forms.Binding.BindingComplete" /> zdarzeń.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podnoszenie zdarzenia wywołuje program obsługi zdarzeń przez delegata. Aby uzyskać więcej informacji, zobacz [Handling and Raising Events](~/docs/standard/events/index.md).  
  
 <xref:System.Windows.Forms.Binding.OnBindingComplete%2A> Metoda umożliwia również klasy pochodne obsłużyć zdarzenie bez dołączając delegata. Jest to preferowana metoda obsługi zdarzeń w klasie pochodnej.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Podczas zastępowania <see cref="M:System.Windows.Forms.Binding.OnBindingComplete(System.Windows.Forms.BindingCompleteEventArgs)" /> w klasie pochodnej, pamiętaj wywołać klasy bazowej <see cref="M:System.Windows.Forms.Binding.OnBindingComplete(System.Windows.Forms.BindingCompleteEventArgs)" /> metody, która zarejestrowana delegaci otrzymają zdarzenie.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnFormat">
      <MemberSignature Language="C#" Value="protected virtual void OnFormat (System.Windows.Forms.ConvertEventArgs cevent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnFormat(class System.Windows.Forms.ConvertEventArgs cevent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Binding.OnFormat(System.Windows.Forms.ConvertEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnFormat (cevent As ConvertEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnFormat(System::Windows::Forms::ConvertEventArgs ^ cevent);" />
      <MemberSignature Language="F#" Value="abstract member OnFormat : System.Windows.Forms.ConvertEventArgs -&gt; unit&#xA;override this.OnFormat : System.Windows.Forms.ConvertEventArgs -&gt; unit" Usage="binding.OnFormat cevent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cevent" Type="System.Windows.Forms.ConvertEventArgs" />
      </Parameters>
      <Docs>
        <param name="cevent">Element <see cref="T:System.Windows.Forms.ConvertEventArgs" /> zawierający dane zdarzenia.</param>
        <summary>Wywołuje <see cref="E:System.Windows.Forms.Binding.Format" /> zdarzeń.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podnoszenie zdarzenia wywołuje program obsługi zdarzeń przez delegata. Aby uzyskać więcej informacji, zobacz [Handling and Raising Events](~/docs/standard/events/index.md).  
  
 <xref:System.Windows.Forms.Binding.OnFormat%2A> Metoda umożliwia również klasy pochodne obsłużyć zdarzenie bez dołączając delegata. Jest to preferowana metoda obsługi zdarzeń w klasie pochodnej.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Podczas zastępowania <see cref="M:System.Windows.Forms.Binding.OnFormat(System.Windows.Forms.ConvertEventArgs)" /> w klasie pochodnej, pamiętaj wywołać klasy bazowej <see cref="M:System.Windows.Forms.Binding.OnFormat(System.Windows.Forms.ConvertEventArgs)" /> metody, która zarejestrowana delegaci otrzymają zdarzenie.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.Binding.Format" />
        <altmember cref="M:System.Windows.Forms.Binding.OnParse(System.Windows.Forms.ConvertEventArgs)" />
        <altmember cref="E:System.Windows.Forms.Binding.Parse" />
      </Docs>
    </Member>
    <Member MemberName="OnParse">
      <MemberSignature Language="C#" Value="protected virtual void OnParse (System.Windows.Forms.ConvertEventArgs cevent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnParse(class System.Windows.Forms.ConvertEventArgs cevent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Binding.OnParse(System.Windows.Forms.ConvertEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnParse (cevent As ConvertEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnParse(System::Windows::Forms::ConvertEventArgs ^ cevent);" />
      <MemberSignature Language="F#" Value="abstract member OnParse : System.Windows.Forms.ConvertEventArgs -&gt; unit&#xA;override this.OnParse : System.Windows.Forms.ConvertEventArgs -&gt; unit" Usage="binding.OnParse cevent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="cevent" Type="System.Windows.Forms.ConvertEventArgs" />
      </Parameters>
      <Docs>
        <param name="cevent">Element <see cref="T:System.Windows.Forms.ConvertEventArgs" /> zawierający dane zdarzenia.</param>
        <summary>Wywołuje <see cref="E:System.Windows.Forms.Binding.Parse" /> zdarzeń.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podnoszenie zdarzenia wywołuje program obsługi zdarzeń przez delegata. Aby uzyskać więcej informacji, zobacz [Handling and Raising Events](~/docs/standard/events/index.md).  
  
 <xref:System.Windows.Forms.Binding.OnParse%2A> Metoda umożliwia również klasy pochodne obsłużyć zdarzenie bez dołączając delegata. Jest to preferowana metoda obsługi zdarzeń w klasie pochodnej.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Podczas zastępowania <see cref="M:System.Windows.Forms.Binding.OnParse(System.Windows.Forms.ConvertEventArgs)" /> w klasie pochodnej, pamiętaj wywołać klasy bazowej <see cref="M:System.Windows.Forms.Binding.OnParse(System.Windows.Forms.ConvertEventArgs)" /> metody, która zarejestrowana delegaci otrzymają zdarzenie.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.Binding.Format" />
        <altmember cref="M:System.Windows.Forms.Binding.OnFormat(System.Windows.Forms.ConvertEventArgs)" />
        <altmember cref="E:System.Windows.Forms.Binding.Parse" />
      </Docs>
    </Member>
    <Member MemberName="Parse">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ConvertEventHandler Parse;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ConvertEventHandler Parse" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Binding.Parse" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Parse As ConvertEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::ConvertEventHandler ^ Parse;" />
      <MemberSignature Language="F#" Value="member this.Parse : System.Windows.Forms.ConvertEventHandler " Usage="member this.Parse : System.Windows.Forms.ConvertEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ConvertEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po zmianie wartości kontrolki powiązane z danymi.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.Binding.Format> i <xref:System.Windows.Forms.Binding.Parse> zdarzenia pozwalają tworzyć niestandardowe formaty wyświetlania danych. Na przykład, jeśli dane w tabeli jest typu <xref:System.Decimal>, dane można wyświetlić w formacie waluty lokalnej, ustawiając <xref:System.Windows.Forms.ConvertEventArgs.Value%2A> właściwość <xref:System.Windows.Forms.ConvertEventArgs> sformatowaną wartość <xref:System.Windows.Forms.Binding.Format> zdarzeń. W związku z tym należy anulowania formatowania wartości wyświetlanej w <xref:System.Windows.Forms.Binding.Parse> zdarzeń.  
  
 <xref:System.Windows.Forms.Binding.Parse> Zdarzenie występuje w następujących warunkach:  
  
-   Po <xref:System.Windows.Forms.Control.Validated> zdarzenia <xref:System.Windows.Forms.Control> występuje.  
  
-   Gdy <xref:System.Windows.Forms.BindingManagerBase.EndCurrentEdit%2A> metoda <xref:System.Windows.Forms.BindingManagerBase> jest wywoływana.  
  
-   Gdy <xref:System.Windows.Forms.BindingManagerBase.Current%2A> z <xref:System.Windows.Forms.BindingManagerBase> zmiany (innymi słowy, gdy <xref:System.Windows.Forms.BindingManagerBase.Position%2A> zmian).  
  
 Aby uzyskać więcej informacji na temat obsługi zdarzeń, zobacz [Handling and Raising Events](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 Poniższy przykład kodu tworzy <xref:System.Windows.Forms.Binding>, dodaje <xref:System.Windows.Forms.ConvertEventHandler> delegata do obu <xref:System.Windows.Forms.Binding.Parse> i <xref:System.Windows.Forms.Binding.Format> zdarzenia i dodaje <xref:System.Windows.Forms.Binding> do <xref:System.Windows.Forms.BindingsCollection> z <xref:System.Windows.Forms.TextBox> kontrolować za pośrednictwem <xref:System.Windows.Forms.Control.DataBindings%2A> Właściwość. `DecimalToCurrencyString` Delegata zdarzenia, dodane do <xref:System.Windows.Forms.Binding.Format> zdarzeń, formatuje wiązana wartość ( <xref:System.Decimal> typu) jako walutę przy użyciu <xref:System.Decimal.ToString%2A> metody. `CurrencyStringToDecimal` Delegata zdarzenia, dodane do <xref:System.Windows.Forms.Binding.Parse> zdarzeń, konwertuje wartości wyświetlanej przez formant do <xref:System.Decimal> typu.  
  
 [!code-cpp[Classic Binding.Parse Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Binding.Parse Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Binding.Parse Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Binding.Parse Example/CS/source.cs#1)]
 [!code-vb[Classic Binding.Parse Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Binding.Parse Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.Binding.Format" />
        <altmember cref="M:System.Windows.Forms.Binding.OnParse(System.Windows.Forms.ConvertEventArgs)" />
        <altmember cref="E:System.Windows.Forms.BindingManagerBase.PositionChanged" />
        <altmember cref="E:System.Windows.Forms.BindingManagerBase.CurrentChanged" />
      </Docs>
    </Member>
    <Member MemberName="PropertyName">
      <MemberSignature Language="C#" Value="public string PropertyName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string PropertyName" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Binding.PropertyName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property PropertyName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ PropertyName { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.PropertyName : string" Usage="System.Windows.Forms.Binding.PropertyName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia nazwę właściwości powiązanych z danymi formantu.</summary>
        <value>Nazwa właściwości kontrolki, można powiązać.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Windows.Forms.Binding.PropertyName%2A> do określania właściwości kontrolki, które chcesz powiązać z listy w źródle danych. Najczęściej Dowiąż właściwość wyświetlania takich jak <xref:System.Windows.Forms.Control.Text%2A> właściwość <xref:System.Windows.Forms.TextBox> kontroli. Jednak ponieważ można powiązać dowolnej właściwości formantu, programowo można utworzyć kontrolki w czasie wykonywania przy użyciu danych z bazy danych.  
  
   
  
## Examples  
 Poniższy kod wyświetla przykład <xref:System.Windows.Forms.Binding.PropertyName%2A> wartość każdego <xref:System.Windows.Forms.Binding> dla każdego formantu w formularzu.  
  
 [!code-cpp[Classic Binding.PropertyName Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Binding.PropertyName Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Binding.PropertyName Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Binding.PropertyName Example/CS/source.cs#1)]
 [!code-vb[Classic Binding.PropertyName Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Binding.PropertyName Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ReadValue">
      <MemberSignature Language="C#" Value="public void ReadValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ReadValue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Binding.ReadValue" />
      <MemberSignature Language="VB.NET" Value="Public Sub ReadValue ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ReadValue();" />
      <MemberSignature Language="F#" Value="member this.ReadValue : unit -&gt; unit" Usage="binding.ReadValue " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Ustawia właściwości kontrolki na wartość odczytu ze źródła danych.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="WriteValue">
      <MemberSignature Language="C#" Value="public void WriteValue ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void WriteValue() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Binding.WriteValue" />
      <MemberSignature Language="VB.NET" Value="Public Sub WriteValue ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void WriteValue();" />
      <MemberSignature Language="F#" Value="member this.WriteValue : unit -&gt; unit" Usage="binding.WriteValue " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Odczytuje bieżącą wartość właściwości kontrolki i zapisuje je do źródła danych.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>