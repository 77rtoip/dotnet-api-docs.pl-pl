<Type Name="KeyPressEventArgs" FullName="System.Windows.Forms.KeyPressEventArgs">
  <Metadata><Meta Name="ms.openlocfilehash" Value="0d10a4471126dc53d8875c7de85512b9f2d3acca" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69186428" /></Metadata><TypeSignature Language="C#" Value="public class KeyPressEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit KeyPressEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.KeyPressEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class KeyPressEventArgs&#xA;Inherits EventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class KeyPressEventArgs : EventArgs" />
  <TypeSignature Language="F#" Value="type KeyPressEventArgs = class&#xA;    inherit EventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Dostarcza dane dla <see cref="E:System.Windows.Forms.Control.KeyPress" /> zdarzenia.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.KeyPressEventArgs> Określa znak, który jest tworzony podczas naciskania klawisza przez użytkownika. Na przykład, gdy użytkownik naciśnie klawisz Shift + K, <xref:System.Windows.Forms.KeyPressEventArgs.KeyChar%2A> Właściwość zwraca wielką literę K.  
  
 <xref:System.Windows.Forms.Control.KeyPress> Zdarzenie pojawia się, gdy użytkownik naciśnie klawisz. Dwa zdarzenia, które są ściśle związane <xref:System.Windows.Forms.Control.KeyPress> ze zdarzeniem, są <xref:System.Windows.Forms.Control.KeyUp> i <xref:System.Windows.Forms.Control.KeyDown>. Zdarzenie poprzedza każde <xref:System.Windows.Forms.Control.KeyPress> zdarzenie, gdy użytkownik naciśnie klawisz, a <xref:System.Windows.Forms.Control.KeyUp> zdarzenie występuje, gdy użytkownik zwolni klucz. <xref:System.Windows.Forms.Control.KeyDown> Gdy użytkownik zatrzyma klucz, duplikaty <xref:System.Windows.Forms.Control.KeyDown> i <xref:System.Windows.Forms.Control.KeyPress> zdarzenia pojawiają się za każdym razem, gdy znak zostanie powtórzony. Po <xref:System.Windows.Forms.Control.KeyUp> wydaniu jest generowane jedno zdarzenie.  
  
 Każde <xref:System.Windows.Forms.Control.KeyPress> zdarzenie<xref:System.Windows.Forms.KeyPressEventArgs> jest przesyłane. Jest przesyłany z każdym <xref:System.Windows.Forms.Control.KeyDown> zdarzeniem i <xref:System.Windows.Forms.Control.KeyUp>. <xref:System.Windows.Forms.KeyEventArgs> Określa <xref:System.Windows.Forms.KeyEventArgs> , czy wszystkie klawisze modyfikujące (Ctrl, Shift lub ALT) zostały naciśnięte wraz z innym kluczem. (Te informacje o modyfikatorze można także uzyskać za <xref:System.Windows.Forms.Control.ModifierKeys%2A> pomocą właściwości <xref:System.Windows.Forms.Control> klasy).  
  
 Ustaw <xref:System.Windows.Forms.KeyPressEventArgs.Handled%2A> , `true` aby anulować`KeyPress` zdarzenie. Dzięki temu formant nie przetwarza nacisku klawisza.  
  
> [!NOTE]
>  Niektóre kontrolki będą przetwarzać niektóre <xref:System.Windows.Forms.Control.KeyDown>pociągnięcia klawiszy na. Na przykład <xref:System.Windows.Forms.RichTextBox> przetwarza przed <xref:System.Windows.Forms.Control.KeyPress> wywołaniem klawisz ENTER. W takich przypadkach nie można anulować <xref:System.Windows.Forms.Control.KeyPress> zdarzenia i należy anulować <xref:System.Windows.Forms.Control.KeyDown> naciśnięcie klawisza.  
  
 Informacje o modelu zdarzenia można znaleźć w temacie [Obsługa i](~/docs/standard/events/index.md)wywoływanie zdarzeń.  
  
   
  
## Examples  
 Poniższy przykład ilustruje użycie <xref:System.Windows.Forms.KeyPressEventArgs> do zliczania kluczy podczas naciskania i wyświetlania wyników po naciśnięciu klawisza. <xref:System.Windows.Forms.KeyPressEventArgs.Handled%2A>jest następnie ustawiany na wartość true, aby system operacyjny mógł nadal przetwarzać klucz. W przykładzie przyjęto założenie formularza <xref:System.Windows.Forms.TextBox> z umieszczonym na nim.  
  
 [!code-cpp[Classic KeyPressEventArgs Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic KeyPressEventArgs Example/CPP/source.cpp#1)]
 [!code-csharp[Classic KeyPressEventArgs Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic KeyPressEventArgs Example/CS/source.cs#1)]
 [!code-vb[Classic KeyPressEventArgs Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic KeyPressEventArgs Example/VB/source.vb#1)]  
  
 Należy utworzyć nowe wystąpienie tej klasy. Należy również ustawić obsługę zdarzeń. Można to zrobić w konstruktorze klasy.  
  
 [!code-cpp[Classic KeyPressEventArgs Example#2](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic KeyPressEventArgs Example/CPP/source2.cpp#2)]
 [!code-csharp[Classic KeyPressEventArgs Example#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic KeyPressEventArgs Example/CS/source2.cs#2)]
 [!code-vb[Classic KeyPressEventArgs Example#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic KeyPressEventArgs Example/VB/source2.vb#2)]  
  
 Gdy określone zdarzenie jest zgłaszane w formancie, przyłączona Metoda jest wywoływana i aplikacja może wykonać kod w odpowiedzi na zdarzenie.  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Windows.Forms.Control.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)" />
    <altmember cref="E:System.Windows.Forms.Control.KeyPress" />
    <altmember cref="T:System.Windows.Forms.KeyEventArgs" />
    <altmember cref="E:System.Windows.Forms.Control.KeyDown" />
    <altmember cref="E:System.Windows.Forms.Control.KeyUp" />
    <altmember cref="P:System.Windows.Forms.Control.ModifierKeys" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public KeyPressEventArgs (char keyChar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(char keyChar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.KeyPressEventArgs.#ctor(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (keyChar As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; KeyPressEventArgs(char keyChar);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.KeyPressEventArgs : char -&gt; System.Windows.Forms.KeyPressEventArgs" Usage="new System.Windows.Forms.KeyPressEventArgs keyChar" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="keyChar" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="keyChar">Znak ASCII odpowiadający kluczowi Naciśniętemu przez użytkownika.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Forms.KeyPressEventArgs" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj właściwości <xref:System.Windows.Forms.Control.ModifierKeys%2A?displayProperty=nameWithType> , aby uzyskać bieżący stan klawiszy modyfikujących.  
  
   
  
## Examples  
 Poniższy przykład wyświetla okno komunikatu, które pokazuje bieżący stan klawisza SHIFT.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Handled">
      <MemberSignature Language="C#" Value="public bool Handled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Handled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.KeyPressEventArgs.Handled" />
      <MemberSignature Language="VB.NET" Value="Public Property Handled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Handled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Handled : bool with get, set" Usage="System.Windows.Forms.KeyPressEventArgs.Handled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy <see cref="E:System.Windows.Forms.Control.KeyPress" /> zdarzenie zostało obsłużone.</summary>
        <value><see langword="true" />Jeśli zdarzenie jest obsługiwane; w przeciwnym razie. <see langword="false" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli zdarzenie nie jest obsługiwane, zostanie wysłane do systemu operacyjnego w celu przetworzenia domyślnego. Ustaw <xref:System.Windows.Forms.KeyPressEventArgs.Handled%2A> , `true` aby anulować`KeyPress` zdarzenie.  
  
   
  
## Examples  
 Poniższy przykład tworzy <xref:System.Windows.Forms.TextBox> kontrolkę. `keypressed` Metoda<xref:System.Windows.Forms.KeyPressEventArgs.KeyChar%2A> używa właściwości, aby sprawdzić, czy klawisz ENTER został naciśnięty. Po naciśnięciu <xref:System.Windows.Forms.KeyPressEventArgs.Handled%2A> klawisza ENTER właściwość jest ustawiona na `true`, co oznacza, że zdarzenie jest obsługiwane.  
  
 [!code-cpp[KeyPressEventArgs#1](~/samples/snippets/cpp/VS_Snippets_Winforms/KeyPressEventArgs/CPP/form1.cpp#1)]
 [!code-csharp[KeyPressEventArgs#1](~/samples/snippets/csharp/VS_Snippets_Winforms/KeyPressEventArgs/CS/form1.cs#1)]
 [!code-vb[KeyPressEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/KeyPressEventArgs/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.Control.KeyPress" />
      </Docs>
    </Member>
    <Member MemberName="KeyChar">
      <MemberSignature Language="C#" Value="public char KeyChar { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance char KeyChar" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.KeyPressEventArgs.KeyChar" />
      <MemberSignature Language="VB.NET" Value="Public Property KeyChar As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property char KeyChar { char get(); void set(char value); };" />
      <MemberSignature Language="F#" Value="member this.KeyChar : char with get, set" Usage="System.Windows.Forms.KeyPressEventArgs.KeyChar" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia znak odpowiadający Naciśniętemu klawiszowi.</summary>
        <value>Składający się ze znaków ASCII. Na przykład, jeśli użytkownik naciśnie klawisz SHIFT + K, ta właściwość zwraca wielką literę K.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.KeyPressEventArgs.KeyChar%2A> Użyj właściwości, aby próbkować naciśnięcia klawiszy w czasie wykonywania i zmodyfikować naciśnięcia klawiszy w ramach specjalnych warunków w czasie wykonywania. Na przykład można użyć <xref:System.Windows.Forms.KeyPressEventArgs.KeyChar%2A> , aby wyłączyć nienumeryczne naciśnięcia klawiszy, gdy użytkownik wprowadza kod pocztowy, zmienić wszystkie wielkie litery, naciskając w polu wprowadzanie danych, lub monitorować klawiaturę lub inne kluczowe urządzenie wejściowe dla określonych kombinacji klawiszy.  
  
 Można pobrać lub ustawić następujące klucze:  
  
-   a-z, A-Z.  
  
-   CTRL.  
  
-   Znaki interpunkcyjne.  
  
-   Klucze liczb, zarówno w górnej części klawiatury, jak i na klawiaturze numerycznej.  
  
-   ENTER.  
  
 Nie można pobrać lub ustawić następujących kluczy:  
  
-   Klawisz TAB.  
  
-   Wstaw i Usuń.  
  
-   MOWA.  
  
-   END.  
  
-   Strona w górę i w dół.  
  
-   F1-F2.  
  
-   ALT.  
  
-   Klawisze strzałek.  
  
> [!NOTE]
>  Aby uzyskać informacje na temat wykrywania dowolnego z wymienionych powyżej kluczy niebędących znakami, zobacz <xref:System.Windows.Forms.KeyEventArgs> Klasa.  
  
## Examples  
 Poniższy przykład tworzy <xref:System.Windows.Forms.TextBox> kontrolkę. `keypressed` Metoda<xref:System.Windows.Forms.KeyPressEventArgs.KeyChar%2A> używa właściwości, aby sprawdzić, czy naciśnięto klawisz ENTER. Po naciśnięciu <xref:System.Windows.Forms.KeyPressEventArgs.Handled%2A> klawisza ENTER właściwość jest ustawiona na `true`, co oznacza, że zdarzenie jest obsługiwane.  
  
 [!code-cpp[KeyPressEventArgs#1](~/samples/snippets/cpp/VS_Snippets_Winforms/KeyPressEventArgs/CPP/form1.cpp#1)]
 [!code-csharp[KeyPressEventArgs#1](~/samples/snippets/csharp/VS_Snippets_Winforms/KeyPressEventArgs/CS/form1.cs#1)]
 [!code-vb[KeyPressEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/KeyPressEventArgs/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.Control.KeyPress" />
        <altmember cref="M:System.Windows.Forms.Control.IsInputChar(System.Char)" />
      </Docs>
    </Member>
  </Members>
</Type>
