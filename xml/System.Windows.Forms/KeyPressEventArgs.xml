<Type Name="KeyPressEventArgs" FullName="System.Windows.Forms.KeyPressEventArgs">
  <Metadata><Meta Name="ms.openlocfilehash" Value="0a38a98d5a3fecae47017c953aa00e26641afa2a" /><Meta Name="ms.sourcegitcommit" Value="2767b5903996fbd7e2b81eda1114dfc9d0d9db63" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="05/02/2019" /><Meta Name="ms.locfileid" Value="65015532" /></Metadata><TypeSignature Language="C#" Value="public class KeyPressEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit KeyPressEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.KeyPressEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class KeyPressEventArgs&#xA;Inherits EventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class KeyPressEventArgs : EventArgs" />
  <TypeSignature Language="F#" Value="type KeyPressEventArgs = class&#xA;    inherit EventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Udostępnia dane dla <see cref="E:System.Windows.Forms.Control.KeyPress" /> zdarzeń.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.Windows.Forms.KeyPressEventArgs> określa znak, który składa się, gdy użytkownik naciśnie klawisz. Na przykład, gdy użytkownik naciśnie klawisz SHIFT + K, <xref:System.Windows.Forms.KeyPressEventArgs.KeyChar%2A> właściwość zwraca wielkie K.  
  
 A <xref:System.Windows.Forms.Control.KeyPress> zdarzenie występuje, gdy użytkownik naciśnie klawisz. Dwa zdarzenia, które są ściśle związane ze <xref:System.Windows.Forms.Control.KeyPress> zdarzeń są <xref:System.Windows.Forms.Control.KeyUp> i <xref:System.Windows.Forms.Control.KeyDown>. <xref:System.Windows.Forms.Control.KeyDown> Zdarzeń poprzedza każdy <xref:System.Windows.Forms.Control.KeyPress> zdarzenie, kiedy użytkownik naciśnie klawisz i <xref:System.Windows.Forms.Control.KeyUp> zdarzenie występuje, gdy użytkownik zwolni klawisz. Po użytkownik posiada naciśnięty klawisz, zduplikowane <xref:System.Windows.Forms.Control.KeyDown> i <xref:System.Windows.Forms.Control.KeyPress> zdarzenia występują na każdym powtarza znaku. Jeden <xref:System.Windows.Forms.Control.KeyUp> zdarzenie jest generowane po jej udostępnieniu.  
  
 Z każdym <xref:System.Windows.Forms.Control.KeyPress> zdarzenia <xref:System.Windows.Forms.KeyPressEventArgs> jest przekazywany. A <xref:System.Windows.Forms.KeyEventArgs> jest przekazywany z każdym <xref:System.Windows.Forms.Control.KeyDown> i <xref:System.Windows.Forms.Control.KeyUp> zdarzeń. A <xref:System.Windows.Forms.KeyEventArgs> Określa, czy wszystkie klawisze modyfikujące (CTRL, SHIFT lub ALT) zostały naciśnięte wraz z innym kluczem. (Te informacje modyfikator można także uzyskać za pośrednictwem <xref:System.Windows.Forms.Control.ModifierKeys%2A> właściwość <xref:System.Windows.Forms.Control> klasy.)  
  
 Ustaw <xref:System.Windows.Forms.KeyPressEventArgs.Handled%2A> do `true` anulować `KeyPress` zdarzeń. Dzięki temu kontrolkę przetwarzania naciśnięcie klawisza.  
  
> [!NOTE]
>  Niektóre formanty przetworzy niektórych pociągnięć klucza na <xref:System.Windows.Forms.Control.KeyDown>. Na przykład <xref:System.Windows.Forms.RichTextBox> przetwarza klawisza Enter przed <xref:System.Windows.Forms.Control.KeyPress> jest wywoływana. W takich przypadkach nie można anulować <xref:System.Windows.Forms.Control.KeyPress> zdarzenia i anulować naciśnięcie klawisza z <xref:System.Windows.Forms.Control.KeyDown> zamiast tego.  
  
 Aby uzyskać informacje na temat modelu zdarzeń, zobacz [Handling and Raising Events](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 Poniższy przykład ilustruje użycie <xref:System.Windows.Forms.KeyPressEventArgs> klucze są wliczani, ponieważ są naciśnięte przyciski i wyświetlić wyniki po każdym naciśnięcie klawisza. <xref:System.Windows.Forms.KeyPressEventArgs.Handled%2A> następnie ustawiona na wartość PRAWDA, aby zachować systemu operacyjnego z dalszego przetwarzania klucza. W przykładzie założono, formularz z <xref:System.Windows.Forms.TextBox> dla niej.  
  
 [!code-cpp[Classic KeyPressEventArgs Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic KeyPressEventArgs Example/CPP/source.cpp#1)]
 [!code-csharp[Classic KeyPressEventArgs Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic KeyPressEventArgs Example/CS/source.cs#1)]
 [!code-vb[Classic KeyPressEventArgs Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic KeyPressEventArgs Example/VB/source.vb#1)]  
  
 Należy utworzyć nowe wystąpienie tej klasy. Należy także ustawić programu obsługi zdarzeń. Można to zrobić w Konstruktorze dla swojej klasy.  
  
 [!code-cpp[Classic KeyPressEventArgs Example#2](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic KeyPressEventArgs Example/CPP/source2.cpp#2)]
 [!code-csharp[Classic KeyPressEventArgs Example#2](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic KeyPressEventArgs Example/CS/source2.cs#2)]
 [!code-vb[Classic KeyPressEventArgs Example#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic KeyPressEventArgs Example/VB/source2.vb#2)]  
  
 Gdy określone zdarzenie jest zgłaszane w kontrolce, wywoływana jest metoda dołączonych i aplikacja może wykonać kod w odpowiedzi na zdarzenie.  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Windows.Forms.Control.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)" />
    <altmember cref="E:System.Windows.Forms.Control.KeyPress" />
    <altmember cref="T:System.Windows.Forms.KeyEventArgs" />
    <altmember cref="E:System.Windows.Forms.Control.KeyDown" />
    <altmember cref="E:System.Windows.Forms.Control.KeyUp" />
    <altmember cref="P:System.Windows.Forms.Control.ModifierKeys" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public KeyPressEventArgs (char keyChar);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(char keyChar) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.KeyPressEventArgs.#ctor(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (keyChar As Char)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; KeyPressEventArgs(char keyChar);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.KeyPressEventArgs : char -&gt; System.Windows.Forms.KeyPressEventArgs" Usage="new System.Windows.Forms.KeyPressEventArgs keyChar" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="keyChar" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="keyChar">Znak ASCII odpowiadającą kluczowi użytkownik nacisnął klawisz.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Forms.KeyPressEventArgs" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Windows.Forms.Control.ModifierKeys%2A?displayProperty=nameWithType> właściwość, aby uzyskać bieżący stan klawisze modyfikujące.  
  
   
  
## Examples  
 Poniższy przykład wyświetla okno komunikatu, który pokazuje bieżący stan klawisza SHIFT.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Handled">
      <MemberSignature Language="C#" Value="public bool Handled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Handled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.KeyPressEventArgs.Handled" />
      <MemberSignature Language="VB.NET" Value="Public Property Handled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Handled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Handled : bool with get, set" Usage="System.Windows.Forms.KeyPressEventArgs.Handled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą czy <see cref="E:System.Windows.Forms.Control.KeyPress" /> zdarzeń został obsłużony.</summary>
        <value><see langword="true" /> Jeśli zdarzenie jest obsługiwane; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli zdarzenie nie jest obsługiwane, będą wysyłane do systemu operacyjnego do przetworzenia z domyślnego. Ustaw <xref:System.Windows.Forms.KeyPressEventArgs.Handled%2A> do `true` anulować `KeyPress` zdarzeń.  
  
   
  
## Examples  
 Poniższy przykład tworzy <xref:System.Windows.Forms.TextBox> kontroli. `keypressed` Metoda używa <xref:System.Windows.Forms.KeyPressEventArgs.KeyChar%2A> właściwość do sprawdzenia, czy zostanie naciśnięty klawisz ENTER. Jeśli zostanie naciśnięty klawisz ENTER, <xref:System.Windows.Forms.KeyPressEventArgs.Handled%2A> właściwość jest ustawiona na `true`, co oznacza, zdarzenie jest obsługiwane.  
  
 [!code-cpp[KeyPressEventArgs#1](~/samples/snippets/cpp/VS_Snippets_Winforms/KeyPressEventArgs/CPP/form1.cpp#1)]
 [!code-csharp[KeyPressEventArgs#1](~/samples/snippets/csharp/VS_Snippets_Winforms/KeyPressEventArgs/CS/form1.cs#1)]
 [!code-vb[KeyPressEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/KeyPressEventArgs/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.Control.KeyPress" />
      </Docs>
    </Member>
    <Member MemberName="KeyChar">
      <MemberSignature Language="C#" Value="public char KeyChar { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance char KeyChar" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.KeyPressEventArgs.KeyChar" />
      <MemberSignature Language="VB.NET" Value="Public Property KeyChar As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property char KeyChar { char get(); void set(char value); };" />
      <MemberSignature Language="F#" Value="member this.KeyChar : char with get, set" Usage="System.Windows.Forms.KeyPressEventArgs.KeyChar" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia znak odpowiadający naciśniętego klawisza.</summary>
        <value>Znak ASCII, który składa się. Na przykład gdy użytkownik naciśnie klawisz SHIFT + K, właściwość ta zwraca wielkie K.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Windows.Forms.KeyPressEventArgs.KeyChar%2A> właściwości do próbkowania naciśnięć klawiszy w czasie wykonywania, a następnie zmodyfikować naciśnięć klawiszy w szczególnych okolicznościach czasu wykonywania. Na przykład, można użyć <xref:System.Windows.Forms.KeyPressEventArgs.KeyChar%2A> nieliczbową naciśnięć należy wyłączyć, gdy użytkownik wprowadzi kod POCZTOWY, zmienić wszystkie naciśnięć alfabetycznej na wielkie litery w pole wprowadzania danych lub monitorowanie klawiatury lub inne urządzenie wejściowe klucza dla określonej kombinacji klawiszy.  
  
 Można pobrać lub ustawić następujące klucze:  
  
-   a-z, A-Z.  
  
-   CTRL.  
  
-   Znaki interpunkcyjne.  
  
-   Liczba kluczy, zarówno na górze klawiaturę i na klawiaturze numerycznej.  
  
-   ENTER.  
  
 Nie można pobrać lub ustawić następujące klucze:  
  
-   Klawisz TAB.  
  
-   Wstawianie i usuwanie.  
  
-   STRONA GŁÓWNA.  
  
-   END.  
  
-   PAGE UP lub PAGE DOWN.  
  
-   F1-F2.  
  
-   ALT.  
  
-   Klawisze strzałek.  
  
> [!NOTE]
>  Aby dowiedzieć się, jak wykrywać dowolne klawisze nieznakowe wymienionych powyżej, zobacz <xref:System.Windows.Forms.KeyEventArgs> klasy.  
  
-  
  
   
  
## Examples  
 Poniższy przykład tworzy <xref:System.Windows.Forms.TextBox> kontroli. `keypressed` Metoda używa <xref:System.Windows.Forms.KeyPressEventArgs.KeyChar%2A> właściwość do sprawdzenia, czy naciśnięty klawisz ENTER. Jeśli zostanie naciśnięty klawisz ENTER, <xref:System.Windows.Forms.KeyPressEventArgs.Handled%2A> właściwość jest ustawiona na `true`, co oznacza, zdarzenie jest obsługiwane.  
  
 [!code-cpp[KeyPressEventArgs#1](~/samples/snippets/cpp/VS_Snippets_Winforms/KeyPressEventArgs/CPP/form1.cpp#1)]
 [!code-csharp[KeyPressEventArgs#1](~/samples/snippets/csharp/VS_Snippets_Winforms/KeyPressEventArgs/CS/form1.cs#1)]
 [!code-vb[KeyPressEventArgs#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/KeyPressEventArgs/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.Control.KeyPress" />
        <altmember cref="M:System.Windows.Forms.Control.IsInputChar(System.Char)" />
      </Docs>
    </Member>
  </Members>
</Type>