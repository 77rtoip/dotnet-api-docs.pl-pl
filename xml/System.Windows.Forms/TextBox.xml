<Type Name="TextBox" FullName="System.Windows.Forms.TextBox">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="0c781ba2c48d47bfc8148e34a5813b4a9c9e0568" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36513479" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class TextBox : System.Windows.Forms.TextBoxBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TextBox extends System.Windows.Forms.TextBoxBase" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.TextBox" />
  <TypeSignature Language="VB.NET" Value="Public Class TextBox&#xA;Inherits TextBoxBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class TextBox : System::Windows::Forms::TextBoxBase" />
  <TypeSignature Language="F#" Value="type TextBox = class&#xA;    inherit TextBoxBase" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Forms.TextBoxBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Windows.Forms.Design.TextBoxDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Reprezentuje polu tekstowym systemu Windows.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Z <xref:System.Windows.Forms.TextBox> kontroli, użytkownik może wprowadzić tekst w aplikacji. Ten formant ma dodatkowe funkcje, które nie zostało odnalezione w standardowe Windows kontrolki pola tekstowego, w tym edytowanie wielu wierszy oraz maskowanie znaków hasła.  
  
 Zazwyczaj <xref:System.Windows.Forms.TextBox> formant jest używany do wyświetlania lub zaakceptować jako dane wejściowe, pojedynczy wiersz tekstu. Można użyć <xref:System.Windows.Forms.TextBoxBase.Multiline%2A> i <xref:System.Windows.Forms.TextBox.ScrollBars%2A> właściwości, aby umożliwić wiele wierszy tekstu, które mają być wyświetlane lub wprowadzony. Ustaw <xref:System.Windows.Forms.TextBoxBase.AcceptsTab%2A> i <xref:System.Windows.Forms.TextBox.AcceptsReturn%2A> właściwości `true` umożliwiające większa manipulowania tekstu w wielowierszowym formancie <xref:System.Windows.Forms.TextBox> formantu.  
  
> [!NOTE]
>  Należy ustawić <xref:System.Windows.Forms.TextBoxBase.Multiline%2A> właściwości `true` może dostosować wysokość <xref:System.Windows.Forms.TextBox> formantu. Użytkownik może dostosować wysokość przez ustawienie <xref:System.Windows.Forms.Control.Size%2A> właściwości.  
  
 Można ograniczyć ilość tekst wprowadzony w <xref:System.Windows.Forms.TextBox> kontroli przez ustawienie <xref:System.Windows.Forms.TextBoxBase.MaxLength%2A> właściwości na określoną liczbę znaków. <xref:System.Windows.Forms.TextBox> Formanty mogą służyć do akceptowania haseł i innych informacji poufnych. Można użyć <xref:System.Windows.Forms.TextBox.PasswordChar%2A> właściwości znaków maski wprowadzonych w wersji jednowierszowego formantu. Użyj <xref:System.Windows.Forms.TextBox.CharacterCasing%2A> właściwości, aby umożliwić użytkownikowi tylko typu tylko liter lub kombinacji wielkich i małych liter w <xref:System.Windows.Forms.TextBox> formantu.  
  
 Przewijanie zawartości <xref:System.Windows.Forms.TextBox> dopóki kursor (daszek) znajduje się w regionie visible formantu, można użyć <xref:System.Windows.Forms.TextBoxBase.ScrollToCaret%2A> metody. Aby wybrać zakres tekstu w polu tekstowym, można użyć <xref:System.Windows.Forms.TextBoxBase.Select%2A> metody.  
  
 Aby uniemożliwić tekst wprowadzanych w <xref:System.Windows.Forms.TextBox> formantu, można utworzyć programu obsługi zdarzeń dla <xref:System.Windows.Forms.Control.KeyDown> zdarzeń, aby sprawdzić poprawność każdego znaku wprowadzony w formancie. Można również ograniczyć zapis wszystkich danych w <xref:System.Windows.Forms.TextBox> kontroli przez ustawienie <xref:System.Windows.Forms.TextBoxBase.ReadOnly%2A> właściwości `true`.  
  
> [!NOTE]
>  Większość funkcji <xref:System.Windows.Forms.TextBox> kontroli jest odziedziczone <xref:System.Windows.Forms.TextBoxBase> klasy.  
>   
>  Przy użyciu <xref:System.Windows.Forms.TextBox> kontrolą przy włączonej funkcji stylów wizualnych spowoduje, że nieprawidłowa obsługa czcionek dwuskładnikowego.  
  
   
  
## Examples  
 Poniższy przykład kodu tworzy wielowierszowym formancie <xref:System.Windows.Forms.TextBox> formantu o pionowe paski przewijania. W tym przykładzie użyto <xref:System.Windows.Forms.TextBoxBase.AcceptsTab%2A>, <xref:System.Windows.Forms.TextBox.AcceptsReturn%2A>, i <xref:System.Windows.Forms.Control.Dock%2A> właściwości, aby wielowierszowym polu tekstowym przydatne przy tworzeniu dokumentów tekstowych.  
  
 [!code-csharp[Classic TextBox Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic TextBox Example/CS/source.cs#1)]
 [!code-vb[Classic TextBox Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic TextBox Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.TextBoxBase" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TextBox ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TextBox.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TextBox();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Forms.TextBox" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Formantu kontenera nadrzędnego definiuje ustawienia kolorów i czcionek <xref:System.Windows.Forms.TextBox>.  
  
   
  
## Examples  
 Poniższy przykład kodu tworzy nowe wystąpienie klasy <xref:System.Windows.Forms.TextBox> kontroli i przypisuje ciąg do formantu <xref:System.Windows.Forms.TextBoxBase.Text%2A> właściwości.  
  
 [!code-cpp[Classic TextBox.TextBox Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic TextBox.TextBox Example/CPP/source.cpp#1)]
 [!code-csharp[Classic TextBox.TextBox Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic TextBox.TextBox Example/CS/source.cs#1)]
 [!code-vb[Classic TextBox.TextBox Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic TextBox.TextBox Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AcceptsReturn">
      <MemberSignature Language="C#" Value="public bool AcceptsReturn { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AcceptsReturn" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TextBox.AcceptsReturn" />
      <MemberSignature Language="VB.NET" Value="Public Property AcceptsReturn As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AcceptsReturn { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AcceptsReturn : bool with get, set" Usage="System.Windows.Forms.TextBox.AcceptsReturn" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy naciśnięcie klawisza ENTER w wielowierszowym formancie <see cref="T:System.Windows.Forms.TextBox" /> formantu tworzy nowy wiersz tekstu w formancie lub aktywuje przycisk domyślny w formularzu.</summary>
        <value>
          <see langword="true" /> Jeśli klawisz ENTER tworzy nowy wiersz tekstu w wielowierszowym wersji kontroli. <see langword="false" /> Jeśli klawisza ENTER aktywuje przycisk domyślny w formularzu. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli wartość tej właściwości jest `false`, użytkownik musi nacisnąć klawisze CTRL + ENTER, aby utworzyć nowy wiersz w wielowierszowym formancie <xref:System.Windows.Forms.TextBox> formantu. Jeśli nie jest dostępny przycisk domyślny w formularzu, klawisza ENTER zawsze utworzy nowy wiersz tekstu w formancie, niezależnie od wartości tej właściwości.  
  
   
  
## Examples  
 Poniższy przykład kodu tworzy wielowierszowym formancie <xref:System.Windows.Forms.TextBox> formantu o pionowe paski przewijania. W tym przykładzie użyto <xref:System.Windows.Forms.TextBoxBase.AcceptsTab%2A>, <xref:System.Windows.Forms.TextBox.AcceptsReturn%2A>, i <xref:System.Windows.Forms.TextBoxBase.WordWrap%2A> właściwości, aby wielowierszowym polu tekstowym przydatne przy tworzeniu dokumentów tekstowych.  
  
 [!code-cpp[Classic TextBox.AcceptsReturn Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic TextBox.AcceptsReturn Example/CPP/source.cpp#1)]
 [!code-csharp[Classic TextBox.AcceptsReturn Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic TextBox.AcceptsReturn Example/CS/source.cs#1)]
 [!code-vb[Classic TextBox.AcceptsReturn Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic TextBox.AcceptsReturn Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AutoCompleteCustomSource">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.AutoCompleteStringCollection AutoCompleteCustomSource { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.AutoCompleteStringCollection AutoCompleteCustomSource" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TextBox.AutoCompleteCustomSource" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoCompleteCustomSource As AutoCompleteStringCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::AutoCompleteStringCollection ^ AutoCompleteCustomSource { System::Windows::Forms::AutoCompleteStringCollection ^ get(); void set(System::Windows::Forms::AutoCompleteStringCollection ^ value); };" />
      <MemberSignature Language="F#" Value="member this.AutoCompleteCustomSource : System.Windows.Forms.AutoCompleteStringCollection with get, set" Usage="System.Windows.Forms.TextBox.AutoCompleteCustomSource" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.ListControlStringCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Always)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.AutoCompleteStringCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia niestandardowego <see cref="T:System.Collections.Specialized.StringCollection" /> do użycia podczas <see cref="P:System.Windows.Forms.TextBox.AutoCompleteSource" /> właściwość jest ustawiona na <see langword="CustomSource" />.</summary>
        <value>A <see cref="T:System.Collections.Specialized.StringCollection" /> do użycia z <see cref="P:System.Windows.Forms.TextBox.AutoCompleteSource" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Windows.Forms.TextBox.AutoCompleteCustomSource%2A>, <xref:System.Windows.Forms.TextBox.AutoCompleteMode%2A>, i <xref:System.Windows.Forms.TextBox.AutoCompleteSource%2A> właściwości w celu utworzenia <xref:System.Windows.Forms.TextBox> który automatycznie wykonuje ciągów wejściowych przez porównanie prefiks wprowadzane do prefiksów wszystkich ciągów w obsługiwanych źródła. Jest to przydatne w przypadku <xref:System.Windows.Forms.TextBox> kontrolki, w których adresy URL, adresy, nazwy pliku lub polecenia będzie często wprowadzane.  
  
 Korzystanie z <xref:System.Windows.Forms.TextBox.AutoCompleteCustomSource%2A> właściwość jest opcjonalna, ale należy ustawić <xref:System.Windows.Forms.TextBox.AutoCompleteSource%2A> właściwości `CustomSource` aby można było używać <xref:System.Windows.Forms.TextBox.AutoCompleteCustomSource%2A>.  
  
 Należy użyć <xref:System.Windows.Forms.TextBox.AutoCompleteMode%2A> i <xref:System.Windows.Forms.TextBox.AutoCompleteSource%2A> razem właściwości.  
  
> [!NOTE]
>  System operacyjny może ograniczyć liczbę niestandardowych ciągów, które można wyświetlić na raz.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, jak używać kolekcji jako funkcja automatycznego uzupełniania Źródło niestandardowe dla <xref:System.Windows.Forms.TextBox> formantu. W tym przykładzie przeprowadza następujące działania:  
  
-   Używa <xref:System.Windows.Forms.TextBox.AutoCompleteSource%2A> właściwości, aby włączyć <xref:System.Windows.Forms.TextBox> formantu, aby zaakceptować źródła niestandardowego zachowanie automatycznego zakończenia.  
  
-   Używa <xref:System.Windows.Forms.TextBox.AutoCompleteCustomSource%2A> właściwości ustawiono niestandardowe listy wartości.  
  
-   Używa <xref:System.Windows.Forms.TextBox.AutoCompleteMode%2A> właściwości do ustawienia wyświetlania kandydatów automatycznego zakończenia.  
  
 [!code-csharp[System.Windows.Forms.TextBox.AutoCompleteCustomSource#10](~/samples/snippets/csharp/VS_Snippets_Winforms/system.windows.forms.textbox.autocompletecustomsource/cs/form1.cs#10)]
 [!code-vb[System.Windows.Forms.TextBox.AutoCompleteCustomSource#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/system.windows.forms.textbox.autocompletecustomsource/vb/form1.vb#10)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.TextBox.AutoCompleteSource" />
        <altmember cref="P:System.Windows.Forms.TextBox.AutoCompleteMode" />
      </Docs>
    </Member>
    <Member MemberName="AutoCompleteMode">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.AutoCompleteMode AutoCompleteMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.AutoCompleteMode AutoCompleteMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TextBox.AutoCompleteMode" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoCompleteMode As AutoCompleteMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::AutoCompleteMode AutoCompleteMode { System::Windows::Forms::AutoCompleteMode get(); void set(System::Windows::Forms::AutoCompleteMode value); };" />
      <MemberSignature Language="F#" Value="member this.AutoCompleteMode : System.Windows.Forms.AutoCompleteMode with get, set" Usage="System.Windows.Forms.TextBox.AutoCompleteMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Always)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.AutoCompleteMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia opcję, która kontroluje sposób automatycznego uzupełniania działa w przypadku <see cref="T:System.Windows.Forms.TextBox" />.</summary>
        <value>Jedną z wartości <see cref="T:System.Windows.Forms.AutoCompleteMode" />. Poniżej przedstawiono wartości.  
  
 <see cref="F:System.Windows.Forms.AutoCompleteMode.Append" /> Dołącza w pozostałej części najprawdopodobniej ciąg candidate istniejące pliki, wyróżnianie dołączany znaków.  
  
 <see cref="F:System.Windows.Forms.AutoCompleteMode.Suggest" /> Wyświetla pomocnicze listy rozwijanej skojarzony z formantem edycji. Tej listy rozwijanej jest wypełniane przy użyciu jednego lub kilku ciągów sugerowane ukończenia.  
  
 <see cref="F:System.Windows.Forms.AutoCompleteMode.SuggestAppend" /> Dołącza zarówno <see langword="Suggest" /> i <see langword="Append" /> opcje.  
  
 <see cref="F:System.Windows.Forms.AutoCompleteMode.None" /> Powoduje wyłączenie automatycznego uzupełniania. Domyślnie włączone.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Windows.Forms.TextBox.AutoCompleteCustomSource%2A>, <xref:System.Windows.Forms.TextBox.AutoCompleteMode%2A>, i <xref:System.Windows.Forms.TextBox.AutoCompleteSource%2A> właściwości w celu utworzenia <xref:System.Windows.Forms.TextBox> który automatycznie wykonuje ciągów wejściowych przez porównanie prefiks wprowadzane do prefiksów wszystkich ciągów w obsługiwanych źródła. Jest to przydatne w przypadku <xref:System.Windows.Forms.TextBox> kontrolki, w których adresy URL, adresy, nazwy pliku lub polecenia będzie często wprowadzane.  
  
 Korzystanie z <xref:System.Windows.Forms.TextBox.AutoCompleteCustomSource%2A> właściwość jest opcjonalna, ale należy ustawić <xref:System.Windows.Forms.TextBox.AutoCompleteSource%2A> właściwości `CustomSource` aby można było używać <xref:System.Windows.Forms.TextBox.AutoCompleteCustomSource%2A>.  
  
 Należy użyć <xref:System.Windows.Forms.TextBox.AutoCompleteMode%2A> i <xref:System.Windows.Forms.TextBox.AutoCompleteSource%2A> razem właściwości.  
  
> [!NOTE]
>  System operacyjny może ograniczyć liczbę niestandardowych ciągów, które można wyświetlić na raz.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, jak używać kolekcji jako funkcja automatycznego uzupełniania Źródło niestandardowe dla <xref:System.Windows.Forms.TextBox> formantu. W tym przykładzie przeprowadza następujące działania:  
  
-   Używa <xref:System.Windows.Forms.TextBox.AutoCompleteSource%2A> właściwości, aby włączyć <xref:System.Windows.Forms.TextBox> formantu, aby zaakceptować źródła niestandardowego zachowanie automatycznego zakończenia.  
  
-   Używa <xref:System.Windows.Forms.TextBox.AutoCompleteCustomSource%2A> właściwości ustawiono niestandardowe listy wartości.  
  
-   Używa <xref:System.Windows.Forms.TextBox.AutoCompleteMode%2A> właściwości do ustawienia wyświetlania kandydatów automatycznego zakończenia.  
  
 [!code-csharp[System.Windows.Forms.TextBox.AutoCompleteCustomSource#10](~/samples/snippets/csharp/VS_Snippets_Winforms/system.windows.forms.textbox.autocompletecustomsource/cs/form1.cs#10)]
 [!code-vb[System.Windows.Forms.TextBox.AutoCompleteCustomSource#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/system.windows.forms.textbox.autocompletecustomsource/vb/form1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Określona wartość nie jest jedną z wartości <see cref="T:System.Windows.Forms.AutoCompleteMode" />.</exception>
        <altmember cref="P:System.Windows.Forms.TextBox.AutoCompleteCustomSource" />
        <altmember cref="P:System.Windows.Forms.TextBox.AutoCompleteSource" />
      </Docs>
    </Member>
    <Member MemberName="AutoCompleteSource">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.AutoCompleteSource AutoCompleteSource { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.AutoCompleteSource AutoCompleteSource" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TextBox.AutoCompleteSource" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoCompleteSource As AutoCompleteSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::AutoCompleteSource AutoCompleteSource { System::Windows::Forms::AutoCompleteSource get(); void set(System::Windows::Forms::AutoCompleteSource value); };" />
      <MemberSignature Language="F#" Value="member this.AutoCompleteSource : System.Windows.Forms.AutoCompleteSource with get, set" Usage="System.Windows.Forms.TextBox.AutoCompleteSource" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Always)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.Windows.Forms.TextBoxAutoCompleteSourceConverter))</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.AutoCompleteSource</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość określającą Źródło kompletnych ciągów używanych do automatycznego uzupełniania.</summary>
        <value>Jedną z wartości <see cref="T:System.Windows.Forms.AutoCompleteSource" />. Dostępne są następujące opcje <see langword="AllSystemSources" />, <see langword="AllUrl" />, <see langword="FileSystem" />, <see langword="HistoryList" />, <see langword="RecentlyUsedList" />, <see langword="CustomSource" />, i <see langword="None" />. Wartość domyślna to <see langword="None" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Windows.Forms.TextBox.AutoCompleteCustomSource%2A>, <xref:System.Windows.Forms.TextBox.AutoCompleteMode%2A>, i <xref:System.Windows.Forms.TextBox.AutoCompleteSource%2A> właściwości w celu utworzenia <xref:System.Windows.Forms.TextBox> który automatycznie wykonuje ciągów wejściowych przez porównanie prefiks wprowadzane do prefiksów wszystkich ciągów w obsługiwanych źródła. Jest to przydatne w przypadku <xref:System.Windows.Forms.TextBox> kontrolki, w których adresy URL, adresy, nazwy pliku lub polecenia będzie często wprowadzane.  
  
 Korzystanie z <xref:System.Windows.Forms.TextBox.AutoCompleteCustomSource%2A> właściwość jest opcjonalna, ale należy ustawić <xref:System.Windows.Forms.TextBox.AutoCompleteSource%2A> właściwości `CustomSource` aby można było używać <xref:System.Windows.Forms.TextBox.AutoCompleteCustomSource%2A>.  
  
 Należy użyć <xref:System.Windows.Forms.TextBox.AutoCompleteMode%2A> i <xref:System.Windows.Forms.TextBox.AutoCompleteSource%2A> razem właściwości.  
  
> [!NOTE]
>  <xref:System.Windows.Forms.TextBox.AutoCompleteSource%2A> nie działa w wielowierszowych <xref:System.Windows.Forms.TextBox> kontrolki.  
  
> [!NOTE]
>  System operacyjny może ograniczyć liczbę niestandardowych ciągów, które mogą być jednocześnie wyświetlane.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, jak używać kolekcji jako funkcja automatycznego uzupełniania Źródło niestandardowe dla <xref:System.Windows.Forms.TextBox> formantu. W tym przykładzie przeprowadza następujące działania:  
  
-   Używa <xref:System.Windows.Forms.TextBox.AutoCompleteSource%2A> właściwości, aby włączyć <xref:System.Windows.Forms.TextBox> formantu, aby zaakceptować źródła niestandardowego zachowanie automatycznego zakończenia.  
  
-   Używa <xref:System.Windows.Forms.TextBox.AutoCompleteCustomSource%2A> właściwości ustawiono niestandardowe listy wartości.  
  
-   Używa <xref:System.Windows.Forms.TextBox.AutoCompleteMode%2A> właściwości do ustawienia wyświetlania kandydatów automatycznego zakończenia.  
  
 [!code-csharp[System.Windows.Forms.TextBox.AutoCompleteCustomSource#10](~/samples/snippets/csharp/VS_Snippets_Winforms/system.windows.forms.textbox.autocompletecustomsource/cs/form1.cs#10)]
 [!code-vb[System.Windows.Forms.TextBox.AutoCompleteCustomSource#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/system.windows.forms.textbox.autocompletecustomsource/vb/form1.vb#10)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Określona wartość nie jest jedną z wartości <see cref="T:System.Windows.Forms.AutoCompleteSource" />.</exception>
        <altmember cref="P:System.Windows.Forms.TextBox.AutoCompleteCustomSource" />
        <altmember cref="P:System.Windows.Forms.TextBox.AutoCompleteMode" />
      </Docs>
    </Member>
    <Member MemberName="CharacterCasing">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.CharacterCasing CharacterCasing { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.CharacterCasing CharacterCasing" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TextBox.CharacterCasing" />
      <MemberSignature Language="VB.NET" Value="Public Property CharacterCasing As CharacterCasing" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::CharacterCasing CharacterCasing { System::Windows::Forms::CharacterCasing get(); void set(System::Windows::Forms::CharacterCasing value); };" />
      <MemberSignature Language="F#" Value="member this.CharacterCasing : System.Windows.Forms.CharacterCasing with get, set" Usage="System.Windows.Forms.TextBox.CharacterCasing" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.CharacterCasing</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia czy <see cref="T:System.Windows.Forms.TextBox" /> kontroli modyfikuje wielkość liter w trakcie wpisywania ich.</summary>
        <value>Jeden z <see cref="T:System.Windows.Forms.CharacterCasing" /> wartości wyliczenia, które określa, czy <see cref="T:System.Windows.Forms.TextBox" /> kontroli modyfikuje wielkość liter. Wartość domyślna to <see langword="CharacterCasing.Normal" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można użyć <xref:System.Windows.Forms.TextBox.CharacterCasing%2A> właściwości do zmiany wielkością liter, co jest wymagane przez aplikację. Na przykład można zmienić w przypadku wszystkich znaków wprowadzonych w <xref:System.Windows.Forms.TextBox> kontrolkę służącą do wprowadzenia hasła na wielkie lub małe litery do wymuszania zasad haseł.  
  
   
  
## Examples  
 Poniższy przykład kodu tworzy <xref:System.Windows.Forms.TextBox> formant, który jest używany do akceptowania hasła. W tym przykładzie użyto <xref:System.Windows.Forms.TextBox.CharacterCasing%2A> właściwości do zmiany wszystkich znaków wpisany do małych liter i <xref:System.Windows.Forms.TextBoxBase.MaxLength%2A> właściwość, aby ograniczyć długość hasła to 8 znaków. W tym przykładzie również używane <xref:System.Windows.Forms.TextBox.TextAlign%2A> właściwości do środka hasło w <xref:System.Windows.Forms.TextBox> formantu.  
  
 [!code-cpp[Classic TextBox.CharacterCasing Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic TextBox.CharacterCasing Example/CPP/source.cpp#1)]
 [!code-csharp[Classic TextBox.CharacterCasing Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic TextBox.CharacterCasing Example/CS/source.cs#1)]
 [!code-vb[Classic TextBox.CharacterCasing Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic TextBox.CharacterCasing Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Wartość, która nie jest spoza zakresu prawidłowych wartości wyliczania została przypisana do właściwości.</exception>
        <altmember cref="T:System.Windows.Forms.CharacterCasing" />
      </Docs>
    </Member>
    <Member MemberName="CreateParams">
      <MemberSignature Language="C#" Value="protected override System.Windows.Forms.CreateParams CreateParams { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.CreateParams CreateParams" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TextBox.CreateParams" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property CreateParams As CreateParams" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Windows::Forms::CreateParams ^ CreateParams { System::Windows::Forms::CreateParams ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CreateParams : System.Windows.Forms.CreateParams" Usage="System.Windows.Forms.TextBox.CreateParams" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.CreateParams</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera parametry tworzenia wymagane, gdy zostanie utworzony uchwyt formantu.</summary>
        <value>A <see cref="T:System.Windows.Forms.CreateParams" /> zawierający tworzenia wymaganych parametrów podczas tworzenia uchwytu do formantu.</value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Forms.CreateParams" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TextBox.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="textBox.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <see langword="true" /> Aby zwolnić zasoby zarządzane i niezarządzane; <see langword="false" /> aby zwolnić tylko zasoby niezarządzane.</param>
        <summary>Zwalnia zasoby niezarządzane używane przez <see cref="T:System.Windows.Forms.TextBox" /> i opcjonalnie zwalnia zasoby zarządzane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda jest wywoływana przez metodę publiczną `Dispose` — metoda i <xref:System.Object.Finalize%2A> metody. `Dispose` wywołuje chronioną metodę `Dispose(Boolean)` metody z `disposing` ustawiono parametr `true`. <xref:System.Object.Finalize%2A> wywołuje `Dispose` z `disposing` ustawioną `false`.  
  
 Gdy `disposing` parametr jest `true`, ta metoda zwalnia wszystkie zasoby zajmowane przez wszelkie obiekty zarządzane przez to <xref:System.Windows.Forms.TextBox> odwołania. Ta metoda wywołuje `Dispose` metody każdego odwołuje się do obiektu.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <see langword="Dispose" /> można wywoływać wielokrotnie przez inne obiekty. W przypadku przesłaniania <see langword="Dispose(Boolean)" />, nie odwołują się obiekty, które zostały wcześniej zlikwidowane w wywołaniu wcześniejszych <see langword="Dispose" />. Aby uzyskać więcej informacji na temat sposobu wdrażania <see langword="Dispose(Boolean)" />, zobacz [implementacja Method](~/docs/standard/garbage-collection/implementing-dispose.md) Dispose.  Aby uzyskać więcej informacji na temat <see langword="Dispose" /> i <see cref="M:System.Object.Finalize" />, zobacz [czyszczenia Resources](~/docs/standard/garbage-collection/unmanaged.md) niezarządzane i [zastąpienie metody Finalize] (http://msdn.microsoft.com/library/8026cb68-fe93-43fc-96c1-c09ad7d64cd3).</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="IsInputKey">
      <MemberSignature Language="C#" Value="protected override bool IsInputKey (System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool IsInputKey(valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TextBox.IsInputKey(System.Windows.Forms.Keys)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function IsInputKey (keyData As Keys) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool IsInputKey(System::Windows::Forms::Keys keyData);" />
      <MemberSignature Language="F#" Value="override this.IsInputKey : System.Windows.Forms.Keys -&gt; bool" Usage="textBox.IsInputKey keyData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="keyData">Jedna z wartości klucza.</param>
        <summary>Określa, czy określony klucz jest kluczem wejściowy lub specjalny klucz, który wymaga przetwarzania wstępnego.</summary>
        <returns>
          <see langword="true" /> Jeśli określony klucz jest kluczem wejściowych; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.TextBox.IsInputKey%2A> Metoda zwraca `true` podczas `keyData` obejmuje <xref:System.Windows.Forms.Keys.Return> wartość i <xref:System.Windows.Forms.TextBox.AcceptsReturn%2A> jest właściwość `true`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Multiline">
      <MemberSignature Language="C#" Value="public override bool Multiline { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Multiline" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TextBox.Multiline" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Multiline As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool Multiline { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Multiline : bool with get, set" Usage="System.Windows.Forms.TextBox.Multiline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy jest to wielowierszowy <see cref="T:System.Windows.Forms.TextBox" /> formantu.</summary>
        <value>
          <see langword="true" /> Jeśli formant jest w wielowierszowym formancie <see cref="T:System.Windows.Forms.TextBox" /> kontrolować; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.TextBox.AutoCompleteSource%2A> nie działa w wielowierszowych <xref:System.Windows.Forms.TextBox> kontrolki.  
  
 Po zmianie czcionki wcięcie zdefiniowanej przez użytkownika nie jest widoczna. Aby uzyskać wcięcia, ustaw <xref:System.Windows.Forms.TextBox.Multiline%2A> do `true` i zastąpić WM_SETFONT bez wywoływania klasy podstawowej, dzięki czemu SETMARGINS nie jest wywoływany.  
  
   
  
## Examples  
 Poniższy przykład kodu tworzy wielowierszowym formancie <xref:System.Windows.Forms.TextBox> formantu o pionowe paski przewijania. W tym przykładzie użyto <xref:System.Windows.Forms.TextBoxBase.AcceptsTab%2A>, <xref:System.Windows.Forms.TextBox.AcceptsReturn%2A>, i <xref:System.Windows.Forms.TextBoxBase.WordWrap%2A> właściwości, aby wielowierszowym polu tekstowym przydatne przy tworzeniu dokumentów tekstowych.  
  
 [!code-cpp[Classic TextBox.AcceptsReturn Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic TextBox.AcceptsReturn Example/CPP/source.cpp#1)]
 [!code-csharp[Classic TextBox.AcceptsReturn Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic TextBox.AcceptsReturn Example/CS/source.cs#1)]
 [!code-vb[Classic TextBox.AcceptsReturn Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic TextBox.AcceptsReturn Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnBackColorChanged">
      <MemberSignature Language="C#" Value="protected override void OnBackColorChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnBackColorChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TextBox.OnBackColorChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnBackColorChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnBackColorChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnBackColorChanged : EventArgs -&gt; unit" Usage="textBox.OnBackColorChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.EventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Zgłasza <see cref="E:System.Windows.Forms.Control.BackColorChanged" /> zdarzeń.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podnoszenie zdarzenia wywołuje program obsługi zdarzeń przez delegata. Aby uzyskać więcej informacji, zobacz [Obsługa i wywoływanie zdarzeń](~/docs/standard/events/index.md).  
  
 <xref:System.Windows.Forms.TextBox.OnBackColorChanged%2A> Metoda umożliwia również klas pochodnych do obsługi zdarzenia bez dołączanie delegata. Jest to preferowana metoda obsługi zdarzeń w klasie pochodnej.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>W przypadku przesłaniania <see cref="M:System.Windows.Forms.TextBox.OnBackColorChanged(System.EventArgs)" /> w klasie pochodnej, należy wywołać klasy podstawowej <see cref="M:System.Windows.Forms.TextBox.OnBackColorChanged(System.EventArgs)" /> metody, które zarejestrowane delegatów odbierać zdarzenia.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnFontChanged">
      <MemberSignature Language="C#" Value="protected override void OnFontChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnFontChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TextBox.OnFontChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnFontChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnFontChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnFontChanged : EventArgs -&gt; unit" Usage="textBox.OnFontChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.EventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Zgłasza <see cref="E:System.Windows.Forms.Control.FontChanged" /> zdarzeń.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podnoszenie zdarzenia wywołuje program obsługi zdarzeń przez delegata. Aby uzyskać więcej informacji, zobacz [Obsługa i wywoływanie zdarzeń](~/docs/standard/events/index.md).  
  
 <xref:System.Windows.Forms.TextBox.OnFontChanged%2A> Metoda umożliwia również klas pochodnych do obsługi zdarzenia bez dołączanie delegata. Jest to preferowana metoda obsługi zdarzeń w klasie pochodnej.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>W przypadku przesłaniania <see cref="M:System.Windows.Forms.TextBox.OnFontChanged(System.EventArgs)" /> w klasie pochodnej, należy wywołać klasy podstawowej <see cref="M:System.Windows.Forms.TextBox.OnFontChanged(System.EventArgs)" /> metody, które zarejestrowane delegatów odbierać zdarzenia.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnGotFocus">
      <MemberSignature Language="C#" Value="protected override void OnGotFocus (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnGotFocus(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TextBox.OnGotFocus(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnGotFocus (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnGotFocus(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnGotFocus : EventArgs -&gt; unit" Usage="textBox.OnGotFocus e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.EventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Zgłasza <see cref="E:System.Windows.Forms.Control.GotFocus" /> zdarzeń.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy użytkownik wybierze tekstu w <xref:System.Windows.Forms.TextBox> formantu formant zapisuje zaznaczenia. Gdy <xref:System.Windows.Forms.TextBox> formant uzyska fokus, zaznaczenie jest taka sama jak kiedy <xref:System.Windows.Forms.TextBox> utraci fokus. Gdy <xref:System.Windows.Forms.TextBox> pobiera skupić się po raz pierwszy, zostanie wybrana cały tekst.  
  
 Podnoszenie zdarzenia wywołuje program obsługi zdarzeń przez delegata. Aby uzyskać więcej informacji, zobacz [Obsługa i wywoływanie zdarzeń](~/docs/standard/events/index.md).  
  
 <xref:System.Windows.Forms.TextBox.OnGotFocus%2A> Metoda umożliwia również klas pochodnych do obsługi zdarzenia bez dołączanie delegata. Jest to preferowana metoda obsługi zdarzeń w klasie pochodnej.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>W przypadku przesłaniania <see cref="M:System.Windows.Forms.TextBox.OnGotFocus(System.EventArgs)" /> w klasie pochodnej, należy wywołać klasy podstawowej <see cref="M:System.Windows.Forms.TextBox.OnGotFocus(System.EventArgs)" /> metody, które zarejestrowane delegatów odbierać zdarzenia.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnHandleCreated">
      <MemberSignature Language="C#" Value="protected override void OnHandleCreated (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnHandleCreated(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TextBox.OnHandleCreated(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnHandleCreated (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnHandleCreated(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnHandleCreated : EventArgs -&gt; unit" Usage="textBox.OnHandleCreated e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Dane dotyczące zdarzenia.</param>
        <summary>Zgłasza <see cref="E:System.Windows.Forms.Control.HandleCreated" /> zdarzeń.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnHandleDestroyed">
      <MemberSignature Language="C#" Value="protected override void OnHandleDestroyed (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnHandleDestroyed(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TextBox.OnHandleDestroyed(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnHandleDestroyed (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnHandleDestroyed(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnHandleDestroyed : EventArgs -&gt; unit" Usage="textBox.OnHandleDestroyed e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.EventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Zgłasza <see cref="M:System.Windows.Forms.Control.OnHandleDestroyed(System.EventArgs)" /> zdarzeń.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podnoszenie zdarzenia wywołuje program obsługi zdarzeń przez delegata. Aby uzyskać więcej informacji, zobacz [Obsługa i wywoływanie zdarzeń](~/docs/standard/events/index.md).  
  
 <xref:System.Windows.Forms.TextBox.OnHandleDestroyed%2A> Metoda umożliwia również klas pochodnych do obsługi zdarzenia bez dołączanie delegata. Jest to preferowana metoda obsługi zdarzeń w klasie pochodnej.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>W przypadku przesłaniania <see cref="M:System.Windows.Forms.TextBox.OnHandleDestroyed(System.EventArgs)" /> w klasie pochodnej, należy wywołać klasy podstawowej <see cref="M:System.Windows.Forms.TextBox.OnHandleDestroyed(System.EventArgs)" /> metody, które zarejestrowane delegatów odbierać zdarzenia.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnTextAlignChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnTextAlignChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTextAlignChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TextBox.OnTextAlignChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTextAlignChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTextAlignChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTextAlignChanged : EventArgs -&gt; unit&#xA;override this.OnTextAlignChanged : EventArgs -&gt; unit" Usage="textBox.OnTextAlignChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.EventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Zgłasza <see cref="E:System.Windows.Forms.TextBox.TextAlignChanged" /> zdarzeń.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podnoszenie zdarzenia wywołuje program obsługi zdarzeń przez delegata. Aby uzyskać więcej informacji, zobacz [Obsługa i wywoływanie zdarzeń](~/docs/standard/events/index.md).  
  
 <xref:System.Windows.Forms.TextBox.OnTextAlignChanged%2A> Metoda umożliwia również klas pochodnych do obsługi zdarzenia bez dołączanie delegata. Jest to preferowana metoda obsługi zdarzeń w klasie pochodnej.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>W przypadku przesłaniania <see cref="M:System.Windows.Forms.TextBox.OnTextAlignChanged(System.EventArgs)" /> w klasie pochodnej, należy wywołać klasy podstawowej <see cref="M:System.Windows.Forms.TextBox.OnTextAlignChanged(System.EventArgs)" /> metody, które zarejestrowane delegatów odbierać zdarzenia.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.TextBox.TextAlignChanged" />
        <altmember cref="P:System.Windows.Forms.TextBox.TextAlign" />
      </Docs>
    </Member>
    <Member MemberName="PasswordChar">
      <MemberSignature Language="C#" Value="public char PasswordChar { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance char PasswordChar" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TextBox.PasswordChar" />
      <MemberSignature Language="VB.NET" Value="Public Property PasswordChar As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property char PasswordChar { char get(); void set(char value); };" />
      <MemberSignature Language="F#" Value="member this.PasswordChar : char with get, set" Usage="System.Windows.Forms.TextBox.PasswordChar" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue('\0')</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia znak używany do maski znaków hasła w pojedynczej linii <see cref="T:System.Windows.Forms.TextBox" /> formantu.</summary>
        <value>Znak używany do maski znaków w pojedynczej linii <see cref="T:System.Windows.Forms.TextBox" /> formantu. Ustaw wartość tej właściwości wartość 0 (znak) Jeśli nie chcesz kontroli maski znaków trakcie wpisywania ich. Domyślnie jest równa 0 (wartość znaku).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.TextBox.UseSystemPasswordChar%2A> Właściwości ma pierwszeństwo przed <xref:System.Windows.Forms.TextBox.PasswordChar%2A> właściwości. Zawsze, gdy <xref:System.Windows.Forms.TextBox.UseSystemPasswordChar%2A> ustawiono `true`, używany jest domyślny znak hasła systemu i dowolny znak ustawione przez <xref:System.Windows.Forms.TextBox.PasswordChar%2A> jest ignorowana.  
  
 Gdy <xref:System.Windows.Forms.TextBox.PasswordChar%2A> właściwość jest ustawiona, nie można wykonać akcji wycinanie i kopiowanie w formancie za pomocą klawiatury.  
  
> [!IMPORTANT]
>  Gdy <xref:System.Windows.Forms.TextBox> jest w trybie hasła, ponieważ <xref:System.Windows.Forms.TextBox.PasswordChar%2A>, <xref:System.Windows.Forms.TextBox.UseSystemPasswordChar%2A>, lub <xref:System.Windows.Forms.TextBoxBase.ReadOnly%2A> jest `true`, <xref:System.Windows.Forms.TextBox> jest w trybie ograniczonym. W tym trybie <xref:System.Windows.Forms.ImeMode> jest wyłączona, ale bieżący <xref:System.Windows.Forms.ImeMode> są buforowane, dzięki czemu można przywrócić, jeśli <xref:System.Windows.Forms.TextBox> stanie się bez ograniczeń. Przełączanie <xref:System.Windows.Forms.TextBoxBase.ReadOnly%2A> jest typowym scenariuszem. <xref:System.Windows.Forms.ImeMode> Jest zasłonięty, gdy formant jest w trybie ograniczonym. Z perspektywy projektanta <xref:System.Windows.Forms.ImeMode> wartość wyświetlana jest wartość rzeczywista.  
  
   
  
## Examples  
 Poniższy przykład kodu tworzy <xref:System.Windows.Forms.TextBox> formant, który jest używany do akceptowania hasła. W tym przykładzie użyto <xref:System.Windows.Forms.TextBox.CharacterCasing%2A> typu właściwości, aby zmienić wszystkie znaki na małe litery i <xref:System.Windows.Forms.TextBoxBase.MaxLength%2A> właściwość, aby ograniczyć długość hasła to 8 znaków. W tym przykładzie również używane <xref:System.Windows.Forms.TextBox.TextAlign%2A> właściwości do środka hasło w <xref:System.Windows.Forms.TextBox> formantu.  
  
 [!code-cpp[Classic TextBox.CharacterCasing Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic TextBox.CharacterCasing Example/CPP/source.cpp#1)]
 [!code-csharp[Classic TextBox.CharacterCasing Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic TextBox.CharacterCasing Example/CS/source.cs#1)]
 [!code-vb[Classic TextBox.CharacterCasing Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic TextBox.CharacterCasing Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Paste">
      <MemberSignature Language="C#" Value="public void Paste (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Paste(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TextBox.Paste(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Paste (text As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Paste(System::String ^ text);" />
      <MemberSignature Language="F#" Value="override this.Paste : string -&gt; unit" Usage="textBox.Paste text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">Tekst do zastąpienia.</param>
        <summary>Ustawia określony tekst zaznaczony tekst bez wyczyszczenie buforu cofania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W przeciwieństwie do ustawienia <xref:System.Windows.Forms.TextBoxBase.SelectedText%2A>, <xref:System.Windows.Forms.TextBox.Paste%2A> nie ma wpływu na Schowka.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcessCmdKey">
      <MemberSignature Language="C#" Value="protected override bool ProcessCmdKey (ref System.Windows.Forms.Message m, System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool ProcessCmdKey(valuetype System.Windows.Forms.Message&amp; m, valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TextBox.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function ProcessCmdKey (ByRef m As Message, keyData As Keys) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool ProcessCmdKey(System::Windows::Forms::Message % m, System::Windows::Forms::Keys keyData);" />
      <MemberSignature Language="F#" Value="override this.ProcessCmdKey :  * System.Windows.Forms.Keys -&gt; bool" Usage="textBox.ProcessCmdKey (m, keyData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="m">A <see cref="T:System.Windows.Forms.Message" />, przekazywane przez odwołanie, reprezentujący komunikat okna do przetworzenia.</param>
        <param name="keyData">Jeden z <see cref="T:System.Windows.Forms.Keys" /> wartości, które reprezentuje klawisz skrótu do przetworzenia.</param>
        <summary>Przetwarza polecenia klucza.</summary>
        <returns>
          <see langword="true" /> Jeśli klucz polecenia został przetworzony przez formant; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nowość w wersji 4.6.1. W poprzednich wersjach, klawisza skrótu Ctrl-A w <xref:System.Windows.Forms.TextBox> nie powiodło się, aby zaznaczyć cały tekst podczas <xref:System.Windows.Forms.TextBoxBase.ShortcutsEnabled%2A> i <xref:System.Windows.Forms.TextBox.Multiline%2A> właściwości zostały ustawione na `true.`. Ta metoda umożliwia klawisz skrótu Ctrl-A zaznaczyć cały tekst podczas <xref:System.Windows.Forms.TextBoxBase.ShortcutsEnabled%2A> i <xref:System.Windows.Forms.TextBox.Multiline%2A> właściwości są ustawione na `true.`  
  
 Aplikacje przeznaczonych dla wersji .NET Framework 4.0 za pośrednictwem 4.6 mogą korzystać z tej metody, dodając następujące polecenie, aby `<runtime>` sekcji w pliku app.config:  
  
```xml  
<AppContextSwitchOverrides value = "Switch.System.Windows.Forms.DoNotSupportSelectAllShortcutInMultilineTextBox=false" />  
```  
  
 Aplikacji docelowej wersji .NET Framework 4.6.1 lub nowszym można zrezygnować z tego zachowania, dodając następujące polecenie, aby `<runtime>` sekcji w pliku app.config:  
  
```xml  
<AppContextSwitchOverrides value = "Switch.System.Windows.Forms.DoNotSupportSelectAllShortcutInMultilineTextBox=true" />  
```  
  
> [!NOTE]
>  Jeśli już zawiera plik app.config `AppContextSwitchOverrides` klucza, scalić wartość klucza do istniejącego klucza. Na przykład `<AppContextSwitchOverrides value = "oldKey=oldValue;Switch.System.Windows.Forms.DoNotSupportSelectAllShortcutInMultilineTextBox=false" />`.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">do pracy z kodem niezarządzanym. Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="ScrollBars">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ScrollBars ScrollBars { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.ScrollBars ScrollBars" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TextBox.ScrollBars" />
      <MemberSignature Language="VB.NET" Value="Public Property ScrollBars As ScrollBars" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::ScrollBars ScrollBars { System::Windows::Forms::ScrollBars get(); void set(System::Windows::Forms::ScrollBars value); };" />
      <MemberSignature Language="F#" Value="member this.ScrollBars : System.Windows.Forms.ScrollBars with get, set" Usage="System.Windows.Forms.TextBox.ScrollBars" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ScrollBars</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia, które paski przewijania powinien zostać wyświetlony w wielowierszowym formancie <see cref="T:System.Windows.Forms.TextBox" /> formantu.</summary>
        <value>Jeden z <see cref="T:System.Windows.Forms.ScrollBars" /> wartości wyliczenia, które wskazuje, czy w wielowierszowym formancie <see cref="T:System.Windows.Forms.TextBox" /> formant jest widoczny bez pasków przewijania, poziomy pasek przewijania, pionowy pasek przewijania lub oba. Wartość domyślna to <see langword="ScrollBars.None" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Paski przewijania w poziomie nie będą wyświetlane Jeśli <xref:System.Windows.Forms.TextBoxBase.WordWrap%2A> właściwość jest ustawiona na `true`, niezależnie od wartości <xref:System.Windows.Forms.TextBox.ScrollBars%2A> właściwości.  
  
   
  
## Examples  
 Poniższy przykład kodu tworzy wielowierszowym formancie <xref:System.Windows.Forms.TextBox> formantu o pionowe paski przewijania. W tym przykładzie również używane <xref:System.Windows.Forms.TextBoxBase.AcceptsTab%2A>, <xref:System.Windows.Forms.TextBox.AcceptsReturn%2A>, i <xref:System.Windows.Forms.TextBoxBase.WordWrap%2A> właściwości, aby multiline <xref:System.Windows.Forms.TextBox> kontroli przydatne przy tworzeniu dokumentów tekstowych.  
  
 [!code-cpp[Classic TextBox.ScrollBars Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic TextBox.ScrollBars Example/CPP/source.cpp#1)]
 [!code-csharp[Classic TextBox.ScrollBars Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic TextBox.ScrollBars Example/CS/source.cs#1)]
 [!code-vb[Classic TextBox.ScrollBars Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic TextBox.ScrollBars Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Wartość, która nie jest spoza zakresu prawidłowych wartości wyliczania została przypisana do właściwości.</exception>
        <altmember cref="T:System.Windows.Forms.ScrollBars" />
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public override string Text { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TextBox.Text" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Text As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Text { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Text : string with get, set" Usage="System.Windows.Forms.TextBox.Text" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia tekst skojarzony z tym formantem.</summary>
        <value>Tekst skojarzony z tym formantem.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Windows.Forms.TextBoxBase.Text" />
      </Docs>
    </Member>
    <Member MemberName="TextAlign">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HorizontalAlignment TextAlign { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.HorizontalAlignment TextAlign" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TextBox.TextAlign" />
      <MemberSignature Language="VB.NET" Value="Public Property TextAlign As HorizontalAlignment" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HorizontalAlignment TextAlign { System::Windows::Forms::HorizontalAlignment get(); void set(System::Windows::Forms::HorizontalAlignment value); };" />
      <MemberSignature Language="F#" Value="member this.TextAlign : System.Windows.Forms.HorizontalAlignment with get, set" Usage="System.Windows.Forms.TextBox.TextAlign" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HorizontalAlignment</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub Ustawia wyrównanie tekstu w <see cref="T:System.Windows.Forms.TextBox" /> formantu.</summary>
        <value>Jeden z <see cref="T:System.Windows.Forms.HorizontalAlignment" /> wartości wyliczenia, które określa wyrównanie tekstu w formancie. Wartość domyślna to <see langword="HorizontalAlignment.Left" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość umożliwia wyrównanie tekstu w <xref:System.Windows.Forms.TextBox> odpowiadające układu tekstu w formularzu. Na przykład, jeśli formanty znajdują się po prawej stronie formularza, możesz ustawić <xref:System.Windows.Forms.Label.TextAlign%2A> właściwości `HorizontalAlignment.Right`, a tekst zostanie wyrównany do prawej krawędzi formantu zamiast domyślne wyrównanie po lewej stronie.  
  
   
  
## Examples  
 Poniższy przykład kodu tworzy <xref:System.Windows.Forms.TextBox> formant, który jest używany do akceptowania hasła. W tym przykładzie użyto <xref:System.Windows.Forms.TextBox.CharacterCasing%2A> właściwości do zmiany wszystkich znaków wpisany do małych liter i <xref:System.Windows.Forms.TextBoxBase.MaxLength%2A> właściwość, aby ograniczyć długość hasła to 8 znaków. W tym przykładzie również używane <xref:System.Windows.Forms.TextBox.TextAlign%2A> właściwości do środka hasło w <xref:System.Windows.Forms.TextBox> formantu.  
  
 [!code-cpp[Classic TextBox.CharacterCasing Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic TextBox.CharacterCasing Example/CPP/source.cpp#1)]
 [!code-csharp[Classic TextBox.CharacterCasing Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic TextBox.CharacterCasing Example/CS/source.cs#1)]
 [!code-vb[Classic TextBox.CharacterCasing Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic TextBox.CharacterCasing Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Wartość, która nie jest spoza zakresu prawidłowych wartości wyliczania została przypisana do właściwości.</exception>
        <altmember cref="T:System.Windows.Forms.HorizontalAlignment" />
      </Docs>
    </Member>
    <Member MemberName="TextAlignChanged">
      <MemberSignature Language="C#" Value="public event EventHandler TextAlignChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler TextAlignChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.TextBox.TextAlignChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TextAlignChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ TextAlignChanged;" />
      <MemberSignature Language="F#" Value="member this.TextAlignChanged : EventHandler " Usage="member this.TextAlignChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy wartość <see cref="P:System.Windows.Forms.TextBox.TextAlign" /> właściwość zostanie zmieniona.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uzyskać więcej informacji na temat obsługi zdarzeń, zobacz [NIB: Korzystanie z zdarzenia](http://msdn.microsoft.com/library/01e4f1bc-e55e-413f-98c7-6588493e5f67).  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje użycie tego elementu członkowskiego. W tym przykładzie program obsługi zdarzeń raportów w przypadku wystąpienia <xref:System.Windows.Forms.TextBox.TextAlignChanged> zdarzeń. Ten raport pomaga dowiedzieć się, gdy zdarzenie występuje i mogą pomóc w debugowaniu. Aby raport wiele zdarzeń lub zdarzeń, które występuje często, rozważ zastąpienie <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> z <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> lub dołączanie wiadomości w wielowierszowym <xref:System.Windows.Forms.TextBox>.  
  
 Aby uruchomić przykładowy kod, wklej go do projektu, który zawiera wystąpienie typu <xref:System.Windows.Forms.TextBox> o nazwie `TextBox1`. Następnie upewnij się, że program obsługi zdarzeń jest skojarzony z <xref:System.Windows.Forms.TextBox.TextAlignChanged> zdarzeń.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#249](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#249)]
 [!code-vb[System.Windows.Forms.EventExamples#249](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#249)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.TextBox.OnTextAlignChanged(System.EventArgs)" />
        <altmember cref="P:System.Windows.Forms.TextBox.TextAlign" />
      </Docs>
    </Member>
    <Member MemberName="UseSystemPasswordChar">
      <MemberSignature Language="C#" Value="public bool UseSystemPasswordChar { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseSystemPasswordChar" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TextBox.UseSystemPasswordChar" />
      <MemberSignature Language="VB.NET" Value="Public Property UseSystemPasswordChar As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseSystemPasswordChar { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.UseSystemPasswordChar : bool with get, set" Usage="System.Windows.Forms.TextBox.UseSystemPasswordChar" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą czy tekst w <see cref="T:System.Windows.Forms.TextBox" /> kontroli powinny się wyświetlać jako domyślny znak hasła.</summary>
        <value>
          <see langword="true" /> Jeśli tekst w <see cref="T:System.Windows.Forms.TextBox" /> kontroli powinny się wyświetlać jako domyślne hasło znaku; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.TextBox.UseSystemPasswordChar%2A> Właściwości ma pierwszeństwo przed <xref:System.Windows.Forms.TextBox.PasswordChar%2A> właściwości. Zawsze, gdy <xref:System.Windows.Forms.TextBox.UseSystemPasswordChar%2A> ustawiono `true`, używany jest domyślny znak hasła systemu i dowolny znak ustawione przez <xref:System.Windows.Forms.TextBox.PasswordChar%2A> jest ignorowana.  
  
> [!IMPORTANT]
>  Gdy <xref:System.Windows.Forms.TextBox> jest w trybie hasła, ponieważ <xref:System.Windows.Forms.TextBox.PasswordChar%2A>, <xref:System.Windows.Forms.TextBox.UseSystemPasswordChar%2A>, lub <xref:System.Windows.Forms.TextBoxBase.ReadOnly%2A> jest `true`, <xref:System.Windows.Forms.TextBox> jest w trybie ograniczonym. W tym trybie <xref:System.Windows.Forms.ImeMode> jest wyłączona, ale bieżący <xref:System.Windows.Forms.ImeMode> są buforowane, dzięki czemu można przywrócić, jeśli <xref:System.Windows.Forms.TextBox> stanie się bez ograniczeń. Przełączanie <xref:System.Windows.Forms.TextBoxBase.ReadOnly%2A> jest typowym scenariuszem. <xref:System.Windows.Forms.ImeMode> Jest zasłonięty, gdy formant jest w trybie ograniczonym. Z perspektywy projektanta <xref:System.Windows.Forms.ImeMode> wartość wyświetlana jest wartość rzeczywista.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.TextBox.PasswordChar" />
      </Docs>
    </Member>
    <Member MemberName="WndProc">
      <MemberSignature Language="C#" Value="protected override void WndProc (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void WndProc(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TextBox.WndProc(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub WndProc (ByRef m As Message)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void WndProc(System::Windows::Forms::Message % m);" />
      <MemberSignature Language="F#" Value="override this.WndProc :  -&gt; unit" Usage="textBox.WndProc m" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">Obiekt komunikatów systemu Windows.</param>
        <summary>Przetwarza wiadomości systemu Windows.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>