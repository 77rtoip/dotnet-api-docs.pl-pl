<Type Name="ComboBox+ObjectCollection" FullName="System.Windows.Forms.ComboBox+ObjectCollection">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="8bc759759c10a1e2366c36bfdaf5c18cf1e58f9e" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30703505" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class ComboBox.ObjectCollection : System.Collections.IList" />
  <TypeSignature Language="ILAsm" Value=".class nested public auto ansi beforefieldinit ComboBox/ObjectCollection extends System.Object implements class System.Collections.ICollection, class System.Collections.IEnumerable, class System.Collections.IList" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.ComboBox.ObjectCollection" />
  <TypeSignature Language="VB.NET" Value="Public Class ComboBox.ObjectCollection&#xA;Implements IList" />
  <TypeSignature Language="C++ CLI" Value="public: ref class ComboBox::ObjectCollection : System::Collections::IList" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IList</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.ListBindable(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Reprezentuje kolekcję elementów w <see cref="T:System.Windows.Forms.ComboBox" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ComboBox.ObjectCollection?displayProperty=nameWithType> Klasa hermetyzuje elementów <xref:System.Windows.Forms.ComboBox>. Kolekcja obiektów, pola kombi może być używana do zarządzania wiele typów obiektów, w tym ciągów, obrazy i obiektów niestandardowych biznesowych.  
  
 Można dodać elementów do kolekcji na kilka sposobów. <xref:System.Windows.Forms.ComboBox.ObjectCollection.Add%2A> Metody dodaje jednego obiektu do kolekcji. Aby dodać wiele obiektów do kolekcji, najlepiej utworzyć tablicę elementów i przypisać z <xref:System.Windows.Forms.ComboBox.ObjectCollection.AddRange%2A> metody. Aby wstawić obiektu z określonej lokalizacji w kolekcji, można użyć <xref:System.Windows.Forms.ComboBox.ObjectCollection.Insert%2A> metody. Aby usunąć elementy w indeksie znane w kolekcji można użyć jednej <xref:System.Windows.Forms.ComboBox.ObjectCollection.Remove%2A> metody lub <xref:System.Windows.Forms.ComboBox.ObjectCollection.RemoveAt%2A> metody. <xref:System.Windows.Forms.ComboBox.ObjectCollection.Clear%2A> Metoda usuwa wszystkie elementy z kolekcji.  
  
 Oprócz metod i właściwości dla Dodawanie i usuwanie elementów <xref:System.Windows.Forms.ComboBox.ObjectCollection?displayProperty=nameWithType> również udostępnia metody, aby znaleźć elementy w kolekcji. <xref:System.Windows.Forms.ComboBox.ObjectCollection.Contains%2A> Metody umożliwia określenie, czy obiekt jest członkiem kolekcji. Po sprawdzeniu, czy element znajduje się w kolekcji, można użyć <xref:System.Windows.Forms.ComboBox.ObjectCollection.IndexOf%2A> metodę, aby określić, w którym element znajduje się w kolekcji.  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ObjectCollection (System.Windows.Forms.ComboBox owner);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Forms.ComboBox owner) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ComboBox.ObjectCollection.#ctor(System.Windows.Forms.ComboBox)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (owner As ComboBox)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ObjectCollection(System::Windows::Forms::ComboBox ^ owner);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="owner" Type="System.Windows.Forms.ComboBox" />
      </Parameters>
      <Docs>
        <param name="owner">
          <see cref="T:System.Windows.Forms.ComboBox" /> , Który jest właścicielem tej kolekcji obiektu.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Forms.ComboBox.ObjectCollection" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nie można utworzyć wystąpienia tej klasy nie było możliwe skojarzenie go z <xref:System.Windows.Forms.ComboBox> formantu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public int Add (object item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 Add(object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ComboBox.ObjectCollection.Add(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Add (item As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int Add(System::Object ^ item);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Add(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="item">Obiekt reprezentujący element, aby dodać do kolekcji.</param>
        <summary>Dodaje element do listy elementów do <see cref="T:System.Windows.Forms.ComboBox" />.</summary>
        <returns>Liczony od zera indeks elementu w kolekcji.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda dodaje element do pola kombi. Jeśli <xref:System.Windows.Forms.ComboBox.Sorted%2A> właściwość <xref:System.Windows.Forms.ComboBox> ma ustawioną wartość `true`, element jest umieszczone na liście w kolejności alfabetycznej. W przeciwnym razie element są wstawiane na końcu listy.  
  
 Wizualną reprezentację element jest wyświetlany w polu kombi. Taka reprezentacja zawartości jest określona przez <xref:System.Windows.Forms.ListControl.DisplayMember%2A> właściwości. Jeśli <xref:System.Windows.Forms.ListControl.DisplayMember%2A> właściwość jest `null`, elementu `ToString` metoda jest wywoływana, aby uzyskać ciąg, który jest wyświetlany w polu kombi, a w przeciwnym razie wartość właściwości przechowywanych obiektu określony przez <xref:System.Windows.Forms.ListControl.DisplayMember%2A> właściwość jest wyświetlana. A <xref:System.SystemException> występuje, gdy jest za mało miejsca zapisać nowy element. Aby dodać zestaw elementów do pola kombi jest najlepiej użyć <xref:System.Windows.Forms.ComboBox.ObjectCollection.AddRange%2A> metody. Jeśli chcesz użyć <xref:System.Windows.Forms.ComboBox.ObjectCollection.Add%2A> metody, aby dodać liczbę elementów do pola kombi, użyj <xref:System.Windows.Forms.ComboBox.BeginUpdate%2A> metody wstrzymania ponownego rysowania podczas Dodaj użytkownika i <xref:System.Windows.Forms.ComboBox.EndUpdate%2A> metodę, aby wznowić ponownego rysowania. Można użyć <xref:System.Windows.Forms.ComboBox.ObjectCollection.Insert%2A> metodę, aby określić lokalizację na liście, w którym element został dodany. Gdy obiekt zostanie dodany do kolekcji, <xref:System.Windows.Forms.ComboBox> wywołuje metodę obiektu <xref:System.Object.ToString%2A> metodę, aby uzyskać ciąg do wyświetlenia na liście.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="item" /> Parametru <see langword="null" />.</exception>
        <altmember cref="T:System.Collections.IList" />
      </Docs>
    </Member>
    <Member MemberName="AddRange">
      <MemberSignature Language="C#" Value="public void AddRange (object[] items);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AddRange(object[] items) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ComboBox.ObjectCollection.AddRange(System.Object[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub AddRange (items As Object())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AddRange(cli::array &lt;System::Object ^&gt; ^ items);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="items" Type="System.Object[]" />
      </Parameters>
      <Docs>
        <param name="items">Tablica obiektów, aby dodać do listy.</param>
        <summary>Dodaje tablicę elementów do listy elementów do <see cref="T:System.Windows.Forms.ComboBox" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli <xref:System.Windows.Forms.ComboBox.Sorted%2A> właściwość <xref:System.Windows.Forms.ComboBox> ma ustawioną wartość true, elementy są umieszczone na liście alfabetycznie. W przeciwnym razie elementy są wstawiane w kolejności, w jakiej występują w tablicy. Ta metoda jest zwykle przekazywany tablicę <xref:System.String> obiektów, ale tablica obiekty dowolnego typu, które mogą zostać przekazane do tej metody. Gdy obiekt zostanie dodany do kolekcji, metoda wywołuje metodę obiektu <xref:System.Object.ToString%2A> metodę, aby uzyskać ciąg do wyświetlenia na liście. Przy użyciu tej metody do dodawania elementów do kolekcji, nie trzeba wywołać <xref:System.Windows.Forms.ComboBox.BeginUpdate%2A> i <xref:System.Windows.Forms.ComboBox.EndUpdate%2A> metod w celu optymalizacji wydajności.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, jak zainicjować <xref:System.Windows.Forms.ComboBox> kontroli przez ustawienie właściwości text i przy użyciu <xref:System.Windows.Forms.ComboBox.ObjectCollection.AddRange%2A> metodę, aby wypełnić <xref:System.Windows.Forms.ComboBox>. Obsługa ilustruje też <xref:System.Windows.Forms.ComboBox.DropDown> zdarzeń. Aby uruchomić przykład, wklej następujący kod w postaci i wywołanie `InitializeComboBox` metody z Konstruktor elementu form lub `Load` — metoda.  
  
 [!code-cpp[System.Windows.Forms.ComboBoxDropDown#2](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ComboBoxDropDown/CPP/form1.cpp#2)]
 [!code-csharp[System.Windows.Forms.ComboBoxDropDown#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ComboBoxDropDown/CS/form1.cs#2)]
 [!code-vb[System.Windows.Forms.ComboBoxDropDown#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ComboBoxDropDown/VB/form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Element <paramref name="items" /> parametru <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ComboBox.ObjectCollection.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Clear();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Usuwa wszystkie elementy z <see cref="T:System.Windows.Forms.ComboBox" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Po usunięciu elementów z listy wszystkie informacje dotyczące usunięte elementy zostaną utracone. Aby usunąć z jednym elementem <xref:System.Windows.Forms.ComboBox>, użyj <xref:System.Windows.Forms.ComboBox.ObjectCollection.Remove%2A> lub <xref:System.Windows.Forms.ComboBox.ObjectCollection.RemoveAt%2A> metody.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IList" />
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool Contains(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ComboBox.ObjectCollection.Contains(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (value As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool Contains(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Contains(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Obiekt reprezentujący element do zlokalizowania w kolekcji.</param>
        <summary>Określa, czy określony element znajduje się w kolekcji.</summary>
        <returns>
          <see langword="true" /> Jeśli element znajduje się w kolekcji; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ComboBox.ObjectCollection.Contains%2A> Metody umożliwia określenie, czy obiekt jest członkiem kolekcji. Po sprawdzeniu, czy element znajduje się w kolekcji, można użyć <xref:System.Windows.Forms.ComboBox.ObjectCollection.IndexOf%2A> metodę, aby określić, w którym element znajduje się w kolekcji.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IList" />
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (object[] destination, int arrayIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void CopyTo(object[] destination, int32 arrayIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ComboBox.ObjectCollection.CopyTo(System.Object[],System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (destination As Object(), arrayIndex As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void CopyTo(cli::array &lt;System::Object ^&gt; ^ destination, int arrayIndex);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Object[]" />
        <Parameter Name="arrayIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="destination">Tablica obiektów do skopiowania do kolekcji.</param>
        <param name="arrayIndex">Lokalizacja, w celu skopiowania kolekcji do tablicy docelowej.</param>
        <summary>Kopiuje całą kolekcję na tablicę istniejące obiekty w określonej lokalizacji w tablicy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda umożliwia łączenie elementów z wielu kolekcji do jednej macierzy. Można następnie użyć tej tablicy do wypełnienia zawartość innego <xref:System.Windows.Forms.ComboBox> kontrolować za pomocą <xref:System.Windows.Forms.ComboBox.ObjectCollection.AddRange%2A> metody <xref:System.Windows.Forms.ComboBox.ObjectCollection> klasy.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.ICollection" />
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ComboBox.ObjectCollection.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera liczbę elementów w kolekcji.</summary>
        <value>Liczba elementów w kolekcji.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość umożliwia określenie liczby elementów w <xref:System.Windows.Forms.ComboBox>. Tej wartości można użyć, gdy wartości kolekcji w pętli.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.ICollection" />
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ComboBox.ObjectCollection.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IEnumerator ^ GetEnumerator();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca moduł wyliczający, który może służyć do iterowania po kolekcji elementów.</summary>
        <returns>
          <see cref="T:System.Collections.IEnumerator" /> Reprezentujący kolekcji elementów.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOf(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ComboBox.ObjectCollection.IndexOf(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (value As Object) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOf(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.IndexOf(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">Obiekt reprezentujący element do zlokalizowania w kolekcji.</param>
        <summary>Pobiera indeks w kolekcji określony element.</summary>
        <returns>Liczony od zera indeks, w którym element znajduje się w kolekcji; w przeciwnym razie wartość -1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.ComboBox.ObjectCollection.IndexOf%2A> Metody umożliwia określenie, w którym element znajduje się w kolekcji. Aby określić, jeśli element znajduje się w kolekcji przed wywołaniem tej metody, użyj <xref:System.Windows.Forms.ComboBox.ObjectCollection.Contains%2A> metody.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="value" /> Parametru <see langword="null" />.</exception>
        <altmember cref="T:System.Collections.IList" />
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public void Insert (int index, object item);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Insert(int32 index, object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ComboBox.ObjectCollection.Insert(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Insert (index As Integer, item As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Insert(int index, System::Object ^ item);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Insert(System.Int32,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index">Lokalizacja liczony od zera indeks, gdzie wstawiony element.</param>
        <param name="item">Obiekt reprezentujący element do wstawienia.</param>
        <summary>Wstawia element do kolekcji pod określonym indeksem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli <xref:System.Windows.Forms.ComboBox.Sorted%2A> właściwość <xref:System.Windows.Forms.ComboBox> ma wartość true, `index` parametru jest ignorowana. Gdy obiekt zostanie dodany do kolekcji, <xref:System.Windows.Forms.ComboBox> wywołuje metodę obiektu <xref:System.Object.ToString%2A> metody jest uzyskanie ciąg do wyświetlenia na liście.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="item" /> Został <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> Była mniejsza od zera.  
  
 —lub—  
  
 <paramref name="index" /> Była większa niż liczba elementów w kolekcji.</exception>
        <altmember cref="T:System.Collections.IList" />
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ComboBox.ObjectCollection.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy można modyfikować tej kolekcji.</summary>
        <value>Zawsze <see langword="false" />.</value>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Collections.IList" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public virtual object this[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ComboBox.ObjectCollection.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public Overridable Property Item(index As Integer) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Object ^ default[int] { System::Object ^ get(int index); void set(int index, System::Object ^ value); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.Item(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Indeks elementu w kolekcji do pobrania.</param>
        <summary>Pobiera element pod określonym indeksem w kolekcji.</summary>
        <value>Obiekt reprezentujący element znajduje się pod określonym indeksem w kolekcji.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda służy do uzyskania elementu w określonej lokalizacji w kolekcji. Można użyć <xref:System.Windows.Forms.ComboBox.ObjectCollection.IndexOf%2A> można znaleźć lokalizacji elementu, lub można użyć indeksu zwrócone z <xref:System.Windows.Forms.ComboBox.ObjectCollection.Add%2A> metody.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Indeks był mniejszy od zera.  
  
 —lub—  
  
 <paramref name="index" /> Była większa równe liczba elementów w kolekcji.</exception>
        <altmember cref="T:System.Collections.IList" />
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (object value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Remove(object value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ComboBox.ObjectCollection.Remove(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (value As Object)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Remove(System::Object ^ value);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Remove(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="value" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="value">
          <see cref="T:System.Object" /> Do usunięcia z listy.</param>
        <summary>Usuwa określony element z <see cref="T:System.Windows.Forms.ComboBox" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wyjątek nie jest generowany, jeśli określony element nie zostanie znaleziony.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IList" />
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ComboBox.ObjectCollection.RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveAt (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveAt(int index);" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.RemoveAt(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Indeks elementu do usunięcia.</param>
        <summary>Usuwa element z <see cref="T:System.Windows.Forms.ComboBox" /> pod określonym indeksem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu pokazuje, jak zainicjować <xref:System.Windows.Forms.ComboBox> kontroli przez ustawienie <xref:System.Windows.Forms.ComboBox.MaxDropDownItems%2A> i <xref:System.Windows.Forms.ComboBox.DropDownStyle%2A> właściwości, za pomocą <xref:System.Windows.Forms.ComboBox.FindStringExact%2A> metody do wyszukiwania <xref:System.Windows.Forms.ComboBox> i <xref:System.Windows.Forms.ComboBox.ObjectCollection.RemoveAt%2A> metodę, aby usunąć element z <xref:System.Windows.Forms.ComboBox>. Przedstawiono również obsługa <xref:System.Windows.Forms.ComboBox.SelectedIndexChanged> zdarzeń.  
  
 [!code-cpp[System.Windows.Forms.ComboBoxFindString#0](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ComboBoxFindString/CPP/form1.cpp#0)]
 [!code-csharp[System.Windows.Forms.ComboBoxFindString#0](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ComboBoxFindString/CS/form1.cs#0)]
 [!code-vb[System.Windows.Forms.ComboBoxFindString#0](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ComboBoxFindString/VB/form1.vb#0)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="value" /> Parametr była mniejsza od zera.  
  
 —lub—  
  
 <paramref name="value" /> Parametr jest mniejsza niż liczba elementów w kolekcji.</exception>
        <altmember cref="T:System.Collections.IList" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.CopyTo">
      <MemberSignature Language="C#" Value="void ICollection.CopyTo (Array destination, int index);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.ICollection.CopyTo(class System.Array destination, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ComboBox.ObjectCollection.System#Collections#ICollection#CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Sub CopyTo (destination As Array, index As Integer) Implements ICollection.CopyTo" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.ICollection.CopyTo(Array ^ destination, int index) = System::Collections::ICollection::CopyTo;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="destination" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="destination">Jednowymiarowa tablica, która jest miejscem docelowym elementów kopiowanych z kolekcji. Tablica musi mieć indeksowane zaczynające od zera.</param>
        <param name="index">Rozpoczyna się od zera indeks w tablicy, od których kopiowanie.</param>
        <summary>Opis tego elementu członkowskiego, zobacz <see cref="M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Można go używać tylko wtedy, gdy <xref:System.Windows.Forms.ComboBox.ObjectCollection> wystąpienia jest rzutowane na <xref:System.Collections.ICollection> interfejsu.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.ICollection" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.IsSynchronized">
      <MemberSignature Language="C#" Value="bool System.Collections.ICollection.IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.ICollection.IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ComboBox.ObjectCollection.System#Collections#ICollection#IsSynchronized" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsSynchronized As Boolean Implements ICollection.IsSynchronized" />
      <MemberSignature Language="C++ CLI" Value="property bool System.Collections.ICollection.IsSynchronized { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Opis tego elementu członkowskiego, zobacz <see cref="P:System.Collections.ICollection.IsSynchronized" />.</summary>
        <value>
          <see langword="false" /> we wszystkich przypadkach.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Można go używać tylko wtedy, gdy <xref:System.Windows.Forms.ComboBox.ObjectCollection> wystąpienia jest rzutowane na <xref:System.Collections.ICollection> interfejsu.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.ICollection" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.SyncRoot">
      <MemberSignature Language="C#" Value="object System.Collections.ICollection.SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.ICollection.SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ComboBox.ObjectCollection.System#Collections#ICollection#SyncRoot" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property SyncRoot As Object Implements ICollection.SyncRoot" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System.Collections.ICollection.SyncRoot { System::Object ^ get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Opis tego elementu członkowskiego, zobacz <see cref="P:System.Collections.ICollection.SyncRoot" />.</summary>
        <value>Obiekt, który może służyć do synchronizujący dostęp do <see cref="T:System.Windows.Forms.ComboBox.ObjectCollection" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Można go używać tylko wtedy, gdy <xref:System.Windows.Forms.ComboBox.ObjectCollection> wystąpienia jest rzutowane na <xref:System.Collections.ICollection> interfejsu.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.ICollection" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Add">
      <MemberSignature Language="C#" Value="int IList.Add (object item);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.Add(object item) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ComboBox.ObjectCollection.System#Collections#IList#Add(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Add (item As Object) As Integer Implements IList.Add" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IList.Add(System::Object ^ item) = System::Collections::IList::Add;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Add(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="item" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="item">Obiekt, który reprezentuje element, aby dodać do kolekcji.</param>
        <summary>Opis tego elementu członkowskiego, zobacz <see cref="M:System.Collections.IList.Add(System.Object)" />.</summary>
        <returns>Liczony od zera indeks elementu w kolekcji.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Można go używać tylko wtedy, gdy <xref:System.Windows.Forms.ComboBox.ObjectCollection> wystąpienia jest rzutowane na <xref:System.Collections.IList> interfejsu.  
  
 Ta metoda dodaje element do pola kombi. Jeśli <xref:System.Windows.Forms.ComboBox.Sorted%2A> właściwość <xref:System.Windows.Forms.ComboBox> ma ustawioną wartość `true`, element jest umieszczone na liście w kolejności alfabetycznej. W przeciwnym razie element są wstawiane na końcu listy.  
  
 Wizualną reprezentację element jest wyświetlany w polu kombi. Taka reprezentacja zawartości jest określona przez <xref:System.Windows.Forms.ListControl.DisplayMember%2A> właściwości. Jeśli <xref:System.Windows.Forms.ListControl.DisplayMember%2A> właściwość jest `null`, elementu <xref:System.Object.ToString%2A> metoda jest wywoływana, aby uzyskać ciąg, który jest wyświetlany w polu kombi, a w przeciwnym razie wartość właściwości przechowywanych obiektu określony przez <xref:System.Windows.Forms.ListControl.DisplayMember%2A> właściwość jest wyświetlana. Aby dodać zestaw elementów do pola kombi, najlepiej użyć <xref:System.Windows.Forms.ComboBox.ObjectCollection.AddRange%2A> metody. Jeśli chcesz użyć <xref:System.Windows.Forms.ComboBox.ObjectCollection.Add%2A> metody, aby dodać zestaw elementów do pola kombi, użyj <xref:System.Windows.Forms.ComboBox.BeginUpdate%2A> metody wstrzymania ponownego rysowania podczas Dodaj użytkownika i <xref:System.Windows.Forms.ComboBox.EndUpdate%2A> metodę, aby wznowić ponownego rysowania. Można użyć <xref:System.Windows.Forms.ComboBox.ObjectCollection.Insert%2A> metodę, aby określić lokalizację na liście, w którym element został dodany. Gdy obiekt zostanie dodany do kolekcji, <xref:System.Windows.Forms.ComboBox> wywołuje metodę obiektu <xref:System.Object.ToString%2A> metodę, aby uzyskać ciąg do wyświetlenia na liście.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="item" /> Parametr jest <see langword="null" />.</exception>
        <exception cref="T:System.SystemException">Jest za mało miejsca zapisać nowy element.</exception>
        <altmember cref="T:System.Collections.IList" />
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IsFixedSize">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IsFixedSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.IList.IsFixedSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.ComboBox.ObjectCollection.System#Collections#IList#IsFixedSize" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsFixedSize As Boolean Implements IList.IsFixedSize" />
      <MemberSignature Language="C++ CLI" Value="property bool System.Collections.IList.IsFixedSize { bool get(); };" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.IsFixedSize</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Opis tego elementu członkowskiego, zobacz <see cref="P:System.Collections.IList.IsFixedSize" />.</summary>
        <value>
          <see langword="false" /> we wszystkich przypadkach.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten element jest jawną implementacją członków. Można go używać tylko wtedy, gdy <xref:System.Windows.Forms.ComboBox.ObjectCollection> wystąpienia jest rzutowane na <xref:System.Collections.IList> interfejsu.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IList" />
      </Docs>
    </Member>
  </Members>
</Type>