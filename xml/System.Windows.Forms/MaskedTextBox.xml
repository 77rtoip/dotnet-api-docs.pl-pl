<Type Name="MaskedTextBox" FullName="System.Windows.Forms.MaskedTextBox">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="24e38e05d0c7c80d1a179add901f5793853879d8" />
    <Meta Name="ms.sourcegitcommit" Value="1b899505ed6d42225f2b3c9150bfdc080d0d1f9b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/28/2018" />
    <Meta Name="ms.locfileid" Value="32089881" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class MaskedTextBox : System.Windows.Forms.TextBoxBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MaskedTextBox extends System.Windows.Forms.TextBoxBase" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.MaskedTextBox" />
  <TypeSignature Language="VB.NET" Value="Public Class MaskedTextBox&#xA;Inherits TextBoxBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class MaskedTextBox : System::Windows::Forms::TextBoxBase" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Forms.TextBoxBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultBindingProperty("Text")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("MaskInputRejected")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("Mask")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.Designer("System.Windows.Forms.Design.MaskedTextBoxDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ClassInterface</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Używa maski do rozróżniania między użytkownika prawidłowych i nieprawidłowych danych wejściowych.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox> Klasy jest rozszerzony <xref:System.Windows.Forms.TextBox> formant, który obsługuje składni deklaratywnej akceptowanie lub odrzucanie danych wejściowych użytkownika. Przy użyciu <xref:System.Windows.Forms.MaskedTextBox.Mask%2A> właściwości, można określić następujące dane wejściowe bez pisania wszelka logika niestandardowego sprawdzania poprawności do aplikacji:  
  
-   Wymagane wprowadzanie znaków.  
  
-   Znaki opcjonalne, wejściowego.  
  
-   Typ danych wejściowych oczekuje na określonej pozycji w masce; na przykład, cyfrą lub znakiem alfabetycznym lub alfanumeryczne.  
  
-   Zamaskować literały lub znaków, które powinny być wyświetlane bezpośrednio w <xref:System.Windows.Forms.MaskedTextBox>; na przykład łączniki (-) numer telefonu lub symbol waluty w cenie.  
  
-   Specjalnego przetwarzania dla wprowadzania znaków. na przykład do przekonwertowania na wielkie litery alfabetu.  
  
 Gdy <xref:System.Windows.Forms.MaskedTextBox> formant jest wyświetlany w czasie wykonywania, reprezentuje maski jako serię znaki monitu i opcjonalnie literał znaków. Każdej pozycji maski można edytować, reprezentujący wymaganego lub opcjonalnego danych wejściowych jest wyświetlany pojedynczy znak monitu. Na przykład znak numeru (#) jest często używana jako symbol zastępczy reakcję znaku numerycznego. Można użyć <xref:System.Windows.Forms.MaskedTextBox.PromptChar%2A> właściwości w celu określenia niestandardowego znaku zgłoszenia. <xref:System.Windows.Forms.MaskedTextBox.HidePromptOnLeave%2A> Właściwość określa, jeśli użytkownik będzie widział znaki monitu, gdy formant utraci wejściowych fokus.  
  
 Prawidłowe znaki wejściowych użytkownika typów danych wejściowych w polu tekstowym maskowanego, zastąpić ich odpowiednich znaki monitu w sposób sekwencyjnych. Jeśli użytkownik wpisze nieprawidłowy znak wejściowy, nie jest zastępowana, ale zamiast tego sygnału dźwiękowego jest wystawiony, jeśli <xref:System.Windows.Forms.MaskedTextBox.BeepOnError%2A> właściwość jest ustawiona na `true`i <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected> zdarzenia. Musisz podać logiki błędów niestandardowych przez przekazywanie tego zdarzenia.  
  
 Gdy do bieżącego punkt wstawiania znajduje się na znak literałowy, użytkownik ma kilka opcji:  
  
-   Jeśli wpisano znak inny niż znak monitu, literał automatycznie zostaną pominięte, a znak wejściowy zostaną zastosowane do następnej pozycji można edytować, reprezentowane przez następny znak monitu.  
  
-   Jeśli znak monitu jest wpisany i <xref:System.Windows.Forms.MaskedTextBox.AllowPromptAsInput%2A> właściwość ma wartość true, dane wejściowe będą overtype znaku i wstawiania punktu zostaną przeniesione do następnego położenia maski.  
  
-   Jak zawsze w przypadku, klawiszy strzałek można przejść do poprzedniej lub kolejnych pozycji.  
  
 Można użyć <xref:System.Windows.Forms.MaskedTextBox.MaskFull%2A> właściwości, aby sprawdzić, czy użytkownik wprowadził wszystkich wymaganych danych wejściowych. <xref:System.Windows.Forms.MaskedTextBox.Text%2A> Właściwość zawsze będą pobierane dane wejściowe użytkownika sformatowanej zgodnie z maską i <xref:System.Windows.Forms.MaskedTextBox.TextMaskFormat%2A> właściwości.  
  
 <xref:System.Windows.Forms.MaskedTextBox> Kontroli faktycznie różni się przetwarzanie wszystkich maski <xref:System.ComponentModel.MaskedTextProvider?displayProperty=nameWithType> klasą określoną przez <xref:System.Windows.Forms.MaskedTextBox.MaskedTextProvider%2A> właściwości. Ten dostawca standardowa obsługuje wszystkie znaki Unicode z wyjątkiem części znaku dwuskładnikowego i w pionie połączonych znaków; jednak <xref:System.Windows.Forms.MaskedTextBox.AsciiOnly%2A> właściwości może służyć do ograniczania wprowadzania znaki zestawów a-z, A-Z i 0-9.  
  
 Maski niekoniecznie gwarantuje, że dane wejściowe użytkownika będzie reprezentują prawidłowej wartości dla danego typu; na przykład -9 można wprowadzić zakres w latach. Możesz sprawdzić, czy dane wejściowe użytkownika reprezentuje prawidłową wartość, przypisując wystąpienia typu tę wartość do <xref:System.Windows.Forms.MaskedTextBox.ValidatingType%2A> właściwości. Może wykryć, czy użytkownik usunie fokus z <xref:System.Windows.Forms.MaskedTextBox> po zawiera nieprawidłową wartość przy monitorowaniu <xref:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted> zdarzeń. Jeśli typ sprawdzania poprawności zakończy się powodzeniem, obiekt reprezentujący wartość będzie dostępna za pośrednictwem <xref:System.Windows.Forms.TypeValidationEventArgs.ReturnValue%2A> właściwość <xref:System.Windows.Forms.TypeValidationEventArgs> parametru.  
  
 Jak <xref:System.Windows.Forms.TextBox> kontroli, kilka typowych skróty klawiaturowe nie działają <xref:System.Windows.Forms.MaskedTextBox>. W szczególności CTRL-R (wyrównanie do prawej tekst), CTRL-L (lewej wyjustować tekst), i CTRL-L (wyrównanie tekstu) nie mają żadnego skutku.  
  
## <a name="compatibility-with-visual-basic-60"></a>Zgodność programu Visual Basic 6.0  
 <xref:System.Windows.Forms.MaskedTextBox> została zaprojektowana w celu zachowania większość funkcjonalności kontrolka zamaskowanej edycji w Visual Basic 6.0. Poniższej tabeli wymieniono wspólne właściwości w formancie edycji maskowanego oraz zapewnia ich odpowiedniki na <xref:System.Windows.Forms.MaskedTextBox>.  
  
|Maskowanego właściwości formantu (Visual Basic 6.0) edycji|MaskedTextBox równoważne ([!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]) właściwość|  
|-------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------|  
|`AllowPrompt` Właściwość|<xref:System.Windows.Forms.MaskedTextBox.AllowPromptAsInput%2A>|  
|`AutoTab` Właściwość|Brak|  
|`ClipMode` Właściwość|<xref:System.Windows.Forms.MaskedTextBox.CutCopyMaskFormat%2A>|  
|`ClipText` Właściwość|<xref:System.Windows.Forms.MaskedTextBox.Text%2A> (Jeśli <xref:System.Windows.Forms.MaskedTextBox.TextMaskFormat%2A> ma ustawioną wartość <xref:System.Windows.Forms.MaskFormat.ExcludePromptAndLiterals>)|  
|`Format` Właściwość|Brak|  
|`FormattedText` Właściwość|<xref:System.Windows.Forms.MaskedTextBox.Text%2A> (Jeśli <xref:System.Windows.Forms.MaskedTextBox.TextMaskFormat%2A> ma ustawioną wartość <xref:System.Windows.Forms.MaskFormat.IncludePromptAndLiterals>)|  
|`Mask` Właściwość|<xref:System.Windows.Forms.MaskedTextBox.Mask%2A>|  
|`PromptChar` Właściwość|<xref:System.Windows.Forms.MaskedTextBox.PromptChar%2A>|  
|`PromptInclude` Właściwość|<xref:System.Windows.Forms.MaskedTextBox.ResetOnPrompt%2A>|  
|`ValidationError` Zdarzenia|<xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected>|  
  
> [!CAUTION]
>  <xref:System.Windows.Forms.MaskedTextBox> Formantu nie obsługuje wielowierszowy konfiguracji, lub przycisk Cofnij funkcji. Jednak podczas elementów członkowskich skojarzonych z tymi funkcjami zatrzymane dla zgodności z <xref:System.Windows.Forms.TextBoxBase> podstawowa klasa, ich implementacji wykonywać żadnych akcji.  
  
   
  
## Examples  
 Poniższy kod przykładowy inicjuje <xref:System.Windows.Forms.MaskedTextBox> do akceptowania datę i używa zarówno <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected> i <xref:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted> zdarzenia, które mają nieprawidłowe dane wejściowe użytkownika.  
  
 [!code-csharp[MaskInputRejectedSample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/MaskInputRejectedSample/CS/form1.cs#1)]
 [!code-vb[MaskInputRejectedSample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/MaskInputRejectedSample/VB/form1.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
    <altmember cref="T:System.ComponentModel.MaskedTextProvider" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Forms.MaskedTextBox" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MaskedTextBox ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MaskedTextBox();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Forms.MaskedTextBox" /> przy użyciu ustawień domyślnych.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość domyślna <xref:System.Windows.Forms.MaskedTextBox.%23ctor> ustawia konstruktora <xref:System.Windows.Forms.MaskedTextBox.MaskedTextProvider%2A> właściwości do wartości null maski reprezentowany przez ciąg "<>". Maska null będzie akceptować dowolną kombinację znaków jako dane wejściowe.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.MaskedTextProvider" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MaskedTextBox (System.ComponentModel.MaskedTextProvider maskedTextProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.ComponentModel.MaskedTextProvider maskedTextProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.#ctor(System.ComponentModel.MaskedTextProvider)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MaskedTextBox(System::ComponentModel::MaskedTextProvider ^ maskedTextProvider);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="maskedTextProvider" Type="System.ComponentModel.MaskedTextProvider" />
      </Parameters>
      <Docs>
        <param name="maskedTextProvider">Maska niestandardowego dostawcy języka, pochodzących z <see cref="T:System.ComponentModel.MaskedTextProvider" /> klasy.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Forms.MaskedTextBox" /> przy użyciu dostawcy języka określona maska niestandardowych.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `maskedTextProvider` Parametru definiuje język maskowania <xref:System.Windows.Forms.MaskedTextBox>. Jest odpowiedzialny za analizowanie maski i określanie, czy dane wejściowe użytkownika spełnia bieżące położenie maski. Może pochodzić z nową klasę <xref:System.ComponentModel.MaskedTextProvider?displayProperty=nameWithType> do definiowania języka niestandardowych maskowania i użyj <xref:System.Windows.Forms.MaskedTextBox.%23ctor%28System.ComponentModel.MaskedTextProvider%29> konstruktora, aby zastąpić standardowego <xref:System.ComponentModel.MaskedTextProvider?displayProperty=nameWithType>.  
  
 Jeśli chcesz użyć domyślnej maskowania języka i podaj maska wprowadzania jest konieczne używanie tego konstruktora. Zamiast tego można użyć <xref:System.Windows.Forms.MaskedTextBox.%23ctor%28System.String%29> konstruktora lub użyj konstruktora domyślnego następnie ustawioną <xref:System.Windows.Forms.MaskedTextBox.Mask%2A> właściwości.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="maskedTextProvider" /> jest <see langword="null" />.</exception>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.MaskedTextProvider" />
        <altmember cref="T:System.ComponentModel.MaskedTextProvider" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MaskedTextBox (string mask);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string mask) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (mask As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MaskedTextBox(System::String ^ mask);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="mask" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="mask">A <see cref="T:System.String" /> reprezentujący maska wprowadzania. Początkowa wartość <see cref="P:System.Windows.Forms.MaskedTextBox.Mask" /> właściwości.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Forms.MaskedTextBox" /> przy użyciu określonego maska wprowadzania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.%23ctor%28System.String%29> Konstruktor korzysta ze standardu <xref:System.ComponentModel.MaskedTextProvider?displayProperty=nameWithType> z danych wejściowych `mask` można przeanalizować danych wejściowych użytkownika do <xref:System.Windows.Forms.MaskedTextBox>.  
  
 Po przypisaniu nowych maskę <xref:System.Windows.Forms.MaskedTextBox.Mask%2A> właściwości, zastąpi on wartość ustawioną przez tego konstruktora.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="mask" /> jest <see langword="null" />.</exception>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="T:System.ComponentModel.MaskedTextProvider" />
      </Docs>
    </Member>
    <Member MemberName="AcceptsTab">
      <MemberSignature Language="C#" Value="public bool AcceptsTab { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AcceptsTab" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.AcceptsTab" />
      <MemberSignature Language="VB.NET" Value="Public Property AcceptsTab As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AcceptsTab { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość określającą obsługi kluczy kartę wielowierszowy konfiguracji. Ta właściwość nie jest obsługiwana przez <see cref="T:System.Windows.Forms.MaskedTextBox" />.</summary>
        <value>
          <see langword="false" /> we wszystkich przypadkach.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.AcceptsTab%2A> Właściwość jest dziedziczona z podstawowym <xref:System.Windows.Forms.TextBoxBase> klasy. Jednak ponieważ <xref:System.Windows.Forms.MaskedTextBox> formant nie obsługuje konfiguracji wielowierszowe, ta właściwość nie jest obsługiwana.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.AcceptsTabChanged" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Multiline" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Lines" />
      </Docs>
    </Member>
    <Member MemberName="AcceptsTabChanged">
      <MemberSignature Language="C#" Value="public event EventHandler AcceptsTabChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler AcceptsTabChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.MaskedTextBox.AcceptsTabChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event AcceptsTabChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ AcceptsTabChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy wartość <see cref="P:System.Windows.Forms.MaskedTextBox.AcceptsTab" /> właściwość zostanie zmieniona. To zdarzenie nie jest wywoływane przez <see cref="T:System.Windows.Forms.MaskedTextBox" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.AcceptsTabChanged> Zdarzeń jest dziedziczona z podstawowym <xref:System.Windows.Forms.TextBoxBase> klasy. Jednak ponieważ <xref:System.Windows.Forms.MaskedTextBox> formant nie obsługuje konfiguracji wielowierszowe, to zdarzenie nie jest obsługiwane.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.AcceptsTab" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Multiline" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Lines" />
      </Docs>
    </Member>
    <Member MemberName="AllowPromptAsInput">
      <MemberSignature Language="C#" Value="public bool AllowPromptAsInput { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowPromptAsInput" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.AllowPromptAsInput" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowPromptAsInput As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowPromptAsInput { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą czy <see cref="P:System.Windows.Forms.MaskedTextBox.PromptChar" /> jako prawidłowe dane mogą zostać wprowadzone przez użytkownika.</summary>
        <value>
          <see langword="true" /> Jeśli użytkownika można wprowadzać znaku zgłoszenia w formancie; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nawet wtedy, gdy <xref:System.Windows.Forms.MaskedTextBox.AllowPromptAsInput%2A> jest `true`, znaku zgłoszenia musi być prawidłowy dla bieżącej lokalizacji maski, aby akceptowane. Na przykład jeśli <xref:System.Windows.Forms.MaskedTextBox.PromptChar%2A> jest "*", a bieżącą lokalizację maski żąda użytkownik wprowadzić cyfrę, wprowadzając gwiazdkę (\*) będą się niepowodzeniem i spowodować <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected> zdarzenia.  
  
 <xref:System.Windows.Forms.MaskedTextBox.ResetOnPrompt%2A> Właściwość ma wyższy priorytet niż <xref:System.Windows.Forms.MaskedTextBox.AllowPromptAsInput%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.PromptChar" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.HidePromptOnLeave" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.ResetOnPrompt" />
      </Docs>
    </Member>
    <Member MemberName="AsciiOnly">
      <MemberSignature Language="C#" Value="public bool AsciiOnly { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AsciiOnly" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.AsciiOnly" />
      <MemberSignature Language="VB.NET" Value="Public Property AsciiOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AsciiOnly { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą czy <see cref="T:System.Windows.Forms.MaskedTextBox" /> formantu akceptowane znaki spoza zestawu znaków ASCII.</summary>
        <value>
          <see langword="true" /> Jeśli tylko ASCII są akceptowane; <see langword="false" /> Jeśli <see cref="T:System.Windows.Forms.MaskedTextBox" /> formant może akceptować dowolnych znaków Unicode. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `true`, <xref:System.Windows.Forms.MaskedTextBox.AsciiOnly%2A> ogranicza danych wejściowych użytkownika na znaki a-z i A-Z. Znaki kontrolne ASCII nie są dozwolone.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.AllowPromptAsInput" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.SkipLiterals" />
      </Docs>
    </Member>
    <Member MemberName="BeepOnError">
      <MemberSignature Language="C#" Value="public bool BeepOnError { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool BeepOnError" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.BeepOnError" />
      <MemberSignature Language="VB.NET" Value="Public Property BeepOnError As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool BeepOnError { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy kontrolki pola tekstowego maskowanego zgłasza dźwiękowego system dla każdego użytkownika naciśnięcie klawisza, który jest odrzucany.</summary>
        <value>
          <see langword="true" /> Jeśli <see cref="T:System.Windows.Forms.MaskedTextBox" /> formantu powinna Sygnalizuj nieprawidłowy wejściowych; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected> Zdarzenie będzie nadal występują, jeśli <xref:System.Windows.Forms.MaskedTextBox.BeepOnError%2A> właściwość jest ustawiona na `true`.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.MaskInputRejected" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.ValidateText" />
      </Docs>
    </Member>
    <Member MemberName="CanUndo">
      <MemberSignature Language="C#" Value="public bool CanUndo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanUndo" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.CanUndo" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CanUndo As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanUndo { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy użytkownika można cofnąć poprzednią operację. Ta właściwość nie jest obsługiwana przez <see cref="T:System.Windows.Forms.MaskedTextBox" />.</summary>
        <value>
          <see langword="false" /> we wszystkich przypadkach.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.CanUndo%2A> Właściwość jest dziedziczona z podstawowym <xref:System.Windows.Forms.TextBoxBase> klasy. Jednak ponieważ <xref:System.Windows.Forms.MaskedTextBox> jest nie obsługi funkcji cofania zmian, ta właściwość zawsze ma wartość `false`.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.ClearUndo" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.Undo" />
      </Docs>
    </Member>
    <Member MemberName="ClearUndo">
      <MemberSignature Language="C#" Value="public void ClearUndo ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearUndo() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.ClearUndo" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearUndo ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearUndo();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Usuwa informacje na temat ostatniej operacji z bufora Cofnij pola tekstowego. Ta metoda nie jest obsługiwana przez <see cref="T:System.Windows.Forms.MaskedTextBox" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.ClearUndo%2A> Metoda jest dziedziczona z podstawowym <xref:System.Windows.Forms.TextBoxBase> klasy. Jednak <xref:System.Windows.Forms.MaskedTextBox> nie obsługuje funkcji cofania.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.CanUndo" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.Undo" />
      </Docs>
    </Member>
    <Member MemberName="CreateHandle">
      <MemberSignature Language="C#" Value="protected override void CreateHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void CreateHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.CreateHandle" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub CreateHandle ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void CreateHandle();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Tworzy uchwytu formantu.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateParams">
      <MemberSignature Language="C#" Value="protected override System.Windows.Forms.CreateParams CreateParams { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.CreateParams CreateParams" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.CreateParams" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property CreateParams As CreateParams" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Windows::Forms::CreateParams ^ CreateParams { System::Windows::Forms::CreateParams ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.CreateParams</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera parametry tworzenia wymagane, gdy zostanie utworzony uchwyt formantu.</summary>
        <value>A <see cref="T:System.Windows.Forms.CreateParams" /> reprezentujących informacje potrzebne przy tworzeniu formantu.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Windows.Forms.TextBoxBase.CreateParams" />
      </Docs>
    </Member>
    <Member MemberName="Culture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo Culture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CultureInfo Culture" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.Culture" />
      <MemberSignature Language="VB.NET" Value="Public Property Culture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CultureInfo ^ Culture { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia informacje o ustawieniach kulturowych skojarzony z polem tekstowym maskowanego.</summary>
        <value>A <see cref="T:System.Globalization.CultureInfo" /> reprezentujący język obsługiwany przez <see cref="T:System.Windows.Forms.MaskedTextBox" />.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <see cref="P:System.Windows.Forms.MaskedTextBox.Culture" /> ustawiono <see langword="null" />.</exception>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.FormatProvider" />
      </Docs>
    </Member>
    <Member MemberName="CutCopyMaskFormat">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.MaskFormat CutCopyMaskFormat { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.MaskFormat CutCopyMaskFormat" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.CutCopyMaskFormat" />
      <MemberSignature Language="VB.NET" Value="Public Property CutCopyMaskFormat As MaskFormat" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::MaskFormat CutCopyMaskFormat { System::Windows::Forms::MaskFormat get(); void set(System::Windows::Forms::MaskFormat value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MaskFormat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość określającą, czy literały i znaki monitu są kopiowane do Schowka.</summary>
        <value>Jeden z <see cref="T:System.Windows.Forms.MaskFormat" /> wartości. Wartość domyślna to <see cref="F:System.Windows.Forms.MaskFormat.IncludeLiterals" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.CutCopyMaskFormat%2A> Właściwość określa, jak zaznaczony tekst, w ramach <xref:System.Windows.Forms.MaskedTextBox> sterowania, jest interpretowany, gdy zostanie skopiowany do Schowka lub pobierane w drodze <xref:System.Windows.Forms.MaskedTextBox.SelectedText%2A> właściwości. W szczególności określa, czy literały i/lub znaki monitu są uwzględniane podczas uzyskiwania dostępu do zaznaczonego tekstu. Gdy znaki monitu są wyłączone, są przekształceniu spacje w ciągu skopiowane.  
  
> [!NOTE]
>  <xref:System.Windows.Forms.MaskedTextBox.TextMaskFormat%2A> Właściwość służy podobne celu względem sposobu <xref:System.Windows.Forms.MaskedTextBox.Text%2A> właściwości jest interpretowany.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Właściwość z <see cref="T:System.Windows.Forms.MaskFormat" /> wartość, która jest nieprawidłowa.</exception>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.TextMaskFormat" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.PromptChar" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.AllowPromptAsInput" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Text" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.ToString" />
      </Docs>
    </Member>
    <Member MemberName="FormatProvider">
      <MemberSignature Language="C#" Value="public IFormatProvider FormatProvider { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IFormatProvider FormatProvider" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.FormatProvider" />
      <MemberSignature Language="VB.NET" Value="Public Property FormatProvider As IFormatProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IFormatProvider ^ FormatProvider { IFormatProvider ^ get(); void set(IFormatProvider ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IFormatProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia <see cref="T:System.IFormatProvider" /> używane podczas wykonywania sprawdzania poprawności typu.</summary>
        <value>Obiekt, który implementuje <see cref="T:System.IFormatProvider" /> interfejsu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.FormatProvider%2A> Określa, które symbole są wykorzystywane do waluty, datę i inne elementy zastępcze maska specyficzne dla kultury, gdy występuje typ sprawdzania poprawności i kontrolka ma inną niż null <xref:System.Windows.Forms.MaskedTextBox.ValidatingType%2A> właściwości.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IFormatProvider" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Culture" />
      </Docs>
    </Member>
    <Member MemberName="GetCharFromPosition">
      <MemberSignature Language="C#" Value="public override char GetCharFromPosition (System.Drawing.Point pt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance char GetCharFromPosition(valuetype System.Drawing.Point pt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.GetCharFromPosition(System.Drawing.Point)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCharFromPosition (pt As Point) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override char GetCharFromPosition(System::Drawing::Point pt);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pt" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="pt">Lokalizacja, w której do wyszukania najbliższy znak.</param>
        <summary>Pobiera znaku, który jest najbardziej zbliżony do określonej lokalizacji w formancie.</summary>
        <returns>Znak w określonej lokalizacji.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.TextBoxBase.GetCharFromPosition(System.Drawing.Point)" />
      </Docs>
    </Member>
    <Member MemberName="GetCharIndexFromPosition">
      <MemberSignature Language="C#" Value="public override int GetCharIndexFromPosition (System.Drawing.Point pt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetCharIndexFromPosition(valuetype System.Drawing.Point pt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.GetCharIndexFromPosition(System.Drawing.Point)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCharIndexFromPosition (pt As Point) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetCharIndexFromPosition(System::Drawing::Point pt);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pt" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="pt">Lokalizacja do wyszukiwania.</param>
        <summary>Pobiera indeks znak znajdujący się najbliżej określonej lokalizacji.</summary>
        <returns>Znak liczony od zera indeks w określonej lokalizacji.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.TextBoxBase.GetCharIndexFromPosition(System.Drawing.Point)" />
      </Docs>
    </Member>
    <Member MemberName="GetFirstCharIndexFromLine">
      <MemberSignature Language="C#" Value="public int GetFirstCharIndexFromLine (int lineNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetFirstCharIndexFromLine(int32 lineNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.GetFirstCharIndexFromLine(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFirstCharIndexFromLine (lineNumber As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetFirstCharIndexFromLine(int lineNumber);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lineNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="lineNumber">Ten parametr nie jest używany.</param>
        <summary>Pobiera indeks pierwszego znaku danego wiersza. Ta metoda nie jest obsługiwana przez <see cref="T:System.Windows.Forms.MaskedTextBox" />.</summary>
        <returns>Ta metoda zawsze zwraca 0.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.GetFirstCharIndexFromLine%2A> Metoda jest dziedziczona z podstawowym <xref:System.Windows.Forms.TextBoxBase> klasy. Jednak ponieważ <xref:System.Windows.Forms.MaskedTextBox> formant nie obsługuje konfiguracji wielowierszowe, ta metoda nie jest obsługiwana.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Multiline" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.GetFirstCharIndexOfCurrentLine" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.GetLineFromCharIndex(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetFirstCharIndexOfCurrentLine">
      <MemberSignature Language="C#" Value="public int GetFirstCharIndexOfCurrentLine ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetFirstCharIndexOfCurrentLine() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.GetFirstCharIndexOfCurrentLine" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFirstCharIndexOfCurrentLine () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetFirstCharIndexOfCurrentLine();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pobiera indeks pierwszego znaku bieżącego wiersza. Ta metoda nie jest obsługiwana przez <see cref="T:System.Windows.Forms.MaskedTextBox" />.</summary>
        <returns>Ta metoda zawsze zwraca 0.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.GetFirstCharIndexOfCurrentLine%2A> Metoda jest dziedziczona z podstawowym <xref:System.Windows.Forms.TextBoxBase> klasy. Jednak ponieważ <xref:System.Windows.Forms.MaskedTextBox> formant nie obsługuje konfiguracji wielowierszowe, ta metoda nie jest obsługiwana.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Multiline" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.GetFirstCharIndexFromLine(System.Int32)" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.GetLineFromCharIndex(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetLineFromCharIndex">
      <MemberSignature Language="C#" Value="public override int GetLineFromCharIndex (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetLineFromCharIndex(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.GetLineFromCharIndex(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetLineFromCharIndex (index As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetLineFromCharIndex(int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Ten parametr nie jest używany.</param>
        <summary>Pobiera numer wiersza od położenia określony znak w tekście formantu. Ta metoda nie jest obsługiwana przez <see cref="T:System.Windows.Forms.MaskedTextBox" />.</summary>
        <returns>Ta metoda zawsze zwraca 0.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.GetLineFromCharIndex%2A> Metoda jest dziedziczona z podstawowym <xref:System.Windows.Forms.TextBoxBase> klasy. Jednak ponieważ <xref:System.Windows.Forms.MaskedTextBox> formant nie obsługuje konfiguracji wielowierszowe, ta metoda nie jest obsługiwana.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Multiline" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.GetFirstCharIndexFromLine(System.Int32)" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.GetFirstCharIndexOfCurrentLine" />
      </Docs>
    </Member>
    <Member MemberName="GetPositionFromCharIndex">
      <MemberSignature Language="C#" Value="public override System.Drawing.Point GetPositionFromCharIndex (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.Drawing.Point GetPositionFromCharIndex(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.GetPositionFromCharIndex(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetPositionFromCharIndex (index As Integer) As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Drawing::Point GetPositionFromCharIndex(int index);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Point</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Indeks znak, dla którego można pobrać lokalizacji.</param>
        <summary>Pobiera lokalizację w formancie w indeksie określony znak.</summary>
        <returns>Lokalizacja określony znak w prostokącie klienta formantu.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.TextBoxBase.GetPositionFromCharIndex(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="HidePromptOnLeave">
      <MemberSignature Language="C#" Value="public bool HidePromptOnLeave { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HidePromptOnLeave" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.HidePromptOnLeave" />
      <MemberSignature Language="VB.NET" Value="Public Property HidePromptOnLeave As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HidePromptOnLeave { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy znaki monitu maski wprowadzania są ukryte pola tekstowego maskowanego utraci fokus.</summary>
        <value>
          <see langword="true" /> Jeśli <see cref="P:System.Windows.Forms.MaskedTextBox.PromptChar" /> jest ukryty po <see cref="T:System.Windows.Forms.MaskedTextBox" /> nie ma fokusa; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="false" />.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.PromptChar" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.ResetOnPrompt" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.TextMaskFormat" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.CutCopyMaskFormat" />
      </Docs>
    </Member>
    <Member MemberName="InsertKeyMode">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.InsertKeyMode InsertKeyMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.InsertKeyMode InsertKeyMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.InsertKeyMode" />
      <MemberSignature Language="VB.NET" Value="Public Property InsertKeyMode As InsertKeyMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::InsertKeyMode InsertKeyMode { System::Windows::Forms::InsertKeyMode get(); void set(System::Windows::Forms::InsertKeyMode value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.InsertKeyMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia tryb wstawiania tekstu maskowanego polu tekstowym.</summary>
        <value>
          <see cref="T:System.Windows.Forms.InsertKeyMode" /> Wartość, która wskazuje bieżący tryb wstawiania. Wartość domyślna to <see cref="F:System.Windows.Forms.InsertKeyMode.Default" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.InsertKeyMode%2A> Właściwość steruje zachowaniem wstawiania znaków <xref:System.Windows.Forms.MaskedTextBox> formantu. Stan tej właściwości jest definiowana za pomocą <xref:System.Windows.Forms.InsertKeyMode> wyliczenia, które mogą być zawsze włączone, zawsze wyłączona lub ustawiona na przestrzegać ustawienia klawiatury użytkownika. Ta właściwość zastępuje tryb wstawiania klawiatury. Na przykład, jeśli klawiatura ma ustawioną wartość zastąpienia ale <xref:System.Windows.Forms.MaskedTextBox.InsertKeyMode%2A> ustawiono `Insert`, <xref:System.Windows.Forms.MaskedTextBox> będzie działać w trybie wstawiania. <xref:System.Windows.Forms.MaskedTextBox.IsOverwriteMode%2A> Właściwość będą uzyskiwać dostęp do tryb wstawiania true <xref:System.Windows.Forms.MaskedTextBox>.  
  
 W przypadku zmiany <xref:System.Windows.Forms.MaskedTextBox.InsertKeyMode%2A> zmienia wartość <xref:System.Windows.Forms.MaskedTextBox.IsOverwriteMode%2A>, <xref:System.Windows.Forms.MaskedTextBox> zgłosi <xref:System.Windows.Forms.MaskedTextBox.IsOverwriteModeChanged> zdarzeń.  
  
 Ta właściwość nie ma efektu Jeśli maska nie została ustawiona.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Nieprawidłowy <see cref="T:System.Windows.Forms.InsertKeyMode" /> podano wartości, gdy ustawienie dla tej właściwości.</exception>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.IsOverwriteMode" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.AsciiOnly" />
      </Docs>
    </Member>
    <Member MemberName="IsInputKey">
      <MemberSignature Language="C#" Value="protected override bool IsInputKey (System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool IsInputKey(valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.IsInputKey(System.Windows.Forms.Keys)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function IsInputKey (keyData As Keys) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool IsInputKey(System::Windows::Forms::Keys keyData);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="keyData">Jeden z <see cref="T:System.Windows.Forms.Keys" /> wartości.</param>
        <summary>Określa, czy określony klucz jest kluczem wejściowy lub specjalny klucz, który wymaga przetwarzania wstępnego.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsOverwriteMode">
      <MemberSignature Language="C#" Value="public bool IsOverwriteMode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsOverwriteMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.IsOverwriteMode" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsOverwriteMode As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsOverwriteMode { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość określającą, czy nowe dane wejściowe użytkownika spowoduje zastąpienie istniejących danych wejściowych.</summary>
        <value>
          <see langword="true" /> Jeśli <see cref="T:System.Windows.Forms.MaskedTextBox" /> zastąpią istniejące znaki użytkownik wprowadza nowych; <see langword="false" /> Jeśli <see cref="T:System.Windows.Forms.MaskedTextBox" /> zostanie przesunięte istniejące znaki do przodu. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.IsOverwriteMode%2A> uwzględnia zarówno wartość <xref:System.Windows.Forms.MaskedTextBox.InsertKeyMode%2A> właściwości oraz stan klawiatury użytkownika. Jeśli <xref:System.Windows.Forms.MaskedTextBox.InsertKeyMode%2A> jest ustawiona jako <xref:System.Windows.Forms.InsertKeyMode.Insert> lub <xref:System.Windows.Forms.InsertKeyMode.Overwrite>, <xref:System.Windows.Forms.MaskedTextBox.IsOverwriteMode%2A> zwróci `false` lub `true`odpowiednio. Jeśli <xref:System.Windows.Forms.MaskedTextBox.InsertKeyMode%2A> ma ustawioną wartość <xref:System.Windows.Forms.InsertKeyMode.Default>, zwróci stan klawisza INSERT.  
  
 Gdy <xref:System.Windows.Forms.MaskedTextBox.IsOverwriteMode%2A> jest `false`, <xref:System.Windows.Forms.MaskedTextBox> spowoduje odrzucenie jako nieprawidłowy wpis znak spowodowałoby naruszenie w dowolnym miejscu maski. W wyjaśnienie jeśli wstawienie znaku spowodowałoby znak w pozycji maski, której nie będzie ważny, lekkie za pośrednictwem wstawiania znaków zostanie odrzucone.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.InsertKeyMode" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.AsciiOnly" />
      </Docs>
    </Member>
    <Member MemberName="IsOverwriteModeChanged">
      <MemberSignature Language="C#" Value="public event EventHandler IsOverwriteModeChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler IsOverwriteModeChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.MaskedTextBox.IsOverwriteModeChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsOverwriteModeChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ IsOverwriteModeChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po zmianie trybu wstawiania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.IsOverwriteModeChanged> Zdarzenie jest wywoływane po wykonaniu wartość <xref:System.Windows.Forms.MaskedTextBox.IsOverwriteMode%2A> właściwości zostanie zmieniona.  
  
 To zdarzenie jest wymagana prawidłowo wiązanie danych do <xref:System.Windows.Forms.MaskedTextBox> formantu.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje użycie tego elementu członkowskiego. W tym przykładzie program obsługi zdarzeń raportów w przypadku wystąpienia <xref:System.Windows.Forms.MaskedTextBox.IsOverwriteModeChanged> zdarzeń. Ten raport pomaga, aby dowiedzieć się, gdy zdarzenie występuje i mogą pomóc w debugowaniu. Aby raport wiele zdarzeń lub zdarzeń, które występuje często, rozważ zastąpienie <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> z <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> lub dołączanie wiadomości w wielowierszowym <xref:System.Windows.Forms.TextBox>.  
  
 Aby uruchomić przykładowy kod, wklej go do projektu, który zawiera wystąpienie typu <xref:System.Windows.Forms.MaskedTextBox> o nazwie `MaskedTextBox1`. Następnie upewnij się, że program obsługi zdarzeń jest skojarzony z <xref:System.Windows.Forms.MaskedTextBox.IsOverwriteModeChanged> zdarzeń.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#484](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#484)]
 [!code-vb[System.Windows.Forms.EventExamples#484](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#484)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.IsOverwriteMode" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.OnIsOverwriteModeChanged(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="Lines">
      <MemberSignature Language="C#" Value="public string[] Lines { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] Lines" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.Lines" />
      <MemberSignature Language="VB.NET" Value="Public Property Lines As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ Lines { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wierszy tekstu w wielowierszowym konfiguracjach. Ta właściwość nie jest obsługiwana przez <see cref="T:System.Windows.Forms.MaskedTextBox" />.</summary>
        <value>Tablica typu <see cref="T:System.String" /> zawierający pojedynczy wiersz.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.Lines%2A> Właściwość jest dziedziczona z podstawowym <xref:System.Windows.Forms.TextBoxBase> klasy. Jednak ponieważ <xref:System.Windows.Forms.MaskedTextBox> formant nie obsługuje konfiguracji wielowierszowe, ta właściwość nie jest obsługiwana.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.AcceptsTab" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.AcceptsTabChanged" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Multiline" />
      </Docs>
    </Member>
    <Member MemberName="Mask">
      <MemberSignature Language="C#" Value="public string Mask { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Mask" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.Mask" />
      <MemberSignature Language="VB.NET" Value="Public Property Mask As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Mask { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.MaskPropertyEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia maska wprowadzania do użycia w czasie wykonywania.</summary>
        <value>A <see cref="T:System.String" /> reprezentujący bieżącą maskę. Wartość domyślna to pusty ciąg, dzięki czemu żadnych danych.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.Mask%2A> jest domyślną właściwość dla <xref:System.Windows.Forms.MaskedTextBox> klasy.  
  
 <xref:System.Windows.Forms.MaskedTextBox.Mask%2A> musi być ciąg składa się z co najmniej jeden z elementów maskowania jak pokazano w poniższej tabeli. Język maskowania <xref:System.Windows.Forms.MaskedTextBox> jest zdefiniowany przez jego skojarzony <xref:System.Windows.Forms.MaskedTextBox.MaskedTextProvider%2A>. Standardowego dostawcy określa język maskowania, zależnie od kontrolka zamaskowanej edycji w Visual Basic 6.0 i powinny być bardzo znana użytkowników migrację z tej platformy.  
  
|Element maskowania|Opis|  
|---------------------|-----------------|  
|0|Cyfra, które są wymagane. Ten element będzie akceptować wszystkie pojedynczej cyfry od 0 do 9.|  
|9|Cyfra lub miejsca, opcjonalne.|  
|#|Cyfra lub miejsca, opcjonalne. Jeśli ta pozycja jest puste maski, ma być odwzorowany jako miejsca w <xref:System.Windows.Forms.MaskedTextBox.Text%2A> właściwości. Plus (+) oraz minus (-) można używać znaków.|  
|L|Litera, które są wymagane. Ogranicza dane wejściowe ASCII litery a-z i A-Z. Ten element maska jest odpowiednikiem [a-zA-Z] w wyrażeniach regularnych.|  
|?|Litera opcjonalne. Ogranicza dane wejściowe ASCII litery a-z i A-Z. Ten element maska jest odpowiednikiem [a-zA-Z]? w wyrażeniach regularnych.|  
|&|Znak, które są wymagane. Jeśli <xref:System.Windows.Forms.MaskedTextBox.AsciiOnly%2A> właściwość jest ustawiona na wartość true, ten element zachowuje się jak element "L".|  
|C|Znak opcjonalne. Dowolny znak-control. Jeśli <xref:System.Windows.Forms.MaskedTextBox.AsciiOnly%2A> właściwość jest ustawiona na `true`, ten element, który zachowuje się jak "?" elementu.|  
|ELEMENT|Alfanumeryczne, które są wymagane. Jeśli <xref:System.Windows.Forms.MaskedTextBox.AsciiOnly%2A> właściwość jest ustawiona na `true`, są tylko znaki akceptował ASCII litery a-z i A-Z. Ten element maski zachowuje się jak element "".|  
|a|Alfanumeryczne opcjonalne. Jeśli <xref:System.Windows.Forms.MaskedTextBox.AsciiOnly%2A> właściwość jest ustawiona na `true`, są tylko znaki akceptował ASCII litery a-z i A-Z. Ten element maski zachowuje się jak element "".|  
|.|Decimal — symbol zastępczy. Znak wyświetlany będzie właściwe dla dostawcy format dziesiętny, zgodnie z ustaleniami formantu <xref:System.Windows.Forms.MaskedTextBox.FormatProvider%2A> właściwości.|  
|,|Tysięcy symbolu zastępczego. Znak wyświetlany będzie tysięcy właściwe dla dostawcy formatu zgodnie z ustaleniami formantu zastępczego <xref:System.Windows.Forms.MaskedTextBox.FormatProvider%2A> właściwości.|  
|:|Separator czasu. Znak wyświetlany będzie właściwe dla dostawcy formatu symboli czasu zgodnie z ustaleniami formantu <xref:System.Windows.Forms.MaskedTextBox.FormatProvider%2A> właściwości.|  
|/|Separator daty. Znak wyświetlany będzie właściwe dla dostawcy formatu symboli daty, zgodnie z ustaleniami formantu <xref:System.Windows.Forms.MaskedTextBox.FormatProvider%2A> właściwości.|  
|$|Symbol waluty. Znak, który faktycznie wyświetlane będą właściwe dla dostawcy formatu symbol waluty, zgodnie z ustaleniami formantu <xref:System.Windows.Forms.MaskedTextBox.FormatProvider%2A> właściwości.|  
|\<|Przesunięcie w dół. Konwertuje wszystkie znaki, które należy wykonać na małe litery.|  
|>|Przenieś w. Konwertuje wszystkie znaki, które należy wykonać na wielkie litery.|  
|&#124;|Wyłącz poprzedniej zmiany w górę lub w dół.|  
|\|Ucieczki. Specjalne znak maski, włączając w literału. "\\\\" sekwencję ucieczki dla ukośnik odwrotny.|  
|Wszystkie inne znaki|Literały. Wszystkie elementy-mask pojawi się w <xref:System.Windows.Forms.MaskedTextBox>. Literały zawsze zajmują statyczne położenie maski w czasie wykonywania i nie można przenosić ani usunięty przez użytkownika.|  
  
 Jeśli zmienisz maski podczas <xref:System.Windows.Forms.MaskedTextBox> zawiera już dane wejściowe użytkownika filtrowane według maski poprzedniej <xref:System.Windows.Forms.MaskedTextBox> spróbuje wykonać migrację te dane wejściowe do nowej definicji maski. W przypadku niepowodzenia usunie istniejących danych wejściowych. Przypisywanie ciąg o zerowej długości jak maskę zachowa istniejących danych w formancie. W przypadku użycia z maską o zerowej długości <xref:System.Windows.Forms.MaskedTextBox> zachowuje się jak jeden wiersz <xref:System.Windows.Forms.TextBox> formantu.  
  
 Decimal (.), tysięczne (,), czas (:), Data (/) i domyślne symbole waluty ($) do wyświetlania tych symboli, zgodnie z definicją kultury aplikacji. Można wymusić na nich w celu wyświetlenia symboli dla kultury innego przy użyciu <xref:System.Windows.Forms.MaskedTextBox.FormatProvider%2A> właściwości.  
  
 Wstawienie znaku logicznie z maską w czasie wykonywania jest kontrolowany przez <xref:System.Windows.Forms.MaskedTextBox.InsertKeyMode%2A> właściwości. Użytkownicy można przejść za pomocą maski przy użyciu w lewo i strzałki w prawo lub kursor myszy i przejść opcjonalne pozycji maski wprowadzając spacją.  
  
> [!IMPORTANT]
>  <xref:System.Windows.Forms.MaskedTextBox> obsługuje wszystkie znaki Unicode z wyjątkiem surogatów i w pionie łączenie znaków.  
  
 W poniższej tabeli przedstawiono przykład maski.  
  
|Maska|Zachowanie|  
|----------|--------------|  
|`00/00/0000`|Data (dzień, miesiąc liczbowego, rok) w formacie międzynarodowej daty. Znak "/" jest separatora operatory i będą wyświetlane użytkownikowi jako separator daty odpowiednią dla bieżącej kultury aplikacji.|  
|`00->L<LL-0000`|Data (dzień, skrót miesiąca i roku) w formacie Stanów Zjednoczonych, w którym skrót miesiąca trzyliterowy zostanie wyświetlony z początkowej wielką literę, a następnie dwa małe litery.|  
|`(999)-000-0000`|Numer telefonu Stanów Zjednoczonych, numer kierunkowy opcjonalne. Jeśli użytkownicy nie chcesz wprowadzać znaki opcjonalne, ich wprowadź spacji lub umieść wskaźnik myszy bezpośrednio w pozycji w masce reprezentowany przez pierwszy 0.|  
|`$999,999.00`|Wartość waluty w zakresie od 0 do 999999. Waluty, / 1000 i znaki dziesiętne zostaną zastąpione w czasie wykonywania ich odpowiedniki specyficzne dla kultury.|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Ciąg przekazany do <see cref="P:System.Windows.Forms.MaskedTextBox.Mask" /> właściwość nie jest prawidłową maskę. Nieprawidłowy maski obejmują maski zawierający niedrukowalne znaki.</exception>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Text" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.MaskFull" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.MaskCompleted" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.MaskChanged" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.MaskedTextProvider" />
      </Docs>
    </Member>
    <Member MemberName="MaskChanged">
      <MemberSignature Language="C#" Value="public event EventHandler MaskChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler MaskChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.MaskedTextBox.MaskChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MaskChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ MaskChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po zmianie maska wprowadzania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.MaskChanged> Zdarzenie jest wywoływane po wykonaniu wartość <xref:System.Windows.Forms.MaskedTextBox.Mask%2A> właściwości zostanie zmieniona. To zdarzenie jest również wygenerowany, jeśli <xref:System.Windows.Forms.MaskedTextBox.MaskedTextProvider%2A> pośrednio zostanie zmodyfikowana przez element członkowski na przykład <xref:System.Windows.Forms.MaskedTextBox.Mask%2A>, <xref:System.Windows.Forms.MaskedTextBox.AllowPromptAsInput%2A>, <xref:System.Windows.Forms.MaskedTextBox.AsciiOnly%2A>, i <xref:System.Windows.Forms.MaskedTextBox.Culture%2A>.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje użycie tego elementu członkowskiego. W tym przykładzie program obsługi zdarzeń raportów w przypadku wystąpienia <xref:System.Windows.Forms.MaskedTextBox.MaskChanged> zdarzeń. Ten raport pomaga, aby dowiedzieć się, gdy zdarzenie występuje i mogą pomóc w debugowaniu. Aby raport wiele zdarzeń lub zdarzeń, które występuje często, rozważ zastąpienie <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> z <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> lub dołączanie wiadomości w wielowierszowym <xref:System.Windows.Forms.TextBox>.  
  
 Aby uruchomić przykładowy kod, wklej go do projektu, który zawiera wystąpienie typu <xref:System.Windows.Forms.MaskedTextBox> o nazwie `MaskedTextBox1`. Następnie upewnij się, że program obsługi zdarzeń jest skojarzony z <xref:System.Windows.Forms.MaskedTextBox.MaskChanged> zdarzeń.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#485](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#485)]
 [!code-vb[System.Windows.Forms.EventExamples#485](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#485)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.OnMaskChanged(System.EventArgs)" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.MaskedTextProvider" />
      </Docs>
    </Member>
    <Member MemberName="MaskCompleted">
      <MemberSignature Language="C#" Value="public bool MaskCompleted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool MaskCompleted" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.MaskCompleted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MaskCompleted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool MaskCompleted { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy wprowadzono wszystkie wymagane dane wejściowe do maska wprowadzania.</summary>
        <value>
          <see langword="true" /> Jeżeli wprowadzono wszystkie wymagane dane wejściowe do maski; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.MaskCompleted%2A> sprawdza, czy tylko wymagane elementy wejściowe. Aby określić, czy wszystkie wymagane i opcjonalne elementów wejściowych zostały wypełnione, użyj <xref:System.Windows.Forms.MaskedTextBox.MaskFull%2A> właściwości zamiast tego.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.MaskFull" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Text" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.MaskChanged" />
      </Docs>
    </Member>
    <Member MemberName="MaskedTextProvider">
      <MemberSignature Language="C#" Value="public System.ComponentModel.MaskedTextProvider MaskedTextProvider { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.MaskedTextProvider MaskedTextProvider" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.MaskedTextProvider" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MaskedTextProvider As MaskedTextProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ComponentModel::MaskedTextProvider ^ MaskedTextProvider { System::ComponentModel::MaskedTextProvider ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ComponentModel.MaskedTextProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera klonowania maska dostawcy skojarzonego z tym wystąpieniem maskowanego polu tekstowym.</summary>
        <value>Maskowanie dostawcy języka typu <see cref="P:System.Windows.Forms.MaskedTextBox.MaskedTextProvider" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.MaskedTextProvider%2A> Właściwość definiuje aparat analizy maski i język maskowania <xref:System.Windows.Forms.MaskedTextBox> formantu. Domyślny dostawca jest <xref:System.ComponentModel.MaskedTextProvider?displayProperty=nameWithType> klasy; jednak niestandardowego dostawcy może być określony przy użyciu <xref:System.Windows.Forms.MaskedTextBox.%23ctor%28System.ComponentModel.MaskedTextProvider%29> konstruktora.  
  
 <xref:System.Windows.Forms.MaskedTextBox.MaskedTextProvider%2A> Nie można ustawić bezpośrednio. Jednak niektóre właściwości ustawienie <xref:System.Windows.Forms.MaskedTextBox>— takie jak <xref:System.Windows.Forms.MaskedTextBox.Mask%2A>, <xref:System.Windows.Forms.MaskedTextBox.AllowPromptAsInput%2A>, <xref:System.Windows.Forms.MaskedTextBox.AsciiOnly%2A>, i <xref:System.Windows.Forms.MaskedTextBox.Culture%2A>— wewnętrznie może spowodować utworzenie nowego <xref:System.Windows.Forms.MaskedTextBox.MaskedTextProvider%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.MaskedTextProvider" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
      </Docs>
    </Member>
    <Member MemberName="MaskFull">
      <MemberSignature Language="C#" Value="public bool MaskFull { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool MaskFull" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.MaskFull" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MaskFull As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool MaskFull { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy wprowadzono wszystkich danych wejściowych wymaganych i opcjonalnych w maska wprowadzania.</summary>
        <value>
          <see langword="true" /> Jeśli zostały wprowadzone wszystkich danych wejściowych wymaganych i opcjonalnych; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można użyć <xref:System.Windows.Forms.MaskedTextBox.MaskFull%2A> właściwości <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected> obsługi zdarzeń, aby określić, czy wejściowych użytkownika zostało odrzucone, ponieważ maska nie zawiera żadnych pozostałe dane wejściowe. Aby określić, czy wprowadzono tylko wymagane elementy wejściowe, użyj <xref:System.Windows.Forms.MaskedTextBox.MaskCompleted%2A> właściwości.  
  
   
  
## Examples  
 Poniższy kod uchwytów przykład <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected> zdarzeń i używa <xref:System.Windows.Forms.ToolTip> powiadamiania użytkownika, gdy podejmowana jest próba wprowadzania danych po wszystkich pozycji maski zostały już użyte.  
  
 [!code-csharp[MaskInputRejectedSample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/MaskInputRejectedSample/CS/form1.cs#1)]
 [!code-vb[MaskInputRejectedSample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/MaskInputRejectedSample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.MaskCompleted" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Text" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.MaskChanged" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.MaskInputRejected" />
      </Docs>
    </Member>
    <Member MemberName="MaskInputRejected">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.MaskInputRejectedEventHandler MaskInputRejected;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.MaskInputRejectedEventHandler MaskInputRejected" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.MaskedTextBox.MaskInputRejected" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MaskInputRejected As MaskInputRejectedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::MaskInputRejectedEventHandler ^ MaskInputRejected;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MaskInputRejectedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy wejściowych użytkownika lub znak przypisany jest niezgodna z odpowiadającego mu elementu format maski.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected> to domyślne zdarzenie dla <xref:System.Windows.Forms.MaskedTextBox> klasy.  
  
 <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected> Zdarzenie wystąpi, gdy znak zostanie odrzucony przez maska wprowadzania. Maska wprowadzania, reprezentowany przez <xref:System.Windows.Forms.MaskedTextBox.Mask%2A> właściwości, jest interpretowany przez dostawcę maskowanego tekst skojarzony z formantem za pośrednictwem <xref:System.Windows.Forms.MaskedTextBox.MaskedTextProvider%2A> właściwości. <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected> jest uruchamiany w następujących sytuacjach:  
  
-   Znak wejściowy nie pasuje do odpowiadającego mu elementu formatu. Na przykład użytkownik wprowadza litera, gdy wymagana jest cyfrą. Prawdopodobnie jest to najbardziej typowe przyczyny, dlaczego to zdarzenie jest wywoływane.  
  
-   Użytkownik próbuje nadmiarowe znaki poza koniec maska wprowadzania ponieważ wypełnił już maski lub bieżącym położeniu karetki została przeniesiona na końcu ciągu wyświetlanego maski wprowadzania.  
  
-   Operacja wklejania albo wstawia znak, który jest niezgodny z jej elementu skojarzone format lub, jeśli <xref:System.Windows.Forms.MaskedTextBox.IsOverwriteMode%2A> właściwość jest `false`, wykonuje przesunięcie istniejące znaki w nowe położenie, w których one nie odpowiadają ich elementów formatu.  
  
-   Operacja wycięte przesuwa istniejące znaki w lewo i co najmniej jeden znak nie są zgodne z ich format nowo skojarzonych elementów.  
  
-   Wykonano przypisanie do <xref:System.Windows.Forms.MaskedTextBox.Text%2A> właściwości i przypisane ciąg spowodował jeden lub więcej naruszeń maski.  
  
 Jeśli ciąg został przypisany do formantu, który powoduje, że <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected> było, żadna część ciągu pojawią się w <xref:System.Windows.Forms.MaskedTextBox>.  
  
 Domyślna obsługa dla <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected> odtwarzania dźwięku pliku dźwiękowego w przypadku <xref:System.Windows.Forms.MaskedTextBox.BeepOnError%2A> właściwość jest ustawiona na `true`. To zdarzenie jest często obsługiwane do implementowania obsługi błędów niestandardowych, na przykład, aby przejść do następnej kontrolki wejściowe użytkownika, jeśli maska jest pełny lub aby wyświetlić okno dialogowe błędów niestandardowych lub etykietka narzędzia, jeśli znak wejściowy jest nieprawidłowy.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje użycie tego elementu członkowskiego. W tym przykładzie program obsługi zdarzeń raportów w przypadku wystąpienia <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected> zdarzeń. Ten raport pomaga, aby dowiedzieć się, gdy zdarzenie występuje i mogą pomóc w debugowaniu. Aby raport wiele zdarzeń lub zdarzeń, które występuje często, rozważ zastąpienie <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> z <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> lub dołączanie wiadomości w wielowierszowym <xref:System.Windows.Forms.TextBox>.  
  
 Aby uruchomić przykładowy kod, wklej go do projektu, który zawiera wystąpienie typu <xref:System.Windows.Forms.MaskedTextBox> o nazwie `MaskedTextBox1`. Następnie upewnij się, że program obsługi zdarzeń jest skojarzony z <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected> zdarzeń.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#486](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#486)]
 [!code-vb[System.Windows.Forms.EventExamples#486](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#486)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Text" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.MaskedTextProvider" />
        <altmember cref="T:System.Windows.Forms.MaskInputRejectedEventArgs" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.IsOverwriteMode" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.BeepOnError" />
      </Docs>
    </Member>
    <Member MemberName="MaxLength">
      <MemberSignature Language="C#" Value="public override int MaxLength { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxLength" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.MaxLength" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property MaxLength As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int MaxLength { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia maksymalną liczbę znaków, użytkownik może wpisać lub wkleić w polu tekstowym. Ta właściwość nie jest obsługiwana przez <see cref="T:System.Windows.Forms.MaskedTextBox" />.</summary>
        <value>Ta właściwość zawsze zwraca wartość 0.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zobacz <xref:System.Windows.Forms.MaskedTextBox.Mask%2A> właściwości i <xref:System.Windows.Forms.MaskInputRejectedEventArgs.Position%2A> właściwości w <xref:System.Windows.Forms.MaskInputRejectedEventArgs> klasy informacji dotyczących sposobu ustalenia maksymalną długość ciągu w <xref:System.Windows.Forms.MaskedTextBox>.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="P:System.Windows.Forms.MaskInputRejectedEventArgs.Position" />
      </Docs>
    </Member>
    <Member MemberName="Multiline">
      <MemberSignature Language="C#" Value="public override bool Multiline { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Multiline" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.Multiline" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Multiline As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool Multiline { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy jest to wielowierszowym polu tekstowym. Ta właściwość nie jest w pełni obsługiwana przez <see cref="T:System.Windows.Forms.MaskedTextBox" />.</summary>
        <value>Ta właściwość zawsze zwraca <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.AcceptsTab%2A> Właściwość jest dziedziczona z podstawowym <xref:System.Windows.Forms.TextBoxBase> klasy. Jednak ponieważ <xref:System.Windows.Forms.MaskedTextBox> formant nie obsługuje konfiguracji wielowierszowe, ta właściwość nie jest w pełni obsługiwana; nie można ustawić i zawsze jest rozpoznawana jako `false`.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.AcceptsTab" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.AcceptsTabChanged" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Lines" />
      </Docs>
    </Member>
    <Member MemberName="MultilineChanged">
      <MemberSignature Language="C#" Value="public event EventHandler MultilineChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler MultilineChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.MaskedTextBox.MultilineChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MultilineChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ MultilineChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Zwykle występuje, gdy wartość <see cref="P:System.Windows.Forms.MaskedTextBox.Multiline" /> zmieniono właściwość; jednak to zdarzenie nie jest wywoływane przez <see cref="T:System.Windows.Forms.MaskedTextBox" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.MultilineChanged> Zdarzeń jest dziedziczona z podstawowym <xref:System.Windows.Forms.TextBoxBase> klasy. Jednak ponieważ <xref:System.Windows.Forms.MaskedTextBox> formant nie obsługuje konfiguracji wielowierszowe, to zdarzenie nie jest zaimplementowana w <xref:System.Windows.Forms.MaskedTextBox>.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Multiline" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.OnMultilineChanged(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnBackColorChanged">
      <MemberSignature Language="C#" Value="protected override void OnBackColorChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnBackColorChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.OnBackColorChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnBackColorChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnBackColorChanged(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.EventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Występuje, gdy wartość <see cref="P:System.Windows.Forms.Control.BackColor" /> zmiany właściwości.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnHandleCreated">
      <MemberSignature Language="C#" Value="protected override void OnHandleCreated (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnHandleCreated(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.OnHandleCreated(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnHandleCreated (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnHandleCreated(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.EventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Zgłasza <see cref="E:System.Windows.Forms.Control.HandleCreated" /> zdarzeń.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsOverwriteModeChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsOverwriteModeChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsOverwriteModeChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.OnIsOverwriteModeChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsOverwriteModeChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsOverwriteModeChanged(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.EventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Zgłasza <see cref="E:System.Windows.Forms.MaskedTextBox.IsOverwriteModeChanged" /> zdarzeń.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podnoszenie zdarzenia wywołuje program obsługi zdarzeń przez delegata. Aby uzyskać więcej informacji, zobacz [Obsługa i wywoływanie zdarzeń](~/docs/standard/events/index.md).  
  
 <xref:System.Windows.Forms.MaskedTextBox.OnIsOverwriteModeChanged%2A> Metoda umożliwia również klas pochodnych do obsługi zdarzenia bez dołączanie delegata. Jest to preferowana metoda obsługi zdarzeń w klasie pochodnej.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>W przypadku przesłaniania <see cref="M:System.Windows.Forms.MaskedTextBox.OnIsOverwriteModeChanged(System.EventArgs)" /> w klasie pochodnej, należy wywołać klasy podstawowej <see cref="M:System.Windows.Forms.MaskedTextBox.OnIsOverwriteModeChanged(System.EventArgs)" /> metody, które zarejestrowane delegatów odbierać zdarzenia.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.IsOverwriteModeChanged" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.IsOverwriteMode" />
      </Docs>
    </Member>
    <Member MemberName="OnKeyDown">
      <MemberSignature Language="C#" Value="protected override void OnKeyDown (System.Windows.Forms.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnKeyDown(class System.Windows.Forms.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.OnKeyDown(System.Windows.Forms.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnKeyDown (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnKeyDown(System::Windows::Forms::KeyEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.KeyEventArgs" /> zawierający dane zdarzenia.</param>
        <summary>Zgłasza <see cref="E:System.Windows.Forms.Control.KeyDown" /> zdarzeń.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnKeyDown(System.Windows.Forms.KeyEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnKeyPress">
      <MemberSignature Language="C#" Value="protected override void OnKeyPress (System.Windows.Forms.KeyPressEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnKeyPress(class System.Windows.Forms.KeyPressEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnKeyPress (e As KeyPressEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnKeyPress(System::Windows::Forms::KeyPressEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.KeyPressEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.KeyPressEventArgs" /> zawierający dane zdarzenia.</param>
        <summary>Zgłasza <see cref="E:System.Windows.Forms.Control.KeyPress" /> zdarzeń.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnKeyUp">
      <MemberSignature Language="C#" Value="protected override void OnKeyUp (System.Windows.Forms.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnKeyUp(class System.Windows.Forms.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.OnKeyUp(System.Windows.Forms.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnKeyUp (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnKeyUp(System::Windows::Forms::KeyEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.KeyEventArgs" /> zawierający dane zdarzenia.</param>
        <summary>Zgłasza <see cref="E:System.Windows.Forms.Control.KeyUp" /> zdarzeń.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnKeyUp(System.Windows.Forms.KeyEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnMaskChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnMaskChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMaskChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.OnMaskChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMaskChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMaskChanged(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.EventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Zgłasza <see cref="E:System.Windows.Forms.MaskedTextBox.MaskChanged" /> zdarzeń.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podnoszenie zdarzenia wywołuje program obsługi zdarzeń przez delegata. Aby uzyskać więcej informacji, zobacz [Obsługa i wywoływanie zdarzeń](~/docs/standard/events/index.md).  
  
 <xref:System.Windows.Forms.MaskedTextBox.OnMaskChanged%2A> Metoda umożliwia również klas pochodnych do obsługi zdarzenia bez dołączanie delegata. Jest to preferowana metoda obsługi zdarzeń w klasie pochodnej.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>W przypadku przesłaniania <see cref="M:System.Windows.Forms.MaskedTextBox.OnMaskChanged(System.EventArgs)" /> w klasie pochodnej, należy wywołać klasy podstawowej <see cref="M:System.Windows.Forms.MaskedTextBox.OnMaskChanged(System.EventArgs)" /> metody, które zarejestrowane delegatów odbierać zdarzenia.</para>
        </block>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.MaskChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnMultilineChanged">
      <MemberSignature Language="C#" Value="protected override void OnMultilineChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnMultilineChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.OnMultilineChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnMultilineChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnMultilineChanged(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.EventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Zwykle zgłasza <see cref="E:System.Windows.Forms.MaskedTextBox.MultilineChanged" /> zdarzeń, ale wyłączone dla <see cref="T:System.Windows.Forms.MaskedTextBox" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.OnMultilineChanged%2A> Metoda jest dziedziczona z podstawowym <xref:System.Windows.Forms.TextBoxBase> klasy. Jednak ponieważ <xref:System.Windows.Forms.MaskedTextBox> formant nie obsługuje konfiguracji wielowierszowe, ta metoda zostanie przesłonięta do wykonywania nie czynności.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Multiline" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.MultilineChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnTextAlignChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnTextAlignChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTextAlignChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.OnTextAlignChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTextAlignChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTextAlignChanged(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.EventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Zgłasza <see cref="E:System.Windows.Forms.MaskedTextBox.TextAlignChanged" /> zdarzeń.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podnoszenie zdarzenia wywołuje program obsługi zdarzeń przez delegata. Aby uzyskać więcej informacji, zobacz [Obsługa i wywoływanie zdarzeń](~/docs/standard/events/index.md).  
  
 <xref:System.Windows.Forms.MaskedTextBox.OnTextAlignChanged%2A> Metoda umożliwia również klas pochodnych do obsługi zdarzenia bez dołączanie delegata. Jest to preferowana metoda obsługi zdarzeń w klasie pochodnej.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>W przypadku przesłaniania <see cref="M:System.Windows.Forms.MaskedTextBox.OnTextAlignChanged(System.EventArgs)" /> w klasie pochodnej, należy wywołać klasy podstawowej <see cref="M:System.Windows.Forms.MaskedTextBox.OnTextAlignChanged(System.EventArgs)" /> metody, które zarejestrowane delegatów odbierać zdarzenia.</para>
        </block>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.TextAlign" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.TextAlignChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnTextChanged">
      <MemberSignature Language="C#" Value="protected override void OnTextChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnTextChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.OnTextChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnTextChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnTextChanged(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.EventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Zgłasza <see cref="E:System.Windows.Forms.Control.TextChanged" /> zdarzeń.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podnoszenie zdarzenia wywołuje program obsługi zdarzeń przez delegata. Aby uzyskać więcej informacji, zobacz [Obsługa i wywoływanie zdarzeń](~/docs/standard/events/index.md).  
  
 <xref:System.Windows.Forms.MaskedTextBox.OnTextChanged%2A> Metoda umożliwia również klas pochodnych do obsługi zdarzenia bez dołączanie delegata. Jest to preferowana metoda obsługi zdarzeń w klasie pochodnej.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>W przypadku przesłaniania <see cref="M:System.Windows.Forms.MaskedTextBox.OnTextChanged(System.EventArgs)" /> w klasie pochodnej, należy wywołać klasy podstawowej <see cref="M:System.Windows.Forms.MaskedTextBox.OnTextChanged(System.EventArgs)" /> metody, które zarejestrowane delegatów odbierać zdarzenia.</para>
        </block>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Text" />
        <altmember cref="E:System.Windows.Forms.Control.TextChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnValidating">
      <MemberSignature Language="C#" Value="protected override void OnValidating (System.ComponentModel.CancelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnValidating(class System.ComponentModel.CancelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.OnValidating(System.ComponentModel.CancelEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnValidating (e As CancelEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnValidating(System::ComponentModel::CancelEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.CancelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.ComponentModel.CancelEventArgs" /> zawierający dane zdarzenia.</param>
        <summary>Zgłasza <see cref="E:System.Windows.Forms.Control.Validating" /> zdarzeń.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.OnValidating%2A> Metoda powoduje, że ciąg wejściowy do sprawdzenia poprawności względem <xref:System.Windows.Forms.MaskedTextBox.ValidatingType%2A> właściwości, jeśli <xref:System.Type> został określony dla tej właściwości. Następnie zostanie także podnieść <xref:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted> zdarzeń.  
  
> [!NOTE]
>  Aby zapewnić spójność z formantami tekstowych, nastąpi weryfikacji nawet wtedy, gdy <xref:System.Windows.Forms.MaskedTextBox> jest tylko do odczytu (jego <xref:System.Windows.Forms.MaskedTextBox.ReadOnly%2A> właściwość jest ustawiona na `true`).  
  
 Podnoszenie zdarzenia wywołuje program obsługi zdarzeń przez delegata. Aby uzyskać więcej informacji, zobacz [Obsługa i wywoływanie zdarzeń](~/docs/standard/events/index.md).  
  
 <xref:System.Windows.Forms.MaskedTextBox.OnValidating%2A> Metoda umożliwia również klas pochodnych do obsługi zdarzenia bez dołączanie delegata. Jest to preferowana metoda obsługi zdarzeń w klasie pochodnej.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">Wystąpił wyjątek krytyczny podczas analizy ciągu wejściowego.</exception>
        <block subset="none" type="overrides">
          <para>W przypadku przesłaniania <see cref="M:System.Windows.Forms.MaskedTextBox.OnValidating(System.ComponentModel.CancelEventArgs)" /> w klasie pochodnej, należy wywołać klasy podstawowej <see cref="M:System.Windows.Forms.MaskedTextBox.OnValidating(System.ComponentModel.CancelEventArgs)" /> metody, które zarejestrowane delegatów odbierać zdarzenia.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.Control.Validating" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.ValidatingType" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.MaskInputRejected" />
      </Docs>
    </Member>
    <Member MemberName="PasswordChar">
      <MemberSignature Language="C#" Value="public char PasswordChar { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance char PasswordChar" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.PasswordChar" />
      <MemberSignature Language="VB.NET" Value="Public Property PasswordChar As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property char PasswordChar { char get(); void set(char value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue('\0')</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia znak, który będzie wyświetlany w zastępczych dla danych wejściowych użytkownika.</summary>
        <value>
          <see cref="T:System.Char" /> Wartość używana jako znak hasła.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dla danych wejściowych użytkownika poufnych jest typowym rozwiązaniem, aby ukryć rzeczywiste wartości wprowadzonej przez użytkownika. Jeśli <xref:System.Windows.Forms.MaskedTextBox.PasswordChar%2A> właściwość jest ustawiona na znak niepusty, <xref:System.Windows.Forms.MaskedTextBox> spowoduje wyświetlenie tego znaku dla wszystkich danych wejściowych w formancie. Ustawienie tej właściwości na `null` spowoduje wyłączenie tej funkcji.  
  
 Jeśli chcesz użyć znaku hasła dostarcza system operacyjny, który jest zdefiniowany w COMCTL32.dll, użyj <xref:System.Windows.Forms.MaskedTextBox.UseSystemPasswordChar%2A> właściwości zamiast tego. Jeśli oba <xref:System.Windows.Forms.MaskedTextBox.PasswordChar%2A> i <xref:System.Windows.Forms.MaskedTextBox.UseSystemPasswordChar%2A> właściwości są aktywowane, drugie ma pierwszeństwo.  
  
> [!IMPORTANT]
>  Jako zabezpieczeń brany pod uwagę <xref:System.Windows.Forms.MaskedTextBox> kontroli wyłącza wycinanie i kopiowanie operacje na ciągach chroniony hasłem.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Znak określony, gdy ustawienie dla tej właściwości nie jest prawidłowe hasło znakiem, zgodnie z ustaleniami <see cref="M:System.ComponentModel.MaskedTextProvider.IsValidPasswordChar(System.Char)" /> metody <see cref="T:System.ComponentModel.MaskedTextProvider" /> klasy.</exception>
        <exception cref="T:System.InvalidOperationException">Znak hasła określony jest taka sama jak bieżący znak monitu, <see cref="P:System.Windows.Forms.MaskedTextBox.PromptChar" />. Dwa muszą się różnić.</exception>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.UseSystemPasswordChar" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.PromptChar" />
      </Docs>
    </Member>
    <Member MemberName="ProcessCmdKey">
      <MemberSignature Language="C#" Value="protected override bool ProcessCmdKey (ref System.Windows.Forms.Message msg, System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool ProcessCmdKey(valuetype System.Windows.Forms.Message&amp; msg, valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function ProcessCmdKey (ByRef msg As Message, keyData As Keys) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool ProcessCmdKey(System::Windows::Forms::Message % msg, System::Windows::Forms::Keys keyData);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="msg" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="msg">A <see cref="T:System.Windows.Forms.Message" />, przekazywane przez odwołanie, reprezentujący komunikat okna do przetworzenia.</param>
        <param name="keyData">Jeden z <see cref="T:System.Windows.Forms.Keys" /> wartości, które reprezentuje klawisz skrótu do przetworzenia.</param>
        <summary>Przetwarza polecenia klucza.</summary>
        <returns>
          <see langword="true" /> Jeśli klucz polecenia został przetworzony przez formant; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.TextBoxBase.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)" />
      </Docs>
    </Member>
    <Member MemberName="ProcessKeyMessage">
      <MemberSignature Language="C#" Value="protected internal override bool ProcessKeyMessage (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance bool ProcessKeyMessage(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.ProcessKeyMessage(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Function ProcessKeyMessage (ByRef m As Message) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override bool ProcessKeyMessage(System::Windows::Forms::Message % m);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">A <see cref="T:System.Windows.Forms.Message" />, przekazywane przez odwołanie, reprezentujący komunikat okna do przetworzenia.</param>
        <summary>Zastępuje Podstawowa implementacja tej metody do obsługi języka wprowadzania zmian.</summary>
        <returns>
          <see langword="true" /> Jeśli komunikat został przetworzony przez formant; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox> zastępuje implementację jej kontrolki podstawowej <xref:System.Windows.Forms.MaskedTextBox.ProcessKeyMessage%2A> prawidłową obsługę zdarzenia znaków, gdy użytkownik wprowadza znaków przy użyciu Input Method Editor (IME), takich jak służy do wprowadzania, japoński, chiński i innych złożonych skryptów innych niż łacińskie. <xref:System.Windows.Forms.MaskedTextBox.ProcessKeyMessage%2A> wykrywa komunikaty WM_CHAR, które są wykonywane po odbierze komunikat WM_IME_CHAR i pomija je, aby zapobiec te znaki pojawiają się w formancie. Jeśli pochodzi z tego formantu i zastąpienie tego komunikatu, należy zduplikowane to zachowanie, w razie potrzeby nowego formantu do pracy z IME.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PromptChar">
      <MemberSignature Language="C#" Value="public char PromptChar { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance char PromptChar" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.PromptChar" />
      <MemberSignature Language="VB.NET" Value="Public Property PromptChar As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property char PromptChar { char get(); void set(char value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue('_')</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia znak używany do reprezentowania braku dane wejściowe użytkownika w <see cref="T:System.Windows.Forms.MaskedTextBox" />.</summary>
        <value>Znak używany do monit o podanie danych wejściowych. Wartość domyślna to znaku podkreślenia (_).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.PromptChar%2A> zostaną wyświetlone w <xref:System.Windows.Forms.MaskedTextBox> dla każdej pozycji maski, który użytkownik nie ma jeszcze wypełnione.  
  
 Użyj <xref:System.Windows.Forms.MaskedTextBox.HidePromptOnLeave%2A> właściwości w celu określenia, czy monit jest wyświetlany podczas <xref:System.Windows.Forms.MaskedTextBox> nie ma fokusa.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Znak określony, gdy ustawienie dla tej właściwości nie jest prawidłowym znakiem monitu, na podstawie <see cref="M:System.ComponentModel.MaskedTextProvider.IsValidPasswordChar(System.Char)" /> metody <see cref="T:System.ComponentModel.MaskedTextProvider" /> klasy.</exception>
        <exception cref="T:System.InvalidOperationException">Znak monitu o podanym jest taka sama jak bieżący znak hasła <see cref="P:System.Windows.Forms.MaskedTextBox.PasswordChar" />. Dwa muszą się różnić.</exception>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.PasswordChar" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.UseSystemPasswordChar" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.TextMaskFormat" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.CutCopyMaskFormat" />
      </Docs>
    </Member>
    <Member MemberName="ReadOnly">
      <MemberSignature Language="C#" Value="public bool ReadOnly { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.ReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public Property ReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ReadOnly { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy tekst w polu tekstowym jest tylko do odczytu.</summary>
        <value>
          <see langword="true" /> Aby wskazać tekst jest tylko do odczytu; w przeciwnym razie <see langword="false" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RejectInputOnFirstFailure">
      <MemberSignature Language="C#" Value="public bool RejectInputOnFirstFailure { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RejectInputOnFirstFailure" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.RejectInputOnFirstFailure" />
      <MemberSignature Language="VB.NET" Value="Public Property RejectInputOnFirstFailure As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool RejectInputOnFirstFailure { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy analiza danych wejściowych użytkownika powinno zostać zatrzymane po osiągnięciu pierwszego nieprawidłowy znak.</summary>
        <value>
          <see langword="true" /> Jeśli przetwarzanie ciąg wejściowy powinno zostać zakończone na pierwszy błąd analizy; w przeciwnym razie <see langword="false" /> Jeśli przetwarzanie ignorować wszystkie błędy. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Czasami użytkownik będzie wprowadzać kilku znaków do <xref:System.Windows.Forms.MaskedTextBox> w ramach jednej operacji wejściowych zwykle przez kopiowanie i wklejanie ciąg. Jeśli cały ciąg zawiera tylko prawidłowe znaki, zgodnie z ich pozycją Wklej maski wprowadzania, następnie cała operacja zostanie wykonana pomyślnie. Jednak podczas analizowania wystąpi błąd, zachowanie <xref:System.Windows.Forms.MaskedTextBox> zależy od wartości <xref:System.Windows.Forms.MaskedTextBox.RejectInputOnFirstFailure%2A>w następujący sposób:  
  
-   Jeśli ta właściwość jest `true`, następnie przetwarzania ciągu wejściowego zatrzymuje się na nieprawidłowy znak. Wszystkie kolejne znaki są ignorowane. Pojedynczy <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected> zdarzenia.  
  
-   Jeśli ta właściwość jest `false`, następnie nieprawidłowy znak zostanie odrzucony, ale podczas analizowania kontynuuje następny znak w ciągu wejściowym. A <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected> zdarzenie jest wywoływane dla każdego nieprawidłowy znak w ciągu wejściowym.  
  
 <xref:System.Windows.Forms.MaskedTextBox.ResetOnPrompt%2A>, <xref:System.Windows.Forms.MaskedTextBox.ResetOnSpace%2A> i <xref:System.Windows.Forms.MaskedTextBox.SkipLiterals%2A> właściwości mogą mieć wpływ także interpretacji danych wejściowych użytkownika.  
  
 Jeśli <xref:System.Windows.Forms.MaskedTextBox.IsOverwriteMode%2A> właściwość jest `false`, a następnie znaków już w maska wprowadzania z prawej strony punktu wstawiania zostanie przeniesiona za zaakceptowane liczbę znaków. To przesunięcie może spowodować dodatkowe błędy analizy.  
  
 Operacja wklejania można mimicked programowo, ustawiając <xref:System.Windows.Forms.MaskedTextBox.SelectedText%2A> właściwości.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.MaskInputRejected" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.ResetOnPrompt" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.ResetOnSpace" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.IsOverwriteMode" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.SelectedText" />
      </Docs>
    </Member>
    <Member MemberName="ResetOnPrompt">
      <MemberSignature Language="C#" Value="public bool ResetOnPrompt { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ResetOnPrompt" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.ResetOnPrompt" />
      <MemberSignature Language="VB.NET" Value="Public Property ResetOnPrompt As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ResetOnPrompt { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość określającą sposób obsługi znak wejściowy odpowiadającego znaku zgłoszenia.</summary>
        <value>
          <see langword="true" /> Jeżeli znaku zgłoszenia jako dane wejściowe powoduje, że bieżące położenie można edytować w masce zresetować; w przeciwnym razie <see langword="false" /> wskazująca, czy znak monitu jest do przetworzenia jako normalne znak wejściowy. Wartość domyślna to <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox> Można traktować dwie kategorie znaków — spacje i znaki monitu — specjalnie. Zazwyczaj każdy znak wejściowy zostaną przetestowane przed maski i albo zaakceptowane lub odrzucone. Przy założeniu, że <xref:System.Windows.Forms.MaskedTextBox.PromptChar%2A> właściwość jest ustawiona na nienależących`null`, następnie ustawienie <xref:System.Windows.Forms.MaskedTextBox.ResetOnPrompt%2A> właściwości `true` spowoduje specjalnego przetwarzania dla znaku zgłoszenia. Gdy użytkownik wprowadzi znaku zgłoszenia logicznie z maską, powoduje bieżące położenie znaku maski do wyczyszczenia i bieżącą pozycję Zaawansowane na następny znak można edytować.  
  
 <xref:System.Windows.Forms.MaskedTextBox.ResetOnPrompt%2A> pierwszeństwo <xref:System.Windows.Forms.MaskedTextBox.AllowPromptAsInput%2A> właściwości, jak pokazano w poniższej tabeli.  
  
|Wartość ResetOnPrompt|Wartość AllowPromptAsInput|Efekty|  
|-------------------------|------------------------------|------------------------|  
|`true`|`true`|Można wprowadzać znaku zgłoszenia i powoduje bieżące położenie maski zostaną zresetowane. Domyślnie włączone.|  
|`true`|`false`|Można wprowadzać znaku zgłoszenia i powoduje bieżące położenie maski zostaną zresetowane.|  
|`false`|`true`|Znak monitu jest przetwarzany jako standardowa znak wejściowy.|  
|`false`|`false`|Znak monitu jest nieprawidłowy i zgłasza <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected> zdarzeń.|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.PromptChar" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.AllowPromptAsInput" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.HidePromptOnLeave" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.ResetOnSpace" />
      </Docs>
    </Member>
    <Member MemberName="ResetOnSpace">
      <MemberSignature Language="C#" Value="public bool ResetOnSpace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ResetOnSpace" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.ResetOnSpace" />
      <MemberSignature Language="VB.NET" Value="Public Property ResetOnSpace As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ResetOnSpace { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość, która określa obsługi wejściowych spacją.</summary>
        <value>
          <see langword="true" /> Jeśli znak wejściowy miejsce powoduje, że bieżące położenie można edytować w masce zresetować; w przeciwnym razie <see langword="false" /> aby wskazać, że do przetworzenia jako normalne znak wejściowy. Wartość domyślna to <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox> Można traktować dwie kategorie znaków — spacje i znaki monitu — specjalnie. Zazwyczaj każdy znak wejściowy zostaną przetestowane przed maski i albo zaakceptowane lub odrzucone. Ustawienie <xref:System.Windows.Forms.MaskedTextBox.ResetOnSpace%2A> właściwości `true` spowoduje bieżące położenie znaku maski do wyczyszczenia i bieżącą pozycję Zaawansowane na następny znak można edytować.  
  
 Typ danych wejściowych znak będzie określić, czy aparat maskowania powoduje przejście do następnej znak w masce lub pozostaje w bieżącym położeniu i czeka na pasującego znaku. Jeśli wprowadzany znak jest spacją i nie odpowiada nie można edytować bieżący znak w masce, aparat maskowania będzie przejdź do następnej znak maski. Jeśli znak wejściowy nie jest spacją, a nie pasuje nie można edytować bieżący znak w masce, aparat maskowania pozostają w bieżącym położeniu maski i próbował dopasować na następny znak wejściowy na nim.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.ResetOnPrompt" />
      </Docs>
    </Member>
    <Member MemberName="ScrollToCaret">
      <MemberSignature Language="C#" Value="public void ScrollToCaret ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScrollToCaret() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.ScrollToCaret" />
      <MemberSignature Language="VB.NET" Value="Public Sub ScrollToCaret ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ScrollToCaret();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Przewija zawartości formantu do bieżącego położenia karetki. Ta metoda nie jest obsługiwana przez <see cref="T:System.Windows.Forms.MaskedTextBox" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.ScrollToCaret%2A> Metoda jest dziedziczona z podstawowym <xref:System.Windows.Forms.TextBoxBase> klasy. Jednak ponieważ <xref:System.Windows.Forms.MaskedTextBox> formant nie obsługuje konfiguracji wielowierszowe, ta metoda zostanie przesłonięta do wykonywania nie czynności.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Multiline" />
      </Docs>
    </Member>
    <Member MemberName="SelectedText">
      <MemberSignature Language="C#" Value="public override string SelectedText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SelectedText" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.SelectedText" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property SelectedText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ SelectedText { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia bieżący wybór w <see cref="T:System.Windows.Forms.MaskedTextBox" /> formantu.</summary>
        <value>Aktualnie zaznaczonego tekstu jako <see cref="T:System.String" />. Jeśli obecnie nie zaznaczono żadnych tekstu, ta właściwość jest rozpoznawany jako ciąg pusty.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Opcje pobrany przy użyciu tej właściwości są sformatowane zgodnie z właściwości formatowania formantu, takie jak <xref:System.Windows.Forms.MaskedTextBox.Mask%2A>, <xref:System.Windows.Forms.MaskedTextBox.FormatProvider%2A>, <xref:System.Windows.Forms.MaskedTextBox.TextMaskFormat%2A> i <xref:System.Windows.Forms.MaskedTextBox.CutCopyMaskFormat%2A>. Opcje ustawić za pomocą tej właściwości przypominają operacji wklejania: każdy znak jest dopasowywana maski i <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected> zdarzenie jest wywoływane nieprawidłowych znaków. Jeśli <xref:System.Windows.Forms.MaskedTextBox.CutCopyMaskFormat%2A> jest `true`, literały i znaki monitu są dozwolone podczas ustawiania <xref:System.Windows.Forms.MaskedTextBox.SelectedText%2A>i będzie można usunąć trybie dyskretnym, chyba że naruszają one maski.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Text" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.CutCopyMaskFormat" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.RejectInputOnFirstFailure" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.GetPositionFromCharIndex(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="SkipLiterals">
      <MemberSignature Language="C#" Value="public bool SkipLiterals { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SkipLiterals" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.SkipLiterals" />
      <MemberSignature Language="VB.NET" Value="Public Property SkipLiterals As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SkipLiterals { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy użytkownik może ponownie wprowadzić wartości literałów.</summary>
        <value>
          <see langword="true" /> Aby umożliwić literały trzeba ponownie wprowadzić; w przeciwnym razie <see langword="false" /> aby uniemożliwić użytkownikowi zastępowaniu literał znaków. Wartość domyślna to <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Maska wprowadzania często zawiera literały. Gdy użytkownik wprowadza na znaki <xref:System.Windows.Forms.MaskedTextBox> w czasie wykonywania bieżącego położenia znaku czasami spadną na literału. <xref:System.Windows.Forms.MaskedTextBox.SkipLiterals%2A> Właściwość opisuje, jak dane wejściowe użytkownika na następny znak jest mają być obsługiwane w następujący sposób:  
  
-   Jeśli ta właściwość jest `true`, użytkownik może nadmiarowo wprowadzać ten sam znak jako literał w bieżącym położeniu lub wprowadzić następny znak można edytować, a tym samym przechodzenie bieżącej pozycji na tej pozycji.  
  
-   Jeśli ta właściwość jest `false`, użytkownik może wprowadzić tylko następny znak można edytować. Jeśli pozycja dalej maski nie akceptuje znak (na przykład użytkownik wpisze "/" i pozycji dalej można wprowadzać tylko cyfry), formantu zostanie podniesiony <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected> zdarzeń.  
  
 Na przykład w masce wpis "0000-90/90" Data ukośników są literały. Załóżmy, że użytkownik wprowadził dwie cyfry początkowej, "11", więc bieżącej pozycji w masce w pierwszym literał ukośnika (/). Jeśli <xref:System.Windows.Forms.MaskedTextBox.SkipLiterals%2A> jest `true`, a następnie użytkownik ma prawidłowy następujące opcje:  
  
-   Użytkownik może wprowadzić znak "/". Powoduje to pozycja jest przenoszony na następny znak, który w tym przykładzie jest czwarty pozycji, 9, maskowanie elementu.  
  
-   Użytkownik może wprowadzić następny znak można edytować, który w tym przykładzie jest cyfrą. Czy można zweryfikować wartości określonej i bieżące położenie będzie automatycznie przeniesione do piątego pozycji, które jest elementem 0 maskowania.  
  
 Jeśli <xref:System.Windows.Forms.MaskedTextBox.SkipLiterals%2A> jest `false`, następnie tylko prawidłowe danych wejściowych jest dozwolone, którym w tym przykładzie będzie cyfrę.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.MaskInputRejected" />
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public override string Text { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.Text" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Text As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Text { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.MaskedTextBoxTextEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia tekst, ponieważ aktualnie jest wyświetlana użytkownikowi.</summary>
        <value>A <see cref="T:System.String" /> zawierającej tekst aktualnie wyświetlany przez formant. Wartość domyślna to ciąg pusty.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.Text%2A> Właściwość powiązania domyślnego dla <xref:System.Windows.Forms.MaskedTextBox> klasy.  
  
 Ciągi pobrany przy użyciu tej właściwości są sformatowane zgodnie z właściwości formatowania formantu, takie jak <xref:System.Windows.Forms.MaskedTextBox.Mask%2A> i <xref:System.Windows.Forms.MaskedTextBox.TextMaskFormat%2A>.  
  
 Można przypisać z lub bez literał znaków do ciągu <xref:System.Windows.Forms.MaskedTextBox.Text%2A> w zależności od wartości <xref:System.Windows.Forms.MaskedTextBox.ResetOnPrompt%2A>, <xref:System.Windows.Forms.MaskedTextBox.ResetOnSpace%2A>, i <xref:System.Windows.Forms.MaskedTextBox.SkipLiterals%2A>.  
  
 <xref:System.Windows.Forms.MaskedTextBox.Text%2A> Właściwość powiązania domyślnego dla <xref:System.Windows.Forms.MaskedTextBox>.  
  
 <xref:System.Windows.Forms.MaskedTextBox> zostanie podniesiony <xref:System.Windows.Forms.Control.TextChanged> zdarzeń przy każdej zmianie wartości tekst sformatowany. Inne właściwości mogą lub nie mogą powodować zmiany tej wartości. Na przykład zmiana <xref:System.Windows.Forms.MaskedTextBox.PasswordChar%2A> właściwość nie zostanie podniesiony <xref:System.Windows.Forms.Control.TextChanged> zdarzeń, ale zmiana <xref:System.Windows.Forms.MaskedTextBox.Mask%2A> będzie właściwości.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje użycie <xref:System.Windows.Forms.MaskedTextBox.Text%2A> właściwości.  
  
 [!code-vb[TestMaskedTextBox#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TestMaskedTextBox/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.SelectedText" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.FormatProvider" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.TextMaskFormat" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Culture" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.HidePromptOnLeave" />
      </Docs>
    </Member>
    <Member MemberName="TextAlign">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HorizontalAlignment TextAlign { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.HorizontalAlignment TextAlign" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.TextAlign" />
      <MemberSignature Language="VB.NET" Value="Public Property TextAlign As HorizontalAlignment" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HorizontalAlignment TextAlign { System::Windows::Forms::HorizontalAlignment get(); void set(System::Windows::Forms::HorizontalAlignment value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HorizontalAlignment</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub Ustawia wyrównanie tekstu w polu tekstowym maskowanego.</summary>
        <value>Jeden z <see cref="T:System.Windows.Forms.HorizontalAlignment" /> wartości wyliczenia, które określa wyrównanie tekstu względem formantu. Wartość domyślna to <see cref="F:System.Windows.Forms.HorizontalAlignment.Left" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można użyć <xref:System.Windows.Forms.MaskedTextBox.TextAlign%2A> właściwości wyrównanie tekstu wyświetlanego w <xref:System.Windows.Forms.MaskedTextBox> odpowiadające układ elementów wizualnych na formularzu. Na przykład, jeśli formanty znajdują się po prawej stronie formularza, możesz ustawić <xref:System.Windows.Forms.MaskedTextBox.TextAlign%2A> właściwości <xref:System.Windows.Forms.HorizontalAlignment.Right>, a tekst zostanie wyrównany do prawej krawędzi formantu zamiast domyślne wyrównanie po lewej stronie.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Wartość przypisana do tej właściwości nie jest typu <see cref="T:System.Windows.Forms.HorizontalAlignment" />.</exception>
        <altmember cref="T:System.Windows.Forms.HorizontalAlignment" />
        <altmember cref="P:System.Windows.Forms.TextBoxBase.TextLength" />
        <altmember cref="P:System.Windows.Forms.TextBoxBase.AutoSize" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.TextAlignChanged" />
      </Docs>
    </Member>
    <Member MemberName="TextAlignChanged">
      <MemberSignature Language="C#" Value="public event EventHandler TextAlignChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler TextAlignChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.MaskedTextBox.TextAlignChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TextAlignChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ TextAlignChanged;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy zostanie zmieniona wyrównania tekstu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.TextAlignChanged> Zdarzenie jest wywoływane po wykonaniu <xref:System.Windows.Forms.MaskedTextBox.TextAlign%2A> właściwości zostanie zmieniona.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje użycie tego elementu członkowskiego. W tym przykładzie program obsługi zdarzeń raportów w przypadku wystąpienia <xref:System.Windows.Forms.MaskedTextBox.TextAlignChanged> zdarzeń. Ten raport pomaga, aby dowiedzieć się, gdy zdarzenie występuje i mogą pomóc w debugowaniu. Aby raport wiele zdarzeń lub zdarzeń, które występuje często, rozważ zastąpienie <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> z <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> lub dołączanie wiadomości w wielowierszowym <xref:System.Windows.Forms.TextBox>.  
  
 Aby uruchomić przykładowy kod, wklej go do projektu, który zawiera wystąpienie typu <xref:System.Windows.Forms.MaskedTextBox> o nazwie `MaskedTextBox1`. Następnie upewnij się, że program obsługi zdarzeń jest skojarzony z <xref:System.Windows.Forms.MaskedTextBox.TextAlignChanged> zdarzeń.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#487](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#487)]
 [!code-vb[System.Windows.Forms.EventExamples#487](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#487)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.TextAlign" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.OnTextAlignChanged(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="TextLength">
      <MemberSignature Language="C#" Value="public override int TextLength { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 TextLength" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.TextLength" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property TextLength As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int TextLength { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera długość wyświetlanego tekstu.</summary>
        <value>Int32 reprezentującą liczbę znaków w <see cref="P:System.Windows.Forms.MaskedTextBox.Text" /> właściwości. <see cref="P:System.Windows.Forms.MaskedTextBox.TextLength" /> uwzględnia właściwości, takie jak <see cref="P:System.Windows.Forms.MaskedTextBox.HidePromptOnLeave" />, co oznacza, że zwracane wyniki mogą być różne w zależności od tego, czy formant ma fokus.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextMaskFormat">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.MaskFormat TextMaskFormat { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.MaskFormat TextMaskFormat" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.TextMaskFormat" />
      <MemberSignature Language="VB.NET" Value="Public Property TextMaskFormat As MaskFormat" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::MaskFormat TextMaskFormat { System::Windows::Forms::MaskFormat get(); void set(System::Windows::Forms::MaskFormat value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MaskFormat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość określającą, czy literały i znaki monitu są dodawane do sformatowanego ciągu.</summary>
        <value>Jeden z <see cref="T:System.Windows.Forms.MaskFormat" /> wartości. Wartość domyślna to <see cref="F:System.Windows.Forms.MaskFormat.IncludeLiterals" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.TextMaskFormat%2A> Właściwość określa, jak są przetwarzane literału i szybkie znaków maski podczas generowania sformatowanego ciągu. W szczególności, określa czy literały i/lub znaki monitu są umieszczane w <xref:System.Windows.Forms.MaskedTextBox.Text%2A> właściwości. Gdy znaki monitu są wyłączone, są przekształceniu spacje ciągu w formacie.  
  
> [!NOTE]
>  <xref:System.Windows.Forms.MaskedTextBox.CutCopyMaskFormat%2A> Właściwość służy podobne celu względem sposobu <xref:System.Windows.Forms.MaskedTextBox.Text%2A> właściwości jest interpretowany.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Właściwość z <see cref="T:System.Windows.Forms.MaskFormat" /> wartość, która jest nieprawidłowa.</exception>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.CutCopyMaskFormat" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.PromptChar" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.AllowPromptAsInput" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Text" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.ToString" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca ciąg reprezentujący bieżące pole tekstowe maskowanego. Ta metoda zastępuje <see cref="M:System.Windows.Forms.TextBoxBase.ToString" />.</summary>
        <returns>A <see cref="T:System.String" /> zawierający informacje o bieżącej <see cref="T:System.Windows.Forms.MaskedTextBox" />. Ciąg zawiera typ, uproszczony widok ciąg wejściowy i sformatowany ciąg wejściowy.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta wersja <xref:System.Windows.Forms.MaskedTextBox.ToString%2A> metoda wywołuje klasa podstawowa implementacja tej metody <xref:System.Windows.Forms.TextBoxBase.ToString%2A?displayProperty=nameWithType>, następnie dołącza ciąg wejściowy po zakończeniu przetwarzania przez maskę. Ta metoda będzie honorować właściwości, które zmienia wygląd sformatowany ciąg, z następującymi wyjątkami:  
  
-   Zwracany ciąg zawsze zawiera znaki monitu i literału, niezależnie od wartości <xref:System.Windows.Forms.MaskedTextBox.TextMaskFormat%2A> właściwości.  
  
-   Znaki hasła są ignorowane, dzięki czemu znakom wpisana przez użytkownika są zwracane. Innymi słowy, wartości <xref:System.Windows.Forms.MaskedTextBox.PasswordChar%2A> i <xref:System.Windows.Forms.MaskedTextBox.UseSystemPasswordChar%2A> właściwości są ignorowane.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Text" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.TextMaskFormat" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.PasswordChar" />
      </Docs>
    </Member>
    <Member MemberName="TypeValidationCompleted">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.TypeValidationEventHandler TypeValidationCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.TypeValidationEventHandler TypeValidationCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TypeValidationCompleted As TypeValidationEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::TypeValidationEventHandler ^ TypeValidationCompleted;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TypeValidationEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy <see cref="T:System.Windows.Forms.MaskedTextBox" /> zakończeniu analizy bieżące przy użyciu wartości <see cref="P:System.Windows.Forms.MaskedTextBox.ValidatingType" /> właściwości.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox> Kontroli opcjonalnie zostanie przeprowadzona Weryfikacja danych wejściowych użytkownika przed typ zdefiniowany przez jego <xref:System.Windows.Forms.MaskedTextBox.ValidatingType%2A?displayProperty=nameWithType> właściwości. Gdy ta właściwość nie jest `null`, występuje serie następujących zdarzeń:  
  
1.  Sekwencja weryfikacji rozpoczyna się, gdy wystąpi jedno z następujących czynności:  
  
    -   <xref:System.Windows.Forms.MaskedTextBox> formant utraci fokus.  
  
    -   <xref:System.Windows.Forms.MaskedTextBox.Text%2A> Właściwości są pobierane.  
  
    -   <xref:System.Windows.Forms.MaskedTextBox.ValidateText%2A> Metoda jest wywoływana.  
  
2.  Dowolne z tych zdarzeń powoduje wywołanie `Parse` metody typu określony za pomocą <xref:System.Windows.Forms.TypeValidationEventArgs.ValidatingType%2A> właściwości. `Parse` jest odpowiedzialny za sformatowany ciąg wejściowy konwersji na typ docelowy. Pomyślne konwersji równa pomyślnej weryfikacji.  
  
3.  Po `Parse` zwraca, <xref:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted> zdarzenia. Najczęściej zaimplementowano program obsługi zdarzeń dla tego zdarzenia do przetwarzania sprawdzania poprawności typu lub maski. Odbiera <xref:System.Windows.Forms.TypeValidationEventArgs> parametr zawierający informacje o konwersji; na przykład <xref:System.Windows.Forms.TypeValidationEventArgs.IsValidInput%2A> elementu członkowskiego wskazuje, czy konwersja powiodła się.  
  
4.  Po programu obsługi zdarzeń dla <xref:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted> zdarzeń zwraca Zdarzenie standardowe weryfikacji <xref:System.Windows.Forms.Control.Validating>, jest uruchamiany. Program obsługi może być używane do sprawdzania poprawności standardowe, może obejmować Anulowanie zdarzenia.  
  
5.  Jeśli zdarzenie nie zostało anulowane w kroku 3, standardowe kontrolować zdarzenie sprawdzania poprawności <xref:System.Windows.Forms.Control.Validated> jest wywoływane.  
  
 Jeśli <xref:System.Windows.Forms.TypeValidationEventArgs.Cancel%2A> właściwość jest ustawiona na `true` w <xref:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted> program obsługi zdarzeń, zdarzenie zostanie anulowane i <xref:System.Windows.Forms.MaskedTextBox> formant zachowuje fokus, chyba że kolejne <xref:System.Windows.Forms.Control.Validating> zdarzeń ustawia swoją wersję <xref:System.ComponentModel.CancelEventArgs.Cancel%2A?displayProperty=nameWithType> właściwości Powrót do `false`.  
  
   
  
## Examples  
 Poniższy przykład kodu próbuje przeanalizować danych wejściowych użytkownika jako prawidłowy <xref:System.DateTime> obiektu. W przypadku niepowodzenia <xref:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted> program obsługi zdarzeń jest wyświetlany komunikat o błędzie. Jeśli wartość jest prawidłowa <xref:System.DateTime>, kod sprawdza, czy data podana nie jest wcześniejsza od bieżącej daty. W tym przykładzie kodu wymaga, aby projektu formularzy systemu Windows zawiera <xref:System.Windows.Forms.MaskedTextBox> formantu o nazwie `MaskedTextBox1` i <xref:System.Windows.Forms.ToolTip> formantu o nazwie `ToolTip1`.  
  
 [!code-csharp[ValidatingTypeSample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ValidatingTypeSample/CS/form1.cs#1)]
 [!code-vb[ValidatingTypeSample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ValidatingTypeSample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Text" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.ValidateText" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.ValidatingType" />
        <altmember cref="T:System.Windows.Forms.TypeValidationEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="Undo">
      <MemberSignature Language="C#" Value="public void Undo ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Undo() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.Undo" />
      <MemberSignature Language="VB.NET" Value="Public Sub Undo ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Undo();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Cofa ostatnią operację edycji w polu tekstowym. Ta metoda nie jest obsługiwana przez <see cref="T:System.Windows.Forms.MaskedTextBox" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.Undo%2A> Metoda jest dziedziczona z podstawowym <xref:System.Windows.Forms.TextBoxBase> klasy. Jednak <xref:System.Windows.Forms.MaskedTextBox> nie obsługuje funkcji cofania.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.CanUndo" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.ClearUndo" />
      </Docs>
    </Member>
    <Member MemberName="UseSystemPasswordChar">
      <MemberSignature Language="C#" Value="public bool UseSystemPasswordChar { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseSystemPasswordChar" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.UseSystemPasswordChar" />
      <MemberSignature Language="VB.NET" Value="Public Property UseSystemPasswordChar As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseSystemPasswordChar { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy można używać znaków hasła dostarczane przez system operacyjny.</summary>
        <value>
          <see langword="true" /> Jeśli system hasło powinno być używane jako znak monitu; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.UseSystemPasswordChar%2A> Właściwość określa, czy dostarczone przez użytkownika dane wejściowe powinien być wyświetlany w <xref:System.Windows.Forms.MaskedTextBox> jako wiele wystąpień znaku hasło zdefiniowane przez system operacyjny. <xref:System.Windows.Forms.MaskedTextBox.UseSystemPasswordChar%2A> działa podobnie do <xref:System.Windows.Forms.MaskedTextBox.PasswordChar%2A> właściwości, ale zamiast dostarczone przez programistę znak monitu, <xref:System.Windows.Forms.MaskedTextBox.UseSystemPasswordChar%2A> używa monit zdefiniowane przez system operacyjny. Ta właściwość ma pierwszeństwo przed <xref:System.Windows.Forms.MaskedTextBox.PasswordChar%2A>.  
  
> [!IMPORTANT]
>  Jako zabezpieczeń brany pod uwagę <xref:System.Windows.Forms.MaskedTextBox> kontroli wyłącza wycinanie i kopiowanie operacje na ciągach chroniony hasłem.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Znak hasła określony jest taka sama jak bieżący znak monitu, <see cref="P:System.Windows.Forms.MaskedTextBox.PromptChar" />. Dwa muszą się różnić.</exception>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.PromptChar" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.PasswordChar" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.AllowPromptAsInput" />
      </Docs>
    </Member>
    <Member MemberName="ValidateText">
      <MemberSignature Language="C#" Value="public object ValidateText ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object ValidateText() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.ValidateText" />
      <MemberSignature Language="VB.NET" Value="Public Function ValidateText () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ ValidateText();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Konwertuje ciąg wejściowy użytkownika do wystąpienia typu sprawdzania poprawności.</summary>
        <returns>W przypadku powodzenia <see cref="T:System.Object" /> typu określonego przez <see cref="P:System.Windows.Forms.MaskedTextBox.ValidatingType" /> właściwość; w przeciwnym razie <see langword="null" /> wskazująca błąd konwersji.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.ValidateText%2A> Metoda próbuje przekonwertować ciągu sformatowaną zawarte w <xref:System.Windows.Forms.MaskedTextBox.Text%2A> dla właściwości wystąpienia typu określonego przez <xref:System.Windows.Forms.MaskedTextBox.ValidatingType%2A> właściwości. Znaki monitu są ignorowane w sformatowany ciąg znaków, ale literały są obsługiwane zgodnie z bieżącą wartość <xref:System.Windows.Forms.MaskedTextBox.TextMaskFormat%2A> właściwości.  
  
 <xref:System.Windows.Forms.MaskedTextBox.ValidateText%2A> zgłasza <xref:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted> zdarzenia po konwersji zostanie podjęta, niezależnie od jego powodzenie.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">Wystąpił wyjątek krytyczny podczas analizy ciągu wejściowego.</exception>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Text" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.ValidatingType" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.TextMaskFormat" />
      </Docs>
    </Member>
    <Member MemberName="ValidatingType">
      <MemberSignature Language="C#" Value="public Type ValidatingType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ValidatingType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.ValidatingType" />
      <MemberSignature Language="VB.NET" Value="Public Property ValidatingType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ ValidatingType { Type ^ get(); void set(Type ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia typ danych używany do sprawdzenia, wprowadzania danych przez użytkownika.</summary>
        <value>A <see cref="T:System.Type" /> reprezentujący typ danych używany w weryfikacji. Wartość domyślna to <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Maski w sobie nie gwarantuje, że dane wejściowe użytkownika będzie reprezentują prawidłowej wartości dla danego typu. Poniższy kod C# przedstawia maski:  
  
```  
maskedTextBox1.Mask = "99/99/9999";  
```  
  
 Poniższy kod Visual Basic przedstawia maski:  
  
 `MaskedTextBox1.Mask = "99/99/9999"`  
  
 Ta maska może wymagać użytkownika wprowadź 8 cyfr, ale nie można zweryfikować, że użytkownik musi wprowadzić datę, miesiąc i rok w poprawnym zakresie; chodzi maska jest "2003-12-20" i "0000-70/90" są równoważne.  
  
 Można użyć <xref:System.Windows.Forms.MaskedTextBox.ValidatingType%2A> Aby sprawdzić, czy dane wprowadzone przez użytkownika mieści się w poprawnym zakresie — w przypadku wcześniej wspomniano, przypisując wystąpienia <xref:System.DateTime> typu. Tekst w formancie zostanie zweryfikowany albo, gdy użytkownik opuści formantu. Można określić, czy dane nie weryfikacji przez monitorowanie <xref:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted> zdarzeń. <xref:System.Windows.Forms.MaskedTextBox> tylko zostanie przeprowadzone sprawdzanie przed <xref:System.Windows.Forms.MaskedTextBox.ValidatingType%2A> Jeśli <xref:System.Windows.Forms.MaskedTextBox.MaskCompleted%2A> jest `true`.  
  
 Jeśli chcesz użyć własnych typów danych niestandardowych z <xref:System.Windows.Forms.MaskedTextBox.ValidatingType%2A>, musisz zaimplementować statycznego `Parse` metody pobierającej ciągu jako parametr. Ta metoda musi zostać wdrożone z jedną lub obie następujące podpisów:  
  
 `public static Object Parse(string)`  
  
 `public static Object Parse(string, IFormatProvider)`  
  
   
  
## Examples  
 Poniższy przykład kodu próbuje przeanalizować danych wejściowych użytkownika jako prawidłowy <xref:System.DateTime>. W przypadku niepowodzenia <xref:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted> program obsługi zdarzeń jest wyświetlany komunikat o błędzie. Jeśli wartość jest prawidłowa <xref:System.DateTime>, kod wykonuje dodatkowe wyboru, aby upewnić się, że data podana nie jest wcześniejsza od bieżącej daty. W tym przykładzie kodu wymaga, aby projektu formularzy systemu Windows zawiera <xref:System.Windows.Forms.MaskedTextBox> formantu o nazwie `MaskedTextBox1` i <xref:System.Windows.Forms.ToolTip> formantu o nazwie `ToolTip1`.  
  
 [!code-csharp[ValidatingTypeSample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ValidatingTypeSample/CS/form1.cs#1)]
 [!code-vb[ValidatingTypeSample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ValidatingTypeSample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.MaskedTextProvider" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted" />
      </Docs>
    </Member>
    <Member MemberName="WndProc">
      <MemberSignature Language="C#" Value="protected override void WndProc (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void WndProc(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.WndProc(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub WndProc (ByRef m As Message)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void WndProc(System::Windows::Forms::Message % m);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message&amp;" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">Systemu Windows <see cref="T:System.Windows.Forms.Message" /> do procesu.</param>
        <summary>Przetwarza wiadomości systemu Windows.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.TextBoxBase.WndProc(System.Windows.Forms.Message@)" />
      </Docs>
    </Member>
    <Member MemberName="WordWrap">
      <MemberSignature Language="C#" Value="public bool WordWrap { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool WordWrap" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.WordWrap" />
      <MemberSignature Language="VB.NET" Value="Public Property WordWrap As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool WordWrap { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy wielowierszowym polu tekstowym automatycznie zawija tekst na początek następnego wiersza, jeśli to konieczne. Ta właściwość nie jest obsługiwana przez <see cref="T:System.Windows.Forms.MaskedTextBox" />.</summary>
        <value>
          <see cref="P:System.Windows.Forms.MaskedTextBox.WordWrap" /> Właściwość zawsze zwraca <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ponieważ <xref:System.Windows.Forms.MaskedTextBox> nie obsługuje wielu wierszy danych wejściowych, <xref:System.Windows.Forms.MaskedTextBox.WordWrap%2A> właściwość jest ignorowana.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Multiline" />
      </Docs>
    </Member>
  </Members>
</Type>