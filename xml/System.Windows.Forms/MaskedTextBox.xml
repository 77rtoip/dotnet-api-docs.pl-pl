<Type Name="MaskedTextBox" FullName="System.Windows.Forms.MaskedTextBox">
  <Metadata><Meta Name="ms.openlocfilehash" Value="df107f1430d520013715b8c746a95ac1f1976593" /><Meta Name="ms.sourcegitcommit" Value="e7974886b08aa83a8fb461e8550f31a7d4331ee3" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="07/23/2019" /><Meta Name="ms.locfileid" Value="68399983" /></Metadata><TypeSignature Language="C#" Value="public class MaskedTextBox : System.Windows.Forms.TextBoxBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MaskedTextBox extends System.Windows.Forms.TextBoxBase" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.MaskedTextBox" />
  <TypeSignature Language="VB.NET" Value="Public Class MaskedTextBox&#xA;Inherits TextBoxBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class MaskedTextBox : System::Windows::Forms::TextBoxBase" />
  <TypeSignature Language="F#" Value="type MaskedTextBox = class&#xA;    inherit TextBoxBase" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Forms.TextBoxBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultBindingProperty("Text")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("MaskInputRejected")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("Mask")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
      <AttributeName>System.ComponentModel.Designer("System.Windows.Forms.Design.MaskedTextBoxDesigner, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
      <AttributeName>System.ComponentModel.Designer("System.Windows.Forms.Design.MaskedTextBoxDesigner, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDispatch)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Używa maski do rozróżnienia odpowiednich i nieprawidłowych danych wejściowych użytkownika.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Klasa jest rozszerzoną <xref:System.Windows.Forms.TextBox> kontrolką obsługującą składnię deklaratywną do akceptowania lub odrzucania danych wejściowych użytkownika. <xref:System.Windows.Forms.MaskedTextBox> Za pomocą <xref:System.Windows.Forms.MaskedTextBox.Mask%2A> właściwości można określić następujące dane wejściowe bez pisania niestandardowej logiki walidacji w aplikacji:  
  
-   Wymagane znaki wejściowe.  
  
-   Opcjonalne znaki wejściowe.  
  
-   Oczekiwany typ danych wejściowych w danej pozycji maski; na przykład cyfrą lub znakiem alfabetycznym lub alfanumerycznym.  
  
-   Literały maski lub znaki, które powinny być wyświetlane bezpośrednio w <xref:System.Windows.Forms.MaskedTextBox>, na przykład łączniki (-) w numerze telefonu, lub symbol waluty w cenie.  
  
-   Specjalne przetwarzanie znaków wejściowych; na przykład, aby skonwertować znaki alfabetyczne na wielkie litery.  
  
 <xref:System.Windows.Forms.MaskedTextBox> Gdy kontrolka jest wyświetlana w czasie wykonywania, reprezentuje maskę jako serię znaków monitu i opcjonalne znaki literału. Każda pozycja maski edytowalnej reprezentująca wymagane lub opcjonalne dane wejściowe są wyświetlane z pojedynczym znakiem monitu. Na przykład znak numeru (#) jest często używany jako symbol zastępczy dla danych wejściowych znaków numerycznych. Możesz użyć właściwości, <xref:System.Windows.Forms.MaskedTextBox.PromptChar%2A> aby określić niestandardowy znak monitu. <xref:System.Windows.Forms.MaskedTextBox.HidePromptOnLeave%2A> Właściwość określa, czy użytkownik widzi znaki monitu, gdy kontrolka utraci fokus wprowadzania.  
  
 Gdy użytkownik wpisze dane wejściowe w polu tekstowym zamaskowane, prawidłowe znaki wejściowe zastępują odpowiednie znaki monitu w sposób sekwencyjny. Jeśli użytkownik wpisze nieprawidłowy znak wejściowy, nie następuje zastąpienie, ale zamiast tego wydaje się sygnał dźwiękowy, <xref:System.Windows.Forms.MaskedTextBox.BeepOnError%2A> Jeśli właściwość jest ustawiona `true`na, a <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected> zdarzenie jest zgłaszane. W tym zdarzeniu można podać własną niestandardową logikę błędów.  
  
 Gdy bieżący punkt wstawiania znajduje się na znaku literału, użytkownik ma wiele opcji:  
  
-   Jeśli wpisano znak inny niż znak monitu, literał zostanie automatycznie pominięty, a znak wejściowy zostanie zastosowany do następnej pozycji edytowalnej reprezentowanej przez następny znak monitu.  
  
-   W przypadku wpisania <xref:System.Windows.Forms.MaskedTextBox.AllowPromptAsInput%2A> znaku monitu, gdy właściwość ma wartość true, dane wejściowe zastąpią znak monitu, a punkt wstawiania zostanie przeniesiony do następnego położenia w masce.  
  
-   Tak jak zawsze, klawisze strzałek mogą służyć do przechodzenia do poprzedniej lub kolejnej pozycji.  
  
 Możesz użyć właściwości, <xref:System.Windows.Forms.MaskedTextBox.MaskFull%2A> aby sprawdzić, czy użytkownik wprowadził wszystkie wymagane dane wejściowe. Właściwość zawsze będzie pobierać dane wejściowe użytkownika sformatowane zgodnie z maską <xref:System.Windows.Forms.MaskedTextBox.TextMaskFormat%2A> i właściwością. <xref:System.Windows.Forms.MaskedTextBox.Text%2A>  
  
 Kontrolka faktycznie odkłada wszystkie przetwarzanie maski <xref:System.ComponentModel.MaskedTextProvider?displayProperty=nameWithType> do klasy określonej przez <xref:System.Windows.Forms.MaskedTextBox.MaskedTextProvider%2A> właściwość. <xref:System.Windows.Forms.MaskedTextBox> Ten standardowy dostawca obsługuje wszystkie znaki Unicode, z wyjątkiem surogatów i w pionie połączonych znaków; <xref:System.Windows.Forms.MaskedTextBox.AsciiOnly%2A> jednak właściwość może służyć do ograniczania danych wejściowych do znaków ustawia a-z, a-z i 0-9.  
  
 Maski nie muszą gwarantować, że dane wejściowe użytkownika będą stanowiły prawidłową wartość dla danego typu; na przykład-9 można wprowadzić w wieku w latach. Możesz sprawdzić, czy dane wejściowe użytkownika reprezentują prawidłową wartość, przypisując do <xref:System.Windows.Forms.MaskedTextBox.ValidatingType%2A> właściwości wystąpienie tego typu wartości. Można wykryć, czy użytkownik usuwa fokus <xref:System.Windows.Forms.MaskedTextBox> , gdy zawiera nieprawidłową wartość przez monitorowanie <xref:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted> zdarzenia. Jeśli walidacja typu powiedzie się, obiekt reprezentujący wartość będzie dostępny przez <xref:System.Windows.Forms.TypeValidationEventArgs.ReturnValue%2A> Właściwość <xref:System.Windows.Forms.TypeValidationEventArgs> parametru.  
  
 Podobnie jak w <xref:System.Windows.Forms.TextBox> przypadku kontrolki, niektóre typowe skróty klawiaturowe nie <xref:System.Windows.Forms.MaskedTextBox>działają w programie. W szczególności CTRL-R (justowanie tekstu w prawo), CTRL-L (tekst wyjustowany do lewej) i CTRL-L (tekst środkowy) nie ma żadnego wpływu.  
  
## <a name="compatibility-with-visual-basic-60"></a>Zgodność z Visual Basic 6,0  
 <xref:System.Windows.Forms.MaskedTextBox>została zaprojektowana tak, aby zachować większość funkcji kontrolki edycji zamaskowanej w Visual Basic 6,0. W poniższej tabeli wymieniono typowe właściwości kontrolki z zamaskowanej edycji i przedstawiono ich odpowiedniki <xref:System.Windows.Forms.MaskedTextBox>.  
  
|Właściwość zamaskowanej kontrolki edycji (Visual Basic 6,0)|Równoważna Właściwość[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)]formantem MaskedTextBox ()|  
|-------------------------------------------------------------------------------------------------|-------------------------------------------------------------------------------------------------------|  
|`AllowPrompt`wartość|<xref:System.Windows.Forms.MaskedTextBox.AllowPromptAsInput%2A>|  
|`AutoTab`wartość|Brak|  
|`ClipMode`wartość|<xref:System.Windows.Forms.MaskedTextBox.CutCopyMaskFormat%2A>|  
|`ClipText`wartość|<xref:System.Windows.Forms.MaskedTextBox.Text%2A>(gdy <xref:System.Windows.Forms.MaskedTextBox.TextMaskFormat%2A> jest ustawiona na <xref:System.Windows.Forms.MaskFormat.ExcludePromptAndLiterals>)|  
|`Format`wartość|Brak|  
|`FormattedText`wartość|<xref:System.Windows.Forms.MaskedTextBox.Text%2A>(gdy <xref:System.Windows.Forms.MaskedTextBox.TextMaskFormat%2A> jest ustawiona na <xref:System.Windows.Forms.MaskFormat.IncludePromptAndLiterals>)|  
|`Mask`wartość|<xref:System.Windows.Forms.MaskedTextBox.Mask%2A>|  
|`PromptChar`wartość|<xref:System.Windows.Forms.MaskedTextBox.PromptChar%2A>|  
|`PromptInclude`wartość|<xref:System.Windows.Forms.MaskedTextBox.ResetOnPrompt%2A>|  
|`ValidationError`wydarzen|<xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected>|  
  
> [!CAUTION]
>  <xref:System.Windows.Forms.MaskedTextBox> Formant nie obsługuje wielowierszowej konfiguracji ani funkcji cofania. Jednak chociaż elementy członkowskie skojarzone z tymi funkcjami zostały zachowane w celu zapewnienia zgodności z <xref:System.Windows.Forms.TextBoxBase> klasą bazową, ich implementacje nie wykonują żadnych akcji.  
  
   
  
## Examples  
 Poniższy przykład kodu inicjuje <xref:System.Windows.Forms.MaskedTextBox> , aby zaakceptować datę, i używa <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected> zdarzeń i <xref:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted> , aby ostrzec użytkownika o nieprawidłowych danych wejściowych.  
  
 [!code-csharp[MaskInputRejectedSample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/MaskInputRejectedSample/CS/form1.cs#1)]
 [!code-vb[MaskInputRejectedSample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/MaskInputRejectedSample/VB/form1.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
    <altmember cref="T:System.ComponentModel.MaskedTextProvider" />
    <related type="Article" href="https://msdn.microsoft.com/library/235d6121-027d-481d-8d59-4f6794d15d0c">MaskedTextBox — Formant (Formularze systemu Windows)</related>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Forms.MaskedTextBox" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MaskedTextBox ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MaskedTextBox();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Windows.Forms.MaskedTextBox" /> klasy przy użyciu wartości domyślnych.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Konstruktor domyślny <xref:System.Windows.Forms.MaskedTextBox.%23ctor> <xref:System.Windows.Forms.MaskedTextBox.MaskedTextProvider%2A> ustawia właściwość na maskę null reprezentowane przez ciąg "< >". Maska o wartości null akceptuje dowolną kombinację znaków jako dane wejściowe.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.MaskedTextProvider" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MaskedTextBox (System.ComponentModel.MaskedTextProvider maskedTextProvider);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.ComponentModel.MaskedTextProvider maskedTextProvider) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.#ctor(System.ComponentModel.MaskedTextProvider)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MaskedTextBox(System::ComponentModel::MaskedTextProvider ^ maskedTextProvider);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.MaskedTextBox : System.ComponentModel.MaskedTextProvider -&gt; System.Windows.Forms.MaskedTextBox" Usage="new System.Windows.Forms.MaskedTextBox maskedTextProvider" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="maskedTextProvider" Type="System.ComponentModel.MaskedTextProvider" />
      </Parameters>
      <Docs>
        <param name="maskedTextProvider">Dostawca niestandardowego języka maski pochodzący od <see cref="T:System.ComponentModel.MaskedTextProvider" /> klasy.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Windows.Forms.MaskedTextBox" /> klasy przy użyciu określonego dostawcy języka maski niestandardowej.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Parametr definiuje język maskowania używany przez <xref:System.Windows.Forms.MaskedTextBox>. `maskedTextProvider` Jest on odpowiedzialny za analizowanie masek i określanie, czy dane wejściowe użytkownika są zgodne z bieżącą pozycją maski. Można utworzyć nową klasę od <xref:System.ComponentModel.MaskedTextProvider?displayProperty=nameWithType> , aby zdefiniować własny niestandardowy język maskujący, i <xref:System.Windows.Forms.MaskedTextBox.%23ctor%28System.ComponentModel.MaskedTextProvider%29> użyć konstruktora, aby zastąpić standard <xref:System.ComponentModel.MaskedTextProvider?displayProperty=nameWithType>.  
  
 Jeśli chcesz użyć domyślnego języka maskowania i podać własną maskę wejściową, nie musisz używać tego konstruktora. Zamiast tego można użyć <xref:System.Windows.Forms.MaskedTextBox.%23ctor%28System.String%29> konstruktora lub użyć konstruktora bez parametrów, a następnie <xref:System.Windows.Forms.MaskedTextBox.Mask%2A> ustawić właściwość.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="maskedTextProvider" />jest <see langword="null" />.</exception>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.MaskedTextProvider" />
        <altmember cref="T:System.ComponentModel.MaskedTextProvider" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MaskedTextBox (string mask);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string mask) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (mask As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MaskedTextBox(System::String ^ mask);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.MaskedTextBox : string -&gt; System.Windows.Forms.MaskedTextBox" Usage="new System.Windows.Forms.MaskedTextBox mask" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="mask" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="mask"><see cref="T:System.String" /> Reprezentujący maskę wejściową. Początkowa wartość <see cref="P:System.Windows.Forms.MaskedTextBox.Mask" /> właściwości.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Windows.Forms.MaskedTextBox" /> klasy przy użyciu określonej maski wprowadzania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Konstruktor używa standardu <xref:System.ComponentModel.MaskedTextProvider?displayProperty=nameWithType> z danymi wejściowymi `mask` do analizowania danych wejściowych użytkownika do <xref:System.Windows.Forms.MaskedTextBox>. <xref:System.Windows.Forms.MaskedTextBox.%23ctor%28System.String%29>  
  
 Jeśli przypiszesz nową maskę do <xref:System.Windows.Forms.MaskedTextBox.Mask%2A> właściwości, zostanie ona zastąpiona wartością ustawioną przez tego konstruktora.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="mask" />jest <see langword="null" />.</exception>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="T:System.ComponentModel.MaskedTextProvider" />
      </Docs>
    </Member>
    <Member MemberName="AcceptsTab">
      <MemberSignature Language="C#" Value="public bool AcceptsTab { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AcceptsTab" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.AcceptsTab" />
      <MemberSignature Language="VB.NET" Value="Public Property AcceptsTab As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AcceptsTab { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AcceptsTab : bool with get, set" Usage="System.Windows.Forms.MaskedTextBox.AcceptsTab" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość określającą, w jaki sposób klawisze kart są obsługiwane w przypadku konfiguracji wielowierszowych. Ta właściwość nie jest obsługiwana przez <see cref="T:System.Windows.Forms.MaskedTextBox" />program.</summary>
        <value><see langword="false" />we wszystkich przypadkach.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Właściwość jest dziedziczona z klasy bazowej <xref:System.Windows.Forms.TextBoxBase>. <xref:System.Windows.Forms.MaskedTextBox.AcceptsTab%2A> Jednak ponieważ <xref:System.Windows.Forms.MaskedTextBox> formant nie obsługuje konfiguracji wielowierszowej, ta właściwość nie jest obsługiwana.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.AcceptsTabChanged" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Multiline" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Lines" />
      </Docs>
    </Member>
    <Member MemberName="AcceptsTabChanged">
      <MemberSignature Language="C#" Value="public event EventHandler AcceptsTabChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler AcceptsTabChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.MaskedTextBox.AcceptsTabChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event AcceptsTabChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ AcceptsTabChanged;" />
      <MemberSignature Language="F#" Value="member this.AcceptsTabChanged : EventHandler " Usage="member this.AcceptsTabChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy wartość <see cref="P:System.Windows.Forms.MaskedTextBox.AcceptsTab" /> właściwości zostanie zmieniona. To zdarzenie nie zostało zgłoszone <see cref="T:System.Windows.Forms.MaskedTextBox" />przez program.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zdarzenie jest dziedziczone z klasy podstawowej <xref:System.Windows.Forms.TextBoxBase>. <xref:System.Windows.Forms.MaskedTextBox.AcceptsTabChanged> Jednak ponieważ <xref:System.Windows.Forms.MaskedTextBox> formant nie obsługuje konfiguracji wielowierszowej, to zdarzenie nie jest obsługiwane.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.AcceptsTab" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Multiline" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Lines" />
      </Docs>
    </Member>
    <Member MemberName="AllowPromptAsInput">
      <MemberSignature Language="C#" Value="public bool AllowPromptAsInput { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AllowPromptAsInput" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.AllowPromptAsInput" />
      <MemberSignature Language="VB.NET" Value="Public Property AllowPromptAsInput As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AllowPromptAsInput { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AllowPromptAsInput : bool with get, set" Usage="System.Windows.Forms.MaskedTextBox.AllowPromptAsInput" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy <see cref="P:System.Windows.Forms.MaskedTextBox.PromptChar" /> użytkownik może wprowadzać jako prawidłowe dane.</summary>
        <value><see langword="true" />Jeśli użytkownik może wprowadzić znak monitu w kontrolce; w przeciwnym razie. <see langword="false" /> Wartość domyślna to <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nawet jeśli <xref:System.Windows.Forms.MaskedTextBox.AllowPromptAsInput%2A> jest `true`, znak monitu musi być prawidłowy dla bieżącej lokalizacji w masce, aby można ją było zaakceptować. Na przykład jeśli <xref:System.Windows.Forms.MaskedTextBox.PromptChar%2A> jest "*", a bieżąca lokalizacja w masce wymaga, aby użytkownik wprowadził cyfrę, wprowadzenie gwiazdki (\*) zakończy się niepowodzeniem i spowoduje <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected> wystąpienie zdarzenia.  
  
 Właściwość ma pierwszeństwo przed <xref:System.Windows.Forms.MaskedTextBox.AllowPromptAsInput%2A> <xref:System.Windows.Forms.MaskedTextBox.ResetOnPrompt%2A> .  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.PromptChar" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.HidePromptOnLeave" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.ResetOnPrompt" />
      </Docs>
    </Member>
    <Member MemberName="AsciiOnly">
      <MemberSignature Language="C#" Value="public bool AsciiOnly { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AsciiOnly" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.AsciiOnly" />
      <MemberSignature Language="VB.NET" Value="Public Property AsciiOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AsciiOnly { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AsciiOnly : bool with get, set" Usage="System.Windows.Forms.MaskedTextBox.AsciiOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.Repaint)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy <see cref="T:System.Windows.Forms.MaskedTextBox" /> kontrolka akceptuje znaki spoza zestawu znaków ASCII.</summary>
        <value><see langword="true" />w przypadku zaakceptowania tylko kodu ASCII; <see langword="false" /> Jeśli kontrolkamożezaakceptowaćdowolnydowolnyznakUnicode.<see cref="T:System.Windows.Forms.MaskedTextBox" /> Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `true` ,<xref:System.Windows.Forms.MaskedTextBox.AsciiOnly%2A> ogranicza dane wejściowe użytkownika do znaków a-z i a-z. Znaki kontrolne ASCII są niedozwolone.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.AllowPromptAsInput" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.SkipLiterals" />
      </Docs>
    </Member>
    <Member MemberName="BeepOnError">
      <MemberSignature Language="C#" Value="public bool BeepOnError { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool BeepOnError" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.BeepOnError" />
      <MemberSignature Language="VB.NET" Value="Public Property BeepOnError As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool BeepOnError { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.BeepOnError : bool with get, set" Usage="System.Windows.Forms.MaskedTextBox.BeepOnError" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy formant pola tekstowego maskowanego podnosi dźwięk systemu dla każdego pozostałego skoku klucza użytkownika.</summary>
        <value><see langword="true" />Jeśli kontrolka powinna sygnalizować nieprawidłowe dane wejściowe; <see langword="false" />w przeciwnym razie. <see cref="T:System.Windows.Forms.MaskedTextBox" /> Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zdarzenie <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected> będzie nadal występować, <xref:System.Windows.Forms.MaskedTextBox.BeepOnError%2A> Jeśli właściwość jest ustawiona na `true`.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.MaskInputRejected" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.ValidateText" />
      </Docs>
    </Member>
    <Member MemberName="CanUndo">
      <MemberSignature Language="C#" Value="public bool CanUndo { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CanUndo" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.CanUndo" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CanUndo As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CanUndo { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.CanUndo : bool" Usage="System.Windows.Forms.MaskedTextBox.CanUndo" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy użytkownik może cofnąć poprzednią operację. Ta właściwość nie jest obsługiwana przez <see cref="T:System.Windows.Forms.MaskedTextBox" />program.</summary>
        <value><see langword="false" />we wszystkich przypadkach.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Właściwość jest dziedziczona z klasy bazowej <xref:System.Windows.Forms.TextBoxBase>. <xref:System.Windows.Forms.MaskedTextBox.CanUndo%2A> Ponieważ <xref:System.Windows.Forms.MaskedTextBox> jednak program nie obsługuje funkcji cofania, ta właściwość zawsze ma `false`wartość.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.ClearUndo" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.Undo" />
      </Docs>
    </Member>
    <Member MemberName="ClearUndo">
      <MemberSignature Language="C#" Value="public void ClearUndo ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ClearUndo() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.ClearUndo" />
      <MemberSignature Language="VB.NET" Value="Public Sub ClearUndo ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ClearUndo();" />
      <MemberSignature Language="F#" Value="override this.ClearUndo : unit -&gt; unit" Usage="maskedTextBox.ClearUndo " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Czyści informacje o najnowszej operacji z bufora cofania pola tekstowego. Ta metoda nie jest obsługiwana przez <see cref="T:System.Windows.Forms.MaskedTextBox" />program.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda jest dziedziczona z klasy bazowej <xref:System.Windows.Forms.TextBoxBase>. <xref:System.Windows.Forms.MaskedTextBox.ClearUndo%2A> Program <xref:System.Windows.Forms.MaskedTextBox> nie obsługuje jednak funkcji cofania.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.CanUndo" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.Undo" />
      </Docs>
    </Member>
    <Member MemberName="CreateHandle">
      <MemberSignature Language="C#" Value="protected override void CreateHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void CreateHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.CreateHandle" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub CreateHandle ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void CreateHandle();" />
      <MemberSignature Language="F#" Value="override this.CreateHandle : unit -&gt; unit" Usage="maskedTextBox.CreateHandle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Tworzy uchwyt dla kontrolki.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateParams">
      <MemberSignature Language="C#" Value="protected override System.Windows.Forms.CreateParams CreateParams { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.CreateParams CreateParams" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.CreateParams" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property CreateParams As CreateParams" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Windows::Forms::CreateParams ^ CreateParams { System::Windows::Forms::CreateParams ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CreateParams : System.Windows.Forms.CreateParams" Usage="System.Windows.Forms.MaskedTextBox.CreateParams" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.CreateParams</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wymagane parametry tworzenia podczas tworzenia uchwytu sterującego.</summary>
        <value><see cref="T:System.Windows.Forms.CreateParams" /> Reprezentuje informacje, które są zbędne podczas tworzenia formantu.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Windows.Forms.TextBoxBase.CreateParams" />
      </Docs>
    </Member>
    <Member MemberName="Culture">
      <MemberSignature Language="C#" Value="public System.Globalization.CultureInfo Culture { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Globalization.CultureInfo Culture" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.Culture" />
      <MemberSignature Language="VB.NET" Value="Public Property Culture As CultureInfo" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Globalization::CultureInfo ^ Culture { System::Globalization::CultureInfo ^ get(); void set(System::Globalization::CultureInfo ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Culture : System.Globalization.CultureInfo with get, set" Usage="System.Windows.Forms.MaskedTextBox.Culture" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.Repaint)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Globalization.CultureInfo</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia informacje o kulturze skojarzone z zamaskowanym polem tekstowym.</summary>
        <value>Reprezentujący kulturę obsługiwaną <see cref="T:System.Windows.Forms.MaskedTextBox" />przez. <see cref="T:System.Globalization.CultureInfo" /></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException"><see cref="P:System.Windows.Forms.MaskedTextBox.Culture" />zostało ustawione na <see langword="null" />.</exception>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.FormatProvider" />
      </Docs>
    </Member>
    <Member MemberName="CutCopyMaskFormat">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.MaskFormat CutCopyMaskFormat { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.MaskFormat CutCopyMaskFormat" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.CutCopyMaskFormat" />
      <MemberSignature Language="VB.NET" Value="Public Property CutCopyMaskFormat As MaskFormat" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::MaskFormat CutCopyMaskFormat { System::Windows::Forms::MaskFormat get(); void set(System::Windows::Forms::MaskFormat value); };" />
      <MemberSignature Language="F#" Value="member this.CutCopyMaskFormat : System.Windows.Forms.MaskFormat with get, set" Usage="System.Windows.Forms.MaskedTextBox.CutCopyMaskFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.Repaint)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MaskFormat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość określającą, czy literały i znaki monitu są kopiowane do Schowka.</summary>
        <value>Jedna z <see cref="T:System.Windows.Forms.MaskFormat" /> wartości. Wartość domyślna to <see cref="F:System.Windows.Forms.MaskFormat.IncludeLiterals" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Właściwość określa sposób interpretowania tekstu, który jest <xref:System.Windows.Forms.MaskedTextBox> zaznaczony w obrębie formantu, gdy jest on kopiowany do <xref:System.Windows.Forms.MaskedTextBox.SelectedText%2A> Schowka lub pobierany przez właściwość. <xref:System.Windows.Forms.MaskedTextBox.CutCopyMaskFormat%2A> W odróżnieniu od tego określa, czy znaki literału, znaki monitu lub oba są uwzględniane podczas uzyskiwania dostępu do zaznaczonego tekstu. Gdy znaki monitu są wykluczone, są one przekształcane na spacje w kopiowanym ciągu.  
  
> [!NOTE]
>  Właściwość służy do podobnego celu w odniesieniu do <xref:System.Windows.Forms.MaskedTextBox.Text%2A> sposobu interpretacji właściwości. <xref:System.Windows.Forms.MaskedTextBox.TextMaskFormat%2A>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Ustawiono właściwość o <see cref="T:System.Windows.Forms.MaskFormat" /> wartości, która jest nieprawidłowa.</exception>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.TextMaskFormat" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.PromptChar" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.AllowPromptAsInput" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Text" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.ToString" />
      </Docs>
    </Member>
    <Member MemberName="FormatProvider">
      <MemberSignature Language="C#" Value="public IFormatProvider FormatProvider { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.IFormatProvider FormatProvider" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.FormatProvider" />
      <MemberSignature Language="VB.NET" Value="Public Property FormatProvider As IFormatProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IFormatProvider ^ FormatProvider { IFormatProvider ^ get(); void set(IFormatProvider ^ value); };" />
      <MemberSignature Language="F#" Value="member this.FormatProvider : IFormatProvider with get, set" Usage="System.Windows.Forms.MaskedTextBox.FormatProvider" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IFormatProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość <see cref="T:System.IFormatProvider" /> do użycia podczas walidacji typu.</summary>
        <value>Obiekt, który implementuje <see cref="T:System.IFormatProvider" /> interfejs.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.FormatProvider%2A>Określa, które symbole są używane dla waluty, daty i innych symboli zastępczych masek specyficznych dla kultury, gdy następuje Walidacja typu, a kontrolka ma <xref:System.Windows.Forms.MaskedTextBox.ValidatingType%2A> Właściwość inną niż null.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.IFormatProvider" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Culture" />
      </Docs>
    </Member>
    <Member MemberName="GetCharFromPosition">
      <MemberSignature Language="C#" Value="public override char GetCharFromPosition (System.Drawing.Point pt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance char GetCharFromPosition(valuetype System.Drawing.Point pt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.GetCharFromPosition(System.Drawing.Point)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCharFromPosition (pt As Point) As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override char GetCharFromPosition(System::Drawing::Point pt);" />
      <MemberSignature Language="F#" Value="override this.GetCharFromPosition : System.Drawing.Point -&gt; char" Usage="maskedTextBox.GetCharFromPosition pt" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pt" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="pt">Lokalizacja, z której ma być przeszukiwany najbliższy znak.</param>
        <summary>Pobiera znak znajdujący się najbliżej określonej lokalizacji w formancie.</summary>
        <returns>Znak w określonej lokalizacji.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.TextBoxBase.GetCharFromPosition(System.Drawing.Point)" />
      </Docs>
    </Member>
    <Member MemberName="GetCharIndexFromPosition">
      <MemberSignature Language="C#" Value="public override int GetCharIndexFromPosition (System.Drawing.Point pt);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetCharIndexFromPosition(valuetype System.Drawing.Point pt) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.GetCharIndexFromPosition(System.Drawing.Point)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetCharIndexFromPosition (pt As Point) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetCharIndexFromPosition(System::Drawing::Point pt);" />
      <MemberSignature Language="F#" Value="override this.GetCharIndexFromPosition : System.Drawing.Point -&gt; int" Usage="maskedTextBox.GetCharIndexFromPosition pt" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="pt" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="pt">Lokalizacja do przeszukania.</param>
        <summary>Pobiera indeks znaku znajdującego się najbliżej określonej lokalizacji.</summary>
        <returns>Indeks znakowy liczony od zera w określonej lokalizacji.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.TextBoxBase.GetCharIndexFromPosition(System.Drawing.Point)" />
      </Docs>
    </Member>
    <Member MemberName="GetFirstCharIndexFromLine">
      <MemberSignature Language="C#" Value="public int GetFirstCharIndexFromLine (int lineNumber);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetFirstCharIndexFromLine(int32 lineNumber) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.GetFirstCharIndexFromLine(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFirstCharIndexFromLine (lineNumber As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetFirstCharIndexFromLine(int lineNumber);" />
      <MemberSignature Language="F#" Value="override this.GetFirstCharIndexFromLine : int -&gt; int" Usage="maskedTextBox.GetFirstCharIndexFromLine lineNumber" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="lineNumber" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="lineNumber">Ten parametr nie jest używany.</param>
        <summary>Pobiera indeks pierwszego znaku danego wiersza. Ta metoda nie jest obsługiwana przez <see cref="T:System.Windows.Forms.MaskedTextBox" />program.</summary>
        <returns>Ta metoda zawsze zwróci wartość 0.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda jest dziedziczona z klasy bazowej <xref:System.Windows.Forms.TextBoxBase>. <xref:System.Windows.Forms.MaskedTextBox.GetFirstCharIndexFromLine%2A> Jednak ponieważ <xref:System.Windows.Forms.MaskedTextBox> formant nie obsługuje konfiguracji wielowierszowej, ta metoda nie jest obsługiwana.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Multiline" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.GetFirstCharIndexOfCurrentLine" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.GetLineFromCharIndex(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetFirstCharIndexOfCurrentLine">
      <MemberSignature Language="C#" Value="public int GetFirstCharIndexOfCurrentLine ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 GetFirstCharIndexOfCurrentLine() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.GetFirstCharIndexOfCurrentLine" />
      <MemberSignature Language="VB.NET" Value="Public Function GetFirstCharIndexOfCurrentLine () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int GetFirstCharIndexOfCurrentLine();" />
      <MemberSignature Language="F#" Value="override this.GetFirstCharIndexOfCurrentLine : unit -&gt; int" Usage="maskedTextBox.GetFirstCharIndexOfCurrentLine " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pobiera indeks pierwszego znaku bieżącego wiersza. Ta metoda nie jest obsługiwana przez <see cref="T:System.Windows.Forms.MaskedTextBox" />program.</summary>
        <returns>Ta metoda zawsze zwróci wartość 0.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda jest dziedziczona z klasy bazowej <xref:System.Windows.Forms.TextBoxBase>. <xref:System.Windows.Forms.MaskedTextBox.GetFirstCharIndexOfCurrentLine%2A> Jednak ponieważ <xref:System.Windows.Forms.MaskedTextBox> formant nie obsługuje konfiguracji wielowierszowej, ta metoda nie jest obsługiwana.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Multiline" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.GetFirstCharIndexFromLine(System.Int32)" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.GetLineFromCharIndex(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="GetLineFromCharIndex">
      <MemberSignature Language="C#" Value="public override int GetLineFromCharIndex (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetLineFromCharIndex(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.GetLineFromCharIndex(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetLineFromCharIndex (index As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetLineFromCharIndex(int index);" />
      <MemberSignature Language="F#" Value="override this.GetLineFromCharIndex : int -&gt; int" Usage="maskedTextBox.GetLineFromCharIndex index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Ten parametr nie jest używany.</param>
        <summary>Pobiera numer wiersza z podanej pozycji znaku w tekście kontrolki. Ta metoda nie jest obsługiwana przez <see cref="T:System.Windows.Forms.MaskedTextBox" />program.</summary>
        <returns>Ta metoda zawsze zwróci wartość 0.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda jest dziedziczona z klasy bazowej <xref:System.Windows.Forms.TextBoxBase>. <xref:System.Windows.Forms.MaskedTextBox.GetLineFromCharIndex%2A> Jednak ponieważ <xref:System.Windows.Forms.MaskedTextBox> formant nie obsługuje konfiguracji wielowierszowej, ta metoda nie jest obsługiwana.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Multiline" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.GetFirstCharIndexFromLine(System.Int32)" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.GetFirstCharIndexOfCurrentLine" />
      </Docs>
    </Member>
    <Member MemberName="GetPositionFromCharIndex">
      <MemberSignature Language="C#" Value="public override System.Drawing.Point GetPositionFromCharIndex (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance valuetype System.Drawing.Point GetPositionFromCharIndex(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.GetPositionFromCharIndex(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetPositionFromCharIndex (index As Integer) As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Drawing::Point GetPositionFromCharIndex(int index);" />
      <MemberSignature Language="F#" Value="override this.GetPositionFromCharIndex : int -&gt; System.Drawing.Point" Usage="maskedTextBox.GetPositionFromCharIndex index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Point</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Indeks znaku, dla którego ma zostać pobrana lokalizacja.</param>
        <summary>Pobiera lokalizację w kontrolce pod określonym indeksem znaku.</summary>
        <returns>Lokalizacja określonego znaku w obrębie prostokąta klienta kontrolki.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.TextBoxBase.GetPositionFromCharIndex(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="HidePromptOnLeave">
      <MemberSignature Language="C#" Value="public bool HidePromptOnLeave { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HidePromptOnLeave" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.HidePromptOnLeave" />
      <MemberSignature Language="VB.NET" Value="Public Property HidePromptOnLeave As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HidePromptOnLeave { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.HidePromptOnLeave : bool with get, set" Usage="System.Windows.Forms.MaskedTextBox.HidePromptOnLeave" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.Repaint)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy znaki monitu w masce wejściowej są ukryte, gdy maskowane pole tekstowe utraci fokus.</summary>
        <value><see langword="true" />Jeśli <see cref="P:System.Windows.Forms.MaskedTextBox.PromptChar" /> jest ukryta, <see cref="T:System.Windows.Forms.MaskedTextBox" /> <see langword="false" />gdy nie ma fokusu; w przeciwnym razie. Wartość domyślna to <see langword="false" />.</value>
        <remarks>To be added.</remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.PromptChar" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.ResetOnPrompt" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.TextMaskFormat" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.CutCopyMaskFormat" />
      </Docs>
    </Member>
    <Member MemberName="InsertKeyMode">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.InsertKeyMode InsertKeyMode { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.InsertKeyMode InsertKeyMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.InsertKeyMode" />
      <MemberSignature Language="VB.NET" Value="Public Property InsertKeyMode As InsertKeyMode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::InsertKeyMode InsertKeyMode { System::Windows::Forms::InsertKeyMode get(); void set(System::Windows::Forms::InsertKeyMode value); };" />
      <MemberSignature Language="F#" Value="member this.InsertKeyMode : System.Windows.Forms.InsertKeyMode with get, set" Usage="System.Windows.Forms.MaskedTextBox.InsertKeyMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.InsertKeyMode</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia tryb wstawiania tekstu maskowanej kontrolki pola tekstowego.</summary>
        <value><see cref="T:System.Windows.Forms.InsertKeyMode" /> Wartość, która wskazuje bieżący tryb wstawiania. Wartość domyślna to <see cref="F:System.Windows.Forms.InsertKeyMode.Default" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Właściwość kontroluje zachowanie <xref:System.Windows.Forms.MaskedTextBox> podczas wstawiania znaku formantu. <xref:System.Windows.Forms.MaskedTextBox.InsertKeyMode%2A> Stan tej właściwości jest definiowany przez <xref:System.Windows.Forms.InsertKeyMode> Wyliczenie, które może być zawsze włączone, zawsze wyłączone lub ustawione na przestrzeganie ustawienia klawiatury użytkownika. Ta właściwość zastępuje tryb wstawiania klawiatury. Na przykład, jeśli klawiatura jest ustawiona na zastępowanie, ale <xref:System.Windows.Forms.MaskedTextBox.InsertKeyMode%2A> jest ustawiona na `Insert`, <xref:System.Windows.Forms.MaskedTextBox> będzie działać w trybie wstawiania. Właściwość będzie mieć dostęp do trybu <xref:System.Windows.Forms.MaskedTextBox>wstawiania prawdziwy. <xref:System.Windows.Forms.MaskedTextBox.IsOverwriteMode%2A>  
  
 Zmiana <xref:System.Windows.Forms.MaskedTextBox.InsertKeyMode%2A> wartości<xref:System.Windows.Forms.MaskedTextBox> spowoduje wystąpienie<xref:System.Windows.Forms.MaskedTextBox.IsOverwriteModeChanged> zdarzenia. <xref:System.Windows.Forms.MaskedTextBox.IsOverwriteMode%2A>  
  
 Ta właściwość nie ma wpływu, jeśli maska nie została ustawiona.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Podczas ustawiania <see cref="T:System.Windows.Forms.InsertKeyMode" /> tej właściwości podano nieprawidłową wartość.</exception>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.IsOverwriteMode" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.AsciiOnly" />
      </Docs>
    </Member>
    <Member MemberName="IsInputKey">
      <MemberSignature Language="C#" Value="protected override bool IsInputKey (System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool IsInputKey(valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.IsInputKey(System.Windows.Forms.Keys)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function IsInputKey (keyData As Keys) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool IsInputKey(System::Windows::Forms::Keys keyData);" />
      <MemberSignature Language="F#" Value="override this.IsInputKey : System.Windows.Forms.Keys -&gt; bool" Usage="maskedTextBox.IsInputKey keyData" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="keyData">Jedna z <see cref="T:System.Windows.Forms.Keys" /> wartości.</param>
        <summary>Określa, czy określony klucz jest kluczem wejściowym lub specjalnym, który wymaga przetwarzania wstępnego.</summary>
        <returns><see langword="true" />Jeśli określony klucz jest kluczem wejściowym; w przeciwnym razie. <see langword="false" /></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="IsOverwriteMode">
      <MemberSignature Language="C#" Value="public bool IsOverwriteMode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsOverwriteMode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.IsOverwriteMode" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsOverwriteMode As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsOverwriteMode { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsOverwriteMode : bool" Usage="System.Windows.Forms.MaskedTextBox.IsOverwriteMode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość określającą, czy nowe dane wejściowe użytkownika zastąpią istniejące dane wejściowe.</summary>
        <value><see langword="true" />Jeśli <see cref="T:System.Windows.Forms.MaskedTextBox" /> program zastąpi istniejące znaki w miarę wprowadzania nowych znaków przez użytkownika; <see langword="false" /> Jeśli<see cref="T:System.Windows.Forms.MaskedTextBox" /> program zmieni istniejące znaki do przodu. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.IsOverwriteMode%2A>uwzględnia zarówno wartość <xref:System.Windows.Forms.MaskedTextBox.InsertKeyMode%2A> właściwości, jak i stan klawiatury użytkownika. Jeśli <xref:System.Windows.Forms.MaskedTextBox.InsertKeyMode%2A> jest ustawiona na albo <xref:System.Windows.Forms.InsertKeyMode.Insert> lub <xref:System.Windows.Forms.InsertKeyMode.Overwrite>, <xref:System.Windows.Forms.MaskedTextBox.IsOverwriteMode%2A> zwrócilub`true`,odpowiednio. `false` Jeśli <xref:System.Windows.Forms.MaskedTextBox.InsertKeyMode%2A> jest ustawiona na <xref:System.Windows.Forms.InsertKeyMode.Default>, spowoduje to zwrócenie stanu klawisza Insert.  
  
 Gdy <xref:System.Windows.Forms.MaskedTextBox.IsOverwriteMode%2A> jest `false` ,<xref:System.Windows.Forms.MaskedTextBox> program odrzuci jako nieprawidłowy wpis znaku, co spowodowałoby naruszenie w dowolnym miejscu maski. W wyjaśnieniu, jeśli Wstawianie znaku spowoduje przesunięcie znaku do pozycji maski, gdzie nie będzie prawidłowy, wstawianie znaków zostanie odrzucone.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.InsertKeyMode" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.AsciiOnly" />
      </Docs>
    </Member>
    <Member MemberName="IsOverwriteModeChanged">
      <MemberSignature Language="C#" Value="public event EventHandler IsOverwriteModeChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler IsOverwriteModeChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.MaskedTextBox.IsOverwriteModeChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event IsOverwriteModeChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ IsOverwriteModeChanged;" />
      <MemberSignature Language="F#" Value="member this.IsOverwriteModeChanged : EventHandler " Usage="member this.IsOverwriteModeChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po zmianie trybu wstawiania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zdarzenie jest wywoływane po zmianie wartości <xref:System.Windows.Forms.MaskedTextBox.IsOverwriteMode%2A> właściwości. <xref:System.Windows.Forms.MaskedTextBox.IsOverwriteModeChanged>  
  
 To zdarzenie jest wymagane, aby prawidłowo powiązać dane z <xref:System.Windows.Forms.MaskedTextBox> kontrolką.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje użycie tego elementu członkowskiego. W tym przykładzie program obsługi zdarzeń raportuje wystąpienie <xref:System.Windows.Forms.MaskedTextBox.IsOverwriteModeChanged> zdarzenia. Ten raport pomaga dowiedzieć się, kiedy wystąpi zdarzenie i może pomóc w debugowaniu. Aby zgłosić wiele zdarzeń lub zdarzenia, które występują często, należy rozważyć <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> zamianę <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> lub dołączenie komunikatu do wielowierszowego <xref:System.Windows.Forms.TextBox>.  
  
 Aby uruchomić przykładowy kod, wklej go do projektu zawierającego wystąpienie typu <xref:System.Windows.Forms.MaskedTextBox> o nazwie. `MaskedTextBox1` Następnie upewnij się, że program obsługi zdarzeń jest skojarzony <xref:System.Windows.Forms.MaskedTextBox.IsOverwriteModeChanged> ze zdarzeniem.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#484](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#484)]
 [!code-vb[System.Windows.Forms.EventExamples#484](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#484)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.IsOverwriteMode" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.OnIsOverwriteModeChanged(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="Lines">
      <MemberSignature Language="C#" Value="public string[] Lines { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] Lines" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.Lines" />
      <MemberSignature Language="VB.NET" Value="Public Property Lines As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ Lines { cli::array &lt;System::String ^&gt; ^ get(); void set(cli::array &lt;System::String ^&gt; ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Lines : string[] with get, set" Usage="System.Windows.Forms.MaskedTextBox.Lines" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wiersze tekstu w konfiguracjach wielowierszowych. Ta właściwość nie jest obsługiwana przez <see cref="T:System.Windows.Forms.MaskedTextBox" />program.</summary>
        <value>Tablica typu <see cref="T:System.String" /> , która zawiera pojedynczy wiersz.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Właściwość jest dziedziczona z klasy bazowej <xref:System.Windows.Forms.TextBoxBase>. <xref:System.Windows.Forms.MaskedTextBox.Lines%2A> Jednak ponieważ <xref:System.Windows.Forms.MaskedTextBox> formant nie obsługuje konfiguracji wielowierszowej, ta właściwość nie jest obsługiwana.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.AcceptsTab" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.AcceptsTabChanged" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Multiline" />
      </Docs>
    </Member>
    <Member MemberName="Mask">
      <MemberSignature Language="C#" Value="public string Mask { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Mask" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.Mask" />
      <MemberSignature Language="VB.NET" Value="Public Property Mask As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Mask { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Mask : string with get, set" Usage="System.Windows.Forms.MaskedTextBox.Mask" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.MaskPropertyEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.MaskPropertyEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.Repaint)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia maskę wejściową, która będzie używana w czasie wykonywania.</summary>
        <value><see cref="T:System.String" /> Reprezentujący bieżącą maskę. Wartość domyślna to pusty ciąg, który umożliwia dowolnych danych wejściowych.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.Mask%2A>jest domyślną właściwością dla <xref:System.Windows.Forms.MaskedTextBox> klasy.  
  
 <xref:System.Windows.Forms.MaskedTextBox.Mask%2A>musi być ciągiem składającym się z co najmniej jednego elementu maskowania, jak pokazano w poniższej tabeli. Język maskowania używany przez <xref:System.Windows.Forms.MaskedTextBox> program jest zdefiniowany przez skojarzony <xref:System.Windows.Forms.MaskedTextBox.MaskedTextProvider%2A>z nim. Standardowy dostawca określa język maskujący oparty na tym, kto jest używany przez kontrolkę edycji zamaskowanej w Visual Basic 6,0, i powinien być bardzo zaznajomiony z użytkownikami migrowania z tej platformy.  
  
|Maskowanie elementu|Opis|  
|---------------------|-----------------|  
|0|Cyfra, wymagana. Ten element akceptuje dowolną cyfrę z przedziału od 0 do 9.|  
|9|Cyfra lub spacja, opcjonalnie.|  
|#|Cyfra lub spacja, opcjonalnie. Jeśli ta pozycja jest pusta w masce, będzie renderowana jako spacja we <xref:System.Windows.Forms.MaskedTextBox.Text%2A> właściwości. Znaki plus (+) i minus (-) są dozwolone.|  
|L|Litera, wymagane. Ogranicza dane wejściowe do liter ASCII a-z i A-Z. Ten element maski jest równoważny z [a-za-Z] w wyrażeniach regularnych.|  
|?|Litera, opcjonalnie. Ogranicza dane wejściowe do liter ASCII a-z i A-Z. Ten element maski jest równoważny z [a-za-Z]? w wyrażeniach regularnych.|  
|&|Znak, wymagany. <xref:System.Windows.Forms.MaskedTextBox.AsciiOnly%2A> Jeśli właściwość jest ustawiona na wartość true, ten element zachowuje się jak element "L".|  
|C|Znak, opcjonalny. Dowolny znak niebędący kontrolką. Jeśli właściwość jest ustawiona na `true`, ten element zachowuje się jak element "?". <xref:System.Windows.Forms.MaskedTextBox.AsciiOnly%2A>|  
|ELEMENT|Alfanumeryczne, wymagane. Jeśli właściwość jest ustawiona na `true`, Jedynymi dozwolonymi znakami są ASCII litery a-z i a-z. <xref:System.Windows.Forms.MaskedTextBox.AsciiOnly%2A> Ten element maski zachowuje się jak element "a".|  
|a|Alfanumeryczne, opcjonalne. Jeśli właściwość jest ustawiona na `true`, Jedynymi dozwolonymi znakami są ASCII litery a-z i a-z. <xref:System.Windows.Forms.MaskedTextBox.AsciiOnly%2A> Ten element maski zachowuje się jak element "A".|  
|.|Symbol zastępczy dziesiętnej. Rzeczywisty używany znak wyświetlania będzie symbolem dziesiętnym odpowiednim dla dostawcy formatowania, zgodnie z <xref:System.Windows.Forms.MaskedTextBox.FormatProvider%2A> właściwością kontrolki.|  
|,|Symbol zastępczy tysięcy. Rzeczywisty używany znak jest symbolem zastępczym tysięcy odpowiednim dla dostawcy formatu, zgodnie z <xref:System.Windows.Forms.MaskedTextBox.FormatProvider%2A> właściwością kontrolki.|  
|:|Separator czasu. Rzeczywisty używany znak wyświetlania będzie symbolem czasu odpowiednim dla dostawcy formatu zgodnie z <xref:System.Windows.Forms.MaskedTextBox.FormatProvider%2A> właściwością kontrolki.|  
|/|Separator daty. Rzeczywisty używany znak wyświetlania będzie symbolem daty odpowiednim dla dostawcy formatu zgodnie z <xref:System.Windows.Forms.MaskedTextBox.FormatProvider%2A> właściwością kontrolki.|  
|$|Symbol waluty. Rzeczywisty wyświetlany znak będzie symbolem waluty odpowiednim dla dostawcy formatu, zgodnie z <xref:System.Windows.Forms.MaskedTextBox.FormatProvider%2A> właściwością kontrolki.|  
|\<|Przesuń w dół. Konwertuje wszystkie znaki, które po znaku należy do małych liter.|  
|>|Przesuń w górę. Konwertuje wszystkie znaki występujące po Wielkiej litery.|  
|&#124;|Wyłącz poprzednie przesunięcie w górę lub w dół.|  
|&#92;|Poza. Wyprowadza znak maski, przełączając go do literału. \\"\\" jest sekwencją ucieczki dla ukośnika odwrotnego.|  
|Wszystkie inne znaki|Literały. Wszystkie elementy, które nie są maskami, będą <xref:System.Windows.Forms.MaskedTextBox>wyświetlane w obrębie. Literały zawsze zajmują statyczną pozycję w masce w czasie wykonywania i nie mogą być przenoszone ani usuwane przez użytkownika.|  
  
 Jeśli zmienisz maskę, <xref:System.Windows.Forms.MaskedTextBox> gdy zawiera już dane wejściowe użytkownika filtrowane przez poprzednią <xref:System.Windows.Forms.MaskedTextBox> maskę, program podejmie próbę migracji tego danych do nowej definicji maski. Jeśli to się nie powiedzie, spowoduje to wyczyszczenie istniejących danych wejściowych. Przypisanie ciągu o zerowej długości jako maski spowoduje zachowanie wszelkich istniejących danych w formancie. Gdy jest używany z maską o zerowej <xref:System.Windows.Forms.MaskedTextBox> długości, zachowuje się jak kontrolka <xref:System.Windows.Forms.TextBox> jednowierszowa.  
  
 Symbole dziesiętne (.), stutysięcznych (,), Time (:), Date (/) i Currency ($) są domyślne do wyświetlania tych symboli zgodnie z kulturą aplikacji. Można wymusić wyświetlanie symboli dla innej kultury przy użyciu <xref:System.Windows.Forms.MaskedTextBox.FormatProvider%2A> właściwości.  
  
 Wstawianie znaków do maski w czasie wykonywania jest kontrolowane przez <xref:System.Windows.Forms.MaskedTextBox.InsertKeyMode%2A> właściwość. Użytkownicy mogą przechodzić przez maskę przy użyciu klawiszy strzałek w lewo i w prawo lub kursora myszy, a także pomijać opcjonalne położenia w masce, wprowadzając spację.  
  
> [!IMPORTANT]
>  <xref:System.Windows.Forms.MaskedTextBox>obsługuje wszystkie znaki Unicode z wyjątkiem surogatów i w pionie połączonych znaków.  
  
 W poniższej tabeli przedstawiono przykładowe maski.  
  
|Bitowa|Zachowanie|  
|----------|--------------|  
|`00/00/0000`|Data (dzień, miesiąc, rok) w międzynarodowym formacie daty. Znak "/" jest logicznym separatorem daty i będzie widoczny dla użytkownika jako separator daty odpowiedni dla bieżącej kultury aplikacji.|  
|`00->L<LL-0000`|Data (dzień, skrót miesiąca i rok) w formacie Stany Zjednoczone, w którym skrót z trzema literami miesiąca jest wyświetlany z początkową wielką literą, a następnie dwoma małymi literami.|  
|`(999)-000-0000`|Stany Zjednoczone numer telefonu, kod obszaru opcjonalny. Jeśli użytkownicy nie chcą wprowadzać znaków opcjonalnych, mogą albo wprowadzić spacje, albo umieścić wskaźnik myszy bezpośrednio na pozycji w masce reprezentowanej przez pierwsze 0.|  
|`$999,999.00`|Wartość waluty z zakresu od 0 do 999999. Znaki Currency, thousandth i Decimal zostaną zastąpione w czasie wykonywania przy użyciu ich odpowiedników specyficznych dla kultury.|  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Ciąg dostarczony do <see cref="P:System.Windows.Forms.MaskedTextBox.Mask" /> właściwości nie jest prawidłową maską. Nieprawidłowe maski obejmują maski zawierające znaki niedrukowalne.</exception>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Text" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.MaskFull" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.MaskCompleted" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.MaskChanged" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.MaskedTextProvider" />
      </Docs>
    </Member>
    <Member MemberName="MaskChanged">
      <MemberSignature Language="C#" Value="public event EventHandler MaskChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler MaskChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.MaskedTextBox.MaskChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MaskChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ MaskChanged;" />
      <MemberSignature Language="F#" Value="member this.MaskChanged : EventHandler " Usage="member this.MaskChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po zmianie maski wejściowej.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zdarzenie jest wywoływane po zmianie wartości <xref:System.Windows.Forms.MaskedTextBox.Mask%2A> właściwości. <xref:System.Windows.Forms.MaskedTextBox.MaskChanged> To zdarzenie jest również zgłaszane <xref:System.Windows.Forms.MaskedTextBox.MaskedTextProvider%2A> , jeśli jest pośrednio modyfikowane przez element członkowski, taki jak <xref:System.Windows.Forms.MaskedTextBox.AsciiOnly%2A> <xref:System.Windows.Forms.MaskedTextBox.Mask%2A>, <xref:System.Windows.Forms.MaskedTextBox.AllowPromptAsInput%2A>, <xref:System.Windows.Forms.MaskedTextBox.Culture%2A>i.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje użycie tego elementu członkowskiego. W tym przykładzie program obsługi zdarzeń raportuje wystąpienie <xref:System.Windows.Forms.MaskedTextBox.MaskChanged> zdarzenia. Ten raport pomaga dowiedzieć się, kiedy wystąpi zdarzenie i może pomóc w debugowaniu. Aby zgłosić wiele zdarzeń lub zdarzenia, które występują często, należy rozważyć <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> zamianę <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> lub dołączenie komunikatu do wielowierszowego <xref:System.Windows.Forms.TextBox>.  
  
 Aby uruchomić przykładowy kod, wklej go do projektu zawierającego wystąpienie typu <xref:System.Windows.Forms.MaskedTextBox> o nazwie. `MaskedTextBox1` Następnie upewnij się, że program obsługi zdarzeń jest skojarzony <xref:System.Windows.Forms.MaskedTextBox.MaskChanged> ze zdarzeniem.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#485](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#485)]
 [!code-vb[System.Windows.Forms.EventExamples#485](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#485)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.OnMaskChanged(System.EventArgs)" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.MaskedTextProvider" />
      </Docs>
    </Member>
    <Member MemberName="MaskCompleted">
      <MemberSignature Language="C#" Value="public bool MaskCompleted { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool MaskCompleted" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.MaskCompleted" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MaskCompleted As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool MaskCompleted { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.MaskCompleted : bool" Usage="System.Windows.Forms.MaskedTextBox.MaskCompleted" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy wszystkie wymagane dane wejściowe zostały wprowadzone do maski wejściowej.</summary>
        <value><see langword="true" />Jeśli wszystkie wymagane dane wejściowe zostały wprowadzone do maski; w przeciwnym razie. <see langword="false" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.MaskCompleted%2A>sprawdza tylko wymagane elementy wejściowe. Aby określić, czy wszystkie wymagane i opcjonalne elementy wejściowe zostały wypełnione, zamiast tego użyj <xref:System.Windows.Forms.MaskedTextBox.MaskFull%2A> właściwości.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.MaskFull" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Text" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.MaskChanged" />
      </Docs>
    </Member>
    <Member MemberName="MaskedTextProvider">
      <MemberSignature Language="C#" Value="public System.ComponentModel.MaskedTextProvider MaskedTextProvider { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.ComponentModel.MaskedTextProvider MaskedTextProvider" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.MaskedTextProvider" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MaskedTextProvider As MaskedTextProvider" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::ComponentModel::MaskedTextProvider ^ MaskedTextProvider { System::ComponentModel::MaskedTextProvider ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MaskedTextProvider : System.ComponentModel.MaskedTextProvider" Usage="System.Windows.Forms.MaskedTextBox.MaskedTextProvider" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.ComponentModel.MaskedTextProvider</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera klon dostawcy maski skojarzony z tym wystąpieniem kontrolki pola tekstowego maskowanego.</summary>
        <value>Dostawca języka maskującego typu <see cref="P:System.Windows.Forms.MaskedTextBox.MaskedTextProvider" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Właściwość definiuje aparat analizy masek i język maskujący używany <xref:System.Windows.Forms.MaskedTextBox> przez formant. <xref:System.Windows.Forms.MaskedTextBox.MaskedTextProvider%2A> Domyślnym dostawcą jest <xref:System.ComponentModel.MaskedTextProvider?displayProperty=nameWithType> Klasa, jednak można określić niestandardowego dostawcę <xref:System.Windows.Forms.MaskedTextBox.%23ctor%28System.ComponentModel.MaskedTextProvider%29> przy użyciu konstruktora.  
  
 <xref:System.Windows.Forms.MaskedTextBox.MaskedTextProvider%2A>nie można ustawić bezpośrednio. Jednak ustawienie <xref:System.Windows.Forms.MaskedTextBox> niektórych właściwości, takich jak <xref:System.Windows.Forms.MaskedTextBox.AllowPromptAsInput%2A> <xref:System.Windows.Forms.MaskedTextBox.AsciiOnly%2A> <xref:System.Windows.Forms.MaskedTextBox.Mask%2A>,,, i <xref:System.Windows.Forms.MaskedTextBox.Culture%2A> — może być wewnętrznie przyczyną utworzenia nowego <xref:System.Windows.Forms.MaskedTextBox.MaskedTextProvider%2A>.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.MaskedTextProvider" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
      </Docs>
    </Member>
    <Member MemberName="MaskFull">
      <MemberSignature Language="C#" Value="public bool MaskFull { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool MaskFull" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.MaskFull" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MaskFull As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool MaskFull { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.MaskFull : bool" Usage="System.Windows.Forms.MaskedTextBox.MaskFull" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy wszystkie wymagane i opcjonalne dane wejściowe zostały wprowadzone do maski wejściowej.</summary>
        <value><see langword="true" />Jeśli wprowadzono wszystkie wymagane i opcjonalne dane wejściowe; w przeciwnym razie. <see langword="false" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Możesz użyć <xref:System.Windows.Forms.MaskedTextBox.MaskFull%2A> właściwości <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected> w ramach procedury obsługi zdarzeń, aby określić, czy dane wejściowe użytkownika zostały odrzucone, ponieważ nie ma żadnych pozostałych wejść w masce. Aby określić, czy wprowadzono tylko wymagane elementy wejściowe, użyj <xref:System.Windows.Forms.MaskedTextBox.MaskCompleted%2A> właściwości.  
  
   
  
## Examples  
 Poniższy przykład kodu obsługuje <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected> zdarzenie i używa programu <xref:System.Windows.Forms.ToolTip> , aby ostrzec użytkownika, Jeśli podjęto próbę wprowadzenia danych po użyciu wszystkich pozycji w masce.  
  
 [!code-csharp[MaskInputRejectedSample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/MaskInputRejectedSample/CS/form1.cs#1)]
 [!code-vb[MaskInputRejectedSample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/MaskInputRejectedSample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.MaskCompleted" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Text" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.MaskChanged" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.MaskInputRejected" />
      </Docs>
    </Member>
    <Member MemberName="MaskInputRejected">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.MaskInputRejectedEventHandler MaskInputRejected;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.MaskInputRejectedEventHandler MaskInputRejected" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.MaskedTextBox.MaskInputRejected" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MaskInputRejected As MaskInputRejectedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::MaskInputRejectedEventHandler ^ MaskInputRejected;" />
      <MemberSignature Language="F#" Value="member this.MaskInputRejected : System.Windows.Forms.MaskInputRejectedEventHandler " Usage="member this.MaskInputRejected : System.Windows.Forms.MaskInputRejectedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MaskInputRejectedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy znak wejściowy lub przypisany przez użytkownika nie jest zgodny z odpowiadającym mu elementem formatu maski wejściowej.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected>jest zdarzeniem domyślnym dla <xref:System.Windows.Forms.MaskedTextBox> klasy.  
  
 <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected> Zdarzenie występuje, gdy znak zostanie odrzucony przez maskę wejściową. Maska wprowadzania reprezentowana przez <xref:System.Windows.Forms.MaskedTextBox.Mask%2A> właściwość jest interpretowana przez dostawcę tekstu maskowanego skojarzonego z kontrolką <xref:System.Windows.Forms.MaskedTextBox.MaskedTextProvider%2A> przez właściwość. <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected>jest zgłaszany w następujących sytuacjach:  
  
-   Znak wejściowy nie jest zgodny z odpowiadającym mu elementem formatu. Na przykład użytkownik wprowadza znak alfanumeryczny, gdy jest wymagana cyfra. Prawdopodobnie jest to najbardziej typowy powód, dla którego to zdarzenie jest zgłaszane.  
  
-   Użytkownik próbuje wprowadzić nadmiarowe znaki poza końcem maski, ponieważ maska została już wypełniona lub aktualna pozycja karetki została przeniesiona na bardzo koniec wyświetlanego ciągu maski wejściowej.  
  
-   Operacja wklejenia wstawia znak, który nie jest zgodny z jego elementem formatu skojarzonego, lub jeśli <xref:System.Windows.Forms.MaskedTextBox.IsOverwriteMode%2A> właściwość jest `false`, przenosi istniejące znaki do nowych pozycji, gdzie nie pasują do ich elementów formatu.  
  
-   Operacja wycinania przenosi istniejące znaki z lewej strony, a co najmniej jeden znak nie pasuje do nowo skojarzonych elementów formatu.  
  
-   Wykonano przypisanie do <xref:System.Windows.Forms.MaskedTextBox.Text%2A> właściwości, a przypisany ciąg spowodował jedno lub więcej naruszeń maski.  
  
 Jeśli ciąg został przypisany do kontrolki, która powoduje <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected> wystąpienie, żadna część ciągu nie zostanie <xref:System.Windows.Forms.MaskedTextBox>wyświetlona.  
  
 Domyślna obsługa programu <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected> spowoduje odtwarzanie dźwięku dźwiękowego, <xref:System.Windows.Forms.MaskedTextBox.BeepOnError%2A> Jeśli właściwość jest ustawiona na `true`. To zdarzenie jest często obsługiwane w celu wdrożenia niestandardowej obsługi błędów, na przykład w celu przejścia do następnej kontrolki wprowadzania danych wejściowych użytkownika, jeśli maska jest zapełniona lub aby wyświetlić okno dialogowe błędu niestandardowego lub etykietkę narzędzia, jeśli znak wejściowy jest nieprawidłowy.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje użycie tego elementu członkowskiego. W tym przykładzie program obsługi zdarzeń raportuje wystąpienie <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected> zdarzenia. Ten raport pomaga dowiedzieć się, kiedy wystąpi zdarzenie i może pomóc w debugowaniu. Aby zgłosić wiele zdarzeń lub zdarzenia, które występują często, należy rozważyć <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> zamianę <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> lub dołączenie komunikatu do wielowierszowego <xref:System.Windows.Forms.TextBox>.  
  
 Aby uruchomić przykładowy kod, wklej go do projektu zawierającego wystąpienie typu <xref:System.Windows.Forms.MaskedTextBox> o nazwie. `MaskedTextBox1` Następnie upewnij się, że program obsługi zdarzeń jest skojarzony <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected> ze zdarzeniem.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#486](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#486)]
 [!code-vb[System.Windows.Forms.EventExamples#486](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#486)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Text" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.MaskedTextProvider" />
        <altmember cref="T:System.Windows.Forms.MaskInputRejectedEventArgs" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.IsOverwriteMode" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.BeepOnError" />
      </Docs>
    </Member>
    <Member MemberName="MaxLength">
      <MemberSignature Language="C#" Value="public override int MaxLength { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MaxLength" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.MaxLength" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property MaxLength As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int MaxLength { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.MaxLength : int with get, set" Usage="System.Windows.Forms.MaskedTextBox.MaxLength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia maksymalną liczbę znaków, którą użytkownik może wpisać lub wkleić do kontrolki pola tekstowego. Ta właściwość nie jest obsługiwana przez <see cref="T:System.Windows.Forms.MaskedTextBox" />program.</summary>
        <value>Ta właściwość zawsze zwraca wartość 0.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zobacz Właściwość i właściwość w <xref:System.Windows.Forms.MaskInputRejectedEventArgs> klasie, aby uzyskać informacje na temat sposobu ustalania maksymalnej długości ciągu w <xref:System.Windows.Forms.MaskedTextBox>. <xref:System.Windows.Forms.MaskInputRejectedEventArgs.Position%2A> <xref:System.Windows.Forms.MaskedTextBox.Mask%2A>  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="P:System.Windows.Forms.MaskInputRejectedEventArgs.Position" />
      </Docs>
    </Member>
    <Member MemberName="Multiline">
      <MemberSignature Language="C#" Value="public override bool Multiline { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Multiline" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.Multiline" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Multiline As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool Multiline { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Multiline : bool with get, set" Usage="System.Windows.Forms.MaskedTextBox.Multiline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy jest to wielowierszowa kontrolka pola tekstowego. Ta właściwość nie jest w pełni obsługiwana <see cref="T:System.Windows.Forms.MaskedTextBox" />przez program.</summary>
        <value>Ta właściwość zawsze zwraca <see langword="false" />wartość.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Właściwość jest dziedziczona z klasy bazowej <xref:System.Windows.Forms.TextBoxBase>. <xref:System.Windows.Forms.MaskedTextBox.AcceptsTab%2A> Jednak ponieważ <xref:System.Windows.Forms.MaskedTextBox> formant nie obsługuje konfiguracji wielowierszowej, ta właściwość nie jest w pełni obsługiwana; nie można jej ustawić i zawsze jest rozpoznawana `false`jako.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.AcceptsTab" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.AcceptsTabChanged" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Lines" />
      </Docs>
    </Member>
    <Member MemberName="MultilineChanged">
      <MemberSignature Language="C#" Value="public event EventHandler MultilineChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler MultilineChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.MaskedTextBox.MultilineChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MultilineChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ MultilineChanged;" />
      <MemberSignature Language="F#" Value="member this.MultilineChanged : EventHandler " Usage="member this.MultilineChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Zwykle występuje, gdy wartość <see cref="P:System.Windows.Forms.MaskedTextBox.Multiline" /> właściwości została zmieniona, ale to zdarzenie nie jest wywoływane przez <see cref="T:System.Windows.Forms.MaskedTextBox" />program.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zdarzenie jest dziedziczone z klasy podstawowej <xref:System.Windows.Forms.TextBoxBase>. <xref:System.Windows.Forms.MaskedTextBox.MultilineChanged> Jednak ponieważ <xref:System.Windows.Forms.MaskedTextBox> formant nie obsługuje konfiguracji wielowierszowej, to zdarzenie nie jest zaimplementowane w programie <xref:System.Windows.Forms.MaskedTextBox>.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Multiline" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.OnMultilineChanged(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnBackColorChanged">
      <MemberSignature Language="C#" Value="protected override void OnBackColorChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnBackColorChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.OnBackColorChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnBackColorChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnBackColorChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnBackColorChanged : EventArgs -&gt; unit" Usage="maskedTextBox.OnBackColorChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.EventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Występuje, gdy wartość właściwości zostanie <see cref="P:System.Windows.Forms.Control.BackColor" /> zmieniona.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnHandleCreated">
      <MemberSignature Language="C#" Value="protected override void OnHandleCreated (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnHandleCreated(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.OnHandleCreated(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnHandleCreated (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnHandleCreated(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnHandleCreated : EventArgs -&gt; unit" Usage="maskedTextBox.OnHandleCreated e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.EventArgs" /> Zawierający dane zdarzenia.</param>
        <summary><see cref="E:System.Windows.Forms.Control.HandleCreated" /> Podnosi zdarzenie.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnIsOverwriteModeChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnIsOverwriteModeChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnIsOverwriteModeChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.OnIsOverwriteModeChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnIsOverwriteModeChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnIsOverwriteModeChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnIsOverwriteModeChanged : EventArgs -&gt; unit&#xA;override this.OnIsOverwriteModeChanged : EventArgs -&gt; unit" Usage="maskedTextBox.OnIsOverwriteModeChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.EventArgs" /> Zawierający dane zdarzenia.</param>
        <summary><see cref="E:System.Windows.Forms.MaskedTextBox.IsOverwriteModeChanged" /> Podnosi zdarzenie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podnoszenie zdarzenia wywołuje program obsługi zdarzeń przez delegata. Aby uzyskać więcej informacji, zobacz [Obsługa i](~/docs/standard/events/index.md)wywoływanie zdarzeń.  
  
 <xref:System.Windows.Forms.MaskedTextBox.OnIsOverwriteModeChanged%2A> Metoda umożliwia również klasom pochodnym obsłużenia zdarzenia bez dołączania delegata. Jest to preferowana technika obsługi zdarzenia w klasie pochodnej.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Podczas zastępowania <see cref="M:System.Windows.Forms.MaskedTextBox.OnIsOverwriteModeChanged(System.EventArgs)" /> klasy pochodnej należy wywołać <see cref="M:System.Windows.Forms.MaskedTextBox.OnIsOverwriteModeChanged(System.EventArgs)" /> metodę klasy bazowej, aby zarejestrowani delegowani odbierał zdarzenie.</para></block>
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.IsOverwriteModeChanged" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.IsOverwriteMode" />
      </Docs>
    </Member>
    <Member MemberName="OnKeyDown">
      <MemberSignature Language="C#" Value="protected override void OnKeyDown (System.Windows.Forms.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnKeyDown(class System.Windows.Forms.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.OnKeyDown(System.Windows.Forms.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnKeyDown (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnKeyDown(System::Windows::Forms::KeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnKeyDown : System.Windows.Forms.KeyEventArgs -&gt; unit" Usage="maskedTextBox.OnKeyDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.KeyEventArgs" /> , który zawiera dane zdarzenia.</param>
        <summary><see cref="E:System.Windows.Forms.Control.KeyDown" /> Podnosi zdarzenie.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnKeyDown(System.Windows.Forms.KeyEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnKeyPress">
      <MemberSignature Language="C#" Value="protected override void OnKeyPress (System.Windows.Forms.KeyPressEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnKeyPress(class System.Windows.Forms.KeyPressEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnKeyPress (e As KeyPressEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnKeyPress(System::Windows::Forms::KeyPressEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnKeyPress : System.Windows.Forms.KeyPressEventArgs -&gt; unit" Usage="maskedTextBox.OnKeyPress e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.KeyPressEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.KeyPressEventArgs" /> , który zawiera dane zdarzenia.</param>
        <summary><see cref="E:System.Windows.Forms.Control.KeyPress" /> Podnosi zdarzenie.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnKeyUp">
      <MemberSignature Language="C#" Value="protected override void OnKeyUp (System.Windows.Forms.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnKeyUp(class System.Windows.Forms.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.OnKeyUp(System.Windows.Forms.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnKeyUp (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnKeyUp(System::Windows::Forms::KeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnKeyUp : System.Windows.Forms.KeyEventArgs -&gt; unit" Usage="maskedTextBox.OnKeyUp e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.KeyEventArgs" /> , który zawiera dane zdarzenia.</param>
        <summary><see cref="E:System.Windows.Forms.Control.KeyUp" /> Podnosi zdarzenie.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnKeyUp(System.Windows.Forms.KeyEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnMaskChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnMaskChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMaskChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.OnMaskChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMaskChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMaskChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnMaskChanged : EventArgs -&gt; unit&#xA;override this.OnMaskChanged : EventArgs -&gt; unit" Usage="maskedTextBox.OnMaskChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.EventArgs" /> Zawierający dane zdarzenia.</param>
        <summary><see cref="E:System.Windows.Forms.MaskedTextBox.MaskChanged" /> Podnosi zdarzenie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podnoszenie zdarzenia wywołuje program obsługi zdarzeń przez delegata. Aby uzyskać więcej informacji, zobacz [Obsługa i](~/docs/standard/events/index.md)wywoływanie zdarzeń.  
  
 <xref:System.Windows.Forms.MaskedTextBox.OnMaskChanged%2A> Metoda umożliwia również klasom pochodnym obsłużenia zdarzenia bez dołączania delegata. Jest to preferowana technika obsługi zdarzenia w klasie pochodnej.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Podczas zastępowania <see cref="M:System.Windows.Forms.MaskedTextBox.OnMaskChanged(System.EventArgs)" /> klasy pochodnej należy wywołać <see cref="M:System.Windows.Forms.MaskedTextBox.OnMaskChanged(System.EventArgs)" /> metodę klasy bazowej, aby zarejestrowani delegowani odbierał zdarzenie.</para></block>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.MaskChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnMultilineChanged">
      <MemberSignature Language="C#" Value="protected override void OnMultilineChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnMultilineChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.OnMultilineChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnMultilineChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnMultilineChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnMultilineChanged : EventArgs -&gt; unit" Usage="maskedTextBox.OnMultilineChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.EventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Zwykle podnosi zdarzenie <see cref="E:System.Windows.Forms.MaskedTextBox.MultilineChanged" /> , ale jest wyłączone dla <see cref="T:System.Windows.Forms.MaskedTextBox" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda jest dziedziczona z klasy bazowej <xref:System.Windows.Forms.TextBoxBase>. <xref:System.Windows.Forms.MaskedTextBox.OnMultilineChanged%2A> Jednak ponieważ <xref:System.Windows.Forms.MaskedTextBox> formant nie obsługuje konfiguracji wielowierszowej, ta metoda jest zastępowana, aby nie wykonywała żadnych akcji.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Multiline" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.MultilineChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnTextAlignChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnTextAlignChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTextAlignChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.OnTextAlignChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTextAlignChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTextAlignChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTextAlignChanged : EventArgs -&gt; unit&#xA;override this.OnTextAlignChanged : EventArgs -&gt; unit" Usage="maskedTextBox.OnTextAlignChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.EventArgs" /> Zawierający dane zdarzenia.</param>
        <summary><see cref="E:System.Windows.Forms.MaskedTextBox.TextAlignChanged" /> Podnosi zdarzenie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podnoszenie zdarzenia wywołuje program obsługi zdarzeń przez delegata. Aby uzyskać więcej informacji, zobacz [Obsługa i](~/docs/standard/events/index.md)wywoływanie zdarzeń.  
  
 <xref:System.Windows.Forms.MaskedTextBox.OnTextAlignChanged%2A> Metoda umożliwia również klasom pochodnym obsłużenia zdarzenia bez dołączania delegata. Jest to preferowana technika obsługi zdarzenia w klasie pochodnej.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Podczas zastępowania <see cref="M:System.Windows.Forms.MaskedTextBox.OnTextAlignChanged(System.EventArgs)" /> klasy pochodnej należy wywołać <see cref="M:System.Windows.Forms.MaskedTextBox.OnTextAlignChanged(System.EventArgs)" /> metodę klasy bazowej, aby zarejestrowani delegowani odbierał zdarzenie.</para></block>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.TextAlign" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.TextAlignChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnTextChanged">
      <MemberSignature Language="C#" Value="protected override void OnTextChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnTextChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.OnTextChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnTextChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnTextChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnTextChanged : EventArgs -&gt; unit" Usage="maskedTextBox.OnTextChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.EventArgs" /> Zawierający dane zdarzenia.</param>
        <summary><see cref="E:System.Windows.Forms.Control.TextChanged" /> Podnosi zdarzenie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podnoszenie zdarzenia wywołuje program obsługi zdarzeń przez delegata. Aby uzyskać więcej informacji, zobacz [Obsługa i](~/docs/standard/events/index.md)wywoływanie zdarzeń.  
  
 <xref:System.Windows.Forms.MaskedTextBox.OnTextChanged%2A> Metoda umożliwia również klasom pochodnym obsłużenia zdarzenia bez dołączania delegata. Jest to preferowana technika obsługi zdarzenia w klasie pochodnej.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Podczas zastępowania <see cref="M:System.Windows.Forms.MaskedTextBox.OnTextChanged(System.EventArgs)" /> klasy pochodnej należy wywołać <see cref="M:System.Windows.Forms.MaskedTextBox.OnTextChanged(System.EventArgs)" /> metodę klasy bazowej, aby zarejestrowani delegowani odbierał zdarzenie.</para></block>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Text" />
        <altmember cref="E:System.Windows.Forms.Control.TextChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnValidating">
      <MemberSignature Language="C#" Value="protected override void OnValidating (System.ComponentModel.CancelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnValidating(class System.ComponentModel.CancelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.OnValidating(System.ComponentModel.CancelEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnValidating (e As CancelEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnValidating(System::ComponentModel::CancelEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnValidating : System.ComponentModel.CancelEventArgs -&gt; unit" Usage="maskedTextBox.OnValidating e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.CancelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.ComponentModel.CancelEventArgs" /> , który zawiera dane zdarzenia.</param>
        <summary><see cref="E:System.Windows.Forms.Control.Validating" /> Podnosi zdarzenie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda powoduje, że ciąg wejściowy ma być zweryfikowany <xref:System.Windows.Forms.MaskedTextBox.ValidatingType%2A> względem właściwości, jeśli <xref:System.Type> określono dla tej właściwości. <xref:System.Windows.Forms.MaskedTextBox.OnValidating%2A> Następnie zostanie również <xref:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted> zgłoszone zdarzenie.  
  
> [!NOTE]
>  Aby zapewnić spójność z kontrolkami tekstowymi, walidacja zostanie wykonana nawet <xref:System.Windows.Forms.MaskedTextBox> wtedy, gdy jest tylko do <xref:System.Windows.Forms.MaskedTextBox.ReadOnly%2A> odczytu (jej właściwość `true`jest ustawiona na).  
  
 Podnoszenie zdarzenia wywołuje program obsługi zdarzeń przez delegata. Aby uzyskać więcej informacji, zobacz [Obsługa i](~/docs/standard/events/index.md)wywoływanie zdarzeń.  
  
 <xref:System.Windows.Forms.MaskedTextBox.OnValidating%2A> Metoda umożliwia również klasom pochodnym obsłużenia zdarzenia bez dołączania delegata. Jest to preferowana technika obsługi zdarzenia w klasie pochodnej.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">Wystąpił wyjątek krytyczny podczas analizowania ciągu wejściowego.</exception>
        <block subset="none" type="overrides"><para>Podczas zastępowania <see cref="M:System.Windows.Forms.MaskedTextBox.OnValidating(System.ComponentModel.CancelEventArgs)" /> klasy pochodnej należy wywołać <see cref="M:System.Windows.Forms.MaskedTextBox.OnValidating(System.ComponentModel.CancelEventArgs)" /> metodę klasy bazowej, aby zarejestrowani delegowani odbierał zdarzenie.</para></block>
        <altmember cref="E:System.Windows.Forms.Control.Validating" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.ValidatingType" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.MaskInputRejected" />
      </Docs>
    </Member>
    <Member MemberName="PasswordChar">
      <MemberSignature Language="C#" Value="public char PasswordChar { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance char PasswordChar" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.PasswordChar" />
      <MemberSignature Language="VB.NET" Value="Public Property PasswordChar As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property char PasswordChar { char get(); void set(char value); };" />
      <MemberSignature Language="F#" Value="member this.PasswordChar : char with get, set" Usage="System.Windows.Forms.MaskedTextBox.PasswordChar" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue('\0')</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.Repaint)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia znak, który będzie wyświetlany jako zamiennik dla danych wejściowych użytkownika.</summary>
        <value><see cref="T:System.Char" /> Wartość używana jako znak hasła.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W przypadku poufnych danych wejściowych użytkownika powszechną procedurą jest ukrycie rzeczywistych informacji wprowadzonych przez użytkownika. Jeśli właściwość jest ustawiona na znak inny niż null, <xref:System.Windows.Forms.MaskedTextBox> program wyświetli ten znak dla wszystkich danych wejściowych w kontrolce. <xref:System.Windows.Forms.MaskedTextBox.PasswordChar%2A> Ustawienie tej właściwości na `null` wartość spowoduje wyłączenie tej funkcji.  
  
 Jeśli chcesz użyć znaku hasła dostarczonego przez system operacyjny, który jest zdefiniowany w comctl32. dll, zamiast tego użyj <xref:System.Windows.Forms.MaskedTextBox.UseSystemPasswordChar%2A> właściwości. Jeśli obie <xref:System.Windows.Forms.MaskedTextBox.PasswordChar%2A> właściwości i <xref:System.Windows.Forms.MaskedTextBox.UseSystemPasswordChar%2A> są aktywowane, pierwszeństwo ma Ostatnia.  
  
> [!IMPORTANT]
>  Ze względów bezpieczeństwa <xref:System.Windows.Forms.MaskedTextBox> formant wyłącza operacje wycinania i kopiowania dla ciągów chronionych hasłem.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Znak określony podczas ustawiania tej właściwości nie jest prawidłowym znakiem hasła, zgodnie <see cref="M:System.ComponentModel.MaskedTextProvider.IsValidPasswordChar(System.Char)" /> z metodą <see cref="T:System.ComponentModel.MaskedTextProvider" /> klasy.</exception>
        <exception cref="T:System.InvalidOperationException">Określony znak hasła jest taki sam jak w przypadku bieżącego znaku <see cref="P:System.Windows.Forms.MaskedTextBox.PromptChar" />monitu. Te dwa muszą być różne.</exception>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.UseSystemPasswordChar" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.PromptChar" />
      </Docs>
    </Member>
    <Member MemberName="ProcessCmdKey">
      <MemberSignature Language="C#" Value="protected override bool ProcessCmdKey (ref System.Windows.Forms.Message msg, System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool ProcessCmdKey(valuetype System.Windows.Forms.Message&amp; msg, valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function ProcessCmdKey (ByRef msg As Message, keyData As Keys) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool ProcessCmdKey(System::Windows::Forms::Message % msg, System::Windows::Forms::Keys keyData);" />
      <MemberSignature Language="F#" Value="override this.ProcessCmdKey :  * System.Windows.Forms.Keys -&gt; bool" Usage="maskedTextBox.ProcessCmdKey (msg, keyData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="msg" Type="System.Windows.Forms.Message" RefType="ref" />
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="msg">A <see cref="T:System.Windows.Forms.Message" />, zakończone przez odwołanie, które reprezentuje komunikat okna do przetworzenia.</param>
        <param name="keyData">Jedna z <see cref="T:System.Windows.Forms.Keys" /> wartości, która reprezentuje klawisz skrótu do przetworzenia.</param>
        <summary>Przetwarza klucz polecenia.</summary>
        <returns><see langword="true" />Jeśli klucz polecenia został przetworzony przez formant; w przeciwnym razie. <see langword="false" /></returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.TextBoxBase.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)" />
      </Docs>
    </Member>
    <Member MemberName="ProcessKeyMessage">
      <MemberSignature Language="C#" Value="protected internal override bool ProcessKeyMessage (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance bool ProcessKeyMessage(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.ProcessKeyMessage(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Function ProcessKeyMessage (ByRef m As Message) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override bool ProcessKeyMessage(System::Windows::Forms::Message % m);" />
      <MemberSignature Language="F#" Value="override this.ProcessKeyMessage :  -&gt; bool" Usage="maskedTextBox.ProcessKeyMessage m" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">A <see cref="T:System.Windows.Forms.Message" />, zakończone przez odwołanie, które reprezentuje komunikat okna do przetworzenia.</param>
        <summary>Zastępuje podstawową implementację tej metody w celu obsługi zmian wprowadzonych w języku.</summary>
        <returns><see langword="true" />Jeśli komunikat został przetworzony przez formant; w przeciwnym razie. <see langword="false" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox>zastępuje jego implementację <xref:System.Windows.Forms.MaskedTextBox.ProcessKeyMessage%2A> podstawowego formantu, aby prawidłowo obsługiwać zdarzenia znakowe, gdy użytkownik wprowadza znaki przy użyciu edytora Input Method Editor (IME), na przykład jest używany do wprowadzania japońskich, chińskich i innych złożonych skryptów innych niż łacińskie. <xref:System.Windows.Forms.MaskedTextBox.ProcessKeyMessage%2A>wykrywa wszystkie komunikaty WM_CHAR występujące po odebraniu komunikatu WM_IME_CHAR i pomija je, aby zapobiec wyświetlaniu tych znaków w formancie. Jeśli pochodzi z tej kontrolki i przesłonisz ten komunikat, należy zduplikować to zachowanie, jeśli chcesz, aby Nowa kontrolka działała z edytorami IME.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PromptChar">
      <MemberSignature Language="C#" Value="public char PromptChar { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance char PromptChar" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.PromptChar" />
      <MemberSignature Language="VB.NET" Value="Public Property PromptChar As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property char PromptChar { char get(); void set(char value); };" />
      <MemberSignature Language="F#" Value="member this.PromptChar : char with get, set" Usage="System.Windows.Forms.MaskedTextBox.PromptChar" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue('_')</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.Repaint)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia znak używany do reprezentowania braku danych wejściowych <see cref="T:System.Windows.Forms.MaskedTextBox" />użytkownika.</summary>
        <value>Znak używany do monitowania użytkownika o dane wejściowe. Wartość domyślna to podkreślenie (_).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.PromptChar%2A>będą wyświetlane w <xref:System.Windows.Forms.MaskedTextBox> dla każdej pozycji maski, która nie została jeszcze wypełniona.  
  
 Użyj właściwości, aby określić, czy monit jest wyświetlany, <xref:System.Windows.Forms.MaskedTextBox> gdy nie ma fokusu. <xref:System.Windows.Forms.MaskedTextBox.HidePromptOnLeave%2A>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Znak określony podczas ustawiania tej właściwości nie jest prawidłowym znakiem monitu, określonym przez <see cref="M:System.ComponentModel.MaskedTextProvider.IsValidPasswordChar(System.Char)" /> metodę <see cref="T:System.ComponentModel.MaskedTextProvider" /> klasy.</exception>
        <exception cref="T:System.InvalidOperationException">Określony znak monitu jest taki sam jak bieżący znak <see cref="P:System.Windows.Forms.MaskedTextBox.PasswordChar" />hasła. Te dwa muszą być różne.</exception>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.PasswordChar" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.UseSystemPasswordChar" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.TextMaskFormat" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.CutCopyMaskFormat" />
      </Docs>
    </Member>
    <Member MemberName="ReadOnly">
      <MemberSignature Language="C#" Value="public bool ReadOnly { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.ReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public Property ReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ReadOnly { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ReadOnly : bool with get, set" Usage="System.Windows.Forms.MaskedTextBox.ReadOnly" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy tekst w polu tekstowym jest tylko do odczytu.</summary>
        <value><see langword="true" />Aby wskazać, że tekst jest tylko do odczytu; w przeciwnym razie. <see langword="false" /></value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="RejectInputOnFirstFailure">
      <MemberSignature Language="C#" Value="public bool RejectInputOnFirstFailure { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RejectInputOnFirstFailure" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.RejectInputOnFirstFailure" />
      <MemberSignature Language="VB.NET" Value="Public Property RejectInputOnFirstFailure As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool RejectInputOnFirstFailure { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.RejectInputOnFirstFailure : bool with get, set" Usage="System.Windows.Forms.MaskedTextBox.RejectInputOnFirstFailure" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy analizowanie danych wejściowych użytkownika powinno zostać zatrzymane po osiągnięciu pierwszego nieprawidłowego znaku.</summary>
        <value><see langword="true" />Jeśli przetwarzanie ciągu wejściowego powinno kończyć się podczas pierwszego błędu analizy; w przeciwnym <see langword="false" /> razie, jeśli przetwarzanie powinno ignorować wszystkie błędy. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Czasami użytkownik wprowadzi kilka znaków <xref:System.Windows.Forms.MaskedTextBox> w jednej operacji wejściowej, zazwyczaj przez kopiowanie i wklejanie ciągu. Jeśli cały ciąg zawiera tylko prawidłowe znaki, zgodnie z ich położeniem wklejenia w masce wprowadzania, cała operacja zakończy się powodzeniem. Jednak w przypadku wystąpienia błędu analizy zachowanie <xref:System.Windows.Forms.MaskedTextBox> jest zależne od <xref:System.Windows.Forms.MaskedTextBox.RejectInputOnFirstFailure%2A>wartości w następujący sposób:  
  
-   Jeśli ta właściwość jest `true`, przetwarzanie ciągu wejściowego jest zatrzymywane przy nieprawidłowym znaku. Wszystkie kolejne znaki są ignorowane. Zostanie zgłoszone pojedyncze <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected> zdarzenie.  
  
-   Jeśli ta właściwość ma `false`wartość, nieprawidłowy znak zostanie odrzucony, ale analizowanie będzie kontynuowane przy użyciu następnego znaku w ciągu wejściowym. <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected> Zdarzenie jest zgłaszane dla każdego nieprawidłowego znaku w ciągu wejściowym.  
  
 <xref:System.Windows.Forms.MaskedTextBox.ResetOnPrompt%2A> Właściwości<xref:System.Windows.Forms.MaskedTextBox.ResetOnSpace%2A> i mogą<xref:System.Windows.Forms.MaskedTextBox.SkipLiterals%2A> również wpływać na interpretację danych wejściowych użytkownika.  
  
 Jeśli właściwość jest `false`, wszystkie znaki znajdujące się już w masce wejściowej po prawej stronie punktu wstawiania zostaną przesłonięte przez zaakceptowaną liczbę znaków. <xref:System.Windows.Forms.MaskedTextBox.IsOverwriteMode%2A> Ta zmiana może spowodować dodatkowe błędy analizy.  
  
 Wklejanie operacji może być mimicked programowo przez ustawienie <xref:System.Windows.Forms.MaskedTextBox.SelectedText%2A> właściwości.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.MaskInputRejected" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.ResetOnPrompt" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.ResetOnSpace" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.IsOverwriteMode" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.SelectedText" />
      </Docs>
    </Member>
    <Member MemberName="ResetOnPrompt">
      <MemberSignature Language="C#" Value="public bool ResetOnPrompt { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ResetOnPrompt" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.ResetOnPrompt" />
      <MemberSignature Language="VB.NET" Value="Public Property ResetOnPrompt As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ResetOnPrompt { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ResetOnPrompt : bool with get, set" Usage="System.Windows.Forms.MaskedTextBox.ResetOnPrompt" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość określającą sposób obsługi znaku wejściowego, który pasuje do znaku monitu.</summary>
        <value><see langword="true" />Jeśli znak monitu wprowadzony jako dane wejściowe powoduje, że aktualna pozycja edytowalna w masce ma zostać zresetowana; w przeciwnym <see langword="false" /> razie, aby wskazać, że znak monitu ma być przetwarzany jako normalny znak wejściowy. Wartość domyślna to <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox> Może traktować dwie kategorie znaków-spacje i znaki monitu — specjalnie. Zazwyczaj każdy znak wejściowy będzie testowany względem maski i został zaakceptowany lub odrzucony. Przy założeniu <xref:System.Windows.Forms.MaskedTextBox.PromptChar%2A> , że właściwość jest ustawiona na`null`nie, a następnie <xref:System.Windows.Forms.MaskedTextBox.ResetOnPrompt%2A> ustawienie właściwości `true` na spowoduje przetworzenie specjalnego przetwarzania dla znaku monitu. Gdy użytkownik wprowadzi znak monitu do maski, spowoduje to wyczyszczenie bieżącej pozycji znaku maski i bieżące położenie, które ma być zaawansowane, do następnego znaku edytowalnego.  
  
 <xref:System.Windows.Forms.MaskedTextBox.ResetOnPrompt%2A>ma pierwszeństwo przed <xref:System.Windows.Forms.MaskedTextBox.AllowPromptAsInput%2A> właściwością, jak pokazano w poniższej tabeli.  
  
|ResetOnPrompt wartość|AllowPromptAsInput wartość|Zachowanie rezultatowe|  
|-------------------------|------------------------------|------------------------|  
|`true`|`true`|Można wprowadzić znak monitu i powoduje zresetowanie bieżącej pozycji maski. Domyślnie włączone.|  
|`true`|`false`|Można wprowadzić znak monitu i powoduje zresetowanie bieżącej pozycji maski.|  
|`false`|`true`|Znak monitu jest przetwarzany jako standardowy znak wejściowy.|  
|`false`|`false`|Znak monitu jest nieprawidłowy i wywołuje <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected> zdarzenie.|  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.PromptChar" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.AllowPromptAsInput" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.HidePromptOnLeave" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.ResetOnSpace" />
      </Docs>
    </Member>
    <Member MemberName="ResetOnSpace">
      <MemberSignature Language="C#" Value="public bool ResetOnSpace { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ResetOnSpace" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.ResetOnSpace" />
      <MemberSignature Language="VB.NET" Value="Public Property ResetOnSpace As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ResetOnSpace { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ResetOnSpace : bool with get, set" Usage="System.Windows.Forms.MaskedTextBox.ResetOnSpace" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość określającą, jak ma być obsługiwany znak wejściowy.</summary>
        <value><see langword="true" />Jeśli znak wprowadzania miejsca powoduje zresetowanie bieżącej pozycji do edycji w masce; w przeciwnym <see langword="false" /> razie, aby wskazać, że ma być przetwarzany jako normalny znak wejściowy. Wartość domyślna to <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox> Może traktować dwie kategorie znaków-spacje i znaki monitu — specjalnie. Zazwyczaj każdy znak wejściowy będzie testowany względem maski i został zaakceptowany lub odrzucony. Ustawienie właściwości na `true` spowoduje wyczyszczenie położenia znaku maski bieżącej i bieżące położenie, które ma być zaawansowane, do następnego znaku edytowalnego. <xref:System.Windows.Forms.MaskedTextBox.ResetOnSpace%2A>  
  
 Typ wprowadzania znaków określi, czy silnik maskujący przechodzi do przodu do następnego znaku w masce, czy pozostaje w bieżącym miejscu i czeka na pasujący znak. Jeśli znak wejściowy jest spacją i nie pasuje do bieżącego znaku, który nie jest edytowalny w masce, aparat maskowania zostanie pominięty do następnego znaku w masce. Jeśli znak wejściowy nie jest spacją i nie pasuje do bieżącego znaku, który nie jest edytowalny w masce, aparat maskujący pozostanie w bieżącej pozycji maski i spróbuje dopasować następny znak wejściowy.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.ResetOnPrompt" />
      </Docs>
    </Member>
    <Member MemberName="ScrollToCaret">
      <MemberSignature Language="C#" Value="public void ScrollToCaret ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScrollToCaret() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.ScrollToCaret" />
      <MemberSignature Language="VB.NET" Value="Public Sub ScrollToCaret ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ScrollToCaret();" />
      <MemberSignature Language="F#" Value="override this.ScrollToCaret : unit -&gt; unit" Usage="maskedTextBox.ScrollToCaret " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Przewija zawartość kontrolki do bieżącej pozycji karetki. Ta metoda nie jest obsługiwana przez <see cref="T:System.Windows.Forms.MaskedTextBox" />program.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda jest dziedziczona z klasy bazowej <xref:System.Windows.Forms.TextBoxBase>. <xref:System.Windows.Forms.MaskedTextBox.ScrollToCaret%2A> Jednak ponieważ <xref:System.Windows.Forms.MaskedTextBox> formant nie obsługuje konfiguracji wielowierszowej, ta metoda jest zastępowana, aby nie wykonywała żadnych akcji.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Multiline" />
      </Docs>
    </Member>
    <Member MemberName="SelectedText">
      <MemberSignature Language="C#" Value="public override string SelectedText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SelectedText" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.SelectedText" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property SelectedText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ SelectedText { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.SelectedText : string with get, set" Usage="System.Windows.Forms.MaskedTextBox.SelectedText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia bieżące zaznaczenie w <see cref="T:System.Windows.Forms.MaskedTextBox" /> kontrolce.</summary>
        <value>Aktualnie zaznaczony tekst jako <see cref="T:System.String" />. Jeśli żaden tekst nie jest aktualnie wybrany, ta właściwość jest rozpoznawana jako pusty ciąg.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wybrane opcje są formatowane przy użyciu tej właściwości zgodnie z właściwościami formatowania kontrolki, takimi <xref:System.Windows.Forms.MaskedTextBox.FormatProvider%2A>jak <xref:System.Windows.Forms.MaskedTextBox.TextMaskFormat%2A> <xref:System.Windows.Forms.MaskedTextBox.Mask%2A>, <xref:System.Windows.Forms.MaskedTextBox.CutCopyMaskFormat%2A>, i. Wybory ustawione przy użyciu tej właściwości zachowują się jak Operacja wklejenia: każdy znak jest dopasowywany do maski, <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected> a zdarzenie jest wywoływane dla nieprawidłowych znaków. Jeśli <xref:System.Windows.Forms.MaskedTextBox.CutCopyMaskFormat%2A> <xref:System.Windows.Forms.MaskedTextBox.SelectedText%2A>jest `true`, literały i znaki monitu są dozwolone podczas ustawiania i zostaną usunięte dyskretnie, chyba że naruszają maskę.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Text" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.CutCopyMaskFormat" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.RejectInputOnFirstFailure" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.GetPositionFromCharIndex(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="SkipLiterals">
      <MemberSignature Language="C#" Value="public bool SkipLiterals { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SkipLiterals" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.SkipLiterals" />
      <MemberSignature Language="VB.NET" Value="Public Property SkipLiterals As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SkipLiterals { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.SkipLiterals : bool with get, set" Usage="System.Windows.Forms.MaskedTextBox.SkipLiterals" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy użytkownik może ponownie wprowadzać wartości literału.</summary>
        <value><see langword="true" />Aby umożliwić ponownie wprowadzanie literałów; w przeciwnym <see langword="false" /> razie, aby uniemożliwić użytkownikowi zastępowanie znaków literału. Wartość domyślna to <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Maski wejściowe często zawierają literały. Gdy użytkownik wprowadza znaki do <xref:System.Windows.Forms.MaskedTextBox> środowiska uruchomieniowego, bieżąca pozycja znaku będzie czasami wchodzić w skład literału. <xref:System.Windows.Forms.MaskedTextBox.SkipLiterals%2A> Właściwość opisuje, jak dane wejściowe użytkownika dla następnego znaku mają być obsługiwane w następujący sposób:  
  
-   Jeśli ta właściwość ma `true`wartość, użytkownik może nadmiarowo wprowadzić ten sam znak jako literał w bieżącym położeniu lub może wprowadzić następny, edytowalny znak, przeskocząc bieżącą pozycję do tej pozycji.  
  
-   Jeśli ta właściwość ma `false`wartość, użytkownik może wprowadzić tylko następny edytowalny znak. Jeśli następna pozycja w masce nie zaakceptuje znaku literału (na przykład typy użytkownika "/", a następne pozycja akceptuje tylko cyfry), formant spowoduje wystąpienie <xref:System.Windows.Forms.MaskedTextBox.MaskInputRejected> zdarzenia.  
  
 Na przykład w masce wpisu daty "90/90/0000" znaki ukośnika są literałami. Załóżmy, że użytkownik wprowadził dwie cyfry początkowe, "11", więc bieżąca pozycja w masce znajduje się na pierwszym znaku ukośnika (/). Jeśli <xref:System.Windows.Forms.MaskedTextBox.SkipLiterals%2A> jest`true`, wówczas użytkownik ma następujące prawidłowe opcje:  
  
-   Użytkownik może wprowadzić znak "/". Powoduje to przeniesienie położenia do następnego znaku, który w tym przykładzie jest czwartą pozycją, 9. elementu.  
  
-   Użytkownik może wprowadzić następny, edytowalny znak, który w tym przykładzie jest cyfrą. Cyfra zostanie sprawdzona i bieżące położenie zostanie automatycznie przeniesione do piątej pozycji, która jest elementem maskującym 0.  
  
 Jeśli <xref:System.Windows.Forms.MaskedTextBox.SkipLiterals%2A> jest`false`, dozwolone są tylko prawidłowe dane wejściowe, które w tym przykładzie byłyby cyfry.  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.MaskInputRejected" />
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public override string Text { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.Text" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Text As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ Text { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Text : string with get, set" Usage="System.Windows.Forms.MaskedTextBox.Text" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.MaskedTextBoxTextEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.MaskedTextBoxTextEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.Repaint)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia tekst, który jest aktualnie wyświetlany użytkownikowi.</summary>
        <value><see cref="T:System.String" /> Zawierający tekst aktualnie wyświetlany przez formant. Wartość domyślna to pusty ciąg.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.Text%2A>jest domyślną właściwością powiązania dla <xref:System.Windows.Forms.MaskedTextBox> klasy.  
  
 Ciągi pobierane za pomocą tej właściwości są sformatowane zgodnie z właściwościami formatowania kontrolki, takimi <xref:System.Windows.Forms.MaskedTextBox.Mask%2A> jak <xref:System.Windows.Forms.MaskedTextBox.TextMaskFormat%2A>i.  
  
 Można przypisać ciąg z lub bez znaków literału <xref:System.Windows.Forms.MaskedTextBox.Text%2A> <xref:System.Windows.Forms.MaskedTextBox.ResetOnPrompt%2A>, aby w zależności od wartości, <xref:System.Windows.Forms.MaskedTextBox.ResetOnSpace%2A>, i <xref:System.Windows.Forms.MaskedTextBox.SkipLiterals%2A>.  
  
 <xref:System.Windows.Forms.MaskedTextBox.Text%2A>jest domyślną właściwością powiązania dla <xref:System.Windows.Forms.MaskedTextBox>.  
  
 <xref:System.Windows.Forms.MaskedTextBox>spowoduje wygenerowanie <xref:System.Windows.Forms.Control.TextChanged> zdarzenia przy każdej zmianie wartości tekstu sformatowanego. Inne właściwości mogą, ale nie mogą, spowodować zmianę tej wartości. Na przykład zmiana <xref:System.Windows.Forms.MaskedTextBox.PasswordChar%2A> właściwości nie <xref:System.Windows.Forms.Control.TextChanged> spowoduje zgłoszenia <xref:System.Windows.Forms.MaskedTextBox.Mask%2A> zdarzenia, ale zmiana właściwości zostanie zmieniona.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje użycie <xref:System.Windows.Forms.MaskedTextBox.Text%2A> właściwości.  
  
 [!code-vb[TestMaskedTextBox#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TestMaskedTextBox/VB/form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.ComponentModel.DefaultBindingPropertyAttribute" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.SelectedText" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.FormatProvider" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.TextMaskFormat" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Culture" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.HidePromptOnLeave" />
      </Docs>
    </Member>
    <Member MemberName="TextAlign">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HorizontalAlignment TextAlign { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.HorizontalAlignment TextAlign" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.TextAlign" />
      <MemberSignature Language="VB.NET" Value="Public Property TextAlign As HorizontalAlignment" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HorizontalAlignment TextAlign { System::Windows::Forms::HorizontalAlignment get(); void set(System::Windows::Forms::HorizontalAlignment value); };" />
      <MemberSignature Language="F#" Value="member this.TextAlign : System.Windows.Forms.HorizontalAlignment with get, set" Usage="System.Windows.Forms.MaskedTextBox.TextAlign" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HorizontalAlignment</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia sposób wyrównywania tekstu w maskowanej kontrolce pola tekstowego.</summary>
        <value>Jedna z <see cref="T:System.Windows.Forms.HorizontalAlignment" /> wartości wyliczenia, która określa, jak tekst jest wyrównany względem kontrolki. Wartość domyślna to <see cref="F:System.Windows.Forms.HorizontalAlignment.Left" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Możesz użyć <xref:System.Windows.Forms.MaskedTextBox.TextAlign%2A> właściwości, aby wyrównać wyświetlany tekst <xref:System.Windows.Forms.MaskedTextBox> w ciągu do układu elementów wizualizacji w formularzu. Na przykład, jeśli formanty znajdują się po prawej stronie formularza, można ustawić <xref:System.Windows.Forms.MaskedTextBox.TextAlign%2A> właściwość na <xref:System.Windows.Forms.HorizontalAlignment.Right>, a tekst będzie wyrównany po prawej stronie kontrolki zamiast domyślnego wyrównania w lewo.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Wartość przypisana do tej właściwości nie jest typu <see cref="T:System.Windows.Forms.HorizontalAlignment" />.</exception>
        <altmember cref="T:System.Windows.Forms.HorizontalAlignment" />
        <altmember cref="P:System.Windows.Forms.TextBoxBase.TextLength" />
        <altmember cref="P:System.Windows.Forms.TextBoxBase.AutoSize" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.TextAlignChanged" />
      </Docs>
    </Member>
    <Member MemberName="TextAlignChanged">
      <MemberSignature Language="C#" Value="public event EventHandler TextAlignChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler TextAlignChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.MaskedTextBox.TextAlignChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TextAlignChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ TextAlignChanged;" />
      <MemberSignature Language="F#" Value="member this.TextAlignChanged : EventHandler " Usage="member this.TextAlignChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po zmianie wyrównania tekstu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zdarzenie jest wywoływane <xref:System.Windows.Forms.MaskedTextBox.TextAlign%2A> po zmianie właściwości. <xref:System.Windows.Forms.MaskedTextBox.TextAlignChanged>  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje użycie tego elementu członkowskiego. W tym przykładzie program obsługi zdarzeń raportuje wystąpienie <xref:System.Windows.Forms.MaskedTextBox.TextAlignChanged> zdarzenia. Ten raport pomaga dowiedzieć się, kiedy wystąpi zdarzenie i może pomóc w debugowaniu. Aby zgłosić wiele zdarzeń lub zdarzenia, które występują często, należy rozważyć <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> zamianę <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> lub dołączenie komunikatu do wielowierszowego <xref:System.Windows.Forms.TextBox>.  
  
 Aby uruchomić przykładowy kod, wklej go do projektu zawierającego wystąpienie typu <xref:System.Windows.Forms.MaskedTextBox> o nazwie. `MaskedTextBox1` Następnie upewnij się, że program obsługi zdarzeń jest skojarzony <xref:System.Windows.Forms.MaskedTextBox.TextAlignChanged> ze zdarzeniem.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#487](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#487)]
 [!code-vb[System.Windows.Forms.EventExamples#487](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#487)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.TextAlign" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.OnTextAlignChanged(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="TextLength">
      <MemberSignature Language="C#" Value="public override int TextLength { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 TextLength" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.TextLength" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property TextLength As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int TextLength { int get(); };" />
      <MemberSignature Language="F#" Value="member this.TextLength : int" Usage="System.Windows.Forms.MaskedTextBox.TextLength" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera długość wyświetlanego tekstu.</summary>
        <value>Int32 reprezentujący liczbę znaków we <see cref="P:System.Windows.Forms.MaskedTextBox.Text" /> właściwości. <see cref="P:System.Windows.Forms.MaskedTextBox.TextLength" />uwzględnia właściwości, takie jak <see cref="P:System.Windows.Forms.MaskedTextBox.HidePromptOnLeave" />, co oznacza, że wyniki zwracają mogą się różnić w zależności od tego, czy formant ma fokus.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="TextMaskFormat">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.MaskFormat TextMaskFormat { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.MaskFormat TextMaskFormat" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.TextMaskFormat" />
      <MemberSignature Language="VB.NET" Value="Public Property TextMaskFormat As MaskFormat" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::MaskFormat TextMaskFormat { System::Windows::Forms::MaskFormat get(); void set(System::Windows::Forms::MaskFormat value); };" />
      <MemberSignature Language="F#" Value="member this.TextMaskFormat : System.Windows.Forms.MaskFormat with get, set" Usage="System.Windows.Forms.MaskedTextBox.TextMaskFormat" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.Repaint)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MaskFormat</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość określającą, czy literały i znaki monitu są uwzględniane w sformatowanym ciągu.</summary>
        <value>Jedna z <see cref="T:System.Windows.Forms.MaskFormat" /> wartości. Wartość domyślna to <see cref="F:System.Windows.Forms.MaskFormat.IncludeLiterals" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox.TextMaskFormat%2A> Właściwość określa, jak literał i znaki monitu w masce są przetwarzane podczas generowania sformatowanego ciągu. Dokładniej mówiąc, określa, czy we <xref:System.Windows.Forms.MaskedTextBox.Text%2A> właściwości są zawarte znaki literału, znaki monitu lub oba te elementy. Gdy znaki monitu są wykluczone, są one przekształcane na spacje w formacie ciągu.  
  
> [!NOTE]
>  Właściwość służy do podobnego celu w odniesieniu do <xref:System.Windows.Forms.MaskedTextBox.Text%2A> sposobu interpretacji właściwości. <xref:System.Windows.Forms.MaskedTextBox.CutCopyMaskFormat%2A>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Ustawiono właściwość o <see cref="T:System.Windows.Forms.MaskFormat" /> wartości, która jest nieprawidłowa.</exception>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.CutCopyMaskFormat" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.PromptChar" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.AllowPromptAsInput" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Text" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.ToString" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="maskedTextBox.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca ciąg, który reprezentuje bieżące pole tekstowe maskowane. Ta metoda przesłania <see cref="M:System.Windows.Forms.TextBoxBase.ToString" />.</summary>
        <returns>A <see cref="T:System.String" /> , który zawiera informacje o bieżącym <see cref="T:System.Windows.Forms.MaskedTextBox" />. Ciąg zawiera typ, uproszczony widok ciągu wejściowego i sformatowany ciąg wejściowy.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta wersja <xref:System.Windows.Forms.MaskedTextBox.ToString%2A> metody wywołuje implementację klasy bazowej tej metody, <xref:System.Windows.Forms.TextBoxBase.ToString%2A?displayProperty=nameWithType>a następnie dołącza ciąg wejściowy po przetworzeniu przez maskę. Ta metoda honoruje właściwości, które zmieniają wygląd sformatowanego ciągu, z następującymi wyjątkami:  
  
-   Zwracany ciąg zawsze zawiera znaki monitu i literału, niezależnie od wartości <xref:System.Windows.Forms.MaskedTextBox.TextMaskFormat%2A> właściwości.  
  
-   Znaki hasła są ignorowane, dzięki czemu zwracane są rzeczywiste znaki wpisane przez użytkownika. Innymi słowy wartości <xref:System.Windows.Forms.MaskedTextBox.PasswordChar%2A> właściwości i <xref:System.Windows.Forms.MaskedTextBox.UseSystemPasswordChar%2A> są ignorowane.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Text" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.TextMaskFormat" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.PasswordChar" />
      </Docs>
    </Member>
    <Member MemberName="TypeValidationCompleted">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.TypeValidationEventHandler TypeValidationCompleted;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.TypeValidationEventHandler TypeValidationCompleted" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event TypeValidationCompleted As TypeValidationEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::TypeValidationEventHandler ^ TypeValidationCompleted;" />
      <MemberSignature Language="F#" Value="member this.TypeValidationCompleted : System.Windows.Forms.TypeValidationEventHandler " Usage="member this.TypeValidationCompleted : System.Windows.Forms.TypeValidationEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TypeValidationEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po <see cref="T:System.Windows.Forms.MaskedTextBox" /> zakończeniu analizy bieżącej wartości <see cref="P:System.Windows.Forms.MaskedTextBox.ValidatingType" /> przy użyciu właściwości.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Kontrolka będzie opcjonalnie sprawdzać poprawność danych wejściowych użytkownika względem <xref:System.Windows.Forms.MaskedTextBox.ValidatingType%2A?displayProperty=nameWithType> typu zdefiniowanego przez jego właściwość. <xref:System.Windows.Forms.MaskedTextBox> Gdy ta właściwość nie `null`jest, występuje następująca seria zdarzeń:  
  
1.  Sekwencja walidacji rozpoczyna się, gdy występuje jedna z następujących sytuacji:  
  
    -   <xref:System.Windows.Forms.MaskedTextBox>Kontrolka naniesie fokus.  
  
    -   <xref:System.Windows.Forms.MaskedTextBox.Text%2A> Właściwość zostanie pobrana.  
  
    -   <xref:System.Windows.Forms.MaskedTextBox.ValidateText%2A> Metoda jest wywoływana.  
  
2.  Dowolne z tych zdarzeń powoduje wywołanie `Parse` metody typu określonego <xref:System.Windows.Forms.TypeValidationEventArgs.ValidatingType%2A> za pomocą właściwości. `Parse`jest odpowiedzialny za konwersję sformatowanego ciągu wejściowego na typ docelowy. Pomyślna konwersja jest równa pomyślnej weryfikacji.  
  
3.  Po `Parse` powrocie <xref:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted> zostanie zgłoszone zdarzenie. Program obsługi zdarzeń dla tego zdarzenia jest najczęściej implementowany w celu przeprowadzenia przetwarzania walidacji typu lub maski. Otrzymuje <xref:System.Windows.Forms.TypeValidationEventArgs> parametr zawierający informacje o konwersji; na przykład <xref:System.Windows.Forms.TypeValidationEventArgs.IsValidInput%2A> element członkowski wskazuje, czy konwersja zakończyła się pomyślnie.  
  
4.  Po powrocie programu obsługi <xref:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted> zdarzeń zostanie zgłoszone standardowe <xref:System.Windows.Forms.Control.Validating>zdarzenie walidacji. Procedurę obsługi można zaimplementować w celu przeprowadzenia standardowej walidacji, np. anulowania zdarzenia.  
  
5.  Jeśli zdarzenie nie zostanie anulowane w kroku 3, zostanie zgłoszone zdarzenie <xref:System.Windows.Forms.Control.Validated> sprawdzania poprawności kontroli standardowej.  
  
 <xref:System.Windows.Forms.MaskedTextBox> <xref:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted> <xref:System.Windows.Forms.Control.Validating> <xref:System.ComponentModel.CancelEventArgs.Cancel%2A?displayProperty=nameWithType> Jeśli właściwość jest ustawiona na `true` w programie obsługi zdarzeń, zdarzenie zostanie anulowane, a kontrolka zachowuje fokus, chyba że kolejne zdarzenie ustawi jego wersję właściwości <xref:System.Windows.Forms.TypeValidationEventArgs.Cancel%2A> z powrotem `false`do.  
  
   
  
## Examples  
 Poniższy przykład kodu próbuje przeanalizować dane wejściowe użytkownika jako prawidłowy <xref:System.DateTime> obiekt. Jeśli to się nie powiedzie, <xref:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted> program obsługi zdarzeń wyświetli komunikat o błędzie dla użytkownika. Jeśli wartość jest prawidłowa <xref:System.DateTime>, kod sprawdza, czy podana data nie jest wcześniejsza od daty dzisiejszej. Ten przykład kodu wymaga, <xref:System.Windows.Forms.MaskedTextBox> aby projekt Windows Forms zawierał kontrolkę o nazwie `MaskedTextBox1` i <xref:System.Windows.Forms.ToolTip> kontrolkę `ToolTip1`o nazwie.  
  
 [!code-csharp[ValidatingTypeSample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ValidatingTypeSample/CS/form1.cs#1)]
 [!code-vb[ValidatingTypeSample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ValidatingTypeSample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Text" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.ValidateText" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.ValidatingType" />
        <altmember cref="T:System.Windows.Forms.TypeValidationEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="Undo">
      <MemberSignature Language="C#" Value="public void Undo ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Undo() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.Undo" />
      <MemberSignature Language="VB.NET" Value="Public Sub Undo ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Undo();" />
      <MemberSignature Language="F#" Value="override this.Undo : unit -&gt; unit" Usage="maskedTextBox.Undo " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Cofa ostatnią operację edycji w polu tekstowym. Ta metoda nie jest obsługiwana przez <see cref="T:System.Windows.Forms.MaskedTextBox" />program.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda jest dziedziczona z klasy bazowej <xref:System.Windows.Forms.TextBoxBase>. <xref:System.Windows.Forms.MaskedTextBox.Undo%2A> Program <xref:System.Windows.Forms.MaskedTextBox> nie obsługuje jednak funkcji cofania.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.CanUndo" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.ClearUndo" />
      </Docs>
    </Member>
    <Member MemberName="UseSystemPasswordChar">
      <MemberSignature Language="C#" Value="public bool UseSystemPasswordChar { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool UseSystemPasswordChar" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.UseSystemPasswordChar" />
      <MemberSignature Language="VB.NET" Value="Public Property UseSystemPasswordChar As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool UseSystemPasswordChar { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.UseSystemPasswordChar : bool with get, set" Usage="System.Windows.Forms.MaskedTextBox.UseSystemPasswordChar" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.Repaint)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy powinien zostać użyty znak hasła dostarczony przez system operacyjny.</summary>
        <value><see langword="true" />Jeśli hasło systemowe powinno być używane jako znak monitu; w przeciwnym razie. <see langword="false" /> Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Właściwość określa, czy dane wejściowe podane przez użytkownika powinny być wyświetlane <xref:System.Windows.Forms.MaskedTextBox> w jako wiele wystąpień znaku hasła zdefiniowanego przez system operacyjny. <xref:System.Windows.Forms.MaskedTextBox.UseSystemPasswordChar%2A> <xref:System.Windows.Forms.MaskedTextBox.UseSystemPasswordChar%2A>działa podobnie do <xref:System.Windows.Forms.MaskedTextBox.PasswordChar%2A> właściwości, ale zamiast używać znaku dostarczonego przez programistę dla monitu, <xref:System.Windows.Forms.MaskedTextBox.UseSystemPasswordChar%2A> używa monitu zdefiniowanego przez system operacyjny. Ta właściwość ma pierwszeństwo <xref:System.Windows.Forms.MaskedTextBox.PasswordChar%2A>przed.  
  
> [!IMPORTANT]
>  Ze względów bezpieczeństwa <xref:System.Windows.Forms.MaskedTextBox> formant wyłącza operacje wycinania i kopiowania dla ciągów chronionych hasłem.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Określony znak hasła jest taki sam jak w przypadku bieżącego znaku <see cref="P:System.Windows.Forms.MaskedTextBox.PromptChar" />monitu. Te dwa muszą być różne.</exception>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.PromptChar" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.PasswordChar" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.AllowPromptAsInput" />
      </Docs>
    </Member>
    <Member MemberName="ValidateText">
      <MemberSignature Language="C#" Value="public object ValidateText ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance object ValidateText() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.ValidateText" />
      <MemberSignature Language="VB.NET" Value="Public Function ValidateText () As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Object ^ ValidateText();" />
      <MemberSignature Language="F#" Value="member this.ValidateText : unit -&gt; obj" Usage="maskedTextBox.ValidateText " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Konwertuje ciąg wejściowy użytkownika na wystąpienie typu walidacji.</summary>
        <returns>Jeśli to się powiedzie, <see cref="T:System.Object" /> typu określonego <see cref="P:System.Windows.Forms.MaskedTextBox.ValidatingType" /> przez właściwość; w przeciwnym razie <see langword="null" /> , aby wskazać błąd konwersji.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda próbuje skonwertować sformatowany ciąg zawarty <xref:System.Windows.Forms.MaskedTextBox.Text%2A> we właściwości do wystąpienia typu określonego przez <xref:System.Windows.Forms.MaskedTextBox.ValidatingType%2A> właściwość. <xref:System.Windows.Forms.MaskedTextBox.ValidateText%2A> Znaki monitu są ignorowane w sformatowanym ciągu, ale literały są obsługiwane zgodnie z bieżącą wartością <xref:System.Windows.Forms.MaskedTextBox.TextMaskFormat%2A> właściwości.  
  
 <xref:System.Windows.Forms.MaskedTextBox.ValidateText%2A><xref:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted> podnosi zdarzenie po próbie konwersji, bez względu na jego powodzenie.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">Wystąpił wyjątek krytyczny podczas analizowania ciągu wejściowego.</exception>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Text" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.ValidatingType" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.TextMaskFormat" />
      </Docs>
    </Member>
    <Member MemberName="ValidatingType">
      <MemberSignature Language="C#" Value="public Type ValidatingType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ValidatingType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.ValidatingType" />
      <MemberSignature Language="VB.NET" Value="Public Property ValidatingType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ ValidatingType { Type ^ get(); void set(Type ^ value); };" />
      <MemberSignature Language="F#" Value="member this.ValidatingType : Type with get, set" Usage="System.Windows.Forms.MaskedTextBox.ValidatingType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia typ danych służący do weryfikowania danych wejściowych przez użytkownika.</summary>
        <value><see cref="T:System.Type" /> Reprezentujący typ danych używany podczas walidacji. Wartość domyślna to <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Maski nie zagwarantują, że dane wejściowe użytkownika będą stanowiły prawidłową wartość dla danego typu. Poniższy C# kod przedstawia maskę:  
  
```  
maskedTextBox1.Mask = "99/99/9999";  
```  
  
 Poniższy kod Visual Basic przedstawia maskę:  
  
 `MaskedTextBox1.Mask = "99/99/9999"`  
  
 Ta maska może wymagać, aby użytkownik wprowadził osiem cyfr, ale nie może sprawdzić, czy użytkownik wprowadza wartości miesiąca, daty i roku w prawidłowym zakresie; "12/20/2003" i "70/90/0000" są równie ważne, jak to jest dana maska.  
  
 Można użyć <xref:System.Windows.Forms.MaskedTextBox.ValidatingType%2A> , aby sprawdzić, czy dane wprowadzone przez użytkownika mieszczą się w poprawnym zakresie — w wyżej wymienionym przypadku, przypisując do niego wystąpienie <xref:System.DateTime> typu. Bieżący tekst w formancie zostanie sprawdzony, gdy użytkownik opuści formant. Można określić, czy dane mają być niepowodzenie walidacji przez monitorowanie <xref:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted> zdarzenia. <xref:System.Windows.Forms.MaskedTextBox>sprawdza <xref:System.Windows.Forms.MaskedTextBox.ValidatingType%2A> tylko, czy <xref:System.Windows.Forms.MaskedTextBox.MaskCompleted%2A> jest `true`.  
  
 Jeśli chcesz użyć własnych niestandardowych typów danych w programie <xref:System.Windows.Forms.MaskedTextBox.ValidatingType%2A>, musisz zaimplementować metodę statyczną `Parse` , która przyjmuje ciąg jako parametr. Ta metoda musi być zaimplementowana z co najmniej jednym z następujących podpisów:  
  
 `public static Object Parse(string)`  
  
 `public static Object Parse(string, IFormatProvider)`  
  
   
  
## Examples  
 Poniższy przykład kodu próbuje przeanalizować dane wejściowe użytkownika jako prawidłowe <xref:System.DateTime>. Jeśli to się nie powiedzie, <xref:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted> program obsługi zdarzeń wyświetli komunikat o błędzie dla użytkownika. Jeśli wartość jest prawidłowa <xref:System.DateTime>, kod wykonuje dodatkowe sprawdzenie, aby upewnić się, że podana data nie jest wcześniejsza od daty dzisiejszej. Ten przykład kodu wymaga, <xref:System.Windows.Forms.MaskedTextBox> aby projekt Windows Forms zawierał kontrolkę o nazwie `MaskedTextBox1` i <xref:System.Windows.Forms.ToolTip> kontrolkę `ToolTip1`o nazwie.  
  
 [!code-csharp[ValidatingTypeSample#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ValidatingTypeSample/CS/form1.cs#1)]
 [!code-vb[ValidatingTypeSample#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ValidatingTypeSample/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Mask" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.MaskedTextProvider" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted" />
      </Docs>
    </Member>
    <Member MemberName="WndProc">
      <MemberSignature Language="C#" Value="protected override void WndProc (ref System.Windows.Forms.Message m);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void WndProc(valuetype System.Windows.Forms.Message&amp; m) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MaskedTextBox.WndProc(System.Windows.Forms.Message@)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub WndProc (ByRef m As Message)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void WndProc(System::Windows::Forms::Message % m);" />
      <MemberSignature Language="F#" Value="override this.WndProc :  -&gt; unit" Usage="maskedTextBox.WndProc m" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="m" Type="System.Windows.Forms.Message" RefType="ref" />
      </Parameters>
      <Docs>
        <param name="m">System Windows <see cref="T:System.Windows.Forms.Message" /> do przetworzenia.</param>
        <summary>Przetwarza wiadomości systemu Windows.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.TextBoxBase.WndProc(System.Windows.Forms.Message@)" />
      </Docs>
    </Member>
    <Member MemberName="WordWrap">
      <MemberSignature Language="C#" Value="public bool WordWrap { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool WordWrap" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MaskedTextBox.WordWrap" />
      <MemberSignature Language="VB.NET" Value="Public Property WordWrap As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool WordWrap { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.WordWrap : bool with get, set" Usage="System.Windows.Forms.MaskedTextBox.WordWrap" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy wielowierszowa kontrolka pola tekstowego automatycznie zawija wyrazy na początku następnego wiersza, gdy jest to konieczne. Ta właściwość nie jest obsługiwana przez <see cref="T:System.Windows.Forms.MaskedTextBox" />program.</summary>
        <value>Właściwość zawsze zwraca wartość <see langword="false" />. <see cref="P:System.Windows.Forms.MaskedTextBox.WordWrap" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MaskedTextBox> Ponieważ<xref:System.Windows.Forms.MaskedTextBox.WordWrap%2A> program nie obsługuje wielu wierszy danych wejściowych, właściwość jest ignorowana.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Multiline" />
      </Docs>
    </Member>
  </Members>
</Type>