<Type Name="Timer" FullName="System.Windows.Forms.Timer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="605adb65317c3aed410b30da1253c4608ed2231d" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69178689" /></Metadata><TypeSignature Language="C#" Value="public class Timer : System.ComponentModel.Component" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Timer extends System.ComponentModel.Component" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.Timer" />
  <TypeSignature Language="VB.NET" Value="Public Class Timer&#xA;Inherits Component" />
  <TypeSignature Language="C++ CLI" Value="public ref class Timer : System::ComponentModel::Component" />
  <TypeSignature Language="F#" Value="type Timer = class&#xA;    inherit Component" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("Tick")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("Interval")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.ToolboxItemFilter("System.Windows.Forms")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Implementuje czasomierz, który wywołuje zdarzenie w interwałach zdefiniowanych przez użytkownika. Ten czasomierz jest zoptymalizowany pod kątem używania w aplikacjach Windows Forms i musi być używany w oknie.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.Windows.Forms.Timer> służy do zgłaszania zdarzenia w interwałach zdefiniowanych przez użytkownika. Ten czasomierz systemu Windows jest przeznaczony dla środowiska jednowątkowego, w którym wątki interfejsu użytkownika są używane do przetwarzania. Wymaga to, aby kod użytkownika miał dostępną pompę komunikatów interfejsu użytkownika i zawsze działał z tego samego wątku, lub kierowanie wywołania do innego wątku.  
  
 Korzystając z tego czasomierza, użyj <xref:System.Windows.Forms.Timer.Tick> zdarzenia, aby wykonać operację sondowania lub wyświetlić ekran powitalny przez określony czas. <xref:System.Windows.Forms.Timer.Tick> `true` <xref:System.Windows.Forms.Timer.Interval%2A> Zawsze, gdy <xref:System.Windows.Forms.Timer.Interval%2A> właściwość jest ustawiona na, a właściwość jest większa od zera, zdarzenie jest zgłaszane w odstępach czasu na podstawie ustawienia właściwości. <xref:System.Windows.Forms.Timer.Enabled%2A>  
  
 Ta klasa zawiera metody ustawiające interwał i uruchamiania i zatrzymywania czasomierza.  
  
> [!NOTE]
>  Składnik czasomierza Windows Forms jest jednowątkowy i jest ograniczony do dokładności 55 milisekund. Jeśli potrzebujesz czasomierza wielowątkowości z większą dokładnością, użyj <xref:System.Timers.Timer> klasy <xref:System.Timers> w przestrzeni nazw.  
  
   
  
## Examples  
 W poniższym przykładzie przedstawiono implementację prostego czasomierza interwału, który ustawia alarm co pięć sekund. Gdy wystąpi alarm, <xref:System.Windows.Forms.MessageBox> wyświetlana jest liczba uruchomień alarmu i zostanie wyświetlony komunikat z pytaniem o to, czy czasomierz powinien być nadal uruchamiany.  
  
 [!code-cpp[Classic Timer Example 2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Timer Example 2/CPP/source.cpp#1)]
 [!code-csharp[Classic Timer Example 2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Timer Example 2/CS/source.cs#1)]
 [!code-vb[Classic Timer Example 2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Timer Example 2/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Forms.Timer" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Timer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Forms.Timer" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Po utworzeniu nowego czasomierza jest on wyłączony; oznacza to, <xref:System.Windows.Forms.Timer.Enabled%2A> że jest ustawiona `false`na. Aby włączyć czasomierz, wywołaj <xref:System.Windows.Forms.Timer.Start%2A> metodę lub `true`ustaw wartość <xref:System.Windows.Forms.Timer.Enabled%2A> .  
  
 Jeśli czasomierz jest wyłączony i czasomierz jest poza zakresem, czasomierz zostanie usunięty, gdy następuje wyrzucanie elementów bezużytecznych. Jeśli czasomierz jest włączony, nawet jeśli znajduje się poza zakresem, nie podlega wyrzucaniu elementów bezużytecznych.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Timer.Enabled" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.ComponentModel.IContainer container);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.ComponentModel.IContainer container) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Timer.#ctor(System.ComponentModel.IContainer)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (container As IContainer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::ComponentModel::IContainer ^ container);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.Timer : System.ComponentModel.IContainer -&gt; System.Windows.Forms.Timer" Usage="new System.Windows.Forms.Timer container" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="container" Type="System.ComponentModel.IContainer" />
      </Parameters>
      <Docs>
        <param name="container"><see cref="T:System.ComponentModel.IContainer" /> Reprezentuje kontener dla czasomierza.</param>
        <summary>Inicjuje nowe wystąpienie <see cref="T:System.Windows.Forms.Timer" /> klasy wraz z określonym kontenerem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Konstruktor umożliwia skojarzenie z dowolnym <xref:System.ComponentModel.Container>obiektem. <xref:System.Windows.Forms.Timer> <xref:System.Windows.Forms.Timer> Dzięki skojarzeniu <xref:System.Windows.Forms.Timer> tego elementu można przejąć kontrolę nad okresem istnienia <xref:System.Windows.Forms.Timer> do <xref:System.ComponentModel.Container>. Może to być przydatne, jeśli używasz kilku składników w aplikacji i chcesz usunąć wszystkie z nich jednocześnie. Na przykład, jeśli <xref:System.Windows.Forms.ToolTip>kojarzy <xref:System.Windows.Forms.ImageList>, a <xref:System.ComponentModel.Container>, i <xref:System.Windows.Forms.Timer> a z, wywołując <xref:System.ComponentModel.Container.Dispose%2A> na <xref:System.ComponentModel.Container> wymuszenie usunięcia wszystkich tych składników.  
  
 Po utworzeniu nowego czasomierza jest on wyłączony; oznacza to, <xref:System.Windows.Forms.Timer.Enabled%2A> że jest ustawiona `false`na. Aby włączyć czasomierz, wywołaj <xref:System.Windows.Forms.Timer.Start%2A> metodę lub `true`ustaw wartość <xref:System.Windows.Forms.Timer.Enabled%2A> .  
  
 To wystąpienie będzie istniało, dopóki jego kontener nie zwolni do wyrzucania elementów bezużytecznych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Timer.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="timer.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><see langword="true" />Aby zwolnić zasoby zarządzane i niezarządzane. <see langword="false" />Aby zwolnić tylko niezarządzane zasoby.</param>
        <summary>Usuwa zasoby, inne niż pamięć, używane przez czasomierz.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wywołaj <xref:System.Windows.Forms.Timer.Dispose%2A> po zakończeniu korzystania z czasomierza. <xref:System.Windows.Forms.Timer.Dispose%2A> Metoda opuszcza czasomierz w stanie niezdatnym do użytku. Po wywołaniu <xref:System.Windows.Forms.Timer.Dispose%2A>należy wydać wszystkie odwołania do czasomierza, aby pamięć, która zajmowała się, może być odzyskiwana przez wyrzucanie elementów bezużytecznych.  
  
> [!NOTE]
>  Zawsze wywołuj <xref:System.Windows.Forms.Timer.Dispose%2A> przed wydaniem ostatniego odwołania do czasomierza. W przeciwnym razie zasoby, których czasomierz jest używany, nie zostaną zwolnione, dopóki wyrzucanie elementów bezużytecznych nie wywoła destruktora obiektu Timer.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public virtual bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Timer.Enabled" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Enabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool Enabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Enabled : bool with get, set" Usage="System.Windows.Forms.Timer.Enabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość określającą, czy czasomierz jest uruchomiony.</summary>
        <value><see langword="true" />Jeśli czasomierz jest obecnie włączony; w przeciwnym razie. <see langword="false" /> Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Czasomierz nie podlega wyrzucaniu elementów bezużytecznych, gdy `true`wartość jest.  
  
 Wywołanie metody jest takie samo jak `true`ustawienie <xref:System.Windows.Forms.Timer.Enabled%2A>. <xref:System.Windows.Forms.Timer.Start%2A> Podobnie wywoływanie <xref:System.Windows.Forms.Timer.Stop%2A> metody jest takie samo jak `false`ustawienie <xref:System.Windows.Forms.Timer.Enabled%2A> .  
  
   
  
## Examples  
 W poniższym przykładzie przedstawiono implementację prostego czasomierza interwału, który ustawia alarm co pięć sekund. Gdy wystąpi alarm, <xref:System.Windows.Forms.MessageBox> wyświetlana jest liczba uruchomień alarmu i zostanie wyświetlony komunikat z pytaniem o to, czy czasomierz ma nadal działać.  
  
 [!code-cpp[Classic Timer Example 2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Timer Example 2/CPP/source.cpp#1)]
 [!code-csharp[Classic Timer Example 2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Timer Example 2/CS/source.cs#1)]
 [!code-vb[Classic Timer Example 2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Timer Example 2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Interval">
      <MemberSignature Language="C#" Value="public int Interval { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Interval" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Timer.Interval" />
      <MemberSignature Language="VB.NET" Value="Public Property Interval As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Interval { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Interval : int with get, set" Usage="System.Windows.Forms.Timer.Interval" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(100)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia czas (w milisekundach), po <see cref="E:System.Windows.Forms.Timer.Tick" /> upływie którego zostanie wywołane zdarzenie względem ostatniego wystąpienia <see cref="E:System.Windows.Forms.Timer.Tick" /> zdarzenia.</summary>
        <value>Określanie liczby milisekund <see cref="E:System.Windows.Forms.Timer.Tick" /> przed wyjęciem zdarzenia względem ostatniego wystąpienia <see cref="E:System.Windows.Forms.Timer.Tick" /> zdarzenia. <see cref="T:System.Int32" /> Wartość nie może być mniejsza od jednej.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uzyskać liczbę sekund w interwale, Podziel tę liczbę na 1 000.  
  
   
  
## Examples  
 Poniższy przykład kodu implementuje prosty czasomierz interwału, który ustawia alarm co pięć sekund. Gdy wystąpi alarm, <xref:System.Windows.Forms.MessageBox> wyświetlana jest liczba uruchomień alarmu i zostanie wyświetlony komunikat z pytaniem o to, czy czasomierz ma nadal działać.  
  
 [!code-cpp[Classic Timer Example 2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Timer Example 2/CPP/source.cpp#1)]
 [!code-csharp[Classic Timer Example 2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Timer Example 2/CS/source.cs#1)]
 [!code-vb[Classic Timer Example 2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Timer Example 2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTick">
      <MemberSignature Language="C#" Value="protected virtual void OnTick (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTick(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Timer.OnTick(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTick (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTick(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTick : EventArgs -&gt; unit&#xA;override this.OnTick : EventArgs -&gt; unit" Usage="timer.OnTick e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.EventArgs" /> Zawierający dane zdarzenia. Jest to zawsze <see cref="F:System.EventArgs.Empty" />.</param>
        <summary><see cref="E:System.Windows.Forms.Timer.Tick" /> Podnosi zdarzenie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda jest wywoływana dla każdego taktu czasomierza. Wywołuje wszystkie metody, które są dodawane przez <xref:System.Windows.Forms.Timer.Tick>. W przypadku dziedziczenia z programu <xref:System.Windows.Forms.Timer>można zastąpić tę metodę.  
  
 Podnoszenie zdarzenia wywołuje program obsługi zdarzeń przez delegata. Aby uzyskać więcej informacji, zobacz [Obsługa i](~/docs/standard/events/index.md)wywoływanie zdarzeń.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Podczas zastępowania <see cref="M:System.Windows.Forms.Timer.OnTick(System.EventArgs)" /> w klasie pochodnej upewnij się, że wywoływana jest <see cref="M:System.Windows.Forms.Timer.OnTick(System.EventArgs)" /> metoda klasy bazowej.</para></block>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Timer.Start" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start();" />
      <MemberSignature Language="F#" Value="member this.Start : unit -&gt; unit" Usage="timer.Start " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Uruchamia czasomierz.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Czasomierz można również uruchomić przez ustawienie <xref:System.Windows.Forms.Timer.Enabled%2A> właściwości na. `true`  
  
   
  
## Examples  
 Poniższy przykład kodu implementuje prosty czasomierz interwału, który ustawia alarm co pięć sekund. Gdy wystąpi alarm, <xref:System.Windows.Forms.MessageBox> wyświetlana jest liczba uruchomień alarmu i zostanie wyświetlony komunikat z pytaniem o to, czy czasomierz ma nadal działać.  
  
 [!code-cpp[Classic Timer Example 2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Timer Example 2/CPP/source.cpp#1)]
 [!code-csharp[Classic Timer Example 2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Timer Example 2/CS/source.cs#1)]
 [!code-vb[Classic Timer Example 2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Timer Example 2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Timer.Enabled" />
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Timer.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberSignature Language="F#" Value="member this.Stop : unit -&gt; unit" Usage="timer.Stop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Powoduje zatrzymanie czasomierza.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Możesz również zatrzymać czasomierz, ustawiając <xref:System.Windows.Forms.Timer.Enabled%2A> właściwość na. `false` <xref:System.Windows.Forms.Timer> Obiekt może być włączony i wyłączony wielokrotnie w ramach tej samej sesji aplikacji.  
  
 Wywołanie <xref:System.Windows.Forms.Timer.Start%2A> <xref:System.Windows.Forms.Timer.Stop%2A> po<xref:System.Windows.Forms.Timer> wyłączeniu <xref:System.Windows.Forms.Timer> przez wywołanie spowoduje ponowne uruchomienie przerwanego interwału. <xref:System.Windows.Forms.Timer.Start%2A> <xref:System.Windows.Forms.Timer.Stop%2A> <xref:System.Windows.Forms.Timer.Tick> <xref:System.Windows.Forms.Timer> Jeśli ustawiono dla interwału 5000-milisekundowego i wywołasz około 3000 milisekund, wywołanie spowoduje odczekanie 5000 milisekund przed podniesieniem zdarzenia. <xref:System.Windows.Forms.Timer>  
  
> [!NOTE]
>  Wywołanie zatrzymania na dowolnym <xref:System.Windows.Forms.Timer> w aplikacji Windows Forms może spowodować natychmiastowe przetworzenie komunikatów <xref:System.Windows.Forms.Timer> z innych składników w aplikacji, ponieważ wszystkie <xref:System.Windows.Forms.Timer> składniki działają w głównym wątku aplikacji. Jeśli masz dwa <xref:System.Windows.Forms.Timer> składniki, jeden ustawiony do 700 milisekund i jeden ustawiony na 500 milisekundy, a ty wywołasz <xref:System.Windows.Forms.Timer.Stop%2A> pierwsze <xref:System.Windows.Forms.Timer>, aplikacja może najpierw odebrać wywołanie zwrotne dla drugiego składnika. Jeśli spowoduje to problemy, rozważ użycie <xref:System.Threading.Timer> klasy <xref:System.Threading> w przestrzeni nazw.  
  
   
  
## Examples  
 Poniższy przykład kodu implementuje prosty czasomierz interwału, który ustawia alarm co pięć sekund. Gdy wystąpi alarm, <xref:System.Windows.Forms.MessageBox> wyświetlana jest liczba uruchomień alarmu i zostanie wyświetlony komunikat z pytaniem o to, czy czasomierz ma nadal działać.  
  
 [!code-cpp[Classic Timer Example 2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Timer Example 2/CPP/source.cpp#1)]
 [!code-csharp[Classic Timer Example 2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Timer Example 2/CS/source.cs#1)]
 [!code-vb[Classic Timer Example 2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Timer Example 2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Timer.Enabled" />
      </Docs>
    </Member>
    <Member MemberName="Tag">
      <MemberSignature Language="C#" Value="public object Tag { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Tag" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Timer.Tag" />
      <MemberSignature Language="VB.NET" Value="Public Property Tag As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Tag { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Tag : obj with get, set" Usage="System.Windows.Forms.Timer.Tag" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.Localizable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.ComponentModel.StringConverter))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia dowolny ciąg reprezentujący rodzaj stanu użytkownika.</summary>
        <value>Dowolny ciąg reprezentujący rodzaj stanu użytkownika.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Tick">
      <MemberSignature Language="C#" Value="public event EventHandler Tick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Tick" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Timer.Tick" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Tick As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Tick;" />
      <MemberSignature Language="F#" Value="member this.Tick : EventHandler " Usage="member this.Tick : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po upłynięciu określonego interwału czasomierza i włączeniu czasomierza.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wywołanie metody na klasie z poziomu <xref:System.Windows.Forms.Timer.Tick> zdarzenia może nie zachowywać się zgodnie z oczekiwaniami, ponieważ wyświetlenie okna dialogowego potwierdzenia może spowodować powtarzanie zdarzenia w <xref:System.Windows.Forms.Timer.Tick> systemie Windows. <xref:System.Diagnostics.Debug> <xref:System.Diagnostics.Debug.Assert%2A> Zalecamy, aby zrezygnować z testowania potwierdzeń w tym zdarzeniu i zamiast <xref:System.Diagnostics.Debug.Write%2A>tego <xref:System.Diagnostics.Debug.WriteIf%2A>użyć <xref:System.Diagnostics.Debug.WriteLine%2A>metod, <xref:System.Diagnostics.Debug.WriteLineIf%2A> ,, lub.  
  
 Aby uzyskać więcej informacji na temat obsługi zdarzeń, zobacz [Obsługa i](~/docs/standard/events/index.md)wywoływanie zdarzeń.  
  
   
  
## Examples  
 Poniższy przykład kodu implementuje prosty czasomierz interwału, który ustawia alarm co pięć sekund. Gdy wystąpi alarm, <xref:System.Windows.Forms.MessageBox> wyświetlana jest liczba uruchomień alarmu i zostanie wyświetlony komunikat z pytaniem o to, czy czasomierz ma nadal działać.  
  
 [!code-cpp[Classic Timer Example 2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Timer Example 2/CPP/source.cpp#1)]
 [!code-csharp[Classic Timer Example 2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Timer Example 2/CS/source.cs#1)]
 [!code-vb[Classic Timer Example 2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Timer Example 2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Timer.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="timer.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca ciąg, który reprezentuje <see cref="T:System.Windows.Forms.Timer" />.</summary>
        <returns>Ciąg, który reprezentuje bieżący <see cref="T:System.Windows.Forms.Timer" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda zwraca ciąg, który zawiera wartość <xref:System.Windows.Forms.Timer.Interval%2A> właściwości. <xref:System.Windows.Forms.Timer.ToString%2A>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
