<Type Name="Timer" FullName="System.Windows.Forms.Timer">
  <Metadata><Meta Name="ms.openlocfilehash" Value="ac20e9673f130c36174d5220f53ff45975929dc7" /><Meta Name="ms.sourcegitcommit" Value="756d085f27705e86604f1bba5f2086ee23761acf" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="01/30/2019" /><Meta Name="ms.locfileid" Value="55321451" /></Metadata><TypeSignature Language="C#" Value="public class Timer : System.ComponentModel.Component" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit Timer extends System.ComponentModel.Component" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.Timer" />
  <TypeSignature Language="VB.NET" Value="Public Class Timer&#xA;Inherits Component" />
  <TypeSignature Language="C++ CLI" Value="public ref class Timer : System::ComponentModel::Component" />
  <TypeSignature Language="F#" Value="type Timer = class&#xA;    inherit Component" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("Tick")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("Interval")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.ToolboxItemFilter("System.Windows.Forms")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Implementuje czasomierza, który wywołuje zdarzenie odstępach czasu zdefiniowanych przez użytkownika. Ten czasomierz została zoptymalizowana do użytku w aplikacjach Windows Forms i w oknie mogą być używane.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Element <xref:System.Windows.Forms.Timer> jest używany, aby wywołać zdarzenie w odstępach czasu zdefiniowanych przez użytkownika. Ten czasomierz Windows jest przeznaczony dla jednowątkowe środowisko, w którym wątków interfejsu użytkownika są używane do wykonywania przetwarzania. Wymaga czy kod użytkownika ma pompy komunikatów interfejsu użytkownika dostępnych i zawsze działać z tym samym wątku lub przeprowadzanie marshalingu wywołań na inny wątek.  
  
 Jeśli jest używany ten czasomierz, <xref:System.Windows.Forms.Timer.Tick> zdarzeń, które można wykonać operacji sondowania lub, aby wyświetlić ekran powitalny w określonym przedziale czasu. Zawsze, gdy <xref:System.Windows.Forms.Timer.Enabled%2A> właściwość jest ustawiona na `true` i <xref:System.Windows.Forms.Timer.Interval%2A> właściwość jest większa niż zero, <xref:System.Windows.Forms.Timer.Tick> zdarzenie jest zgłaszane w odstępach czasu, na podstawie <xref:System.Windows.Forms.Timer.Interval%2A> ustawienie właściwości.  
  
 Ta klasa dostarcza metody, aby ustawić interwał i uruchomić i zatrzymać czasomierz.  
  
> [!NOTE]
>  Składnika Timer formularzy Windows jest jednowątkowym i jest ograniczona z dokładnością do milisekund 55. Jeśli potrzebujesz wielowątkowe czasomierz o większej dokładności użyć <xref:System.Timers.Timer> klasy w <xref:System.Timers> przestrzeni nazw.  
  
   
  
## Examples  
 Poniższy przykład implementuje timer proste interwału, który ustawia wyłączyć alarm co pięć sekund. W przypadku alarmu <xref:System.Windows.Forms.MessageBox> Wyświetla liczbę razy alarmu została uruchomiona i wyświetli monit dotyczące tego, czy czasomierz powinny nadal działać.  
  
 [!code-cpp[Classic Timer Example 2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Timer Example 2/CPP/source.cpp#1)]
 [!code-csharp[Classic Timer Example 2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Timer Example 2/CS/source.cs#1)]
 [!code-vb[Classic Timer Example 2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Timer Example 2/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Forms.Timer" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Timer.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Forms.Timer" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Po utworzeniu nowego czasomierza jest wyłączony; oznacza to, że <xref:System.Windows.Forms.Timer.Enabled%2A> ustawiono `false`. Aby włączyć czasomierza, należy wywołać <xref:System.Windows.Forms.Timer.Start%2A> metody lub zestawu <xref:System.Windows.Forms.Timer.Enabled%2A> do `true`.  
  
 Jeśli czasomierza jest wyłączona, a licznik czasu jest poza zakresem, czasomierz zostanie usunięte po wystąpieniu wyrzucania elementów bezużytecznych. Jeśli zegar jest włączone, nawet jeśli jest poza zakresem, go nie podlega wyrzucania elementów bezużytecznych.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Timer.Enabled" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public Timer (System.ComponentModel.IContainer container);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.ComponentModel.IContainer container) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Timer.#ctor(System.ComponentModel.IContainer)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (container As IContainer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; Timer(System::ComponentModel::IContainer ^ container);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.Timer : System.ComponentModel.IContainer -&gt; System.Windows.Forms.Timer" Usage="new System.Windows.Forms.Timer container" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="container" Type="System.ComponentModel.IContainer" />
      </Parameters>
      <Docs>
        <param name="container"><see cref="T:System.ComponentModel.IContainer" /> Reprezentujący kontener dla czasomierza.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Forms.Timer" /> klasy wraz z określonego kontenera.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.Timer> Konstruktor pozwala kojarzyć <xref:System.Windows.Forms.Timer> ze wszystkimi <xref:System.ComponentModel.Container> obiektu. Kojarząc <xref:System.Windows.Forms.Timer> podobny do powyższego, przekazuje kontrolę nad okresem istnienia <xref:System.Windows.Forms.Timer> do <xref:System.ComponentModel.Container>. Może to być przydatne, jeśli korzystają z szeregu składników w aplikacji i chcesz do usuwania wszystkich z nich jednocześnie. Na przykład w przypadku skojarzenia <xref:System.Windows.Forms.ToolTip>, <xref:System.Windows.Forms.ImageList>, a <xref:System.Windows.Forms.Timer> z <xref:System.ComponentModel.Container>, wywoływania <xref:System.ComponentModel.Container.Dispose%2A> na <xref:System.ComponentModel.Container> spowoduje to wymuszenie usunięcia wszystkich tych składników, jak również.  
  
 Po utworzeniu nowego czasomierza jest wyłączony; oznacza to, że <xref:System.Windows.Forms.Timer.Enabled%2A> ustawiono `false`. Aby włączyć czasomierza, należy wywołać <xref:System.Windows.Forms.Timer.Start%2A> metody lub zestawu <xref:System.Windows.Forms.Timer.Enabled%2A> do `true`.  
  
 To wystąpienie będzie istnieć do momentu jego kontenera zwalnia go do wyrzucania elementów bezużytecznych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Timer.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="timer.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><see langword="true" /> Aby zwolnić zasoby zarządzane i niezarządzane. <see langword="false" /> Aby zwolnić tylko niezarządzane zasoby.</param>
        <summary>Usuwa zasoby, innym niż, użycie pamięci przez czasomierz.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wywołaj <xref:System.Windows.Forms.Timer.Dispose%2A> po zakończeniu, za pomocą czasomierza. <xref:System.Windows.Forms.Timer.Dispose%2A> Metoda pozostawia czasomierza w stanie uniemożliwiającym jego używanie. Po wywołaniu metody <xref:System.Windows.Forms.Timer.Dispose%2A>, trzeba zwolnić wszystkie odwołania do czasomierza, dzięki czemu można odzyskać pamięć zajmowaną przez jej przez wyrzucanie elementów bezużytecznych.  
  
> [!NOTE]
>  Zawsze wywołuj <xref:System.Windows.Forms.Timer.Dispose%2A> przed publikacją swoje ostatnie odwołanie do czasomierza. W przeciwnym razie zasoby, których używa czasomierza nie zostanie zwolniona, dopóki wyrzucania elementów bezużytecznych wywołuje destruktor obiektu czasomierza.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public virtual bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Timer.Enabled" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property Enabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool Enabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Enabled : bool with get, set" Usage="System.Windows.Forms.Timer.Enabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia informację, czy czasomierz jest uruchomiona.</summary>
        <value><see langword="true" /> Jeśli zegar jest obecnie włączona; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Czasomierz nie podlega wyrzucania elementów bezużytecznych gdy wartość jest równa `true`.  
  
 Wywoływanie <xref:System.Windows.Forms.Timer.Start%2A> metody jest taka sama jak ustawienie <xref:System.Windows.Forms.Timer.Enabled%2A> do `true`. Podobnie wywołanie <xref:System.Windows.Forms.Timer.Stop%2A> metody jest taka sama jak ustawienie <xref:System.Windows.Forms.Timer.Enabled%2A> do `false`.  
  
   
  
## Examples  
 Poniższy przykład implementuje timer proste interwału, który ustawia wyłączyć alarm co pięć sekund. W przypadku alarmu <xref:System.Windows.Forms.MessageBox> Wyświetla liczbę razy alarmu została uruchomiona i monituje użytkownika, czy czasomierz powinny nadal działać.  
  
 [!code-cpp[Classic Timer Example 2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Timer Example 2/CPP/source.cpp#1)]
 [!code-csharp[Classic Timer Example 2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Timer Example 2/CS/source.cs#1)]
 [!code-vb[Classic Timer Example 2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Timer Example 2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Interval">
      <MemberSignature Language="C#" Value="public int Interval { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Interval" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Timer.Interval" />
      <MemberSignature Language="VB.NET" Value="Public Property Interval As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Interval { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Interval : int with get, set" Usage="System.Windows.Forms.Timer.Interval" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(100)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia czas (w milisekundach), zanim <see cref="E:System.Windows.Forms.Timer.Tick" /> zdarzenie jest zgłaszane w względem ostatniego wystąpienia <see cref="E:System.Windows.Forms.Timer.Tick" /> zdarzeń.</summary>
        <value><see cref="T:System.Int32" /> Określającą liczbę milisekund przed <see cref="E:System.Windows.Forms.Timer.Tick" /> zdarzenie jest zgłaszane w względem ostatniego wystąpienia <see cref="E:System.Windows.Forms.Timer.Tick" /> zdarzeń. Wartość nie może być mniejsza niż jeden.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uzyskać liczbę sekund dla interwału, Podziel tę liczbę przez 1000.  
  
   
  
## Examples  
 Poniższy przykładowy kod implementuje timer proste interwału, który ustawia wyłączyć alarm co pięć sekund. W przypadku alarmu <xref:System.Windows.Forms.MessageBox> Wyświetla liczbę razy alarmu została uruchomiona i monituje użytkownika, czy czasomierz powinny nadal działać.  
  
 [!code-cpp[Classic Timer Example 2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Timer Example 2/CPP/source.cpp#1)]
 [!code-csharp[Classic Timer Example 2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Timer Example 2/CS/source.cs#1)]
 [!code-vb[Classic Timer Example 2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Timer Example 2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnTick">
      <MemberSignature Language="C#" Value="protected virtual void OnTick (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnTick(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Timer.OnTick(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnTick (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnTick(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnTick : EventArgs -&gt; unit&#xA;override this.OnTick : EventArgs -&gt; unit" Usage="timer.OnTick e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e"><see cref="T:System.EventArgs" /> Zawierający dane zdarzenia. Jest to zawsze <see cref="F:System.EventArgs.Empty" />.</param>
        <summary>Wywołuje <see cref="E:System.Windows.Forms.Timer.Tick" /> zdarzeń.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda jest wywoływana dla każdy takt czasomierza. Wywołuje wszystkie metody, które są dodawane przy użyciu <xref:System.Windows.Forms.Timer.Tick>. Jeśli są dziedziczone z <xref:System.Windows.Forms.Timer>, mogą przesłaniać tę metodę.  
  
 Podnoszenie zdarzenia wywołuje program obsługi zdarzeń przez delegata. Aby uzyskać więcej informacji, zobacz [Handling and Raising Events](~/docs/standard/events/index.md).  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Podczas zastępowania <see cref="M:System.Windows.Forms.Timer.OnTick(System.EventArgs)" /> w klasie pochodnej, upewnij się, że wywołanie klasy bazowej <see cref="M:System.Windows.Forms.Timer.OnTick(System.EventArgs)" /> metody.</para></block>
      </Docs>
    </Member>
    <Member MemberName="Start">
      <MemberSignature Language="C#" Value="public void Start ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Start() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Timer.Start" />
      <MemberSignature Language="VB.NET" Value="Public Sub Start ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Start();" />
      <MemberSignature Language="F#" Value="member this.Start : unit -&gt; unit" Usage="timer.Start " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Uruchamia czasomierz.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Możesz także uruchomić przez ustawienie czasomierza <xref:System.Windows.Forms.Timer.Enabled%2A> właściwość `true`.  
  
   
  
## Examples  
 Poniższy przykładowy kod implementuje timer proste interwału, który ustawia wyłączyć alarm co pięć sekund. W przypadku alarmu <xref:System.Windows.Forms.MessageBox> Wyświetla liczbę razy alarmu została uruchomiona i monituje użytkownika, czy czasomierz powinny nadal działać.  
  
 [!code-cpp[Classic Timer Example 2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Timer Example 2/CPP/source.cpp#1)]
 [!code-csharp[Classic Timer Example 2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Timer Example 2/CS/source.cs#1)]
 [!code-vb[Classic Timer Example 2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Timer Example 2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Timer.Enabled" />
      </Docs>
    </Member>
    <Member MemberName="Stop">
      <MemberSignature Language="C#" Value="public void Stop ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Stop() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Timer.Stop" />
      <MemberSignature Language="VB.NET" Value="Public Sub Stop ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Stop();" />
      <MemberSignature Language="F#" Value="member this.Stop : unit -&gt; unit" Usage="timer.Stop " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zatrzymuje czasomierz.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można je również zatrzymać czasomierz, ustawiając <xref:System.Windows.Forms.Timer.Enabled%2A> właściwość `false`. Element <xref:System.Windows.Forms.Timer> obiektu może być włączone i wyłączone wielokrotnie w ramach tej samej sesji aplikacji.  
  
 Wywoływanie <xref:System.Windows.Forms.Timer.Start%2A> po wyłączeniu <xref:System.Windows.Forms.Timer> przez wywołanie metody <xref:System.Windows.Forms.Timer.Stop%2A> spowoduje, że <xref:System.Windows.Forms.Timer> ponownego uruchomienia interwał przerwane. Jeśli Twoje <xref:System.Windows.Forms.Timer> ustawiono interwał 5000 milisekund, można wywołać <xref:System.Windows.Forms.Timer.Stop%2A> w około 3000 milisekund, wywołanie <xref:System.Windows.Forms.Timer.Start%2A> spowoduje, że <xref:System.Windows.Forms.Timer> oczekiwania 5000 ms przed zgłoszeniem <xref:System.Windows.Forms.Timer.Tick> zdarzeń.  
  
> [!NOTE]
>  Wywoływanie zatrzymania na dowolnym <xref:System.Windows.Forms.Timer> w formularzach Windows aplikacji może spowodować wiadomości z innych <xref:System.Windows.Forms.Timer> składników w aplikacji, które mają być przetwarzane od razu, ponieważ wszystkie <xref:System.Windows.Forms.Timer> składniki działają na wątku głównego aplikacji. Jeśli masz dwa <xref:System.Windows.Forms.Timer> składników, jedna wartość 700 milisekund, a jeden zestaw do 500 milisekund i wywołania <xref:System.Windows.Forms.Timer.Stop%2A> pierwszego <xref:System.Windows.Forms.Timer>, aplikacji może zostać wyświetlony pierwsze wywołanie zwrotne zdarzeń dla drugiego składnika. Jeśli okaże się to problemem, należy rozważyć użycie <xref:System.Threading.Timer> klasy w <xref:System.Threading> przestrzeni nazw zamiast tego.  
  
   
  
## Examples  
 Poniższy przykładowy kod implementuje timer proste interwału, który ustawia wyłączyć alarm co pięć sekund. W przypadku alarmu <xref:System.Windows.Forms.MessageBox> Wyświetla liczbę razy alarmu została uruchomiona i monituje użytkownika, czy czasomierz powinny nadal działać.  
  
 [!code-cpp[Classic Timer Example 2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Timer Example 2/CPP/source.cpp#1)]
 [!code-csharp[Classic Timer Example 2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Timer Example 2/CS/source.cs#1)]
 [!code-vb[Classic Timer Example 2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Timer Example 2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.Timer.Enabled" />
      </Docs>
    </Member>
    <Member MemberName="Tag">
      <MemberSignature Language="C#" Value="public object Tag { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Tag" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Timer.Tag" />
      <MemberSignature Language="VB.NET" Value="Public Property Tag As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Tag { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Tag : obj with get, set" Usage="System.Windows.Forms.Timer.Tag" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Localizable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.ComponentModel.StringConverter))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia dowolny ciąg reprezentujący pewien rodzaj stanu użytkownika.</summary>
        <value>Dowolny ciąg reprezentujący pewien rodzaj stanu użytkownika.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Tick">
      <MemberSignature Language="C#" Value="public event EventHandler Tick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Tick" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.Timer.Tick" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Tick As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Tick;" />
      <MemberSignature Language="F#" Value="member this.Tick : EventHandler " Usage="member this.Tick : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po upływie interwału czasomierza określonego i czasomierza jest włączona.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wywoływanie <xref:System.Diagnostics.Debug.Assert%2A> metody <xref:System.Diagnostics.Debug> klasy z poziomu <xref:System.Windows.Forms.Timer.Tick> zdarzeń mogą nie zachowywać się zgodnie z oczekiwaniami, jako wyświetlanie okna dialogowego potwierdzenia okno może spowodować, że Windows podnieść <xref:System.Windows.Forms.Timer.Tick> zdarzeń wielokrotnie. Firma Microsoft zaleca powstrzymanie się od testowania potwierdzenia w ramach tego zdarzenia i użyj <xref:System.Diagnostics.Debug.Write%2A>, <xref:System.Diagnostics.Debug.WriteIf%2A>, <xref:System.Diagnostics.Debug.WriteLine%2A>, lub <xref:System.Diagnostics.Debug.WriteLineIf%2A> metody zamiast tego.  
  
 Aby uzyskać więcej informacji na temat obsługi zdarzeń, zobacz [Handling and Raising Events](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 Poniższy przykładowy kod implementuje timer proste interwału, który ustawia wyłączyć alarm co pięć sekund. W przypadku alarmu <xref:System.Windows.Forms.MessageBox> Wyświetla liczbę razy alarmu została uruchomiona i monituje użytkownika, czy czasomierz powinny nadal działać.  
  
 [!code-cpp[Classic Timer Example 2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Timer Example 2/CPP/source.cpp#1)]
 [!code-csharp[Classic Timer Example 2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Timer Example 2/CS/source.cs#1)]
 [!code-vb[Classic Timer Example 2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Timer Example 2/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Timer.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="timer.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca ciąg, który reprezentuje <see cref="T:System.Windows.Forms.Timer" />.</summary>
        <returns>Ciąg reprezentujący bieżącą <see cref="T:System.Windows.Forms.Timer" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.Timer.ToString%2A> Metoda zwraca ciąg, który zawiera wartość <xref:System.Windows.Forms.Timer.Interval%2A> właściwości.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>