<Type Name="CheckBox" FullName="System.Windows.Forms.CheckBox">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d0737adcc6f8f6266a3e75809cbd02b6dd945eb5" />
    <Meta Name="ms.sourcegitcommit" Value="d877ae76e9e11799bf919379507239e2c4072742" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="08/09/2018" />
    <Meta Name="ms.locfileid" Value="39890919" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class CheckBox : System.Windows.Forms.ButtonBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CheckBox extends System.Windows.Forms.ButtonBase" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.CheckBox" />
  <TypeSignature Language="VB.NET" Value="Public Class CheckBox&#xA;Inherits ButtonBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class CheckBox : System::Windows::Forms::ButtonBase" />
  <TypeSignature Language="F#" Value="type CheckBox = class&#xA;    inherit ButtonBase" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Forms.ButtonBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
      <AttributeName>System.ComponentModel.DefaultBindingProperty("CheckState")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
      <AttributeName>System.ComponentModel.DefaultEvent("CheckedChanged")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
      <AttributeName>System.ComponentModel.DefaultProperty("Checked")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
      <AttributeName>System.ComponentModel.ToolboxItem("System.Windows.Forms.Design.AutoSizeToolboxItem,System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
      <AttributeName>System.Runtime.InteropServices.ClassInterface</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
      <AttributeName>System.ComponentModel.ToolboxItem("System.Windows.Forms.Design.AutoSizeToolboxItem,System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
      <AttributeName>System.Runtime.InteropServices.ClassInterface(System.Runtime.InteropServices.ClassInterfaceType.AutoDispatch)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Reprezentuje Windows <see cref="T:System.Windows.Forms.CheckBox" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Windows.Forms.CheckBox> można nadać użytkownikowi opcji, takich jak PRAWDA/FAŁSZ lub tak/nie. <xref:System.Windows.Forms.CheckBox> Formant może wyświetlać obraz lub tekst lub oba.  
  
 <xref:System.Windows.Forms.CheckBox> i <xref:System.Windows.Forms.RadioButton> formanty mają podobną funkcję: umożliwiają one użytkownikowi na wybranie z listy opcji. <xref:System.Windows.Forms.CheckBox> funkcje kontroli pozwalają użytkownika, wybierz kombinację opcji. Z kolei <xref:System.Windows.Forms.RadioButton> formanty umożliwiają użytkownikom wybór spośród wzajemnie wykluczających się opcji.  
  
 <xref:System.Windows.Forms.CheckBox.Appearance%2A> Właściwość określa, czy <xref:System.Windows.Forms.CheckBox> pojawia się jako typowej <xref:System.Windows.Forms.CheckBox> lub jako przycisk.  
  
 <xref:System.Windows.Forms.CheckBox.ThreeState%2A> Właściwość określa, czy kontrolka obsługuje dwa czy trzy stany. Użyj <xref:System.Windows.Forms.CheckBox.Checked%2A> właściwości do pobierania lub ustawiania wartości dwoma stanami <xref:System.Windows.Forms.CheckBox> kontroli i używać <xref:System.Windows.Forms.CheckBox.CheckState%2A> właściwości do pobierania lub ustawiania wartości trójstanowych <xref:System.Windows.Forms.CheckBox> kontroli.  
  
> [!NOTE]
>  Jeśli <xref:System.Windows.Forms.CheckBox.ThreeState%2A> właściwość jest ustawiona na `true`, <xref:System.Windows.Forms.CheckBox.Checked%2A> zwróci właściwość `true` stanu zaznaczony lub nieokreślony.  
  
 <xref:System.Windows.Forms.ButtonBase.FlatStyle%2A> Określa właściwość, styl i wygląd formantu. Jeśli <xref:System.Windows.Forms.ButtonBase.FlatStyle%2A> właściwość jest ustawiona na <xref:System.Windows.Forms.FlatStyle.System?displayProperty=nameWithType>, system operacyjny użytkownika określa wygląd formantu.  
  
> [!NOTE]
>  Gdy <xref:System.Windows.Forms.ButtonBase.FlatStyle%2A> właściwość jest ustawiona na <xref:System.Windows.Forms.FlatStyle.System?displayProperty=nameWithType>, <xref:System.Windows.Forms.CheckBox.CheckAlign%2A> właściwość jest ignorowana, a kontrolka jest wyświetlana przy użyciu <xref:System.Drawing.ContentAlignment.MiddleLeft?displayProperty=nameWithType> lub <xref:System.Drawing.ContentAlignment.MiddleRight?displayProperty=nameWithType> wyrównania. Jeśli <xref:System.Windows.Forms.CheckBox.CheckAlign%2A> właściwość jest ustawiona na jeden z odpowiednie wyrównanie, kontrolki jest wyświetlana przy użyciu <xref:System.Drawing.ContentAlignment.MiddleRight?displayProperty=nameWithType> wyrównanie; w przeciwnym razie jest wyświetlana, przy użyciu <xref:System.Drawing.ContentAlignment.MiddleLeft?displayProperty=nameWithType> wyrównania.  
  
 Poniżej opisano stanie nieokreślonym: masz <xref:System.Windows.Forms.CheckBox> Określa, czy tekst zaznaczony w <xref:System.Windows.Forms.RichTextBox> jest pogrubiony. Po wybraniu tekstu, możesz kliknąć pozycję <xref:System.Windows.Forms.CheckBox> na pogrubioną zaznaczenia. Podobnie, po wybraniu jakiś tekst <xref:System.Windows.Forms.CheckBox> Wyświetla informację, czy zaznaczony tekst jest pogrubiony. Jeśli zaznaczonego tekstu zawiera tekst, który jest pogrubiony i normalne, <xref:System.Windows.Forms.CheckBox> będzie miał stan nieokreślony.  
  
   
  
## Examples  
 Poniższy przykład kodu tworzy i inicjuje <xref:System.Windows.Forms.CheckBox>, zapewnia jej wyglądu przycisku przełącznika, ustawia <xref:System.Windows.Forms.CheckBox.AutoCheck%2A> do `false`i dodaje go do <xref:System.Windows.Forms.Form>.  
  
 [!code-cpp[Classic CheckBox.CheckBox Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic CheckBox.CheckBox Example/CPP/source.cpp#1)]
 [!code-csharp[Classic CheckBox.CheckBox Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic CheckBox.CheckBox Example/CS/source.cs#1)]
 [!code-vb[Classic CheckBox.CheckBox Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic CheckBox.CheckBox Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.ButtonBase" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public CheckBox ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CheckBox.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; CheckBox();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Forms.CheckBox" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślnie, gdy nowy <xref:System.Windows.Forms.CheckBox> jest tworzone wystąpienie <xref:System.Windows.Forms.CheckBox.AutoCheck%2A> jest ustawiona na `true`, <xref:System.Windows.Forms.CheckBox.Checked%2A> ustawiono `false`, i <xref:System.Windows.Forms.CheckBox.Appearance%2A> jest równa <xref:System.Windows.Forms.Appearance.Normal>.  
  
   
  
## Examples  
 Poniższy przykład kodu tworzy i inicjuje <xref:System.Windows.Forms.CheckBox>, zapewnia jej wyglądu przycisku przełącznika, ustawia <xref:System.Windows.Forms.CheckBox.AutoCheck%2A> do `false`i dodaje go do <xref:System.Windows.Forms.Form>.  
  
 [!code-cpp[Classic CheckBox.CheckBox Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic CheckBox.CheckBox Example/CPP/source.cpp#1)]
 [!code-csharp[Classic CheckBox.CheckBox Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic CheckBox.CheckBox Example/CS/source.cs#1)]
 [!code-vb[Classic CheckBox.CheckBox Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic CheckBox.CheckBox Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.CheckBox" />
      </Docs>
    </Member>
    <Member MemberName="Appearance">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Appearance Appearance { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.Appearance Appearance" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.CheckBox.Appearance" />
      <MemberSignature Language="VB.NET" Value="Public Property Appearance As Appearance" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Appearance Appearance { System::Windows::Forms::Appearance get(); void set(System::Windows::Forms::Appearance value); };" />
      <MemberSignature Language="F#" Value="member this.Appearance : System.Windows.Forms.Appearance with get, set" Usage="System.Windows.Forms.CheckBox.Appearance" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Appearance</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość, która określa wygląd <see cref="T:System.Windows.Forms.CheckBox" /> kontroli.</summary>
        <value>Jedną z <see cref="T:System.Windows.Forms.Appearance" /> wartości. Wartość domyślna to <see cref="F:System.Windows.Forms.Appearance.Normal" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli <xref:System.Windows.Forms.CheckBox.Appearance%2A> wartość jest równa <xref:System.Windows.Forms.Appearance.Normal>, <xref:System.Windows.Forms.CheckBox> typowe wygląd. Jeśli wartość jest równa `Button`, <xref:System.Windows.Forms.CheckBox> wygląda przycisku przełącznika, który może być przełączane do w górę lub w dół stanu.  
  
   
  
## Examples  
 Poniższy przykład kodu tworzy i inicjuje <xref:System.Windows.Forms.CheckBox>, zapewnia jej wyglądu przycisku przełącznika, ustawia <xref:System.Windows.Forms.CheckBox.AutoCheck%2A> do `false`i dodaje go do <xref:System.Windows.Forms.Form>.  
  
 [!code-cpp[Classic CheckBox.CheckBox Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic CheckBox.CheckBox Example/CPP/source.cpp#1)]
 [!code-csharp[Classic CheckBox.CheckBox Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic CheckBox.CheckBox Example/CS/source.cs#1)]
 [!code-vb[Classic CheckBox.CheckBox Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic CheckBox.CheckBox Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Wartość przypisana nie jest jednym z <see cref="T:System.Windows.Forms.Appearance" /> wartości.</exception>
        <altmember cref="T:System.Windows.Forms.Appearance" />
      </Docs>
    </Member>
    <Member MemberName="AppearanceChanged">
      <MemberSignature Language="C#" Value="public event EventHandler AppearanceChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler AppearanceChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.CheckBox.AppearanceChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event AppearanceChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ AppearanceChanged;" />
      <MemberSignature Language="F#" Value="member this.AppearanceChanged : EventHandler " Usage="member this.AppearanceChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy wartość <see cref="P:System.Windows.Forms.CheckBox.Appearance" /> zmiany właściwości.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uzyskać więcej informacji na temat obsługi zdarzeń, zobacz [Handling and Raising Events](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje użycie tego elementu członkowskiego. W tym przykładzie program obsługi zdarzeń raporty w momencie wystąpienia <xref:System.Windows.Forms.CheckBox.AppearanceChanged> zdarzeń. Ten raport pomaga, aby dowiedzieć się, gdy zdarzenie występuje i mogą pomóc w debugowaniu. Aby zgłosić na wiele zdarzeń lub zdarzeń, które często występują, rozważ zastąpienie <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> z <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> lub dołączane wiadomość w wielowierszowym <xref:System.Windows.Forms.TextBox>.  
  
 Aby uruchomić przykładowy kod, wkleić go do projektu, który zawiera wystąpienie typu <xref:System.Windows.Forms.CheckBox> o nazwie `CheckBox1`. Upewnij się, że program obsługi zdarzeń jest skojarzony z <xref:System.Windows.Forms.CheckBox.AppearanceChanged> zdarzeń.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#139](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#139)]
 [!code-vb[System.Windows.Forms.EventExamples#139](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#139)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.CheckBox.Appearance" />
      </Docs>
    </Member>
    <Member MemberName="AutoCheck">
      <MemberSignature Language="C#" Value="public bool AutoCheck { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoCheck" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.CheckBox.AutoCheck" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoCheck As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoCheck { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoCheck : bool with get, set" Usage="System.Windows.Forms.CheckBox.AutoCheck" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawić wartość wskazującą czy <see cref="P:System.Windows.Forms.CheckBox.Checked" /> lub <see cref="P:System.Windows.Forms.CheckBox.CheckState" /> wartości i <see cref="T:System.Windows.Forms.CheckBox" />jego wygląd są automatycznie zmieniane po <see cref="T:System.Windows.Forms.CheckBox" /> kliknięciu.</summary>
        <value>
          <see langword="true" /> Jeśli <see cref="P:System.Windows.Forms.CheckBox.Checked" /> wartość lub <see cref="P:System.Windows.Forms.CheckBox.CheckState" /> wartość i wygląd kontrolki są automatycznie zmieniane na <see cref="E:System.Windows.Forms.Control.Click" /> zdarzenia; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli <xref:System.Windows.Forms.CheckBox.AutoCheck%2A> jest ustawiona na wartość FAŁSZ, należy dodać kod, aby zaktualizować <xref:System.Windows.Forms.CheckBox.Checked%2A> lub <xref:System.Windows.Forms.CheckBox.CheckState%2A> wartości w <xref:System.Windows.Forms.Control.Click> programu obsługi zdarzeń.  
  
   
  
## Examples  
 Poniższy przykład kodu tworzy i inicjuje <xref:System.Windows.Forms.CheckBox>, zapewnia jej wyglądu przycisku przełącznika, ustawia <xref:System.Windows.Forms.CheckBox.AutoCheck%2A> do `false`i dodaje go do <xref:System.Windows.Forms.Form>.  
  
 [!code-cpp[Classic CheckBox.CheckBox Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic CheckBox.CheckBox Example/CPP/source.cpp#1)]
 [!code-csharp[Classic CheckBox.CheckBox Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic CheckBox.CheckBox Example/CS/source.cs#1)]
 [!code-vb[Classic CheckBox.CheckBox Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic CheckBox.CheckBox Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckAlign">
      <MemberSignature Language="C#" Value="public System.Drawing.ContentAlignment CheckAlign { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.ContentAlignment CheckAlign" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.CheckBox.CheckAlign" />
      <MemberSignature Language="VB.NET" Value="Public Property CheckAlign As ContentAlignment" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::ContentAlignment CheckAlign { System::Drawing::ContentAlignment get(); void set(System::Drawing::ContentAlignment value); };" />
      <MemberSignature Language="F#" Value="member this.CheckAlign : System.Drawing.ContentAlignment with get, set" Usage="System.Windows.Forms.CheckBox.CheckAlign" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.DefaultValue</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.ContentAlignment</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub Ustawia wyrównanie poziome i pionowe znacznik wyboru na <see cref="T:System.Windows.Forms.CheckBox" /> kontroli.</summary>
        <value>Jedną z <see cref="T:System.Drawing.ContentAlignment" /> wartości. Wartość domyślna to <see langword="MiddleLeft" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu wyświetla wartości trzy właściwości w etykiecie. <xref:System.Windows.Forms.CheckBox.ThreeState%2A> Właściwość przełącza między `true` i `false` ze zmieniającymi się kliknięcia formantu i <xref:System.Windows.Forms.CheckBox.CheckAlign%2A> przełącza między `MiddleRight` i `MiddleLeft` wartości <xref:System.Drawing.ContentAlignment>. W tym przykładzie pokazano, jak zmienić wartości właściwości jako <xref:System.Windows.Forms.CheckBox.ThreeState%2A> zaznaczono opcję zmiany właściwości i kontroli. W tym przykładzie wymaga, aby <xref:System.Windows.Forms.CheckBox>, <xref:System.Windows.Forms.Label> i <xref:System.Windows.Forms.Button> wszystkie zostały utworzone w formularzu i etykieta jest wystarczająco duża, aby wyświetlić trzy wiersze tekstu, a także odwołania do <xref:System.Drawing?displayProperty=nameWithType> przestrzeni nazw. Ten kod powinien zostać wywołany <xref:System.Windows.Forms.Control.Click> programu obsługi zdarzeń kontrolki.  
  
 [!code-cpp[Classic CheckBox.CheckAlign Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic CheckBox.CheckAlign Example/CPP/source.cpp#1)]
 [!code-csharp[Classic CheckBox.CheckAlign Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic CheckBox.CheckAlign Example/CS/source.cs#1)]
 [!code-vb[Classic CheckBox.CheckAlign Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic CheckBox.CheckAlign Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Wartość przypisana nie jest jednym z <see cref="T:System.Drawing.ContentAlignment" /> wartości wyliczenia.</exception>
        <altmember cref="P:System.Windows.Forms.ButtonBase.TextAlign" />
        <altmember cref="T:System.Drawing.ContentAlignment" />
      </Docs>
    </Member>
    <Member MemberName="Checked">
      <MemberSignature Language="C#" Value="public bool Checked { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Checked" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.CheckBox.Checked" />
      <MemberSignature Language="VB.NET" Value="Public Property Checked As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Checked { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Checked : bool with get, set" Usage="System.Windows.Forms.CheckBox.Checked" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.SettingsBindable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.All)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawić wartość wskazującą czy <see cref="T:System.Windows.Forms.CheckBox" /> jest w stanie zaznaczenia.</summary>
        <value>
          <see langword="true" /> Jeśli <see cref="T:System.Windows.Forms.CheckBox" /> znajduje się w zaznaczonego stanu; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="false" />.  
  
 <block subset="none" type="note"><para> Jeśli <see cref="P:System.Windows.Forms.CheckBox.ThreeState" /> właściwość jest ustawiona na <see langword="true" />, <see cref="P:System.Windows.Forms.CheckBox.Checked" /> zwróci właściwość <see langword="true" /> dla dowolnego <see langword="Checked" /> lub <see langword="Indeterminate" /><see cref="P:System.Windows.Forms.CheckBox.CheckState" />.  </para></block></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli wartość to `true`, <xref:System.Windows.Forms.CheckBox> części kontrolki wyświetla znacznik wyboru. Jeśli <xref:System.Windows.Forms.CheckBox.Appearance%2A> właściwość jest ustawiona na `Button`, formant pojawi się obniżone, gdy <xref:System.Windows.Forms.CheckBox.Checked%2A> jest `true` i wywoływane, takich jak standardowy przycisk, kiedy `false`.  
  
   
  
## Examples  
 Poniższy przykład kodu wyświetla wartości trzy właściwości w etykiecie. <xref:System.Windows.Forms.CheckBox.ThreeState%2A> Właściwość przełącza między `true` i `false` ze zmieniającymi się kliknięcia formantu i <xref:System.Windows.Forms.CheckBox.CheckAlign%2A> przełącza między <xref:System.Drawing.ContentAlignment> wartość `MiddleRight` i `MiddleLeft`. W tym przykładzie pokazano, jak zmienić wartości właściwości jako <xref:System.Windows.Forms.CheckBox.ThreeState%2A> zaznaczono opcję zmiany właściwości i kontroli. W tym przykładzie wymaga, aby <xref:System.Windows.Forms.CheckBox>, <xref:System.Windows.Forms.Label> i <xref:System.Windows.Forms.Button> wszystkie zostały utworzone w formularzu i etykieta jest wystarczająco duża, aby wyświetlić trzy wiersze tekstu, a także odwołania do <xref:System.Drawing?displayProperty=nameWithType> przestrzeni nazw. Ten kod powinien zostać wywołany <xref:System.Windows.Forms.Control.Click> programu obsługi zdarzeń kontrolki.  
  
 [!code-cpp[Classic CheckBox.CheckAlign Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic CheckBox.CheckAlign Example/CPP/source.cpp#1)]
 [!code-csharp[Classic CheckBox.CheckAlign Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic CheckBox.CheckAlign Example/CS/source.cs#1)]
 [!code-vb[Classic CheckBox.CheckAlign Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic CheckBox.CheckAlign Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.CheckBox.ThreeState" />
        <altmember cref="P:System.Windows.Forms.CheckBox.CheckState" />
      </Docs>
    </Member>
    <Member MemberName="CheckedChanged">
      <MemberSignature Language="C#" Value="public event EventHandler CheckedChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler CheckedChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.CheckBox.CheckedChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event CheckedChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ CheckedChanged;" />
      <MemberSignature Language="F#" Value="member this.CheckedChanged : EventHandler " Usage="member this.CheckedChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy wartość <see cref="P:System.Windows.Forms.CheckBox.Checked" /> zmiany właściwości.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uzyskać więcej informacji na temat obsługi zdarzeń, zobacz [Handling and Raising Events](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje użycie tego elementu członkowskiego. W tym przykładzie program obsługi zdarzeń raporty w momencie wystąpienia <xref:System.Windows.Forms.CheckBox.CheckedChanged> zdarzeń. Ten raport pomaga, aby dowiedzieć się, gdy zdarzenie występuje i mogą pomóc w debugowaniu. Aby zgłosić na wiele zdarzeń lub zdarzeń, które często występują, rozważ zastąpienie <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> z <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> lub dołączane wiadomość w wielowierszowym <xref:System.Windows.Forms.TextBox>.  
  
 Aby uruchomić przykładowy kod, wkleić go do projektu, który zawiera wystąpienie typu <xref:System.Windows.Forms.CheckBox> o nazwie `CheckBox1`. Upewnij się, że program obsługi zdarzeń jest skojarzony z <xref:System.Windows.Forms.CheckBox.CheckedChanged> zdarzeń.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#140](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#140)]
 [!code-vb[System.Windows.Forms.EventExamples#140](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#140)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.CheckBox.Checked" />
      </Docs>
    </Member>
    <Member MemberName="CheckState">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.CheckState CheckState { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.CheckState CheckState" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.CheckBox.CheckState" />
      <MemberSignature Language="VB.NET" Value="Public Property CheckState As CheckState" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::CheckState CheckState { System::Windows::Forms::CheckState get(); void set(System::Windows::Forms::CheckState value); };" />
      <MemberSignature Language="F#" Value="member this.CheckState : System.Windows.Forms.CheckState with get, set" Usage="System.Windows.Forms.CheckBox.CheckState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.RefreshProperties</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.RefreshProperties(System.ComponentModel.RefreshProperties.All)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.CheckState</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia stan <see cref="T:System.Windows.Forms.CheckBox" />.</summary>
        <value>Jedną z <see cref="T:System.Windows.Forms.CheckState" /> wartości wyliczenia. Wartość domyślna to <see langword="Unchecked" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli <xref:System.Windows.Forms.CheckBox.ThreeState%2A> właściwość jest ustawiona na `false`, <xref:System.Windows.Forms.CheckBox.CheckState%2A> wartości właściwości można ustawić tylko `CheckState.Indeterminate` w kodzie, a nie przez użytkownika.  
  
 W poniższej tabeli opisano <xref:System.Windows.Forms.Appearance?displayProperty=nameWithType> z <xref:System.Windows.Forms.CheckBox> kontroli w różnych stanach dla `Normal` i `Button` stylu kontrolki <xref:System.Windows.Forms.CheckBox.Appearance%2A?displayProperty=nameWithType>.  
  
|Wartość CheckState|Appearance.Normal|Appearance.Button|  
|----------------|-----------------------|-----------------------|  
|`Checked`|<xref:System.Windows.Forms.CheckBox> Wyświetla znacznik wyboru.|Ten formant jest widoczny obniżone.|  
|`Unchecked`|<xref:System.Windows.Forms.CheckBox> Jest pusty.|Ten formant jest widoczny podniesiona podstawa.|  
|`Indeterminate`|<xref:System.Windows.Forms.CheckBox> Wyświetla znacznik wyboru i jest zacieniowany.|Płaski wygląd kontrolki.|  
  
   
  
## Examples  
 Poniższy przykład kodu wyświetla wartości trzy właściwości w etykiecie. <xref:System.Windows.Forms.CheckBox.ThreeState%2A> Właściwość przełącza między `true` i `false` ze zmieniającymi się kliknięcia formantu i <xref:System.Windows.Forms.CheckBox.CheckAlign%2A> przełącza między `MiddleRight` i `MiddleLeft` wartości <xref:System.Drawing.ContentAlignment?displayProperty=nameWithType>. W tym przykładzie pokazano, jak zmienić wartości właściwości jako <xref:System.Windows.Forms.CheckBox.ThreeState%2A> zaznaczono opcję zmiany właściwości i kontroli. W tym przykładzie wymaga, aby <xref:System.Windows.Forms.CheckBox>, <xref:System.Windows.Forms.Label> i <xref:System.Windows.Forms.Button> wszystkie zostały utworzone w formularzu i etykieta jest wystarczająco duża, aby wyświetlić trzy wiersze tekstu, a także odwołania do <xref:System.Drawing?displayProperty=nameWithType> przestrzeni nazw. Ten kod powinien zostać wywołany <xref:System.Windows.Forms.Control.Click> programu obsługi zdarzeń kontrolki.  
  
 [!code-cpp[Classic CheckBox.CheckAlign Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic CheckBox.CheckAlign Example/CPP/source.cpp#1)]
 [!code-csharp[Classic CheckBox.CheckAlign Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic CheckBox.CheckAlign Example/CS/source.cs#1)]
 [!code-vb[Classic CheckBox.CheckAlign Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic CheckBox.CheckAlign Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Wartość przypisana nie jest jednym z <see cref="T:System.Windows.Forms.CheckState" /> wartości wyliczenia.</exception>
        <altmember cref="P:System.Windows.Forms.CheckBox.Checked" />
        <altmember cref="P:System.Windows.Forms.CheckBox.ThreeState" />
      </Docs>
    </Member>
    <Member MemberName="CheckStateChanged">
      <MemberSignature Language="C#" Value="public event EventHandler CheckStateChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler CheckStateChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.CheckBox.CheckStateChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event CheckStateChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ CheckStateChanged;" />
      <MemberSignature Language="F#" Value="member this.CheckStateChanged : EventHandler " Usage="member this.CheckStateChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy wartość <see cref="P:System.Windows.Forms.CheckBox.CheckState" /> zmiany właściwości.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uzyskać więcej informacji na temat obsługi zdarzeń, zobacz [Handling and Raising Events](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje użycie tego elementu członkowskiego. W tym przykładzie program obsługi zdarzeń raporty w momencie wystąpienia <xref:System.Windows.Forms.CheckBox.CheckStateChanged> zdarzeń. Ten raport pomaga, aby dowiedzieć się, gdy zdarzenie występuje i mogą pomóc w debugowaniu. Aby zgłosić na wiele zdarzeń lub zdarzeń, które często występują, rozważ zastąpienie <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> z <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> lub dołączane wiadomość w wielowierszowym <xref:System.Windows.Forms.TextBox>.  
  
 Aby uruchomić przykładowy kod, wkleić go do projektu, który zawiera wystąpienie typu <xref:System.Windows.Forms.CheckBox> o nazwie `CheckBox1`. Upewnij się, że program obsługi zdarzeń jest skojarzony z <xref:System.Windows.Forms.CheckBox.CheckStateChanged> zdarzeń.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#141](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#141)]
 [!code-vb[System.Windows.Forms.EventExamples#141](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#141)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.CheckBox.CheckState" />
      </Docs>
    </Member>
    <Member MemberName="CreateAccessibilityInstance">
      <MemberSignature Language="C#" Value="protected override System.Windows.Forms.AccessibleObject CreateAccessibilityInstance ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance class System.Windows.Forms.AccessibleObject CreateAccessibilityInstance() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CheckBox.CreateAccessibilityInstance" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateAccessibilityInstance () As AccessibleObject" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override System::Windows::Forms::AccessibleObject ^ CreateAccessibilityInstance();" />
      <MemberSignature Language="F#" Value="override this.CreateAccessibilityInstance : unit -&gt; System.Windows.Forms.AccessibleObject" Usage="checkBox.CreateAccessibilityInstance " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.AccessibleObject</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Tworzy nowy obiekt ułatwień dostępu dla <see cref="T:System.Windows.Forms.CheckBox" /> kontroli.</summary>
        <returns>Nowy <see cref="T:System.Windows.Forms.CheckBox.CheckBoxAccessibleObject" /> dla formantu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli nie zostanie jawnie wywołana <xref:System.Windows.Forms.CheckBox.CreateAccessibilityInstance%2A> metody, będzie ona wywoływana gdy <xref:System.Windows.Forms.Control.AccessibilityObject%2A> odwołuje się do właściwości.  
  
> [!NOTE]
>  Do pobierania lub ustawiania <xref:System.Windows.Forms.Control.AccessibilityObject%2A> właściwość, należy dodać odwołanie do `Accessibility` zestawu zainstalowanego za pomocą programu .NET Framework.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Podczas zastępowania <see cref="M:System.Windows.Forms.CheckBox.CreateAccessibilityInstance" /> w klasie pochodnej, nie należy wywołać klasy bazowej <see cref="M:System.Windows.Forms.CheckBox.CreateAccessibilityInstance" /> metody.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="CreateParams">
      <MemberSignature Language="C#" Value="protected override System.Windows.Forms.CreateParams CreateParams { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.CreateParams CreateParams" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.CheckBox.CreateParams" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property CreateParams As CreateParams" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Windows::Forms::CreateParams ^ CreateParams { System::Windows::Forms::CreateParams ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CreateParams : System.Windows.Forms.CreateParams" Usage="System.Windows.Forms.CheckBox.CreateParams" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.CreateParams</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera parametry tworzenia wymaganych, po utworzeniu uchwyt formantu.</summary>
        <value>Element <see cref="T:System.Windows.Forms.CreateParams" /> zawierający parametry tworzenia wymaganych, po utworzeniu dojścia do formantu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu rozszerza <xref:System.Windows.Forms.Control.CreateParams%2A> właściwość <xref:System.Windows.Forms.Button> klasy pochodnej. <xref:System.Windows.Forms.CreateParams.Style%2A?displayProperty=nameWithType> Zmienić właściwości, co powoduje, że przycisk, aby wyświetlić <xref:System.Drawing.Icon> zamiast <xref:System.Drawing.Image>. W tym przykładzie wymaga, że masz klasę, która dziedziczy z <xref:System.Windows.Forms.Button> klasy.  
  
 [!code-cpp[CreateParams#3](~/samples/snippets/cpp/VS_Snippets_Winforms/CreateParams/CPP/createparams.cpp#3)]
 [!code-csharp[CreateParams#3](~/samples/snippets/csharp/VS_Snippets_Winforms/CreateParams/CS/createparams.cs#3)]
 [!code-vb[CreateParams#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/CreateParams/VB/createparams.vb#3)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">za działanie z kodem niezarządzanym. Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="DefaultSize">
      <MemberSignature Language="C#" Value="protected override System.Drawing.Size DefaultSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size DefaultSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.CheckBox.DefaultSize" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides ReadOnly Property DefaultSize As Size" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property System::Drawing::Size DefaultSize { System::Drawing::Size get(); };" />
      <MemberSignature Language="F#" Value="member this.DefaultSize : System.Drawing.Size" Usage="System.Windows.Forms.CheckBox.DefaultSize" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera domyślny rozmiar kontrolki.</summary>
        <value>Domyślny rozmiar.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DoubleClick">
      <MemberSignature Language="C#" Value="public event EventHandler DoubleClick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler DoubleClick" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.CheckBox.DoubleClick" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DoubleClick As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ DoubleClick;" />
      <MemberSignature Language="F#" Value="member this.DoubleClick : EventHandler " Usage="member this.DoubleClick : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy użytkownik kliknie dwukrotnie <see cref="T:System.Windows.Forms.CheckBox" /> kontroli.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślnie <xref:System.Windows.Forms.ControlStyles.StandardClick> i <xref:System.Windows.Forms.ControlStyles.StandardDoubleClick> wyliczenia są ustawione na wartość FAŁSZ w <xref:System.Windows.Forms.CheckBox> kontroli i <xref:System.Windows.Forms.CheckBox.DoubleClick> zdarzenie jest zgłaszane w nie.  
  
 To zdarzenie nie jest istotne dla tej klasy.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MouseDoubleClick">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.MouseEventHandler MouseDoubleClick;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.MouseEventHandler MouseDoubleClick" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.CheckBox.MouseDoubleClick" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MouseDoubleClick As MouseEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::MouseEventHandler ^ MouseDoubleClick;" />
      <MemberSignature Language="F#" Value="member this.MouseDoubleClick : System.Windows.Forms.MouseEventHandler " Usage="member this.MouseDoubleClick : System.Windows.Forms.MouseEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.EditorBrowsable</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MouseEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy użytkownik kliknie dwukrotnie <see cref="T:System.Windows.Forms.CheckBox" /> kontroli.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Domyślnie <xref:System.Windows.Forms.ControlStyles.StandardClick?displayProperty=nameWithType> i <xref:System.Windows.Forms.ControlStyles.StandardDoubleClick?displayProperty=nameWithType> styl bity są ustawione na `false` dla <xref:System.Windows.Forms.CheckBox> kontroli i <xref:System.Windows.Forms.CheckBox.MouseDoubleClick> zdarzenie jest zgłaszane w nie.  
  
 To zdarzenie nie jest istotne dla tej klasy.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OnAppearanceChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnAppearanceChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnAppearanceChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CheckBox.OnAppearanceChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnAppearanceChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnAppearanceChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnAppearanceChanged : EventArgs -&gt; unit&#xA;override this.OnAppearanceChanged : EventArgs -&gt; unit" Usage="checkBox.OnAppearanceChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.EventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywołuje <see cref="E:System.Windows.Forms.CheckBox.AppearanceChanged" /> zdarzeń.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podnoszenie zdarzenia wywołuje program obsługi zdarzeń przez delegata. Aby uzyskać więcej informacji, zobacz [Handling and Raising Events](~/docs/standard/events/index.md).  
  
 <xref:System.Windows.Forms.CheckBox.OnAppearanceChanged%2A> Metoda umożliwia również klasy pochodne obsłużyć zdarzenie bez dołączając delegata. Jest to preferowana metoda obsługi zdarzeń w klasie pochodnej.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Podczas zastępowania <see cref="M:System.Windows.Forms.CheckBox.OnAppearanceChanged(System.EventArgs)" /> w klasie pochodnej, pamiętaj wywołać klasy bazowej <see cref="M:System.Windows.Forms.CheckBox.OnAppearanceChanged(System.EventArgs)" /> metody, która zarejestrowana delegaci otrzymają zdarzenie.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.CheckBox.AppearanceChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnCheckedChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnCheckedChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCheckedChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CheckBox.OnCheckedChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnCheckedChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnCheckedChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnCheckedChanged : EventArgs -&gt; unit&#xA;override this.OnCheckedChanged : EventArgs -&gt; unit" Usage="checkBox.OnCheckedChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.EventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywołuje <see cref="E:System.Windows.Forms.CheckBox.CheckedChanged" /> zdarzeń.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podnoszenie zdarzenia wywołuje program obsługi zdarzeń przez delegata. Aby uzyskać więcej informacji, zobacz [Handling and Raising Events](~/docs/standard/events/index.md).  
  
 <xref:System.Windows.Forms.CheckBox.OnCheckedChanged%2A> Metoda umożliwia również klasy pochodne obsłużyć zdarzenie bez dołączając delegata. Jest to preferowana metoda obsługi zdarzeń w klasie pochodnej.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Podczas zastępowania <see cref="M:System.Windows.Forms.CheckBox.OnCheckedChanged(System.EventArgs)" /> w klasie pochodnej, pamiętaj wywołać klasy bazowej <see cref="M:System.Windows.Forms.CheckBox.OnCheckedChanged(System.EventArgs)" /> metody, która zarejestrowana delegaci otrzymają zdarzenie.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.CheckBox.CheckedChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnCheckStateChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnCheckStateChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnCheckStateChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CheckBox.OnCheckStateChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnCheckStateChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnCheckStateChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnCheckStateChanged : EventArgs -&gt; unit&#xA;override this.OnCheckStateChanged : EventArgs -&gt; unit" Usage="checkBox.OnCheckStateChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.EventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywołuje <see cref="E:System.Windows.Forms.CheckBox.CheckStateChanged" /> zdarzeń.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podnoszenie zdarzenia wywołuje program obsługi zdarzeń przez delegata. Aby uzyskać więcej informacji, zobacz [Handling and Raising Events](~/docs/standard/events/index.md).  
  
 <xref:System.Windows.Forms.CheckBox.OnCheckStateChanged%2A> Metoda umożliwia również klasy pochodne obsłużyć zdarzenie bez dołączając delegata. Jest to preferowana metoda obsługi zdarzeń w klasie pochodnej.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Podczas zastępowania <see cref="M:System.Windows.Forms.CheckBox.OnCheckStateChanged(System.EventArgs)" /> w klasie pochodnej, pamiętaj wywołać klasy bazowej <see cref="M:System.Windows.Forms.CheckBox.OnCheckStateChanged(System.EventArgs)" /> metody, która zarejestrowana delegaci otrzymają zdarzenie.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.CheckBox.CheckStateChanged" />
      </Docs>
    </Member>
    <Member MemberName="OnClick">
      <MemberSignature Language="C#" Value="protected override void OnClick (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnClick(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CheckBox.OnClick(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnClick (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnClick(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnClick : EventArgs -&gt; unit" Usage="checkBox.OnClick e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.EventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywołuje <see cref="E:System.Windows.Forms.Control.Click" /> zdarzeń.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.CheckBox.OnClick%2A> Zmiany metody <xref:System.Windows.Forms.CheckBox.CheckState%2A> właściwości. Jeśli <xref:System.Windows.Forms.CheckBox.ThreeState%2A> właściwość jest ustawiona na `true`, kolejne kliknie z <xref:System.Windows.Forms.CheckBox> spowoduje <xref:System.Windows.Forms.CheckBox.OnClick%2A> okrągło wszystkie wartości <xref:System.Windows.Forms.CheckBox.CheckState%2A> wyliczenia. W przeciwnym razie <xref:System.Windows.Forms.CheckBox.OnClick%2A> stan zmieni się między <xref:System.Windows.Forms.CheckState.Checked> i <xref:System.Windows.Forms.CheckState.Unchecked>.  
  
 Podnoszenie zdarzenia wywołuje program obsługi zdarzeń przez delegata. Aby uzyskać więcej informacji, zobacz [Handling and Raising Events](~/docs/standard/events/index.md).  
  
 <xref:System.Windows.Forms.CheckBox.OnClick%2A> Metoda umożliwia również klasy pochodne obsłużyć zdarzenie bez dołączając delegata. Jest to preferowana metoda obsługi zdarzeń w klasie pochodnej.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Podczas zastępowania <see cref="M:System.Windows.Forms.CheckBox.OnClick(System.EventArgs)" /> w klasie pochodnej, pamiętaj wywołać klasy bazowej <see cref="M:System.Windows.Forms.CheckBox.OnClick(System.EventArgs)" /> metody, która zarejestrowana delegaci otrzymają zdarzenie.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnHandleCreated">
      <MemberSignature Language="C#" Value="protected override void OnHandleCreated (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnHandleCreated(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CheckBox.OnHandleCreated(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnHandleCreated (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnHandleCreated(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnHandleCreated : EventArgs -&gt; unit" Usage="checkBox.OnHandleCreated e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.EventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywołuje <see cref="E:System.Windows.Forms.Control.HandleCreated" /> zdarzeń.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Control.OnHandleCreated(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnKeyDown">
      <MemberSignature Language="C#" Value="protected override void OnKeyDown (System.Windows.Forms.KeyEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnKeyDown(class System.Windows.Forms.KeyEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CheckBox.OnKeyDown(System.Windows.Forms.KeyEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnKeyDown (e As KeyEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnKeyDown(System::Windows::Forms::KeyEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnKeyDown : System.Windows.Forms.KeyEventArgs -&gt; unit" Usage="checkBox.OnKeyDown e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.KeyEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">Element <see cref="T:System.Windows.Forms.KeyEventArgs" /> zawierający dane zdarzenia.</param>
        <summary>Wywołuje <see cref="M:System.Windows.Forms.ButtonBase.OnKeyUp(System.Windows.Forms.KeyEventArgs)" /> zdarzeń.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.ButtonBase.OnKeyDown(System.Windows.Forms.KeyEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnMouseUp">
      <MemberSignature Language="C#" Value="protected override void OnMouseUp (System.Windows.Forms.MouseEventArgs mevent);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void OnMouseUp(class System.Windows.Forms.MouseEventArgs mevent) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CheckBox.OnMouseUp(System.Windows.Forms.MouseEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub OnMouseUp (mevent As MouseEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void OnMouseUp(System::Windows::Forms::MouseEventArgs ^ mevent);" />
      <MemberSignature Language="F#" Value="override this.OnMouseUp : System.Windows.Forms.MouseEventArgs -&gt; unit" Usage="checkBox.OnMouseUp mevent" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mevent" Type="System.Windows.Forms.MouseEventArgs" />
      </Parameters>
      <Docs>
        <param name="mevent">Element <see cref="T:System.Windows.Forms.MouseEventArgs" /> zawierający dane zdarzenia.</param>
        <summary>Zgłasza zdarzenie OnMouseUp.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.ButtonBase.OnMouseUp(System.Windows.Forms.MouseEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="ProcessMnemonic">
      <MemberSignature Language="C#" Value="protected internal override bool ProcessMnemonic (char charCode);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance bool ProcessMnemonic(char charCode) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CheckBox.ProcessMnemonic(System.Char)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Function ProcessMnemonic (charCode As Char) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override bool ProcessMnemonic(char charCode);" />
      <MemberSignature Language="F#" Value="override this.ProcessMnemonic : char -&gt; bool" Usage="checkBox.ProcessMnemonic charCode" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="charCode" Type="System.Char" />
      </Parameters>
      <Docs>
        <param name="charCode">Znak do przetworzenia.</param>
        <summary>Przetwarza mnemoników znaków.</summary>
        <returns>
          <see langword="true" /> Jeśli znak został przetworzony jako skrót klawiszowy podczas kontroli. w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda jest wywoływana, aby dać kontrolki możliwość przetwarzania mnemoników znaków. Metoda należy ustalić, czy kontrolka jest w stanie umożliwiającym mnemonik procesu oraz czy dany znak reprezentuje wartość. Jeśli tak, metoda powinna dokonać akcję skojarzoną z skrót klawiszowy i zwrócenie `true`. Jeśli nie, metoda powinna zwrócić `false`. Implementacje tej metody często używają <xref:System.Windows.Forms.Control.IsMnemonic%2A> metodę, aby ustalić, czy dany znak zgodny mnemonik w tekście formantu.  
  
 Na przykład:  
  
```csharp  
if (CanSelect && IsMnemonic(charCode, MyControl.Text) {  
    // Perform action associated with mnemonic.  
    }  
```  
  
 Tej domyślnej implementacji <xref:System.Windows.Forms.Control.ProcessMnemonic%2A> metoda po prostu zwraca `false` do wskazania, że kontrolka nie ma żadnych skrót klawiszowy.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje rozszerzenie klasy przycisku, którym jest zastępowana <xref:System.Windows.Forms.Control.ProcessMnemonic%2A> metoda niestandardowe zachowują się. W przykładzie pokazano również użycie <xref:System.Windows.Forms.Control.CanSelect%2A> i <xref:System.Windows.Forms.Control.IsMnemonic%2A> właściwości. Aby uruchomić ten przykład, wklej następujący kod po klasy formularza, w tym samym pliku. Dodaj przycisk typu `MnemonicButton` do formularza.  
  
 [!code-cpp[System.Windows.Forms.ProcessMnemonic#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.ProcessMnemonic/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.ProcessMnemonic#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.ProcessMnemonic/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.ProcessMnemonic#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.ProcessMnemonic/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="TextAlign">
      <MemberSignature Language="C#" Value="public override System.Drawing.ContentAlignment TextAlign { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.ContentAlignment TextAlign" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.CheckBox.TextAlign" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property TextAlign As ContentAlignment" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Drawing::ContentAlignment TextAlign { System::Drawing::ContentAlignment get(); void set(System::Drawing::ContentAlignment value); };" />
      <MemberSignature Language="F#" Value="member this.TextAlign : System.Drawing.ContentAlignment with get, set" Usage="System.Windows.Forms.CheckBox.TextAlign" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.DefaultValue</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5">
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Drawing.ContentAlignment</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub Ustawia wyrównanie tekstu w <see cref="T:System.Windows.Forms.CheckBox" /> kontroli.</summary>
        <value>Jedną z <see cref="T:System.Drawing.ContentAlignment" /> wartości. Wartość domyślna to <see cref="F:System.Drawing.ContentAlignment.MiddleLeft" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ThreeState">
      <MemberSignature Language="C#" Value="public bool ThreeState { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ThreeState" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.CheckBox.ThreeState" />
      <MemberSignature Language="VB.NET" Value="Public Property ThreeState As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ThreeState { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ThreeState : bool with get, set" Usage="System.Windows.Forms.CheckBox.ThreeState" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2">
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą czy <see cref="T:System.Windows.Forms.CheckBox" /> umożliwi trzy zaznaczenia, a nie dwa stany.</summary>
        <value>
          <see langword="true" /> Jeśli <see cref="T:System.Windows.Forms.CheckBox" /> jest w stanie wyświetlić trzy stany wyboru; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli <xref:System.Windows.Forms.CheckBox.ThreeState%2A> właściwość jest ustawiona na `false`, <xref:System.Windows.Forms.CheckBox.CheckState%2A> wartości właściwości można ustawić tylko `Indeterminate` wartość <xref:System.Windows.Forms.CheckState?displayProperty=nameWithType> w kodzie, a nie przez użytkownika.  
  
   
  
## Examples  
 Poniższy przykład kodu wyświetla wartości trzy właściwości w etykiecie. <xref:System.Windows.Forms.CheckBox.ThreeState%2A> Właściwość przełącza między `true` i `false` ze zmieniającymi się kliknięcia formantu i <xref:System.Windows.Forms.CheckBox.CheckAlign%2A> przełącza między `MiddleRight` i `MiddleLeft` wartości <xref:System.Drawing.ContentAlignment?displayProperty=nameWithType>. W tym przykładzie pokazano, jak zmienić wartości właściwości jako <xref:System.Windows.Forms.CheckBox.ThreeState%2A> zaznaczono opcję zmiany właściwości i kontroli. Ten kod wymaga, aby <xref:System.Windows.Forms.CheckBox>, <xref:System.Windows.Forms.Label> i <xref:System.Windows.Forms.Button> wszystkie zostały utworzone w formularzu i etykieta jest wystarczająco duża, aby wyświetlić trzy wiersze tekstu, a także odwołania do <xref:System.Drawing?displayProperty=nameWithType> przestrzeni nazw. Ten kod powinien zostać wywołany <xref:System.Windows.Forms.Control.Click> programu obsługi zdarzeń kontrolki.  
  
 [!code-cpp[Classic CheckBox.CheckAlign Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic CheckBox.CheckAlign Example/CPP/source.cpp#1)]
 [!code-csharp[Classic CheckBox.CheckAlign Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic CheckBox.CheckAlign Example/CS/source.cs#1)]
 [!code-vb[Classic CheckBox.CheckAlign Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic CheckBox.CheckAlign Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CheckBox.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="abstract member ToString : unit -&gt; string&#xA;override this.ToString : unit -&gt; string" Usage="checkBox.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca ciąg reprezentujący bieżącą <see cref="T:System.Windows.Forms.CheckBox" /> kontroli.</summary>
        <returns>Ciąg, który typ formantu i stan <see cref="P:System.Windows.Forms.CheckBox.CheckState" /> właściwości.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>