<Type Name="OpenFileDialog" FullName="System.Windows.Forms.OpenFileDialog">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d43356d06beb24ff2596bda4c8b955c1e484c2b7" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30706076" />
  </Metadata>
  <TypeSignature Language="C#" Value="public sealed class OpenFileDialog : System.Windows.Forms.FileDialog" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit OpenFileDialog extends System.Windows.Forms.FileDialog" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.OpenFileDialog" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class OpenFileDialog&#xA;Inherits FileDialog" />
  <TypeSignature Language="C++ CLI" Value="public ref class OpenFileDialog sealed : System::Windows::Forms::FileDialog" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Forms.FileDialog</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Wyświetla okno dialogowe standardowe, które monituje użytkownika o otwarcie pliku. Klasa ta nie może być dziedziczona.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta klasa służy do sprawdzenia, czy plik istnieje i można go otworzyć. <xref:System.Windows.Forms.OpenFileDialog.ShowReadOnly%2A> Właściwość określa, czy pola wyboru tylko do odczytu jest wyświetlany w oknie dialogowym. <xref:System.Windows.Forms.OpenFileDialog.ReadOnlyChecked%2A> Właściwość wskazuje, czy jest zaznaczone pole wyboru tylko do odczytu.  
  
 Większość podstawowych funkcji dla tej klasy znajduje się w <xref:System.Windows.Forms.FileDialog> klasy.  

W systemie operacyjnym od prawej do lewej, ustawienie zawierający formularz <xref:System.Windows.Forms.Control.RightToLeft> właściwości <xref:System.Windows.Forms.RightToLeft.Yes?displayProperty=nameWithType> lokalizuje okna dialogowego **nazwę pliku**, **Otwórz**, i **Anuluj** przycisków. Jeśli nie ustawiono właściwości <xref:System.Windows.Forms.RightToLeft.Yes?displayProperty=nameWithType>, zamiast niego jest używana tekst w języku angielskim.  

 Jeśli chcesz dać użytkownikowi możliwość aby wybrać folder zamiast pliku, użyj <xref:System.Windows.Forms.FolderBrowserDialog> zamiast tego.  
  
   
  
## Examples  
 Poniższy przykład kodu tworzy <xref:System.Windows.Forms.OpenFileDialog>, ustawia kilka właściwości Definiowanie zachowania filtru i okna dialogowe rozszerzenie pliku i wyświetla przy użyciu — okno dialogowe <xref:System.Windows.Forms.CommonDialog.ShowDialog%2A?displayProperty=nameWithType> metody. Przykład wymaga formularza z <xref:System.Windows.Forms.Button> dotyczącymi go i odwołania do <xref:System.IO> przestrzeni nazw, dodano do niego.  
  
 [!code-cpp[Classic OpenFileDialog Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic OpenFileDialog Example/CPP/source.cpp#1)]
 [!code-csharp[Classic OpenFileDialog Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic OpenFileDialog Example/CS/source.cs#1)]
 [!code-vb[Classic OpenFileDialog Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic OpenFileDialog Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.FileDialog" />
    <altmember cref="T:System.Windows.Forms.CommonDialog" />
    <altmember cref="T:System.Windows.Forms.SaveFileDialog" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public OpenFileDialog ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.OpenFileDialog.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; OpenFileDialog();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje wystąpienie klasy <see cref="T:System.Windows.Forms.OpenFileDialog" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jest to ustawienie domyślne, dostarczone przez kompilator konstruktora dla <xref:System.Windows.Forms.OpenFileDialog> klasy.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckFileExists">
      <MemberSignature Language="C#" Value="public override bool CheckFileExists { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CheckFileExists" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.OpenFileDialog.CheckFileExists" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property CheckFileExists As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CheckFileExists { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy okno dialogowe wyświetla ostrzeżenie, jeśli użytkownik Określa nazwę pliku, który nie istnieje.</summary>
        <value>
          <see langword="true" /> Jeśli okno dialogowe jest wyświetlane ostrzeżenie użytkownika określa nazwę pliku, który nie istnieje; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="true" />.</value>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.OpenFileDialog.OpenFile" />
        <altmember cref="P:System.Windows.Forms.OpenFileDialog.ReadOnlyChecked" />
      </Docs>
    </Member>
    <Member MemberName="Multiselect">
      <MemberSignature Language="C#" Value="public bool Multiselect { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Multiselect" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.OpenFileDialog.Multiselect" />
      <MemberSignature Language="VB.NET" Value="Public Property Multiselect As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Multiselect { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy okno dialogowe zezwala na wiele plików do wybrania.</summary>
        <value>
          <see langword="true" /> Jeśli okno dialogowe zezwala na wiele plików, należy wybrać ze sobą lub jednocześnie; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Windows.Forms.FileDialog.FileNames%2A> zaznaczona właściwość z pełną listą dostęp do nazwy pliku.  
  
   
  
## Examples  
 Poniższy przykład kodu umożliwia użytkownikowi wybierz liczbę obrazów i wyświetlić je w <xref:System.Windows.Forms.PictureBox> formantów w formularzu. Pokazuje, inicjowanie <xref:System.Windows.Forms.OpenFileDialog>, ustawienie <xref:System.Windows.Forms.FileDialog.Title%2A> i <xref:System.Windows.Forms.FileDialog.Filter%2A> właściwości oraz umożliwiając użytkownikowi wybranie wielu plików przez ustawienie <xref:System.Windows.Forms.OpenFileDialog.Multiselect%2A> właściwości na wartość true. Ten przykład kodu zakłada, że formularz ma już <xref:System.Windows.Forms.OpenFileDialog> formantu o nazwie `openFileDialog1`, <xref:System.Windows.Forms.Button> o nazwie `SelectFileButton`, a <xref:System.Windows.Forms.FlowLayoutPanel> o nazwie `flowLayoutPanel1`.  
  
 [!code-csharp[System.Windows.Forms.OpenFileDialog.MultiSelect#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.OpenFileDialog.MultiSelect/CS/Form1.cs#1)]
 [!code-vb[System.Windows.Forms.OpenFileDialog.MultiSelect#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.OpenFileDialog.MultiSelect/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.FileDialog.FileNames" />
        <altmember cref="P:System.Windows.Forms.FileDialog.Filter" />
      </Docs>
    </Member>
    <Member MemberName="OpenFile">
      <MemberSignature Language="C#" Value="public System.IO.Stream OpenFile ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.IO.Stream OpenFile() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.OpenFileDialog.OpenFile" />
      <MemberSignature Language="VB.NET" Value="Public Function OpenFile () As Stream" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::IO::Stream ^ OpenFile();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IO.Stream</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Otwiera plik zaznaczony przez użytkownika z uprawnieniami tylko do odczytu. Plik jest określona przez <see cref="P:System.Windows.Forms.FileDialog.FileName" /> właściwości.</summary>
        <returns>A <see cref="T:System.IO.Stream" /> , który określa plik tylko do odczytu, wybrane przez użytkownika.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.OpenFileDialog.OpenFile%2A> Metoda służy do zapewnienia możliwość szybkiego Otwórz plik z okna dialogowego. Plik jest otwarty w trybie tylko do odczytu, ze względów bezpieczeństwa. Aby otworzyć plik w trybie odczytu i zapisu, należy użyć innej metody, takie jak <xref:System.IO.FileStream>.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób użycia <xref:System.Windows.Forms.OpenFileDialog.OpenFile%2A> metody.  
  
 [!code-cpp[Classic OpenFileDialog Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic OpenFileDialog Example/CPP/source.cpp#1)]
 [!code-csharp[Classic OpenFileDialog Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic OpenFileDialog Example/CS/source.cs#1)]
 [!code-vb[Classic OpenFileDialog Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic OpenFileDialog Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">Nazwa pliku jest <see langword="null" />.</exception>
        <permission cref="T:System.Security.Permissions.FileDialogPermission">Aby otworzyć plik. Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.FileDialogPermissionAccess.Open" />.</permission>
        <altmember cref="T:System.IO.Stream" />
        <altmember cref="P:System.Windows.Forms.OpenFileDialog.CheckFileExists" />
        <altmember cref="P:System.Windows.Forms.OpenFileDialog.ReadOnlyChecked" />
      </Docs>
    </Member>
    <Member MemberName="ReadOnlyChecked">
      <MemberSignature Language="C#" Value="public bool ReadOnlyChecked { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ReadOnlyChecked" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.OpenFileDialog.ReadOnlyChecked" />
      <MemberSignature Language="VB.NET" Value="Public Property ReadOnlyChecked As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ReadOnlyChecked { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy zaznaczone jest pole wyboru tylko do odczytu.</summary>
        <value>
          <see langword="true" /> Po zaznaczeniu pola wyboru tylko do odczytu; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.OpenFileDialog.ReadOnlyChecked%2A> Stan nie ma wpływu na tryb odczyt/zapis który <xref:System.Windows.Forms.OpenFileDialog.OpenFile%2A?displayProperty=nameWithType> używa do otwierania pliku wybranego w oknie dialogowym. <xref:System.Windows.Forms.OpenFileDialog.OpenFile%2A> zawsze będzie Otwórz plik w trybie tylko do odczytu.  
  
 <xref:System.Windows.Forms.OpenFileDialog.ShowReadOnly%2A> Właściwość musi być ustawiona przed w kolejności dla pola wyboru tylko do odczytu pojawią się w oknie dialogowym.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje użycie <xref:System.Windows.Forms.OpenFileDialog.ReadOnlyChecked%2A> właściwości. W tym przykładzie wyświetlono <xref:System.Windows.Forms.OpenFileDialog> pole z <xref:System.Windows.Forms.OpenFileDialog.ShowReadOnly%2A> ustawioną właściwość `true`. Jeśli użytkownik klika opcję, aby otworzyć go w trybie tylko do odczytu, <xref:System.Windows.Forms.OpenFileDialog.ReadOnlyChecked%2A> daje w wyniku właściwości `true`i <xref:System.Windows.Forms.OpenFileDialog.OpenFile%2A> metoda jest używana do otwierania pliku. W przeciwnym razie <xref:System.IO.FileStream> klasa jest używana do otwierania pliku w trybie odczytu i zapisu.  
  
 [!code-cpp[DlgOpenFileReadOnly#1](~/samples/snippets/cpp/VS_Snippets_Winforms/DlgOpenFileReadOnly/CPP/form1.cpp#1)]
 [!code-csharp[DlgOpenFileReadOnly#1](~/samples/snippets/csharp/VS_Snippets_Winforms/DlgOpenFileReadOnly/CS/form1.cs#1)]
 [!code-vb[DlgOpenFileReadOnly#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/DlgOpenFileReadOnly/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.OpenFileDialog.ShowReadOnly" />
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public override void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.OpenFileDialog.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Reset();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Resetuje wszystkie właściwości do wartości domyślnych.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SafeFileName">
      <MemberSignature Language="C#" Value="public string SafeFileName { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string SafeFileName" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.OpenFileDialog.SafeFileName" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SafeFileName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ SafeFileName { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera nazwę pliku i rozszerzenie pliku wybranego w oknie dialogowym. Nazwa pliku nie ma ścieżki.</summary>
        <value>Nazwa pliku i rozszerzenie pliku wybranego w oknie dialogowym. Nazwa pliku nie ma ścieżki. Wartością domyślną jest ciąg pusty.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nazwę pliku bezpieczne (tylko nazwę i rozszerzenie pliku bez ścieżki) może służyć do poprawy zabezpieczeń aplikacji, ponieważ nie uwidacznia informacje o ścieżce. Ta właściwość powinna być dostępna kodu uruchomionego z zaufaniem ograniczone.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SafeFileNames">
      <MemberSignature Language="C#" Value="public string[] SafeFileNames { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] SafeFileNames" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.OpenFileDialog.SafeFileNames" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property SafeFileNames As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ SafeFileNames { cli::array &lt;System::String ^&gt; ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera tablicę nazw plików i rozszerzenia dla wszystkich plików zaznaczonych w oknie dialogowym. Nazwy plików nie zawierają ścieżki.</summary>
        <value>Tablica nazw plików i rozszerzenia dla wszystkich plików zaznaczonych w oknie dialogowym. Nazwy plików nie zawierają ścieżki. Jeśli nie wybrano żadnych plików, zwracana jest pusta tablica.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nazwę pliku bezpieczne (tylko nazwę i rozszerzenie pliku bez ścieżki) może służyć do poprawy zabezpieczeń aplikacji, ponieważ nie uwidacznia informacje o ścieżce. Ta właściwość powinna być dostępna kodu uruchomionego z zaufaniem ograniczone.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowReadOnly">
      <MemberSignature Language="C#" Value="public bool ShowReadOnly { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.OpenFileDialog.ShowReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public Property ShowReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ShowReadOnly { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy okno dialogowe zawiera pole wyboru tylko do odczytu.</summary>
        <value>
          <see langword="true" /> Jeśli okno dialogowe zawiera pole wyboru tylko do odczytu; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu pokazuje użycie <xref:System.Windows.Forms.OpenFileDialog.ShowReadOnly%2A> właściwości. W tym przykładzie wyświetlono <xref:System.Windows.Forms.OpenFileDialog> pole z <xref:System.Windows.Forms.OpenFileDialog.ShowReadOnly%2A> ustawioną właściwość `true`. Jeśli użytkownik klika opcję, aby otworzyć go w trybie tylko do odczytu, <xref:System.Windows.Forms.OpenFileDialog.OpenFile%2A> metoda jest używana do otwierania pliku. W przeciwnym razie <xref:System.IO.FileStream> klasa jest używana do otwierania pliku w trybie odczytu i zapisu.  
  
 [!code-cpp[DlgOpenFileReadOnly#1](~/samples/snippets/cpp/VS_Snippets_Winforms/DlgOpenFileReadOnly/CPP/form1.cpp#1)]
 [!code-csharp[DlgOpenFileReadOnly#1](~/samples/snippets/csharp/VS_Snippets_Winforms/DlgOpenFileReadOnly/CS/form1.cs#1)]
 [!code-vb[DlgOpenFileReadOnly#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/DlgOpenFileReadOnly/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.OpenFileDialog.ReadOnlyChecked" />
      </Docs>
    </Member>
  </Members>
</Type>