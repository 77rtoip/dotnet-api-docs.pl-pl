<Type Name="CurrencyManager" FullName="System.Windows.Forms.CurrencyManager">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="67db3c6afcc9e8754132b5eb843dfcfbc05e1be2" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="08/25/2018" />
    <Meta Name="ms.locfileid" Value="39891173" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class CurrencyManager : System.Windows.Forms.BindingManagerBase" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit CurrencyManager extends System.Windows.Forms.BindingManagerBase" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.CurrencyManager" />
  <TypeSignature Language="VB.NET" Value="Public Class CurrencyManager&#xA;Inherits BindingManagerBase" />
  <TypeSignature Language="C++ CLI" Value="public ref class CurrencyManager : System::Windows::Forms::BindingManagerBase" />
  <TypeSignature Language="F#" Value="type CurrencyManager = class&#xA;    inherit BindingManagerBase" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Forms.BindingManagerBase</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Zarządza listą <see cref="T:System.Windows.Forms.Binding" /> obiektów.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.CurrencyManager> Pochodzi od klasy <xref:System.Windows.Forms.BindingManagerBase> klasy. Użyj <xref:System.Windows.Forms.BindingContext> do zwrócenia jedną <xref:System.Windows.Forms.CurrencyManager> lub <xref:System.Windows.Forms.PropertyManager>. Faktyczny obiekt zwrócony zależy od źródła danych i element członkowski danych przekazany do <xref:System.Windows.Forms.BindingContext.Item%2A> właściwość <xref:System.Windows.Forms.BindingContext>. Jeśli źródło danych jest obiektem, który może zwracać jedną właściwość (zamiast listy obiektów), typ będzie <xref:System.Windows.Forms.PropertyManager>. Na przykład, jeśli określisz <xref:System.Windows.Forms.TextBox> jako źródło danych <xref:System.Windows.Forms.PropertyManager> zostaną zwrócone. Jeśli z drugiej strony, źródła danych jest obiektem, który implementuje <xref:System.Collections.IList>, <xref:System.ComponentModel.IListSource>, lub <xref:System.ComponentModel.IBindingList> interfejsu <xref:System.Windows.Forms.CurrencyManager> zostaną zwrócone.  
  
 <xref:System.Windows.Forms.BindingManagerBase.Current%2A> Właściwość zwraca bieżący element na liście podstawowej. Aby zmienić bieżący element, należy ustawić <xref:System.Windows.Forms.BindingManagerBase.Position%2A> właściwości na nową wartość. Wartość musi być większa niż 0 i musi być mniejsza niż wartość <xref:System.Windows.Forms.BindingManagerBase.Count%2A> właściwości.  
  
 Jeśli dane bazowe źródło implementuje <xref:System.ComponentModel.IBindingList> interfejsu, a <xref:System.ComponentModel.IBindingList.AllowNew%2A> właściwość jest ustawiona na `true`, możesz użyć <xref:System.Windows.Forms.CurrencyManager.AddNew%2A> metody.  
  
   
  
## Examples  
 Poniższy kod przykładowy tworzy powiązania <xref:System.Windows.Forms.TextBox> kontrolki z kolumną w <xref:System.Data.DataTable>, pobiera <xref:System.Windows.Forms.CurrencyManager> dla powiązania i ustawia jego położenie.  
  
 [!code-cpp[Classic CurrencyManager Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic CurrencyManager Example/CPP/source.cpp#1)]
 [!code-csharp[Classic CurrencyManager Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic CurrencyManager Example/CS/source.cs#1)]
 [!code-vb[Classic CurrencyManager Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic CurrencyManager Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.BindingsCollection" />
    <altmember cref="T:System.Windows.Forms.BindingContext" />
    <altmember cref="T:System.Windows.Forms.Binding" />
  </Docs>
  <Members>
    <Member MemberName="AddNew">
      <MemberSignature Language="C#" Value="public override void AddNew ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void AddNew() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CurrencyManager.AddNew" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub AddNew ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void AddNew();" />
      <MemberSignature Language="F#" Value="override this.AddNew : unit -&gt; unit" Usage="currencyManager.AddNew " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Dodaje nowy element do listy źródłowej.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda jest obsługiwana tylko wtedy, gdy źródło danych implementuje <xref:System.ComponentModel.IBindingList> interfejsu i źródło danych umożliwia dodawanie wierszy (<xref:System.ComponentModel.IBindingList.AllowNew%2A> jest `true`).  
  
> [!NOTE]
>  Ta właściwość zaprojektowano tak, aby umożliwić formanty powiązane z złożonych, takie jak <xref:System.Windows.Forms.DataGrid> formantu, aby dodać nowe elementy, aby wyświetlić listę.  
  
 Zazwyczaj ta właściwość jest używana tylko wtedy, gdy tworzysz własny formant, który zawiera <xref:System.Windows.Forms.CurrencyManager>. Inny sposób, aby dodać elementy, jeśli źródło danych jest <xref:System.Data.DataView>, użyj <xref:System.Data.DataView.AddNew%2A?displayProperty=nameWithType> metody <xref:System.Data.DataView> klasy. Jeśli źródło danych jest <xref:System.Data.DataTable>, użyj <xref:System.Data.DataTable.NewRow%2A> metody i Dodaj wiersz, aby <xref:System.Data.DataRowCollection>.  
  
   
  
## Examples  
 Poniższy przykład kodu dodaje nowy element do listy z <xref:System.Windows.Forms.CurrencyManager.AddNew%2A> metody.  
  
 [!code-cpp[Classic CurrencyManager.AddNew Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic CurrencyManager.AddNew Example/CPP/source.cpp#1)]
 [!code-csharp[Classic CurrencyManager.AddNew Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic CurrencyManager.AddNew Example/CS/source.cs#1)]
 [!code-vb[Classic CurrencyManager.AddNew Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic CurrencyManager.AddNew Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.NotSupportedException">Źródła danych nie zawiera implementacji <see cref="T:System.ComponentModel.IBindingList" />, lub źródła danych został zgłoszony wyjątek, ponieważ użytkownik próbował dodać wiersz, tylko do odczytu lub ma stały rozmiar <see cref="T:System.Data.DataView" />.</exception>
        <altmember cref="P:System.ComponentModel.IBindingList.AllowNew" />
        <altmember cref="M:System.Data.DataView.AddNew" />
        <altmember cref="M:System.Data.DataTable.NewRow" />
      </Docs>
    </Member>
    <Member MemberName="CancelCurrentEdit">
      <MemberSignature Language="C#" Value="public override void CancelCurrentEdit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void CancelCurrentEdit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CurrencyManager.CancelCurrentEdit" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub CancelCurrentEdit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void CancelCurrentEdit();" />
      <MemberSignature Language="F#" Value="override this.CancelCurrentEdit : unit -&gt; unit" Usage="currencyManager.CancelCurrentEdit " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Anuluje bieżącą operację edycji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda jest obsługiwana tylko wtedy, gdy obiekty zawarte w źródle danych implementują <xref:System.ComponentModel.IEditableObject> interfejsu. Jeśli obiektów znajdujących się w źródle danych nie należy implementować <xref:System.ComponentModel.IEditableObject> interfejsu, zmiany wprowadzone dane nie zostaną odrzucone.  
  
> [!NOTE]
>  Ta właściwość została zaprojektowana do użycia przez złożonych kontrolek powiązanych z danymi, takie jak <xref:System.Windows.Forms.DataGrid> formantu, aby anulować je. Na przykład, gdy użytkownik naciśnie klawisz ESC <xref:System.Windows.Forms.CurrencyManager.CancelCurrentEdit%2A> wywoływana jest metoda <xref:System.Windows.Forms.CurrencyManager> dla <xref:System.Windows.Forms.DataGrid>. Jeśli tworzysz formant, który wymaga to te same funkcje, nie należy używać tej metody. Zamiast tego należy użyć <xref:System.Data.DataRowView.CancelEdit%2A> metody <xref:System.Data.DataRowView> klasy.  
  
   
  
## Examples  
 Poniższy przykład kodu wykorzystuje <xref:System.Windows.Forms.CurrencyManager.CancelCurrentEdit%2A> gdy użytkownik naciśnie klawisz ESC.  
  
 [!code-cpp[Classic CurrencyManager.CancelCurrentEdit Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic CurrencyManager.CancelCurrentEdit Example/CPP/source.cpp#1)]
 [!code-csharp[Classic CurrencyManager.CancelCurrentEdit Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic CurrencyManager.CancelCurrentEdit Example/CS/source.cs#1)]
 [!code-vb[Classic CurrencyManager.CancelCurrentEdit Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic CurrencyManager.CancelCurrentEdit Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.CurrencyManager.EndCurrentEdit" />
      </Docs>
    </Member>
    <Member MemberName="CheckEmpty">
      <MemberSignature Language="C#" Value="protected void CheckEmpty ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void CheckEmpty() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CurrencyManager.CheckEmpty" />
      <MemberSignature Language="VB.NET" Value="Protected Sub CheckEmpty ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void CheckEmpty();" />
      <MemberSignature Language="F#" Value="member this.CheckEmpty : unit -&gt; unit" Usage="currencyManager.CheckEmpty " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zgłasza wyjątek, jeśli nie są znane lub lista jest pusta.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.Exception">Nie są znane lub lista jest pusta.</exception>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public override int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.CurrencyManager.Count" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Windows.Forms.CurrencyManager.Count" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera liczbę elementów na liście.</summary>
        <value>Liczba elementów na liście.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj właściwości, aby określić, gdy zostanie osiągnięty koniec listy. Ponieważ <xref:System.Windows.Forms.CurrencyManager> przechowuje 0 tablicę elementów, koniec listy jest zawsze <xref:System.Windows.Forms.CurrencyManager.Count%2A> minus jeden.  
  
   
  
## Examples  
 Poniższy przykład kodu iteruje po liście aż do końcowego elementu ustalany na podstawie <xref:System.Windows.Forms.CurrencyManager.Count%2A> właściwość zostanie osiągnięty.  
  
 [!code-cpp[Classic CurrencyManager.Count Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic CurrencyManager.Count Example/CPP/source.cpp#1)]
 [!code-csharp[Classic CurrencyManager.Count Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic CurrencyManager.Count Example/CS/source.cs#1)]
 [!code-vb[Classic CurrencyManager.Count Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic CurrencyManager.Count Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.CurrencyManager.List" />
        <altmember cref="P:System.Windows.Forms.CurrencyManager.Position" />
        <altmember cref="P:System.Windows.Forms.CurrencyManager.Current" />
      </Docs>
    </Member>
    <Member MemberName="Current">
      <MemberSignature Language="C#" Value="public override object Current { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Current" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.CurrencyManager.Current" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property Current As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Object ^ Current { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Current : obj" Usage="System.Windows.Forms.CurrencyManager.Current" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera bieżący element na liście.</summary>
        <value>Element listy typu <see cref="T:System.Object" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uzyskać bieżący element, należy znać jego typu danych, aby go rzutować poprawnie. Na przykład, jeśli źródło danych jest <xref:System.Data.DataView> lub <xref:System.Data.DataTable>, należy rzutować bieżącego elementu jako <xref:System.Data.DataRowView> obiektu.  
  
   
  
## Examples  
 Poniższy przykład kodu wykorzystuje <xref:System.Windows.Forms.CurrencyManager.Current%2A> właściwość do wydrukowania `ContactName` pole bieżącego elementu na liście.  
  
 [!code-cpp[Classic CurrencyManager.Current Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic CurrencyManager.Current Example/CPP/source.cpp#1)]
 [!code-csharp[Classic CurrencyManager.Current Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic CurrencyManager.Current Example/CS/source.cs#1)]
 [!code-vb[Classic CurrencyManager.Current Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic CurrencyManager.Current Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Data.DataRowView" />
        <altmember cref="P:System.Windows.Forms.CurrencyManager.List" />
        <altmember cref="P:System.Windows.Forms.CurrencyManager.Position" />
        <altmember cref="P:System.Windows.Forms.CurrencyManager.Count" />
      </Docs>
    </Member>
    <Member MemberName="EndCurrentEdit">
      <MemberSignature Language="C#" Value="public override void EndCurrentEdit ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void EndCurrentEdit() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CurrencyManager.EndCurrentEdit" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub EndCurrentEdit ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void EndCurrentEdit();" />
      <MemberSignature Language="F#" Value="override this.EndCurrentEdit : unit -&gt; unit" Usage="currencyManager.EndCurrentEdit " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Kończy bieżącą operację edycji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda jest obsługiwana tylko wtedy, gdy obiekty zawarte w źródle danych implementują <xref:System.ComponentModel.IEditableObject> lub <xref:System.ComponentModel.ICancelAddNew> interfejsów.  
  
> [!NOTE]
>  Ta właściwość została zaprojektowana do użycia przez złożonych kontrolek powiązanych z danymi, takie jak <xref:System.Windows.Forms.DataGridView> kontroli. Jeśli tworzysz formant, który wymaga to te same funkcje, nie należy używać tej metody. Zamiast tego Jeśli źródło danych <xref:System.Data.DataView> lub <xref:System.Data.DataTable>, użyj <xref:System.Data.DataRowView.EndEdit%2A> metody <xref:System.Data.DataRowView> klasy.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje sposób używania <xref:System.Windows.Forms.CurrencyManager.EndCurrentEdit%2A> metody.  
  
 [!code-cpp[Classic CurrencyManager.EndCurrentEdit Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic CurrencyManager.EndCurrentEdit Example/CPP/source.cpp#1)]
 [!code-csharp[Classic CurrencyManager.EndCurrentEdit Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic CurrencyManager.EndCurrentEdit Example/CS/source.cs#1)]
 [!code-vb[Classic CurrencyManager.EndCurrentEdit Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic CurrencyManager.EndCurrentEdit Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.CurrencyManager.CancelCurrentEdit" />
        <altmember cref="T:System.ComponentModel.IEditableObject" />
        <altmember cref="T:System.ComponentModel.ICancelAddNew" />
      </Docs>
    </Member>
    <Member MemberName="finalType">
      <MemberSignature Language="C#" Value="protected Type finalType;" />
      <MemberSignature Language="ILAsm" Value=".field family class System.Type finalType" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.CurrencyManager.finalType" />
      <MemberSignature Language="VB.NET" Value="Protected finalType As Type " />
      <MemberSignature Language="C++ CLI" Value="protected: Type ^ finalType;" />
      <MemberSignature Language="F#" Value="val mutable finalType : Type" Usage="System.Windows.Forms.CurrencyManager.finalType" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Określa typ danych listy.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.ComponentModel.PropertyDescriptorCollection" />
      </Docs>
    </Member>
    <Member MemberName="GetItemProperties">
      <MemberSignature Language="C#" Value="public override System.ComponentModel.PropertyDescriptorCollection GetItemProperties ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance class System.ComponentModel.PropertyDescriptorCollection GetItemProperties() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CurrencyManager.GetItemProperties" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetItemProperties () As PropertyDescriptorCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::ComponentModel::PropertyDescriptorCollection ^ GetItemProperties();" />
      <MemberSignature Language="F#" Value="override this.GetItemProperties : unit -&gt; System.ComponentModel.PropertyDescriptorCollection" Usage="currencyManager.GetItemProperties " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.PropertyDescriptorCollection</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pobiera kolekcję deskryptora właściwości listy źródłowej.</summary>
        <returns>Element <see cref="T:System.ComponentModel.PropertyDescriptorCollection" /> dla listy.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.ComponentModel.PropertyDescriptorCollection> Dla <xref:System.Windows.Forms.CurrencyManager> służy do określania kolumny na liście.  
  
   
  
## Examples  
 Poniższy przykład kodu wykorzystuje <xref:System.Windows.Forms.CurrencyManager.GetItemProperties%2A> metodę, aby zwrócić <xref:System.ComponentModel.PropertyDescriptorCollection> dla <xref:System.Windows.Forms.BindingManagerBase>. Przykład następnie wyświetla <xref:System.ComponentModel.MemberDescriptor.Name%2A> i <xref:System.ComponentModel.PropertyDescriptor.PropertyType%2A> każdego <xref:System.ComponentModel.PropertyDescriptor> w kolekcji.  
  
 [!code-cpp[Classic CurrencyManager.GetItemProperties Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic CurrencyManager.GetItemProperties Example/CPP/source.cpp#1)]
 [!code-csharp[Classic CurrencyManager.GetItemProperties Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic CurrencyManager.GetItemProperties Example/CS/source.cs#1)]
 [!code-vb[Classic CurrencyManager.GetItemProperties Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic CurrencyManager.GetItemProperties Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.CurrencyManager.List" />
        <altmember cref="M:System.Windows.Forms.CurrencyManager.GetListName(System.Collections.ArrayList)" />
        <altmember cref="M:System.Windows.Forms.CurrencyManager.GetItemProperties" />
      </Docs>
    </Member>
    <Member MemberName="GetListName">
      <MemberSignature Language="C#" Value="protected internal override string GetListName (System.Collections.ArrayList listAccessors);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance string GetListName(class System.Collections.ArrayList listAccessors) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CurrencyManager.GetListName(System.Collections.ArrayList)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Function GetListName (listAccessors As ArrayList) As String" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override System::String ^ GetListName(System::Collections::ArrayList ^ listAccessors);" />
      <MemberSignature Language="F#" Value="override this.GetListName : System.Collections.ArrayList -&gt; string" Usage="currencyManager.GetListName listAccessors" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="listAccessors" Type="System.Collections.ArrayList" />
      </Parameters>
      <Docs>
        <param name="listAccessors">
          <see cref="T:System.Collections.ArrayList" /> Właściwości można znaleźć w źródle danych.</param>
        <summary>Pobiera nazwę listy, dostarczająca dane do powiązania przy użyciu określonego zestawu powiązanych właściwości.</summary>
        <returns>W przypadku powodzenia <see cref="T:System.String" /> zawierający nazwę listy, dostarczająca dane dla wiązania; w przeciwnym razie <see cref="F:System.String.Empty" /> ciągu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uzyskać <xref:System.Windows.Forms.CurrencyManager.GetListName%2A> metoda zakończy się powodzeniem, lista podstawowa musi być typu <xref:System.ComponentModel.ITypedList>.  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.CurrencyManager.GetItemProperties" />
      </Docs>
    </Member>
    <Member MemberName="ItemChanged">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.ItemChangedEventHandler ItemChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.ItemChangedEventHandler ItemChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.CurrencyManager.ItemChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ItemChanged As ItemChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::ItemChangedEventHandler ^ ItemChanged;" />
      <MemberSignature Language="F#" Value="member this.ItemChanged : System.Windows.Forms.ItemChangedEventHandler " Usage="member this.ItemChanged : System.Windows.Forms.ItemChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ItemChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy bieżący element został zmieniony.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.CurrencyManager.ItemChanged> Zdarzeń ma miejsce, gdy użytkownik wywołuje <xref:System.Windows.Forms.BindingManagerBase.ResumeBinding%2A> lub <xref:System.Windows.Forms.BindingManagerBase.SuspendBinding%2A> metody.  
  
 <xref:System.Windows.Forms.CurrencyManager.ItemChanged> Wystąpi zdarzenie, tylko gdy sam element zostało zmienione w jakikolwiek sposób. Na przykład jeśli wartość elementu została zmieniona z 10 w 42, zdarzenie wystąpi. To nie należy mylić z <xref:System.Windows.Forms.BindingManagerBase.PositionChanged> zdarzeń, w którym element został zmieniony na nowy element.  
  
 Zdarzenia będą również wystąpić, jeśli zmiany danych bazowych. Na przykład, jeśli zmienisz wartość <xref:System.Data.DataRowView>, <xref:System.Windows.Forms.CurrencyManager.ItemChanged> wystąpi zdarzenie.  
  
> [!NOTE]
>  Jeśli tworzysz własny formant, który używa <xref:System.Windows.Forms.CurrencyManager>, należy użyć <xref:System.ComponentModel.IBindingList.ListChanged?displayProperty=nameWithType> zamiast <xref:System.Windows.Forms.CurrencyManager.ItemChanged?displayProperty=nameWithType> zdarzeń. <xref:System.ComponentModel.ListChangedEventArgs.ListChangedType%2A> Właściwość <xref:System.ComponentModel.ListChangedEventArgs> umożliwia określenie typu akcji, która jest przeprowadzana w.  
  
 Aby uzyskać więcej informacji na temat obsługi zdarzeń, zobacz [Handling and Raising Events](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 Poniższy przykład kodu dodaje obsługę zdarzeń dla <xref:System.Windows.Forms.CurrencyManager.ItemChanged> i <xref:System.Windows.Forms.BindingManagerBase.PositionChanged> zdarzenia.  
  
 [!code-cpp[Classic CurrencyManager.ItemChanged Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic CurrencyManager.ItemChanged Example/CPP/source.cpp#1)]
 [!code-csharp[Classic CurrencyManager.ItemChanged Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic CurrencyManager.ItemChanged Example/CS/source.cs#1)]
 [!code-vb[Classic CurrencyManager.ItemChanged Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic CurrencyManager.ItemChanged Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.BindingManagerBase.PositionChanged" />
      </Docs>
    </Member>
    <Member MemberName="List">
      <MemberSignature Language="C#" Value="public System.Collections.IList List { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.IList List" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.CurrencyManager.List" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property List As IList" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Collections::IList ^ List { System::Collections::IList ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.List : System.Collections.IList" Usage="System.Windows.Forms.CurrencyManager.List" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.IList</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera listę dla tej <see cref="T:System.Windows.Forms.CurrencyManager" />.</summary>
        <value>
          <see cref="T:System.Collections.IList" /> Zawierający listę.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Obiekt zwrócony przez <xref:System.Windows.Forms.CurrencyManager.List%2A> właściwości mogą być rzutowane na dowolny typ, który implementuje <xref:System.Collections.IList> interfejsu. To będzie najczęściej służyć znany typ listy źródłowej. Na przykład, jeśli użytkownik jest powiązany z danymi <xref:System.Data.DataSet>, to podstawowa lista <xref:System.Data.DataView> (który implementuje <xref:System.Collections.IList>). Inne klasy, które implementują interfejs (nie jest to pełna lista) obejmują <xref:System.Array>, <xref:System.Collections.ArrayList>, i <xref:System.Collections.CollectionBase>.  
  
 Jak używać <xref:System.Windows.Forms.CurrencyManager.List%2A> właściwości zależy od klasy, która implementuje <xref:System.Collections.IList> interfejsu. Na przykład, można użyć <xref:System.Windows.Forms.CurrencyManager.List%2A> właściwości w celu określenia nazwy listy. Jeśli źródło danych implementuje <xref:System.ComponentModel.ITypedList> interfejsu, można użyć <xref:System.ComponentModel.ITypedList.GetListName%2A> metodę, aby zwrócić nazwę bieżącej tabeli. Jest to pokazane w języku C# poniższy kod:  
  
```csharp  
private void PrintCurrentListName(DataGrid myDataGrid){   
   CurrencyManager myCM = (CurrencyManager)   
   BindingContext[myDataGrid.DataSource, myDataGrid.DataMember];   
   IList myList = myCM.List;   
   ITypedList thisList = (ITypedList) myList;   
   Console.WriteLine(thisList.GetListName(null));   
}  
```  
  
   
  
## Examples  
 Poniższy przykład kodu umożliwia użytkownikom edytowanie zestawu rekordów, ale nie dodawać nowych użytkowników. W <xref:System.Windows.Forms.DataGrid.Navigate> zdarzenia <xref:System.Windows.Forms.DataGrid> kontroli <xref:System.Collections.IList> zwrócone przez <xref:System.Windows.Forms.CurrencyManager.List%2A> właściwość jest rzutowany na <xref:System.Data.DataView> zmiennej. <xref:System.Data.DataView.AllowNew%2A> Właściwość <xref:System.Data.DataView> ustawiono `false`.  
  
 [!code-cpp[CurrencyManager.List Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/CurrencyManager.List Example/CPP/list.cpp#1)]
 [!code-csharp[CurrencyManager.List Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/CurrencyManager.List Example/CS/list.cs#1)]
 [!code-vb[CurrencyManager.List Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/CurrencyManager.List Example/VB/list.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.CurrencyManager.Position" />
        <altmember cref="P:System.Windows.Forms.CurrencyManager.Current" />
        <altmember cref="P:System.Windows.Forms.CurrencyManager.Count" />
      </Docs>
    </Member>
    <Member MemberName="ListChanged">
      <MemberSignature Language="C#" Value="public event System.ComponentModel.ListChangedEventHandler ListChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ComponentModel.ListChangedEventHandler ListChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.CurrencyManager.ListChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event ListChanged As ListChangedEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::ComponentModel::ListChangedEventHandler ^ ListChanged;" />
      <MemberSignature Language="F#" Value="member this.ListChanged : System.ComponentModel.ListChangedEventHandler " Usage="member this.ListChanged : System.ComponentModel.ListChangedEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.ListChangedEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy zmieni się na liście zmienia lub element na liście.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.CurrencyManager.ListChanged> Zdarzeń jest generowany przez <xref:System.Windows.Forms.CurrencyManager> klasy, gdy zostaną wprowadzone zmiany do elementu, przy użyciu metod, takich jak <xref:System.Windows.Forms.CurrencyManager.EndCurrentEdit%2A>, <xref:System.Windows.Forms.CurrencyManager.CancelCurrentEdit%2A>, i <xref:System.Windows.Forms.CurrencyManager.Refresh%2A>. To zdarzenie może również wystąpić, gdy źródło danych jest edytowany bezpośrednio, jeśli implementuje <xref:System.ComponentModel.IBindingListView> interfejsu.  
  
 Skojarzone `OnListChanged` metoda jest metodą prywatnych w tej klasie.  
  
 Aby uzyskać więcej informacji na temat obsługi zdarzeń, zobacz [Handling and Raising Events](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje użycie tego elementu członkowskiego. W tym przykładzie program obsługi zdarzeń raporty w momencie wystąpienia <xref:System.Windows.Forms.CurrencyManager.ListChanged> zdarzeń. Ten raport pomaga, aby dowiedzieć się, gdy zdarzenie występuje i mogą pomóc w debugowaniu. Aby zgłosić na wiele zdarzeń lub zdarzeń, które często występują, rozważ zastąpienie <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> z <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> lub dołączane wiadomość w wielowierszowym <xref:System.Windows.Forms.TextBox>.  
  
 Aby uruchomić przykładowy kod, wkleić go do projektu, który zawiera wystąpienie typu <xref:System.Windows.Forms.CurrencyManager> o nazwie `CurrencyManager1`. Upewnij się, że program obsługi zdarzeń jest skojarzony z <xref:System.Windows.Forms.CurrencyManager.ListChanged> zdarzeń.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#192](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#192)]
 [!code-vb[System.Windows.Forms.EventExamples#192](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#192)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.CurrencyManager.ItemChanged" />
        <altmember cref="E:System.Windows.Forms.BindingManagerBase.CurrentChanged" />
      </Docs>
    </Member>
    <Member MemberName="listposition">
      <MemberSignature Language="C#" Value="protected int listposition;" />
      <MemberSignature Language="ILAsm" Value=".field family int32 listposition" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.CurrencyManager.listposition" />
      <MemberSignature Language="VB.NET" Value="Protected listposition As Integer " />
      <MemberSignature Language="C++ CLI" Value="protected: int listposition;" />
      <MemberSignature Language="F#" Value="val mutable listposition : int" Usage="System.Windows.Forms.CurrencyManager.listposition" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Określa bieżącą pozycję <see cref="T:System.Windows.Forms.CurrencyManager" /> na liście.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli wartość <xref:System.Windows.Forms.CurrencyManager.Count%2A> właściwości jest większa niż 0, <xref:System.Windows.Forms.CurrencyManager.listposition> pola jest liczbą z zakresu od 0 i <xref:System.Windows.Forms.CurrencyManager.Count%2A> minus 1. Jeśli <xref:System.Windows.Forms.CurrencyManager.Count%2A> ma wartość 0, <xref:System.Windows.Forms.CurrencyManager.listposition> wynosi -1.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.CurrencyManager.Position" />
      </Docs>
    </Member>
    <Member MemberName="MetaDataChanged">
      <MemberSignature Language="C#" Value="public event EventHandler MetaDataChanged;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler MetaDataChanged" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.CurrencyManager.MetaDataChanged" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MetaDataChanged As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ MetaDataChanged;" />
      <MemberSignature Language="F#" Value="member this.MetaDataChanged : EventHandler " Usage="member this.MetaDataChanged : System.EventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy metadane <see cref="P:System.Windows.Forms.CurrencyManager.List" /> został zmieniony.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metadane <xref:System.Windows.Forms.CurrencyManager.List%2A> składa się z schemat bazowego <xref:System.Windows.Forms.Binding.DataSource%2A?displayProperty=nameWithType>. <xref:System.Windows.Forms.CurrencyManager.MetaDataChanged> Zdarzenie jest zgłaszane w przypadku tego schemat uległ zmianie. Na przykład <xref:System.Windows.Forms.CurrencyManager.MetaDataChanged> zdarzenie jest zgłaszane w przypadku <xref:System.Data.DataColumn> programowe jest dodawany do <xref:System.Data.DataTable>.  
  
 Aby uzyskać więcej informacji na temat obsługi zdarzeń, zobacz [Handling and Raising Events](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje użycie tego elementu członkowskiego. W tym przykładzie program obsługi zdarzeń raporty w momencie wystąpienia <xref:System.Windows.Forms.CurrencyManager.MetaDataChanged> zdarzeń. Ten raport pomaga, aby dowiedzieć się, gdy zdarzenie występuje i mogą pomóc w debugowaniu. Aby zgłosić na wiele zdarzeń lub zdarzeń, które często występują, rozważ zastąpienie <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> z <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> lub dołączane wiadomość w wielowierszowym <xref:System.Windows.Forms.TextBox>.  
  
 Aby uruchomić przykładowy kod, wkleić go do projektu, który zawiera wystąpienie typu <xref:System.Windows.Forms.CurrencyManager> o nazwie `CurrencyManager1`. Upewnij się, że program obsługi zdarzeń jest skojarzony z <xref:System.Windows.Forms.CurrencyManager.MetaDataChanged> zdarzeń.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#193](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#193)]
 [!code-vb[System.Windows.Forms.EventExamples#193](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#193)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Collections.IList" />
      </Docs>
    </Member>
    <Member MemberName="OnCurrentChanged">
      <MemberSignature Language="C#" Value="protected internal override void OnCurrentChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnCurrentChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CurrencyManager.OnCurrentChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnCurrentChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnCurrentChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnCurrentChanged : EventArgs -&gt; unit" Usage="currencyManager.OnCurrentChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.EventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywołuje <see cref="E:System.Windows.Forms.BindingManagerBase.CurrentChanged" /> zdarzeń.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.BindingManagerBase.OnCurrentChanged(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnCurrentItemChanged">
      <MemberSignature Language="C#" Value="protected internal override void OnCurrentItemChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig virtual instance void OnCurrentItemChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CurrencyManager.OnCurrentItemChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overrides Sub OnCurrentItemChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; override void OnCurrentItemChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="override this.OnCurrentItemChanged : EventArgs -&gt; unit" Usage="currencyManager.OnCurrentItemChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.EventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywołuje <see cref="E:System.Windows.Forms.BindingManagerBase.CurrentItemChanged" /> zdarzeń.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.BindingManagerBase.OnCurrentItemChanged(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnItemChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnItemChanged (System.Windows.Forms.ItemChangedEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnItemChanged(class System.Windows.Forms.ItemChangedEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CurrencyManager.OnItemChanged(System.Windows.Forms.ItemChangedEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnItemChanged (e As ItemChangedEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnItemChanged(System::Windows::Forms::ItemChangedEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnItemChanged : System.Windows.Forms.ItemChangedEventArgs -&gt; unit&#xA;override this.OnItemChanged : System.Windows.Forms.ItemChangedEventArgs -&gt; unit" Usage="currencyManager.OnItemChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.ItemChangedEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.Windows.Forms.ItemChangedEventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywołuje <see cref="E:System.Windows.Forms.CurrencyManager.ItemChanged" /> zdarzeń.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podnoszenie zdarzenia wywołuje program obsługi zdarzeń przez delegata. Aby uzyskać więcej informacji, zobacz [Handling and Raising Events](~/docs/standard/events/index.md).  
  
 <xref:System.Windows.Forms.CurrencyManager.OnItemChanged%2A> Metoda umożliwia również klasy pochodne obsłużyć zdarzenie bez dołączając delegata. Jest to preferowana metoda obsługi zdarzeń w klasie pochodnej.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Podczas zastępowania <see cref="M:System.Windows.Forms.CurrencyManager.OnItemChanged(System.Windows.Forms.ItemChangedEventArgs)" /> w klasie pochodnej, pamiętaj wywołać klasy bazowej <see cref="M:System.Windows.Forms.CurrencyManager.OnItemChanged(System.Windows.Forms.ItemChangedEventArgs)" /> metody, która zarejestrowana delegaci otrzymają zdarzenie.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.CurrencyManager.ItemChanged" />
        <altmember cref="M:System.Windows.Forms.CurrencyManager.OnCurrentItemChanged(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="OnMetaDataChanged">
      <MemberSignature Language="C#" Value="protected internal void OnMetaDataChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void OnMetaDataChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CurrencyManager.OnMetaDataChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub OnMetaDataChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; void OnMetaDataChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.OnMetaDataChanged : EventArgs -&gt; unit" Usage="currencyManager.OnMetaDataChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.EventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywołuje <see cref="E:System.Windows.Forms.CurrencyManager.MetaDataChanged" /> zdarzeń.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podnoszenie zdarzenia wywołuje program obsługi zdarzeń przez delegata. Aby uzyskać więcej informacji, zobacz [Handling and Raising Events](~/docs/standard/events/index.md).  
  
 <xref:System.Windows.Forms.CurrencyManager.OnMetaDataChanged%2A> Metoda umożliwia również klasy pochodne obsłużyć zdarzenie bez dołączając delegata. Jest to preferowana metoda obsługi zdarzeń w klasie pochodnej.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Podczas zastępowania <see cref="M:System.Windows.Forms.CurrencyManager.OnMetaDataChanged(System.EventArgs)" /> w klasie pochodnej, pamiętaj wywołać klasy bazowej <see cref="M:System.Windows.Forms.CurrencyManager.OnMetaDataChanged(System.EventArgs)" /> metody, która zarejestrowana delegaci otrzymają zdarzenie.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnPositionChanged">
      <MemberSignature Language="C#" Value="protected virtual void OnPositionChanged (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPositionChanged(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CurrencyManager.OnPositionChanged(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPositionChanged (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPositionChanged(EventArgs ^ e);" />
      <MemberSignature Language="F#" Value="abstract member OnPositionChanged : EventArgs -&gt; unit&#xA;override this.OnPositionChanged : EventArgs -&gt; unit" Usage="currencyManager.OnPositionChanged e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.EventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Wywołuje <see cref="E:System.Windows.Forms.BindingManagerBase.PositionChanged" /> zdarzeń.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podnoszenie zdarzenia wywołuje program obsługi zdarzeń przez delegata. Aby uzyskać więcej informacji, zobacz [Handling and Raising Events](~/docs/standard/events/index.md).  
  
 <xref:System.Windows.Forms.CurrencyManager.OnPositionChanged%2A> Metoda umożliwia również klasy pochodne obsłużyć zdarzenie bez dołączając delegata. Jest to preferowana metoda obsługi zdarzeń w klasie pochodnej.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>Podczas zastępowania <see cref="M:System.Windows.Forms.CurrencyManager.OnPositionChanged(System.EventArgs)" /> w klasie pochodnej, pamiętaj wywołać klasy bazowej <see cref="M:System.Windows.Forms.CurrencyManager.OnPositionChanged(System.EventArgs)" /> metody, która zarejestrowana delegaci otrzymają zdarzenie.</para>
        </block>
        <altmember cref="E:System.Windows.Forms.BindingManagerBase.PositionChanged" />
        <altmember cref="M:System.Windows.Forms.CurrencyManager.OnPositionChanged(System.EventArgs)" />
        <altmember cref="M:System.Windows.Forms.CurrencyManager.OnCurrentChanged(System.EventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="Position">
      <MemberSignature Language="C#" Value="public override int Position { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Position" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.CurrencyManager.Position" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Property Position As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property int Position { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.Position : int with get, set" Usage="System.Windows.Forms.CurrencyManager.Position" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub Ustawia położenie, które są na liście.</summary>
        <value>Liczbą z zakresu od 0 i <see cref="P:System.Windows.Forms.CurrencyManager.Count" /> minus 1.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ważne właściwości <xref:System.Windows.Forms.CurrencyManager> klasa jest <xref:System.Windows.Forms.CurrencyManager.Position%2A> właściwości. Na liście elementów można wyświetlić tylko jeden element z całej listy. Aby ustalić, który element jest wyświetlany, należy ustawić <xref:System.Windows.Forms.CurrencyManager.Position%2A> się liczbą z zakresu od 0 (począwszy od listy) i <xref:System.Windows.Forms.CurrencyManager.Count%2A> minus 1 (koniec listy).  
  
 W związku z tym <xref:System.Windows.Forms.CurrencyManager.Position%2A> określa walutę lub miejsce na liście wszystkie formanty powiązane z takie same <xref:System.Windows.Forms.CurrencyManager>. Na przykład Wyobraź sobie listę składającą się z dwóch kolumn o nazwie "FirstName" i "LastName". Dwa <xref:System.Windows.Forms.TextBox> formanty są powiązane z tej samej listy; pierwszy formant jest powiązany z pierwszej kolumny, a drugi formant jest powiązany z drugiej kolumny. Gdy <xref:System.Windows.Forms.CurrencyManager.Position%2A> typowe <xref:System.Windows.Forms.CurrencyManager> jest ustawiony do położenia trzeciego oba formanty wyświetlania odpowiednie wartości dla tej pozycji na liście. Innymi słowy Jeśli element w położeniu trzech składa się z "John" imię i nazwisko "Smith", formanty związane wyświetli "John" i "Smith".  
  
   
  
## Examples  
 Poniższy kod przykłady użycia <xref:System.Windows.Forms.CurrencyManager.Position%2A> właściwości, aby umożliwić przeglądanie za pomocą listy.  
  
 [!code-cpp[Classic CurrencyManager.Position Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic CurrencyManager.Position Example/CPP/source.cpp#1)]
 [!code-csharp[Classic CurrencyManager.Position Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic CurrencyManager.Position Example/CS/source.cs#1)]
 [!code-vb[Classic CurrencyManager.Position Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic CurrencyManager.Position Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.CurrencyManager.List" />
        <altmember cref="P:System.Windows.Forms.CurrencyManager.Count" />
        <altmember cref="P:System.Windows.Forms.CurrencyManager.Current" />
      </Docs>
    </Member>
    <Member MemberName="Refresh">
      <MemberSignature Language="C#" Value="public void Refresh ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Refresh() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CurrencyManager.Refresh" />
      <MemberSignature Language="VB.NET" Value="Public Sub Refresh ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Refresh();" />
      <MemberSignature Language="F#" Value="member this.Refresh : unit -&gt; unit" Usage="currencyManager.Refresh " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Wymusza odnowienia populacji, listy powiązane z danymi.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Windows.Forms.CurrencyManager.Refresh%2A> metody, gdy źródło danych nie obsługuje powiadomień, gdy zostanie on zmieniony (na przykład, jeśli jest <xref:System.Array>).  
  
   
  
## Examples  
 Poniższy przykład kodu tworzy tablicę i wiąże go do <xref:System.Windows.Forms.TextBox> kontroli, a następnie zmiany jedną wartość. <xref:System.Windows.Forms.CurrencyManager.Refresh%2A> Można wywołać metody, aby zaktualizować wartości wyświetlanej przez <xref:System.Windows.Forms.TextBox> kontroli.  
  
 [!code-cpp[Classic CurrencyManager.Refresh Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic CurrencyManager.Refresh Example/CPP/source.cpp#1)]
 [!code-csharp[Classic CurrencyManager.Refresh Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic CurrencyManager.Refresh Example/CS/source.cs#1)]
 [!code-vb[Classic CurrencyManager.Refresh Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic CurrencyManager.Refresh Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.CurrencyManager.List" />
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public override void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CurrencyManager.RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub RemoveAt (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void RemoveAt(int index);" />
      <MemberSignature Language="F#" Value="override this.RemoveAt : int -&gt; unit" Usage="currencyManager.RemoveAt index" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Indeks elementu do usunięcia z listy.</param>
        <summary>Usuwa element pod określonym indeksem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.CurrencyManager.RemoveAt%2A> Metodę zaprojektowano tak, aby umożliwić złożonych kontrolek, takich jak <xref:System.Windows.Forms.DataGrid> formantu, aby usunąć elementy z listy. Nie należy używać tej metody do faktycznego usuwania elementów. Zamiast tego należy użyć <xref:System.Data.DataView.Delete%2A> metody <xref:System.Data.DataView> klasy, aby usunąć elementy.  
  
   
  
## Examples  
 Poniższy przykład kodu wykorzystuje <xref:System.Windows.Forms.CurrencyManager.RemoveAt%2A> metodę, aby usunąć element na pozycji 0 na liście.  
  
 [!code-cpp[Classic CurrencyManager.RemoveAt Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic CurrencyManager.RemoveAt Example/CPP/source.cpp#1)]
 [!code-csharp[Classic CurrencyManager.RemoveAt Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic CurrencyManager.RemoveAt Example/CS/source.cs#1)]
 [!code-vb[Classic CurrencyManager.RemoveAt Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic CurrencyManager.RemoveAt Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.IndexOutOfRangeException">Istnieje bez wiersza o określonej <paramref name="index" />.</exception>
        <altmember cref="M:System.Windows.Forms.CurrencyManager.AddNew" />
        <altmember cref="P:System.Windows.Forms.CurrencyManager.Count" />
      </Docs>
    </Member>
    <Member MemberName="ResumeBinding">
      <MemberSignature Language="C#" Value="public override void ResumeBinding ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void ResumeBinding() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CurrencyManager.ResumeBinding" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub ResumeBinding ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void ResumeBinding();" />
      <MemberSignature Language="F#" Value="override this.ResumeBinding : unit -&gt; unit" Usage="currencyManager.ResumeBinding " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Wznawia powiązanie danych.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.CurrencyManager.SuspendBinding%2A> i <xref:System.Windows.Forms.CurrencyManager.ResumeBinding%2A> są dwie metody, które umożliwia tymczasowe zawieszenia i wznowienia w scenariuszu powiązania proste dane. Jeśli użytkownik musi mieć możliwość zmiany edycyjne kilka pól danych przed wystąpieniem sprawdzania poprawności, będzie zazwyczaj zawiesić powiązanie danych. Na przykład jeśli jedno pole, należy zmienić zgodnie z sekundy, ale w przypadku, gdy sprawdzanie poprawności pierwszego pola spowoduje, że drugie pole jest błędny.  
  
> [!NOTE]
>  Za pomocą <xref:System.Windows.Forms.CurrencyManager.SuspendBinding%2A> zapobiega wypychania do źródła danych do momentu zmiany <xref:System.Windows.Forms.CurrencyManager.ResumeBinding%2A> zostaje wywołany, ale nie uniemożliwia zmiany w źródle danych wpływających na formanty związane. Kontrolki używające złożone powiązanie danych, takich jak <xref:System.Windows.Forms.DataGridView> sterowania, zaktualizować ich wartości, w oparciu o zdarzenia zmiany, takie jak <xref:System.Windows.Forms.CurrencyManager.ListChanged> zdarzeń. Wywołanie tej metody nie uniemożliwi tych zdarzeń mających miejsce. Z tego powodu <xref:System.Windows.Forms.CurrencyManager.SuspendBinding%2A> i <xref:System.Windows.Forms.CurrencyManager.ResumeBinding%2A> są przeznaczone do użytku z formantów powiązanych z prostego, takich jak <xref:System.Windows.Forms.TextBox>. Alternatywnie, można użyć tych metod w scenariuszu złożone powiązanie, jeśli zostanie pominięty <xref:System.Windows.Forms.BindingSource.ListChanged> zdarzenia, ustawiając <xref:System.Windows.Forms.BindingSource.RaiseListChangedEvents%2A> właściwość `false`.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje sposób używania <xref:System.Windows.Forms.CurrencyManager.ResumeBinding%2A> metody.  
  
 [!code-cpp[BindingManagerBase_Suspend_Resume_Binding#2](~/samples/snippets/cpp/VS_Snippets_Winforms/BindingManagerBase_Suspend_Resume_Binding/CPP/bindingmanagerbase_suspend_resume_binding.cpp#2)]
 [!code-csharp[BindingManagerBase_Suspend_Resume_Binding#2](~/samples/snippets/csharp/VS_Snippets_Winforms/BindingManagerBase_Suspend_Resume_Binding/CS/bindingmanagerbase_suspend_resume_binding.cs#2)]
 [!code-vb[BindingManagerBase_Suspend_Resume_Binding#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/BindingManagerBase_Suspend_Resume_Binding/VB/bindingmanagerbase_suspend_resume_binding.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.BindingSource.RaiseListChangedEvents" />
        <altmember cref="E:System.Windows.Forms.BindingManagerBase.BindingComplete" />
        <altmember cref="M:System.Windows.Forms.CurrencyManager.SuspendBinding" />
        <altmember cref="M:System.Windows.Forms.BindingManagerBase.UpdateIsBinding" />
        <altmember cref="P:System.Windows.Forms.BindingManagerBase.Bindings" />
      </Docs>
    </Member>
    <Member MemberName="SuspendBinding">
      <MemberSignature Language="C#" Value="public override void SuspendBinding ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void SuspendBinding() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CurrencyManager.SuspendBinding" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub SuspendBinding ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void SuspendBinding();" />
      <MemberSignature Language="F#" Value="override this.SuspendBinding : unit -&gt; unit" Usage="currencyManager.SuspendBinding " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Wstrzymuje powiązania danych, co uniemożliwia aktualizowanie źródła danych powiązanych zmian.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.CurrencyManager.SuspendBinding%2A> i <xref:System.Windows.Forms.BindingSource.ResumeBinding%2A> metody umożliwiają tymczasowego zawieszenia i wznowienia powiązanie danych w scenariuszu proste powiązanie. Jeśli użytkownik musi edytujesz kilka pól danych przed wystąpieniem sprawdzania poprawności, będzie zazwyczaj zawiesić powiązanie danych. Na przykład jeśli jedno pole, należy zmienić zgodnie z sekundy, ale w przypadku, gdy sprawdzanie poprawności pierwszego pola spowoduje, że drugie pole jest błędny.  
  
> [!NOTE]
>  <xref:System.Windows.Forms.BindingSource.SuspendBinding%2A> Zapobiega stosowane do źródła danych do momentu zmiany <xref:System.Windows.Forms.BindingSource.ResumeBinding%2A> jest wywoływane, ale nie faktycznie zapobiec żadnych zdarzeń. Kontrolki używające złożone powiązanie danych, takich jak <xref:System.Windows.Forms.DataGridView> sterowania, aby zaktualizować ich na podstawie zmian zdarzeń, takich jak <xref:System.Windows.Forms.CurrencyManager.ListChanged> zdarzeń. Dlatego wywołanie <xref:System.Windows.Forms.BindingSource.SuspendBinding%2A> nie uniemożliwi formanty powiązane z złożone odbierania zdarzeń, aby zaktualizować źródło danych. Z tego powodu <xref:System.Windows.Forms.BindingSource.SuspendBinding%2A> i <xref:System.Windows.Forms.BindingSource.ResumeBinding%2A> są przeznaczone do użytku z formantów powiązanych z prostego, takich jak <xref:System.Windows.Forms.TextBox> kontroli. Alternatywnie, można użyć tych metod w scenariuszu złożone powiązanie, jeśli zostanie pominięty <xref:System.Windows.Forms.BindingSource.ListChanged> zdarzenia, ustawiając <xref:System.Windows.Forms.BindingSource.RaiseListChangedEvents%2A> właściwość `false`.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje sposób używania <xref:System.Windows.Forms.CurrencyManager.SuspendBinding%2A> metody.  
  
 [!code-cpp[BindingManagerBase_Suspend_Resume_Binding#1](~/samples/snippets/cpp/VS_Snippets_Winforms/BindingManagerBase_Suspend_Resume_Binding/CPP/bindingmanagerbase_suspend_resume_binding.cpp#1)]
 [!code-csharp[BindingManagerBase_Suspend_Resume_Binding#1](~/samples/snippets/csharp/VS_Snippets_Winforms/BindingManagerBase_Suspend_Resume_Binding/CS/bindingmanagerbase_suspend_resume_binding.cs#1)]
 [!code-vb[BindingManagerBase_Suspend_Resume_Binding#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/BindingManagerBase_Suspend_Resume_Binding/VB/bindingmanagerbase_suspend_resume_binding.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.BindingSource.RaiseListChangedEvents" />
        <altmember cref="E:System.Windows.Forms.BindingManagerBase.BindingComplete" />
        <altmember cref="M:System.Windows.Forms.CurrencyManager.ResumeBinding" />
        <altmember cref="M:System.Windows.Forms.BindingManagerBase.UpdateIsBinding" />
        <altmember cref="P:System.Windows.Forms.BindingManagerBase.Bindings" />
      </Docs>
    </Member>
    <Member MemberName="UpdateIsBinding">
      <MemberSignature Language="C#" Value="protected override void UpdateIsBinding ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void UpdateIsBinding() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.CurrencyManager.UpdateIsBinding" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub UpdateIsBinding ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void UpdateIsBinding();" />
      <MemberSignature Language="F#" Value="override this.UpdateIsBinding : unit -&gt; unit" Usage="currencyManager.UpdateIsBinding " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Aktualizuje stan wiązania.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
  </Members>
</Type>