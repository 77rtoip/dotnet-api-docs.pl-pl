<Type Name="FileDialog" FullName="System.Windows.Forms.FileDialog">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a26973d4a043fe1c4051214051fbe2cb0fbfe57a" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69189148" /></Metadata><TypeSignature Language="C#" Value="public abstract class FileDialog : System.Windows.Forms.CommonDialog" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit FileDialog extends System.Windows.Forms.CommonDialog" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.FileDialog" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class FileDialog&#xA;Inherits CommonDialog" />
  <TypeSignature Language="C++ CLI" Value="public ref class FileDialog abstract : System::Windows::Forms::CommonDialog" />
  <TypeSignature Language="F#" Value="type FileDialog = class&#xA;    inherit CommonDialog" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Forms.CommonDialog</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("FileOk")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("FileName")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Wyświetla okno dialogowe, w którym użytkownik może wybrać plik.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.FileDialog>jest klasą abstrakcyjną, która zawiera typowe zachowanie <xref:System.Windows.Forms.OpenFileDialog> klas <xref:System.Windows.Forms.SaveFileDialog> i. Nie jest przeznaczona do użycia bezpośrednio, ale zawiera typowe zachowanie tych dwóch klas. Nie można utworzyć wystąpienia <xref:System.Windows.Forms.FileDialog>. Chociaż Klasa jest zadeklarowana jako publiczna, nie można z niej dziedziczyć, ponieważ zawiera ona wewnętrzne metody abstrakcyjne. Aby utworzyć okno dialogowe, w którym można wybrać lub zapisać plik, <xref:System.Windows.Forms.OpenFileDialog> Użyj <xref:System.Windows.Forms.SaveFileDialog>lub.  
  
 <xref:System.Windows.Forms.FileDialog>to modalne okno dialogowe; w związku z tym, gdy jest wyświetlany, zablokuje resztę aplikacji do momentu wybrania pliku przez użytkownika. Gdy okno dialogowe jest wyświetlane w trybie modalnym, nie można wykonać operacji wejścia (klawiatury lub kliknięcia myszą) z wyjątkiem obiektów w oknie dialogowym. Aby dane wejściowe do wywołującego programu mogły wystąpić, program musi ukryć lub zamknąć okno dialogowe (zazwyczaj w odpowiedzi na niektóre akcje użytkownika).  
  
> [!CAUTION]
>  W przypadku używania klas pochodnych z <xref:System.Windows.Forms.FileDialog>, takich jak <xref:System.Windows.Forms.OpenFileDialog> i <xref:System.Windows.Forms.SaveFileDialog>, należy unikać używania literałów ciągów zawierających ścieżki bezwzględne. Zamiast tego należy dynamicznie uzyskać ścieżkę przy użyciu jednej lub kilku technik opisanych w poniższej tabeli.  
  
 Jeśli chcesz umożliwić użytkownikom wybranie folderu zamiast pliku, użyj <xref:System.Windows.Forms.FolderBrowserDialog>.  
  
 W zależności od typu aplikacji, sposobu przechowywania danych skojarzonych z aplikacją oraz przyczyny uzyskiwania dostępu do systemu plików istnieje wiele sposobów, w których można utworzyć ścieżkę katalogu. W poniższej tabeli przedstawiono metody dynamicznego tworzenia ścieżek.  
  
|Ścieżka lub kategoria programu|Klasa i składowe do użycia|  
|------------------------------|------------------------------|  
|Standardowe ścieżki systemu Windows, takie jak pliki programu, dokumenty, pulpit i tak dalej|Klasa to najbardziej kompletne źródło tych elementów, za pomocą metod statycznych, takich jak <xref:System.Environment.SystemDirectory%2A>lub za pośrednictwem <xref:System.Environment.GetFolderPath%2A> metody, przy użyciu jednej z <xref:System.Environment.SpecialFolder> wartości wyliczanych. <xref:System.Environment?displayProperty=nameWithType>|  
|Ścieżki związane z bieżącą aplikacją|<xref:System.Windows.Forms.Application.ExecutablePath%2A> <xref:System.Windows.Forms.Application.StartupPath%2A> <xref:System.Windows.Forms.Application.CommonAppDataPath%2A> <xref:System.Windows.Forms.Application.LocalUserAppDataPath%2A>Klasa ma statyczne elementy członkowskie do uzyskiwania określonych ścieżek, takich jak,, i. <xref:System.Windows.Forms.Application><br /><br /> <xref:System.IO.Path.GetTempPath%2A> Metoda<xref:System.IO.Path?displayProperty=nameWithType> zwraca ścieżkę folderu tymczasowego.<br /><br /> <xref:System.IO.Directory.GetCurrentDirectory%2A> Metoda<xref:System.IO.Directory?displayProperty=nameWithType> klasy zwraca bieżący katalog wykonywania aplikacji.<br /><br /> <xref:System.IO.DriveInfo.RootDirectory%2A> Właściwość<xref:System.IO.DriveInfo> klasy reprezentuje katalog główny określonego dysku.|  
|Ścieżki przechowywane jako ustawienia aplikacji|Uzyskaj dostęp do właściwości ustawień odpowiednich aplikacji klasy otoki pochodnej od <xref:System.Configuration.ApplicationSettingsBase>. Aby uzyskać więcej informacji, zobacz [Ustawienia aplikacji dla Windows Forms](~/docs/framework/winforms/advanced/application-settings-for-windows-forms.md).|  
|Magazyn rejestru|Niektóre aplikacje przechowują w rejestrze informacje o katalogu. Klasa ma właściwości i<xref:System.Windows.Forms.Application.LocalUserAppDataPath%2A>, które są rozpoznawane <xref:Microsoft.Win32.RegistryKey> jako wartość. <xref:System.Windows.Forms.Application.CommonAppDataPath%2A> <xref:System.Windows.Forms.Application>|  
|ClickOnce — aplikacje|W przypadku aplikacji ClickOnce Użyj <xref:System.Windows.Forms.Application> elementów członkowskich klasy, <xref:System.Windows.Forms.Application.UserAppDataPath%2A>takich jak, które zwracają wskaźnik do katalogu danych ClickOnce. Aby uzyskać więcej informacji, zobacz [Uzyskiwanie dostępu do danych lokalnych i zdalnych w aplikacjach ClickOnce](https://msdn.microsoft.com/library/be5cbe12-6cb6-49c9-aa59-a1624e1eef3d).|  
|Aplikacje międzynarodowe|W przypadku aplikacji międzynarodowych Pobierz część ścieżki względnej z zasobu ciągu w aplikacji za pomocą <xref:System.Resources.ResourceReader?displayProperty=nameWithType> klasy. Aby uzyskać więcej informacji na temat globalizacji i lokalizacji, zobacz [globalizacja i lokalizacja](~/docs/standard/globalization-localization/index.md)tematu.|  
  
 Należy zauważyć, że pełną ścieżkę można utworzyć przy użyciu co najmniej jednej z opisanych technik. Na przykład <xref:System.Environment.GetFolderPath%2A> Metoda może zostać użyta w celu uzyskania ścieżki do folderu Moje dokumenty, a następnie ustawienia aplikacji można użyć do dodania względnej części podkatalogu.  
  
 Klasa zawiera statyczne elementy członkowskie ułatwiające manipulowanie bezwzględnymi i względnymi ciągami ścieżki <xref:System.IO.File?displayProperty=nameWithType> , <xref:System.IO.Directory?displayProperty=nameWithType> natomiast klasy i mają statyczne elementy członkowskie, które faktycznie manipulują odpowiednio pliki i katalogi. <xref:System.IO.Path?displayProperty=nameWithType>  
  
> [!IMPORTANT]
>  Jeśli użytkownik aplikacji zmieni folder w programie <xref:System.Windows.Forms.FileDialog>, bieżący katalog roboczy aplikacji zostanie ustawiony na lokalizację określoną <xref:System.Windows.Forms.FileDialog>w. Aby tego uniknąć, należy ustawić <xref:System.Windows.Forms.FileDialog.RestoreDirectory%2A> właściwość na `true`.  
  
   
  
## Examples  
 Poniższy przykład kodu używa <xref:System.Windows.Forms.OpenFileDialog> <xref:System.Windows.Forms.FileDialog> implementacji i ilustruje tworzenie, Ustawianie właściwości i wyświetlanie okna dialogowego. W przykładzie zastosowano <xref:System.Windows.Forms.CommonDialog.ShowDialog%2A> metodę, aby wyświetlić okno dialogowe i <xref:System.Windows.Forms.DialogResult>zwrócić. Przykład wymaga formularza z <xref:System.Windows.Forms.Button> umieszczonym na nim <xref:System.IO> i przestrzenią nazw dodanego do niego.  
  
 [!code-cpp[Classic OpenFileDialog Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic OpenFileDialog Example/CPP/source.cpp#1)]
 [!code-csharp[Classic OpenFileDialog Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic OpenFileDialog Example/CS/source.cs#1)]
 [!code-vb[Classic OpenFileDialog Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic OpenFileDialog Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.CommonDialog" />
    <altmember cref="T:System.Windows.Forms.OpenFileDialog" />
    <altmember cref="T:System.Windows.Forms.SaveFileDialog" />
    <altmember cref="T:System.Windows.Forms.FolderBrowserDialog" />
    <altmember cref="T:System.IO.Path" />
    <altmember cref="T:System.IO.File" />
    <altmember cref="T:System.IO.Directory" />
    <altmember cref="T:System.Environment" />
    <altmember cref="T:System.Windows.Forms.Application" />
    <altmember cref="T:Microsoft.Win32.Registry" />
    <altmember cref="T:System.Resources.ResourceReader" />
  </Docs>
  <Members>
    <Member MemberName="AddExtension">
      <MemberSignature Language="C#" Value="public bool AddExtension { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AddExtension" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.AddExtension" />
      <MemberSignature Language="VB.NET" Value="Public Property AddExtension As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AddExtension { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AddExtension : bool with get, set" Usage="System.Windows.Forms.FileDialog.AddExtension" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy okno dialogowe automatycznie dodaje rozszerzenie do nazwy pliku, jeśli użytkownik pominie rozszerzenie.</summary>
        <value><see langword="true" />Jeśli okno dialogowe dodaje rozszerzenie do nazwy pliku, jeśli użytkownik pominie rozszerzenie; w przeciwnym razie. <see langword="false" /> Wartość domyślna to <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Rozszerzenie dodane do nazwy pliku zależy od aktualnie wybranego filtru plików i wartości <xref:System.Windows.Forms.FileDialog.CheckFileExists%2A> właściwości.  
  
 Jeśli właściwość jest `true`, okno dialogowe dodaje pierwsze rozszerzenie z bieżącego filtru plików, który jest zgodny z istniejącym plikiem. <xref:System.Windows.Forms.FileDialog.CheckFileExists%2A> Jeśli żadne pliki nie pasują do bieżącego filtru plików, okno dialogowe dodaje rozszerzenie określone we <xref:System.Windows.Forms.FileDialog.DefaultExt%2A> właściwości.  
  
 Jeśli właściwość ma `false`wartość, okno dialogowe dodaje pierwsze prawidłowe rozszerzenie nazwy pliku z bieżącego filtru plików. <xref:System.Windows.Forms.FileDialog.CheckFileExists%2A> Jeśli bieżący filtr pliku nie zawiera żadnych prawidłowych rozszerzeń nazw plików, okno dialogowe dodaje rozszerzenie określone we <xref:System.Windows.Forms.FileDialog.DefaultExt%2A> właściwości.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.FileIOPermission">w przypadku dodawania rozszerzenia, jeśli użytkownik go pominie. Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="P:System.Windows.Forms.FileDialog.Filter" />
        <altmember cref="P:System.Windows.Forms.FileDialog.FilterIndex" />
      </Docs>
    </Member>
    <Member MemberName="AutoUpgradeEnabled">
      <MemberSignature Language="C#" Value="public bool AutoUpgradeEnabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool AutoUpgradeEnabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.AutoUpgradeEnabled" />
      <MemberSignature Language="VB.NET" Value="Public Property AutoUpgradeEnabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool AutoUpgradeEnabled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.AutoUpgradeEnabled : bool with get, set" Usage="System.Windows.Forms.FileDialog.AutoUpgradeEnabled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy to <see cref="T:System.Windows.Forms.FileDialog" /> wystąpienie ma automatycznie aktualizować wygląd i zachowanie podczas [!INCLUDE[wiprlhext](~/includes/wiprlhext-md.md)]uruchamiania programu.</summary>
        <value><see langword="true" />Jeśli to <see cref="T:System.Windows.Forms.FileDialog" /> wystąpienie powinno automatycznie uaktualnić wygląd i zachowanie w [!INCLUDE[wiprlhext](~/includes/wiprlhext-md.md)]przypadku uruchamiania programu; w <see langword="false" />przeciwnym razie,. Wartość domyślna to <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli ta właściwość ma `false`wartość <xref:System.Windows.Forms.FileDialog> , wygląd i zachowanie klasy [!INCLUDE[winxp](~/includes/winxp-md.md)]będzie wyglądać w [!INCLUDE[wiprlhext](~/includes/wiprlhext-md.md)]stylu.  
  
 W [!INCLUDE[winxp](~/includes/winxp-md.md)], ta właściwość nie ma żadnego efektu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CheckFileExists">
      <MemberSignature Language="C#" Value="public virtual bool CheckFileExists { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CheckFileExists" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.CheckFileExists" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property CheckFileExists As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool CheckFileExists { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CheckFileExists : bool with get, set" Usage="System.Windows.Forms.FileDialog.CheckFileExists" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy okno dialogowe wyświetla ostrzeżenie, jeśli użytkownik określi nieistniejącą nazwę pliku.</summary>
        <value><see langword="true" />Jeśli okno dialogowe wyświetla ostrzeżenie, jeśli użytkownik określi nazwę pliku, który nie istnieje; w przeciwnym razie. <see langword="false" /> Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wartość `true` domyślna to <xref:System.Windows.Forms.OpenFileDialog> dziedziczenie `false`idziedziczenie. <xref:System.Windows.Forms.SaveFileDialog>  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Aby wyświetlić ostrzeżenie, jeśli plik już istnieje. Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="P:System.Windows.Forms.FileDialog.CheckPathExists" />
      </Docs>
    </Member>
    <Member MemberName="CheckPathExists">
      <MemberSignature Language="C#" Value="public bool CheckPathExists { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool CheckPathExists" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.CheckPathExists" />
      <MemberSignature Language="VB.NET" Value="Public Property CheckPathExists As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool CheckPathExists { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.CheckPathExists : bool with get, set" Usage="System.Windows.Forms.FileDialog.CheckPathExists" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy okno dialogowe wyświetla ostrzeżenie, jeśli użytkownik określi ścieżkę, która nie istnieje.</summary>
        <value><see langword="true" />Jeśli w oknie dialogowym zostanie wyświetlone ostrzeżenie, gdy użytkownik określi ścieżkę, która nie istnieje; w przeciwnym razie. <see langword="false" /> Wartość domyślna to <see langword="true" />.</value>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Aby wyświetlić ostrzeżenie, jeśli użytkownik określi już istniejącą ścieżkę. Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="P:System.Windows.Forms.FileDialog.CheckFileExists" />
      </Docs>
    </Member>
    <Member MemberName="CustomPlaces">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.FileDialogCustomPlacesCollection CustomPlaces { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.FileDialogCustomPlacesCollection CustomPlaces" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.CustomPlaces" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property CustomPlaces As FileDialogCustomPlacesCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::FileDialogCustomPlacesCollection ^ CustomPlaces { System::Windows::Forms::FileDialogCustomPlacesCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.CustomPlaces : System.Windows.Forms.FileDialogCustomPlacesCollection" Usage="System.Windows.Forms.FileDialog.CustomPlaces" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.FileDialogCustomPlacesCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera kolekcję miejsc niestandardowych dla tego <see cref="T:System.Windows.Forms.FileDialog" /> wystąpienia.</summary>
        <value>Kolekcja miejsc niestandardowych dla tego <see cref="T:System.Windows.Forms.FileDialog" /> wystąpienia.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W [!INCLUDE[winxp](~/includes/winxp-md.md)], ta właściwość nie ma żadnego efektu.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje, <xref:System.Windows.Forms.FileDialog.CustomPlaces%2A> jak używać kolekcji. Aby uruchomić ten przykład, wklej następujący kod do formularza systemu Windows i Wywołaj `InitializeDialogAndButton` metodę z konstruktora lub <xref:System.Windows.Forms.Form.Load> metody obsługi zdarzeń.  
  
 [!code-csharp[System.Windows.Forms.FileDialogCommonPlaces#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.FileDialogCommonPlaces/CS/Form1.cs#1)]
 [!code-vb[System.Windows.Forms.FileDialogCommonPlaces#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.FileDialogCommonPlaces/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultExt">
      <MemberSignature Language="C#" Value="public string DefaultExt { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string DefaultExt" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.DefaultExt" />
      <MemberSignature Language="VB.NET" Value="Public Property DefaultExt As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ DefaultExt { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.DefaultExt : string with get, set" Usage="System.Windows.Forms.FileDialog.DefaultExt" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia domyślne rozszerzenie nazwy pliku.</summary>
        <value>Domyślne rozszerzenie nazwy pliku. Zwrócony ciąg nie zawiera kropki. Wartością domyślną jest ciąg pusty ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy użytkownik aplikacji określi nazwę pliku bez rozszerzenia, <xref:System.Windows.Forms.FileDialog> dołącza rozszerzenie do nazwy pliku. Używane rozszerzenie jest określane przez <xref:System.Windows.Forms.FileDialog.Filter%2A> właściwości i. <xref:System.Windows.Forms.FileDialog.DefaultExt%2A> Jeśli filtr jest zaznaczony w <xref:System.Windows.Forms.FileDialog> i filtr Określa rozszerzenie, to rozszerzenie jest używane. Jeśli wybrany filtr używa symbolu wieloznacznego zamiast rozszerzenia, zostanie użyte rozszerzenie określone we <xref:System.Windows.Forms.FileDialog.DefaultExt%2A> właściwości.  
  
   
  
## Examples  
 W poniższym przykładowym kodzie zaprezentowano użycie metod <xref:System.Windows.Forms.RichTextBox.SaveFile%2A?displayProperty=nameWithType> i <xref:System.Windows.Forms.RichTextBox.LoadFile%2A?displayProperty=nameWithType> ze strumieniami. Pokazano także użycie elementów członkowskich <xref:System.Windows.Forms.FileDialog.FileName%2A>, <xref:System.Windows.Forms.FileDialog.DefaultExt%2A>, <xref:System.Windows.Forms.SaveFileDialog.CreatePrompt%2A?displayProperty=nameWithType> i <xref:System.Windows.Forms.SaveFileDialog.OverwritePrompt%2A?displayProperty=nameWithType>.  
  
 Jest to kompletny przykład, gotowy do uruchomienia przez skopiowanie do projektu.  
  
 [!code-cpp[System.Windows.Forms.RichTextBoxSaveFile#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.RichTextBoxSaveFile/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.RichTextBoxSaveFile#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.RichTextBoxSaveFile/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.RichTextBoxSaveFile#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.RichTextBoxSaveFile/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DereferenceLinks">
      <MemberSignature Language="C#" Value="public bool DereferenceLinks { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DereferenceLinks" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.DereferenceLinks" />
      <MemberSignature Language="VB.NET" Value="Public Property DereferenceLinks As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool DereferenceLinks { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.DereferenceLinks : bool with get, set" Usage="System.Windows.Forms.FileDialog.DereferenceLinks" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy okno dialogowe zwraca lokalizację pliku, do którego odwołuje się skrót, czy zwraca lokalizację skrótu (. lnk).</summary>
        <value><see langword="true" />Jeśli okno dialogowe zwróci lokalizację pliku, do którego odwołuje się skrót; w przeciwnym razie. <see langword="false" /> Wartość domyślna to <see langword="true" />.</value>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.FileIOPermission">aby zarządzać dostępem do plików. Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="EventFileOk">
      <MemberSignature Language="C#" Value="protected static readonly object EventFileOk;" />
      <MemberSignature Language="ILAsm" Value=".field family static initonly object EventFileOk" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.FileDialog.EventFileOk" />
      <MemberSignature Language="VB.NET" Value="Protected Shared ReadOnly EventFileOk As Object " />
      <MemberSignature Language="C++ CLI" Value="protected: static initonly System::Object ^ EventFileOk;" />
      <MemberSignature Language="F#" Value=" staticval mutable EventFileOk : obj" Usage="System.Windows.Forms.FileDialog.EventFileOk" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Jest właścicielem <see cref="E:System.Windows.Forms.FileDialog.FileOk" /> zdarzenia.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FileName">
      <MemberSignature Language="C#" Value="public string FileName { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string FileName" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.FileName" />
      <MemberSignature Language="VB.NET" Value="Public Property FileName As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ FileName { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.FileName : string with get, set" Usage="System.Windows.Forms.FileDialog.FileName" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia ciąg zawierający nazwę pliku wybraną w oknie dialogowym plik.</summary>
        <value>Nazwa pliku wybrana w oknie dialogowym plik. Wartością domyślną jest ciąg pusty ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nazwa pliku zawiera zarówno ścieżkę do pliku, jak i rozszerzenie. Jeśli nie wybrano żadnych plików, Metoda ta zwraca pusty ciąg ("").  
  
 W przypadku użycia z <xref:System.Windows.Forms.SaveFileDialog> klasy ta właściwość reprezentuje plik, który jest zapisywany; gdy jest używany <xref:System.Windows.Forms.OpenFileDialog> z klasy, reprezentuje otwierany plik.  
  
 Ta właściwość może mieć tylko nazwę jednego wybranego pliku. Jeśli chcesz zwrócić tablicę zawierającą nazwy wszystkich wybranych plików w oknie dialogowym wielokrotnego wyboru, użyj <xref:System.Windows.Forms.FileDialog.FileNames%2A>.  
  
   
  
## Examples  
 W poniższym przykładowym kodzie zaprezentowano użycie metod <xref:System.Windows.Forms.RichTextBox.SaveFile%2A?displayProperty=nameWithType> i <xref:System.Windows.Forms.RichTextBox.LoadFile%2A?displayProperty=nameWithType> ze strumieniami. Pokazano także użycie elementów członkowskich <xref:System.Windows.Forms.FileDialog.FileName%2A>, <xref:System.Windows.Forms.FileDialog.DefaultExt%2A>, <xref:System.Windows.Forms.SaveFileDialog.CreatePrompt%2A?displayProperty=nameWithType> i <xref:System.Windows.Forms.SaveFileDialog.OverwritePrompt%2A?displayProperty=nameWithType>.  
  
 Jest to kompletny przykład, gotowy do uruchomienia przez skopiowanie do projektu.  
  
 [!code-cpp[System.Windows.Forms.RichTextBoxSaveFile#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.RichTextBoxSaveFile/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.RichTextBoxSaveFile#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.RichTextBoxSaveFile/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.RichTextBoxSaveFile#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.RichTextBoxSaveFile/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Aby pobrać lub ustawić nazwę pliku. Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="P:System.Windows.Forms.FileDialog.FileNames" />
        <altmember cref="T:System.Windows.Forms.SaveFileDialog" />
        <altmember cref="T:System.Windows.Forms.OpenFileDialog" />
      </Docs>
    </Member>
    <Member MemberName="FileNames">
      <MemberSignature Language="C#" Value="public string[] FileNames { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string[] FileNames" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.FileNames" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property FileNames As String()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property cli::array &lt;System::String ^&gt; ^ FileNames { cli::array &lt;System::String ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FileNames : string[]" Usage="System.Windows.Forms.FileDialog.FileNames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String[]</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera nazwy wszystkich wybranych plików z okna dialogowego.</summary>
        <value>Tablica typu <see cref="T:System.String" />zawierającego nazwy plików wszystkich wybranych plików w oknie dialogowym.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Każda nazwa pliku zawiera zarówno ścieżkę do pliku, jak i rozszerzenie. Jeśli nie wybrano żadnych plików, Metoda ta zwraca pustą tablicę.  
  
   
  
## Examples  
 Poniższy przykład kodu umożliwia użytkownikowi wybranie liczby obrazów i wyświetlenie ich w <xref:System.Windows.Forms.PictureBox> kontrolkach w formularzu. Pokazuje on inicjowanie <xref:System.Windows.Forms.OpenFileDialog>, <xref:System.Windows.Forms.FileDialog.Title%2A> Ustawianie właściwości i <xref:System.Windows.Forms.FileDialog.Filter%2A> Zezwalanie <xref:System.Windows.Forms.OpenFileDialog.Multiselect%2A> użytkownikowi na wybranie wielu plików przez ustawienie właściwości na true. <xref:System.Windows.Forms.OpenFileDialog> `openFileDialog1` <xref:System.Windows.Forms.FlowLayoutPanel> `flowLayoutPanel1`W tymprzykładziekoduzałożono,żeformularzmajużkontrolkęonazwieinazwie.<xref:System.Windows.Forms.Button> `SelectFileButton`  
  
 [!code-csharp[System.Windows.Forms.OpenFileDialog.MultiSelect#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.OpenFileDialog.MultiSelect/CS/Form1.cs#1)]
 [!code-vb[System.Windows.Forms.OpenFileDialog.MultiSelect#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.OpenFileDialog.MultiSelect/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Aby uzyskać nazwy plików. Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.FileIOPermissionAccess.AllAccess" />.</permission>
        <altmember cref="P:System.Windows.Forms.FileDialog.FileName" />
      </Docs>
    </Member>
    <Member MemberName="FileOk">
      <MemberSignature Language="C#" Value="public event System.ComponentModel.CancelEventHandler FileOk;" />
      <MemberSignature Language="ILAsm" Value=".event class System.ComponentModel.CancelEventHandler FileOk" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.FileDialog.FileOk" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event FileOk As CancelEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::ComponentModel::CancelEventHandler ^ FileOk;" />
      <MemberSignature Language="F#" Value="member this.FileOk : System.ComponentModel.CancelEventHandler " Usage="member this.FileOk : System.ComponentModel.CancelEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.ComponentModel.CancelEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy użytkownik kliknie przycisk **Otwórz** lub **Zapisz** w pliku okna dialogowego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uzyskać informacje na temat obsługi zdarzeń, zobacz [Obsługa i](~/docs/standard/events/index.md)wywoływanie zdarzeń.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje użycie <xref:System.Windows.Forms.FileDialog.FileNames%2A> właściwości, <xref:System.Windows.Forms.FileDialog.FileOk> obsłudze zdarzenia i przy użyciu <xref:System.Windows.Forms.Application.DoEvents%2A?displayProperty=nameWithType> metody. Po uruchomieniu przykładu użytkownik może wybrać pliki graficzne z <xref:System.Windows.Forms.OpenFileDialog> obiektu. Wybrane pliki są wyświetlane w formularzu. <xref:System.Windows.Forms.Application.DoEvents%2A?displayProperty=nameWithType> Metoda wymusza odświeżenie formularza dla każdego otwartego pliku graficznego. Aby uruchomić ten przykład, wklej następujący kod w postaci zawierającej <xref:System.Windows.Forms.PictureBox> nazwane `PictureBox1`, <xref:System.Windows.Forms.OpenFileDialog> nazwane `OpenFileDialog1`i <xref:System.Windows.Forms.Button> nazwanych `fileButton`. Wywołaj metody `InitializeOpenFileDialog` `Load` i z konstruktora lub metody formularza. `InitializePictureBox` Gdy jest uruchomiony ten przykład, Wyświetl okno dialogowe, klikając przycisk.  
  
 [!code-cpp[System.Windows.Forms.FileDialog#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.FileDialog/CPP/filedialogform.cpp#1)]
 [!code-csharp[System.Windows.Forms.FileDialog#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.FileDialog/CS/filedialogform.cs#1)]
 [!code-vb[System.Windows.Forms.FileDialog#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.FileDialog/VB/filedialogform.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.FileDialog.OnFileOk(System.ComponentModel.CancelEventArgs)" />
      </Docs>
    </Member>
    <Member MemberName="Filter">
      <MemberSignature Language="C#" Value="public string Filter { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Filter" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.Filter" />
      <MemberSignature Language="VB.NET" Value="Public Property Filter As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Filter { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Filter : string with get, set" Usage="System.Windows.Forms.FileDialog.Filter" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia bieżący ciąg filtru nazwy pliku, który określa opcje, które pojawiają się w polu "Zapisz jako typ pliku" lub "Pliki typu" w oknie dialogowym.</summary>
        <value>Opcje filtrowania plików dostępne w oknie dialogowym.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Dla każdej opcji filtrowania ciąg filtru zawiera opis filtru, a po nim pionowy pasek (&#124;) i wzorzec filtru. Ciągi dla różnych opcji filtrowania są oddzielone pionowym paskiem.  
  
 Poniżej znajduje się przykład ciągu filtru:  
  
 `Text files (*.txt)|*.txt|All files (*.*)|*.*`  
  
 Można dodać kilka wzorców filtrów do filtru, rozdzielając typy plików średnikami, na przykład:  
  
 `Image Files(*.BMP;*.JPG;*.GIF)|*.BMP;*.JPG;*.GIF|All files (*.*)|*.*`  
  
 <xref:System.Windows.Forms.FileDialog.FilterIndex%2A> Użyj właściwości, aby ustawić, która opcja filtrowania jest pokazywana najpierw użytkownikowi.  
  
   
  
## Examples  
 Poniższy przykład kodu używa <xref:System.Windows.Forms.OpenFileDialog> <xref:System.Windows.Forms.FileDialog> implementacji i ilustruje tworzenie, Ustawianie właściwości i wyświetlanie okna dialogowego. W przykładzie zastosowano <xref:System.Windows.Forms.FileDialog.Filter%2A> właściwości <xref:System.Windows.Forms.FileDialog.FilterIndex%2A> i, aby podać listę filtrów dla użytkownika. Przykład wymaga formularza z <xref:System.Windows.Forms.Button> umieszczonym na nim <xref:System.IO> i przestrzenią nazw dodanego do niego.  
  
 [!code-cpp[Classic OpenFileDialog Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic OpenFileDialog Example/CPP/source.cpp#1)]
 [!code-csharp[Classic OpenFileDialog Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic OpenFileDialog Example/CS/source.cs#1)]
 [!code-vb[Classic OpenFileDialog Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic OpenFileDialog Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="Filter" />Format jest nieprawidłowy.</exception>
        <altmember cref="P:System.Windows.Forms.FileDialog.CheckFileExists" />
        <altmember cref="P:System.Windows.Forms.FileDialog.FilterIndex" />
      </Docs>
    </Member>
    <Member MemberName="FilterIndex">
      <MemberSignature Language="C#" Value="public int FilterIndex { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 FilterIndex" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.FilterIndex" />
      <MemberSignature Language="VB.NET" Value="Public Property FilterIndex As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int FilterIndex { int get(); void set(int value); };" />
      <MemberSignature Language="F#" Value="member this.FilterIndex : int with get, set" Usage="System.Windows.Forms.FileDialog.FilterIndex" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(1)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia indeks filtru aktualnie wybranego w oknie dialogowym plik.</summary>
        <value>Wartość zawierająca indeks filtru aktualnie wybranego w oknie dialogowym plik. Wartość domyślna to 1.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.FileDialog.FilterIndex%2A> Użyj właściwości, aby ustawić, która opcja filtrowania jest pokazywana najpierw użytkownikowi. Można również użyć wartości <xref:System.Windows.Forms.FileDialog.FilterIndex%2A> po wyświetleniu okna dialogowego pliku do wykonywania specjalnych operacji na plikach w zależności od wybranego filtru.  
  
> [!NOTE]
>  Wartość indeksu pierwszego wpisu filtru to 1.  
  
   
  
## Examples  
 Poniższy przykład kodu używa <xref:System.Windows.Forms.OpenFileDialog> <xref:System.Windows.Forms.FileDialog> implementacji i ilustruje tworzenie, Ustawianie właściwości i wyświetlanie okna dialogowego. W przykładzie zastosowano <xref:System.Windows.Forms.FileDialog.Filter%2A> właściwości <xref:System.Windows.Forms.FileDialog.FilterIndex%2A> i, aby podać listę filtrów dla użytkownika. Przykład wymaga formularza z <xref:System.Windows.Forms.Button> umieszczonym na nim <xref:System.IO> i przestrzenią nazw dodanego do niego.  
  
 [!code-cpp[Classic OpenFileDialog Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic OpenFileDialog Example/CPP/source.cpp#1)]
 [!code-csharp[Classic OpenFileDialog Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic OpenFileDialog Example/CS/source.cs#1)]
 [!code-vb[Classic OpenFileDialog Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic OpenFileDialog Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.FileDialog.CheckFileExists" />
        <altmember cref="P:System.Windows.Forms.FileDialog.Filter" />
      </Docs>
    </Member>
    <Member MemberName="HookProc">
      <MemberSignature Language="C#" Value="protected override IntPtr HookProc (IntPtr hWnd, int msg, IntPtr wparam, IntPtr lparam);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance native int HookProc(native int hWnd, int32 msg, native int wparam, native int lparam) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.FileDialog.HookProc(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function HookProc (hWnd As IntPtr, msg As Integer, wparam As IntPtr, lparam As IntPtr) As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override IntPtr HookProc(IntPtr hWnd, int msg, IntPtr wparam, IntPtr lparam);" />
      <MemberSignature Language="F#" Value="override this.HookProc : nativeint * int * nativeint * nativeint -&gt; nativeint" Usage="fileDialog.HookProc (hWnd, msg, wparam, lparam)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hWnd" Type="System.IntPtr" />
        <Parameter Name="msg" Type="System.Int32" />
        <Parameter Name="wparam" Type="System.IntPtr" />
        <Parameter Name="lparam" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hWnd">Uchwyt do okna dialogowego.</param>
        <param name="msg">Komunikat odebrany przez okno dialogowe.</param>
        <param name="wparam">Dodatkowe informacje o komunikacie.</param>
        <param name="lparam">Dodatkowe informacje o komunikacie.</param>
        <summary>Definiuje wspólną procedurę haka okna dialogowego, która została zastąpiona w celu dodania określonej funkcjonalności do okna dialogowego plik.</summary>
        <returns>Zwraca zero, jeśli domyślna procedura okna dialogowego przetwarza komunikat; Zwraca wartość różną od zera, jeśli domyślna procedura okna dialogowego ignoruje komunikat.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Procedura Hook umożliwia użytkownikowi łączenie lub wstawianie innych procedur do procedury lub aplikacji na potrzeby debugowania lub ulepszania funkcjonalności.  
  
 Domyślnie procedura Hook Wyśrodkowuje okno dialogowe na ekranie w odpowiedzi na komunikat WM_INITDIALOG.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Podczas zastępowania <see cref="M:System.Windows.Forms.FileDialog.HookProc(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)" /> w klasie pochodnej należy wywołać <see cref="M:System.Windows.Forms.CommonDialog.HookProc(System.IntPtr,System.Int32,System.IntPtr,System.IntPtr)" /> metodę klasy bazowej.</para></block>
      </Docs>
    </Member>
    <Member MemberName="InitialDirectory">
      <MemberSignature Language="C#" Value="public string InitialDirectory { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string InitialDirectory" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.InitialDirectory" />
      <MemberSignature Language="VB.NET" Value="Public Property InitialDirectory As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ InitialDirectory { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.InitialDirectory : string with get, set" Usage="System.Windows.Forms.FileDialog.InitialDirectory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia początkowy katalog wyświetlany przez okno dialogowe plik.</summary>
        <value>Początkowy katalog wyświetlany przez okno dialogowe plik. Wartością domyślną jest ciąg pusty ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.FileDialog.InitialDirectory%2A> Właściwość jest zazwyczaj ustawiana przy użyciu jednego z następujących źródeł:  
  
-   Ścieżka, która była wcześniej używana w programie, może być zachowywana z ostatniego katalogu lub operacji na pliku.  
  
-   Ścieżka odczytana ze źródła trwałego, na przykład ustawienie aplikacji, <xref:Microsoft.Win32.Registry> lub zasób ciągu w aplikacji.  
  
-   Standardowe ścieżki systemu Windows i użytkowników, takie jak pliki programu, Moje dokumenty, moje utwory i tak dalej (które można uzyskać za pomocą <xref:System.Environment.GetFolderPath%2A> metody)  
  
-   Ścieżka odnosząca się do bieżącej aplikacji, na przykład jej katalog startowy (który można uzyskać przy użyciu właściwości <xref:System.Windows.Forms.Application> w obiekcie).  
  
 Aby uzyskać więcej informacji na temat tworzenia ścieżek dynamicznych, <xref:System.Windows.Forms.FileDialog> Zobacz Omówienie klasy.  
  
 W [!INCLUDE[wiprlhext](~/includes/wiprlhext-md.md)], jeśli <xref:System.Windows.Forms.FileDialog.InitialDirectory%2A> jest ustawiona na pełną nazwę pliku zamiast tylko ścieżki katalogu, katalog początkowy będzie domyślnie w ścieżce aplikacji lub do katalogu, z którego użytkownik ostatnio zaznaczył plik.  
  
   
  
## Examples  
 Poniższy przykład kodu używa <xref:System.Windows.Forms.OpenFileDialog> <xref:System.Windows.Forms.FileDialog> implementacji i ilustruje tworzenie, Ustawianie właściwości i wyświetlanie okna dialogowego. W przykładzie zastosowano <xref:System.Windows.Forms.FileDialog.InitialDirectory%2A> właściwość, aby ustawić katalog początkowy, gdy okno dialogowe jest wyświetlane użytkownikowi. Przykład wymaga formularza z <xref:System.Windows.Forms.Button> umieszczonym na nim <xref:System.IO> i przestrzenią nazw dodanego do niego.  
  
 [!code-cpp[Classic OpenFileDialog Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic OpenFileDialog Example/CPP/source.cpp#1)]
 [!code-csharp[Classic OpenFileDialog Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic OpenFileDialog Example/CS/source.cs#1)]
 [!code-vb[Classic OpenFileDialog Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic OpenFileDialog Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Wymagane do ustawienia katalogu początkowego. Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="P:System.Windows.Forms.FileDialog.RestoreDirectory" />
        <altmember cref="T:Microsoft.Win32.Registry" />
        <altmember cref="T:System.Windows.Forms.Application" />
        <altmember cref="T:System.Environment" />
        <altmember cref="T:System.IO.Path" />
      </Docs>
    </Member>
    <Member MemberName="Instance">
      <MemberSignature Language="C#" Value="protected virtual IntPtr Instance { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Instance" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.Instance" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable ReadOnly Property Instance As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual property IntPtr Instance { IntPtr get(); };" />
      <MemberSignature Language="F#" Value="member this.Instance : nativeint" Usage="System.Windows.Forms.FileDialog.Instance" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera dojście wystąpienia Win32 dla aplikacji.</summary>
        <value>Dojście wystąpienia Win32 dla aplikacji.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnFileOk">
      <MemberSignature Language="C#" Value="protected void OnFileOk (System.ComponentModel.CancelEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void OnFileOk(class System.ComponentModel.CancelEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.FileDialog.OnFileOk(System.ComponentModel.CancelEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub OnFileOk (e As CancelEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void OnFileOk(System::ComponentModel::CancelEventArgs ^ e);" />
      <MemberSignature Language="F#" Value="member this.OnFileOk : System.ComponentModel.CancelEventArgs -&gt; unit" Usage="fileDialog.OnFileOk e" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.ComponentModel.CancelEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.ComponentModel.CancelEventArgs" /> , który zawiera dane zdarzenia.</param>
        <summary><see cref="E:System.Windows.Forms.FileDialog.FileOk" /> Podnosi zdarzenie.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="E:System.Windows.Forms.FileDialog.FileOk" />
      </Docs>
    </Member>
    <Member MemberName="Options">
      <MemberSignature Language="C#" Value="protected int Options { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Options" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.Options" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property Options As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property int Options { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Options : int" Usage="System.Windows.Forms.FileDialog.Options" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartości, <see cref="T:System.Windows.Forms.FileDialog" />aby zainicjować.</summary>
        <value>Bitowa kombinacja wartości wewnętrznych, które inicjują <see cref="T:System.Windows.Forms.FileDialog" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.FileDialog.Options%2A> Właściwość odpowiada flagom używanym do inicjowania pliku okna dialogowego przy użyciu systemu Win32. Użyj właściwości klasy, <xref:System.Windows.Forms.FileDialog> aby pobrać i ustawić opcje.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Reset">
      <MemberSignature Language="C#" Value="public override void Reset ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance void Reset() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.FileDialog.Reset" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Sub Reset ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override void Reset();" />
      <MemberSignature Language="F#" Value="override this.Reset : unit -&gt; unit" Usage="fileDialog.Reset " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Resetuje wszystkie właściwości do ich wartości domyślnych.</summary>
        <remarks>To be added.</remarks>
        <block subset="none" type="overrides"><para>Podczas zastępowania <see cref="M:System.Windows.Forms.FileDialog.Reset" /> w klasie pochodnej należy wywołać <see cref="M:System.Windows.Forms.CommonDialog.Reset" /> metodę klasy bazowej.</para></block>
      </Docs>
    </Member>
    <Member MemberName="RestoreDirectory">
      <MemberSignature Language="C#" Value="public bool RestoreDirectory { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RestoreDirectory" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.RestoreDirectory" />
      <MemberSignature Language="VB.NET" Value="Public Property RestoreDirectory As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool RestoreDirectory { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.RestoreDirectory : bool with get, set" Usage="System.Windows.Forms.FileDialog.RestoreDirectory" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy okno dialogowe przywraca katalog do wcześniej wybranego katalogu przed zamknięciem.</summary>
        <value><see langword="true" />Jeśli okno dialogowe przywraca bieżący katalog do wcześniej wybranego katalogu, jeśli użytkownik zmienił katalog podczas wyszukiwania plików; w przeciwnym razie. <see langword="false" /> Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu używa <xref:System.Windows.Forms.OpenFileDialog> <xref:System.Windows.Forms.FileDialog> implementacji i ilustruje tworzenie, Ustawianie właściwości i wyświetlanie okna dialogowego. W przykładzie użyta <xref:System.Windows.Forms.FileDialog.RestoreDirectory%2A> jest właściwość, aby upewnić się, że poprzednio wybrany katalog jest przywracany po zamknięciu okna dialogowego. Przykład wymaga formularza z <xref:System.Windows.Forms.Button> umieszczonym na nim <xref:System.IO> i przestrzenią nazw dodanego do niego.  
  
 [!code-cpp[Classic OpenFileDialog Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic OpenFileDialog Example/CPP/source.cpp#1)]
 [!code-csharp[Classic OpenFileDialog Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic OpenFileDialog Example/CS/source.cs#1)]
 [!code-vb[Classic OpenFileDialog Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic OpenFileDialog Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.FileIOPermission">aby zarządzać dostępem do plików. Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
        <altmember cref="P:System.Windows.Forms.FileDialog.InitialDirectory" />
      </Docs>
    </Member>
    <Member MemberName="RunDialog">
      <MemberSignature Language="C#" Value="protected override bool RunDialog (IntPtr hWndOwner);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance bool RunDialog(native int hWndOwner) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.FileDialog.RunDialog(System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function RunDialog (hWndOwner As IntPtr) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override bool RunDialog(IntPtr hWndOwner);" />
      <MemberSignature Language="F#" Value="override this.RunDialog : nativeint -&gt; bool" Usage="fileDialog.RunDialog hWndOwner" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="hWndOwner" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="hWndOwner">Wartość, która reprezentuje uchwyt okna właściciela okna dialogowego Common.</param>
        <summary>Określa wspólne okno dialogowe.</summary>
        <returns><see langword="true" />Jeśli plik może zostać otwarty; w przeciwnym razie. <see langword="false" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda zapewnia implementację <xref:System.Windows.Forms.CommonDialog.RunDialog%2A>i jest wywoływana, gdy użytkownik okna dialogowego pliku wywoła. <xref:System.Windows.Forms.CommonDialog.ShowDialog%2A>  
  
 W klasach <xref:System.Windows.Forms.OpenFileDialog> pochodnych i <xref:System.Windows.Forms.SaveFileDialog> można podwyższyć <xref:System.Exception> nieprawidłową nazwę pliku.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ShowHelp">
      <MemberSignature Language="C#" Value="public bool ShowHelp { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowHelp" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.ShowHelp" />
      <MemberSignature Language="VB.NET" Value="Public Property ShowHelp As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ShowHelp { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ShowHelp : bool with get, set" Usage="System.Windows.Forms.FileDialog.ShowHelp" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy przycisk **Pomoc** jest wyświetlany w oknie dialogowym plik.</summary>
        <value><see langword="true" />Jeśli okno dialogowe zawiera przycisk Pomoc, w przeciwnym razie. <see langword="false" /> Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zdarzenie jest zgłaszane, gdy użytkownik kliknie przycisk **Pomoc.** <xref:System.Windows.Forms.Control.HelpRequested>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="SupportMultiDottedExtensions">
      <MemberSignature Language="C#" Value="public bool SupportMultiDottedExtensions { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SupportMultiDottedExtensions" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.SupportMultiDottedExtensions" />
      <MemberSignature Language="VB.NET" Value="Public Property SupportMultiDottedExtensions As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SupportMultiDottedExtensions { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.SupportMultiDottedExtensions : bool with get, set" Usage="System.Windows.Forms.FileDialog.SupportMultiDottedExtensions" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia, czy okno dialogowe obsługuje wyświetlanie i zapisywanie plików z wieloma rozszerzeniami nazw plików.</summary>
        <value><see langword="true" />Jeśli okno dialogowe obsługuje wiele rozszerzeń nazw plików; w przeciwnym razie. <see langword="false" /> Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Czasami użytkownicy muszą otwierać i zapisywać pliki korzystające z wielu rozszerzeń nazw plików. Na przykład pliki manifestu aplikacji używane przez [!INCLUDE[ndptecclick](~/includes/ndptecclick-md.md)] technologię wdrażania kończą się rozszerzeniem nazwy pliku złożonego ". exe. manifest". Ustawienie tej właściwości `true` pozwala <xref:System.Windows.Forms.FileDialog.Filter%2A> ustawić właściwość na rozszerzenie wielokropek.  
  
 Jeśli <xref:System.Windows.Forms.FileDialog.SupportMultiDottedExtensions%2A> <xref:System.Windows.Forms.FileDialog.Filter%2A> <xref:System.Windows.Forms.SaveFileDialog> jest `false`, i przypiszesz rozszerzenie wielokropkowe do, formanty pochodne, takie jak, będą używać tylko ostatniego rozszerzenia w ciągu. Na przykład zamiast ". exe. manifest" będzie używany plik ". manifest".  
  
   
  
## Examples  
 Poniższy przykład kodu zapisuje pliki z rozszerzeniem ". Data. txt". Ten przykład kodu wymaga, aby aplikacja obsługiwała <xref:System.Windows.Forms.SaveFileDialog> nazwę `saveFileDialog1` i <xref:System.Windows.Forms.Button> nazwę `button1`.  
  
 [!code-csharp[SupportMultiDottedExtensions#1](~/samples/snippets/csharp/VS_Snippets_Winforms/SupportMultiDottedExtensions/CS/Form1.cs#1)]
 [!code-vb[SupportMultiDottedExtensions#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/SupportMultiDottedExtensions/VB/Form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.FileDialog.Filter" />
      </Docs>
    </Member>
    <Member MemberName="Title">
      <MemberSignature Language="C#" Value="public string Title { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Title" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.Title" />
      <MemberSignature Language="VB.NET" Value="Public Property Title As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Title { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Title : string with get, set" Usage="System.Windows.Forms.FileDialog.Title" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue("")</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia tytuł okna dialogowego pliku.</summary>
        <value>Tytuł okna dialogowego plik. Wartością domyślną jest ciąg pusty ("").</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ciąg zostanie umieszczony na pasku tytułu okna dialogowego. Jeśli tytuł jest pustym ciągiem, system używa domyślnego tytułu, czyli "Save as" lub "Open".  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje <xref:System.Windows.Forms.OpenFileDialog>inicjowanie, <xref:System.Windows.Forms.FileDialog.Title%2A> ustawienie właściwości i <xref:System.Windows.Forms.FileDialog.Filter%2A> Zezwalanie <xref:System.Windows.Forms.OpenFileDialog.Multiselect%2A?displayProperty=nameWithType> użytkownikowi na wybranie wielu plików przez ustawienie właściwości na true. Aby uruchomić ten przykład, wklej następujący kod <xref:System.Windows.Forms.OpenFileDialog> w postaci zawierającej nazwę `OpenFileDialog1` i <xref:System.Windows.Forms.Button> nazwę `fileButton`. Wywołaj `Load` metodę w konstruktorze lub metodzie formularza. `InitializeOpenFileDialog` Przykład wymaga również, aby `Click` zdarzenie `Button` kontrolki zostało połączone z programem obsługi zdarzeń zdefiniowanym w przykładzie.  
  
 [!code-cpp[System.Windows.Forms.FileDialog#6](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.FileDialog/CPP/filedialogform.cpp#6)]
 [!code-csharp[System.Windows.Forms.FileDialog#6](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.FileDialog/CS/filedialogform.cs#6)]
 [!code-vb[System.Windows.Forms.FileDialog#6](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.FileDialog/VB/filedialogform.vb#6)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.FileIOPermission">Aby ustawić tytuł okna dialogowego plik. Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.FileDialog.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="fileDialog.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Udostępnia wersję ciągu tego obiektu.</summary>
        <returns>Wersja ciągu tego obiektu.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ValidateNames">
      <MemberSignature Language="C#" Value="public bool ValidateNames { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ValidateNames" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.FileDialog.ValidateNames" />
      <MemberSignature Language="VB.NET" Value="Public Property ValidateNames As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ValidateNames { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.ValidateNames : bool with get, set" Usage="System.Windows.Forms.FileDialog.ValidateNames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy okno dialogowe akceptuje tylko prawidłowe nazwy plików Win32.</summary>
        <value><see langword="true" />Jeśli okno dialogowe akceptuje tylko prawidłowe nazwy plików Win32; w przeciwnym razie. <see langword="false" /> Wartość domyślna to <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli kontrolka edycji zawiera wszystkie elementy, ale spacje, gdy użytkownik kliknie przycisk **OK**, okno dialogowe zwróci nazwę pliku, niezależnie od tego, czy jest to prawidłowe, czy nie. Do tekstu nie jest dodawane domyślne rozszerzenie.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.FileIOPermission">aby zarządzać dostępem do plików. Powiązane wartość typu wyliczeniowego: <see cref="F:System.Security.Permissions.PermissionState.Unrestricted" />.</permission>
      </Docs>
    </Member>
  </Members>
</Type>
