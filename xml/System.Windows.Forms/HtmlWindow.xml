<Type Name="HtmlWindow" FullName="System.Windows.Forms.HtmlWindow">
  <Metadata><Meta Name="ms.openlocfilehash" Value="60183d51fdc61b936b9035f54da3e34bed828bad" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69188074" /></Metadata><TypeSignature Language="C#" Value="public sealed class HtmlWindow" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit HtmlWindow extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.HtmlWindow" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class HtmlWindow" />
  <TypeSignature Language="C++ CLI" Value="public ref class HtmlWindow sealed" />
  <TypeSignature Language="F#" Value="type HtmlWindow = class" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Reprezentuje okno logiczne, które zawiera co najmniej jedno wystąpienie <see cref="T:System.Windows.Forms.HtmlDocument" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlWindow>nie należy mylić z koncepcją okna w Windows Forms lub Windows API; nie `HWND` ma ani podobnego zasobu systemu Windows, który odpowiada bezpośrednio na wystąpienie programu <xref:System.Windows.Forms.HtmlWindow>. Zamiast tego <xref:System.Windows.Forms.HtmlWindow> program zapewnia ogólne opisy lokalizacji dokumentu na ekranie użytkownika, a także metody współdziałania z użytkownikami za pomocą monitów i okien dialogowych. <xref:System.Windows.Forms.HtmlWindow>działa jako kontener logiczny dla dokumentów strony sieci Web i jego metadanych, takich jak lokalizacja dokumentu i możliwości przeglądarki sieci Web.  
  
 Strona sieci Web składa się z pojedynczego dokumentu lub zawierającego `FRAMESET` jeden lub więcej `FRAME` elementów, z których każdy jest hostem własnego dokumentu. Deweloperzy sieci Web używają zestawów ramek do wyświetlania logicznie powiązanych stron obok siebie (na przykład strony zawartości obok strony nawigacji). Gdy strona składa się z pojedynczego dokumentu, można uzyskać do niej dostęp za <xref:System.Windows.Forms.HtmlWindow.Document%2A> pośrednictwem <xref:System.Windows.Forms.HtmlWindow>właściwości; Jeśli strona używa ramek, możesz <xref:System.Windows.Forms.HtmlWindow.Frames%2A> uzyskać dostęp do swoich dokumentów za pośrednictwem <xref:System.Windows.Forms.HtmlWindow> kolekcji, która składa się z co najmniej jednego obiektu.  
  
 Gdy hostuje <xref:System.Windows.Forms.WebBrowser> kontrolkę w aplikacji Windows Forms, można wybrać opcję współpracy z użytkownikiem przy użyciu standardowych klas Windows Forms, takich jak <xref:System.Windows.Forms.Form> lub <xref:System.Windows.Forms.MessageBox>, lub użyć metod <xref:System.Windows.Forms.HtmlWindow> zdefiniowanych do tego celu. Metoda prezentuje proste okno dialogowe z tekstem niestandardowym i przyciskiem **OK;** <xref:System.Windows.Forms.HtmlWindow.Alert%2A> prezentuje wiersz niestandardowego tekstu i pole tekstowe wprowadzania do użytkownika, a <xref:System.Windows.Forms.HtmlWindow.Confirm%2A> następnie wyświetla okno dialogowe z wierszem tekstu niestandardowego i **OK** i **anuluje** przyciski. <xref:System.Windows.Forms.HtmlWindow.Prompt%2A>  
  
 Możesz użyć <xref:System.Windows.Forms.HtmlWindow> , aby otworzyć nowe okna zawierające nowe dokumenty. <xref:System.Windows.Forms.HtmlWindow.Open%2A>Ładuje określony adres URL do nazwanego okna, tworząc go, jeśli jeszcze nie istnieje, a <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A> zawsze otwiera swój adres URL w nowo utworzonym oknie.  
  
   
  
## Examples  
 Poniższy przykład kodu zawiera dwie metody. Pierwszy otwiera adres URL w oknie o nazwie `displayWindow`, które tworzy z wyświetlonym paskiem stanu. Drugi otwiera inny adres URL w tym samym oknie, ale określa, że powinien być wyświetlony tylko pasek lokalizacji. Zwróć uwagę, że wymiary okna i kontrolki, które są wyświetlane, zależą od tego, który adres URL jest otwierany jako pierwszy. Przykład kodu wymaga, aby formularz zawierał <xref:System.Windows.Forms.WebBrowser> kontrolkę o nazwie. `WebBrowser1`  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#13](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#13)]
 [!code-vb[System.Windows.Forms.HtmlWindow#13](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#13)]  
  
 ]]></format>
    </remarks>
    <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms535873.aspx">Obiekt window</related>
    <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/aa741505.aspx">IHTMLWindow2, interfejs</related>
  </Docs>
  <Members>
    <Member MemberName="Alert">
      <MemberSignature Language="C#" Value="public void Alert (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Alert(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.Alert(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Alert (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Alert(System::String ^ message);" />
      <MemberSignature Language="F#" Value="member this.Alert : string -&gt; unit" Usage="htmlWindow.Alert message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message"><see cref="T:System.String" /> Do wyświetlenia w oknie komunikatu.</param>
        <summary>Wyświetla okno komunikatu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Klasa oferuje bardziej wydajną wersję <xref:System.Windows.Forms.HtmlWindow.Alert%2A> metody. <xref:System.Windows.Forms.MessageBox?displayProperty=nameWithType>  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms535933.aspx">Alert — Metoda</related>
      </Docs>
    </Member>
    <Member MemberName="AttachEventHandler">
      <MemberSignature Language="C#" Value="public void AttachEventHandler (string eventName, EventHandler eventHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AttachEventHandler(string eventName, class System.EventHandler eventHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.AttachEventHandler(System.String,System.EventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AttachEventHandler(System::String ^ eventName, EventHandler ^ eventHandler);" />
      <MemberSignature Language="F#" Value="member this.AttachEventHandler : string * EventHandler -&gt; unit" Usage="htmlWindow.AttachEventHandler (eventName, eventHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventName" Type="System.String" />
        <Parameter Name="eventHandler" Type="System.EventHandler" />
      </Parameters>
      <Docs>
        <param name="eventName">Nazwa zdarzenia, które ma zostać obsłużone.</param>
        <param name="eventHandler">Odwołanie do zarządzanego kodu, który obsługuje zdarzenie.</param>
        <summary>Dodaje procedurę obsługi zdarzeń dla nazwanego zdarzenia DOM języka HTML.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nie należy dołączać zdarzenia do dokumentu HTML lub jednego z jego obiektów do momentu zakończenia ładowania dokumentu. Najwcześniejsza Metoda powinna wywołać tę metodę w <xref:System.Windows.Forms.WebBrowser.DocumentCompleted> przypadku <xref:System.Windows.Forms.WebBrowser> kontrolki.  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://developer.mozilla.org/docs/Web/API/EventTarget/addEventListener">EventTarget.addEventListener()</related>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="htmlWindow.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zamyka okno.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj właściwości <xref:System.Windows.Forms.HtmlWindow.IsClosed%2A> , aby określić, czy okno jest już zamknięte. Jeśli okno zostało już zamknięte, ta metoda nie będzie miała żadnego efektu.  
  
 Podczas tworzenia nowych okien przy użyciu <xref:System.Windows.Forms.HtmlWindow.Open%2A> lub <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A>program <xref:System.Windows.Forms.HtmlWindow.Close%2A> powoduje, że Document Object Model HTML otwiera nowe wystąpienie programu Internet Explorer. Jeśli nie wywołasz <xref:System.Windows.Forms.HtmlWindow.Close%2A> wszystkich utworzonych przez Ciebie okien, to wystąpienie programu Internet Explorer pozostanie uruchomione nawet po zamknięciu aplikacji.  
  
   
  
## Examples  
 Poniższy przykład kodu otwiera okno i zamyka go, jeśli użytkownik nie użył go w ciągu ostatnich pięciu minut. Przykład kodu został zapisany w założeniu, że formularz <xref:System.Windows.Forms.WebBrowser> ma kontrolkę o nazwie `WebBrowser1` <xref:System.Windows.Forms.Button> , nazwana `Button1`i <xref:System.Windows.Forms.Timer> klasę o nazwie `Timer1`. Aby pomyślnie uruchomić ten przykład, należy zmienić pierwszy argument przekazany do <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A> prawidłowego adresu URL.  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#9](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#9)]
 [!code-vb[System.Windows.Forms.HtmlWindow#9](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#9)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536367.aspx">Close — Metoda</related>
      </Docs>
    </Member>
    <Member MemberName="Confirm">
      <MemberSignature Language="C#" Value="public bool Confirm (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Confirm(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.Confirm(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Confirm (message As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Confirm(System::String ^ message);" />
      <MemberSignature Language="F#" Value="member this.Confirm : string -&gt; bool" Usage="htmlWindow.Confirm message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Tekst, który ma być wyświetlany użytkownikowi.</param>
        <summary>Wyświetla okno dialogowe z komunikatem i przyciskami, aby zażądanie odpowiedzi tak/nie.</summary>
        <returns><see langword="true" />Jeśli użytkownik kliknął **tak**; Jeśli użytkownik kliknął nie lub zamknął okno dialogowe. **** <see langword="false" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlWindow.Confirm%2A>Wyświetla modalne okno dialogowe; Użytkownik nie będzie mógł uzyskać dostępu do podstawowej strony HTML bez wcześniejszego zamknięcia tego okna dialogowego.  
  
## Examples  

Skopiuj następujący kod HTML i Zapisz go w postaci o nazwie orderForm. htm:  

```html
<HTML>
<BODY>
<FORM name="NewOrderForm">
Select Part Type:
<SELECT name="PartType">
  <OPTION>AZ-3700
  <OPTION>AZ-3701
  <OPTION>AZ-3702  
</SELECT><br/>
Quantity: <INPUT type="text" name="PartQty" size="2" maxsize="2" /><br/>
Building/Desk:
<INPUT type="text" name="PartBuilding" size="2" maxsize="2"/> /  
<INPUT type="text" name="PartDesk" size="2" maxsize="2"/><p/>
<INPUT type="submit" value="Transmit Order"/>
</FORM>
</BODY>
</HTML>
```

Poniższy przykład wyświetla <xref:System.Windows.Forms.HtmlWindow.Confirm%2A> okno dialogowe podczas `NewOrderForm`przesyłania przez użytkownika.  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#10](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#10)]
 [!code-vb[System.Windows.Forms.HtmlWindow#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#10)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536376.aspx">Confirm — Metoda</related>
      </Docs>
    </Member>
    <Member MemberName="DetachEventHandler">
      <MemberSignature Language="C#" Value="public void DetachEventHandler (string eventName, EventHandler eventHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DetachEventHandler(string eventName, class System.EventHandler eventHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.DetachEventHandler(System.String,System.EventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DetachEventHandler(System::String ^ eventName, EventHandler ^ eventHandler);" />
      <MemberSignature Language="F#" Value="member this.DetachEventHandler : string * EventHandler -&gt; unit" Usage="htmlWindow.DetachEventHandler (eventName, eventHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventName" Type="System.String" />
        <Parameter Name="eventHandler" Type="System.EventHandler" />
      </Parameters>
      <Docs>
        <param name="eventName">Nazwa zdarzenia, które ma zostać obsłużone.</param>
        <param name="eventHandler">Odwołanie do zarządzanego kodu, który obsługuje zdarzenie.</param>
        <summary>Usuwa nazwaną procedurę obsługi zdarzeń.</summary>
        <remarks>To be added.</remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536411.aspx">detachEvent, Metoda</related>
      </Docs>
    </Member>
    <Member MemberName="Document">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlDocument Document { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlDocument Document" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.Document" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Document As HtmlDocument" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlDocument ^ Document { System::Windows::Forms::HtmlDocument ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Document : System.Windows.Forms.HtmlDocument" Usage="System.Windows.Forms.HtmlWindow.Document" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlDocument</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera dokument HTML zawarty w oknie.</summary>
        <value>Prawidłowe wystąpienie <see cref="T:System.Windows.Forms.HtmlDocument" />, jeśli dokument zostanie załadowany. Jeśli to okno zawiera <c>zestaw ramek</c>lub żaden dokument nie jest aktualnie załadowany, zostanie zwrócony <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zazwyczaj dostęp <xref:System.Windows.Forms.HtmlWindow.Document%2A> <xref:System.Windows.Forms.WebBrowser> odbywa się za pomocą właściwościformantu.<xref:System.Windows.Forms.WebBrowser.Document%2A> Tej właściwości należy użyć, `FRAME` <xref:System.Windows.Forms.HtmlWindow.Frames%2A> gdy trzeba uzyskać dostęp do dokumentu w kolekcji programu.  
  
   
  
## Examples  
 Poniższy przykład kodu sprawdza każdy dokument w obrębie strony zawierającej ramki i tworzy tabelę wszystkich wychodzących hiperlinków na każdej stronie w celu przeprowadzenia inspekcji w przyszłości.  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#2)]
 [!code-vb[System.Windows.Forms.HtmlWindow#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DomWindow">
      <MemberSignature Language="C#" Value="public object DomWindow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DomWindow" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.DomWindow" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DomWindow As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ DomWindow { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DomWindow : obj" Usage="System.Windows.Forms.HtmlWindow.DomWindow" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera niezarządzany interfejs opakowany przez tę klasę.</summary>
        <value>Obiekt, który może być rzutowany na <see langword="IHTMLWindow2" />wskaźnik <see langword="IHTMLWindow3" />, lub <see langword="IHTMLWindow4" /> .</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj podstawowych wskaźników niezarządzanych interfejsów do Document Object Model (DOM), aby wykonać metody nieuwidaczniane <xref:System.Windows.Forms.HtmlWindow>przez.  
  
 Należy dodać odwołanie do niezarządzanego MSHTML. dll, aby można było go <xref:System.Windows.Forms.HtmlWindow.DomWindow%2A>użyć. Aby uzyskać więcej informacji, zobacz [Importowanie biblioteki typów jako zestawu](~/docs/framework/interop/importing-a-type-library-as-an-assembly.md).  
  
   
  
## Examples  
 Poniższy przykład kodu uzyskuje `IHTMLWindow2` wskaźnik z okna dokumentu i wyświetla nowy dokument w oknie modalnym.  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#3)]
 [!code-vb[System.Windows.Forms.HtmlWindow#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/aa741505.aspx">IHTMLWindow2, interfejs</related>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/aa741356.aspx">IHTMLWindow3, interfejs</related>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/aa741344.aspx">IHTMLWindow4, interfejs</related>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="htmlWindow.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Obiekt do przetestowania.</param>
        <summary>Testuje obiekt pod kątem równości względem bieżącego obiektu.</summary>
        <returns><see langword="true" />Jeśli obiekty są równe; w przeciwnym razie. <see langword="false" /></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Error">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementErrorEventHandler Error;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementErrorEventHandler Error" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlWindow.Error" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Error As HtmlElementErrorEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementErrorEventHandler ^ Error;" />
      <MemberSignature Language="F#" Value="member this.Error : System.Windows.Forms.HtmlElementErrorEventHandler " Usage="member this.Error : System.Windows.Forms.HtmlElementErrorEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementErrorEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy skrypt działający wewnątrz okna napotka błąd czasu wykonywania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Strony HTML mogą zawierać kod skryptu, zwykle pisany w języku JScript lub VBScript, który jest wykonywany po załadowaniu strony. <xref:System.Windows.Forms.HtmlWindow.Error>występuje za każdym razem, gdy skrypt napotka błąd czasu wykonywania. Ponieważ kod skryptu jest opóźniony, co oznacza, że wywołania do obiektu nie są rozpoznawane do czasu wykonania, błędy mogą obejmować wszystko z odwołania do obiektu o wartości null w celu wywołania niezdefiniowanej właściwości lub metody.  
  
 Można ustawić <xref:System.Windows.Forms.HtmlElementErrorEventArgs.Handled%2A> <xref:System.Windows.Forms.HtmlElementErrorEventArgs> właściwość na wartość true, aby zapobiec wyświetlaniu okna dialogowego błędu natywnego w programie Internet Explorer.
  
   
  
## Examples  
 Poniższy przykład kodu Zalewka błędu, który powstaje, gdy skrypt na stronie HTML próbuje uzyskać dostęp do obiektu, który nie jest zdefiniowany w dokumencie. Strona musi być w pełni załadowana przed <xref:System.Windows.Forms.HtmlWindow.Error> dołączeniem programu obsługi zdarzeń, w przeciwnym razie nie będzie działać.  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#16](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#16)]
 [!code-vb[System.Windows.Forms.HtmlWindow#16](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#16)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/cc197053.aspx">Zdarzenie OnError</related>
      </Docs>
    </Member>
    <Member MemberName="Focus">
      <MemberSignature Language="C#" Value="public void Focus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Focus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.Focus" />
      <MemberSignature Language="VB.NET" Value="Public Sub Focus ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Focus();" />
      <MemberSignature Language="F#" Value="member this.Focus : unit -&gt; unit" Usage="htmlWindow.Focus " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Umieszcza fokus w bieżącym oknie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli inne okno przeposiadało fokus <xref:System.Windows.Forms.HtmlWindow.Focus%2A> przed wywołaniem, to okno spowoduje utratę fokusu.  
  
 Nie wywołuj fokusu na elemencie wewnątrz okna, dopóki nie zostanie zgłoszone <xref:System.Windows.Forms.HtmlWindow.Load> zdarzenie okna.  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536425.aspx">Metoda Focus</related>
      </Docs>
    </Member>
    <Member MemberName="Frames">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlWindowCollection Frames { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlWindowCollection Frames" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.Frames" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Frames As HtmlWindowCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlWindowCollection ^ Frames { System::Windows::Forms::HtmlWindowCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Frames : System.Windows.Forms.HtmlWindowCollection" Usage="System.Windows.Forms.HtmlWindow.Frames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlWindowCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera odwołanie do każdego elementu <c>ramki</c> zdefiniowanego na stronie sieci Web.</summary>
        <value>Obiekt <c>ramki</c> i <c></c> elementów iframe dokumentu <see cref="T:System.Windows.Forms.HtmlWindowCollection" /> .</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A `FRAME` jest zestawem systemu Windows zdefiniowanym `FRAMESET`w. `FRAME`s umożliwiają hostowanie wielu dokumentów w ramach jednego dokumentu. Każda `FRAME` z nich jest definiowana jako posiadające określony wiersz i szerokość kolumny i jest umieszczana na stronie w odniesieniu do `FRAME`pozostałych s zdefiniowanych w `FRAMESET`obrębie; pozycja a `FRAME` jest stała, chociaż użytkownik może czasami użyć myszy kursor, aby zwiększyć lub zmniejszyć `FRAME`. `IFRAME` Jest podobny do ramki, ale nie musi być zakotwiczony w stałej pozycji.  
  
 Ramki będą zawierać jedno wystąpienie <xref:System.Windows.Forms.HtmlWindow> dla każdego `FRAME` lub `IFRAME` zdefiniowane na stronie sieci Web.  
  
   
  
## Examples  
 Poniższy przykład kodu sprawdza każdy dokument w obrębie strony zawierającej ramki i tworzy tabelę wszystkich wychodzących hiperlinków na każdej stronie w celu przeprowadzenia inspekcji w przyszłości.  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#2)]
 [!code-vb[System.Windows.Forms.HtmlWindow#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms537459.aspx">Kolekcja ramek</related>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="htmlWindow.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Służy jako funkcja skrótu dla określonego typu.</summary>
        <returns>Kod skrótu dla bieżącego <see cref="T:System.Windows.Forms.HtmlWindow" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GotFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler GotFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler GotFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlWindow.GotFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotFocus As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ GotFocus;" />
      <MemberSignature Language="F#" Value="member this.GotFocus : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.GotFocus : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy bieżące okno uzyska fokus wprowadzania danych przez użytkownika.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlWindow.GotFocus>nastąpi:  
  
-   Pierwsze okno w `FRAMESET` `FRAMESET` trakcie pierwszego ładowania.  
  
-   Ten ostatni miał fokus, gdy okno <xref:System.Windows.Forms.WebBrowser> zawierające kontrolkę zostanie przesunięte na pierwszy plan. `FRAME`  
  
-   `FRAME` Kliknięty przez użytkownika, ale tylko wtedy, gdy kliknięcie użytkownika nie umieści fokusu na elemencie w oknie.  
  
 Nie można anulować domyślnej akcji dla <xref:System.Windows.Forms.HtmlWindow.GotFocus> zdarzenia lub uniemożliwić jej propagację.
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje użycie tego elementu członkowskiego. W tym przykładzie program obsługi zdarzeń raportuje wystąpienie <xref:System.Windows.Forms.HtmlWindow.GotFocus> zdarzenia. Ten raport pomaga dowiedzieć się, kiedy wystąpi zdarzenie i może pomóc w debugowaniu.  
  
 Aby uruchomić przykładowy kod, wklej go do projektu zawierającego wystąpienie typu <xref:System.Windows.Forms.HtmlWindow> o nazwie. `HtmlWindow1` Następnie upewnij się, że program obsługi zdarzeń jest skojarzony <xref:System.Windows.Forms.HtmlWindow.GotFocus> ze zdarzeniem.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#452](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#452)]
 [!code-vb[System.Windows.Forms.EventExamples#452](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#452)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536934.aspx">Zdarzenie onFocus</related>
      </Docs>
    </Member>
    <Member MemberName="History">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlHistory History { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlHistory History" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.History" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property History As HtmlHistory" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlHistory ^ History { System::Windows::Forms::HtmlHistory ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.History : System.Windows.Forms.HtmlHistory" Usage="System.Windows.Forms.HtmlWindow.History" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlHistory</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera obiekt zawierający ostatnio odwiedzane adresy URL użytkownika.</summary>
        <value><see cref="T:System.Windows.Forms.HtmlHistory" /> Dla bieżącego okna.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlWindow.History%2A>zawiera wszystkie adresy URL, do których odchodzą w bieżącym oknie, które są określane jako *stos nawigacji*i zawiera metody nawigacji z powrotem do tych dokumentów.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsClosed">
      <MemberSignature Language="C#" Value="public bool IsClosed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsClosed" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.IsClosed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsClosed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsClosed { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsClosed : bool" Usage="System.Windows.Forms.HtmlWindow.IsClosed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy to okno jest otwarte czy zamknięte.</summary>
        <value><see langword="true" />Jeśli okno jest nadal otwarte na ekranie; w przeciwnym razie. <see langword="false" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli obiekt <xref:System.Windows.Forms.HtmlWindow.Close%2A> został zamknięty przez użytkownika lub przez wywołanie metody, próba przejścia do nowego adresu URL lub uzyskania dostępu do dokumentu tego okna spowoduje błąd. <xref:System.Windows.Forms.HtmlWindow> Użyj tej właściwości, aby określić, czy jest bezpieczne wywoływanie właściwości i metod w bieżącym obiekcie okna.  
  
   
  
## Examples  
 Poniższy przykład kodu otwiera okno i zamyka go, jeśli użytkownik nie użył go w ciągu ostatnich pięciu minut. Przykład kodu wymaga <xref:System.Windows.Forms.WebBrowser> , aby formularz miał kontrolkę o nazwie `WebBrowser1`, <xref:System.Windows.Forms.Button> nazwana `Button1`i <xref:System.Windows.Forms.Timer> klasę o nazwie `Timer1`.  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#8)]
 [!code-vb[System.Windows.Forms.HtmlWindow#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#8)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms537459.aspx">Właściwość Closed</related>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler Load;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler Load" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlWindow.Load" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Load As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ Load;" />
      <MemberSignature Language="F#" Value="member this.Load : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.Load : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy dokument okna i wszystkie jego elementy zakończyły inicjowanie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zdarzenie działa podobnie <xref:System.Windows.Forms.WebBrowser.DocumentCompleted> do zdarzenia w <xref:System.Windows.Forms.WebBrowser> kontrolce: sygnalizuje, że można bezpiecznie uzyskać dostęp do elementów HTML wewnątrz dokumentu. <xref:System.Windows.Forms.HtmlWindow.Load>  
  
 Nie można anulować domyślnej akcji dla <xref:System.Windows.Forms.HtmlWindow.Load> zdarzenia.
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje użycie tego elementu członkowskiego. W tym przykładzie program obsługi zdarzeń raportuje wystąpienie <xref:System.Windows.Forms.HtmlWindow.Load> zdarzenia. Ten raport pomaga dowiedzieć się, kiedy wystąpi zdarzenie i może pomóc w debugowaniu. Aby zgłosić wiele zdarzeń lub zdarzenia, które występują często, należy rozważyć <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> zamianę <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> lub dołączenie komunikatu do wielowierszowego <xref:System.Windows.Forms.TextBox>.  
  
 Aby uruchomić przykładowy kod, wklej go do projektu zawierającego wystąpienie typu <xref:System.Windows.Forms.HtmlWindow> o nazwie. `HtmlWindow1` Następnie upewnij się, że program obsługi zdarzeń jest skojarzony <xref:System.Windows.Forms.HtmlWindow.Load> ze zdarzeniem.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#453](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#453)]
 [!code-vb[System.Windows.Forms.EventExamples#453](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#453)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/cc197055.aspx">Zdarzenie OnLoad</related>
      </Docs>
    </Member>
    <Member MemberName="LostFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler LostFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler LostFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlWindow.LostFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostFocus As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ LostFocus;" />
      <MemberSignature Language="F#" Value="member this.LostFocus : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.LostFocus : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy fokus wprowadzania użytkownika opuścił okno.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu demonstruje użycie tego elementu członkowskiego. W tym przykładzie program obsługi zdarzeń raportuje wystąpienie <xref:System.Windows.Forms.HtmlWindow.LostFocus> zdarzenia. Ten raport pomaga dowiedzieć się, kiedy wystąpi zdarzenie i może pomóc w debugowaniu.  
  
 Aby uruchomić przykładowy kod, wklej go do projektu zawierającego wystąpienie typu <xref:System.Windows.Forms.HtmlWindow> o nazwie. `HtmlWindow1` Następnie upewnij się, że program obsługi zdarzeń jest skojarzony <xref:System.Windows.Forms.HtmlWindow.LostFocus> ze zdarzeniem.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#454](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#454)]
 [!code-vb[System.Windows.Forms.EventExamples#454](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#454)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="MoveTo">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Przenosi okno do określonych współrzędnych na ekranie.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MoveTo">
      <MemberSignature Language="C#" Value="public void MoveTo (System.Drawing.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MoveTo(valuetype System.Drawing.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.MoveTo(System.Drawing.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MoveTo(System::Drawing::Point point);" />
      <MemberSignature Language="F#" Value="member this.MoveTo : System.Drawing.Point -&gt; unit" Usage="htmlWindow.MoveTo point" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="point">Współrzędne x i y lewego górnego rogu okna.</param>
        <summary>Przenosi okno do określonych współrzędnych na ekranie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nie można użyć <xref:System.Windows.Forms.HtmlWindow.MoveTo%2A> do przeniesienia okna z widocznej krawędzi ekranu. Ta metoda jest również dostępna za pomocą skryptu na stronie sieci Web i zezwolenie na niewidoczny skrypt niezaufany nie jest uważane za zabezpieczone.  
  
 <xref:System.Windows.Forms.HtmlWindow.MoveTo%2A>spowoduje wygenerowanie <xref:System.UnauthorizedAccessException> elementu, jeśli okno, które próbujesz przenieść, a jego okno nadrzędne ma inne domeny najwyższego poziomu. Na przykład Jeśli zarządzasz <xref:System.Windows.Forms.WebBrowser> kontrolką wskazującą a.adatum.com, Utwórz nowe okno przy użyciu polecenia <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A> , aby wyświetlić b.adatum.com. W takim przypadku oba okna są uważane za część tej samej domeny najwyższego poziomu, a wyjątek nie jest zgłaszany. Jeśli jednak zostanie wywołana <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A> usługa WWW, Microsoft. com, te dwa okna mają teraz różne domeny najwyższego poziomu, <xref:System.Windows.Forms.HtmlWindow.MoveTo%2A> a operacja spowoduje zgłoszenie wyjątku.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">Kod próbujący wykonać tę operację nie ma uprawnień do manipulowania tym oknem.</exception>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536626.aspx">moveTo — Metoda</related>
      </Docs>
    </Member>
    <Member MemberName="MoveTo">
      <MemberSignature Language="C#" Value="public void MoveTo (int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MoveTo(int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.MoveTo(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MoveTo (x As Integer, y As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MoveTo(int x, int y);" />
      <MemberSignature Language="F#" Value="member this.MoveTo : int * int -&gt; unit" Usage="htmlWindow.MoveTo (x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">Współrzędna x lewego górnego rogu okna.</param>
        <param name="y">Współrzędna y lewego górnego rogu okna.</param>
        <summary>Przenosi okno do określonych współrzędnych na ekranie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nie można użyć <xref:System.Windows.Forms.HtmlWindow.MoveTo%2A> do przeniesienia okna z widocznej krawędzi ekranu. Ta metoda jest również dostępna za pomocą skryptu na stronie sieci Web i zezwolenie na niewidoczny skrypt niezaufany nie jest uważane za zabezpieczone.  
  
 <xref:System.Windows.Forms.HtmlWindow.MoveTo%2A>spowoduje wygenerowanie <xref:System.UnauthorizedAccessException> elementu, jeśli okno, które próbujesz przenieść, a jego okno nadrzędne ma inne domeny najwyższego poziomu. Na przykład Jeśli zarządzasz <xref:System.Windows.Forms.WebBrowser> kontrolką i wskazujesz a.adatum.com, tworzysz nowe okno przy użyciu polecenia <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A> do wyświetlania b.adatum.com. W takim przypadku oba okna są uważane za część tej samej domeny najwyższego poziomu, a wyjątek nie jest zgłaszany. Jeśli jednak zostanie wywołana <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A> usługa WWW, Microsoft. com, te dwa okna mają teraz różne domeny najwyższego poziomu, <xref:System.Windows.Forms.HtmlWindow.MoveTo%2A> a operacja spowoduje zgłoszenie wyjątku.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">Kod próbujący wykonać tę operację nie ma uprawnień do manipulowania tym oknem.</exception>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.Windows.Forms.HtmlWindow.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia nazwę okna.</summary>
        <value><see cref="T:System.String" /> Reprezentujący nazwę.</value>
        <remarks>To be added.</remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms534187.aspx">Właściwość name</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Navigate">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Wyświetla lub pobiera nową zawartość znajdującą się pod określonym adresem URL.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Navigate">
      <MemberSignature Language="C#" Value="public void Navigate (string urlString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Navigate(string urlString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.Navigate(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Navigate (urlString As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Navigate(System::String ^ urlString);" />
      <MemberSignature Language="F#" Value="member this.Navigate : string -&gt; unit" Usage="htmlWindow.Navigate urlString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="urlString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="urlString">Zasób do wyświetlenia, opisany przez jednolity lokalizator zasobów.</param>
        <summary>Wyświetla lub pobiera nową zawartość znajdującą się pod określonym adresem URL.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `url` Jeśli parametr wskazuje na stronę HTML, Strona aktualnie wyświetlana w oknie zostanie zniszczona i zastąpiona nową stroną. wszystkie odwołania do aplikacji przechowywanej w obiektach zarządzanych Dom na starej stronie nie będą prawidłowe. Jeśli `url` wskazuje zasób, którego nie można wyświetlić w programie Internet Explorer, zostanie wyświetlony okno dialogowe z pytaniem, czy otworzyć zasób poza aplikacją, zapisać go na dysku, czy anulować operację pobierania.  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536638.aspx">Metoda nawigacji</related>
      </Docs>
    </Member>
    <Member MemberName="Navigate">
      <MemberSignature Language="C#" Value="public void Navigate (Uri url);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Navigate(class System.Uri url) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.Navigate(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Navigate (url As Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Navigate(Uri ^ url);" />
      <MemberSignature Language="F#" Value="member this.Navigate : Uri -&gt; unit" Usage="htmlWindow.Navigate url" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="url">Lokalizacja, która jest określona jako <see cref="T:System.Uri" />, dla dokumentu lub obiektu, który ma być wyświetlany w bieżącym oknie.</param>
        <summary>Wyświetla nowy dokument w bieżącym oknie.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Windows.Forms.HtmlWindow left, System.Windows.Forms.HtmlWindow right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Windows.Forms.HtmlWindow left, class System.Windows.Forms.HtmlWindow right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.op_Equality(System.Windows.Forms.HtmlWindow,System.Windows.Forms.HtmlWindow)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As HtmlWindow, right As HtmlWindow) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Windows::Forms::HtmlWindow ^ left, System::Windows::Forms::HtmlWindow ^ right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Windows.Forms.HtmlWindow * System.Windows.Forms.HtmlWindow -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Windows.Forms.HtmlWindow" />
        <Parameter Name="right" Type="System.Windows.Forms.HtmlWindow" />
      </Parameters>
      <Docs>
        <param name="left">Pierwszy <see cref="T:System.Windows.Forms.HtmlWindow" /> obiekt.</param>
        <param name="right">Drugi <see cref="T:System.Windows.Forms.HtmlWindow" /> obiekt.</param>
        <summary>Testuje dwa <see cref="T:System.Windows.Forms.HtmlWindow" /> obiekty pod kątem równości.</summary>
        <returns><see langword="true" />Jeśli oba parametry są <see langword="null" />lub, jeśli oba elementy mają ten sam podstawowy interfejs com; <see langword="false" />w przeciwnym razie.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Operator równości testuje `IUnknown` wskaźniki bazowych obiektów com opakowanych przez dostarczone <xref:System.Windows.Forms.HtmlWindow> klasy.  
  
 Równoważna Metoda dla tego operatora to<xref:System.Windows.Forms.HtmlWindow.Equals%28System.Object%29?displayProperty=nameWithType>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Windows.Forms.HtmlWindow left, System.Windows.Forms.HtmlWindow right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Windows.Forms.HtmlWindow left, class System.Windows.Forms.HtmlWindow right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.op_Inequality(System.Windows.Forms.HtmlWindow,System.Windows.Forms.HtmlWindow)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As HtmlWindow, right As HtmlWindow) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Windows::Forms::HtmlWindow ^ left, System::Windows::Forms::HtmlWindow ^ right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Windows.Forms.HtmlWindow * System.Windows.Forms.HtmlWindow -&gt; bool" Usage="System.Windows.Forms.HtmlWindow.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Windows.Forms.HtmlWindow" />
        <Parameter Name="right" Type="System.Windows.Forms.HtmlWindow" />
      </Parameters>
      <Docs>
        <param name="left">Pierwszy <see cref="T:System.Windows.Forms.HtmlWindow" /> obiekt.</param>
        <param name="right">Drugi <see cref="T:System.Windows.Forms.HtmlWindow" /> obiekt.</param>
        <summary>Testuje <see langword="HtmlWindow" /> dwa obiekty pod kątem nierówności.</summary>
        <returns><see langword="true" />Jeśli jeden, ale nie oba obiekty jest <see langword="null" />lub że wskaźniki bazowe com nie są zgodne; w przeciwnym razie,. <see langword="false" /></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Open">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Wyświetla plik w nazwanym oknie.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlWindow Open (string urlString, string target, string windowOptions, bool replaceEntry);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.HtmlWindow Open(string urlString, string target, string windowOptions, bool replaceEntry) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.Open(System.String,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Open (urlString As String, target As String, windowOptions As String, replaceEntry As Boolean) As HtmlWindow" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::HtmlWindow ^ Open(System::String ^ urlString, System::String ^ target, System::String ^ windowOptions, bool replaceEntry);" />
      <MemberSignature Language="F#" Value="member this.Open : string * string * string * bool -&gt; System.Windows.Forms.HtmlWindow" Usage="htmlWindow.Open (urlString, target, windowOptions, replaceEntry)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlWindow</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="urlString" Type="System.String" />
        <Parameter Name="target" Type="System.String" />
        <Parameter Name="windowOptions" Type="System.String" />
        <Parameter Name="replaceEntry" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="urlString">Uniform Resource Locator opisujący lokalizację pliku do załadowania.</param>
        <param name="target">Nazwa okna, w którym ma zostać otwarty zasób. Może to być nazwa oferowana przez dewelopera lub jedna z następujących wartości specjalnych: 
 <c>_blank</c>: Otwiera <paramref name="urlString" /> w nowym oknie. Działa tak samo jak wywołanie metody <see cref="M:System.Windows.Forms.HtmlWindow.OpenNew(System.String,System.String)" />.  
  
 <c>_media</c>: Zostanie <paramref name="urlString" /> otwarty na pasku nośnika.  
  
 <c>_parent</c>: Otwiera <paramref name="urlString" /> okno, które utworzyło bieżące okno.  
  
 <c>_search</c>: Zostanie <paramref name="urlString" /> otwarty na pasku wyszukiwania.  
  
 <c>_self</c>: Otwiera <paramref name="urlString" /> w bieżącym oknie.  
  
 <c>_top</c>: Jeśli wywoływana względem okna należącego do elementu <c>ramki</c> , otwiera <paramref name="urlString" /> się w oknie hostującym jego <c>zestaw ramek</c>. W przeciwnym razie działa tak samo jak <c>_self</c>.</param>
        <param name="windowOptions">Rozdzielany przecinkami ciąg składający się z zero lub więcej z następujących opcji w postaci <c>name = value</c>. Z wyjątkiem opcji <c>Left</c>, <c>Top</c>, <c>Height</c>i <c>Width</c> , które przyjmują dowolne liczby całkowite, każda opcja akceptuje wartości <c>Yes</c> lub <see langword="1" />, i <c>no</c> lub <see langword="0" />, jako prawidłowymi wartościami.  
  
 <c>channelmode</c>: Używany z technologią przestarzałych kanałów programu Internet Explorer 4,0. Wartość domyślna to <c>nie</c>.  
  
 <c>katalogi</c>: Określa, czy okno ma wyświetlać przyciski nawigacji katalogu. Wartość domyślna to <c>Yes</c>.  
  
 <c>wysokość</c>: Wysokość obszaru klienckiego okna (w pikselach). Wartość minimalna to 100; próbuje otworzyć okno mniejsze niż to spowoduje otwarcie okna zgodnie z ustawieniami domyślnymi programu Internet Explorer.  
  
 z <c>lewej</c>: Pozycja lewej (współrzędnej x) okna względem lewego górnego rogu ekranu użytkownika (w pikselach). Musi to być dodatnia liczba całkowita.  
  
 <c>Lokalizacja</c>: Określa, czy ma być wyświetlany pasek adresu, który umożliwia użytkownikom nawigowanie w oknie do nowego adresu URL. Wartość domyślna to <c>Yes</c>.  
  
 <c>pasek menu</c>: Określa, czy menu ma być wyświetlane w nowym oknie. Wartość domyślna to <c>Yes</c>.  
  
 <c>zmienny rozmiar</c>: Określa, czy można zmienić rozmiar okna przez użytkownika. Wartość domyślna to <c>Yes</c>.  
  
 <c>paski przewijania</c>: Czy okno ma poziome i pionowe paski przewijania. Wartość domyślna to <c>Yes</c>.  
  
 <c>stan</c>: Czy okno ma pasek stanu u dołu. Wartość domyślna to <c>Yes</c>.  
  
 <c>pasek tytułu</c>: Określa, czy tytuł bieżącej strony jest wyświetlany. Ustawienie tej opcji na wartość <c>nie</c> ma wpływu na aplikację zarządzaną; pasek tytułu będzie zawsze wyświetlany.  
  
 <c>pasek narzędzi</c>: Czy przyciski paska narzędzi, takie jak **Wstecz**, **Prześlij dalej**i **Zatrzymaj** , są widoczne. Wartość domyślna to <c>Yes</c>.  
  
 <c>Góra</c>: Górna pozycja (współrzędnej y) okna względem lewego górnego rogu ekranu użytkownika (w pikselach). Musi to być dodatnia liczba całkowita.  
  
 <c>Szerokość</c>: Szerokość obszaru klienta okna (w pikselach). Wartość minimalna to 100; próbuje otworzyć okno mniejsze niż to spowoduje otwarcie okna zgodnie z ustawieniami domyślnymi programu Internet Explorer.</param>
        <param name="replaceEntry">Czy <paramref name="urlString" /> zastępuje adres URL bieżącego okna w historii nawigacji. Będzie to miało wpływ na działanie metod <see cref="T:System.Windows.Forms.HtmlHistory" /> klasy.</param>
        <summary>Wyświetla plik w nazwanym oknie.</summary>
        <returns>Reprezentuje nowe okno lub wcześniej utworzone okno nazwane <paramref name="target" /> przez parametr. <see cref="T:System.Windows.Forms.HtmlWindow" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Parametr może mieć nazwę okna, które zostało utworzone w wyniku poprzedniego wywołania do <xref:System.Windows.Forms.HtmlWindow.Open%2A>. `target` Parametr może również wskazywać okno otwarte przez kliknięcie hiperłącza (`A` elementu) `FORM` lub elementu, który używa `TARGET` atrybutu, aby otworzyć jego adres URL w nowym oknie. Następujący kod HTML otworzy nowe okno o nazwie `orderWindow` , gdy użytkownik go klika:  
  
 `<A HREF="/startOrder.aspx" TARGET="orderWindow">Click to Start Order</a>`  
  
 W przypadku podania jakichkolwiek opcji dla `windowOptions` parametru jakakolwiek opcja nie jest włączana automatycznie. Innymi słowy, jeśli określisz `windowOptions` tylko, że chcesz mieć pasek stanu, a następnie pasek menu, pasek narzędzi, tytuł, paski przewijania itd `windowOptions`. nie będą wyświetlane, chyba że jawnie włączysz je w sposób.  
  
 Jeśli plik, do którego `url` odwołuje się plik HTML, plik tekstowy lub inny typ pliku, który może być hostowany w programie Internet Explorer, zostanie wyświetlony w nazwanym oknie. Jeśli plik nie może zostać wyświetlony wewnątrz programu Internet Explorer, a okno nazwane przez cel jeszcze nie istnieje, zostanie otwarte w programie Internet Explorer wystarczająco długo, aby można było pobrać zasób. rozpocznie się natychmiast po jego zamknięciu.  
  
 Gdy tworzysz nowe okna przy użyciu <xref:System.Windows.Forms.HtmlWindow.Open%2A> lub <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A>, spowoduje to, że Document Object Model HTML otwiera nowe wystąpienie programu Internet Explorer. Jeśli nie wywołasz <xref:System.Windows.Forms.HtmlWindow.Close%2A> wszystkich utworzonych przez siebie okien, to wystąpienie programu Internet Explorer pozostanie uruchomione nawet po zamknięciu aplikacji.  
  
 Jeśli używasz <xref:System.Windows.Forms.HtmlWindow.Open%2A> do załadowania adresu URL w istniejącym oknie, `windowOptions` zostaną zignorowane. okno zachowa wymiary, wygląd i lokalizację ekranu jako pierwsze <xref:System.Windows.Forms.HtmlWindow.Open%2A>przez wywołanie początkowe.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlWindow Open (Uri url, string target, string windowOptions, bool replaceEntry);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.HtmlWindow Open(class System.Uri url, string target, string windowOptions, bool replaceEntry) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.Open(System.Uri,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Open (url As Uri, target As String, windowOptions As String, replaceEntry As Boolean) As HtmlWindow" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::HtmlWindow ^ Open(Uri ^ url, System::String ^ target, System::String ^ windowOptions, bool replaceEntry);" />
      <MemberSignature Language="F#" Value="member this.Open : Uri * string * string * bool -&gt; System.Windows.Forms.HtmlWindow" Usage="htmlWindow.Open (url, target, windowOptions, replaceEntry)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlWindow</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="System.Uri" />
        <Parameter Name="target" Type="System.String" />
        <Parameter Name="windowOptions" Type="System.String" />
        <Parameter Name="replaceEntry" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="url">Uniform Resource Locator opisujący lokalizację pliku do załadowania.</param>
        <param name="target">Nazwa okna, w którym ma zostać otwarty zasób. Może to być nazwa oferowana przez dewelopera lub jedna z następujących wartości specjalnych: 
 <c>_blank</c>: Otwiera <paramref name="url" /> w nowym oknie. Działa tak samo jak wywołanie metody <see cref="M:System.Windows.Forms.HtmlWindow.OpenNew(System.String,System.String)" />.  
  
 <c>_media</c>: Zostanie <paramref name="url" /> otwarty na pasku nośnika.  
  
 <c>_parent</c>: Otwiera <paramref name="url" /> okno, które utworzyło bieżące okno.  
  
 <c>_search</c>: Zostanie <paramref name="url" /> otwarty na pasku wyszukiwania.  
  
 <c>_self</c>: Otwiera <paramref name="url" /> w bieżącym oknie.  
  
 <c>_top</c>: Jeśli wywoływana względem okna należącego do elementu <c>ramki</c> , otwiera <paramref name="url" /> się w oknie hostującym jego <c>zestaw ramek</c>. W przeciwnym razie działa tak samo jak <c>_self</c>.</param>
        <param name="windowOptions">Rozdzielany przecinkami ciąg składający się z zero lub więcej z następujących opcji w postaci <c>name = value</c>. Z wyjątkiem opcji <c>Left</c>, <c>Top</c>, <c>Height</c>i <c>Width</c> , które przyjmują dowolne liczby całkowite, każda opcja akceptuje wartości <c>Yes</c> lub <see langword="1" />, i <c>no</c> lub <see langword="0" />, jako prawidłowymi wartościami.  
  
 <c>channelmode</c>: Używany z technologią przestarzałych kanałów programu Internet Explorer 4,0. Wartość domyślna to <c>nie</c>.  
  
 <c>katalogi</c>: Określa, czy okno ma wyświetlać przyciski nawigacji katalogu. Wartość domyślna to <c>Yes</c>.  
  
 <c>wysokość</c>: Wysokość obszaru klienckiego okna (w pikselach). Wartość minimalna to 100; próbuje otworzyć okno mniejsze niż to spowoduje otwarcie okna zgodnie z ustawieniami domyślnymi programu Internet Explorer.  
  
 z <c>lewej</c>: Pozycja lewej (współrzędnej x) okna względem lewego górnego rogu ekranu użytkownika (w pikselach). Musi to być dodatnia liczba całkowita.  
  
 <c>Lokalizacja</c>: Określa, czy ma być wyświetlany pasek adresu, który umożliwia użytkownikom nawigowanie w oknie do nowego adresu URL. Wartość domyślna to <c>Yes</c>.  
  
 <c>pasek menu</c>: Określa, czy menu ma być wyświetlane w nowym oknie. Wartość domyślna to <c>Yes</c>.  
  
 <c>zmienny rozmiar</c>: Określa, czy można zmienić rozmiar okna przez użytkownika. Wartość domyślna to <c>Yes</c>.  
  
 <c>paski przewijania</c>: Czy okno ma poziome i pionowe paski przewijania. Wartość domyślna to <c>Yes</c>.  
  
 <c>stan</c>: Czy okno ma pasek stanu u dołu. Wartość domyślna to <c>Yes</c>.  
  
 <c>pasek tytułu</c>: Określa, czy tytuł bieżącej strony jest wyświetlany. Ustawienie tej opcji na wartość <c>nie</c> ma wpływu na aplikację zarządzaną; pasek tytułu będzie zawsze wyświetlany.  
  
 <c>pasek narzędzi</c>: Czy przyciski paska narzędzi, takie jak **Wstecz**, **Prześlij dalej**i **Zatrzymaj** , są widoczne. Wartość domyślna to <c>Yes</c>.  
  
 <c>Góra</c>: Górna pozycja (współrzędnej y) okna względem lewego górnego rogu ekranu użytkownika (w pikselach). Musi to być dodatnia liczba całkowita.  
  
 <c>Szerokość</c>: Szerokość obszaru klienta okna (w pikselach). Wartość minimalna to 100; próbuje otworzyć okno mniejsze niż to spowoduje otwarcie okna zgodnie z ustawieniami domyślnymi programu Internet Explorer.</param>
        <param name="replaceEntry">Czy <paramref name="url" /> zastępuje adres URL bieżącego okna w historii nawigacji. Będzie to miało wpływ na działanie metod <see cref="T:System.Windows.Forms.HtmlHistory" /> klasy.</param>
        <summary>Wyświetla plik w nazwanym oknie.</summary>
        <returns>Reprezentuje nowe okno lub wcześniej utworzone okno nazwane <paramref name="target" /> przez parametr. <see cref="T:System.Windows.Forms.HtmlWindow" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Parametr może mieć nazwę okna, które zostało utworzone w wyniku poprzedniego wywołania do <xref:System.Windows.Forms.HtmlWindow.Open%2A>. `target` Parametr może również wskazywać okno otwarte przez kliknięcie hiperłącza (`A` elementu) `FORM` lub elementu, który używa `TARGET` atrybutu, aby otworzyć jego adres URL w nowym oknie. Następujący kod HTML otworzy nowe okno o nazwie `orderWindow` , gdy użytkownik go klika:  
  
 `<A HREF="/startOrder.aspx" TARGET="orderWindow">Click to Start Order</a>`  
  
 W przypadku podania jakichkolwiek opcji dla `windowOptions` parametru jakakolwiek opcja nie jest włączana automatycznie. Innymi słowy, jeśli określisz `windowOptions` tylko, że chcesz mieć pasek stanu, a następnie pasek menu, pasek narzędzi, tytuł, paski przewijania itd `windowOptions`. nie będą wyświetlane, chyba że jawnie włączysz je w sposób.  
  
 Jeśli plik, do którego `url` odwołuje się plik HTML, plik tekstowy lub inny typ pliku, który może być hostowany w programie Internet Explorer, zostanie wyświetlony w nazwanym oknie. Jeśli plik nie może zostać wyświetlony wewnątrz programu Internet Explorer, a okno nazwane przez cel jeszcze nie istnieje, zostanie otwarte w programie Internet Explorer wystarczająco długo, aby można było pobrać zasób. rozpocznie się natychmiast po jego zamknięciu.  
  
 Gdy tworzysz nowe okna przy użyciu <xref:System.Windows.Forms.HtmlWindow.Open%2A> lub <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A>, spowoduje to, że Document Object Model HTML otwiera nowe wystąpienie programu Internet Explorer. Jeśli nie wywołasz <xref:System.Windows.Forms.HtmlWindow.Close%2A> wszystkich utworzonych przez siebie okien, to wystąpienie programu Internet Explorer pozostanie uruchomione nawet po zamknięciu aplikacji.  
  
 Jeśli używasz <xref:System.Windows.Forms.HtmlWindow.Open%2A> do załadowania adresu URL w istniejącym oknie, `windowOptions` zostaną zignorowane. okno zachowa wymiary, wygląd i lokalizację ekranu jako pierwsze <xref:System.Windows.Forms.HtmlWindow.Open%2A> przez wywołanie początkowe.  
  
   
  
## Examples  
 Poniższy przykład kodu zawiera dwie metody:  
  
-   Pierwszy otwiera adres URL w oknie o nazwie `displayWindow`, które tworzy z wyświetlonym paskiem stanu.  
  
-   Drugi otwiera inny adres URL w tym samym oknie, ale określa, że powinien być wyświetlony tylko pasek lokalizacji.  
  
 Zwróć uwagę, że wymiary okna i kontrolki, które są wyświetlane, zależą od tego, który adres URL jest otwierany jako pierwszy. Przykład kodu wymaga, aby formularz zawierał <xref:System.Windows.Forms.WebBrowser> kontrolkę o nazwie. `WebBrowser1`  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#13](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#13)]
 [!code-vb[System.Windows.Forms.HtmlWindow#13](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#13)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536651.aspx">Open — Metoda</related>
      </Docs>
    </Member>
    <Member MemberName="Opener">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlWindow Opener { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlWindow Opener" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.Opener" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Opener As HtmlWindow" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlWindow ^ Opener { System::Windows::Forms::HtmlWindow ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Opener : System.Windows.Forms.HtmlWindow" Usage="System.Windows.Forms.HtmlWindow.Opener" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlWindow</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera odwołanie do okna, które otworzyło bieżące okno.</summary>
        <value>, Który został utworzony przez wywołanie <see cref="M:System.Windows.Forms.HtmlWindow.Open(System.String,System.String,System.String,System.Boolean)" /> metody lub <see cref="M:System.Windows.Forms.HtmlWindow.OpenNew(System.String,System.String)" />. <see cref="T:System.Windows.Forms.HtmlWindow" /> Jeśli okno nie zostało utworzone przy użyciu jednej z tych metod, ta właściwość zwraca <see langword="null" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="OpenNew">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Wyświetla plik w nowym oknie.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OpenNew">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlWindow OpenNew (string urlString, string windowOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.HtmlWindow OpenNew(string urlString, string windowOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.OpenNew(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function OpenNew (urlString As String, windowOptions As String) As HtmlWindow" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::HtmlWindow ^ OpenNew(System::String ^ urlString, System::String ^ windowOptions);" />
      <MemberSignature Language="F#" Value="member this.OpenNew : string * string -&gt; System.Windows.Forms.HtmlWindow" Usage="htmlWindow.OpenNew (urlString, windowOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlWindow</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="urlString" Type="System.String" />
        <Parameter Name="windowOptions" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="urlString">Uniform Resource Locator opisujący lokalizację pliku do załadowania.</param>
        <param name="windowOptions">Rozdzielany przecinkami ciąg składający się z zero lub więcej z następujących opcji w postaci <c>name = value</c>. Zobacz <see cref="M:System.Windows.Forms.HtmlWindow.Open(System.String,System.String,System.String,System.Boolean)" /> , aby uzyskać pełny opis prawidłowych opcji.</param>
        <summary>Wyświetla plik w nowym oknie.</summary>
        <returns><see cref="T:System.Windows.Forms.HtmlWindow" /> Reprezentuje nowe okno.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli plik, do którego `url` odwołuje się plik HTML, plik tekstowy lub inny typ pliku, który może być hostowany w programie Internet Explorer, zostanie wyświetlony w nowym oknie. Jeśli plik nie może zostać wyświetlony wewnątrz programu Internet Explorer, okno zostanie otwarte w programie Internet Explorer wystarczająco długo, aby można było pobrać zasób. rozpocznie się natychmiast po jego zamknięciu.  
  
 Gdy tworzysz nowe okna przy użyciu <xref:System.Windows.Forms.HtmlWindow.Open%2A> lub <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A>, spowoduje to, że Document Object Model HTML otwiera nowe wystąpienie programu Internet Explorer. Jeśli nie wywołasz <xref:System.Windows.Forms.HtmlWindow.Close%2A> wszystkich utworzonych przez siebie okien, to wystąpienie programu Internet Explorer pozostanie uruchomione nawet po zamknięciu aplikacji.  
  
 Jeśli chcesz załadować dokument do wcześniej otwartego okna, zobacz <xref:System.Windows.Forms.HtmlWindow.Open%2A> metodę.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OpenNew">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlWindow OpenNew (Uri url, string windowOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.HtmlWindow OpenNew(class System.Uri url, string windowOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.OpenNew(System.Uri,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function OpenNew (url As Uri, windowOptions As String) As HtmlWindow" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::HtmlWindow ^ OpenNew(Uri ^ url, System::String ^ windowOptions);" />
      <MemberSignature Language="F#" Value="member this.OpenNew : Uri * string -&gt; System.Windows.Forms.HtmlWindow" Usage="htmlWindow.OpenNew (url, windowOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlWindow</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="System.Uri" />
        <Parameter Name="windowOptions" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="url">Uniform Resource Locator opisujący lokalizację pliku do załadowania.</param>
        <param name="windowOptions">Rozdzielany przecinkami ciąg składający się z zero lub więcej z następujących opcji w postaci <c>name = value</c>. Zobacz <see cref="M:System.Windows.Forms.HtmlWindow.Open(System.String,System.String,System.String,System.Boolean)" /> , aby uzyskać pełny opis prawidłowych opcji.</param>
        <summary>Wyświetla plik w nowym oknie.</summary>
        <returns><see cref="T:System.Windows.Forms.HtmlWindow" /> Reprezentuje nowe okno.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli plik, do którego `url` odwołuje się plik HTML, plik tekstowy lub inny typ pliku, który może być hostowany w programie Internet Explorer, zostanie wyświetlony w nowym oknie. Jeśli plik nie może zostać wyświetlony wewnątrz programu Internet Explorer, okno zostanie otwarte w programie Internet Explorer wystarczająco długo, aby można było pobrać zasób. rozpocznie się natychmiast po jego zamknięciu.  
  
 Gdy tworzysz nowe okna przy użyciu <xref:System.Windows.Forms.HtmlWindow.Open%2A> lub <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A>, spowoduje to, że Document Object Model HTML otwiera nowe wystąpienie programu Internet Explorer. Jeśli nie wywołasz <xref:System.Windows.Forms.HtmlWindow.Close%2A> wszystkich utworzonych przez siebie okien, to wystąpienie programu Internet Explorer pozostanie uruchomione nawet po zamknięciu aplikacji.  
  
 Jeśli chcesz załadować dokument do wcześniej otwartego okna, zobacz <xref:System.Windows.Forms.HtmlWindow.Open%2A> metodę.  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536651.aspx">Open — Metoda</related>
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlWindow Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlWindow Parent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.Parent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parent As HtmlWindow" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlWindow ^ Parent { System::Windows::Forms::HtmlWindow ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Parent : System.Windows.Forms.HtmlWindow" Usage="System.Windows.Forms.HtmlWindow.Parent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlWindow</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera okno, które znajduje się powyżej bieżącego elementu na stronie zawierającej ramki.</summary>
        <value><see cref="T:System.Windows.Forms.HtmlWindow" /> Który jest właścicielem bieżącego okna. Jeśli bieżące okno nie jest ramką <c></c>lub nie jest osadzone wewnątrz <c>ramki</c>, zwraca <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W dokumencie zawierającym ramki, każdy `FRAME` `FRAMESET` w obrębie działa jako osobne okno podrzędne na stronie. Elementem nadrzędnym każdego `FRAME` jest, `FRAMESET` który zawiera `FRAME`.  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms534326.aspx">Właściwość nadrzędna</related>
      </Docs>
    </Member>
    <Member MemberName="Position">
      <MemberSignature Language="C#" Value="public System.Drawing.Point Position { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Point Position" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.Position" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Position As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Point Position { System::Drawing::Point get(); };" />
      <MemberSignature Language="F#" Value="member this.Position : System.Drawing.Point" Usage="System.Windows.Forms.HtmlWindow.Position" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Point</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera pozycję obszaru klienta okna na ekranie.</summary>
        <value><see cref="T:System.Drawing.Point" /> Opis współrzędnych x i y lewego górnego rogu ekranu (w pikselach).</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.Control.Location%2A> Właściwość<xref:System.Windows.Forms.WebBrowser> kontrolki zwróci pozycję kontrolki względem lewego górnego rogu formularza. Z kolei <xref:System.Windows.Forms.HtmlWindow.Position%2A> program zwróci lokalizację obszaru wyświetlania dokumentu względem lewego górnego rogu monitora użytkownika.  
  
   
  
## Examples  
 Poniższy przykład kodu otwiera nowe okno bezpośrednio nad <xref:System.Windows.Forms.WebBrowser> kontrolką w formularzu. Przykład kodu wymaga, aby formularz zawierał wystąpienie <xref:System.Windows.Forms.WebBrowser> formantu o nazwie. `WebBrowser1`  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#5)]
 [!code-vb[System.Windows.Forms.HtmlWindow#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#5)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/cc06e61f-43b6-4408-a676-2542dcfcd96e">Współrzędne formularzy systemu Windows</related>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms534389.aspx">Właściwość screenLeft</related>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms534390.aspx">Właściwość screenTop</related>
      </Docs>
    </Member>
    <Member MemberName="Prompt">
      <MemberSignature Language="C#" Value="public string Prompt (string message, string defaultInputValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Prompt(string message, string defaultInputValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.Prompt(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Prompt (message As String, defaultInputValue As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Prompt(System::String ^ message, System::String ^ defaultInputValue);" />
      <MemberSignature Language="F#" Value="member this.Prompt : string * string -&gt; string" Usage="htmlWindow.Prompt (message, defaultInputValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="defaultInputValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Komunikat, który ma być wyświetlany użytkownikowi.</param>
        <param name="defaultInputValue">Wartość domyślna wyświetlana w polu tekstowym.</param>
        <summary>Wyświetla okno dialogowe, w którym jest wyświetlany komunikat i pole tekstowe dla użytkownika.</summary>
        <returns><see cref="T:System.String" /> Reprezentujący tekst wprowadzony przez użytkownika.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlWindow.Prompt%2A>zapewnia szybki i łatwy sposób uzyskiwania prostego tekstu wejściowego od użytkownika.  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536673.aspx">Prompt — Metoda</related>
      </Docs>
    </Member>
    <Member MemberName="RemoveFocus">
      <MemberSignature Language="C#" Value="public void RemoveFocus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveFocus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.RemoveFocus" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveFocus ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveFocus();" />
      <MemberSignature Language="F#" Value="member this.RemoveFocus : unit -&gt; unit" Usage="htmlWindow.RemoveFocus " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Przenosi fokus z bieżącego okna.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy wywoływana w `FRAME` oknie `FRAMESET`w programie, <xref:System.Windows.Forms.HtmlWindow.RemoveFocus%2A> spowoduje to utratę fokusu okna, ale nie ustawi automatycznie fokusu w innym oknie.  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536347.aspx">Blur — Metoda</related>
      </Docs>
    </Member>
    <Member MemberName="Resize">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler Resize;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler Resize" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlWindow.Resize" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Resize As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ Resize;" />
      <MemberSignature Language="F#" Value="member this.Resize : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.Resize : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy użytkownik użyje myszy, aby zmienić wymiary okna.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu demonstruje użycie tego elementu członkowskiego. W tym przykładzie program obsługi zdarzeń raportuje wystąpienie <xref:System.Windows.Forms.HtmlWindow.Resize> zdarzenia. Ten raport pomaga dowiedzieć się, kiedy wystąpi zdarzenie i może pomóc w debugowaniu. Aby zgłosić wiele zdarzeń lub zdarzenia, które występują często, należy rozważyć <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> zamianę <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> lub dołączenie komunikatu do wielowierszowego <xref:System.Windows.Forms.TextBox>.  
  
 Aby uruchomić przykładowy kod, wklej go do projektu zawierającego wystąpienie typu <xref:System.Windows.Forms.HtmlWindow> o nazwie. `HtmlWindow1` Następnie upewnij się, że program obsługi zdarzeń jest skojarzony <xref:System.Windows.Forms.HtmlWindow.Resize> ze zdarzeniem.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#455](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#455)]
 [!code-vb[System.Windows.Forms.EventExamples#455](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#455)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536959.aspx">OnResize — zdarzenie</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ResizeTo">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zmienia rozmiar okna do określonych wymiarów.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ResizeTo">
      <MemberSignature Language="C#" Value="public void ResizeTo (System.Drawing.Size size);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResizeTo(valuetype System.Drawing.Size size) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.ResizeTo(System.Drawing.Size)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResizeTo(System::Drawing::Size size);" />
      <MemberSignature Language="F#" Value="member this.ResizeTo : System.Drawing.Size -&gt; unit" Usage="htmlWindow.ResizeTo size" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="size" Type="System.Drawing.Size" />
      </Parameters>
      <Docs>
        <param name="size">A <see cref="T:System.Drawing.Size" /> opisująca żądaną szerokość i wysokość okna w pikselach. W obu wymiarach musi być 100 pikseli lub więcej.</param>
        <summary>Zmienia rozmiar okna do określonych wymiarów.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu otwiera nowe okno i zmienia jego rozmiar, aby wypełnić dostępny obszar ekranu.  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#15](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#15)]
 [!code-vb[System.Windows.Forms.HtmlWindow#15](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">Okno, które próbujesz zmienić, znajduje się w innej domenie niż okno nadrzędne. To ograniczenie jest częścią zabezpieczeń skryptów między ramkami; Aby uzyskać więcej informacji, zobacz [Informacje o skryptach i zabezpieczeniach między ramkami](https://msdn.microsoft.com/library/ms533028.aspx).</exception>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536723.aspx">resizeTo, Metoda</related>
      </Docs>
    </Member>
    <Member MemberName="ResizeTo">
      <MemberSignature Language="C#" Value="public void ResizeTo (int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResizeTo(int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.ResizeTo(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResizeTo (width As Integer, height As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResizeTo(int width, int height);" />
      <MemberSignature Language="F#" Value="member this.ResizeTo : int * int -&gt; unit" Usage="htmlWindow.ResizeTo (width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="width">Opisuje pożądaną szerokość okna (w pikselach). Musi mieć 100 pikseli lub więcej.</param>
        <param name="height">Opisuje żądaną wysokość okna w pikselach. Musi mieć 100 pikseli lub więcej.</param>
        <summary>Zmienia rozmiar okna do określonych wymiarów.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.UnauthorizedAccessException">Okno, które próbujesz zmienić, znajduje się w innej domenie niż okno nadrzędne. To ograniczenie jest częścią zabezpieczeń skryptów między ramkami; Aby uzyskać więcej informacji, zobacz [Informacje o skryptach i zabezpieczeniach między ramkami](https://msdn.microsoft.com/library/ms533028.aspx).</exception>
      </Docs>
    </Member>
    <Member MemberName="Scroll">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler Scroll;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler Scroll" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlWindow.Scroll" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Scroll As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ Scroll;" />
      <MemberSignature Language="F#" Value="member this.Scroll : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.Scroll : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy użytkownik przewija okno, aby wyświetlić tekst poza ekranem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu demonstruje użycie tego elementu członkowskiego. W tym przykładzie program obsługi zdarzeń raportuje wystąpienie <xref:System.Windows.Forms.HtmlWindow.Scroll> zdarzenia. Ten raport pomaga dowiedzieć się, kiedy wystąpi zdarzenie i może pomóc w debugowaniu. Aby zgłosić wiele zdarzeń lub zdarzenia, które występują często, należy rozważyć <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> zamianę <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> lub dołączenie komunikatu do wielowierszowego <xref:System.Windows.Forms.TextBox>.  
  
 Aby uruchomić przykładowy kod, wklej go do projektu zawierającego wystąpienie typu <xref:System.Windows.Forms.HtmlWindow> o nazwie. `HtmlWindow1` Następnie upewnij się, że program obsługi zdarzeń jest skojarzony <xref:System.Windows.Forms.HtmlWindow.Scroll> ze zdarzeniem.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#456](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#456)]
 [!code-vb[System.Windows.Forms.EventExamples#456](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#456)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536966.aspx">Zdarzenie OnScroll</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ScrollTo">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Przewija okno do wskazanego położenia.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ScrollTo">
      <MemberSignature Language="C#" Value="public void ScrollTo (System.Drawing.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScrollTo(valuetype System.Drawing.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.ScrollTo(System.Drawing.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ScrollTo(System::Drawing::Point point);" />
      <MemberSignature Language="F#" Value="member this.ScrollTo : System.Drawing.Point -&gt; unit" Usage="htmlWindow.ScrollTo point" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="point">Współrzędne x i y względem lewego górnego rogu bieżącego okna, w którym ma zostać przesunięta strona.</param>
        <summary>Przenosi okno do określonych współrzędnych.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlWindow.ScrollTo%2A>spowoduje przewinięcie dokumentu, tak aby określona Współrzędna dokumentu znajdowała się w lewym górnym rogu okna dokumentu. Jeśli dokument nie jest długi lub wystarczająco obszerny dla tego celu, <xref:System.Windows.Forms.HtmlWindow.ScrollTo%2A> przewinięcie dokumentu w miarę możliwości w określonym kierunku.  
  
   
  
## Examples  
 Poniższy przykład kodu przewija dokument do pozycji współrzędnej klikniętej przez użytkownika.  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#15](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#15)]
 [!code-vb[System.Windows.Forms.HtmlWindow#15](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#15)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536731.aspx">scrollTo, Metoda</related>
      </Docs>
    </Member>
    <Member MemberName="ScrollTo">
      <MemberSignature Language="C#" Value="public void ScrollTo (int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScrollTo(int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.ScrollTo(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ScrollTo (x As Integer, y As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ScrollTo(int x, int y);" />
      <MemberSignature Language="F#" Value="member this.ScrollTo : int * int -&gt; unit" Usage="htmlWindow.ScrollTo (x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">Współrzędne x względem lewego górnego rogu bieżącego okna, w którym ma zostać przesunięta strona.</param>
        <param name="y">Współrzędna y odnosząca się do lewego górnego rogu bieżącego okna, w którym ma zostać przesunięta strona.</param>
        <summary>Przewija okno do wskazanego położenia.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlWindow.ScrollTo%2A>spowoduje przewinięcie dokumentu, tak aby określona Współrzędna dokumentu znajdowała się w lewym górnym rogu okna dokumentu. Jeśli dokument nie jest długi lub wystarczająco obszerny dla tego celu, <xref:System.Windows.Forms.HtmlWindow.ScrollTo%2A> przewinięcie dokumentu w miarę możliwości w określonym kierunku.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Size">
      <MemberSignature Language="C#" Value="public System.Drawing.Size Size { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size Size" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.Size" />
      <MemberSignature Language="VB.NET" Value="Public Property Size As Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Size Size { System::Drawing::Size get(); void set(System::Drawing::Size value); };" />
      <MemberSignature Language="F#" Value="member this.Size : System.Drawing.Size with get, set" Usage="System.Windows.Forms.HtmlWindow.Size" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia rozmiar bieżącego okna.</summary>
        <value><see cref="T:System.Drawing.Size" /> Opis rozmiaru okna w pikselach.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StatusBarText">
      <MemberSignature Language="C#" Value="public string StatusBarText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string StatusBarText" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.StatusBarText" />
      <MemberSignature Language="VB.NET" Value="Public Property StatusBarText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ StatusBarText { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.StatusBarText : string with get, set" Usage="System.Windows.Forms.HtmlWindow.StatusBarText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia tekst wyświetlany na pasku stanu okna.</summary>
        <value><see cref="T:System.String" /> Zawierający bieżący tekst stanu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.WebBrowser> Kontrolka nie wyświetla paska stanu. W każdym nowym oknie, które jest otwierane <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A> przy użyciu <xref:System.Windows.Forms.HtmlWindow.Open%2A> metod lub, domyślnie zostanie wyświetlony pasek stanu.  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms534648.aspx">Właściwość stanu</related>
      </Docs>
    </Member>
    <Member MemberName="Unload">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler Unload;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler Unload" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlWindow.Unload" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Unload As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ Unload;" />
      <MemberSignature Language="F#" Value="member this.Unload : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.Unload : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po wydaniu bieżącej strony i pojawieniu się nowej strony.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu demonstruje użycie tego elementu członkowskiego. W tym przykładzie program obsługi zdarzeń raportuje wystąpienie <xref:System.Windows.Forms.HtmlWindow.Unload> zdarzenia. Ten raport pomaga dowiedzieć się, kiedy wystąpi zdarzenie i może pomóc w debugowaniu. Aby zgłosić wiele zdarzeń lub zdarzenia, które występują często, należy rozważyć <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> zamianę <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> lub dołączenie komunikatu do wielowierszowego <xref:System.Windows.Forms.TextBox>.  
  
 Aby uruchomić przykładowy kod, wklej go do projektu zawierającego wystąpienie typu <xref:System.Windows.Forms.HtmlWindow> o nazwie. `HtmlWindow1` Następnie upewnij się, że program obsługi zdarzeń jest skojarzony <xref:System.Windows.Forms.HtmlWindow.Unload> ze zdarzeniem.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#457](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#457)]
 [!code-vb[System.Windows.Forms.EventExamples#457](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#457)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536973.aspx">Zdarzenie OnUnload</related>
      </Docs>
    </Member>
    <Member MemberName="Url">
      <MemberSignature Language="C#" Value="public Uri Url { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri Url" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.Url" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Url As Uri" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Uri ^ Url { Uri ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Url : Uri" Usage="System.Windows.Forms.HtmlWindow.Url" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera adres URL odpowiadający bieżącemu elementowi wyświetlonemu w oknie.</summary>
        <value><see cref="T:System.Uri" /> Opis adresu URL.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość jest tylko do odczytu. Aby przejść do okna do nowego dokumentu, użyj <xref:System.Windows.Forms.HtmlWindow.Navigate%2A> metody.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WindowFrameElement">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElement WindowFrameElement { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlElement WindowFrameElement" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.WindowFrameElement" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WindowFrameElement As HtmlElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlElement ^ WindowFrameElement { System::Windows::Forms::HtmlElement ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.WindowFrameElement : System.Windows.Forms.HtmlElement" Usage="System.Windows.Forms.HtmlWindow.WindowFrameElement" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera element ramki odpowiadający temu oknie.</summary>
        <value>Odpowiadający elementowi ramki tego okna. <c></c> <see cref="T:System.Windows.Forms.HtmlElement" /> Jeśli to okno nie jest ramką, zwraca <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Po pobraniu `FRAME` elementu <xref:System.Windows.Forms.HtmlWindow.Frames%2A> z <xref:System.Windows.Forms.HtmlWindow>kolekcji zwraca. Wywołaj <xref:System.Windows.Forms.HtmlWindow.WindowFrameElement%2A> dla tego obiektu, jeśli chcesz uzyskać dostęp do atrybutów `SRC` elementu `FRAME` bazowego, takich jak atrybut.  
  
   
  
## Examples  
 Poniższy przykład kodu porównuje `SRC` atrybut klatek w a `FRAMESET` do bieżącej lokalizacji. Jeśli są inne, ramki są resetowane do oryginalnych adresów URL.  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#8)]
 [!code-vb[System.Windows.Forms.HtmlWindow#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#8)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.UnauthorizedAccessException">Nie można uzyskać dostępu do elementów <c>ramki</c> lub dokumentu <c>ramki</c>, jeśli <c>ramka</c> znajduje się w innej strefie niż <c>zestaw ramek</c> , który zawiera. Aby uzyskać pełne wyjaśnienie, zobacz [Informacje o skryptach i zabezpieczeniach między ramkami](https://msdn.microsoft.com/library/ms533028.aspx).</permission>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms533771.aspx">frameElement — Właściwość</related>
      </Docs>
    </Member>
  </Members>
</Type>
