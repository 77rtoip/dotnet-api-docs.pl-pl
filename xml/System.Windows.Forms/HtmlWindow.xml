<Type Name="HtmlWindow" FullName="System.Windows.Forms.HtmlWindow">
  <Metadata><Meta Name="ms.openlocfilehash" Value="d1746151ab628bd6391f9e63bbb6e6a97f6c3a63" /><Meta Name="ms.sourcegitcommit" Value="2dd0eede6edd6dd3d2aa8f79010848658b967609" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="04/17/2019" /><Meta Name="ms.locfileid" Value="59676562" /></Metadata><TypeSignature Language="C#" Value="public sealed class HtmlWindow" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit HtmlWindow extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.HtmlWindow" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class HtmlWindow" />
  <TypeSignature Language="C++ CLI" Value="public ref class HtmlWindow sealed" />
  <TypeSignature Language="F#" Value="type HtmlWindow = class" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Reprezentuje okno logiczne, które zawiera co najmniej jedno z <see cref="T:System.Windows.Forms.HtmlDocument" />.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlWindow> nie należy mylić z pojęciem okno programu Windows Forms lub interfejsu API Windows; istnieje nie `HWND` lub podobne zasób Windows, który odpowiada bezpośrednio do wystąpienia <xref:System.Windows.Forms.HtmlWindow>. Zamiast <xref:System.Windows.Forms.HtmlWindow> opis wysokiego poziomu lokalizację dokumentu na użytkownika ekranu, a także metody do interakcji z użytkownikami za pomocą monity i oknach dialogowych. <xref:System.Windows.Forms.HtmlWindow> działa jako kontener logiczny dla strony sieci Web, dokumentów i jego metadane, takie jak lokalizacja dokumentu i możliwości przeglądarki sieci Web.  
  
 Strona składa się z pojedynczego dokumentu w sieci Web, lub na `FRAMESET` zawierające jedną lub więcej `FRAME` elementów, z których każdy obsługuje swój własny dokument. Deweloperzy sieci Web użyj ramek, aby pokazać logicznie powiązanych stron obok siebie (na przykład zawartość strony obok strona nawigacji). Gdy strona składa się z pojedynczego dokumentu, będzie dostępny za pośrednictwem <xref:System.Windows.Forms.HtmlWindow.Document%2A> właściwość <xref:System.Windows.Forms.HtmlWindow>; Jeśli strona korzysta z ramek, możesz uzyskać dostęp swoje dokumenty za pomocą <xref:System.Windows.Forms.HtmlWindow.Frames%2A> kolekcji, która składa się z co najmniej jeden <xref:System.Windows.Forms.HtmlWindow> obiektów.  
  
 Gdy hosta <xref:System.Windows.Forms.WebBrowser> kontrolki w aplikacji Windows Forms, istnieje możliwość interakcji z użytkownikiem przy użyciu standardowych klas Windows Forms, takich jak <xref:System.Windows.Forms.Form> lub <xref:System.Windows.Forms.MessageBox>, lub za pomocą metod na <xref:System.Windows.Forms.HtmlWindow> zdefiniowane w tym celu. <xref:System.Windows.Forms.HtmlWindow.Alert%2A> Metoda przedstawia proste okno dialogowe z niestandardowym tekstem i **OK** przycisk; <xref:System.Windows.Forms.HtmlWindow.Prompt%2A> wyświetlane wiersza tekstu niestandardowego i pola wprowadzania tekstu dla użytkownika; oraz <xref:System.Windows.Forms.HtmlWindow.Confirm%2A> wyświetli okno dialogowe z wiersza tekstu niestandardowego i **OK** i **anulować** przycisków.  
  
 Możesz użyć <xref:System.Windows.Forms.HtmlWindow> na otwieranie nowych okien, zawierający nowe dokumenty. <xref:System.Windows.Forms.HtmlWindow.Open%2A> Ładuje określony adres URL do okna o nazwie tworzenie jej, jeśli jeszcze nie istnieje, podczas gdy <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A> zawsze otwiera jej adresu URL w oknie nowo utworzony.  
  
   
  
## Examples  
 Poniższy przykład kodu zawiera dwie metody. Pierwszy otwiera adres URL w oknie o nazwie `displayWindow`, tworzącej z paskiem stanu wyświetlane. Drugi w tym samym oknie zostanie otwarta innego adresu URL, ale Określa, że powinien być wyświetlany na pasku lokalizacji. Należy zauważyć, że zależy od wymiarów okna i kontrolek, które są wyświetlane, w której adres URL jest otworzony jako pierwszy. Przykład kodu wymaga, że formularz zawiera <xref:System.Windows.Forms.WebBrowser> formantu o nazwie `WebBrowser1`.  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#13](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#13)]
 [!code-vb[System.Windows.Forms.HtmlWindow#13](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#13)]  
  
 ]]></format>
    </remarks>
    <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms535873.aspx">okno obiektu</related>
    <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/aa741505.aspx">Interfejs IHTMLWindow2</related>
  </Docs>
  <Members>
    <Member MemberName="Alert">
      <MemberSignature Language="C#" Value="public void Alert (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Alert(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.Alert(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Alert (message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Alert(System::String ^ message);" />
      <MemberSignature Language="F#" Value="member this.Alert : string -&gt; unit" Usage="htmlWindow.Alert message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message"><see cref="T:System.String" /> Do wyświetlenia w oknie komunikatu.</param>
        <summary>Wyświetla okno komunikatu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MessageBox?displayProperty=nameWithType> Klasa oferuje bardziej zaawansowanych wersji <xref:System.Windows.Forms.HtmlWindow.Alert%2A> metody.  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms535933.aspx">alert — metoda</related>
      </Docs>
    </Member>
    <Member MemberName="AttachEventHandler">
      <MemberSignature Language="C#" Value="public void AttachEventHandler (string eventName, EventHandler eventHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void AttachEventHandler(string eventName, class System.EventHandler eventHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.AttachEventHandler(System.String,System.EventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void AttachEventHandler(System::String ^ eventName, EventHandler ^ eventHandler);" />
      <MemberSignature Language="F#" Value="member this.AttachEventHandler : string * EventHandler -&gt; unit" Usage="htmlWindow.AttachEventHandler (eventName, eventHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventName" Type="System.String" />
        <Parameter Name="eventHandler" Type="System.EventHandler" />
      </Parameters>
      <Docs>
        <param name="eventName">Nazwa zdarzenia, które mają być obsługiwane.</param>
        <param name="eventHandler">Odwołanie do kodu zarządzanego, który obsługuje zdarzenie.</param>
        <summary>Dodaje program obsługi zdarzeń dla zdarzenia HTML DOM nazwanego.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nie należy dołączać zdarzenia do dokumentu HTML lub jednego ze swoich obiektów, dopóki nie zakończy się dokument ładowania. Jest najwcześniejsza powinna wywołać tę metodę w <xref:System.Windows.Forms.WebBrowser.DocumentCompleted> zdarzenia <xref:System.Windows.Forms.WebBrowser> kontroli.  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://developer.mozilla.org/en-US/docs/Web/API/EventTarget/addEventListenerx">EventTarget.addEventListener()</related>
      </Docs>
    </Member>
    <Member MemberName="Close">
      <MemberSignature Language="C#" Value="public void Close ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Close() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.Close" />
      <MemberSignature Language="VB.NET" Value="Public Sub Close ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Close();" />
      <MemberSignature Language="F#" Value="member this.Close : unit -&gt; unit" Usage="htmlWindow.Close " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zamyka okno.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Windows.Forms.HtmlWindow.IsClosed%2A> właściwości w celu określenia, jeśli okno jest już zamknięty. Jeśli okno jest już zamknięty, ta metoda odniesie żadnego skutku.  
  
 Po utworzeniu nowego systemu windows za pomocą <xref:System.Windows.Forms.HtmlWindow.Open%2A> lub <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A>, <xref:System.Windows.Forms.HtmlWindow.Close%2A> powoduje, że HTML Document Object Model otworzyć nowe wystąpienie programu Internet Explorer. Jeśli nie zostanie wywołana <xref:System.Windows.Forms.HtmlWindow.Close%2A> na wszystkich systemu windows zostały utworzone to wystąpienie programu Internet Explorer będą nadal działać, nawet w przypadku, po zamknięciu aplikacji.  
  
   
  
## Examples  
 Poniższy przykładowy kod powoduje otwarcie okna i zamyka te błędy, jeśli użytkownik nie został użyty go w ciągu ostatnich pięciu minut. W przykładzie kodu została napisana przy założeniu, że formularz ma <xref:System.Windows.Forms.WebBrowser> formantu o nazwie `WebBrowser1`, <xref:System.Windows.Forms.Button> o nazwie `Button1`, a <xref:System.Windows.Forms.Timer> klasę o nazwie `Timer1`. Aby pomyślnie uruchomić ten przykład, należy zmienić pierwszy argument, które są dostarczane do <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A> do prawidłowego adresu URL.  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#9](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#9)]
 [!code-vb[System.Windows.Forms.HtmlWindow#9](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#9)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536367.aspx">Close — metoda</related>
      </Docs>
    </Member>
    <Member MemberName="Confirm">
      <MemberSignature Language="C#" Value="public bool Confirm (string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Confirm(string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.Confirm(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Confirm (message As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Confirm(System::String ^ message);" />
      <MemberSignature Language="F#" Value="member this.Confirm : string -&gt; bool" Usage="htmlWindow.Confirm message" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Tekst do wyświetlania użytkownikowi.</param>
        <summary>Wyświetlane jest okno dialogowe z komunikatem i przyciski zaproponowania tak/bez odpowiedzi.</summary>
        <returns><see langword="true" /> Jeśli użytkownik kliknął element **tak**; <see langword="false" /> po kliknięciu **nie** "lub" zamknięte okno dialogowe.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlWindow.Confirm%2A> Wyświetla modalne okno dialogowe; użytkownik nie będzie można uzyskać dostęp do podstawowych strony HTML bez najpierw zamknąć to okno dialogowe.  
  
## Examples  

Skopiuj poniższy kod HTML i zapisz go w formie o nazwie orderForm.htm:  

```html
<HTML>
<BODY>
<FORM name="NewOrderForm">
Select Part Type:
<SELECT name="PartType">
  <OPTION>AZ-3700
  <OPTION>AZ-3701
  <OPTION>AZ-3702  
</SELECT><br/>
Quantity: <INPUT type="text" name="PartQty" size="2" maxsize="2" /><br/>
Building/Desk:
<INPUT type="text" name="PartBuilding" size="2" maxsize="2"/> /  
<INPUT type="text" name="PartDesk" size="2" maxsize="2"/><p/>
<INPUT type="submit" value="Transmit Order"/>
</FORM>
</BODY>
</HTML>
```

Poniższy przykład wyświetla <xref:System.Windows.Forms.HtmlWindow.Confirm%2A> okno dialogowe, gdy użytkownik przesyła `NewOrderForm`.  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#10](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#10)]
 [!code-vb[System.Windows.Forms.HtmlWindow#10](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#10)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536376.aspx">Upewnij się, metoda</related>
      </Docs>
    </Member>
    <Member MemberName="DetachEventHandler">
      <MemberSignature Language="C#" Value="public void DetachEventHandler (string eventName, EventHandler eventHandler);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void DetachEventHandler(string eventName, class System.EventHandler eventHandler) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.DetachEventHandler(System.String,System.EventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void DetachEventHandler(System::String ^ eventName, EventHandler ^ eventHandler);" />
      <MemberSignature Language="F#" Value="member this.DetachEventHandler : string * EventHandler -&gt; unit" Usage="htmlWindow.DetachEventHandler (eventName, eventHandler)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="eventName" Type="System.String" />
        <Parameter Name="eventHandler" Type="System.EventHandler" />
      </Parameters>
      <Docs>
        <param name="eventName">Nazwa zdarzenia, które mają być obsługiwane.</param>
        <param name="eventHandler">Odwołanie do kodu zarządzanego, który obsługuje zdarzenie.</param>
        <summary>Usuwa procedurę obsługi zdarzenia nazwanego.</summary>
        <remarks>To be added.</remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536411.aspx">detachEvent — metoda</related>
      </Docs>
    </Member>
    <Member MemberName="Document">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlDocument Document { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlDocument Document" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.Document" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Document As HtmlDocument" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlDocument ^ Document { System::Windows::Forms::HtmlDocument ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Document : System.Windows.Forms.HtmlDocument" Usage="System.Windows.Forms.HtmlWindow.Document" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlDocument</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera zawartych w oknie dokumentu HTML.</summary>
        <value>Poprawne wystąpienie <see cref="T:System.Windows.Forms.HtmlDocument" />, jeśli dokument jest ładowany. Jeśli to okno zawiera <c>RAMEK</c>, lub żaden dokument jest aktualnie załadowana, będzie zwracać <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zwykle będzie dostęp <xref:System.Windows.Forms.HtmlWindow.Document%2A> za pośrednictwem <xref:System.Windows.Forms.WebBrowser.Document%2A> właściwość <xref:System.Windows.Forms.WebBrowser> kontroli. Tej właściwości należy użyć, gdy potrzebujesz dostępu do dokumentu w ramach `FRAME` przy użyciu <xref:System.Windows.Forms.HtmlWindow.Frames%2A> kolekcji.  
  
   
  
## Examples  
 Poniższy przykład kodu sprawdza wszystkie dokumenty w ramach strony zawierającej ramek i tworzy tabelę wszystkie łącza wychodzącego z każdą stronę dla przyszłych inspekcji.  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#2)]
 [!code-vb[System.Windows.Forms.HtmlWindow#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DomWindow">
      <MemberSignature Language="C#" Value="public object DomWindow { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object DomWindow" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.DomWindow" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property DomWindow As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ DomWindow { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.DomWindow : obj" Usage="System.Windows.Forms.HtmlWindow.DomWindow" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera interfejs niezarządzanych opakowane przez tę klasę.</summary>
        <value>Obiekt, który może być rzutowany <see langword="IHTMLWindow2" />, <see langword="IHTMLWindow3" />, lub <see langword="IHTMLWindow4" /> wskaźnika.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wykonywanie metody nie jest udostępniany przez za pomocą podstawowych wskaźników niezarządzanych interfejsu do modelu DOM (Document Object) <xref:System.Windows.Forms.HtmlWindow>.  
  
 Należy dodać odwołania do niezarządzanego MSHTML.dll aby można było używać <xref:System.Windows.Forms.HtmlWindow.DomWindow%2A>. Aby uzyskać więcej informacji, zobacz [Importowanie biblioteki typów jako zestawu](~/docs/framework/interop/importing-a-type-library-as-an-assembly.md).  
  
   
  
## Examples  
 W poniższym przykładzie kodu uzyskano `IHTMLWindow2` wskaźnika z dokumentu przez okno i wyświetla nowy dokument w modalnym oknie.  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#3](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#3)]
 [!code-vb[System.Windows.Forms.HtmlWindow#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#3)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/aa741505.aspx">Interfejs IHTMLWindow2</related>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/aa741356.aspx">Interfejs IHTMLWindow3</related>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/aa741344.aspx">Interfejs IHTMLWindow4</related>
      </Docs>
    </Member>
    <Member MemberName="Equals">
      <MemberSignature Language="C#" Value="public override bool Equals (object obj);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool Equals(object obj) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.Equals(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function Equals (obj As Object) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool Equals(System::Object ^ obj);" />
      <MemberSignature Language="F#" Value="override this.Equals : obj -&gt; bool" Usage="htmlWindow.Equals obj" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="obj" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="obj">Obiekt do przetestowania.</param>
        <summary>Sprawdza obiekt do porównania w odniesieniu do bieżącego obiektu.</summary>
        <returns><see langword="true" /> Jeśli obiekty są równe; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Error">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementErrorEventHandler Error;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementErrorEventHandler Error" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlWindow.Error" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Error As HtmlElementErrorEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementErrorEventHandler ^ Error;" />
      <MemberSignature Language="F#" Value="member this.Error : System.Windows.Forms.HtmlElementErrorEventHandler " Usage="member this.Error : System.Windows.Forms.HtmlElementErrorEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementErrorEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy skrypt uruchomiony w oknie napotka błąd czasu wykonywania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Strony HTML może zawierać kod skryptu, zwykle w języku JScript lub skrypt VBScript, który jest wykonywany po załadowaniu strony. <xref:System.Windows.Forms.HtmlWindow.Error> występuje, gdy skrypt napotka błąd czasu wykonywania. Ponieważ kod skryptu z późnym wiązaniem, co oznacza, że wywołania w odniesieniu do obiektu nie są rozpoznawane aż do czasu wykonywania błędów może zawierać wszystko — od odwołuje się do obiektu o wartości null do wywołanie niezdefiniowanej właściwości lub metody.  
  
 Możesz ustawić <xref:System.Windows.Forms.HtmlElementErrorEventArgs.Handled%2A> właściwość <xref:System.Windows.Forms.HtmlElementErrorEventArgs> na wartość true, aby zapobiec wyświetlaniu przez okno dialogowe błędu macierzystego w programie Internet Explorer.
  
   
  
## Examples  
 Poniższy przykład kodu traps błędu, który próbuje uzyskać dostęp do obiektu, który nie jest zdefiniowany w dokumencie wyniki, gdy skrypt na stronie HTML. Strona musi być w pełni załadowane przed <xref:System.Windows.Forms.HtmlWindow.Error> dołączono program obsługi zdarzeń, w przeciwnym razie nie będzie działać przykład.  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#16](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#16)]
 [!code-vb[System.Windows.Forms.HtmlWindow#16](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#16)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/cc197053.aspx">OnError — zdarzenie</related>
      </Docs>
    </Member>
    <Member MemberName="Focus">
      <MemberSignature Language="C#" Value="public void Focus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Focus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.Focus" />
      <MemberSignature Language="VB.NET" Value="Public Sub Focus ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Focus();" />
      <MemberSignature Language="F#" Value="member this.Focus : unit -&gt; unit" Usage="htmlWindow.Focus " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Przełącza fokus w bieżącym oknie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli inne okno przechowywane fokus przed <xref:System.Windows.Forms.HtmlWindow.Focus%2A> została wywołana, to okno utraci fokus.  
  
 Nie wywołuj fokus na elemencie wewnątrz okna do okna <xref:System.Windows.Forms.HtmlWindow.Load> spowodował zdarzenie.  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536425.aspx">fokus — metoda</related>
      </Docs>
    </Member>
    <Member MemberName="Frames">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlWindowCollection Frames { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlWindowCollection Frames" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.Frames" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Frames As HtmlWindowCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlWindowCollection ^ Frames { System::Windows::Forms::HtmlWindowCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Frames : System.Windows.Forms.HtmlWindowCollection" Usage="System.Windows.Forms.HtmlWindow.Frames" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlWindowCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera odwołanie do poszczególnych <c>ramki</c> elementy zdefiniowane w obrębie strony sieci Web.</summary>
        <value><see cref="T:System.Windows.Forms.HtmlWindowCollection" /> Dokumentu <c>ramki</c> i <c>IFRAME</c> obiektów.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A `FRAME` to zbiór okien zdefiniowanych w ramach `FRAMESET`. `FRAME`s umożliwiają hosting wielu dokumentów w ramach pojedynczego dokumentu. Każdy `FRAME` jest zdefiniowany jako posiadających określoną szerokość wiersza i kolumny, a następnie pozycji na tej stronie w odniesieniu do innych `FRAME`s zdefiniowany w obrębie `FRAMESET`; pozycja `FRAME` został rozwiązany, mimo że użytkownik może czasami myszy kursor możliwość zwiększania i zmniejszania `FRAME`. `IFRAME` Jest podobny do ramki, ale nie muszą być zakotwiczone w stałym miejscu.  
  
 Ramki będą zawierać jedno wystąpienie <xref:System.Windows.Forms.HtmlWindow> dla każdego `FRAME` lub `IFRAME` zdefiniowane w obrębie strony sieci Web.  
  
   
  
## Examples  
 Poniższy przykład kodu sprawdza wszystkie dokumenty w ramach strony zawierającej ramek i tworzy tabelę wszystkie łącza wychodzącego z każdą stronę dla przyszłych inspekcji.  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#2](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#2)]
 [!code-vb[System.Windows.Forms.HtmlWindow#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#2)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms537459.aspx">ramki kolekcji</related>
      </Docs>
    </Member>
    <Member MemberName="GetHashCode">
      <MemberSignature Language="C#" Value="public override int GetHashCode ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance int32 GetHashCode() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.GetHashCode" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function GetHashCode () As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override int GetHashCode();" />
      <MemberSignature Language="F#" Value="override this.GetHashCode : unit -&gt; int" Usage="htmlWindow.GetHashCode " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Służy jako funkcji wyznaczania wartości skrótu dla określonego typu.</summary>
        <returns>Wartość skrótu dla bieżącego <see cref="T:System.Windows.Forms.HtmlWindow" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GotFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler GotFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler GotFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlWindow.GotFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event GotFocus As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ GotFocus;" />
      <MemberSignature Language="F#" Value="member this.GotFocus : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.GotFocus : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy bieżące okno uzyskuje fokus wprowadzania użytkownika.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlWindow.GotFocus> miało miejsce w przypadku:  
  
-   Pierwsze okno w `FRAMESET` podczas `FRAMESET` pierwszym załadowaniu.  
  
-   `FRAME` , Ostatnia było skupić się kiedy okna zawierającego <xref:System.Windows.Forms.WebBrowser> kontroli jest przesunięte na pierwszy plan.  
  
-   A `FRAME` kliknięto przez użytkownika, ale tylko wtedy, gdy kliknij użytkownika nie Umieść fokus w elemencie w oknie.  
  
 Nie można anulować domyślnym działaniem <xref:System.Windows.Forms.HtmlWindow.GotFocus> zdarzenia lub uniemożliwić Propagacja.
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje użycie tego elementu członkowskiego. W tym przykładzie program obsługi zdarzeń raporty w momencie wystąpienia <xref:System.Windows.Forms.HtmlWindow.GotFocus> zdarzeń. Ten raport pomaga, aby dowiedzieć się, gdy zdarzenie występuje i mogą pomóc w debugowaniu.  
  
 Aby uruchomić przykładowy kod, wkleić go do projektu, który zawiera wystąpienie typu <xref:System.Windows.Forms.HtmlWindow> o nazwie `HtmlWindow1`. Upewnij się, że program obsługi zdarzeń jest skojarzony z <xref:System.Windows.Forms.HtmlWindow.GotFocus> zdarzeń.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#452](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#452)]
 [!code-vb[System.Windows.Forms.EventExamples#452](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#452)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536934.aspx">onFocus zdarzeń</related>
      </Docs>
    </Member>
    <Member MemberName="History">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlHistory History { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlHistory History" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.History" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property History As HtmlHistory" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlHistory ^ History { System::Windows::Forms::HtmlHistory ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.History : System.Windows.Forms.HtmlHistory" Usage="System.Windows.Forms.HtmlWindow.History" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlHistory</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera obiekt zawierający adresy URL ostatnio odwiedzonych przez użytkownika.</summary>
        <value><see cref="T:System.Windows.Forms.HtmlHistory" /> Dla bieżącego okna.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlWindow.History%2A> zawiera wszystkie adresy URL przejście w obrębie bieżącego okna, jest określany jako *stos nawigacji*i zapewnia metody do nawigowania wstecz do tych dokumentów.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsClosed">
      <MemberSignature Language="C#" Value="public bool IsClosed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsClosed" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.IsClosed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsClosed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsClosed { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsClosed : bool" Usage="System.Windows.Forms.HtmlWindow.IsClosed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy to okno jest otwarte lub zamknięte.</summary>
        <value><see langword="true" /> Jeśli okno jest wciąż otwarty, na ekranie; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli <xref:System.Windows.Forms.HtmlWindow> zostało zamknięte przez użytkownika lub za pomocą wywołania <xref:System.Windows.Forms.HtmlWindow.Close%2A> metody, próba przejść do nowego adresu URL lub dostęp do okna dokumentu spowoduje wystąpienie błędu. Ta właściwość służy do określenia, czy jest bezpieczny do wywołania właściwości i metody dla bieżącego obiektu okna.  
  
   
  
## Examples  
 Poniższy przykładowy kod powoduje otwarcie okna i zamyka te błędy, jeśli użytkownik nie został użyty go w ciągu ostatnich pięciu minut. Przykład kodu wymaga, że formularz ma <xref:System.Windows.Forms.WebBrowser> formantu o nazwie `WebBrowser1`, <xref:System.Windows.Forms.Button> o nazwie `Button1`, a <xref:System.Windows.Forms.Timer> klasę o nazwie `Timer1`.  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#8)]
 [!code-vb[System.Windows.Forms.HtmlWindow#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#8)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms537459.aspx">Właściwość zamknięte</related>
      </Docs>
    </Member>
    <Member MemberName="Load">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler Load;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler Load" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlWindow.Load" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Load As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ Load;" />
      <MemberSignature Language="F#" Value="member this.Load : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.Load : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy okno dokumentu i wszystkie jego elementy zakończono inicjowanie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlWindow.Load> Zdarzeń działa podobnie jak <xref:System.Windows.Forms.WebBrowser.DocumentCompleted> zdarzenie na <xref:System.Windows.Forms.WebBrowser> kontroli: sygnały, bezpiecznego dostępu do kodu HTML na elementy wewnątrz dokumentu.  
  
 Nie można anulować domyślnym działaniem <xref:System.Windows.Forms.HtmlWindow.Load> zdarzeń.
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje użycie tego elementu członkowskiego. W tym przykładzie program obsługi zdarzeń raporty w momencie wystąpienia <xref:System.Windows.Forms.HtmlWindow.Load> zdarzeń. Ten raport pomaga, aby dowiedzieć się, gdy zdarzenie występuje i mogą pomóc w debugowaniu. Aby zgłosić na wiele zdarzeń lub zdarzeń, które często występują, rozważ zastąpienie <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> z <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> lub dołączane wiadomość w wielowierszowym <xref:System.Windows.Forms.TextBox>.  
  
 Aby uruchomić przykładowy kod, wkleić go do projektu, który zawiera wystąpienie typu <xref:System.Windows.Forms.HtmlWindow> o nazwie `HtmlWindow1`. Upewnij się, że program obsługi zdarzeń jest skojarzony z <xref:System.Windows.Forms.HtmlWindow.Load> zdarzeń.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#453](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#453)]
 [!code-vb[System.Windows.Forms.EventExamples#453](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#453)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/cc197055.aspx">onLoad zdarzeń</related>
      </Docs>
    </Member>
    <Member MemberName="LostFocus">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler LostFocus;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler LostFocus" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlWindow.LostFocus" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event LostFocus As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ LostFocus;" />
      <MemberSignature Language="F#" Value="member this.LostFocus : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.LostFocus : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy fokus wprowadzania użytkownika opuścił okna.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu demonstruje użycie tego elementu członkowskiego. W tym przykładzie program obsługi zdarzeń raporty w momencie wystąpienia <xref:System.Windows.Forms.HtmlWindow.LostFocus> zdarzeń. Ten raport pomaga, aby dowiedzieć się, gdy zdarzenie występuje i mogą pomóc w debugowaniu.  
  
 Aby uruchomić przykładowy kod, wkleić go do projektu, który zawiera wystąpienie typu <xref:System.Windows.Forms.HtmlWindow> o nazwie `HtmlWindow1`. Upewnij się, że program obsługi zdarzeń jest skojarzony z <xref:System.Windows.Forms.HtmlWindow.LostFocus> zdarzeń.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#454](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#454)]
 [!code-vb[System.Windows.Forms.EventExamples#454](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#454)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="MoveTo">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Przesuwa okno do określonych współrzędnych na ekranie.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MoveTo">
      <MemberSignature Language="C#" Value="public void MoveTo (System.Drawing.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MoveTo(valuetype System.Drawing.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.MoveTo(System.Drawing.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MoveTo(System::Drawing::Point point);" />
      <MemberSignature Language="F#" Value="member this.MoveTo : System.Drawing.Point -&gt; unit" Usage="htmlWindow.MoveTo point" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="point">- Współrzędnych x i y lewego górnego rogu okna.</param>
        <summary>Przesuwa okno do określonych współrzędnych na ekranie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nie można użyć <xref:System.Windows.Forms.HtmlWindow.MoveTo%2A> Aby przenieść okno poza widocznej krawędzi ekranu; ta metoda jest również dostępna za pośrednictwem skryptu na stronie sieci Web i umożliwiając niezaufanych skryptu do renderowania niewidoczne systemu windows nie jest uważany za bezpieczny.  
  
 <xref:System.Windows.Forms.HtmlWindow.MoveTo%2A> zgłosi <xref:System.UnauthorizedAccessException> czy okno, które chcesz przenieść i okna nadrzędnego mają różne domeny najwyższego poziomu. Na przykład, jeśli hostujesz <xref:System.Windows.Forms.WebBrowser> kontrolować, wskazując a.adatum.com, Utwórz nowe za pomocą okna <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A> do wyświetlenia b.adatum.com. W tym przypadku oba okna są traktowane jako część tej samej domeny najwyższego poziomu i nie jest zgłaszany wyjątek. Jednak jeśli wywołasz <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A> do wyświetlenia www,microsoft.com, dwa okna powstał różnymi domenami najwyższego poziomu i <xref:System.Windows.Forms.HtmlWindow.MoveTo%2A> operacja spowoduje, że wyjątek do zgłoszenia.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">Kod próby wykonania tej operacji nie ma uprawnień do modyfikowania tego okna.</exception>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536626.aspx">moveTo — metoda</related>
      </Docs>
    </Member>
    <Member MemberName="MoveTo">
      <MemberSignature Language="C#" Value="public void MoveTo (int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MoveTo(int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.MoveTo(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MoveTo (x As Integer, y As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MoveTo(int x, int y);" />
      <MemberSignature Language="F#" Value="member this.MoveTo : int * int -&gt; unit" Usage="htmlWindow.MoveTo (x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">Współrzędna x oknie w lewym górnym rogu.</param>
        <param name="y">Współrzędną y lewego górnego rogu okna.</param>
        <summary>Przesuwa okno do określonych współrzędnych na ekranie.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nie można użyć <xref:System.Windows.Forms.HtmlWindow.MoveTo%2A> Aby przenieść okno poza widocznej krawędzi ekranu; ta metoda jest również dostępna za pośrednictwem skryptu na stronie sieci Web i umożliwiając niezaufanych skryptu do renderowania niewidoczne systemu windows nie jest uważany za bezpieczny.  
  
 <xref:System.Windows.Forms.HtmlWindow.MoveTo%2A> zgłosi <xref:System.UnauthorizedAccessException> czy okno, które chcesz przenieść i okna nadrzędnego mają różne domeny najwyższego poziomu. Na przykład, jeśli hostujesz <xref:System.Windows.Forms.WebBrowser> kontroli i wskazuje a.adatum.com, możesz utworzyć nowe przy użyciu okna <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A> do wyświetlenia b.adatum.com. W tym przypadku oba okna są traktowane jako część tej samej domeny najwyższego poziomu i nie jest zgłaszany wyjątek. Jednak jeśli wywołasz <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A> do wyświetlenia www,microsoft.com, dwa okna powstał różnymi domenami najwyższego poziomu i <xref:System.Windows.Forms.HtmlWindow.MoveTo%2A> operacja spowoduje, że wyjątek do zgłoszenia.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">Kod próby wykonania tej operacji nie ma uprawnień do modyfikowania tego okna.</exception>
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.Windows.Forms.HtmlWindow.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia nazwę okna.</summary>
        <value>A <see cref="T:System.String" /> reprezentujący nazwę.</value>
        <remarks>To be added.</remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms534187.aspx">Właściwość name</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Navigate">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Wyświetla lub pliki do pobrania nowej zawartości znajduje się pod określonym adresem URL.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Navigate">
      <MemberSignature Language="C#" Value="public void Navigate (string urlString);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Navigate(string urlString) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.Navigate(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Navigate (urlString As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Navigate(System::String ^ urlString);" />
      <MemberSignature Language="F#" Value="member this.Navigate : string -&gt; unit" Usage="htmlWindow.Navigate urlString" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="urlString" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="urlString">Zasób, aby wyświetlić, opisanego przez adres URL.</param>
        <summary>Wyświetla lub pliki do pobrania nowej zawartości znajduje się pod określonym adresem URL.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `url` parametr wskazuje stronę HTML, strony aktualnie wyświetlany w oknie zostaną zniszczone i zastąpione nową stronę; wszelkie odwołania, aplikacja zawiera obiekty zarządzane DOM w starej strony straci ważność. Jeśli `url` punktów do zasobu, którego nie można wyświetlić w programie Internet Explorer, użytkownik zobaczy okno dialogowe z pytaniem, czy można otworzyć zasobu spoza aplikacji, zapisz go na dysku lub anuluje operację pobierania.  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536638.aspx">Przejdź — metoda</related>
      </Docs>
    </Member>
    <Member MemberName="Navigate">
      <MemberSignature Language="C#" Value="public void Navigate (Uri url);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Navigate(class System.Uri url) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.Navigate(System.Uri)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Navigate (url As Uri)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Navigate(Uri ^ url);" />
      <MemberSignature Language="F#" Value="member this.Navigate : Uri -&gt; unit" Usage="htmlWindow.Navigate url" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="System.Uri" />
      </Parameters>
      <Docs>
        <param name="url">Określona jako lokalizacja <see cref="T:System.Uri" />, dokumentu lub obiektu, aby wyświetlić bieżące okno.</param>
        <summary>Wyświetla nowy dokument w bieżącym oknie.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Equality">
      <MemberSignature Language="C#" Value="public static bool operator == (System.Windows.Forms.HtmlWindow left, System.Windows.Forms.HtmlWindow right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Equality(class System.Windows.Forms.HtmlWindow left, class System.Windows.Forms.HtmlWindow right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.op_Equality(System.Windows.Forms.HtmlWindow,System.Windows.Forms.HtmlWindow)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator == (left As HtmlWindow, right As HtmlWindow) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator ==(System::Windows::Forms::HtmlWindow ^ left, System::Windows::Forms::HtmlWindow ^ right);" />
      <MemberSignature Language="F#" Value="static member ( = ) : System.Windows.Forms.HtmlWindow * System.Windows.Forms.HtmlWindow -&gt; bool" Usage="left = right" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Windows.Forms.HtmlWindow" />
        <Parameter Name="right" Type="System.Windows.Forms.HtmlWindow" />
      </Parameters>
      <Docs>
        <param name="left">Pierwszy <see cref="T:System.Windows.Forms.HtmlWindow" /> obiektu.</param>
        <param name="right">Drugi <see cref="T:System.Windows.Forms.HtmlWindow" /> obiektu.</param>
        <summary>Testuje dwa <see cref="T:System.Windows.Forms.HtmlWindow" /> obiekty pod kątem równości.</summary>
        <returns><see langword="true" /> Jeśli oba parametry <see langword="null" />, lub jeśli oba te elementy mają tego samego powiązanego interfejsu COM; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Testy operatora równości `IUnknown` wskaźniki obiektów COM opakowane przez podane <xref:System.Windows.Forms.HtmlWindow> klasy.  
  
 Jest równoważne metodę dla tego operatora <xref:System.Windows.Forms.HtmlWindow.Equals%28System.Object%29?displayProperty=nameWithType>]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="op_Inequality">
      <MemberSignature Language="C#" Value="public static bool operator != (System.Windows.Forms.HtmlWindow left, System.Windows.Forms.HtmlWindow right);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig specialname bool op_Inequality(class System.Windows.Forms.HtmlWindow left, class System.Windows.Forms.HtmlWindow right) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.op_Inequality(System.Windows.Forms.HtmlWindow,System.Windows.Forms.HtmlWindow)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Operator != (left As HtmlWindow, right As HtmlWindow) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static bool operator !=(System::Windows::Forms::HtmlWindow ^ left, System::Windows::Forms::HtmlWindow ^ right);" />
      <MemberSignature Language="F#" Value="static member op_Inequality : System.Windows.Forms.HtmlWindow * System.Windows.Forms.HtmlWindow -&gt; bool" Usage="System.Windows.Forms.HtmlWindow.op_Inequality (left, right)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="left" Type="System.Windows.Forms.HtmlWindow" />
        <Parameter Name="right" Type="System.Windows.Forms.HtmlWindow" />
      </Parameters>
      <Docs>
        <param name="left">Pierwszy <see cref="T:System.Windows.Forms.HtmlWindow" /> obiektu.</param>
        <param name="right">Drugi <see cref="T:System.Windows.Forms.HtmlWindow" /> obiektu.</param>
        <summary>Testuje dwa <see langword="HtmlWindow" /> obiekty pod kątem nierówności.</summary>
        <returns><see langword="true" /> Jeśli jeden, ale nie oba obiekty <see langword="null" />, lub podstawowych wskaźników COM nie są zgodne; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Open">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Plik jest wyświetlany w oknie o nazwie.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlWindow Open (string urlString, string target, string windowOptions, bool replaceEntry);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.HtmlWindow Open(string urlString, string target, string windowOptions, bool replaceEntry) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.Open(System.String,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Open (urlString As String, target As String, windowOptions As String, replaceEntry As Boolean) As HtmlWindow" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::HtmlWindow ^ Open(System::String ^ urlString, System::String ^ target, System::String ^ windowOptions, bool replaceEntry);" />
      <MemberSignature Language="F#" Value="member this.Open : string * string * string * bool -&gt; System.Windows.Forms.HtmlWindow" Usage="htmlWindow.Open (urlString, target, windowOptions, replaceEntry)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlWindow</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="urlString" Type="System.String" />
        <Parameter Name="target" Type="System.String" />
        <Parameter Name="windowOptions" Type="System.String" />
        <Parameter Name="replaceEntry" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="urlString">Adres URL opisująca lokalizację pliku do załadowania.</param>
        <param name="target">Nazwa okna, w którym można otworzyć zasobu. Może to być nazwa podana dla deweloperów lub jedną z następujących wartości specjalne: 
 <c>_blank</c>: Otwiera <paramref name="urlString" /> w nowym oknie. Działa tak samo, jak wywołanie <see cref="M:System.Windows.Forms.HtmlWindow.OpenNew(System.String,System.String)" />.  
  
 <c>_media</c>: Otwiera <paramref name="urlString" /> na pasku multimediów.  
  
 <c>_parent</c>: Otwiera <paramref name="urlString" /> w oknie, utworzony bieżącego okna.  
  
 <c>wy_szukaj</c>: Otwiera <paramref name="urlString" /> na pasku wyszukiwania.  
  
 <c>_self</c>: Otwiera <paramref name="urlString" /> w bieżącym oknie.  
  
 <c>_top</c>: Jeśli wywoływana względem okna należących do <c>ramki</c> otwiera element <paramref name="urlString" /> w hostingu okna jego <c>RAMEK</c>. W przeciwnym razie działa w taki sam jak <c>_self</c>.</param>
        <param name="windowOptions">Rozdzielana przecinkami ciąg składający się z zero lub więcej z następujących opcji w formie <c>nazwa = wartość</c>. Z wyjątkiem <c>po lewej stronie</c>, <c>górnej</c>, <c>wysokość</c>, i <c>szerokość</c> opcje, które przyjmuje dowolnego liczb całkowitych, każda opcja powoduje zaakceptowanie <c>tak</c> lub <see langword="1" />, i <c>nie</c> lub <see langword="0" />, jako prawidłowe wartości.  
  
 <c>channelmode</c>: Używane z technologią przestarzałe kanały programu Internet Explorer 4.0. Wartość domyślna to <c>nie</c>.  
  
 <c>katalogi</c>: Czy okno powinien być wyświetlany katalog przycisków nawigacji. Wartość domyślna to <c>tak</c>.  
  
 <c>wysokość</c>: Wysokość obszaru klienckiego okna, w pikselach. Wartość minimalna to 100; próbuje otworzyć okno mniejszym zakresie niż w wyniku tego okna spowoduje zgodnie z ustawień programu Internet Explorer.  
  
 <c>po lewej stronie</c>: Po lewej stronie (współrzędną x) położenie okna względem lewego górnego rogu ekranu użytkownika, w pikselach. Musi być dodatnią liczbą całkowitą.  
  
 <c>Lokalizacja</c>: Określa, czy do wyświetlenia paska adresu, który pozwala użytkownikom na przechodzenie okna do nowego adresu URL. Wartość domyślna to <c>tak</c>.  
  
 <c>pasek menu</c>: Określa, czy wyświetlanie menu w nowym oknie. Wartość domyślna to <c>tak</c>.  
  
 <c>o zmiennym rozmiarze</c>: Czy można zmienić rozmiar okna, przez użytkownika. Wartość domyślna to <c>tak</c>.  
  
 <c>paski przewijania</c>: Czy okno ma poziome i pionowe paski przewijania. Wartość domyślna to <c>tak</c>.  
  
 <c>Stan</c>: Czy okno ma pasek stanu u dołu. Wartość domyślna to <c>tak</c>.  
  
 <c>titlebar</c>: Czy jest wyświetlana nazwa bieżącej strony. Ustawienie tej opcji na <c>nie</c> nie ma wpływu w ramach zarządzaną aplikację; zawsze pojawia się na pasku tytułu.  
  
 <c>pasek narzędzi</c>: Czy przyciski paska narzędzi takich jak **ponownie**, **do przodu**, i **zatrzymać** są widoczne. Wartość domyślna to <c>tak</c>.  
  
 <c>TOP</c>: Pozycja górnej (współrzędna y) okna względem lewego górnego rogu ekranu użytkownika, w pikselach. Musi być dodatnią liczbą całkowitą.  
  
 <c>szerokość</c>: Szerokość obszaru klienckiego okna, w pikselach. Wartość minimalna to 100; próbuje otworzyć okno mniejszym zakresie niż w wyniku tego okna spowoduje zgodnie z ustawień programu Internet Explorer.</param>
        <param name="replaceEntry">Czy <paramref name="urlString" /> zastępuje adres URL bieżącego okna, w historii nawigacji. Co będzie miało wpływ operacji metod na <see cref="T:System.Windows.Forms.HtmlHistory" /> klasy.</param>
        <summary>Plik jest wyświetlany w oknie o nazwie.</summary>
        <returns><see cref="T:System.Windows.Forms.HtmlWindow" /> Reprezentujący nowy, wcześniej utworzone okno lub o nazwie określonej przez <paramref name="target" /> parametru.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `target` Parametru nazwę okna, który został utworzony w wyniku poprzedniego wywołania <xref:System.Windows.Forms.HtmlWindow.Open%2A>. Parametr może też wskazywać oknem otworzyć, klikając na hiperłącze (`A` elementu) lub `FORM` element, który używa `TARGET` atrybutu, aby otworzyć jego adres URL w nowym oknie. Poniższy kod HTML spowoduje otwarcie nowego okna o nazwie `orderWindow` po kliknięciu przez użytkownika:  
  
 `<A HREF="/startOrder.aspx" TARGET="orderWindow">Click to Start Order</a>`  
  
 Jeśli podasz żadnych opcji dla `windowOptions` parametru, każda opcja nieuwzględnione jest automatycznie wyłączana. Innymi słowy Jeśli określisz za `windowOptions` pasek stanu, a następnie pasek menu, pasek narzędzi, tytuł, paski przewijania i tak dalej nie będą wyświetlane, chyba że je za jawnie włączyć `windowOptions`.  
  
 Jeśli plik wskazywany przez `url` jest plik HTML, plik tekstowy lub innego typu pliku, który może znajdować się wewnątrz programu Internet Explorer, która będzie wyświetlana w oknie o nazwie. Jeśli plik nie można wyświetlić w przeglądarce Internet Explorer i okna o nazwie określonej przez docelowy nie istnieje, a następnie pojawi się okno tylko tyle długo, Internet Explorer można pobrać zasobu. zostanie natychmiast zamknięta później.  
  
 Po utworzeniu nowego systemu windows za pomocą <xref:System.Windows.Forms.HtmlWindow.Open%2A> lub <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A>, sprawia, że HTML Document Object Model otworzyć nowe wystąpienie programu Internet Explorer. Jeśli nie zostanie wywołana <xref:System.Windows.Forms.HtmlWindow.Close%2A> na wszystkich systemu windows zostały utworzone to wystąpienie programu Internet Explorer będą nadal działać, nawet po zakończeniu aplikacji został zakończony.  
  
 Jeśli używasz <xref:System.Windows.Forms.HtmlWindow.Open%2A> załadować adresu URL w istniejącym oknie `windowOptions` zostaną zignorowane; okno zostanie zachowana, wymiary, wygląd i położenie na ekranie najpierw podane przez początkowe wywołanie <xref:System.Windows.Forms.HtmlWindow.Open%2A>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Open">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlWindow Open (Uri url, string target, string windowOptions, bool replaceEntry);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.HtmlWindow Open(class System.Uri url, string target, string windowOptions, bool replaceEntry) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.Open(System.Uri,System.String,System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Open (url As Uri, target As String, windowOptions As String, replaceEntry As Boolean) As HtmlWindow" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::HtmlWindow ^ Open(Uri ^ url, System::String ^ target, System::String ^ windowOptions, bool replaceEntry);" />
      <MemberSignature Language="F#" Value="member this.Open : Uri * string * string * bool -&gt; System.Windows.Forms.HtmlWindow" Usage="htmlWindow.Open (url, target, windowOptions, replaceEntry)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlWindow</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="System.Uri" />
        <Parameter Name="target" Type="System.String" />
        <Parameter Name="windowOptions" Type="System.String" />
        <Parameter Name="replaceEntry" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="url">Adres URL opisująca lokalizację pliku do załadowania.</param>
        <param name="target">Nazwa okna, w którym można otworzyć zasobu. Może to być nazwa podana dla deweloperów lub jedną z następujących wartości specjalne: 
 <c>_blank</c>: Otwiera <paramref name="url" /> w nowym oknie. Działa tak samo, jak wywołanie <see cref="M:System.Windows.Forms.HtmlWindow.OpenNew(System.String,System.String)" />.  
  
 <c>_media</c>: Otwiera <paramref name="url" /> na pasku multimediów.  
  
 <c>_parent</c>: Otwiera <paramref name="url" /> w oknie, utworzony bieżącego okna.  
  
 <c>wy_szukaj</c>: Otwiera <paramref name="url" /> na pasku wyszukiwania.  
  
 <c>_self</c>: Otwiera <paramref name="url" /> w bieżącym oknie.  
  
 <c>_top</c>: Jeśli wywoływana względem okna należących do <c>ramki</c> otwiera element <paramref name="url" /> w hostingu okna jego <c>RAMEK</c>. W przeciwnym razie działa w taki sam jak <c>_self</c>.</param>
        <param name="windowOptions">Rozdzielana przecinkami ciąg składający się z zero lub więcej z następujących opcji w formie <c>nazwa = wartość</c>. Z wyjątkiem <c>po lewej stronie</c>, <c>górnej</c>, <c>wysokość</c>, i <c>szerokość</c> opcje, które przyjmuje dowolnego liczb całkowitych, każda opcja powoduje zaakceptowanie <c>tak</c> lub <see langword="1" />, i <c>nie</c> lub <see langword="0" />, jako prawidłowe wartości.  
  
 <c>channelmode</c>: Używane z technologią przestarzałe kanały programu Internet Explorer 4.0. Wartość domyślna to <c>nie</c>.  
  
 <c>katalogi</c>: Czy okno powinien być wyświetlany katalog przycisków nawigacji. Wartość domyślna to <c>tak</c>.  
  
 <c>wysokość</c>: Wysokość obszaru klienckiego okna, w pikselach. Wartość minimalna to 100; próbuje otworzyć okno mniejszym zakresie niż w wyniku tego okna spowoduje zgodnie z ustawień programu Internet Explorer.  
  
 <c>po lewej stronie</c>: Po lewej stronie (współrzędną x) położenie okna względem lewego górnego rogu ekranu użytkownika, w pikselach. Musi być dodatnią liczbą całkowitą.  
  
 <c>Lokalizacja</c>: Określa, czy do wyświetlenia paska adresu, który pozwala użytkownikom na przechodzenie okna do nowego adresu URL. Wartość domyślna to <c>tak</c>.  
  
 <c>pasek menu</c>: Określa, czy wyświetlanie menu w nowym oknie. Wartość domyślna to <c>tak</c>.  
  
 <c>o zmiennym rozmiarze</c>: Czy można zmienić rozmiar okna, przez użytkownika. Wartość domyślna to <c>tak</c>.  
  
 <c>paski przewijania</c>: Czy okno ma poziome i pionowe paski przewijania. Wartość domyślna to <c>tak</c>.  
  
 <c>Stan</c>: Czy okno ma pasek stanu u dołu. Wartość domyślna to <c>tak</c>.  
  
 <c>titlebar</c>: Czy jest wyświetlana nazwa bieżącej strony. Ustawienie tej opcji na <c>nie</c> nie ma wpływu w ramach zarządzaną aplikację; zawsze pojawia się na pasku tytułu.  
  
 <c>pasek narzędzi</c>: Czy przyciski paska narzędzi takich jak **ponownie**, **do przodu**, i **zatrzymać** są widoczne. Wartość domyślna to <c>tak</c>.  
  
 <c>TOP</c>: Pozycja górnej (współrzędna y) okna względem lewego górnego rogu ekranu użytkownika, w pikselach. Musi być dodatnią liczbą całkowitą.  
  
 <c>szerokość</c>: Szerokość obszaru klienckiego okna, w pikselach. Wartość minimalna to 100; próbuje otworzyć okno mniejszym zakresie niż w wyniku tego okna spowoduje zgodnie z ustawień programu Internet Explorer.</param>
        <param name="replaceEntry">Czy <paramref name="url" /> zastępuje adres URL bieżącego okna, w historii nawigacji. Co będzie miało wpływ operacji metod na <see cref="T:System.Windows.Forms.HtmlHistory" /> klasy.</param>
        <summary>Plik jest wyświetlany w oknie o nazwie.</summary>
        <returns><see cref="T:System.Windows.Forms.HtmlWindow" /> Reprezentujący nowy, wcześniej utworzone okno lub o nazwie określonej przez <paramref name="target" /> parametru.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `target` Parametru nazwę okna, który został utworzony w wyniku poprzedniego wywołania <xref:System.Windows.Forms.HtmlWindow.Open%2A>. Parametr może też wskazywać oknem otworzyć, klikając na hiperłącze (`A` elementu) lub `FORM` element, który używa `TARGET` atrybutu, aby otworzyć jego adres URL w nowym oknie. Poniższy kod HTML spowoduje otwarcie nowego okna o nazwie `orderWindow` po kliknięciu przez użytkownika:  
  
 `<A HREF="/startOrder.aspx" TARGET="orderWindow">Click to Start Order</a>`  
  
 Jeśli podasz żadnych opcji dla `windowOptions` parametru, każda opcja nieuwzględnione jest automatycznie wyłączana. Innymi słowy Jeśli określisz za `windowOptions` pasek stanu, a następnie pasek menu, pasek narzędzi, tytuł, paski przewijania i tak dalej nie będą wyświetlane, chyba że je za jawnie włączyć `windowOptions`.  
  
 Jeśli plik wskazywany przez `url` jest plik HTML, plik tekstowy lub innego typu pliku, który może znajdować się wewnątrz programu Internet Explorer, która będzie wyświetlana w oknie o nazwie. Jeśli plik nie można wyświetlić w przeglądarce Internet Explorer i okna o nazwie określonej przez docelowy nie istnieje, a następnie pojawi się okno tylko tyle długo, Internet Explorer można pobrać zasobu. zostanie natychmiast zamknięta później.  
  
 Po utworzeniu nowego systemu windows za pomocą <xref:System.Windows.Forms.HtmlWindow.Open%2A> lub <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A>, sprawia, że HTML Document Object Model otworzyć nowe wystąpienie programu Internet Explorer. Jeśli nie zostanie wywołana <xref:System.Windows.Forms.HtmlWindow.Close%2A> na wszystkich systemu windows zostały utworzone to wystąpienie programu Internet Explorer będą nadal działać, nawet po zakończeniu aplikacji został zakończony.  
  
 Jeśli używasz <xref:System.Windows.Forms.HtmlWindow.Open%2A> załadować adresu URL w istniejącym oknie `windowOptions` zostaną zignorowane; okno zostanie zachowana, wymiary, wygląd i położenie na ekranie najpierw podane przez początkowe wywołanie <xref:System.Windows.Forms.HtmlWindow.Open%2A> .  
  
   
  
## Examples  
 Poniższy przykład kodu zawiera dwie metody:  
  
-   Pierwszy otwiera adres URL w oknie o nazwie `displayWindow`, tworzącej z paskiem stanu wyświetlane.  
  
-   Drugi w tym samym oknie zostanie otwarta innego adresu URL, ale Określa, że powinien być wyświetlany na pasku lokalizacji.  
  
 Należy zauważyć, że zależy od wymiarów okna i kontrolek, które są wyświetlane, w której adres URL jest otworzony jako pierwszy. Przykład kodu wymaga, że formularz zawiera <xref:System.Windows.Forms.WebBrowser> formantu o nazwie `WebBrowser1`.  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#13](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#13)]
 [!code-vb[System.Windows.Forms.HtmlWindow#13](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#13)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536651.aspx">Open — metoda</related>
      </Docs>
    </Member>
    <Member MemberName="Opener">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlWindow Opener { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlWindow Opener" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.Opener" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Opener As HtmlWindow" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlWindow ^ Opener { System::Windows::Forms::HtmlWindow ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Opener : System.Windows.Forms.HtmlWindow" Usage="System.Windows.Forms.HtmlWindow.Opener" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlWindow</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera odwołanie do bieżącego okna otwarte okna.</summary>
        <value><see cref="T:System.Windows.Forms.HtmlWindow" /> Utworzony przez wywołanie <see cref="M:System.Windows.Forms.HtmlWindow.Open(System.String,System.String,System.String,System.Boolean)" /> lub <see cref="M:System.Windows.Forms.HtmlWindow.OpenNew(System.String,System.String)" /> metody. Jeśli okno nie został utworzony przy użyciu jednej z następujących metod, właściwość ta zwraca <see langword="null" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="OpenNew">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Wyświetla plik w nowym oknie.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OpenNew">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlWindow OpenNew (string urlString, string windowOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.HtmlWindow OpenNew(string urlString, string windowOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.OpenNew(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function OpenNew (urlString As String, windowOptions As String) As HtmlWindow" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::HtmlWindow ^ OpenNew(System::String ^ urlString, System::String ^ windowOptions);" />
      <MemberSignature Language="F#" Value="member this.OpenNew : string * string -&gt; System.Windows.Forms.HtmlWindow" Usage="htmlWindow.OpenNew (urlString, windowOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlWindow</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="urlString" Type="System.String" />
        <Parameter Name="windowOptions" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="urlString">Adres URL opisująca lokalizację pliku do załadowania.</param>
        <param name="windowOptions">Rozdzielana przecinkami ciąg składający się z zero lub więcej z następujących opcji w formie <c>nazwa = wartość</c>. Zobacz <see cref="M:System.Windows.Forms.HtmlWindow.Open(System.String,System.String,System.String,System.Boolean)" /> pełny opis prawidłowych opcji.</param>
        <summary>Wyświetla plik w nowym oknie.</summary>
        <returns><see cref="T:System.Windows.Forms.HtmlWindow" /> Reprezentujący nowe okno.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli plik wskazywany przez `url` jest plik HTML, plik tekstowy lub innego typu pliku, który może znajdować się wewnątrz programu Internet Explorer, która będzie wyświetlana w nowym oknie. Jeśli plik nie może być wyświetlany wewnątrz programu Internet Explorer, a następnie w oknie zostanie otwarta tylko tyle długo, Internet Explorer można pobrać zasobu. zostanie natychmiast zamknięta później.  
  
 Po utworzeniu nowego systemu windows za pomocą <xref:System.Windows.Forms.HtmlWindow.Open%2A> lub <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A>, sprawia, że HTML Document Object Model otworzyć nowe wystąpienie programu Internet Explorer. Jeśli nie zostanie wywołana <xref:System.Windows.Forms.HtmlWindow.Close%2A> na wszystkich systemu windows zostały utworzone to wystąpienie programu Internet Explorer będą nadal działać, nawet po zakończeniu aplikacji został zakończony.  
  
 Jeśli chcesz załadować dokument do wcześniej otwartego okna zobacz <xref:System.Windows.Forms.HtmlWindow.Open%2A> metody.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="OpenNew">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlWindow OpenNew (Uri url, string windowOptions);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.HtmlWindow OpenNew(class System.Uri url, string windowOptions) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.OpenNew(System.Uri,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function OpenNew (url As Uri, windowOptions As String) As HtmlWindow" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::HtmlWindow ^ OpenNew(Uri ^ url, System::String ^ windowOptions);" />
      <MemberSignature Language="F#" Value="member this.OpenNew : Uri * string -&gt; System.Windows.Forms.HtmlWindow" Usage="htmlWindow.OpenNew (url, windowOptions)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlWindow</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="url" Type="System.Uri" />
        <Parameter Name="windowOptions" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="url">Adres URL opisująca lokalizację pliku do załadowania.</param>
        <param name="windowOptions">Rozdzielana przecinkami ciąg składający się z zero lub więcej z następujących opcji w formie <c>nazwa = wartość</c>. Zobacz <see cref="M:System.Windows.Forms.HtmlWindow.Open(System.String,System.String,System.String,System.Boolean)" /> pełny opis prawidłowych opcji.</param>
        <summary>Wyświetla plik w nowym oknie.</summary>
        <returns><see cref="T:System.Windows.Forms.HtmlWindow" /> Reprezentujący nowe okno.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli plik wskazywany przez `url` jest plik HTML, plik tekstowy lub innego typu pliku, który może znajdować się wewnątrz programu Internet Explorer, która będzie wyświetlana w nowym oknie. Jeśli plik nie może być wyświetlany wewnątrz programu Internet Explorer, a następnie w oknie zostanie otwarta tylko tyle długo, Internet Explorer można pobrać zasobu. zostanie natychmiast zamknięta później.  
  
 Po utworzeniu nowego systemu windows za pomocą <xref:System.Windows.Forms.HtmlWindow.Open%2A> lub <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A>, sprawia, że HTML Document Object Model otworzyć nowe wystąpienie programu Internet Explorer. Jeśli nie zostanie wywołana <xref:System.Windows.Forms.HtmlWindow.Close%2A> na wszystkich systemu windows zostały utworzone to wystąpienie programu Internet Explorer będą nadal działać, nawet po zakończeniu aplikacji został zakończony.  
  
 Jeśli chcesz załadować dokument do wcześniej otwartego okna zobacz <xref:System.Windows.Forms.HtmlWindow.Open%2A> metody.  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536651.aspx">Open — metoda</related>
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlWindow Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlWindow Parent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.Parent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parent As HtmlWindow" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlWindow ^ Parent { System::Windows::Forms::HtmlWindow ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Parent : System.Windows.Forms.HtmlWindow" Usage="System.Windows.Forms.HtmlWindow.Parent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlWindow</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera znajdującej się powyżej bieżącej na stronie zawierające ramki okna.</summary>
        <value><see cref="T:System.Windows.Forms.HtmlWindow" /> , Który jest właścicielem bieżącego okna. Jeśli nie jest bieżące okno <c>ramki</c>, lub nie jest osadzone wewnątrz <c>ramki</c>, funkcja zwraca <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W dokumencie, zawierające ramki każdy `FRAME` w ramach `FRAMESET` działa jako okna podrzędnego oddzielne na stronie. Elementem nadrzędnym każdego `FRAME` jest `FRAMESET` zawierającą `FRAME`.  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms534326.aspx">Właściwość nadrzędna</related>
      </Docs>
    </Member>
    <Member MemberName="Position">
      <MemberSignature Language="C#" Value="public System.Drawing.Point Position { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Point Position" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.Position" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Position As Point" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Point Position { System::Drawing::Point get(); };" />
      <MemberSignature Language="F#" Value="member this.Position : System.Drawing.Point" Usage="System.Windows.Forms.HtmlWindow.Position" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Point</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera pozycję obszaru klienckiego okna na ekranie.</summary>
        <value>A <see cref="T:System.Drawing.Point" /> opisujące x- i współrzędne y lewego górnego rogu ekranu, w pikselach.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.Control.Location%2A> Właściwość <xref:System.Windows.Forms.WebBrowser> kontroli zwróci położenie formantu względem lewego górnego rogu formularza. Z kolei <xref:System.Windows.Forms.HtmlWindow.Position%2A> spowoduje zwrócenie lokalizacji obszaru wyświetlania dokumentu względem lewego górnego rogu użytkownika.  
  
   
  
## Examples  
 Poniższy przykład kodu otwiera nowe okno bezpośrednio nad <xref:System.Windows.Forms.WebBrowser> formant w formularzu. Przykład kodu wymaga, że formularz zawiera wystąpienie <xref:System.Windows.Forms.WebBrowser> formantu o nazwie `WebBrowser1`.  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#5](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#5)]
 [!code-vb[System.Windows.Forms.HtmlWindow#5](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#5)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/cc06e61f-43b6-4408-a676-2542dcfcd96e">Współrzędne formularzy systemu Windows</related>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms534389.aspx">screenLeft właściwości</related>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms534390.aspx">screenTop właściwości</related>
      </Docs>
    </Member>
    <Member MemberName="Prompt">
      <MemberSignature Language="C#" Value="public string Prompt (string message, string defaultInputValue);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance string Prompt(string message, string defaultInputValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.Prompt(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Function Prompt (message As String, defaultInputValue As String) As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::String ^ Prompt(System::String ^ message, System::String ^ defaultInputValue);" />
      <MemberSignature Language="F#" Value="member this.Prompt : string * string -&gt; string" Usage="htmlWindow.Prompt (message, defaultInputValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="message" Type="System.String" />
        <Parameter Name="defaultInputValue" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="message">Komunikat wyświetlany użytkownikowi.</param>
        <param name="defaultInputValue">Domyślna wartość wyświetlana w polu tekstowym.</param>
        <summary>Pokazuje okno dialogowe wyświetla komunikat i pole tekstowe do użytkownika.</summary>
        <returns>A <see cref="T:System.String" /> reprezentujący tekstem wprowadzonym przez użytkownika.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlWindow.Prompt%2A> zapewnia szybki i łatwy sposób uzyskać zwykłego tekstu w danych wejściowych od użytkownika.  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536673.aspx">Monituj — metoda</related>
      </Docs>
    </Member>
    <Member MemberName="RemoveFocus">
      <MemberSignature Language="C#" Value="public void RemoveFocus ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void RemoveFocus() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.RemoveFocus" />
      <MemberSignature Language="VB.NET" Value="Public Sub RemoveFocus ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void RemoveFocus();" />
      <MemberSignature Language="F#" Value="member this.RemoveFocus : unit -&gt; unit" Usage="htmlWindow.RemoveFocus " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Przełącza fokus zniżki w stosunku do bieżącego okna.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy zostanie wywołana w `FRAME` okna `FRAMESET`, <xref:System.Windows.Forms.HtmlWindow.RemoveFocus%2A> spowoduje, że tego okna, aby utracić fokus, ale go nie automatycznie ustawi fokus na kolejne okno.  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536347.aspx">Rozmycie — metoda</related>
      </Docs>
    </Member>
    <Member MemberName="Resize">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler Resize;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler Resize" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlWindow.Resize" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Resize As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ Resize;" />
      <MemberSignature Language="F#" Value="member this.Resize : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.Resize : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy użytkownik używa myszą, aby zmienić wymiary okna.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu demonstruje użycie tego elementu członkowskiego. W tym przykładzie program obsługi zdarzeń raporty w momencie wystąpienia <xref:System.Windows.Forms.HtmlWindow.Resize> zdarzeń. Ten raport pomaga, aby dowiedzieć się, gdy zdarzenie występuje i mogą pomóc w debugowaniu. Aby zgłosić na wiele zdarzeń lub zdarzeń, które często występują, rozważ zastąpienie <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> z <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> lub dołączane wiadomość w wielowierszowym <xref:System.Windows.Forms.TextBox>.  
  
 Aby uruchomić przykładowy kod, wkleić go do projektu, który zawiera wystąpienie typu <xref:System.Windows.Forms.HtmlWindow> o nazwie `HtmlWindow1`. Upewnij się, że program obsługi zdarzeń jest skojarzony z <xref:System.Windows.Forms.HtmlWindow.Resize> zdarzeń.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#455](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#455)]
 [!code-vb[System.Windows.Forms.EventExamples#455](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#455)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536959.aspx">OnResize zdarzeń</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ResizeTo">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Zmienia rozmiar okna podany rozmiar.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ResizeTo">
      <MemberSignature Language="C#" Value="public void ResizeTo (System.Drawing.Size size);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResizeTo(valuetype System.Drawing.Size size) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.ResizeTo(System.Drawing.Size)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResizeTo(System::Drawing::Size size);" />
      <MemberSignature Language="F#" Value="member this.ResizeTo : System.Drawing.Size -&gt; unit" Usage="htmlWindow.ResizeTo size" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="size" Type="System.Drawing.Size" />
      </Parameters>
      <Docs>
        <param name="size">A <see cref="T:System.Drawing.Size" /> opisujący żądaną szerokość i wysokość okna w pikselach. Musi być 100 pikseli lub w obu wymiarów.</param>
        <summary>Zmienia rozmiar okna podany rozmiar.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykładowy kod powoduje otwarcie nowego okna i zmienia rozmiar, tak aby wypełniała obszar ekranu dostępne.  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#15](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#15)]
 [!code-vb[System.Windows.Forms.HtmlWindow#15](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#15)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.UnauthorizedAccessException">Okno, które chcesz zmienić rozmiar jest w innej domenie niż okna nadrzędnego. To ograniczenie jest częścią ramki dla wielu skryptów zabezpieczeń; Aby uzyskać więcej informacji, zobacz [dotyczące wykonywania skryptów i zabezpieczeń](https://msdn.microsoft.com/library/ms533028.aspx).</exception>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536723.aspx">resizeTo — metoda</related>
      </Docs>
    </Member>
    <Member MemberName="ResizeTo">
      <MemberSignature Language="C#" Value="public void ResizeTo (int width, int height);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ResizeTo(int32 width, int32 height) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.ResizeTo(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ResizeTo (width As Integer, height As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ResizeTo(int width, int height);" />
      <MemberSignature Language="F#" Value="member this.ResizeTo : int * int -&gt; unit" Usage="htmlWindow.ResizeTo (width, height)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="width" Type="System.Int32" />
        <Parameter Name="height" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="width">W tym artykule opisano żądaną szerokość okna w pikselach. Musi być 100 pikseli lub więcej.</param>
        <param name="height">W tym artykule opisano żądaną wysokość okna w pikselach. Musi być 100 pikseli lub więcej.</param>
        <summary>Zmienia rozmiar okna podany rozmiar.</summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.UnauthorizedAccessException">Okno, które chcesz zmienić rozmiar jest w innej domenie niż okna nadrzędnego. To ograniczenie jest częścią ramki dla wielu skryptów zabezpieczeń; Aby uzyskać więcej informacji, zobacz [dotyczące wykonywania skryptów i zabezpieczeń](https://msdn.microsoft.com/library/ms533028.aspx).</exception>
      </Docs>
    </Member>
    <Member MemberName="Scroll">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler Scroll;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler Scroll" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlWindow.Scroll" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Scroll As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ Scroll;" />
      <MemberSignature Language="F#" Value="member this.Scroll : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.Scroll : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy użytkownik przewija widok w oknie, aby wyświetlić tekst poza ekranem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu demonstruje użycie tego elementu członkowskiego. W tym przykładzie program obsługi zdarzeń raporty w momencie wystąpienia <xref:System.Windows.Forms.HtmlWindow.Scroll> zdarzeń. Ten raport pomaga, aby dowiedzieć się, gdy zdarzenie występuje i mogą pomóc w debugowaniu. Aby zgłosić na wiele zdarzeń lub zdarzeń, które często występują, rozważ zastąpienie <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> z <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> lub dołączane wiadomość w wielowierszowym <xref:System.Windows.Forms.TextBox>.  
  
 Aby uruchomić przykładowy kod, wkleić go do projektu, który zawiera wystąpienie typu <xref:System.Windows.Forms.HtmlWindow> o nazwie `HtmlWindow1`. Upewnij się, że program obsługi zdarzeń jest skojarzony z <xref:System.Windows.Forms.HtmlWindow.Scroll> zdarzeń.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#456](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#456)]
 [!code-vb[System.Windows.Forms.EventExamples#456](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#456)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536966.aspx">onscroll zdarzeń</related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ScrollTo">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Przewija okna do wyznaczonej pozycji.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ScrollTo">
      <MemberSignature Language="C#" Value="public void ScrollTo (System.Drawing.Point point);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScrollTo(valuetype System.Drawing.Point point) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.ScrollTo(System.Drawing.Point)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ScrollTo(System::Drawing::Point point);" />
      <MemberSignature Language="F#" Value="member this.ScrollTo : System.Drawing.Point -&gt; unit" Usage="htmlWindow.ScrollTo point" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="point" Type="System.Drawing.Point" />
      </Parameters>
      <Docs>
        <param name="point">- Współrzędnych x i y, względem lewego górnego rogu bieżącego okna, w których powinien przewijać strony.</param>
        <summary>Przesuwa okno do określonych współrzędnych.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlWindow.ScrollTo%2A> spowoduje, że dokument do przewijania, tak aby Współrzędna określona w dokumencie znajduje się w lewym górnym rogu okna dokumentu. Jeśli dokument nie jest długa lub dostatecznie szerokie tak się stało, <xref:System.Windows.Forms.HtmlWindow.ScrollTo%2A> będzie przewiń dokument o ile to możliwe w określonym kierunku.  
  
   
  
## Examples  
 Poniższy przykład kodu do przewijania dokumentu do położenia współrzędnych kliknięciu przez użytkownika.  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#15](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#15)]
 [!code-vb[System.Windows.Forms.HtmlWindow#15](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#15)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536731.aspx">scrollTo — metoda</related>
      </Docs>
    </Member>
    <Member MemberName="ScrollTo">
      <MemberSignature Language="C#" Value="public void ScrollTo (int x, int y);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void ScrollTo(int32 x, int32 y) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.HtmlWindow.ScrollTo(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub ScrollTo (x As Integer, y As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void ScrollTo(int x, int y);" />
      <MemberSignature Language="F#" Value="member this.ScrollTo : int * int -&gt; unit" Usage="htmlWindow.ScrollTo (x, y)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="x" Type="System.Int32" />
        <Parameter Name="y" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="x">Współrzędna x, względem lewego górnego rogu bieżącego okna, w których powinien przewijać strony.</param>
        <param name="y">Współrzędna y, względem lewego górnego rogu bieżącego okna, w których powinien przewijać strony.</param>
        <summary>Przewija okna do wyznaczonej pozycji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.HtmlWindow.ScrollTo%2A> spowoduje, że dokument do przewijania, tak aby Współrzędna określona w dokumencie znajduje się w lewym górnym rogu okna dokumentu. Jeśli dokument nie jest długa lub dostatecznie szerokie tak się stało, <xref:System.Windows.Forms.HtmlWindow.ScrollTo%2A> będzie przewiń dokument o ile to możliwe w określonym kierunku.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Size">
      <MemberSignature Language="C#" Value="public System.Drawing.Size Size { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Drawing.Size Size" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.Size" />
      <MemberSignature Language="VB.NET" Value="Public Property Size As Size" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Drawing::Size Size { System::Drawing::Size get(); void set(System::Drawing::Size value); };" />
      <MemberSignature Language="F#" Value="member this.Size : System.Drawing.Size with get, set" Usage="System.Windows.Forms.HtmlWindow.Size" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Drawing.Size</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia rozmiar bieżącego okna.</summary>
        <value>A <see cref="T:System.Drawing.Size" /> opisujących rozmiar okna w pikselach.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StatusBarText">
      <MemberSignature Language="C#" Value="public string StatusBarText { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string StatusBarText" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.StatusBarText" />
      <MemberSignature Language="VB.NET" Value="Public Property StatusBarText As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ StatusBarText { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.StatusBarText : string with get, set" Usage="System.Windows.Forms.HtmlWindow.StatusBarText" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia tekst wyświetlany na pasku stanu okna.</summary>
        <value>A <see cref="T:System.String" /> tekstową, bieżący stan.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.WebBrowser> Formantu nie Wyświetla pasek stanu. Nowe okno, które można otworzyć za pomocą <xref:System.Windows.Forms.HtmlWindow.Open%2A> lub <xref:System.Windows.Forms.HtmlWindow.OpenNew%2A> metod, jednak będzie wyświetlany pasek stanu domyślnie.  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms534648.aspx">Stan właściwość</related>
      </Docs>
    </Member>
    <Member MemberName="Unload">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.HtmlElementEventHandler Unload;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.HtmlElementEventHandler Unload" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.HtmlWindow.Unload" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Unload As HtmlElementEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::HtmlElementEventHandler ^ Unload;" />
      <MemberSignature Language="F#" Value="member this.Unload : System.Windows.Forms.HtmlElementEventHandler " Usage="member this.Unload : System.Windows.Forms.HtmlElementEventHandler " />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElementEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy bieżąca strona Trwa zwalnianie Nowa strona ma być wyświetlany.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu demonstruje użycie tego elementu członkowskiego. W tym przykładzie program obsługi zdarzeń raporty w momencie wystąpienia <xref:System.Windows.Forms.HtmlWindow.Unload> zdarzeń. Ten raport pomaga, aby dowiedzieć się, gdy zdarzenie występuje i mogą pomóc w debugowaniu. Aby zgłosić na wiele zdarzeń lub zdarzeń, które często występują, rozważ zastąpienie <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> z <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> lub dołączane wiadomość w wielowierszowym <xref:System.Windows.Forms.TextBox>.  
  
 Aby uruchomić przykładowy kod, wkleić go do projektu, który zawiera wystąpienie typu <xref:System.Windows.Forms.HtmlWindow> o nazwie `HtmlWindow1`. Upewnij się, że program obsługi zdarzeń jest skojarzony z <xref:System.Windows.Forms.HtmlWindow.Unload> zdarzeń.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#457](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#457)]
 [!code-vb[System.Windows.Forms.EventExamples#457](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#457)]  
  
 ]]></format>
        </remarks>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms536973.aspx">Zdarzenie w metodzie OnUnload</related>
      </Docs>
    </Member>
    <Member MemberName="Url">
      <MemberSignature Language="C#" Value="public Uri Url { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Uri Url" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.Url" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Url As Uri" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Uri ^ Url { Uri ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Url : Uri" Usage="System.Windows.Forms.HtmlWindow.Url" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Uri</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera adres URL odpowiadający bieżącego elementu, które są wyświetlane w oknie.</summary>
        <value>A <see cref="T:System.Uri" /> opisujące adresu URL.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość jest tylko do odczytu. Aby poruszać się w oknie do nowego dokumentu, użyj <xref:System.Windows.Forms.HtmlWindow.Navigate%2A> metody.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="WindowFrameElement">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.HtmlElement WindowFrameElement { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.HtmlElement WindowFrameElement" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.HtmlWindow.WindowFrameElement" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property WindowFrameElement As HtmlElement" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::HtmlElement ^ WindowFrameElement { System::Windows::Forms::HtmlElement ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.WindowFrameElement : System.Windows.Forms.HtmlElement" Usage="System.Windows.Forms.HtmlWindow.WindowFrameElement" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.HtmlElement</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera element ramki odpowiadający tego okna.</summary>
        <value><see cref="T:System.Windows.Forms.HtmlElement" /> Odpowiadający to okno <c>ramki</c> elementu. Jeśli to okno nie jest ramce, zwraca <see langword="null" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Po pobraniu `FRAME` elementu z <xref:System.Windows.Forms.HtmlWindow.Frames%2A> kolekcji, zwraca <xref:System.Windows.Forms.HtmlWindow>. Wywołaj <xref:System.Windows.Forms.HtmlWindow.WindowFrameElement%2A> dla tego obiektu, jeśli chcesz uzyskać dostępu do atrybutów bazowego `FRAME` elementu, takie jak `SRC` atrybutu.  
  
   
  
## Examples  
 Poniższy kod przykładowy porównuje `SRC` atrybut klatek `FRAMESET` do bieżącej lokalizacji. Jeśli są różne, ramki zostają zresetowane do ich oryginalne adresy URL.  
  
 [!code-csharp[System.Windows.Forms.HtmlWindow#8](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/CS/Form1.cs#8)]
 [!code-vb[System.Windows.Forms.HtmlWindow#8](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.HtmlWindow/VB/Form1.vb#8)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.UnauthorizedAccessException">Nie można uzyskać dostępu <c>ramki</c> elementów lub <c>ramki</c>użytkownika dokumentów, jeśli <c>ramki</c> znajduje się w innej strefie niż <c>RAMEK</c> zawierający go. Aby uzyskać pełne wyjaśnienie zobacz [dotyczące wykonywania skryptów i zabezpieczeń](https://msdn.microsoft.com/library/ms533028.aspx).</permission>
        <related type="ExternalDocumentation" href="https://msdn.microsoft.com/library/ms533771.aspx">frameElement właściwości</related>
      </Docs>
    </Member>
  </Members>
</Type>