<Type Name="SendKeys" FullName="System.Windows.Forms.SendKeys">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e17014706f0bc08fefb8c6ceeca5f194e4d1f7de" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69180373" /></Metadata><TypeSignature Language="C#" Value="public class SendKeys" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi SendKeys extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.SendKeys" />
  <TypeSignature Language="VB.NET" Value="Public Class SendKeys" />
  <TypeSignature Language="C++ CLI" Value="public ref class SendKeys" />
  <TypeSignature Language="F#" Value="type SendKeys = class" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Zapewnia metody wysyłania naciśnięć klawiszy do aplikacji.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Służy <xref:System.Windows.Forms.SendKeys> do wysyłania naciśnięć klawiszy i kombinacji klawiszy do aktywnej aplikacji. Nie można utworzyć wystąpienia tej klasy. Aby wysłać naciśnięcie klawisza do klasy i natychmiast kontynuować przepływ programu, użyj <xref:System.Windows.Forms.SendKeys.Send%2A>. Aby poczekać na wszystkie procesy uruchomione przez naciśnięcie klawisza <xref:System.Windows.Forms.SendKeys.SendWait%2A>, użyj.  
  
 Każdy klucz jest reprezentowany przez jeden lub więcej znaków. Aby określić pojedynczy znak klawiatury, Użyj samego znaku. Na przykład, aby reprezentować literę A, Przekaż ciąg "A" do metody. Aby reprezentować więcej niż jeden znak, Dołącz każdy dodatkowy znak do tego przed nim. Aby przedstawić litery A, B i C, określ parametr jako "ABC".  
  
 Znak plus (+), karetka (^), znak procentu (%), Tylda (~) i nawiasy () mają specjalne znaczenie do <xref:System.Windows.Forms.SendKeys>. Aby określić jeden z tych znaków, umieść go w nawiasach klamrowych{}(). Na przykład, aby określić znak plus, użyj "{+}". Aby określić znaki nawiasów klamrowych, użyj{}"{"{}i "}". Nawiasy kwadratowe ([]) nie mają <xref:System.Windows.Forms.SendKeys>specjalnego znaczenia do, ale muszą być ujęte w nawiasy klamrowe. W innych aplikacjach nawiasy mają specjalne znaczenie, które mogą być istotne w przypadku wystąpienia dynamicznej wymiany danych (DDE).  
  
> [!CAUTION]
>  Jeśli aplikacja jest przeznaczona do użytku międzynarodowego z różnymi klawiaturami, użycie <xref:System.Windows.Forms.SendKeys.Send%2A> może dać nieprzewidywalne wyniki i należy je unikać.  
  
 Aby określić znaki, które nie są wyświetlane po naciśnięciu klawisza, takie jak ENTER lub TAB, oraz klucze reprezentujące akcje, a nie znaki, użyj kodów z poniższej tabeli.  
  
|Key|Kod|  
|---------|----------|  
|BACKSPACE|{Backspace}, {BS} lub {BKSP}|  
|PRZERWIJ|{BREAK}|  
|CAPS LOCK|{CAPSLOCK}|  
|DEL lub DELETE|{DELETE} lub {DEL}|  
|STRZAŁKA W DÓŁ|{DOWN}|  
|END|{END}|  
|ENTER|{ENTER} lub ~|  
|ESC|{ESC}|  
|HELP|{HELP}|  
|MOWA|{HOME}|  
|INS lub Wstaw|{INSERT} lub {INS}|  
|STRZAŁKA W LEWO|{LEFT}|  
|NUM LOCK|{NUMLOCK}|  
|STRONA W DÓŁ|{PGDN}|  
|STRONA W GÓRĘ|{PGUP}|  
|EKRAN DRUKOWANIA|{PRTSC} (zarezerwowane do użytku w przyszłości)|  
|STRZAŁKA W PRAWO|KLIKNIJ|  
|SCROLL LOCK|{SCROLLLOCK}|  
|TAB|{TAB}|  
|STRZAŁKA W GÓRĘ|{UP}|  
|F1|{F1}|  
|F2|{F2}|  
|F3|{F3}|  
|F4|{F4}|  
|F5|{F5}|  
|F6|{F6}|  
|F7|{F7}|  
|F8|{F8}|  
|F9|{F9}|  
|F10|{F10}|  
|F11|{F11}|  
|F12|{F12}|  
|F13|{F13}|  
|F14|{F14}|  
|F15|{F15}|  
|F16|{F16}|  
|Dodawanie klawiaturowe|{ADD}|  
|Odejmowanie z klawiatury|{SUBTRACT}|  
|Mnożenie przez klawiaturę|{MULTIPLY}|  
|Podział na klawiaturę|MIESZCZON|  
  
 Aby określić klucze połączone z dowolną kombinacją klawiszy SHIFT, CTRL i ALT, poprzedź kod klucza z co najmniej jednym z poniższych kodów.  
  
|Key|Kod|  
|---------|----------|  
|SHIFT|+|  
|CTRL|^|  
|+|%|  
  
 Aby określić, że dowolna kombinacja kombinacji SHIFT, CTRL i ALT ma być utrzymywana podczas naciskania kilku innych klawiszy, należy ująć kod dla tych kluczy w nawiasach. Na przykład, aby określić, aby przetrzymać wciśnięty klawisz SHIFT, a naciśnięto C, użyj "+ (EC)". Aby określić, aby przetrzymać wciśnięty klawisz SHIFT podczas naciskania, a następnie C bez przesunięcia, użyj "+ EC".  
  
 Aby określić klucze powtarzane, użyj formularza {numer klucza}. Należy umieścić spację między kluczem i cyfrą. Na przykład {LEFT 42} oznacza naciśnięcie klawisza Strzałka w lewo o godzinie 42; {h 10} oznacza naciśnięcie klawisza H 10 razy.  
  
> [!NOTE]
>  Ponieważ nie ma metody zarządzanej do aktywowania innej aplikacji, można użyć tej klasy w bieżącej aplikacji lub użyć natywnych metod systemu Windows, takich jak `FindWindow` i `SetForegroundWindow`, aby wymusić skupienie się na innych aplikacjach.  
  
> [!NOTE]
>  <xref:System.Windows.Forms.SendKeys> Klasa została zaktualizowana dla .NET Framework 3,0, aby umożliwić jej używanie w aplikacjach uruchamianych w systemie Windows Vista. Ulepszone zabezpieczenia systemu Windows Vista (nazywanego kontrolą konta użytkownika lub UAC) uniemożliwiają działanie poprzedniej implementacji zgodnie z oczekiwaniami.  
>   
>  <xref:System.Windows.Forms.SendKeys> Klasa jest podatna na problemy z chronometrażem, w przypadku których niektórzy deweloperzy musieli obejść. Zaktualizowana implementacja jest nadal podatna na problemy z chronometrażem, ale jest nieco szybsza i może wymagać wprowadzenia zmian w obejść. <xref:System.Windows.Forms.SendKeys> Klasa spróbuje najpierw użyć poprzedniej implementacji, a jeśli to się nie powiedzie, użyje nowej implementacji. W związku z tym Klasa <xref:System.Windows.Forms.SendKeys> może zachowywać się inaczej w różnych systemach operacyjnych. Ponadto, gdy <xref:System.Windows.Forms.SendKeys> Klasa używa nowej implementacji <xref:System.Windows.Forms.SendKeys.SendWait%2A> , metoda nie będzie czekać na przetwarzanie komunikatów, gdy są wysyłane do innego procesu.  
>   
>  Jeśli aplikacja korzysta ze spójności spójnej niezależnie od systemu operacyjnego, można wymusić <xref:System.Windows.Forms.SendKeys> , aby Klasa korzystała z nowej implementacji, dodając do pliku App. config następujące ustawienie aplikacji.  
>   
>  `<appSettings>`  
>   
>  `<add key="SendKeys" value="SendInput"/>`  
>   
>  `</appSettings>`  
>   
>  Aby wymusić <xref:System.Windows.Forms.SendKeys> użycie poprzedniej implementacji przez klasę, Użyj zamiast niej `"JournalHook"` wartości.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje sposób używania <xref:System.Windows.Forms.SendKeys.Send%2A> metody. Aby uruchomić przykład, wklej następujący kod w formularzu o nazwie Form1 zawierający przycisk o nazwie Button1. Upewnij się, że zdarzenia kliknięcia są skojarzone z ich metodami obsługi zdarzeń w tym przykładzie. <xref:System.Windows.Forms.Control.TabIndex%2A> Właściwość kontrolki przycisku powinna mieć wartość 0. Gdy ten przykład jest uruchomiony, kliknij dwukrotnie formularz, aby wyzwolić zdarzenie kliknięcia przycisku.  
  
 [!code-cpp[System.Windows.Forms.SendKeys#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.SendKeys/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.SendKeys#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.SendKeys/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.SendKeys#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.SendKeys/VB/form1.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public static void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.SendKeys.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Flush();" />
      <MemberSignature Language="F#" Value="static member Flush : unit -&gt; unit" Usage="System.Windows.Forms.SendKeys.Flush " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Przetwarza wszystkie komunikaty systemu Windows znajdujące się obecnie w kolejce komunikatów.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Windows.Forms.SendKeys.Flush%2A> , aby zaczekać, aż aplikacja przetworzy naciśnięcie klawiszy i innych komunikatów systemu operacyjnego, które znajdują się w kolejce komunikatów. Jest to równoznaczne z <xref:System.Windows.Forms.Application.DoEvents%2A?displayProperty=nameWithType> wywołaniem do momentu, gdy nie ma więcej kluczy do przetworzenia.  
  
> [!NOTE]
>  Ponieważ nie ma metody zarządzanej do aktywowania innej aplikacji, można użyć tej klasy w bieżącej aplikacji lub użyć natywnych metod systemu Windows, takich jak `FindWindow` i `SetForegroundWindow`, aby wymusić skupienie się na innych aplikacjach.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public static void Send (string keys);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Send(string keys) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.SendKeys.Send(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Send (keys As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Send(System::String ^ keys);" />
      <MemberSignature Language="F#" Value="static member Send : string -&gt; unit" Usage="System.Windows.Forms.SendKeys.Send keys" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="keys">Ciąg naciśnięć klawiszy do wysłania.</param>
        <summary>Wysyła naciśnięcia klawiszy do aktywnej aplikacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Każdy klucz jest reprezentowany przez jeden lub więcej znaków. Aby określić pojedynczy znak klawiatury, Użyj samego znaku. Na przykład, aby reprezentować literę A, Przekaż ciąg "A" do metody. Aby reprezentować więcej niż jeden znak, Dołącz każdy dodatkowy znak do tego przed nim. Aby przedstawić litery A, B i C, określ parametr jako "ABC".  
  
 Znak plus (+), karetka (^), znak procentu (%), Tylda (~) i nawiasy () mają specjalne znaczenie do <xref:System.Windows.Forms.SendKeys>. Aby określić jeden z tych znaków, umieść go w nawiasach klamrowych{}(). Na przykład, aby określić znak plus, użyj "{+}". Aby określić znaki nawiasów klamrowych, użyj{}"{"{}i "}". Nawiasy kwadratowe ([]) nie mają <xref:System.Windows.Forms.SendKeys>specjalnego znaczenia do, ale muszą być ujęte w nawiasy klamrowe. W innych aplikacjach nawiasy mają specjalne znaczenie, które mogą być istotne w przypadku wystąpienia dynamicznej wymiany danych (DDE).  
  
> [!CAUTION]
>  Jeśli aplikacja jest przeznaczona do użytku międzynarodowego z różnymi klawiaturami, użycie <xref:System.Windows.Forms.SendKeys.Send%2A> może dać nieprzewidywalne wyniki i należy je unikać.  
  
 Aby określić znaki, które nie są wyświetlane po naciśnięciu klawisza, takie jak ENTER lub TAB, oraz klucze reprezentujące akcje, a nie znaki, użyj kodów z poniższej tabeli.  
  
|Key|Kod|  
|---------|----------|  
|BACKSPACE|{Backspace}, {BS} lub {BKSP}|  
|PRZERWIJ|{BREAK}|  
|CAPS LOCK|{CAPSLOCK}|  
|DEL lub DELETE|{DELETE} lub {DEL}|  
|STRZAŁKA W DÓŁ|{DOWN}|  
|END|{END}|  
|ENTER|{ENTER} lub ~|  
|ESC|{ESC}|  
|HELP|{HELP}|  
|MOWA|{HOME}|  
|INS lub Wstaw|{INSERT} lub {INS}|  
|STRZAŁKA W LEWO|{LEFT}|  
|NUM LOCK|{NUMLOCK}|  
|STRONA W DÓŁ|{PGDN}|  
|STRONA W GÓRĘ|{PGUP}|  
|EKRAN DRUKOWANIA|{PRTSC} (zarezerwowane do użytku w przyszłości)|  
|STRZAŁKA W PRAWO|KLIKNIJ|  
|SCROLL LOCK|{SCROLLLOCK}|  
|TAB|{TAB}|  
|STRZAŁKA W GÓRĘ|{UP}|  
|F1|{F1}|  
|F2|{F2}|  
|F3|{F3}|  
|F4|{F4}|  
|F5|{F5}|  
|F6|{F6}|  
|F7|{F7}|  
|F8|{F8}|  
|F9|{F9}|  
|F10|{F10}|  
|F11|{F11}|  
|F12|{F12}|  
|F13|{F13}|  
|F14|{F14}|  
|F15|{F15}|  
|F16|{F16}|  
|Dodawanie klawiaturowe|{ADD}|  
|Odejmowanie z klawiatury|{SUBTRACT}|  
|Mnożenie przez klawiaturę|{MULTIPLY}|  
|Podział na klawiaturę|MIESZCZON|  
  
 Aby określić klucze połączone z dowolną kombinacją klawiszy SHIFT, CTRL i ALT, poprzedź kod klucza z co najmniej jednym z poniższych kodów.  
  
|Key|Kod|  
|---------|----------|  
|SHIFT|+|  
|CTRL|^|  
|+|%|  
  
 Aby określić, że dowolna kombinacja kombinacji SHIFT, CTRL i ALT ma być utrzymywana podczas naciskania kilku innych klawiszy, należy ująć kod dla tych kluczy w nawiasach. Na przykład, aby określić, aby przetrzymać wciśnięty klawisz SHIFT, a naciśnięto C, użyj "+ (EC)". Aby określić, aby przetrzymać wciśnięty klawisz SHIFT podczas naciskania, a następnie C bez przesunięcia, użyj "+ EC".  
  
 Aby określić klucze powtarzane, użyj formularza {numer klucza}. Należy umieścić spację między kluczem i cyfrą. Na przykład {LEFT 42} oznacza naciśnięcie klawisza Strzałka w lewo o godzinie 42; {h 10} oznacza naciśnięcie klawisza H 10 razy.  
  
> [!NOTE]
>  Ponieważ nie ma metody zarządzanej do aktywowania innej aplikacji, można użyć tej klasy w bieżącej aplikacji lub użyć natywnych metod systemu Windows, takich jak `FindWindow` i `SetForegroundWindow`, aby wymusić skupienie się na innych aplikacjach.  
  
> [!NOTE]
>  <xref:System.Windows.Forms.SendKeys> Klasa została zaktualizowana dla .NET Framework 3,0, aby umożliwić jej używanie w aplikacjach uruchamianych w systemie Windows Vista. Ulepszone zabezpieczenia systemu Windows Vista (nazywanego kontrolą konta użytkownika lub UAC) uniemożliwiają działanie poprzedniej implementacji zgodnie z oczekiwaniami.  
>   
>  <xref:System.Windows.Forms.SendKeys> Klasa jest podatna na problemy z chronometrażem, w przypadku których niektórzy deweloperzy musieli obejść. Zaktualizowana implementacja jest nadal podatna na problemy z chronometrażem, ale jest nieco szybsza i może wymagać wprowadzenia zmian w obejść. <xref:System.Windows.Forms.SendKeys> Klasa spróbuje najpierw użyć poprzedniej implementacji, a jeśli to się nie powiedzie, użyje nowej implementacji. W związku z tym Klasa <xref:System.Windows.Forms.SendKeys> może zachowywać się inaczej w różnych systemach operacyjnych. Ponadto, gdy <xref:System.Windows.Forms.SendKeys> Klasa używa nowej implementacji <xref:System.Windows.Forms.SendKeys.SendWait%2A> , metoda nie będzie czekać na przetwarzanie komunikatów, gdy są wysyłane do innego procesu.  
>   
>  Jeśli aplikacja korzysta ze spójności spójnej niezależnie od systemu operacyjnego, można wymusić <xref:System.Windows.Forms.SendKeys> , aby Klasa korzystała z nowej implementacji, dodając do pliku App. config następujące ustawienie aplikacji.  
>   
>  `<appSettings>`  
>   
>  `<add key="SendKeys" value="SendInput"/>`  
>   
>  `</appSettings>`  
>   
>  Aby wymusić <xref:System.Windows.Forms.SendKeys> użycie poprzedniej implementacji przez klasę, Użyj zamiast niej `"JournalHook"` wartości.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje sposób używania <xref:System.Windows.Forms.SendKeys.Send%2A> metody. Aby uruchomić przykład, wklej następujący kod w formularzu o nazwie Form1 zawierający przycisk o nazwie Button1. Upewnij się, że zdarzenia kliknięcia są skojarzone z ich metodami obsługi zdarzeń w tym przykładzie. <xref:System.Windows.Forms.Control.TabIndex%2A> Właściwość kontrolki przycisku powinna mieć wartość 0. Gdy ten przykład jest uruchomiony, kliknij dwukrotnie formularz, aby wyzwolić zdarzenie kliknięcia przycisku.  
  
 [!code-cpp[System.Windows.Forms.SendKeys#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.SendKeys/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.SendKeys#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.SendKeys/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.SendKeys#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.SendKeys/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Nie istnieje aktywna aplikacja do wysyłania naciśnięć klawiszy.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="keys" />nie reprezentuje poprawnych naciśnięć klawiszy</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">dla niezarządzanego kodu do wywołania tej metody. Skojarzone Wyliczenie:<see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SendWait">
      <MemberSignature Language="C#" Value="public static void SendWait (string keys);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SendWait(string keys) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.SendKeys.SendWait(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SendWait (keys As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SendWait(System::String ^ keys);" />
      <MemberSignature Language="F#" Value="static member SendWait : string -&gt; unit" Usage="System.Windows.Forms.SendKeys.SendWait keys" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="keys">Ciąg naciśnięć klawiszy do wysłania.</param>
        <summary>Wysyła dane klucze do aktywnej aplikacji, a następnie czeka na przetworzenie komunikatów.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Windows.Forms.SendKeys.SendWait%2A> do wysyłania naciśnięć klawiszy lub kombinacji naciśnięć klawiszy do aktywnej aplikacji i poczekaj na przetworzenie komunikatów naciśnięć klawiszy. Tej metody można użyć do wysyłania naciśnięć klawiszy do aplikacji i oczekiwania na ukończenie procesów, które są uruchamiane przez naciśnięcia klawiszy. Może to być ważne, jeśli aplikacja musi zostać zakończona, zanim będzie można kontynuować działanie aplikacji.  
  
> [!NOTE]
>  Ponieważ nie ma metody zarządzanej do aktywowania innej aplikacji, można użyć tej klasy w bieżącej aplikacji lub użyć natywnych metod systemu Windows, takich jak `FindWindow` i `SetForegroundWindow`, aby wymusić skupienie się na innych aplikacjach.  
  
> [!NOTE]
>  <xref:System.Windows.Forms.SendKeys> Klasa została zaktualizowana dla .NET Framework 3,0, aby umożliwić jej używanie w aplikacjach uruchamianych w systemie Windows Vista. Ulepszone zabezpieczenia systemu Windows Vista (nazywanego kontrolą konta użytkownika lub UAC) uniemożliwiają działanie poprzedniej implementacji zgodnie z oczekiwaniami.  
>   
>  <xref:System.Windows.Forms.SendKeys> Klasa jest podatna na problemy z chronometrażem, w przypadku których niektórzy deweloperzy musieli obejść. Zaktualizowana implementacja jest nadal podatna na problemy z chronometrażem, ale jest nieco szybsza i może wymagać wprowadzenia zmian w obejść. <xref:System.Windows.Forms.SendKeys> Klasa spróbuje najpierw użyć poprzedniej implementacji, a jeśli to się nie powiedzie, użyje nowej implementacji. W związku z tym Klasa <xref:System.Windows.Forms.SendKeys> może zachowywać się inaczej w różnych systemach operacyjnych. Ponadto, gdy <xref:System.Windows.Forms.SendKeys> Klasa używa nowej implementacji <xref:System.Windows.Forms.SendKeys.SendWait%2A> , metoda nie będzie czekać na przetwarzanie komunikatów, gdy są wysyłane do innego procesu.  
>   
>  Jeśli aplikacja korzysta ze spójności spójnej niezależnie od systemu operacyjnego, można wymusić <xref:System.Windows.Forms.SendKeys> , aby Klasa korzystała z nowej implementacji, dodając do pliku App. config następujące ustawienie aplikacji.  
>   
>  `<appSettings>`  
>   
>  `<add key="SendKeys" value="SendInput"/>`  
>   
>  `</appSettings>`  
>   
>  Aby wymusić <xref:System.Windows.Forms.SendKeys> użycie poprzedniej implementacji przez klasę, Użyj zamiast niej `"JournalHook"` wartości.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">dla niezarządzanego kodu do wywołania tej metody. Skojarzone Wyliczenie:<see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
  </Members>
</Type>
