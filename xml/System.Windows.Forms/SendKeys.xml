<Type Name="SendKeys" FullName="System.Windows.Forms.SendKeys">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="928cd476312384e2f7d1033542661ae526636e6f" />
    <Meta Name="ms.sourcegitcommit" Value="723b8a6d92667ba86fcda96190bad3b4a03283b3" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="11/09/2018" />
    <Meta Name="ms.locfileid" Value="51310797" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class SendKeys" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi SendKeys extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.SendKeys" />
  <TypeSignature Language="VB.NET" Value="Public Class SendKeys" />
  <TypeSignature Language="C++ CLI" Value="public ref class SendKeys" />
  <TypeSignature Language="F#" Value="type SendKeys = class" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Udostępnia metody wysyłania naciśnięcia klawiszy do aplikacji.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Windows.Forms.SendKeys> Wyślij naciśnięcia klawiszy i klawiszy kombinacje aktywnej aplikacji. Nie można utworzyć wystąpienia tej klasy. Wyślij naciśnięcia klawiszy do klasy i natychmiast kontynuować przepływu programu, należy użyć <xref:System.Windows.Forms.SendKeys.Send%2A>. Aby poczekaj, aż wszystkie procesy uruchomione przez naciśnięcie klawisza, należy użyć <xref:System.Windows.Forms.SendKeys.SendWait%2A>.  
  
 Każdy klucz jest reprezentowany przez jeden lub więcej znaków. Aby określić znak pojedynczej klawiatury, należy użyć sam znak. Na przykład aby przedstawić litery A, przekazać w ciągu "A" do metody. Aby przedstawić więcej niż jeden znak, Dołącz każdego dodatkowego znaku do poprzedzającym go. Do reprezentowania litery A, B i C, ustaw wartość parametru "ABC".  
  
 Znak plus (+), daszek (^), znaku procentu (%), tyldy (~) i nawiasy () mają specjalne znaczenie, aby <xref:System.Windows.Forms.SendKeys>. Aby określić jedną z tych znaków, należy ją ująć w nawiasy klamrowe ({}). Na przykład aby określić znak plus, należy użyć "{+}". Aby określić znaków nawias klamrowy, użyj "{{}"i"{}}". Nawiasy kwadratowe ([]) nie mają specjalnego znaczenia do <xref:System.Windows.Forms.SendKeys>, ale należy go ująć w nawiasy klamrowe. W innych aplikacjach nawiasy mają specjalne znaczenie, które mogą być istotne, jeśli występuje na dynamiczną wymianę danych (DDE).  
  
> [!CAUTION]
>  Jeśli aplikacja jest przeznaczona do użytku międzynarodowe, z różnymi rodzajami klawiatury i korzystanie z <xref:System.Windows.Forms.SendKeys.Send%2A> może przynieść nieprzewidywalne rezultaty i należy ich unikać.  
  
 Aby określić znaki, które nie są wyświetlane po naciśnięciu klawisza, takich jak ENTER lub TAB i klucze, które reprezentują działań, a nie znaków, użyj kody w poniższej tabeli.  
  
|Key|Kod|  
|---------|----------|  
|BACKSPACE|{BACKSPACE}, {BS} lub {BKSP}|  
|BREAK|{BREAK}|  
|CAPS LOCK|{CAPSLOCK}|  
|DEL lub DELETE|{USUNĄĆ} lub {DEL}|  
|STRZAŁKA W DÓŁ|{DOWN}|  
|END|{ZAKOŃCZENIA}|  
|ENTER|{Wprowadź} lub ~|  
|ESC|{ESC}|  
|HELP|{HELP}|  
|STRONA GŁÓWNA|{HOME}|  
|Dodatki lub INSERT|{WSTAWIĆ} lub {INS}|  
|STRZAŁKA W LEWO|{LEFT}|  
|NUM LOCK|{NUMLOCK}|  
|PAGE DOWN|{PGDN}|  
|PAGE UP|{PGUP}|  
|DRUKOWANIE EKRANU|MIEĆ ETYKIETĘ {PRTSC} (zarezerwowane do użytku w przyszłości)|  
|STRZAŁKA W PRAWO|{RIGHT}|  
|BLOKADY PRZEWIJANIA|{SCROLLLOCK}|  
|TAB|{TAB}|  
|STRZAŁKA W GÓRĘ|{UP}|  
|F1|{F1}|  
|F2|{F2}|  
|F3|{F3}|  
|F4|{F4}|  
|F5|{F5}|  
|F6|{F6}|  
|F7|{F7}|  
|F8|{F8}|  
|F9|{F9}|  
|F10|{F10}|  
|F11|{F11}|  
|F12|{F12}|  
|F13|{F13}|  
|F14|{F14}|  
|F15|{F15}|  
|F16|{F16}|  
|Dodaj klawiatury numerycznej|{ADD}|  
|Odejmij klawiatury numerycznej|{SUBTRACT}|  
|Pomnóż klawiatury numerycznej|{MULTIPLY}|  
|Dzielenie klawiatury numerycznej|{DZIELENIA}|  
  
 Aby określić w połączeniu z dowolnej kombinacji SHIFT, CTRL i ALT — klawisze klucze, należy poprzedzić kod klawisza, co najmniej jednego z poniższych kodów.  
  
|Key|Kod|  
|---------|----------|  
|SHIFT|+|  
|CTRL|^|  
|ALT|%|  
  
 Aby określić, że dowolnej kombinacji SHIFT, CTRL i ALT powinien być przechowywany w dół, naciśnięciu kilka innych kluczy, należy dołączyć kod dla tych kluczy w nawiasie. Na przykład aby określić, przytrzymaj wciśnięty klawisz SHIFT naciśnięciu E i C, należy użyć "+ (WE)". Aby określić, przytrzymaj wciśnięty klawisz SHIFT podczas naciśnięciu E, C bez SHIFT, a następnie użyj "+ WE".  
  
 Aby określić powtarzających się kluczy, formularz {klucza number}. Możesz umieścić spacji między klucza i numeru. Na przykład {po lewej stronie 42} oznacza, naciśnij klawisz Strzałka w lewo 42 razy; {h 10} oznacza naciśnij klawisz, który godz. 10 razy.  
  
> [!NOTE]
>  Ponieważ nie istnieje metoda zarządzanych do aktywowania innej aplikacji, możesz użyć tej klasy w bieżącej aplikacji lub używać natywnego Windows metod, takich jak `FindWindow` i `SetForegroundWindow`, aby wymusić skoncentrować się na inne aplikacje.  
  
> [!NOTE]
>  <xref:System.Windows.Forms.SendKeys> Klasy zostało zaktualizowane dla środowiska .NET Framework 3.0 umożliwić jego użycia w aplikacjach, które są uruchamiane w systemie Windows Vista. Zwiększonych zabezpieczeń systemu Windows Vista (znane jako Kontrola konta użytkownika lub funkcji Kontrola konta użytkownika) zapobiega poprzedniej implementacji działać zgodnie z oczekiwaniami.  
>   
>  <xref:System.Windows.Forms.SendKeys> Klasy jest podatna na problemy dotyczące synchronizacji, które miały niektórzy deweloperzy w celu obejścia. Zaktualizowanej implementacji są nadal podatne na problemy dotyczące synchronizacji, ale jest teraz nieco szybszy i mogą wymagać zmian w rozwiązania. <xref:System.Windows.Forms.SendKeys> Klasy spróbuje najpierw użyć poprzedniej implementacji, a jeśli ono zawiedzie, korzysta z nowej implementacji. W rezultacie <xref:System.Windows.Forms.SendKeys> klasy może zachowywać się inaczej w różnych systemach operacyjnych. Ponadto, jeśli <xref:System.Windows.Forms.SendKeys> klasa korzysta z nowej implementacji <xref:System.Windows.Forms.SendKeys.SendWait%2A> metoda nie będzie czekać komunikaty mają być przetwarzane, gdy są one wysyłane do innego procesu.  
>   
>  Jeśli aplikacja zależy od spójne zachowanie niezależnie od systemu operacyjnego, możesz wymusić <xref:System.Windows.Forms.SendKeys> klasy, aby korzystać z nowej implementacji, dodając następujące ustawienie aplikacji do pliku app.config.  
>   
>  `<appSettings>`  
>   
>  `<add key="SendKeys" value="SendInput"/>`  
>   
>  `</appSettings>`  
>   
>  Aby wymusić <xref:System.Windows.Forms.SendKeys> klasy, aby użyć poprzedniego wdrożenia, należy użyć wartości `"JournalHook"` zamiast tego.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje sposób używania <xref:System.Windows.Forms.SendKeys.Send%2A> metody. Aby uruchomić przykład, wklej następujący kod w formularzu Form1 wywołuje zawierający przycisk o nazwie Button1. Upewnij się, że zdarzenia kliknij są skojarzone z ich metod obsługi zdarzeń, w tym przykładzie. Kontrolka przycisku <xref:System.Windows.Forms.Control.TabIndex%2A> właściwość powinna być ustawiona na wartość 0. Po uruchomieniu przykładu, kliknij dwukrotnie formularz, aby wyzwolić kliknięcia przycisku zdarzeń.  
  
 [!code-cpp[System.Windows.Forms.SendKeys#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.SendKeys/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.SendKeys#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.SendKeys/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.SendKeys#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.SendKeys/VB/form1.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public static void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.SendKeys.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Flush();" />
      <MemberSignature Language="F#" Value="static member Flush : unit -&gt; unit" Usage="System.Windows.Forms.SendKeys.Flush " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Są przetwarzane wszystkie komunikaty Windows obecnie w kolejce komunikatów.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Windows.Forms.SendKeys.Flush%2A> oczekiwania dla aplikacji do przetwarzania naciśnięcia klawiszy i inne komunikaty systemu operacyjnego, które znajdują się w kolejce wiadomości. Jest to równoważne z wywoływaniem <xref:System.Windows.Forms.Application.DoEvents%2A?displayProperty=nameWithType> aż nie wystąpią żadne więcej klucze do przetworzenia.  
  
> [!NOTE]
>  Ponieważ nie istnieje metoda zarządzanych do aktywowania innej aplikacji, możesz użyć tej klasy w bieżącej aplikacji lub używać natywnego Windows metod, takich jak `FindWindow` i `SetForegroundWindow`, aby wymusić skoncentrować się na inne aplikacje.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public static void Send (string keys);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Send(string keys) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.SendKeys.Send(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Send (keys As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Send(System::String ^ keys);" />
      <MemberSignature Language="F#" Value="static member Send : string -&gt; unit" Usage="System.Windows.Forms.SendKeys.Send keys" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="keys">Ciąg naciśnięcia klawiszy do wysłania.</param>
        <summary>Wysyła naciśnięcia klawiszy do aktywnej aplikacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Każdy klucz jest reprezentowany przez jeden lub więcej znaków. Aby określić znak pojedynczej klawiatury, należy użyć sam znak. Na przykład aby przedstawić litery A, przekazać w ciągu "A" do metody. Aby przedstawić więcej niż jeden znak, Dołącz każdego dodatkowego znaku do poprzedzającym go. Do reprezentowania litery A, B i C, ustaw wartość parametru "ABC".  
  
 Znak plus (+), daszek (^), znaku procentu (%), tyldy (~) i nawiasy () mają specjalne znaczenie, aby <xref:System.Windows.Forms.SendKeys>. Aby określić jedną z tych znaków, należy ją ująć w nawiasy klamrowe ({}). Na przykład aby określić znak plus, należy użyć "{+}". Aby określić znaków nawias klamrowy, użyj "{{}"i"{}}". Nawiasy kwadratowe ([]) nie mają specjalnego znaczenia do <xref:System.Windows.Forms.SendKeys>, ale należy go ująć w nawiasy klamrowe. W innych aplikacjach nawiasy mają specjalne znaczenie, które mogą być istotne, jeśli występuje na dynamiczną wymianę danych (DDE).  
  
> [!CAUTION]
>  Jeśli aplikacja jest przeznaczona do użytku międzynarodowe, z różnymi rodzajami klawiatury i korzystanie z <xref:System.Windows.Forms.SendKeys.Send%2A> może przynieść nieprzewidywalne rezultaty i należy ich unikać.  
  
 Aby określić znaki, które nie są wyświetlane po naciśnięciu klawisza, takich jak ENTER lub TAB i klucze, które reprezentują działań, a nie znaków, użyj kody w poniższej tabeli.  
  
|Key|Kod|  
|---------|----------|  
|BACKSPACE|{BACKSPACE}, {BS} lub {BKSP}|  
|BREAK|{BREAK}|  
|CAPS LOCK|{CAPSLOCK}|  
|DEL lub DELETE|{USUNĄĆ} lub {DEL}|  
|STRZAŁKA W DÓŁ|{DOWN}|  
|END|{ZAKOŃCZENIA}|  
|ENTER|{Wprowadź} lub ~|  
|ESC|{ESC}|  
|HELP|{HELP}|  
|STRONA GŁÓWNA|{HOME}|  
|Dodatki lub INSERT|{WSTAWIĆ} lub {INS}|  
|STRZAŁKA W LEWO|{LEFT}|  
|NUM LOCK|{NUMLOCK}|  
|PAGE DOWN|{PGDN}|  
|PAGE UP|{PGUP}|  
|DRUKOWANIE EKRANU|MIEĆ ETYKIETĘ {PRTSC} (zarezerwowane do użytku w przyszłości)|  
|STRZAŁKA W PRAWO|{RIGHT}|  
|BLOKADY PRZEWIJANIA|{SCROLLLOCK}|  
|TAB|{TAB}|  
|STRZAŁKA W GÓRĘ|{UP}|  
|F1|{F1}|  
|F2|{F2}|  
|F3|{F3}|  
|F4|{F4}|  
|F5|{F5}|  
|F6|{F6}|  
|F7|{F7}|  
|F8|{F8}|  
|F9|{F9}|  
|F10|{F10}|  
|F11|{F11}|  
|F12|{F12}|  
|F13|{F13}|  
|F14|{F14}|  
|F15|{F15}|  
|F16|{F16}|  
|Dodaj klawiatury numerycznej|{ADD}|  
|Odejmij klawiatury numerycznej|{SUBTRACT}|  
|Pomnóż klawiatury numerycznej|{MULTIPLY}|  
|Dzielenie klawiatury numerycznej|{DZIELENIA}|  
  
 Aby określić w połączeniu z dowolnej kombinacji SHIFT, CTRL i ALT — klawisze klucze, należy poprzedzić kod klawisza, co najmniej jednego z poniższych kodów.  
  
|Key|Kod|  
|---------|----------|  
|SHIFT|+|  
|CTRL|^|  
|ALT|%|  
  
 Aby określić, że dowolnej kombinacji SHIFT, CTRL i ALT powinien być przechowywany w dół, naciśnięciu kilka innych kluczy, należy dołączyć kod dla tych kluczy w nawiasie. Na przykład aby określić, przytrzymaj wciśnięty klawisz SHIFT naciśnięciu E i C, należy użyć "+ (WE)". Aby określić, przytrzymaj wciśnięty klawisz SHIFT podczas naciśnięciu E, C bez SHIFT, a następnie użyj "+ WE".  
  
 Aby określić powtarzających się kluczy, formularz {klucza number}. Możesz umieścić spacji między klucza i numeru. Na przykład {po lewej stronie 42} oznacza, naciśnij klawisz Strzałka w lewo 42 razy; {h 10} oznacza naciśnij klawisz, który godz. 10 razy.  
  
> [!NOTE]
>  Ponieważ nie istnieje metoda zarządzanych do aktywowania innej aplikacji, możesz użyć tej klasy w bieżącej aplikacji lub używać natywnego Windows metod, takich jak `FindWindow` i `SetForegroundWindow`, aby wymusić skoncentrować się na inne aplikacje.  
  
> [!NOTE]
>  <xref:System.Windows.Forms.SendKeys> Klasy zostało zaktualizowane dla środowiska .NET Framework 3.0 umożliwić jego użycia w aplikacjach, które są uruchamiane w systemie Windows Vista. Zwiększonych zabezpieczeń systemu Windows Vista (znane jako Kontrola konta użytkownika lub funkcji Kontrola konta użytkownika) zapobiega poprzedniej implementacji działać zgodnie z oczekiwaniami.  
>   
>  <xref:System.Windows.Forms.SendKeys> Klasy jest podatna na problemy dotyczące synchronizacji, które miały niektórzy deweloperzy w celu obejścia. Zaktualizowanej implementacji są nadal podatne na problemy dotyczące synchronizacji, ale jest teraz nieco szybszy i mogą wymagać zmian w rozwiązania. <xref:System.Windows.Forms.SendKeys> Klasy spróbuje najpierw użyć poprzedniej implementacji, a jeśli ono zawiedzie, korzysta z nowej implementacji. W rezultacie <xref:System.Windows.Forms.SendKeys> klasy może zachowywać się inaczej w różnych systemach operacyjnych. Ponadto, jeśli <xref:System.Windows.Forms.SendKeys> klasa korzysta z nowej implementacji <xref:System.Windows.Forms.SendKeys.SendWait%2A> metoda nie będzie czekać komunikaty mają być przetwarzane, gdy są one wysyłane do innego procesu.  
>   
>  Jeśli aplikacja zależy od spójne zachowanie niezależnie od systemu operacyjnego, możesz wymusić <xref:System.Windows.Forms.SendKeys> klasy, aby korzystać z nowej implementacji, dodając następujące ustawienie aplikacji do pliku app.config.  
>   
>  `<appSettings>`  
>   
>  `<add key="SendKeys" value="SendInput"/>`  
>   
>  `</appSettings>`  
>   
>  Aby wymusić <xref:System.Windows.Forms.SendKeys> klasy, aby użyć poprzedniego wdrożenia, należy użyć wartości `"JournalHook"` zamiast tego.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje sposób używania <xref:System.Windows.Forms.SendKeys.Send%2A> metody. Aby uruchomić przykład, wklej następujący kod w formularzu Form1 wywołuje zawierający przycisk o nazwie Button1. Upewnij się, że zdarzenia kliknij są skojarzone z ich metod obsługi zdarzeń, w tym przykładzie. Kontrolka przycisku <xref:System.Windows.Forms.Control.TabIndex%2A> właściwość powinna być ustawiona na wartość 0. Po uruchomieniu przykładu, kliknij dwukrotnie formularz, aby wyzwolić kliknięcia przycisku zdarzeń.  
  
 [!code-cpp[System.Windows.Forms.SendKeys#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.SendKeys/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.SendKeys#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.SendKeys/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.SendKeys#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.SendKeys/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Nie ma wysyłać naciśnięcia klawiszy do aktywnej aplikacji.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="keys" /> nie reprezentuje prawidłowy naciśnięć klawiszy</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">dla niezarządzanego kodu wywołać tę metodę. Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SendWait">
      <MemberSignature Language="C#" Value="public static void SendWait (string keys);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SendWait(string keys) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.SendKeys.SendWait(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SendWait (keys As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SendWait(System::String ^ keys);" />
      <MemberSignature Language="F#" Value="static member SendWait : string -&gt; unit" Usage="System.Windows.Forms.SendKeys.SendWait keys" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="keys">Ciąg naciśnięcia klawiszy do wysłania.</param>
        <summary>Wysyła danych kluczy do aktywnej aplikacji, a następnie czeka na komunikaty, które mają być przetwarzane.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Windows.Forms.SendKeys.SendWait%2A> do wysyłania naciśnięć klawiszy lub kombinacji klawiszy do aktywnej aplikacji i poczekać na naciśnięcie klawisza komunikaty do przetworzenia. Wyślij naciśnięcia klawiszy do aplikacji i poczekaj, aż wszystkie procesy, które są uruchamiane przez naciśnięć klawiszy, należy wykonać, można użyć tej metody. Może to być istotne, jeśli inna aplikacja musi zakończyć się przed aplikacja może kontynuować.  
  
> [!NOTE]
>  Ponieważ nie istnieje metoda zarządzanych do aktywowania innej aplikacji, możesz użyć tej klasy w bieżącej aplikacji lub używać natywnego Windows metod, takich jak `FindWindow` i `SetForegroundWindow`, aby wymusić skoncentrować się na inne aplikacje.  
  
> [!NOTE]
>  <xref:System.Windows.Forms.SendKeys> Klasy zostało zaktualizowane dla środowiska .NET Framework 3.0 umożliwić jego użycia w aplikacjach, które są uruchamiane w systemie Windows Vista. Zwiększonych zabezpieczeń systemu Windows Vista (znane jako Kontrola konta użytkownika lub funkcji Kontrola konta użytkownika) zapobiega poprzedniej implementacji działać zgodnie z oczekiwaniami.  
>   
>  <xref:System.Windows.Forms.SendKeys> Klasy jest podatna na problemy dotyczące synchronizacji, które miały niektórzy deweloperzy w celu obejścia. Zaktualizowanej implementacji są nadal podatne na problemy dotyczące synchronizacji, ale jest teraz nieco szybszy i mogą wymagać zmian w rozwiązania. <xref:System.Windows.Forms.SendKeys> Klasy spróbuje najpierw użyć poprzedniej implementacji, a jeśli ono zawiedzie, korzysta z nowej implementacji. W rezultacie <xref:System.Windows.Forms.SendKeys> klasy może zachowywać się inaczej w różnych systemach operacyjnych. Ponadto, jeśli <xref:System.Windows.Forms.SendKeys> klasa korzysta z nowej implementacji <xref:System.Windows.Forms.SendKeys.SendWait%2A> metoda nie będzie czekać komunikaty mają być przetwarzane, gdy są one wysyłane do innego procesu.  
>   
>  Jeśli aplikacja zależy od spójne zachowanie niezależnie od systemu operacyjnego, możesz wymusić <xref:System.Windows.Forms.SendKeys> klasy, aby korzystać z nowej implementacji, dodając następujące ustawienie aplikacji do pliku app.config.  
>   
>  `<appSettings>`  
>   
>  `<add key="SendKeys" value="SendInput"/>`  
>   
>  `</appSettings>`  
>   
>  Aby wymusić <xref:System.Windows.Forms.SendKeys> klasy, aby użyć poprzedniego wdrożenia, należy użyć wartości `"JournalHook"` zamiast tego.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">dla niezarządzanego kodu wywołać tę metodę. Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
  </Members>
</Type>