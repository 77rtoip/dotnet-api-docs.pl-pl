<Type Name="SendKeys" FullName="System.Windows.Forms.SendKeys">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="f798670405d97d29d6e135b97f2adb39d702dfd5" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30706463" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class SendKeys" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi SendKeys extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.SendKeys" />
  <TypeSignature Language="VB.NET" Value="Public Class SendKeys" />
  <TypeSignature Language="C++ CLI" Value="public ref class SendKeys" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Udostępnia metody wysyłania naciśnięcia klawiszy do aplikacji.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Windows.Forms.SendKeys> Wyślij naciśnięcia klawiszy i klawiszy kombinacje do aktywnej aplikacji. Nie można utworzyć wystąpienia tej klasy. Wyślij naciśnięcia klawiszy do klasy i natychmiast kontynuować procedurę programu, należy użyć <xref:System.Windows.Forms.SendKeys.Send%2A>. Zaczekać, aż wszystkie procesy uruchomione przez naciśnięcie klawisza, użyj <xref:System.Windows.Forms.SendKeys.SendWait%2A>.  
  
 Każdy klucz jest reprezentowana przez co najmniej jeden znak. Aby określić znak pojedynczego klawiatury, użyj sam znak. Na przykład aby przedstawić litera A, przekazać w ciągu "A" do metody. Aby przedstawić więcej niż jednego znaku, Dołącz każdy dodatkowego znak do poprzedzającym go. Do reprezentowania litery A, B i C, ustaw wartość parametru "ABC".  
  
 Znak plus (+), daszek (^), znaku procentu (%), tyldy (~) i nawiasów () mają specjalne znaczenie do <xref:System.Windows.Forms.SendKeys>. Aby określić jedną z tych znaków, należy ująć ją w nawiasach klamrowych ({}). Na przykład aby określić znak plus, użyj "{+}". Aby określić znaki nawias klamrowy, użyj "{{}" i "{}}". Nawiasy kwadratowe mają nie specjalne znaczenie <xref:System.Windows.Forms.SendKeys>, ale należy umieścić je w nawiasach klamrowych. W innych aplikacjach nawiasy mają specjalne znaczenie, które mogą być istotne, jeśli występuje dynamiczną wymianę danych (DDE).  
  
> [!CAUTION]
>  Jeśli aplikacja jest przeznaczona do użycia międzynarodowych z różnymi klawiatury, użycie <xref:System.Windows.Forms.SendKeys.Send%2A> może spowodować nieprzewidywalne skutki i należy unikać.  
  
 Aby określić znaki, które nie są wyświetlane po naciśnięciu klawisza, takich jak ENTER lub TAB i kluczy, które reprezentują akcje zamiast znaków, należy użyć kody w poniższej tabeli.  
  
|Key|Kod|  
|---------|----------|  
|BACKSPACE|{Polecenie BACKSPACE}, {BS} lub {BKSP}|  
|PODZIEL|{BREAK}|  
|CAPS LOCK|{CAPSLOCK}|  
|DEL lub DELETE|{USUNĄĆ} lub {DEL}|  
|STRZAŁKA W DÓŁ|{DOWN}|  
|END|{ZAKOŃCZENIA}|  
|ENTER|{Wprowadź} lub ~|  
|ESC|{ESC}|  
|HELP|{HELP}|  
|STRONA GŁÓWNA|{HOME}|  
|Dodatki lub Wstaw|{WSTAWIĆ} lub {INS}|  
|STRZAŁKA W LEWO|{LEFT}|  
|NUM LOCK|{NUMLOCK}|  
|PAGE DOWN|{PGDN}|  
|STRONA W GÓRĘ|{PGUP}|  
|DRUKOWANIE EKRANU|{MIEĆ ETYKIETĘ PRTSC} (zastrzeżone do użytku w przyszłości)|  
|STRZAŁKA W PRAWO|{PRAWO}|  
|BLOKADY PRZEWIJANIA|{SCROLLLOCK}|  
|TAB|{TAB}|  
|STRZAŁKA W GÓRĘ|{UP}|  
|F1|{F1}|  
|F2|{F2}|  
|F3|{F3}|  
|F4|{F4}|  
|F5|{F5}|  
|F6|{F6}|  
|F7|{F7}|  
|F8|{F8}|  
|F9|{F9}|  
|F10|{F10}|  
|F11|{F11}|  
|F12|{F12}|  
|F13|{F13}|  
|F14|{F14}|  
|F15|{F15}|  
|F16|{F16}|  
|Dodaj klawiatury numerycznej|{ADD}|  
|Odejmowanie klawiatury numerycznej|{SUBTRACT}|  
|Mnożenie klawiatury numerycznej|{MULTIPLY}|  
|Dzielenie klawiatury numerycznej|{DZIELENIA}|  
  
 Aby określić klucze w połączeniu z dowolną kombinację SHIFT, CTRL i ALT — klawisze, należy poprzedzić kod klucza z co najmniej jeden z następujących kodów.  
  
|Key|Kod|  
|---------|----------|  
|SHIFT|+|  
|CTRL|^|  
|ALT|%|  
  
 Aby określić, że dowolną kombinację SHIFT, CTRL i ALT powinien być przechowywany w dół naciśniętym innych kluczy, należy umieścić kod dla tych kluczy w nawiasach. Na przykład, aby określić, aby przytrzymaj naciśnięty klawisz E i C naciśnięty klawisz SHIFT, użyj "+ (WE)". Aby określić, przytrzymując klawisz SHIFT jest wciśnięty E C bez zmiany, a następnie użyj "+ WE".  
  
 Aby określić identycznych klucze, formularz {klucza number}. Możesz umieścić odstęp między klucza i numeru. Na przykład {lewej 42} oznacza, naciśnij klawisz Strzałka w lewo razy 42; {h 10} oznacza naciśnij H 10 razy.  
  
> [!NOTE]
>  Ponieważ nie istnieje metoda zarządzanych do aktywowania innej aplikacji, możesz użyć tej klasy w bieżącej aplikacji lub używanie metod natywnych systemu Windows, takiej jak `FindWindow` i `SetForegroundWindow`, aby wymusić fokus na inne aplikacje.  
  
> [!NOTE]
>  <xref:System.Windows.Forms.SendKeys> Klasa została zaktualizowana dla środowiska .NET Framework 3.0 umożliwić jej użycie w aplikacji działających w systemie Windows Vista. Zwiększone zabezpieczenia systemu Windows Vista (nazywanych Kontrola konta użytkownika lub UAC) zapobiega poprzedniej implementacji działać zgodnie z oczekiwaniami.  
>   
>  <xref:System.Windows.Forms.SendKeys> Klasy są podatne na problemy dotyczące synchronizacji, które miały niektórzy deweloperzy obejścia. Zaktualizowane wdrożenia są nadal podatne na problemy dotyczące synchronizacji, ale jest nieco większą i mogą wymagać zmian do rozwiązania. <xref:System.Windows.Forms.SendKeys> Klasa próbuje użyć poprzedniej implementacji najpierw, a w przypadku niepowodzenia korzysta z nowej implementacji. W związku z tym <xref:System.Windows.Forms.SendKeys> klasy może zachowywać się inaczej w różnych systemach operacyjnych. Ponadto, jeśli <xref:System.Windows.Forms.SendKeys> klasa korzysta z nowej implementacji <xref:System.Windows.Forms.SendKeys.SendWait%2A> — metoda nie będzie oczekiwał na komunikaty do przetwarzania, gdy są one wysyłane do innego procesu.  
>   
>  Jeśli aplikacja opiera się na spójne zachowanie niezależnie od systemu operacyjnego, można wymusić <xref:System.Windows.Forms.SendKeys> klasę, aby korzystać z nowej implementacji, dodając następujące ustawienie aplikacji w pliku app.config.  
>   
>  `<appSettings>`  
>   
>  `<add key="SendKeys" value="SendInput"/>`  
>   
>  `</appSettings>`  
>   
>  Aby wymusić <xref:System.Windows.Forms.SendKeys> klasy do poprzedniej implementacji, należy użyć wartości `"JournalHook"` zamiast tego.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób użycia <xref:System.Windows.Forms.SendKeys.Send%2A> metody. Aby uruchomić przykład, wklej następujący kod w postaci o nazwie Form1 zawierające przycisk o nazwie Button1. Upewnij się, że zdarzenia kliknij skojarzonych z ich metod obsługi zdarzeń, w tym przykładzie. Kontrolka przycisku <xref:System.Windows.Forms.Control.TabIndex%2A> właściwość powinna być równa 0. Kiedy przykładzie jest uruchomiona, kliknij dwukrotnie formularza, aby wyzwolić kliknięcia przycisku zdarzeń.  
  
 [!code-cpp[System.Windows.Forms.SendKeys#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.SendKeys/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.SendKeys#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.SendKeys/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.SendKeys#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.SendKeys/VB/form1.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName="Flush">
      <MemberSignature Language="C#" Value="public static void Flush ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Flush() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.SendKeys.Flush" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Flush ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Flush();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Przetwarza wszystkie komunikaty systemu Windows w kolejce wiadomości.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Windows.Forms.SendKeys.Flush%2A> oczekiwania dla aplikacji, aby przetworzyć naciśnięć klawiszy i inne komunikaty systemu operacyjnego, które znajdują się w kolejce wiadomości. Jest to odpowiednik wywołania <xref:System.Windows.Forms.Application.DoEvents%2A?displayProperty=nameWithType> dopóki istnieją więcej kluczy do przetworzenia.  
  
> [!NOTE]
>  Ponieważ nie istnieje metoda zarządzanych do aktywowania innej aplikacji, możesz użyć tej klasy w bieżącej aplikacji lub używanie metod natywnych systemu Windows, takiej jak `FindWindow` i `SetForegroundWindow`, aby wymusić fokus na inne aplikacje.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Send">
      <MemberSignature Language="C#" Value="public static void Send (string keys);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void Send(string keys) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.SendKeys.Send(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub Send (keys As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void Send(System::String ^ keys);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="keys">Ciąg naciśnięcia klawiszy do wysłania.</param>
        <summary>Wysyła naciśnięcia klawiszy do aktywnej aplikacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Każdy klucz jest reprezentowana przez co najmniej jeden znak. Aby określić znak pojedynczego klawiatury, użyj sam znak. Na przykład aby przedstawić litera A, przekazać w ciągu "A" do metody. Aby przedstawić więcej niż jednego znaku, Dołącz każdy dodatkowego znak do poprzedzającym go. Do reprezentowania litery A, B i C, ustaw wartość parametru "ABC".  
  
 Znak plus (+), daszek (^), znaku procentu (%), tyldy (~) i nawiasów () mają specjalne znaczenie do <xref:System.Windows.Forms.SendKeys>. Aby określić jedną z tych znaków, należy ująć ją w nawiasach klamrowych ({}). Na przykład aby określić znak plus, użyj "{+}". Aby określić znaki nawias klamrowy, użyj "{{}" i "{}}". Nawiasy kwadratowe mają nie specjalne znaczenie <xref:System.Windows.Forms.SendKeys>, ale należy umieścić je w nawiasach klamrowych. W innych aplikacjach nawiasy mają specjalne znaczenie, które mogą być istotne, jeśli występuje dynamiczną wymianę danych (DDE).  
  
> [!CAUTION]
>  Jeśli aplikacja jest przeznaczona do użycia międzynarodowych z różnymi klawiatury, użycie <xref:System.Windows.Forms.SendKeys.Send%2A> może spowodować nieprzewidywalne skutki i należy unikać.  
  
 Aby określić znaki, które nie są wyświetlane po naciśnięciu klawisza, takich jak ENTER lub TAB i kluczy, które reprezentują akcje zamiast znaków, należy użyć kody w poniższej tabeli.  
  
|Key|Kod|  
|---------|----------|  
|BACKSPACE|{Polecenie BACKSPACE}, {BS} lub {BKSP}|  
|PODZIEL|{BREAK}|  
|CAPS LOCK|{CAPSLOCK}|  
|DEL lub DELETE|{USUNĄĆ} lub {DEL}|  
|STRZAŁKA W DÓŁ|{DOWN}|  
|END|{ZAKOŃCZENIA}|  
|ENTER|{Wprowadź} lub ~|  
|ESC|{ESC}|  
|HELP|{HELP}|  
|STRONA GŁÓWNA|{HOME}|  
|Dodatki lub Wstaw|{WSTAWIĆ} lub {INS}|  
|STRZAŁKA W LEWO|{LEFT}|  
|NUM LOCK|{NUMLOCK}|  
|PAGE DOWN|{PGDN}|  
|STRONA W GÓRĘ|{PGUP}|  
|DRUKOWANIE EKRANU|{MIEĆ ETYKIETĘ PRTSC} (zastrzeżone do użytku w przyszłości)|  
|STRZAŁKA W PRAWO|{PRAWO}|  
|BLOKADY PRZEWIJANIA|{SCROLLLOCK}|  
|TAB|{TAB}|  
|STRZAŁKA W GÓRĘ|{UP}|  
|F1|{F1}|  
|F2|{F2}|  
|F3|{F3}|  
|F4|{F4}|  
|F5|{F5}|  
|F6|{F6}|  
|F7|{F7}|  
|F8|{F8}|  
|F9|{F9}|  
|F10|{F10}|  
|F11|{F11}|  
|F12|{F12}|  
|F13|{F13}|  
|F14|{F14}|  
|F15|{F15}|  
|F16|{F16}|  
|Dodaj klawiatury numerycznej|{ADD}|  
|Odejmowanie klawiatury numerycznej|{SUBTRACT}|  
|Mnożenie klawiatury numerycznej|{MULTIPLY}|  
|Dzielenie klawiatury numerycznej|{DZIELENIA}|  
  
 Aby określić klucze w połączeniu z dowolną kombinację SHIFT, CTRL i ALT — klawisze, należy poprzedzić kod klucza z co najmniej jeden z następujących kodów.  
  
|Key|Kod|  
|---------|----------|  
|SHIFT|+|  
|CTRL|^|  
|ALT|%|  
  
 Aby określić, że dowolną kombinację SHIFT, CTRL i ALT powinien być przechowywany w dół naciśniętym innych kluczy, należy umieścić kod dla tych kluczy w nawiasach. Na przykład, aby określić, aby przytrzymaj naciśnięty klawisz E i C naciśnięty klawisz SHIFT, użyj "+ (WE)". Aby określić, przytrzymując klawisz SHIFT jest wciśnięty E C bez zmiany, a następnie użyj "+ WE".  
  
 Aby określić identycznych klucze, formularz {klucza number}. Możesz umieścić odstęp między klucza i numeru. Na przykład {lewej 42} oznacza, naciśnij klawisz Strzałka w lewo razy 42; {h 10} oznacza naciśnij H 10 razy.  
  
> [!NOTE]
>  Ponieważ nie istnieje metoda zarządzanych do aktywowania innej aplikacji, możesz użyć tej klasy w bieżącej aplikacji lub używanie metod natywnych systemu Windows, takiej jak `FindWindow` i `SetForegroundWindow`, aby wymusić fokus na inne aplikacje.  
  
> [!NOTE]
>  <xref:System.Windows.Forms.SendKeys> Klasa została zaktualizowana dla środowiska .NET Framework 3.0 umożliwić jej użycie w aplikacji działających w systemie Windows Vista. Zwiększone zabezpieczenia systemu Windows Vista (nazywanych Kontrola konta użytkownika lub UAC) zapobiega poprzedniej implementacji działać zgodnie z oczekiwaniami.  
>   
>  <xref:System.Windows.Forms.SendKeys> Klasy są podatne na problemy dotyczące synchronizacji, które miały niektórzy deweloperzy obejścia. Zaktualizowane wdrożenia są nadal podatne na problemy dotyczące synchronizacji, ale jest nieco większą i mogą wymagać zmian do rozwiązania. <xref:System.Windows.Forms.SendKeys> Klasa próbuje użyć poprzedniej implementacji najpierw, a w przypadku niepowodzenia korzysta z nowej implementacji. W związku z tym <xref:System.Windows.Forms.SendKeys> klasy może zachowywać się inaczej w różnych systemach operacyjnych. Ponadto, jeśli <xref:System.Windows.Forms.SendKeys> klasa korzysta z nowej implementacji <xref:System.Windows.Forms.SendKeys.SendWait%2A> — metoda nie będzie oczekiwał na komunikaty do przetwarzania, gdy są one wysyłane do innego procesu.  
>   
>  Jeśli aplikacja opiera się na spójne zachowanie niezależnie od systemu operacyjnego, można wymusić <xref:System.Windows.Forms.SendKeys> klasę, aby korzystać z nowej implementacji, dodając następujące ustawienie aplikacji w pliku app.config.  
>   
>  `<appSettings>`  
>   
>  `<add key="SendKeys" value="SendInput"/>`  
>   
>  `</appSettings>`  
>   
>  Aby wymusić <xref:System.Windows.Forms.SendKeys> klasy do poprzedniej implementacji, należy użyć wartości `"JournalHook"` zamiast tego.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób użycia <xref:System.Windows.Forms.SendKeys.Send%2A> metody. Aby uruchomić przykład, wklej następujący kod w postaci o nazwie Form1 zawierające przycisk o nazwie Button1. Upewnij się, że zdarzenia kliknij skojarzonych z ich metod obsługi zdarzeń, w tym przykładzie. Kontrolka przycisku <xref:System.Windows.Forms.Control.TabIndex%2A> właściwość powinna być równa 0. Kiedy przykładzie jest uruchomiona, kliknij dwukrotnie formularza, aby wyzwolić kliknięcia przycisku zdarzeń.  
  
 [!code-cpp[System.Windows.Forms.SendKeys#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.SendKeys/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.SendKeys#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.SendKeys/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.SendKeys#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.SendKeys/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">Wyślij naciśnięcia klawiszy do aktywnej aplikacji nie istnieje.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="keys" /> reprezentuje prawidłową naciśnięcia klawiszy</exception>
        <permission cref="T:System.Security.Permissions.SecurityPermission">dla niezarządzanego kodu wywołać tę metodę. Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="SendWait">
      <MemberSignature Language="C#" Value="public static void SendWait (string keys);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig void SendWait(string keys) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.SendKeys.SendWait(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Shared Sub SendWait (keys As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static void SendWait(System::String ^ keys);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="keys" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="keys">Ciąg naciśnięcia klawiszy do wysłania.</param>
        <summary>Wysyła podany klucze do aktywnej aplikacji, a następnie czeka na komunikaty do przetwarzania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Użyj <xref:System.Windows.Forms.SendKeys.SendWait%2A> wysyłać naciśnięcia klawiszy lub kombinacji klawiszy aktywnej aplikacji i poczekaj, aż komunikatów naciśnięcia klawiszy do przetworzenia. Ta metoda służy do wysyłania naciśnięcia klawiszy do aplikacji i poczekaj, aż wszystkie procesy, które są uruchamiane przez naciśnięcia klawiszy do wypełnienia. Może to być istotne, jeśli inna aplikacja musi zakończyć się przed kontynuowaniem aplikacji.  
  
> [!NOTE]
>  Ponieważ nie istnieje metoda zarządzanych do aktywowania innej aplikacji, możesz użyć tej klasy w bieżącej aplikacji lub używanie metod natywnych systemu Windows, takiej jak `FindWindow` i `SetForegroundWindow`, aby wymusić fokus na inne aplikacje.  
  
> [!NOTE]
>  <xref:System.Windows.Forms.SendKeys> Klasa została zaktualizowana dla środowiska .NET Framework 3.0 umożliwić jej użycie w aplikacji działających w systemie Windows Vista. Zwiększone zabezpieczenia systemu Windows Vista (nazywanych Kontrola konta użytkownika lub UAC) zapobiega poprzedniej implementacji działać zgodnie z oczekiwaniami.  
>   
>  <xref:System.Windows.Forms.SendKeys> Klasy są podatne na problemy dotyczące synchronizacji, które miały niektórzy deweloperzy obejścia. Zaktualizowane wdrożenia są nadal podatne na problemy dotyczące synchronizacji, ale jest nieco większą i mogą wymagać zmian do rozwiązania. <xref:System.Windows.Forms.SendKeys> Klasa próbuje użyć poprzedniej implementacji najpierw, a w przypadku niepowodzenia korzysta z nowej implementacji. W związku z tym <xref:System.Windows.Forms.SendKeys> klasy może zachowywać się inaczej w różnych systemach operacyjnych. Ponadto, jeśli <xref:System.Windows.Forms.SendKeys> klasa korzysta z nowej implementacji <xref:System.Windows.Forms.SendKeys.SendWait%2A> — metoda nie będzie oczekiwał na komunikaty do przetwarzania, gdy są one wysyłane do innego procesu.  
>   
>  Jeśli aplikacja opiera się na spójne zachowanie niezależnie od systemu operacyjnego, można wymusić <xref:System.Windows.Forms.SendKeys> klasę, aby korzystać z nowej implementacji, dodając następujące ustawienie aplikacji w pliku app.config.  
>   
>  `<appSettings>`  
>   
>  `<add key="SendKeys" value="SendInput"/>`  
>   
>  `</appSettings>`  
>   
>  Aby wymusić <xref:System.Windows.Forms.SendKeys> klasy do poprzedniej implementacji, należy użyć wartości `"JournalHook"` zamiast tego.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">dla niezarządzanego kodu wywołać tę metodę. Wyliczenie skojarzone: <see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
  </Members>
</Type>