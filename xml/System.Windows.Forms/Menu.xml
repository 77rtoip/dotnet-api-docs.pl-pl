<Type Name="Menu" FullName="System.Windows.Forms.Menu">
  <Metadata><Meta Name="ms.openlocfilehash" Value="86d35a5c329d41297edbec35b560b70b4b95acf3" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69183519" /></Metadata><TypeSignature Language="C#" Value="public abstract class Menu : System.ComponentModel.Component" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit Menu extends System.ComponentModel.Component" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.Menu" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class Menu&#xA;Inherits Component" />
  <TypeSignature Language="C++ CLI" Value="public ref class Menu abstract : System::ComponentModel::Component" />
  <TypeSignature Language="F#" Value="type Menu = class&#xA;    inherit Component" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.Component</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.ListBindable(false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.ToolboxItemFilter("System.Windows.Forms")</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1">
      <AttributeName>System.ComponentModel.Designer("Microsoft.VisualStudio.Windows.Forms.MenuDesigner, Microsoft.VisualStudio, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Reprezentuje podstawowe funkcje dla wszystkich menu. Mimo że <see cref="T:System.Windows.Forms.ToolStripDropDown" /> <see cref="T:System.Windows.Forms.Menu" /> zastępowanie i Dodawanie funkcji do kontroli poprzednich wersji, <see cref="T:System.Windows.Forms.Menu" /> jest zachowywane w celu zapewnienia zgodności z poprzednimi wersjami i w przyszłości. <see cref="T:System.Windows.Forms.ToolStripDropDownMenu" /></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta klasa jest klasą bazową dla <xref:System.Windows.Forms.MainMenu>klas <xref:System.Windows.Forms.MenuItem>, i <xref:System.Windows.Forms.ContextMenu> . Nie można utworzyć wystąpienia tej klasy. Menu aplikacji składają się z <xref:System.Windows.Forms.MenuItem> obiektów. Mogą one zawierać inne <xref:System.Windows.Forms.MenuItem> obiekty reprezentujące elementy podmenu. Obiekty mogą być przechowywane <xref:System.Windows.Forms.MainMenu> w programie do wyświetlania jako cała struktura menu <xref:System.Windows.Forms.ContextMenu> dla formularza lub, który jest używany do wyświetlania menu skrótów. <xref:System.Windows.Forms.MenuItem> Ta klasa udostępnia funkcje, które są wspólne dla wszystkich klas menu.  
  
 W <xref:System.Windows.Forms.Menu> przeciwieństwie do wielu klas bazowych, Klasa używa klas pochodnych do definiowania wielu jej właściwości. Jeśli używasz menu w aplikacji interfejsu wielu dokumentów (MDI), możesz użyć <xref:System.Windows.Forms.Menu.MdiListItem%2A> właściwości, aby <xref:System.Windows.Forms.MenuItem> określić, która wyświetla listę otwartych formularzy podrzędnych MDI w aplikacji. <xref:System.Windows.Forms.Menu.MenuItems%2A> Właściwość zawiera<xref:System.Windows.Forms.MenuItem> listę obiektów przechowywanych w klasie menu. <xref:System.Windows.Forms.MainMenu> Dla lub <xref:System.Windows.Forms.ContextMenu>, Tawłaściwośćzawierawszystkieobiekty,któresąwyświetlane.<xref:System.Windows.Forms.MenuItem> <xref:System.Windows.Forms.MenuItem> Dla<xref:System.Windows.Forms.Menu.MenuItems%2A> , właściwość reprezentuje elementy podmenu, z którymi są skojarzone.  
  
 Oprócz właściwości, które są dostarczane dla wszystkich klas pochodnych menu, <xref:System.Windows.Forms.Menu> Klasa zawiera również metody, takie jak <xref:System.Windows.Forms.Menu.CloneMenu%2A> i <xref:System.Windows.Forms.Menu.MergeMenu%2A>, które umożliwiają tworzenie nowych menu z istniejących menu, a także scalanie dwóch struktur menu. wiązaniu.  
  
 Klasa definiuje również zagnieżdżoną klasę <xref:System.Windows.Forms.Menu.MenuItemCollection>. <xref:System.Windows.Forms.Menu> Ta klasa definiuje kolekcję <xref:System.Windows.Forms.MenuItem> obiektów używanych <xref:System.Windows.Forms.Menu.MenuItems%2A> przez właściwość. Można użyć metod <xref:System.Windows.Forms.Menu.MenuItemCollection> klasy do dodawania i usuwania elementów menu <xref:System.Windows.Forms.MainMenu>z, <xref:System.Windows.Forms.ContextMenu>, lub <xref:System.Windows.Forms.MenuItem>.  
  
   
  
## Examples  
 Poniższy przykład kodu używa klasy <xref:System.Windows.Forms.MenuItem>pochodnej, do tworzenia struktury menu dla formularza. Przykładowy kod dodaje <xref:System.Windows.Forms.MenuItem> do, aby reprezentować element menu najwyższego poziomu, dodaje do niego element podmenu, aby wybrać rozmiar czcionki, a następnie dodaje dwa elementy podmenu do tego elementu menu, które reprezentują duże i małe Opcje czcionki w aplikacji. Przykład wymaga <xref:System.Windows.Forms.MainMenu> , aby obiekt o nazwie `mainMenu1` i cztery <xref:System.Windows.Forms.MenuItem> obiekty o nazwie `menuItem1`, `menuItem2`, `menuItem3`, i `menuItem4`.  
  
 [!code-cpp[Classic Menu Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Menu Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Menu Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Menu Example/CS/source.cs#1)]
 [!code-vb[Classic Menu Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Menu Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.MainMenu" />
    <altmember cref="T:System.Windows.Forms.ContextMenu" />
    <altmember cref="T:System.Windows.Forms.MenuItem" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Menu (System.Windows.Forms.MenuItem[] items);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor(class System.Windows.Forms.MenuItem[] items) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.#ctor(System.Windows.Forms.MenuItem[])" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New (items As MenuItem())" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; Menu(cli::array &lt;System::Windows::Forms::MenuItem ^&gt; ^ items);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.Menu : System.Windows.Forms.MenuItem[] -&gt; System.Windows.Forms.Menu" Usage="new System.Windows.Forms.Menu items" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="items" Type="System.Windows.Forms.MenuItem[]" />
      </Parameters>
      <Docs>
        <param name="items">Tablica typu <see cref="T:System.Windows.Forms.MenuItem" /> zawierającego obiekty, które mają zostać dodane do menu.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Forms.Menu" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ponieważ <xref:System.Windows.Forms.Menu> jest klasą abstrakcyjną, tylko dziedziczone klasy mogą wywołać Konstruktor menu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CloneMenu">
      <MemberSignature Language="C#" Value="protected internal void CloneMenu (System.Windows.Forms.Menu menuSrc);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig instance void CloneMenu(class System.Windows.Forms.Menu menuSrc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.CloneMenu(System.Windows.Forms.Menu)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Sub CloneMenu (menuSrc As Menu)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; void CloneMenu(System::Windows::Forms::Menu ^ menuSrc);" />
      <MemberSignature Language="F#" Value="member this.CloneMenu : System.Windows.Forms.Menu -&gt; unit" Usage="menu.CloneMenu menuSrc" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="menuSrc" Type="System.Windows.Forms.Menu" />
      </Parameters>
      <Docs>
        <param name="menuSrc"><see cref="T:System.Windows.Forms.Menu" /> Do kopiowania.</param>
        <summary>Kopiuje wartość <see cref="T:System.Windows.Forms.Menu" /> , która jest przenoszona jako parametr do bieżącego <see cref="T:System.Windows.Forms.Menu" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda kopiuje całą listę <xref:System.Windows.Forms.MenuItem> obiektów (przechowywana <xref:System.Windows.Forms.Menu> w przekazaniu do `menuSrc`) do bieżącego menu. Tej metody można użyć w klasie pochodnej do klonowania <xref:System.Windows.Forms.MenuItem> obiektów. Mogą następnie być ponownie używane przez inne klasy, które pochodzą z <xref:System.Windows.Forms.Menu>, takich jak <xref:System.Windows.Forms.MainMenu>, <xref:System.Windows.Forms.ContextMenu>, i <xref:System.Windows.Forms.MenuItem>.  
  
   
  
## Examples  
 Ten przykład tworzy `mainMenu1`menu główne, z trzema elementami menu: `File`, `Edit`, i `View`. Następnie używa <xref:System.Windows.Forms.Menu.CloneMenu%2A> metody do kopiowania `mainMenu1` do `mainMenu2`. Sklonowane menu jest następnie przypisywane do formularza i wyświetlane. Ten program wymaga już utworzenia <xref:System.Windows.Forms.Form> nazwy. `Form1`  
  
 [!code-cpp[CloneMenu#1](~/samples/snippets/cpp/VS_Snippets_Winforms/CloneMenu/CPP/form1.cpp#1)]
 [!code-csharp[CloneMenu#1](~/samples/snippets/csharp/VS_Snippets_Winforms/CloneMenu/CS/form1.cs#1)]
 [!code-vb[CloneMenu#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/CloneMenu/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.MenuItem" />
        <altmember cref="T:System.Windows.Forms.MainMenu" />
      </Docs>
    </Member>
    <Member MemberName="CreateMenuHandle">
      <MemberSignature Language="C#" Value="protected virtual IntPtr CreateMenuHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance native int CreateMenuHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.CreateMenuHandle" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Function CreateMenuHandle () As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual IntPtr CreateMenuHandle();" />
      <MemberSignature Language="F#" Value="abstract member CreateMenuHandle : unit -&gt; nativeint&#xA;override this.CreateMenuHandle : unit -&gt; nativeint" Usage="menu.CreateMenuHandle " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Tworzy nowe dojście do <see cref="T:System.Windows.Forms.Menu" />.</summary>
        <returns>Dojście do menu, jeśli metoda się powiedzie; w przeciwnym razie. <see langword="null" /></returns>
        <remarks>To be added.</remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">do obsługi kodu niezarządzanego. Skojarzone Wyliczenie:<see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="menu.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing"><see langword="true" />Aby zwolnić zasoby zarządzane i niezarządzane; <see langword="false" /> do zwolnienia tylko zasobów niezarządzanych.</param>
        <summary>Usuwa zasoby, inne niż pamięć, używane przez <see cref="T:System.Windows.Forms.Menu" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wywołaj <xref:System.Windows.Forms.Menu.Dispose%2A> po zakończeniu korzystania z <xref:System.Windows.Forms.Menu>. <xref:System.Windows.Forms.Menu.Dispose%2A> Metoda<xref:System.Windows.Forms.Menu> pozostawia w stanie niezdatnym do użytku. Po wywołaniu <xref:System.Windows.Forms.Menu.Dispose%2A>należy wydać wszystkie odwołania <xref:System.Windows.Forms.Menu> do, aby pamięć, która zajmowała się, mogła być odzyskiwana przez wyrzucanie elementów bezużytecznych.  
  
> [!NOTE]
>  Zawsze wywołuj <xref:System.Windows.Forms.Menu.Dispose%2A> przed wydaniem ostatniego odwołania <xref:System.Windows.Forms.Menu>do. W przeciwnym razie zasoby, <xref:System.Windows.Forms.Menu> które są używane, nie zostaną zwolnione do momentu <xref:System.Windows.Forms.Menu> wywołania destruktora obiektu przez wyrzucanie elementów bezużytecznych.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindHandle">
      <MemberSignature Language="C#" Value="public const int FindHandle = 0;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 FindHandle = (0)" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.Menu.FindHandle" />
      <MemberSignature Language="VB.NET" Value="Public Const FindHandle As Integer  = 0" />
      <MemberSignature Language="C++ CLI" Value="public: int FindHandle = 0;" />
      <MemberSignature Language="F#" Value="val mutable FindHandle : int" Usage="System.Windows.Forms.Menu.FindHandle" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>0</MemberValue>
      <Docs>
        <summary>Określa, że <see cref="M:System.Windows.Forms.Menu.FindMenuItem(System.Int32,System.IntPtr)" /> Metoda powinna wyszukiwać uchwyt.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FindMenuItem">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.MenuItem FindMenuItem (int type, IntPtr value);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.MenuItem FindMenuItem(int32 type, native int value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.FindMenuItem(System.Int32,System.IntPtr)" />
      <MemberSignature Language="VB.NET" Value="Public Function FindMenuItem (type As Integer, value As IntPtr) As MenuItem" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::MenuItem ^ FindMenuItem(int type, IntPtr value);" />
      <MemberSignature Language="F#" Value="member this.FindMenuItem : int * nativeint -&gt; System.Windows.Forms.MenuItem" Usage="menu.FindMenuItem (type, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MenuItem</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="type" Type="System.Int32" />
        <Parameter Name="value" Type="System.IntPtr" />
      </Parameters>
      <Docs>
        <param name="type">Typ elementu, który ma być używany do znajdowania <see cref="T:System.Windows.Forms.MenuItem" />.</param>
        <param name="value">Element, który ma zostać użyty do <see cref="T:System.Windows.Forms.MenuItem" />odnalezienia.</param>
        <summary><see cref="T:System.Windows.Forms.MenuItem" /> Pobiera, który zawiera określoną wartość.</summary>
        <returns>Pasuje <see cref="T:System.Windows.Forms.MenuItem" /> do wartości; <see langword="null" />w przeciwnym razie.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby wyszukać <xref:System.Windows.Forms.MenuItem> użycie uchwytu, Przekaż <xref:System.Windows.Forms.Menu.FindHandle> pole jako typ <xref:System.Windows.Forms.MenuItem> i dojście, które chcesz znaleźć jako wartość.  
  
 Aby wyszukać <xref:System.Windows.Forms.MenuItem> przy użyciu skrótu, Przekaż <xref:System.Windows.Forms.Menu.FindShortcut> pole jako typ i wartość skrótu dla elementu <xref:System.Windows.Forms.MenuItem> , który chcesz znaleźć jako wartość.  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.UIPermission">dla formantów do wywołania tej metody. Skojarzone Wyliczenie:<see cref="F:System.Security.Permissions.UIPermissionWindow.AllWindows" /></permission>
      </Docs>
    </Member>
    <Member MemberName="FindMergePosition">
      <MemberSignature Language="C#" Value="protected int FindMergePosition (int mergeOrder);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance int32 FindMergePosition(int32 mergeOrder) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.FindMergePosition(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Protected Function FindMergePosition (mergeOrder As Integer) As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; int FindMergePosition(int mergeOrder);" />
      <MemberSignature Language="F#" Value="member this.FindMergePosition : int -&gt; int" Usage="menu.FindMergePosition mergeOrder" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="mergeOrder" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="mergeOrder">Pozycja zamówienia scalania dla elementu menu, który ma zostać scalony.</param>
        <summary>Zwraca pozycję, w której element menu ma zostać wstawiony do menu.</summary>
        <returns>Pozycja, w której element menu ma zostać wstawiony do menu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Kolejność scalania elementu menu określa względne położenie tego elementu menu, jeśli struktura menu, w której <xref:System.Windows.Forms.MenuItem> znajduje się, jest scalana z inną.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="FindShortcut">
      <MemberSignature Language="C#" Value="public const int FindShortcut = 1;" />
      <MemberSignature Language="ILAsm" Value=".field public static literal int32 FindShortcut = (1)" />
      <MemberSignature Language="DocId" Value="F:System.Windows.Forms.Menu.FindShortcut" />
      <MemberSignature Language="VB.NET" Value="Public Const FindShortcut As Integer  = 1" />
      <MemberSignature Language="C++ CLI" Value="public: int FindShortcut = 1;" />
      <MemberSignature Language="F#" Value="val mutable FindShortcut : int" Usage="System.Windows.Forms.Menu.FindShortcut" />
      <MemberType>Field</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <MemberValue>1</MemberValue>
      <Docs>
        <summary>Określa, że <see cref="M:System.Windows.Forms.Menu.FindMenuItem(System.Int32,System.IntPtr)" /> Metoda powinna wyszukiwać skrót.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="GetContextMenu">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.ContextMenu GetContextMenu ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.ContextMenu GetContextMenu() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.GetContextMenu" />
      <MemberSignature Language="VB.NET" Value="Public Function GetContextMenu () As ContextMenu" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::ContextMenu ^ GetContextMenu();" />
      <MemberSignature Language="F#" Value="member this.GetContextMenu : unit -&gt; System.Windows.Forms.ContextMenu" Usage="menu.GetContextMenu " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.ContextMenu</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Windows.Forms.ContextMenu" /> Pobiera, który zawiera to menu.</summary>
        <returns><see cref="T:System.Windows.Forms.ContextMenu" /> Zawiera to menu. Wartość domyślna to <see langword="null" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda umożliwia uzyskanie odwołania do <xref:System.Windows.Forms.ContextMenu> elementu, w którym znajduje się to menu. Ta właściwość zwraca `null` , jeśli menu nie jest zawarte <xref:System.Windows.Forms.ContextMenu>w. Taka sytuacja może wystąpić, jeśli menu jest zawarte w <xref:System.Windows.Forms.MenuItem> lub <xref:System.Windows.Forms.MainMenu>, lub jeśli menu nie jest zawarte w żadnym menu. Za pomocą tej właściwości można określić, czy menu jest aktualnie używane, a także określić, gdzie.  
  
   
  
## Examples  
 W tym przykładzie Użyj <xref:System.Windows.Forms.Menu.GetContextMenu%2A> metody, aby uzyskać odwołanie do menu `menuItem1` skrótów zawierającego lub `menuItem2`i wyświetlić informacje o menu skrótów w oknie komunikatu. Można programowo utworzyć menu skrótów z dwoma elementami `New` i. `Open` Następnie można dodać funkcje do tych elementów, tworząc odpowiednie programy obsługi zdarzeń. Po uruchomieniu przykładu pojawia się okno komunikatu z informacją, że kliknij prawym przyciskiem myszy formularz, aby wyświetlić menu skrótów. Następnie po kliknięciu elementu menu otrzymujesz kolejny komunikat informujący o tym, który element został kliknięty, i wyświetla informacje z menu skrótów zawierającego. Ten przykład wymaga już utworzenia <xref:System.Windows.Forms.Form> nazwy. `Form1`  
  
 [!code-cpp[GetContextMenu2#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetContextMenu2/CPP/form1.cpp#1)]
 [!code-csharp[GetContextMenu2#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetContextMenu2/CS/form1.cs#1)]
 [!code-vb[GetContextMenu2#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetContextMenu2/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Menu.GetMainMenu" />
      </Docs>
    </Member>
    <Member MemberName="GetMainMenu">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.MainMenu GetMainMenu ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.MainMenu GetMainMenu() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.GetMainMenu" />
      <MemberSignature Language="VB.NET" Value="Public Function GetMainMenu () As MainMenu" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::MainMenu ^ GetMainMenu();" />
      <MemberSignature Language="F#" Value="member this.GetMainMenu : unit -&gt; System.Windows.Forms.MainMenu" Usage="menu.GetMainMenu " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MainMenu</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary><see cref="T:System.Windows.Forms.MainMenu" /> Pobiera, który zawiera to menu.</summary>
        <returns><see cref="T:System.Windows.Forms.MainMenu" /> Zawiera to menu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda pozwala uzyskać odwołanie do <xref:System.Windows.Forms.MainMenu> tego menu znajduje się obecnie w temacie. Ta właściwość zwraca `null` , jeśli menu nie jest zawarte <xref:System.Windows.Forms.MainMenu>w. Taka sytuacja może wystąpić, jeśli menu jest zawarte w <xref:System.Windows.Forms.MenuItem> lub <xref:System.Windows.Forms.ContextMenu>, lub jeśli menu nie jest zawarte w żadnym menu. Za pomocą tej właściwości można określić, czy menu jest aktualnie używane, a także określić, gdzie.  
  
   
  
## Examples  
 Ten przykład deklaruje <xref:System.Windows.Forms.MainMenu> `mainMenu1`elementy `menuItem4` `menuItem1` menu,`menuItem2`, i cztery,, ,,i.`menuItem3` Do wyświetlania nie są dodawane `mainMenu1` tylko trzy pierwsze elementy menu. Program sprawdza, czy `menuItem3` jest używany, co oznacza `true`, i określa formularz, w którym jest używany. Tekst etykiety służy do wyświetlania nazwy formularza, który obsługuje <xref:System.Windows.Forms.MainMenu>. Jeśli zmienisz element menu, który jest testowany `menuItem4`do, warunek zostanie spełniony `false` , ponieważ `menuItem4` nigdy nie był używany. Ten przykład wymaga <xref:System.Windows.Forms.Form> utworzenia nazwy `MyForm` , która zawiera <xref:System.Windows.Forms.Label> nazwę `label1`.  
  
 [!code-cpp[GetMainMenu#1](~/samples/snippets/cpp/VS_Snippets_Winforms/GetMainMenu/CPP/form1.cpp#1)]
 [!code-csharp[GetMainMenu#1](~/samples/snippets/csharp/VS_Snippets_Winforms/GetMainMenu/CS/form1.cs#1)]
 [!code-vb[GetMainMenu#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/GetMainMenu/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.Menu.GetContextMenu" />
      </Docs>
    </Member>
    <Member MemberName="Handle">
      <MemberSignature Language="C#" Value="public IntPtr Handle { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance native int Handle" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Menu.Handle" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Handle As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property IntPtr Handle { IntPtr get(); };" />
      <MemberSignature Language="F#" Value="member this.Handle : nativeint" Usage="System.Windows.Forms.Menu.Handle" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość reprezentującą uchwyt okna dla menu.</summary>
        <value>Wartość HMENU w menu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość umożliwia uzyskanie uchwytu do menu w celu wykonania specjalnych operacji do menu poza funkcjami udostępnianymi przez tę klasę lub klasy pochodne.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsParent">
      <MemberSignature Language="C#" Value="public virtual bool IsParent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsParent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Menu.IsParent" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property IsParent As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsParent { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsParent : bool" Usage="System.Windows.Forms.Menu.IsParent" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy menu zawiera wszystkie elementy menu. Ta właściwość jest tylko do odczytu.</summary>
        <value><see langword="true" />Jeśli to menu zawiera <see cref="T:System.Windows.Forms.MenuItem" /> obiekty; <see langword="false" />w przeciwnym razie. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Za pomocą tej metody można określić, czy do <xref:System.Windows.Forms.MenuItem> tego menu mają być przypisane wszystkie obiekty. Jest to równoznaczne z sprawdzeniem `null` <xref:System.Windows.Forms.Menu.MenuItems%2A> właściwości.  
  
   
  
## Examples  
 Poniższy przykład kodu tworzy <xref:System.Windows.Forms.MainMenu> z dwoma <xref:System.Windows.Forms.MenuItem> obiektami. Następnie używa właściwości, <xref:System.Windows.Forms.Menu.IsParent%2A> aby określić, czy `mainMenu1` zawiera elementy menu. Jeśli warunek ma `true`wartość, <xref:System.Windows.Forms.MainMenu.RightToLeft%2A> ustawia właściwość na `true` <xref:System.Windows.Forms.Form>i wiąże menu główne z. Ten przykład wymaga, aby utworzono obiekt <xref:System.Windows.Forms.Form> o nazwie. `Form1`  
  
 [!code-cpp[IsParent#1](~/samples/snippets/cpp/VS_Snippets_Winforms/IsParent/CPP/form1.cpp#1)]
 [!code-csharp[IsParent#1](~/samples/snippets/csharp/VS_Snippets_Winforms/IsParent/CS/form1.cs#1)]
 [!code-vb[IsParent#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/IsParent/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <permission cref="T:System.Security.Permissions.SecurityPermission">do obsługi kodu niezarządzanego. Skojarzone Wyliczenie:<see cref="F:System.Security.Permissions.SecurityPermissionFlag.UnmanagedCode" /></permission>
        <altmember cref="P:System.Windows.Forms.Menu.MenuItems" />
      </Docs>
    </Member>
    <Member MemberName="MdiListItem">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.MenuItem MdiListItem { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.MenuItem MdiListItem" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Menu.MdiListItem" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MdiListItem As MenuItem" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::MenuItem ^ MdiListItem { System::Windows::Forms::MenuItem ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MdiListItem : System.Windows.Forms.MenuItem" Usage="System.Windows.Forms.Menu.MdiListItem" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MenuItem</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą <see cref="T:System.Windows.Forms.MenuItem" /> , że służy do wyświetlania listy formularzy podrzędnych z wieloma dokumentami (MDI).</summary>
        <value><see cref="T:System.Windows.Forms.MenuItem" /> Reprezentuje element menu zawierający listę formularzy podrzędnych MDI, które są otwarte w aplikacji.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Za pomocą tej właściwości można określić, czy <xref:System.Windows.Forms.MenuItem> został określony, aby wyświetlić listę otwartych okien podrzędnych w aplikacji MDI. Aby użyć określonej <xref:System.Windows.Forms.MenuItem> jako listy MDI, należy <xref:System.Windows.Forms.MenuItem.MdiList%2A> ustawić właściwość <xref:System.Windows.Forms.MenuItem> do użycia.  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.MenuItem" />
        <altmember cref="P:System.Windows.Forms.MenuItem.MdiList" />
      </Docs>
    </Member>
    <Member MemberName="MenuItems">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Menu.MenuItemCollection MenuItems { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Menu/MenuItemCollection MenuItems" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Menu.MenuItems" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property MenuItems As Menu.MenuItemCollection" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Menu::MenuItemCollection ^ MenuItems { System::Windows::Forms::Menu::MenuItemCollection ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.MenuItems : System.Windows.Forms.Menu.MenuItemCollection" Usage="System.Windows.Forms.Menu.MenuItems" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.MergableProperty(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Content)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Menu+MenuItemCollection</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą kolekcję <see cref="T:System.Windows.Forms.MenuItem" /> obiektów skojarzonych z menu.</summary>
        <value><see cref="T:System.Windows.Forms.Menu.MenuItemCollection" /> Reprezentuje<see cref="T:System.Windows.Forms.MenuItem" /> listę obiektów przechowywanych w menu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Za pomocą tej właściwości można uzyskać odwołanie do listy elementów menu, które są obecnie przechowywane w menu. W <xref:System.Windows.Forms.MainMenu> przypadku <xref:System.Windows.Forms.ContextMenu> obiektów<xref:System.Windows.Forms.Menu.MenuItems%2A> i Właściwość zawiera całą strukturę menu w kontrolce. <xref:System.Windows.Forms.MenuItem> Dla klasy <xref:System.Windows.Forms.Menu.MenuItems%2A> Właściwość zawiera listę elementów <xref:System.Windows.Forms.MenuItem>podmenu skojarzonych z. Z odwołaniem do kolekcji elementów menu menu (udostępniane przez tę właściwość) można dodawać i usuwać elementy menu, określać całkowitą liczbę elementów menu i czyścić listę elementów menu z kolekcji. Aby uzyskać więcej informacji na temat obsługi kolekcji elementów menu dla menu, zapoznaj <xref:System.Windows.Forms.Menu.MenuItemCollection?displayProperty=nameWithType> się z dokumentacją.  
  
   
  
## Examples  
 Poniższy przykład kodu tworzy wystąpienie klasy <xref:System.Windows.Forms.MainMenu>pochodnej i <xref:System.Windows.Forms.MenuItem> dodaje <xref:System.Windows.Forms.MenuItem> obiekt do kolekcji obiektów. Ten przykład wymaga, aby metoda zdefiniowana w tym przykładzie znajdowała się w klasie dla formularza i wywołana przez metodę w tej klasie Form.  
  
 [!code-cpp[Classic Menu.MenuItems Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Menu.MenuItems Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Menu.MenuItems Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Menu.MenuItems Example/CS/source.cs#1)]
 [!code-vb[Classic Menu.MenuItems Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Menu.MenuItems Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.MainMenu" />
        <altmember cref="T:System.Windows.Forms.ContextMenu" />
        <altmember cref="T:System.Windows.Forms.MenuItem" />
        <altmember cref="T:System.Windows.Forms.Menu.MenuItemCollection" />
      </Docs>
    </Member>
    <Member MemberName="MergeMenu">
      <MemberSignature Language="C#" Value="public virtual void MergeMenu (System.Windows.Forms.Menu menuSrc);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void MergeMenu(class System.Windows.Forms.Menu menuSrc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.MergeMenu(System.Windows.Forms.Menu)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub MergeMenu (menuSrc As Menu)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void MergeMenu(System::Windows::Forms::Menu ^ menuSrc);" />
      <MemberSignature Language="F#" Value="abstract member MergeMenu : System.Windows.Forms.Menu -&gt; unit&#xA;override this.MergeMenu : System.Windows.Forms.Menu -&gt; unit" Usage="menu.MergeMenu menuSrc" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="menuSrc" Type="System.Windows.Forms.Menu" />
      </Parameters>
      <Docs>
        <param name="menuSrc">Elementy menu, które są scalone z elementami menu bieżącego menu. <see cref="T:System.Windows.Forms.Menu" /></param>
        <summary><see cref="T:System.Windows.Forms.MenuItem" /> Scala obiekty jednego menu z bieżącym menu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda scala <xref:System.Windows.Forms.MenuItem> obiekty z jednego menu przy użyciu bieżącego menu. <xref:System.Windows.Forms.MenuItem>obiekty są scalane zgodnie z wartościami <xref:System.Windows.Forms.MenuItem.MergeType%2A?displayProperty=nameWithType> właściwości i. <xref:System.Windows.Forms.MenuItem.MergeOrder%2A?displayProperty=nameWithType>  
  
 Scalanie menu jest zazwyczaj wykonywane w celu scalania menu formularza nadrzędnego z wieloma dokumentami (MDI) z tymi, w których aktywny formularz podrzędny MDI. Jest to wykonywane automatycznie przez środowisko uruchomieniowe języka wspólnego .NET Framework. Na przykład, jeśli formularz nadrzędny MDI zawiera zestaw menu do obsługi plików, a formularz podrzędny MDI również zawiera elementy menu powiązane z plikiem, zestawy menu zostaną automatycznie scalone w jednym pliku menu, gdy formularz podrzędny zostanie wyświetlony w formularzu nadrzędnym MDI.  
  
 Metody można użyć w <xref:System.Windows.Forms.Menu.MergeMenu%2A> przypadku scalania dwóch struktur menu, które nie są częścią aplikacji MDI. Ta implementacja może być wywoływana przez klasy <xref:System.Windows.Forms.MainMenu> lub <xref:System.Windows.Forms.ContextMenu> , aby scalić dwa lub więcej obiektów pochodzących od <xref:System.Windows.Forms.Menu>.  
  
 Aby scalić dwa <xref:System.Windows.Forms.MenuItem> obiekty, <xref:System.Windows.Forms.MenuItem.MergeMenu%2A?displayProperty=nameWithType> Użyj metody.  
  
   
  
## Examples  
 Ten przykład tworzy dwa menu `mainMenu1` i. `mainMenu2` <xref:System.Windows.Forms.MenuItem>Pierwsze menu zawiera jeden `File`,, a drugi zawiera jeden <xref:System.Windows.Forms.MenuItem>, `Edit`. <xref:System.Windows.Forms.Menu.MergeMenu%2A> Użycie `mainMenu1`metody jest`mainMenu2` scalane z. Po wyświetleniu `mainMenu1` program będzie zawierać dwa `File` elementy menu i `Edit`. Ten przykład wymaga utworzenia <xref:System.Windows.Forms.Form> nazwy. `Form1`  
  
 [!code-cpp[MergeMenu#1](~/samples/snippets/cpp/VS_Snippets_Winforms/MergeMenu/CPP/form1.cpp#1)]
 [!code-csharp[MergeMenu#1](~/samples/snippets/csharp/VS_Snippets_Winforms/MergeMenu/CS/form1.cs#1)]
 [!code-vb[MergeMenu#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/MergeMenu/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Podjęto próbę scalenia menu z samym sobą.</exception>
        <altmember cref="P:System.Windows.Forms.MenuItem.MergeType" />
        <altmember cref="P:System.Windows.Forms.MenuItem.MergeOrder" />
      </Docs>
    </Member>
    <Member MemberName="Name">
      <MemberSignature Language="C#" Value="public string Name { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Name" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Menu.Name" />
      <MemberSignature Language="VB.NET" Value="Public Property Name As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Name { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Name : string with get, set" Usage="System.Windows.Forms.Menu.Name" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.DesignerSerializationVisibility(System.ComponentModel.DesignerSerializationVisibility.Hidden)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia nazwę <see cref="T:System.Windows.Forms.Menu" />.</summary>
        <value>Ciąg reprezentujący nazwę.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 W czasie projektowania ta właściwość jest ustawiana na identyfikator programowy formantu. Jednak ta właściwość nie ma wpływu na kontrolkę w czasie wykonywania.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ProcessCmdKey">
      <MemberSignature Language="C#" Value="protected internal virtual bool ProcessCmdKey (ref System.Windows.Forms.Message msg, System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance bool ProcessCmdKey(valuetype System.Windows.Forms.Message&amp; msg, valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.ProcessCmdKey(System.Windows.Forms.Message@,System.Windows.Forms.Keys)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Function ProcessCmdKey (ByRef msg As Message, keyData As Keys) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual bool ProcessCmdKey(System::Windows::Forms::Message % msg, System::Windows::Forms::Keys keyData);" />
      <MemberSignature Language="F#" Value="abstract member ProcessCmdKey :  * System.Windows.Forms.Keys -&gt; bool&#xA;override this.ProcessCmdKey :  * System.Windows.Forms.Keys -&gt; bool" Usage="menu.ProcessCmdKey (msg, keyData)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="msg" Type="System.Windows.Forms.Message" RefType="ref" />
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="msg">A <see cref="T:System.Windows.Forms.Message" />, zakończone przez odwołanie, które reprezentuje komunikat okna do przetworzenia.</param>
        <param name="keyData">Jedna z <see cref="T:System.Windows.Forms.Keys" /> wartości reprezentujących klucz do przetworzenia.</param>
        <summary>Przetwarza klucz polecenia.</summary>
        <returns><see langword="true" />Jeśli znak został przetworzony przez formant; w przeciwnym razie. <see langword="false" /></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Tag">
      <MemberSignature Language="C#" Value="public object Tag { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object Tag" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.Menu.Tag" />
      <MemberSignature Language="VB.NET" Value="Public Property Tag As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ Tag { System::Object ^ get(); void set(System::Object ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Tag : obj with get, set" Usage="System.Windows.Forms.Menu.Tag" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.Bindable(true)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.DefaultValue(null)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.Localizable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
          <AttributeName>System.ComponentModel.TypeConverter(typeof(System.ComponentModel.StringConverter))</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia dane zdefiniowane przez użytkownika skojarzone z kontrolką.</summary>
        <value>Obiekt reprezentujący dane.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.Menu.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberSignature Language="F#" Value="override this.ToString : unit -&gt; string" Usage="menu.ToString " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca element <see cref="T:System.String" /> <see cref="T:System.Windows.Forms.Menu" /> reprezentujący formant.</summary>
        <returns><see cref="T:System.String" /> Reprezentuje bieżący<see cref="T:System.Windows.Forms.Menu" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metoda zwraca obiekt <xref:System.String> , który zawiera typ i <xref:System.Windows.Forms.Menu.MenuItems%2A> liczbę elementów we właściwości formantu. <xref:System.Windows.Forms.Menu.ToString%2A>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
