<Type Name="TypeValidationEventArgs" FullName="System.Windows.Forms.TypeValidationEventArgs">
  <Metadata><Meta Name="ms.openlocfilehash" Value="fa45ed34e6e357c43d7de71734d68f409e58e806" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69176174" /></Metadata><TypeSignature Language="C#" Value="public class TypeValidationEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TypeValidationEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.TypeValidationEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class TypeValidationEventArgs&#xA;Inherits EventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class TypeValidationEventArgs : EventArgs" />
  <TypeSignature Language="F#" Value="type TypeValidationEventArgs = class&#xA;    inherit EventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Dostarcza dane dla <see cref="E:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted" /> zdarzenia.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zdarzenie <xref:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted> występuje, <xref:System.Windows.Forms.MaskedTextBox> gdy kontrolka wykonuje walidację typu opcjonalnego. Walidacja typu występuje tylko wtedy <xref:System.Windows.Forms.MaskedTextBox.ValidatingType%2A?displayProperty=nameWithType> , gdy właściwość `null` nie jest i występuje niezależna akcja, <xref:System.Windows.Forms.MaskedTextBox> taka jak kontrolka, która utraci fokus. *Walidacja typu* jest możliwość konwersji sformatowanego ciągu wejściowego do typu reprezentowanego przez <xref:System.Windows.Forms.MaskedTextBox.ValidatingType%2A> właściwość. Aby uzyskać więcej informacji na temat procesu walidacji typu, <xref:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted> Zobacz zdarzenie.  
  
 Jeśli procedura obsługi zdarzeń jest zaimplementowana dla <xref:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted>programu, program obsługi odbiera parametr typu. <xref:System.Windows.Forms.TypeValidationEventArgs> Ten parametr zawiera informacje o zdarzeniu, takie jak to, czy proces konwersji typu zakończył się powodzeniem, typ walidacji itd.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje użycie tego typu. W tym przykładzie program obsługi zdarzeń raportuje wystąpienie <xref:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted> zdarzenia. Ten raport pomaga dowiedzieć się, kiedy wystąpi zdarzenie i może pomóc w debugowaniu. Aby zgłosić wiele zdarzeń lub zdarzenia, które występują często, należy rozważyć <xref:System.Windows.Forms.MessageBox.Show%2A> zamianę <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> lub dołączenie komunikatu do wielowierszowego <xref:System.Windows.Forms.TextBox>.  
  
 Aby uruchomić przykładowy kod, wklej go do projektu zawierającego wystąpienie typu <xref:System.Windows.Forms.MaskedTextBox> o nazwie. `MaskedTextBox1` Następnie upewnij się, że program obsługi zdarzeń jest skojarzony <xref:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted> ze zdarzeniem.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#488](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#488)]
 [!code-vb[System.Windows.Forms.EventExamples#488](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#488)]  
  
 ]]></format>
    </remarks>
    <altmember cref="P:System.Windows.Forms.MaskedTextBox.ValidatingType" />
    <altmember cref="M:System.Windows.Forms.MaskedTextBox.ValidateText" />
    <altmember cref="E:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted" />
    <related type="Article" href="https://msdn.microsoft.com/library/df60565e-5447-4110-92a6-be1f6ff5faa3">Przewodnik: praca z kontrolką MaskedTextBox</related>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public TypeValidationEventArgs (Type validatingType, bool isValidInput, object returnValue, string message);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Type validatingType, bool isValidInput, object returnValue, string message) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TypeValidationEventArgs.#ctor(System.Type,System.Boolean,System.Object,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (validatingType As Type, isValidInput As Boolean, returnValue As Object, message As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; TypeValidationEventArgs(Type ^ validatingType, bool isValidInput, System::Object ^ returnValue, System::String ^ message);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.TypeValidationEventArgs : Type * bool * obj * string -&gt; System.Windows.Forms.TypeValidationEventArgs" Usage="new System.Windows.Forms.TypeValidationEventArgs (validatingType, isValidInput, returnValue, message)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="validatingType" Type="System.Type" />
        <Parameter Name="isValidInput" Type="System.Boolean" />
        <Parameter Name="returnValue" Type="System.Object" />
        <Parameter Name="message" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="validatingType"><see cref="T:System.Type" /> Czy sprawdzono poprawność sformatowanego ciągu wejściowego.</param>
        <param name="isValidInput"><see cref="T:System.Boolean" /> Wartość wskazująca, czy sformatowany ciąg został pomyślnie przekonwertowany na typ walidacji.</param>
        <param name="returnValue">Jest to wynik sformatowanego ciągu, któryjestkonwertowanynatypdocelowy.<see cref="T:System.Object" /></param>
        <param name="message"><see cref="T:System.String" /> Zawierający opis procesu konwersji.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Forms.TypeValidationEventArgs" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Parametry <xref:System.Windows.Forms.TypeValidationEventArgs.%23ctor%2A> konstruktora są używane do inicjowania odpowiednich właściwości tylko do odczytu tej klasy.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.TypeValidationEventArgs.ValidatingType" />
        <altmember cref="P:System.Windows.Forms.TypeValidationEventArgs.IsValidInput" />
        <altmember cref="P:System.Windows.Forms.TypeValidationEventArgs.ReturnValue" />
        <altmember cref="P:System.Windows.Forms.TypeValidationEventArgs.Message" />
      </Docs>
    </Member>
    <Member MemberName="Cancel">
      <MemberSignature Language="C#" Value="public bool Cancel { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Cancel" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TypeValidationEventArgs.Cancel" />
      <MemberSignature Language="VB.NET" Value="Public Property Cancel As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Cancel { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Cancel : bool with get, set" Usage="System.Windows.Forms.TypeValidationEventArgs.Cancel" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy zdarzenie powinno być anulowane.</summary>
        <value><see langword="true" />Jeśli zdarzenie powinno być anulowane i fokus jest <see cref="T:System.Windows.Forms.MaskedTextBox" /> przechowywany przez formant; w przeciwnym razie, <see langword="false" /> aby kontynuować przetwarzanie walidacji.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zdarzenie występuje tuż <xref:System.Windows.Forms.Control.Validating> przed zdarzeniem. <xref:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted>  
  
 `true` <xref:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted> <xref:System.Windows.Forms.Control.Validating> <xref:System.ComponentModel.CancelEventArgs.Cancel%2A?displayProperty=nameWithType> <xref:System.Windows.Forms.MaskedTextBox> Ustawienie właściwości na w programie obsługi zdarzeń spowoduje anulowanie zdarzenia, co powoduje zachowanie fokusu przez formant, chyba że kolejne zdarzenie ustawi jego wersję właściwości <xref:System.Windows.Forms.TypeValidationEventArgs.Cancel%2A> do `false`programu.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje użycie tego elementu członkowskiego. W tym przykładzie program obsługi zdarzeń raportuje wystąpienie <xref:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted?displayProperty=nameWithType> zdarzenia. Ten raport pomaga dowiedzieć się, kiedy wystąpi zdarzenie i może pomóc w debugowaniu. Aby zgłosić wiele zdarzeń lub zdarzenia, które występują często, należy rozważyć <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> zamianę <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> lub dołączenie komunikatu do wielowierszowego <xref:System.Windows.Forms.TextBox>.  
  
 Aby uruchomić przykładowy kod, wklej go do projektu zawierającego wystąpienie typu <xref:System.Windows.Forms.MaskedTextBox> o nazwie. `MaskedTextBox1` Następnie upewnij się, że program obsługi zdarzeń jest skojarzony <xref:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted?displayProperty=nameWithType> ze zdarzeniem.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#488](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#488)]
 [!code-vb[System.Windows.Forms.EventExamples#488](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#488)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted" />
        <altmember cref="E:System.Windows.Forms.Control.Validating" />
      </Docs>
    </Member>
    <Member MemberName="IsValidInput">
      <MemberSignature Language="C#" Value="public bool IsValidInput { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsValidInput" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TypeValidationEventArgs.IsValidInput" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsValidInput As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsValidInput { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsValidInput : bool" Usage="System.Windows.Forms.TypeValidationEventArgs.IsValidInput" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy sformatowany ciąg wejściowy został pomyślnie przekonwertowany na typ walidacji.</summary>
        <value><see langword="true" />Jeśli sformatowany ciąg wejściowy może zostać przekonwertowany na typ określony przez <see cref="P:System.Windows.Forms.TypeValidationEventArgs.ValidatingType" /> właściwość; w przeciwnym razie,. <see langword="false" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Właściwość wskazuje powodzenie `Parse` metody <xref:System.Type> znalezionej<xref:System.Windows.Forms.TypeValidationEventArgs.ValidatingType%2A> w reprezentowane przez właściwość. <xref:System.Windows.Forms.TypeValidationEventArgs.IsValidInput%2A> Ten typ musi zawierać `Parse` metody mające jeden lub oba następujące podpisy:  
  
 `public static Object Parse(string)`  
  
 `public static Object Parse(string, IFormatProvider)`  
  
 `Parse`jest wywoływana przed <xref:System.Windows.Forms.MaskedTextBox> wywołaniem zdarzenia przez <xref:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted> formant. Ta metoda jest wywoływana z zawartością, minus znaków <xref:System.Windows.Forms.MaskedTextBox.Text%2A> monitu właściwości <xref:System.Windows.Forms.MaskedTextBox> klasy. Jeśli to się powiedzie, zwraca przekonwertowany obiekt; w przeciwnym razie zwraca `null`.  
  
 Aby uzyskać więcej informacji na temat procesu walidacji typu, <xref:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted> Zobacz zdarzenie.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje użycie tego elementu członkowskiego. W tym przykładzie program obsługi zdarzeń raportuje wystąpienie <xref:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted?displayProperty=nameWithType> zdarzenia. Ten raport pomaga dowiedzieć się, kiedy wystąpi zdarzenie i może pomóc w debugowaniu. Aby zgłosić wiele zdarzeń lub zdarzenia, które występują często, należy rozważyć <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> zamianę <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> lub dołączenie komunikatu do wielowierszowego <xref:System.Windows.Forms.TextBox>.  
  
 Aby uruchomić przykładowy kod, wklej go do projektu zawierającego wystąpienie typu <xref:System.Windows.Forms.MaskedTextBox> o nazwie. `MaskedTextBox1` Następnie upewnij się, że program obsługi zdarzeń jest skojarzony <xref:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted?displayProperty=nameWithType> ze zdarzeniem.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#488](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#488)]
 [!code-vb[System.Windows.Forms.EventExamples#488](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#488)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.TypeValidationEventArgs.ValidatingType" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.ValidatingType" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.Text" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted" />
      </Docs>
    </Member>
    <Member MemberName="Message">
      <MemberSignature Language="C#" Value="public string Message { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Message" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TypeValidationEventArgs.Message" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Message As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Message { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.Message : string" Usage="System.Windows.Forms.TypeValidationEventArgs.Message" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wiadomość tekstową opisującą proces konwersji.</summary>
        <value><see cref="T:System.String" /> Zawierający opis procesu konwersji.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Proces walidacji polega na przekonwertowaniu sformatowanych danych wejściowych użytkownika do typu zdefiniowanego <xref:System.Windows.Forms.MaskedTextBox.ValidatingType%2A> przez właściwość. <xref:System.Windows.Forms.TypeValidationEventArgs.Message%2A> Właściwość zawiera opis tekstu procesu konwersji. <xref:System.Windows.Forms.TypeValidationEventArgs.Message%2A>jest szczególnie przydatne, gdy konwersja nie powiedzie się, <xref:System.Windows.Forms.TypeValidationEventArgs.IsValidInput%2A> zgodnie z `false`wartością właściwości.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje użycie tego elementu członkowskiego. W tym przykładzie program obsługi zdarzeń raportuje wystąpienie <xref:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted?displayProperty=nameWithType> zdarzenia. Ten raport pomaga dowiedzieć się, kiedy wystąpi zdarzenie i może pomóc w debugowaniu. Aby zgłosić wiele zdarzeń lub zdarzenia, które występują często, należy rozważyć <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> zamianę <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> lub dołączenie komunikatu do wielowierszowego <xref:System.Windows.Forms.TextBox>.  
  
 Aby uruchomić przykładowy kod, wklej go do projektu zawierającego wystąpienie typu <xref:System.Windows.Forms.MaskedTextBox> o nazwie. `MaskedTextBox1` Następnie upewnij się, że program obsługi zdarzeń jest skojarzony <xref:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted?displayProperty=nameWithType> ze zdarzeniem.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#488](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#488)]
 [!code-vb[System.Windows.Forms.EventExamples#488](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#488)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.ValidatingType" />
        <altmember cref="P:System.Windows.Forms.TypeValidationEventArgs.IsValidInput" />
      </Docs>
    </Member>
    <Member MemberName="ReturnValue">
      <MemberSignature Language="C#" Value="public object ReturnValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object ReturnValue" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TypeValidationEventArgs.ReturnValue" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ReturnValue As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Object ^ ReturnValue { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ReturnValue : obj" Usage="System.Windows.Forms.TypeValidationEventArgs.ReturnValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera obiekt, który jest wynikiem konwersji sformatowanego ciągu wejściowego.</summary>
        <value>Jeśli sprawdzanie poprawności zakończy się pomyślnie <see cref="T:System.Object" /> , reprezentuje typ przekonwertowany; <see langword="null" />w przeciwnym razie.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Proces walidacji typu próbuje skonwertować sformatowany ciąg wejściowy, bez uwzględniania znaków monitu, do typu określonego przez <xref:System.Windows.Forms.TypeValidationEventArgs.ValidatingType%2A> właściwość. Właściwość reprezentuje wynik próby konwersji i jest równoznaczna z wartością zwracaną <xref:System.Windows.Forms.MaskedTextBox.ValidateText%2A> przez metodę <xref:System.Windows.Forms.MaskedTextBox> klasy. <xref:System.Windows.Forms.TypeValidationEventArgs.ReturnValue%2A>  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje użycie tego elementu członkowskiego. W tym przykładzie program obsługi zdarzeń raportuje wystąpienie <xref:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted?displayProperty=nameWithType> zdarzenia. Ten raport pomaga dowiedzieć się, kiedy wystąpi zdarzenie i może pomóc w debugowaniu. Aby zgłosić wiele zdarzeń lub zdarzenia, które występują często, należy rozważyć <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> zamianę <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> lub dołączenie komunikatu do wielowierszowego <xref:System.Windows.Forms.TextBox>.  
  
 Aby uruchomić przykładowy kod, wklej go do projektu zawierającego wystąpienie typu <xref:System.Windows.Forms.MaskedTextBox> o nazwie. `MaskedTextBox1` Następnie upewnij się, że program obsługi zdarzeń jest skojarzony <xref:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted?displayProperty=nameWithType> ze zdarzeniem.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#488](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#488)]
 [!code-vb[System.Windows.Forms.EventExamples#488](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#488)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.TypeValidationEventArgs.ValidatingType" />
        <altmember cref="E:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted" />
        <altmember cref="M:System.Windows.Forms.MaskedTextBox.ValidateText" />
      </Docs>
    </Member>
    <Member MemberName="ValidatingType">
      <MemberSignature Language="C#" Value="public Type ValidatingType { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Type ValidatingType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TypeValidationEventArgs.ValidatingType" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property ValidatingType As Type" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property Type ^ ValidatingType { Type ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.ValidatingType : Type" Usage="System.Windows.Forms.TypeValidationEventArgs.ValidatingType" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Type</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera typ, dla którego jest sprawdzany sformatowany ciąg wejściowy.</summary>
        <value>Obiekt docelowy <see cref="T:System.Type" /> procesu konwersji. To nigdy nie powinno <see langword="null" />być.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Proces sprawdzania poprawności występuje tylko wtedy <xref:System.Windows.Forms.MaskedTextBox.ValidatingType%2A?displayProperty=nameWithType> , gdy właściwość <xref:System.Windows.Forms.MaskedTextBox> klasy nie `null`jest. <xref:System.Windows.Forms.TypeValidationEventArgs.ValidatingType%2A> Właściwość odwołuje się do tego samego typu, który reprezentuje typ docelowy procesu konwersji.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje użycie tego elementu członkowskiego. W tym przykładzie program obsługi zdarzeń raportuje wystąpienie <xref:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted?displayProperty=nameWithType> zdarzenia. Ten raport pomaga dowiedzieć się, kiedy wystąpi zdarzenie i może pomóc w debugowaniu. Aby zgłosić wiele zdarzeń lub zdarzenia, które występują często, należy rozważyć <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> zamianę <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> lub dołączenie komunikatu do wielowierszowego <xref:System.Windows.Forms.TextBox>.  
  
 Aby uruchomić przykładowy kod, wklej go do projektu zawierającego wystąpienie typu <xref:System.Windows.Forms.MaskedTextBox> o nazwie. `MaskedTextBox1` Następnie upewnij się, że program obsługi zdarzeń jest skojarzony <xref:System.Windows.Forms.MaskedTextBox.TypeValidationCompleted?displayProperty=nameWithType> ze zdarzeniem.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#488](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#488)]
 [!code-vb[System.Windows.Forms.EventExamples#488](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#488)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.TypeValidationEventArgs.ReturnValue" />
        <altmember cref="P:System.Windows.Forms.MaskedTextBox.ValidatingType" />
      </Docs>
    </Member>
  </Members>
</Type>
