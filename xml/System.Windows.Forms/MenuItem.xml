<Type Name="MenuItem" FullName="System.Windows.Forms.MenuItem">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="8a283dcf6b2831ac5f93e9eab903a709ed1e0846" />
    <Meta Name="ms.sourcegitcommit" Value="058bfa0b75b777d3171411d35da8f11617fc06b0" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="05/04/2018" />
    <Meta Name="ms.locfileid" Value="33659932" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class MenuItem : System.Windows.Forms.Menu" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MenuItem extends System.Windows.Forms.Menu" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.MenuItem" />
  <TypeSignature Language="VB.NET" Value="Public Class MenuItem&#xA;Inherits Menu" />
  <TypeSignature Language="C++ CLI" Value="public ref class MenuItem : System::Windows::Forms::Menu" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Forms.Menu</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultEvent("Click")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DefaultProperty("Text")</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.DesignTimeVisible(false)</AttributeName>
    </Attribute>
    <Attribute>
      <AttributeName>System.ComponentModel.ToolboxItem(false)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Reprezentuje pojedynczy element, który jest wyświetlany w <see cref="T:System.Windows.Forms.MainMenu" /> lub <see cref="T:System.Windows.Forms.ContextMenu" />. Mimo że <see cref="T:System.Windows.Forms.ToolStripMenuItem" /> zastępuje i dodaje funkcje do <see cref="T:System.Windows.Forms.MenuItem" /> kontrolę nad poprzednie wersje <see cref="T:System.Windows.Forms.MenuItem" /> są przechowywane dla zgodności z poprzednimi wersjami i użycia w przyszłości, jeśli zostanie wybrana.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby <xref:System.Windows.Forms.MenuItem> mają być wyświetlane, należy dodać go do <xref:System.Windows.Forms.MainMenu> lub <xref:System.Windows.Forms.ContextMenu>. Aby utworzyć podmenu, można dodać <xref:System.Windows.Forms.MenuItem> obiekty do <xref:System.Windows.Forms.Menu.MenuItems%2A> właściwości elementu nadrzędnego <xref:System.Windows.Forms.MenuItem>.  
  
 <xref:System.Windows.Forms.MenuItem> Klasa dostarcza właściwości, które umożliwiają skonfigurowanie wygląd i funkcjonalność elementu menu. Aby wyświetlić znacznik wyboru obok pozycji menu, użyj <xref:System.Windows.Forms.MenuItem.Checked%2A> właściwości. Ta funkcja służy do identyfikowania element menu, który jest zaznaczony na liście elementów menu wykluczają się wzajemnie. Na przykład, jeśli masz zestaw elementów menu do ustawiania kolor tekstu w <xref:System.Windows.Forms.TextBox> sterowania, można użyć <xref:System.Windows.Forms.MenuItem.Checked%2A> właściwość do identyfikacji kolor, który został wybrany. <xref:System.Windows.Forms.MenuItem.Shortcut%2A> Właściwości może służyć do definiowania kombinację klawiszy, który może zostać naciśnięte, wybierz element menu.  
  
 Dla <xref:System.Windows.Forms.MenuItem> obiekty wyświetlane w aplikacji wielu interfejsu dokumentów (MDI), można użyć <xref:System.Windows.Forms.MenuItem.MergeMenu%2A> sposób scalania menu MDI nadrzędnego dla z tym jego formularze podrzędne umożliwiające utworzenie struktury skonsolidowanych menu. Ponieważ <xref:System.Windows.Forms.MenuItem> nie można użyć ponownie w wielu lokalizacjach w tym samym czasie, takie jak w <xref:System.Windows.Forms.MainMenu> i <xref:System.Windows.Forms.ContextMenu>, można użyć <xref:System.Windows.Forms.MenuItem.CloneMenu%2A> metodę, aby utworzyć kopię <xref:System.Windows.Forms.MenuItem> do użycia w innej lokalizacji.  
  
 <xref:System.Windows.Forms.MenuItem.Popup> Zdarzeń służy do wykonywania zadań, przed wyświetleniem menu. Na przykład można utworzyć program obsługi zdarzeń dla tego zdarzenia wyświetlić lub ukryć elementów menu na podstawie stanu kodu. <xref:System.Windows.Forms.MenuItem.Select> Zdarzeń służy do wykonywania zadań, takich jak zapewnianie pomocy szczegółowe dla elementów menu w aplikacji, gdy użytkownik umieszcza wskaźnik myszy nad elementem menu.  
  
   
  
## Examples  
 Poniższy przykład kodu tworzy strukturę menu dla formularza. Przykładowy kod dodaje <xref:System.Windows.Forms.MenuItem> do reprezentowania element menu najwyższego poziomu dodaje element podmenu mu do wybierania rozmiar czcionki, a następnie dodanie dwóch elementów podmenu do tego menu, które reprezentują opcji dużych i małych czcionek w aplikacji. Przykład wymóg <xref:System.Windows.Forms.MainMenu> obiektu o nazwie `mainMenu1` i cztery <xref:System.Windows.Forms.MenuItem> obiektów o nazwie `menuItem1`, `menuItem2`, `menuItem3`, i `menuItem4`.  
  
 [!code-cpp[Classic Menu Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic Menu Example/CPP/source.cpp#1)]
 [!code-csharp[Classic Menu Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic Menu Example/CS/source.cs#1)]
 [!code-vb[Classic Menu Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic Menu Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.MainMenu" />
    <altmember cref="T:System.Windows.Forms.Menu" />
    <altmember cref="T:System.Windows.Forms.MenuMerge" />
    <altmember cref="T:System.Windows.Forms.ContextMenu" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Forms.MenuItem" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MenuItem ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MenuItem();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje <see cref="T:System.Windows.Forms.MenuItem" /> z tekstem puste.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Po utworzeniu pustego <xref:System.Windows.Forms.MenuItem> za pomocą tego konstruktora, służy do właściwości i metod <xref:System.Windows.Forms.MenuItem> klasę, aby określić wygląd i zachowanie programu <xref:System.Windows.Forms.MenuItem>.  
  
   
  
## Examples  
 Poniższy przykład kodu tworzy <xref:System.Windows.Forms.MenuItem> za pomocą tej wersji konstruktora.  
  
 [!code-cpp[Classic MenuItem.MenuItem Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.MenuItem Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.MenuItem Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.MenuItem Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.MenuItem Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.MenuItem Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MenuItem (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.#ctor(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (text As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MenuItem(System::String ^ text);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">Podpis elementu menu.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Forms.MenuItem" /> klasy z określonym tekstem elementu menu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Po określeniu podpis dla elementu menu z `text` parametru, można również określić klucz dostępu przez umieszczenie znaku "&" przed znakiem, który ma być używany jako klawisz dostępu. Na przykład aby określić "F" w "File" jako klawisz dostępu, można będzie Określ podpis elementu menu jako "& pliku". Ta funkcja służy do zapewnienia nawigacji klawiatury menu.  
  
 Ustawienie `text` parametr "`-`" powoduje, że mają być wyświetlane jako separatora (linia pozioma) zamiast elementów menu standardowego elementu menu.  
  
   
  
## Examples  
 Poniższy przykład kodu tworzy <xref:System.Windows.Forms.MenuItem> w czasie zbudowany jest on Określa podpis elementu menu.  
  
 [!code-cpp[Classic MenuItem.MenuItem1 Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.MenuItem1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.MenuItem1 Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.MenuItem1 Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.MenuItem1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.MenuItem1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MenuItem (string text, EventHandler onClick);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string text, class System.EventHandler onClick) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.#ctor(System.String,System.EventHandler)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (text As String, onClick As EventHandler)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MenuItem(System::String ^ text, EventHandler ^ onClick);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="onClick" Type="System.EventHandler" />
      </Parameters>
      <Docs>
        <param name="text">Podpis elementu menu.</param>
        <param name="onClick">
          <see cref="T:System.EventHandler" /> Obsługująca <see cref="E:System.Windows.Forms.MenuItem.Click" /> zdarzenia dla tego elementu menu.</param>
        <summary>Inicjuje nowe wystąpienie klasy z określona Obsługa podpisu i zdarzeń dla <see cref="E:System.Windows.Forms.MenuItem.Click" /> zdarzenia, elementu menu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Po określeniu podpis dla elementu menu z `text` parametru, można również określić klucz dostępu przez umieszczenie 'i' przed znakiem, który ma być używany jako klawisz dostępu. Na przykład aby określić "F" w "File" jako klawisz dostępu, można będzie Określ podpis elementu menu jako "& pliku". Ta funkcja służy do zapewnienia nawigacji klawiatury menu.  
  
 Ustawienie `text` parametr "`-`" powoduje, że mają być wyświetlane jako separatora (linia pozioma) zamiast elementów menu standardowego elementu menu.  
  
 Ponadto ten konstruktor umożliwia Określ delegata, który będzie obsługiwał <xref:System.Windows.Forms.MenuItem.Click> zdarzeń dla elementu menu tworzona. <xref:System.EventHandler> Przekazujesz do tego konstruktora musi być skonfigurowany do obsługi zdarzeń, jaką może obsłużyć wywołania <xref:System.Windows.Forms.MenuItem.Click> zdarzeń. Aby uzyskać więcej informacji dotyczących obsługi zdarzeń, zobacz [Obsługa i wywoływanie zdarzeń](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 Poniższy przykład kodu tworzy <xref:System.Windows.Forms.MenuItem> obiektu z określonym tekstem i <xref:System.EventHandler> delegata podłączone do obsługi zdarzeń, który będzie obsługiwał <xref:System.Windows.Forms.MenuItem.Click> zdarzeń dla elementu menu.  
  
 [!code-cpp[Classic MenuItem.MenuItem2 Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.MenuItem2 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.MenuItem2 Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.MenuItem2 Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.MenuItem2 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.MenuItem2 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MenuItem (string text, System.Windows.Forms.MenuItem[] items);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string text, class System.Windows.Forms.MenuItem[] items) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.#ctor(System.String,System.Windows.Forms.MenuItem[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (text As String, items As MenuItem())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MenuItem(System::String ^ text, cli::array &lt;System::Windows::Forms::MenuItem ^&gt; ^ items);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="items" Type="System.Windows.Forms.MenuItem[]" />
      </Parameters>
      <Docs>
        <param name="text">Podpis elementu menu.</param>
        <param name="items">Tablica <see cref="T:System.Windows.Forms.MenuItem" /> obiektów, które zawiera elementy podmenu dla tego elementu menu.</param>
        <summary>Inicjuje nowe wystąpienie klasy z określonym tekstem i tablicę elementów podmenu zdefiniowany dla elementu menu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Po określeniu podpis dla elementu menu z `text` parametru, można również określić klucz dostępu przez umieszczenie 'i' przed znakiem, który ma być używany jako klawisz dostępu. Na przykład aby określić "F" w "File" jako klawisz dostępu, można będzie Określ podpis elementu menu jako "& pliku". Ta funkcja służy do zapewnienia nawigacji klawiatury menu.  
  
 Ustawienie `text` parametr "`-`" powoduje, że mają być wyświetlane jako separatora (linia pozioma) zamiast elementów menu standardowego elementu menu.  
  
 `items` Parametr umożliwia przypisanie tablicę elementów menu do definiowania podmenu tego elementu menu. Każdy element tablicy ma także tablicę elementów menu przypisane do niej. Dzięki temu można utworzyć struktury pełne menu i przypisać je do konstruktora dla elementu menu.  
  
 Aby uzyskać więcej informacji dotyczących obsługi zdarzeń, zobacz [Obsługa i wywoływanie zdarzeń](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 Poniższy przykład kodu tworzy obiekt z określonym tekstem, program obsługi zdarzeń, połączony z metody, która obsłuży zdarzenie poszczególnych elementów menu w tablicy podmenu.  
  
 [!code-cpp[Classic MenuItem.MenuItem4 Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.MenuItem4 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.MenuItem4 Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.MenuItem4 Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.MenuItem4 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.MenuItem4 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MenuItem (string text, EventHandler onClick, System.Windows.Forms.Shortcut shortcut);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(string text, class System.EventHandler onClick, valuetype System.Windows.Forms.Shortcut shortcut) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.#ctor(System.String,System.EventHandler,System.Windows.Forms.Shortcut)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MenuItem(System::String ^ text, EventHandler ^ onClick, System::Windows::Forms::Shortcut shortcut);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="onClick" Type="System.EventHandler" />
        <Parameter Name="shortcut" Type="System.Windows.Forms.Shortcut" />
      </Parameters>
      <Docs>
        <param name="text">Podpis elementu menu.</param>
        <param name="onClick">
          <see cref="T:System.EventHandler" /> Obsługująca <see cref="E:System.Windows.Forms.MenuItem.Click" /> zdarzenia dla tego elementu menu.</param>
        <param name="shortcut">Jeden z <see cref="T:System.Windows.Forms.Shortcut" /> wartości.</param>
        <summary>Inicjuje nowe wystąpienie klasy z określonego podpisu, program obsługi zdarzeń i klawisz skrótu skojarzony element menu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Po określeniu podpis dla elementu menu z `text` parametru, można również określić klucz dostępu przez umieszczenie 'i' przed znakiem, który ma być używany jako klawisz dostępu. Na przykład aby określić "F" w "File" jako klawisz dostępu, można będzie Określ podpis elementu menu jako "& pliku". Ta funkcja służy do zapewnienia nawigacji klawiatury menu. Ten konstruktor umożliwia również określenie klawisza skrótu oprócz klucz dostępu, aby zapewnić nawigacji klawiatury. Klawisze skrótu umożliwiają określenie kombinację klawiszy, których można użyć do aktywowania elementu menu.  
  
 Ustawienie `text` parametr "`-`" powoduje, że mają być wyświetlane jako separatora (linia pozioma) zamiast elementów menu standardowego elementu menu.  
  
 Ponadto ten konstruktor umożliwia Określ delegata, który będzie obsługiwał <xref:System.Windows.Forms.MenuItem.Click> zdarzeń dla elementu menu tworzona. <xref:System.EventHandler> Przekazujesz do tego konstruktora musi być skonfigurowany do obsługi zdarzeń, jaką może obsłużyć wywołania <xref:System.Windows.Forms.MenuItem.Click> zdarzeń. Aby uzyskać więcej informacji dotyczących obsługi zdarzeń, zobacz [Obsługa i wywoływanie zdarzeń](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 Poniższy przykład kodu tworzy obiekt z określonym tekstem, klawisz skrótu i program obsługi zdarzeń, połączony z metody obsługi zdarzeń dla elementu menu.  
  
 [!code-cpp[Classic MenuItem.MenuItem3 Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.MenuItem3 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.MenuItem3 Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.MenuItem3 Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.MenuItem3 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.MenuItem3 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MenuItem (System.Windows.Forms.MenuMerge mergeType, int mergeOrder, System.Windows.Forms.Shortcut shortcut, string text, EventHandler onClick, EventHandler onPopup, EventHandler onSelect, System.Windows.Forms.MenuItem[] items);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Windows.Forms.MenuMerge mergeType, int32 mergeOrder, valuetype System.Windows.Forms.Shortcut shortcut, string text, class System.EventHandler onClick, class System.EventHandler onPopup, class System.EventHandler onSelect, class System.Windows.Forms.MenuItem[] items) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.#ctor(System.Windows.Forms.MenuMerge,System.Int32,System.Windows.Forms.Shortcut,System.String,System.EventHandler,System.EventHandler,System.EventHandler,System.Windows.Forms.MenuItem[])" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MenuItem(System::Windows::Forms::MenuMerge mergeType, int mergeOrder, System::Windows::Forms::Shortcut shortcut, System::String ^ text, EventHandler ^ onClick, EventHandler ^ onPopup, EventHandler ^ onSelect, cli::array &lt;System::Windows::Forms::MenuItem ^&gt; ^ items);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="mergeType" Type="System.Windows.Forms.MenuMerge" />
        <Parameter Name="mergeOrder" Type="System.Int32" />
        <Parameter Name="shortcut" Type="System.Windows.Forms.Shortcut" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="onClick" Type="System.EventHandler" />
        <Parameter Name="onPopup" Type="System.EventHandler" />
        <Parameter Name="onSelect" Type="System.EventHandler" />
        <Parameter Name="items" Type="System.Windows.Forms.MenuItem[]" />
      </Parameters>
      <Docs>
        <param name="mergeType">Jeden z <see cref="T:System.Windows.Forms.MenuMerge" /> wartości.</param>
        <param name="mergeOrder">Względne położenie elementu menu potrwa w menu scalone.</param>
        <param name="shortcut">Jeden z <see cref="T:System.Windows.Forms.Shortcut" /> wartości.</param>
        <param name="text">Podpis elementu menu.</param>
        <param name="onClick">
          <see cref="T:System.EventHandler" /> Obsługująca <see cref="E:System.Windows.Forms.MenuItem.Click" /> zdarzenia dla tego elementu menu.</param>
        <param name="onPopup">
          <see cref="T:System.EventHandler" /> Obsługująca <see cref="E:System.Windows.Forms.MenuItem.Popup" /> zdarzenia dla tego elementu menu.</param>
        <param name="onSelect">
          <see cref="T:System.EventHandler" /> Obsługująca <see cref="E:System.Windows.Forms.MenuItem.Select" /> zdarzenia dla tego elementu menu.</param>
        <param name="items">Tablica <see cref="T:System.Windows.Forms.MenuItem" /> obiektów, które zawiera elementy podmenu dla tego elementu menu.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Forms.MenuItem" /> klasy z określonym tekstem; zdefiniowanych obsługi zdarzeń dla <see cref="E:System.Windows.Forms.MenuItem.Click" />, <see cref="E:System.Windows.Forms.MenuItem.Select" /> i <see cref="E:System.Windows.Forms.MenuItem.Popup" /> zdarzenia; klawisza skrótu typu scalania; i kolejność określona dla elementu menu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Po określeniu podpis dla elementu menu z `text` parametru, można również określić klucz dostępu przez umieszczenie 'i' przed znakiem, który ma być używany jako klawisz dostępu. Na przykład aby określić "F" w "File" jako klawisz dostępu, można będzie Określ podpis elementu menu jako "& pliku". Ta funkcja służy do zapewnienia nawigacji klawiatury menu.  
  
 Ustawienie `text` parametr "`-`" powoduje, że mają być wyświetlane jako separatora (linia pozioma) zamiast elementów menu standardowego elementu menu.  
  
 `items` Parametr umożliwia przypisanie tablicę elementów menu do definiowania podmenu tego elementu menu. Każdy element tablicy ma także tablicę elementów menu przypisane do niej. Dzięki temu można utworzyć struktury pełne menu i przypisać je do konstruktora dla elementu menu.  
  
 `mergeType` i `mergeOrder` parametry umożliwiają ustalenie zachowanie tego elementu menu, gdy element menu jest scalany z innym menu. W zależności od wartości określonej dla `mergeType` parametru, możesz dodać, usunąć, zastąpić lub scalania elementu menu a jego podmenu z menu, która jest scalana. `mergeOrder` Parametr określa, gdzie ustawiony element menu tworzony podczas scalania menu.  
  
 Ponadto ten konstruktor umożliwia tworzenie <xref:System.Windows.Forms.MenuItem> i podłączone do obsługi zdarzeń w kodzie, która będzie przetwarzać kliknij element menu. <xref:System.EventHandler> Przekazujesz do tego konstruktora powinien być skonfigurowany do obsługi zdarzeń, jaką może obsłużyć wywołania <xref:System.Windows.Forms.MenuItem.Click> zdarzeń. Za pomocą tej wersji konstruktora, można także połączyć <xref:System.Windows.Forms.MenuItem.Popup> i <xref:System.Windows.Forms.MenuItem.Select> zdarzeń w celu określenia, kiedy ten element menu zostanie zaznaczony. Wykonywanie zadań takich jak określanie, czy należy do wyświetlenia znacznik wyboru obok elementów podmenu lub Włącz lub Wyłącz elementy menu, w zależności od stanu aplikacji można użyć tych zdarzeń. <xref:System.Windows.Forms.MenuItem.Select> i <xref:System.Windows.Forms.MenuItem.Click> zdarzenia są generowane tylko w przypadku <xref:System.Windows.Forms.MenuItem> obiektów, które są nadrzędne nie elementów menu. Aby uzyskać więcej informacji dotyczących obsługi zdarzeń, zobacz [Obsługa i wywoływanie zdarzeń](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 Poniższy przykład kodu tworzy element menu, który ma klucz podpisu i skrótów. Element menu ma również zdefiniowane dla programów obsługi zdarzeń <xref:System.Windows.Forms.MenuItem.Popup>, <xref:System.Windows.Forms.MenuItem.Click>, i <xref:System.Windows.Forms.MenuItem.Select> zdarzenia. Jeśli ten element menu jest scalany, spowoduje to dodanie elementu menu do menu z kolejność scalania zero.  
  
 [!code-cpp[Classic MenuItem.MenuItem5 Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.MenuItem5 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.MenuItem5 Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.MenuItem5 Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.MenuItem5 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.MenuItem5 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.MenuItem.Popup" />
        <altmember cref="E:System.Windows.Forms.MenuItem.Select" />
        <altmember cref="E:System.Windows.Forms.MenuItem.Click" />
        <altmember cref="P:System.Windows.Forms.MenuItem.MergeType" />
        <altmember cref="P:System.Windows.Forms.MenuItem.MergeOrder" />
      </Docs>
    </Member>
    <Member MemberName="BarBreak">
      <MemberSignature Language="C#" Value="public bool BarBreak { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool BarBreak" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.BarBreak" />
      <MemberSignature Language="VB.NET" Value="Public Property BarBreak As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool BarBreak { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą czy <see cref="T:System.Windows.Forms.MenuItem" /> znajduje się w nowym wierszu (dla elementu menu dodane do <see cref="T:System.Windows.Forms.MainMenu" /> obiektu) lub w nowej kolumnie (dla elementu podmenu lub elementu menu wyświetlanego <see cref="T:System.Windows.Forms.ContextMenu" />).</summary>
        <value>
          <see langword="true" /> element menu jest umieszczony w nowym wierszu lub w nowej kolumnie; <see langword="false" /> Jeśli element menu zostanie pozostawiony w jego położenie domyślne. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można użyć <xref:System.Windows.Forms.MenuItem.BarBreak%2A> właściwość, aby utworzyć menu, gdzie każdy element menu jest umieszczone obok siebie poziomo zamiast elementu w pionie listy. Ta właściwość umożliwia również tworzenie paska menu, który zawiera wiele wierszy elementów menu najwyższego poziomu.  
  
 Ta właściwość różni się od <xref:System.Windows.Forms.MenuItem.Break%2A> właściwości w czy pasek jest wyświetlany na lewą krawędź każdego elementu menu, która ma <xref:System.Windows.Forms.MenuItem.Break%2A> ustawioną właściwość `true`. Pasek jest wyświetlana tylko w przypadku, gdy element menu nie jest element menu najwyższego poziomu.  
  
   
  
## Examples  
 Poniższy przykład kodu tworzy <xref:System.Windows.Forms.MenuItem> z dwoma elementami podmenu. Elementy dwóch podmenu są wyświetlane poziomo w pionie zamiast <xref:System.Windows.Forms.MenuItem.BarBreak%2A> właściwości.  
  
 [!code-cpp[Classic MenuItem.BarBreak Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.BarBreak Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.BarBreak Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.BarBreak Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.BarBreak Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.BarBreak Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MenuItem.Break" />
      </Docs>
    </Member>
    <Member MemberName="Break">
      <MemberSignature Language="C#" Value="public bool Break { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Break" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.Break" />
      <MemberSignature Language="VB.NET" Value="Public Property Break As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Break { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy element jest umieszczony w nowym wierszu (dla elementu menu dodane do <see cref="T:System.Windows.Forms.MainMenu" /> obiektu) lub w nowej kolumnie (dla elementu menu lub elementu podmenu wyświetlanego <see cref="T:System.Windows.Forms.ContextMenu" />).</summary>
        <value>
          <see langword="true" /> element menu jest umieszczony w nowym wierszu lub w nowej kolumnie; <see langword="false" /> Jeśli element menu zostanie pozostawiony w jego położenie domyślne. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można użyć <xref:System.Windows.Forms.MenuItem.Break%2A> właściwość, aby utworzyć menu, w którym każdego menu jest umieszczone obok siebie poziomo zamiast elementu w pionie listy. Ta właściwość umożliwia również tworzenie paska menu, który zawiera wiele wierszy elementów menu najwyższego poziomu.  
  
   
  
## Examples  
 Poniższy przykład kodu tworzy menu z dwóch elementów menu najwyższego poziomu w górnym wierszu i jeden element w ostatnim wierszu.  
  
 [!code-cpp[Classic MenuItem.Break Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.Break Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.Break Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.Break Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.Break Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.Break Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MenuItem.BarBreak" />
      </Docs>
    </Member>
    <Member MemberName="Checked">
      <MemberSignature Language="C#" Value="public bool Checked { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Checked" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.Checked" />
      <MemberSignature Language="VB.NET" Value="Public Property Checked As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Checked { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy pole wyboru jest wyświetlany obok tekstu elementu menu.</summary>
        <value>
          <see langword="true" /> Jeśli znacznik wyboru obok pozycji menu; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można użyć <xref:System.Windows.Forms.MenuItem.Checked%2A> właściwość w połączeniu z innymi elementami menu, w menu, aby zapewnić stan aplikacji. Można na przykład, zaznacz pole wyboru, element menu w grupie elementy, aby określić rozmiar czcionki, który będzie wyświetlany dla tekstu w aplikacji. Można również użyć <xref:System.Windows.Forms.MenuItem.Checked%2A> właściwość do identyfikacji wybranego elementu menu w grupie elementów menu wykluczają się wzajemnie.  
  
> [!NOTE]
>  Nie można ustawić tej właściwości `true` dla elementów menu najwyższego poziomu.  
  
   
  
## Examples  
 Poniższy przykład kodu wykorzystuje <xref:System.Windows.Forms.MenuItem.Checked%2A> właściwości, aby zapewnić stan w aplikacji. W tym przykładzie grupy elementów menu są używane do określania kolor tekstu w <xref:System.Windows.Forms.TextBox> formantu. Program obsługi zdarzeń podana jest używany przez <xref:System.Windows.Forms.MenuItem.Click> zdarzeń trzech elementów menu. Każdy element menu Określa kolor tekstu, `menuItemRed` (czerwony), `menuItemGreen` (zielony) lub `menuItemBlue` (niebieski). Określa, który element menu został kliknięty programu obsługi zdarzeń, umieszcza znacznik wyboru do wybranego elementu menu i kolor tekstu w postaci <xref:System.Windows.Forms.TextBox> formantu. Przykład wymaga, aby <xref:System.Drawing> przestrzeni nazw został dodany do formularza, który ten kod jest umieszczany w. Przykład wymaga również, aby <xref:System.Windows.Forms.TextBox> został dodany do formularza, który ten przykładowy kod znajduje się w o nazwie `textBox1`.  
  
 [!code-cpp[Classic MenuItem.Checked Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.Checked Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.Checked Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.Checked Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.Checked Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.Checked Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <see cref="T:System.Windows.Forms.MenuItem" /> Jest menu najwyższego poziomu lub elementów podrzędnych.</exception>
      </Docs>
    </Member>
    <Member MemberName="Click">
      <MemberSignature Language="C#" Value="public event EventHandler Click;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Click" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.MenuItem.Click" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Click As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Click;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje po kliknięciu lub wybraniu elementu menu przy użyciu klawisza skrótu lub klawisza dostępu zdefiniowany dla elementu menu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MenuItem.Click> Zdarzenie występuje, gdy to <xref:System.Windows.Forms.MenuItem> po kliknięciu przez użytkownika. Również to zdarzenie występuje, gdy użytkownik wybierze elementu menu przy użyciu klawiatury i naciśnie klawisz Enter. Go może wystąpić, gdy zostanie naciśnięty klawisz dostępu lub klawisz skrótu skojarzony z <xref:System.Windows.Forms.MenuItem>. Aby uzyskać więcej informacji na temat obsługi zdarzeń, zobacz [Obsługa i wywoływanie zdarzeń](~/docs/standard/events/index.md).  
  
> [!NOTE]
>  Jeśli <xref:System.Windows.Forms.Menu.MenuItems%2A> właściwość <xref:System.Windows.Forms.MenuItem> zawiera wszystkie elementy, to zdarzenie nie jest wywoływane. To zdarzenie nie jest wywoływane dla elementów menu nadrzędnego.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób użycia <xref:System.Windows.Forms.MenuItem.Click> zdarzeń do wykonywania zadań, kiedy <xref:System.Windows.Forms.MenuItem> zostanie kliknięty. W przykładzie jest tworzony <xref:System.Windows.Forms.MainMenu> o nazwie `mainMenu1` i dodaje dwa <xref:System.Windows.Forms.MenuItem> obiektów, `topMenuItem` (`File`) i `menuItem1` (`Open`). Następnie łączy `Click` zdarzenia `menuItem1_Click` obsługi zdarzeń. Po kliknięciu przez użytkownika `Open` element menu <xref:System.Windows.Forms.OpenFileDialog> zostanie zainicjowana i wyświetlane. Przykład wymaga, że utworzono <xref:System.Windows.Forms.Form> o nazwie `Form1`.  
  
 [!code-cpp[MenuItemClick#1](~/samples/snippets/cpp/VS_Snippets_Winforms/MenuItemClick/CPP/form1.cpp#1)]
 [!code-csharp[MenuItemClick#1](~/samples/snippets/csharp/VS_Snippets_Winforms/MenuItemClick/CS/form1.cs#1)]
 [!code-vb[MenuItemClick#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/MenuItemClick/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="CloneMenu">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Tworzy kopię <see cref="T:System.Windows.Forms.MenuItem" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="CloneMenu">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.MenuItem CloneMenu ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.MenuItem CloneMenu() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.CloneMenu" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CloneMenu () As MenuItem" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::MenuItem ^ CloneMenu();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MenuItem</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Tworzy kopię bieżącego <see cref="T:System.Windows.Forms.MenuItem" />.</summary>
        <returns>A <see cref="T:System.Windows.Forms.MenuItem" /> reprezentujący element menu zduplikowane.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MenuItem> obiekty nie można używać w więcej niż jednym miejscu, chyba że uzyskać kopię <xref:System.Windows.Forms.MenuItem>. Możesz wywołać tę metodę, aby utworzyć kopię tego elementu menu do użycia w <xref:System.Windows.Forms.ContextMenu>, <xref:System.Windows.Forms.MainMenu>, lub inne <xref:System.Windows.Forms.MenuItem> w aplikacji. Gdy element menu zostanie sklonowany, wszystkie programy obsługi zdarzeń określony w oryginalnym elemencie menu będzie działać w wersji sklonowany elementu menu. Na przykład, jeśli utworzono <xref:System.Windows.Forms.MenuItem> i połączony jego <xref:System.Windows.Forms.MenuItem.Click> zdarzenie, aby program obsługi zdarzeń. Gdy element menu zostanie sklonowany, element menu sklonowany wywoła tej procedury obsługi zdarzeń.  
  
   
  
## Examples  
 Poniższy kod przykładowy klony <xref:System.Windows.Forms.MenuItem> i wyświetla je w <xref:System.Windows.Forms.ContextMenu>. Przykład wymaga, aby <xref:System.Windows.Forms.MenuItem> istnieje w <xref:System.Windows.Forms.MainMenu> na formularzu o nazwie `menuItem1` i <xref:System.Windows.Forms.ContextMenu> obiektu o nazwie `contextMenu1` istnieje także w formularzu.  
  
 [!code-cpp[Classic MenuItem.CloneMenu Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.CloneMenu Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.CloneMenu Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.CloneMenu Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.CloneMenu Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.CloneMenu Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CloneMenu">
      <MemberSignature Language="C#" Value="protected void CloneMenu (System.Windows.Forms.MenuItem itemSrc);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void CloneMenu(class System.Windows.Forms.MenuItem itemSrc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.CloneMenu(System.Windows.Forms.MenuItem)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub CloneMenu (itemSrc As MenuItem)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void CloneMenu(System::Windows::Forms::MenuItem ^ itemSrc);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="itemSrc" Type="System.Windows.Forms.MenuItem" />
      </Parameters>
      <Docs>
        <param name="itemSrc">
          <see cref="T:System.Windows.Forms.MenuItem" /> Reprezentujący element menu do skopiowania.</param>
        <summary>Tworzy kopię określonego <see cref="T:System.Windows.Forms.MenuItem" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wywołaj tę metodę, aby utworzyć kopie elementów menu, które już zostały utworzone do użycia w menu skrótów lub inną strukturę menu w aplikacji. Ta wersja <xref:System.Windows.Forms.MenuItem.CloneMenu%2A> pozwala określić <xref:System.Windows.Forms.MenuItem> do skopiowania zamiast element menu, który jest wywołanie metody. Ta metoda służy do zainicjowania nowy <xref:System.Windows.Forms.MenuItem> obiektu z kopią innego <xref:System.Windows.Forms.MenuItem>. Gdy element menu zostanie sklonowany, wszystkie programy obsługi zdarzeń określony w oryginalnym elemencie menu będzie działać w wersji sklonowany elementu menu. Na przykład, jeśli utworzono <xref:System.Windows.Forms.MenuItem> i połączony jego <xref:System.Windows.Forms.MenuItem.Click> zdarzenie, aby program obsługi zdarzeń. Gdy element menu zostanie sklonowany, element menu sklonowany wywoła tej procedury obsługi zdarzeń.  
  
   
  
## Examples  
 Poniższy przykład kodu inicjuje nowy <xref:System.Windows.Forms.MenuItem> kopię istniejącej <xref:System.Windows.Forms.MenuItem> używanej w <xref:System.Windows.Forms.MainMenu> w formularzu. Następnie kod dodaje sklonowany <xref:System.Windows.Forms.MenuItem> do <xref:System.Windows.Forms.ContextMenu> w formularzu. W tym przykładzie wymaga, aby <xref:System.Windows.Forms.MenuItem> już jest utworzone i nosi nazwę `menuItem1` i <xref:System.Windows.Forms.ContextMenu> formant został utworzony i o nazwie `contextMenu1`.  
  
 [!code-cpp[Classic MenuItem.CloneMenu1 Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.CloneMenu1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.CloneMenu1 Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.CloneMenu1 Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.CloneMenu1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.CloneMenu1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DefaultItem">
      <MemberSignature Language="C#" Value="public bool DefaultItem { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool DefaultItem" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.DefaultItem" />
      <MemberSignature Language="VB.NET" Value="Public Property DefaultItem As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool DefaultItem { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy element menu jest domyślny element menu.</summary>
        <value>
          <see langword="true" /> Jeśli element menu jest domyślnym elementem menu. w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wklejenie jest domyślny element menu dla menu. Gdy użytkownik kliknie dwukrotnie podmenu zawierającego domyślny element jest zaznaczony element domyślny i podmenu jest zamknięty. Można użyć <xref:System.Windows.Forms.MenuItem.DefaultItem%2A> Właściwość wskazująca domyślne działanie, które jest oczekiwany w menu lub menu skrótów.  
  
   
  
## Examples  
 Poniższy przykład kodu tworzy element menu z dwoma elementami podmenu. Ustawia przykład `menuItem2` jak użycie elementu menu domyślne <xref:System.Windows.Forms.MenuItem.DefaultItem%2A> właściwości.  
  
 [!code-cpp[Classic MenuItem.DefaultItem Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.DefaultItem Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.DefaultItem Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.DefaultItem Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.DefaultItem Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.DefaultItem Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <see langword="true" /> Aby zwolnić zasoby zarządzane i niezarządzane; <see langword="false" /> aby zwolnić tylko zasoby niezarządzane.</param>
        <summary>Usuwa zasoby (inne niż pamięć) używany przez <see cref="T:System.Windows.Forms.MenuItem" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wywołanie <xref:System.Windows.Forms.MenuItem.Dispose%2A> po zakończeniu przy użyciu <xref:System.Windows.Forms.MenuItem>. <xref:System.Windows.Forms.MenuItem.Dispose%2A> Pozostawia metody <xref:System.Windows.Forms.MenuItem> w stanie uniemożliwiającym jego używanie. Po wywołaniu <xref:System.Windows.Forms.MenuItem.Dispose%2A>, konieczne jest zwolnienie wszystkich odwołań do <xref:System.Windows.Forms.MenuItem> , można odzyskać pamięci, jej klasy przez wyrzucanie elementów bezużytecznych.  
  
> [!NOTE]
>  Wywoływanie zawsze <xref:System.Windows.Forms.MenuItem.Dispose%2A> przed zwolnieniem ostatniego odwołania do <xref:System.Windows.Forms.MenuItem>. W przeciwnym razie zasoby <xref:System.Windows.Forms.MenuItem> jest przy użyciu nie zostanie zwolniona, dopóki wywołania kolekcji pamięci <xref:System.Windows.Forms.MenuItem> destruktor obiektu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="DrawItem">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.DrawItemEventHandler DrawItem;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.DrawItemEventHandler DrawItem" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.MenuItem.DrawItem" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event DrawItem As DrawItemEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::DrawItemEventHandler ^ DrawItem;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.DrawItemEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy <see cref="P:System.Windows.Forms.MenuItem.OwnerDraw" /> ma ustawioną właściwość elementu menu <see langword="true" /> i żądań do rysowania elementu menu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.DrawItemEventArgs> Argumentu przekazanego do <xref:System.Windows.Forms.MenuItem.DrawItem> udostępnia program obsługi zdarzeń <xref:System.Drawing.Graphics> obiekt, który umożliwia przeprowadzanie związane z rysowaniem i inne operacje graficzne na powierzchni elementu menu. Ten program obsługi zdarzeń służy do tworzenia niestandardowych menu, które spełniają wymagania aplikacji. Aby uzyskać więcej informacji na temat obsługi zdarzeń, zobacz [Obsługa i wywoływanie zdarzeń](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób obsługi <xref:System.Windows.Forms.MenuItem.DrawItem> zdarzeń. W tym przykładzie rysuje elementu przy użyciu menu <xref:System.Drawing.Brush> i <xref:System.Drawing.Font>, a następnie rysuje <xref:System.Drawing.Rectangle> wokół elementu menu. Rysowanie odbywa się za pośrednictwem <xref:System.Drawing.Graphics> obiektu, który jest przekazywany do obsługi zdarzeń w <xref:System.Windows.Forms.DrawItemEventArgs> parametru. W tym przykładzie wymaga, aby zostały zainicjowane <xref:System.Windows.Forms.MenuItem.OwnerDraw%2A> właściwości dla elementu `true`. Na przykład C# Dodaj następujący kod w Konstruktorze formularza po `InitializeComponent`, aby przyłączyć zdarzenia:  
  
 `this.menuItem1.DrawItem += new DrawItemEventHandler(menuItem1_DrawItem);`  
  
 [!code-cpp[OwnerDraw example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/OwnerDraw example/CPP/form1.cpp#1)]
 [!code-csharp[OwnerDraw example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/OwnerDraw example/CS/form1.cs#1)]
 [!code-vb[OwnerDraw example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/OwnerDraw example/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MenuItem.OwnerDraw" />
        <altmember cref="E:System.Windows.Forms.MenuItem.MeasureItem" />
      </Docs>
    </Member>
    <Member MemberName="Enabled">
      <MemberSignature Language="C#" Value="public bool Enabled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Enabled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.Enabled" />
      <MemberSignature Language="VB.NET" Value="Public Property Enabled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Enabled { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy element menu zostanie włączony.</summary>
        <value>
          <see langword="true" /> Jeśli element menu jest włączone; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.Windows.Forms.MenuItem> który jest wyłączone, jest wyświetlana w szarego koloru, aby wskazać jej stan. Po wyłączeniu nadrzędnego elementu menu nie są wyświetlane wszystkie elementy podmenu.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób użycia <xref:System.Windows.Forms.MenuItem.Popup> zdarzeń, aby określić, czy <xref:System.Windows.Forms.MenuItem> obiektów, które zapewniają obsługę wycinania, kopiowania i usuwania działań są włączone, zanim zostaną one wyświetlone w menu jest wyświetlany. Przykład określa, czy `textBox1`, <xref:System.Windows.Forms.TextBox> kontrolować na formularzu, jest włączona, ma wejściowych fokus i ma tekstu zaznaczonego przed włączeniem <xref:System.Windows.Forms.MenuItem> obiektów. W tym przykładzie wymaga tego trzech <xref:System.Windows.Forms.MenuItem> obiekty są tworzone nazwane `menuCut`, `menuCopy`, i `menuDelete` zostały utworzone.  
  
 [!code-cpp[MenuItem.Popup#1](~/samples/snippets/cpp/VS_Snippets_Winforms/MenuItem.Popup/CPP/form1.cpp#1)]
 [!code-csharp[MenuItem.Popup#1](~/samples/snippets/csharp/VS_Snippets_Winforms/MenuItem.Popup/CS/form1.cs#1)]
 [!code-vb[MenuItem.Popup#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/MenuItem.Popup/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Index">
      <MemberSignature Language="C#" Value="public int Index { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Index" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.Index" />
      <MemberSignature Language="VB.NET" Value="Public Property Index As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Index { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą położenie elementu menu w menu nadrzędnego.</summary>
        <value>Liczony od zera indeks reprezentującą położenie elementu menu w menu nadrzędnego.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość zapewnia indeksowanego pozycja elementu menu w kolekcji elementów menu w menu jej nadrzędnej. Ta właściwość służy do zmiany położenia elementów menu w innej lokalizacji, w menu. Można również używać tej właściwości, podczas tworzenia <xref:System.Windows.Forms.MenuItem> do określenia jej położenie w strukturze menu w momencie tworzenia obiektu.  
  
   
  
## Examples  
 Poniższy przykład kodu zmienia położenie dwóch elementów menu w menu. Poniższy przykład kodu wymaga tego dwa <xref:System.Windows.Forms.MenuItem> obiekty są tworzone nazwane `menuItem1` i `menuItem2`. `menuItem1` Element menu przeniesienie w dół o jedną pozycję menu, podczas gdy `menuItem2` zostanie przesunięty o jedną pozycję.  
  
 [!code-cpp[Classic MenuItem.Index Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.Index Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.Index Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.Index Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.Index Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.Index Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">Przypisaną wartość jest mniejsza niż zero lub większa niż liczba elementów.</exception>
      </Docs>
    </Member>
    <Member MemberName="IsParent">
      <MemberSignature Language="C#" Value="public override bool IsParent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsParent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.IsParent" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property IsParent As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool IsParent { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy element menu zawiera elementy podrzędne.</summary>
        <value>
          <see langword="true" /> Jeśli element menu zawiera elementy podrzędne; <see langword="false" /> Jeśli menu jest autonomiczny elementu menu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można użyć tej właściwości z <xref:System.Windows.Forms.MenuItem.Parent%2A> właściwości można przejść w kodzie za pomocą struktury całe menu.  
  
   
  
## Examples  
 Poniższy przykład kodu Określa, czy istnieją wszelkich skojarzonych z podmenu <xref:System.Windows.Forms.MenuItem> o nazwie `menuItem1`. Jeśli istnieje wszelkich podmenu, jego wyłącza je, ustawiając <xref:System.Windows.Forms.MenuItem.Enabled%2A> właściwości `false`. Przykład wymóg <xref:System.Windows.Forms.MenuItem> o nazwie zgodnej `menuItem1`.  
  
 [!code-cpp[Classic MenuItem.IsParent Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.IsParent Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.IsParent Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.IsParent Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.IsParent Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.IsParent Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MdiList">
      <MemberSignature Language="C#" Value="public bool MdiList { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool MdiList" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.MdiList" />
      <MemberSignature Language="VB.NET" Value="Public Property MdiList As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool MdiList { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy element menu zostanie wypełniona listę okien podrzędnych wielu interfejsu dokumentów (MDI), które są wyświetlane w formularzu skojarzone.</summary>
        <value>
          <see langword="true" /> Jeśli w tym elemencie menu; zostanie wyświetlona lista okien podrzędnych MDI w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Po wybraniu elementu menu do wyświetlania list okien podrzędnych MDI listy jest wyświetlana jako podmenu elementu menu. Tylko w przypadku formularzy, które są zdefiniowane jako formularze podrzędne MDI są wyświetlane na liście okna. Okno podrzędne tylko dziewięć mogą być wyświetlane w czasie. Jeśli istnieje więcej niż dziewięć okno podrzędne, wyświetlane, element menu "Więcej Windows...", zostanie wyświetlony na końcu listy okna. Kliknięcie tego elementu menu wyświetla okno dialogowe z pełną listą okno podrzędne, które są obecnie aktywne.  
  
   
  
## Examples  
 Poniższy przykład kodu tworzy <xref:System.Windows.Forms.MenuItem> używany do wyświetlania listę aktualnie otwartych formularze podrzędne MDI formularza MDI.  
  
 [!code-cpp[Classic MenuItem.MdiList Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.MdiList Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.MdiList Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.MdiList Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.MdiList Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.MdiList Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MeasureItem">
      <MemberSignature Language="C#" Value="public event System.Windows.Forms.MeasureItemEventHandler MeasureItem;" />
      <MemberSignature Language="ILAsm" Value=".event class System.Windows.Forms.MeasureItemEventHandler MeasureItem" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.MenuItem.MeasureItem" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event MeasureItem As MeasureItemEventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event System::Windows::Forms::MeasureItemEventHandler ^ MeasureItem;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MeasureItemEventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy menu musi mieć rozmiar elementu menu przed rysowania.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby się tego zdarzenia, musi mieć <xref:System.Windows.Forms.MenuItem.OwnerDraw%2A> ustawioną właściwość elementu menu `true`. To zdarzenie jest wywoływane przed rysowane przez właściciela menu są rysowane umożliwia do określenia rozmiaru elementu menu. Aby uzyskać więcej informacji na temat obsługi zdarzeń, zobacz [Obsługa i wywoływanie zdarzeń](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje użycie tego elementu członkowskiego. W tym przykładzie program obsługi zdarzeń raportów w przypadku wystąpienia <xref:System.Windows.Forms.MenuItem.MeasureItem> zdarzeń. Ten raport pomaga, aby dowiedzieć się, gdy zdarzenie występuje i mogą pomóc w debugowaniu.  
  
 Aby uruchomić przykładowy kod, wklej go do projektu, który zawiera wystąpienie typu <xref:System.Windows.Forms.MenuItem> o nazwie `MenuItem1`. Następnie upewnij się, że program obsługi zdarzeń jest skojarzony z <xref:System.Windows.Forms.MenuItem.MeasureItem> zdarzeń.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#499](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#499)]
 [!code-vb[System.Windows.Forms.EventExamples#499](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#499)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MenuItem.OwnerDraw" />
        <altmember cref="E:System.Windows.Forms.MenuItem.DrawItem" />
      </Docs>
    </Member>
    <Member MemberName="MenuID">
      <MemberSignature Language="C#" Value="protected int MenuID { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MenuID" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.MenuID" />
      <MemberSignature Language="VB.NET" Value="Protected ReadOnly Property MenuID As Integer" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; property int MenuID { int get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, identyfikatorem systemu Windows dla tego elementu menu.</summary>
        <value>Identyfikator systemu Windows dla tego elementu menu.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="MergeMenu">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Scala to <see cref="T:System.Windows.Forms.MenuItem" /> z inną <see cref="T:System.Windows.Forms.MenuItem" />.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="MergeMenu">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.MenuItem MergeMenu ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.MenuItem MergeMenu() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.MergeMenu" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function MergeMenu () As MenuItem" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::MenuItem ^ MergeMenu();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MenuItem</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Scala to <see cref="T:System.Windows.Forms.MenuItem" /> z inną <see cref="T:System.Windows.Forms.MenuItem" /> i zwraca wynikowy scalony <see cref="T:System.Windows.Forms.MenuItem" />.</summary>
        <returns>A <see cref="T:System.Windows.Forms.MenuItem" /> reprezentujący element menu scalone.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podczas wywoływania tej wersji <xref:System.Windows.Forms.MenuItem.MergeMenu%2A>, <xref:System.Windows.Forms.MenuItem> zwracane jest kopią bieżącego elementu menu, które mogą być łączone z innym elementem menu bez wpływu na funkcjonalność bieżącego elementu. Ta wersja <xref:System.Windows.Forms.MenuItem.MergeMenu%2A> metoda jest podobna do wywoływania <xref:System.Windows.Forms.MenuItem.CloneMenu%2A> metodę, która nie zawiera żadnych parametrów.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MergeMenu">
      <MemberSignature Language="C#" Value="public void MergeMenu (System.Windows.Forms.MenuItem itemSrc);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void MergeMenu(class System.Windows.Forms.MenuItem itemSrc) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.MergeMenu(System.Windows.Forms.MenuItem)" />
      <MemberSignature Language="VB.NET" Value="Public Sub MergeMenu (itemSrc As MenuItem)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void MergeMenu(System::Windows::Forms::MenuItem ^ itemSrc);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="itemSrc" Type="System.Windows.Forms.MenuItem" />
      </Parameters>
      <Docs>
        <param name="itemSrc">A <see cref="T:System.Windows.Forms.MenuItem" /> określająca element menu do scalenia z tym kontem.</param>
        <summary>Scala inny element menu z tym elementem menu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Elementy menu są łączone zgodnie z wartością elementu menu <xref:System.Windows.Forms.MenuItem.MergeType%2A> i <xref:System.Windows.Forms.MenuItem.MergeOrder%2A> właściwości. Ta wersja <xref:System.Windows.Forms.MenuItem.MergeMenu%2A> metody umożliwia scalania dwóch <xref:System.Windows.Forms.MenuItem> obiektów (i ich podmenu) do jednego menu. Scalanie menu jest obsługiwana automatycznie, gdy formularz nadrzędny wielu interfejsu dokumentów (MDI) i podrzędne mają menu. Można użyć tej wersji metody do scalania dwóch <xref:System.Windows.Forms.MenuItem> obiektów (i ich elementy podmenu) znajduje się w <xref:System.Windows.Forms.MainMenu> kontroli do pojedynczego menu w <xref:System.Windows.Forms.ContextMenu>. Na przykład można wywołać tej wersji <xref:System.Windows.Forms.MenuItem.MergeMenu%2A> sposób scalania menu Plik i Edycja elementów menu w pojedynczy <xref:System.Windows.Forms.MenuItem> który można następnie dodać do i wyświetlane przez <xref:System.Windows.Forms.ContextMenu>.  
  
   
  
## Examples  
 Poniższy przykład kodu wykorzystuje tę wersję <xref:System.Windows.Forms.MenuItem.MergeMenu%2A> metodę, aby utworzyć kopię <xref:System.Windows.Forms.MenuItem> i scalić ją z inną. Scalone <xref:System.Windows.Forms.MenuItem> jest dodawane do <xref:System.Windows.Forms.ContextMenu> formantu. W tym przykładzie wymaga, że istnieją dwa elementy menu o nazwie `menuItem1` i `menuItem2` zawierających elementy podmenu w nich i <xref:System.Windows.Forms.ContextMenu> o nazwie `contextMenu1` do wyświetlania elementów menu. `menuItem1` i `menuItem2` menu różne elementy zawarte w nich. Po wywołaniu <xref:System.Windows.Forms.MenuItem.MergeMenu%2A> nawiązaniu ujednoliconej menu zostanie utworzona.  
  
 [!code-cpp[Classic MenuItem.MergeMenu1 Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.MergeMenu1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.MergeMenu1 Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.MergeMenu1 Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.MergeMenu1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.MergeMenu1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="MergeOrder">
      <MemberSignature Language="C#" Value="public int MergeOrder { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 MergeOrder" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.MergeOrder" />
      <MemberSignature Language="VB.NET" Value="Public Property MergeOrder As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int MergeOrder { int get(); void set(int value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(0)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą względne położenie elementu menu podczas scalania na inny.</summary>
        <value>Liczony od zera indeks reprezentujący pozycji kolejność scalania dla tego elementu menu. Wartość domyślna to 0.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Względne położenie prowadzące tego elementu menu Jeśli menu struktury, która określa kolejność scalania elementów menu <xref:System.Windows.Forms.MenuItem> znajduje się w scalony z innym.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, przy użyciu <xref:System.Windows.Forms.MenuItem.MergeOrder%2A> właściwość, aby kontrolować sposób wyświetlania menu scalone. Jest to pełny przykład gotowy do uruchomienia po dodaniu go do projektu.  
  
 [!code-cpp[System.Windows.Forms.MenuItemMergeOrder#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.MenuItemMergeOrder/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.MenuItemMergeOrder#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.MenuItemMergeOrder/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.MenuItemMergeOrder#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.MenuItemMergeOrder/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MenuItem.MergeType" />
        <altmember cref="M:System.Windows.Forms.MenuItem.MergeMenu" />
      </Docs>
    </Member>
    <Member MemberName="MergeType">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.MenuMerge MergeType { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.MenuMerge MergeType" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.MergeType" />
      <MemberSignature Language="VB.NET" Value="Public Property MergeType As MenuMerge" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::MenuMerge MergeType { System::Windows::Forms::MenuMerge get(); void set(System::Windows::Forms::MenuMerge value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MenuMerge</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą zachowanie tego elementu menu podczas scalania menu z inną.</summary>
        <value>A <see cref="T:System.Windows.Forms.MenuMerge" /> wartość, która reprezentuje typ scalania elementu menu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Typ scalania element menu wskazuje zachowanie elementu menu podczas jego ma taką samą kolejność scalania jako inny element menu scalane. Menu scalone umożliwia tworzenie menu skonsolidowanych oparte na dwóch lub więcej z istniejącymi menu.  
  
   
  
## Examples  
 Poniższy przykład kodu tworzy <xref:System.Windows.Forms.MenuItem> z <xref:System.Windows.Forms.MenuItem.MergeType%2A> i <xref:System.Windows.Forms.MenuItem.MergeOrder%2A> , aby element menu zostanie dodany do menu scalone na pierwszym miejscu.  
  
 [!code-cpp[Classic MenuItem.MergeType Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.MergeType Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.MergeType Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.MergeType Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.MergeType Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.MergeType Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Przypisaną wartość nie jest jednym z <see cref="T:System.Windows.Forms.MenuMerge" /> wartości.</exception>
        <altmember cref="T:System.Windows.Forms.MenuMerge" />
        <altmember cref="P:System.Windows.Forms.MenuItem.MergeOrder" />
      </Docs>
    </Member>
    <Member MemberName="Mnemonic">
      <MemberSignature Language="C#" Value="public char Mnemonic { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance char Mnemonic" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.Mnemonic" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Mnemonic As Char" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property char Mnemonic { char get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Char</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość określającą znak skrótu, który jest skojarzony z tym elementem menu.</summary>
        <value>Znak, który reprezentuje skrótu znak skojarzony z tym elementem menu. Zwraca znak NUL (ASCII wartość 0), jeśli określono nie skrótu znaków w tekście <see cref="T:System.Windows.Forms.MenuItem" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Znak skrótu to pierwszy znak po znaku handlowego "i" (&) w tekście <xref:System.Windows.Forms.MenuItem>. Ta właściwość nie zwróci wartość, jeśli dwa znaki handlowe "i" są umieszczone razem takie znaki są używane do wyświetlania handlowego "i" w tekście <xref:System.Windows.Forms.MenuItem> zamiast definiować znak skrótu.  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MenuItem.Text" />
      </Docs>
    </Member>
    <Member MemberName="OnClick">
      <MemberSignature Language="C#" Value="protected virtual void OnClick (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnClick(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.OnClick(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnClick (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnClick(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.EventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Zgłasza <see cref="E:System.Windows.Forms.MenuItem.Click" /> zdarzeń.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podnoszenie zdarzenia wywołuje program obsługi zdarzeń przez delegata. Aby uzyskać więcej informacji, zobacz [Obsługa i wywoływanie zdarzeń](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób użycia <xref:System.Windows.Forms.MenuItem.Click> zdarzeń do wykonywania zadań, kiedy <xref:System.Windows.Forms.MenuItem> zostanie kliknięty. W przykładzie jest tworzony <xref:System.Windows.Forms.MainMenu> o nazwie `mainMenu1` i dodaje dwa <xref:System.Windows.Forms.MenuItem> obiektów, `topMenuItem` (`File`) i `menuItem1` (`Open`). Następnie łączy `Click` zdarzenia `menuItem1_Click` obsługi zdarzeń. Po kliknięciu przez użytkownika `Open` element menu <xref:System.Windows.Forms.OpenFileDialog> zostanie zainicjowana i wyświetlane. Przykład wymaga, że utworzono <xref:System.Windows.Forms.Form> o nazwie `Form1`.  
  
 [!code-cpp[MenuItemClick#1](~/samples/snippets/cpp/VS_Snippets_Winforms/MenuItemClick/CPP/form1.cpp#1)]
 [!code-csharp[MenuItemClick#1](~/samples/snippets/csharp/VS_Snippets_Winforms/MenuItemClick/CS/form1.cs#1)]
 [!code-vb[MenuItemClick#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/MenuItemClick/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>W przypadku przesłaniania <see cref="M:System.Windows.Forms.MenuItem.OnClick(System.EventArgs)" /> w klasie pochodnej, należy wywołać klasy podstawowej <see cref="M:System.Windows.Forms.MenuItem.OnClick(System.EventArgs)" /> metody.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnDrawItem">
      <MemberSignature Language="C#" Value="protected virtual void OnDrawItem (System.Windows.Forms.DrawItemEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnDrawItem(class System.Windows.Forms.DrawItemEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.OnDrawItem(System.Windows.Forms.DrawItemEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnDrawItem (e As DrawItemEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnDrawItem(System::Windows::Forms::DrawItemEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.DrawItemEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.DrawItemEventArgs" /> zawierający dane zdarzenia.</param>
        <summary>Zgłasza <see cref="E:System.Windows.Forms.MenuItem.DrawItem" /> zdarzeń.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podnoszenie zdarzenia wywołuje program obsługi zdarzeń przez delegata. Aby uzyskać więcej informacji, zobacz [Obsługa i wywoływanie zdarzeń](~/docs/standard/events/index.md).  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>W przypadku przesłaniania <see cref="M:System.Windows.Forms.MenuItem.OnDrawItem(System.Windows.Forms.DrawItemEventArgs)" /> w klasie pochodnej, należy wywołać klasy podstawowej <see cref="M:System.Windows.Forms.MenuItem.OnDrawItem(System.Windows.Forms.DrawItemEventArgs)" /> metody.</para>
        </block>
        <altmember cref="T:System.Windows.Forms.DrawItemEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnInitMenuPopup">
      <MemberSignature Language="C#" Value="protected virtual void OnInitMenuPopup (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnInitMenuPopup(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.OnInitMenuPopup(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnInitMenuPopup (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnInitMenuPopup(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.EventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Zgłasza <see cref="E:System.Windows.Forms.MenuItem.Popup" /> zdarzeń.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="OnMeasureItem">
      <MemberSignature Language="C#" Value="protected virtual void OnMeasureItem (System.Windows.Forms.MeasureItemEventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnMeasureItem(class System.Windows.Forms.MeasureItemEventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.OnMeasureItem(System.Windows.Forms.MeasureItemEventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnMeasureItem (e As MeasureItemEventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnMeasureItem(System::Windows::Forms::MeasureItemEventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.Windows.Forms.MeasureItemEventArgs" />
      </Parameters>
      <Docs>
        <param name="e">A <see cref="T:System.Windows.Forms.MeasureItemEventArgs" /> zawierający dane zdarzenia.</param>
        <summary>Zgłasza <see cref="E:System.Windows.Forms.MenuItem.MeasureItem" /> zdarzeń.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podnoszenie zdarzenia wywołuje program obsługi zdarzeń przez delegata. Aby uzyskać więcej informacji, zobacz [Obsługa i wywoływanie zdarzeń](~/docs/standard/events/index.md).  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>W przypadku przesłaniania <see cref="M:System.Windows.Forms.MenuItem.OnMeasureItem(System.Windows.Forms.MeasureItemEventArgs)" /> w klasie pochodnej, należy wywołać klasy podstawowej <see cref="M:System.Windows.Forms.MenuItem.OnMeasureItem(System.Windows.Forms.MeasureItemEventArgs)" /> metody.</para>
        </block>
        <altmember cref="T:System.Windows.Forms.MeasureItemEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="OnPopup">
      <MemberSignature Language="C#" Value="protected virtual void OnPopup (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnPopup(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.OnPopup(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnPopup (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnPopup(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.EventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Zgłasza <see cref="E:System.Windows.Forms.MenuItem.Popup" /> zdarzeń.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podnoszenie zdarzenia wywołuje program obsługi zdarzeń przez delegata. Aby uzyskać więcej informacji, zobacz [Obsługa i wywoływanie zdarzeń](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób użycia <xref:System.Windows.Forms.MenuItem.Popup> zdarzeń, aby określić, czy <xref:System.Windows.Forms.MenuItem> obiektów, które zapewniają obsługę wycinania, kopiowania i usuwania działań są włączone, zanim zostaną one wyświetlone w menu jest wyświetlany. Przykład określa, czy `textBox1`, <xref:System.Windows.Forms.TextBox> kontrolować na formularzu, jest włączona, ma wejściowych fokus i ma tekstu zaznaczonego przed włączeniem <xref:System.Windows.Forms.MenuItem> obiektów. W tym przykładzie wymaga tego trzech <xref:System.Windows.Forms.MenuItem> obiekty są tworzone nazwane `menuCut`, `menuCopy`, i `menuDelete` zostały utworzone.  
  
 [!code-cpp[MenuItem.Popup#1](~/samples/snippets/cpp/VS_Snippets_Winforms/MenuItem.Popup/CPP/form1.cpp#1)]
 [!code-csharp[MenuItem.Popup#1](~/samples/snippets/csharp/VS_Snippets_Winforms/MenuItem.Popup/CS/form1.cs#1)]
 [!code-vb[MenuItem.Popup#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/MenuItem.Popup/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>W przypadku przesłaniania <see cref="M:System.Windows.Forms.MenuItem.OnPopup(System.EventArgs)" /> w klasie pochodnej, należy wywołać klasy podstawowej <see cref="M:System.Windows.Forms.MenuItem.OnPopup(System.EventArgs)" /> metody.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OnSelect">
      <MemberSignature Language="C#" Value="protected virtual void OnSelect (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void OnSelect(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.OnSelect(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Overridable Sub OnSelect (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; virtual void OnSelect(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.EventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Zgłasza <see cref="E:System.Windows.Forms.MenuItem.Select" /> zdarzeń.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podnoszenie zdarzenia wywołuje program obsługi zdarzeń przez delegata. Aby uzyskać więcej informacji, zobacz [Obsługa i wywoływanie zdarzeń](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób użycia <xref:System.Windows.Forms.MenuItem.Select> zdarzenie <xref:System.Windows.Forms.MenuItem> klasy można przypisać tekstu pomocy <xref:System.Windows.Forms.StatusBarPanel> z <xref:System.Windows.Forms.StatusBar> formantu. W tym przykładzie wymaga, aby <xref:System.Windows.Forms.MenuItem> obiektów o nazwie `menuOpen`, `menuSave`, i `menuExit` są dodawane do <xref:System.Windows.Forms.MainMenu> kontrolkę w formularzu. Przykład wymaga również, aby <xref:System.Windows.Forms.StatusBar> formantu o nazwie `statusBar1` został dodany do formularza. <xref:System.Windows.Forms.StatusBar> Formant powinien zawierać <xref:System.Windows.Forms.StatusBarPanel>.  
  
 [!code-cpp[MenuItem.Select#1](~/samples/snippets/cpp/VS_Snippets_Winforms/MenuItem.Select/CPP/form1.cpp#1)]
 [!code-csharp[MenuItem.Select#1](~/samples/snippets/csharp/VS_Snippets_Winforms/MenuItem.Select/CS/form1.cs#1)]
 [!code-vb[MenuItem.Select#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/MenuItem.Select/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>W przypadku przesłaniania <see cref="M:System.Windows.Forms.MenuItem.OnSelect(System.EventArgs)" /> w klasie pochodnej, należy wywołać klasy podstawowej <see cref="M:System.Windows.Forms.MenuItem.OnSelect(System.EventArgs)" /> metody.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="OwnerDraw">
      <MemberSignature Language="C#" Value="public bool OwnerDraw { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool OwnerDraw" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.OwnerDraw" />
      <MemberSignature Language="VB.NET" Value="Public Property OwnerDraw As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool OwnerDraw { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy kod, który podasz rysuje elementu menu lub elementu menu rysuje systemu Windows.</summary>
        <value>
          <see langword="true" /> Jeśli element menu ma być rysowany przy użyciu kodu; <see langword="false" /> Jeśli element menu ma być rysowany przez system Windows. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy <xref:System.Windows.Forms.MenuItem.OwnerDraw%2A> właściwość jest ustawiona na `true`, wymagana jest obsługa wszystkich rysowania elementu menu. Ta funkcja służy do tworzenia własnych Wyświetla menu specjalnych.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje menu z elementem menu rysowanych przez właściciela. Ten zestaw przykład <xref:System.Windows.Forms.MenuItem.OwnerDraw%2A> właściwości i używa `AddHandler` instrukcji i `AddressOf` operatora, aby wyznaczyć pełnomocnika, aby obsłużyć <xref:System.Windows.Forms.MenuItem.DrawItem> zdarzeń. Aby uruchomić przykład, wklej go w formie, który importuje <xref:System>, <xref:System.Windows.Forms>, i <xref:System.Drawing> przestrzeni nazw. Wywołanie `InitializeMenu` z konstruktora formularza lub `Load` metody.  
  
 [!code-cpp[System.Windows.Forms.MenuItemOwnerDraw#1](~/samples/snippets/cpp/VS_Snippets_Winforms/System.Windows.Forms.MenuItemOwnerDraw/CPP/form1.cpp#1)]
 [!code-csharp[System.Windows.Forms.MenuItemOwnerDraw#1](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.MenuItemOwnerDraw/CS/form1.cs#1)]
 [!code-vb[System.Windows.Forms.MenuItemOwnerDraw#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.MenuItemOwnerDraw/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Drawing.Graphics" />
        <altmember cref="T:System.Windows.Forms.Menu" />
      </Docs>
    </Member>
    <Member MemberName="Parent">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Menu Parent { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.Menu Parent" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.Parent" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Parent As Menu" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Menu ^ Parent { System::Windows::Forms::Menu ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Menu</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, menu, które zawiera tego elementu menu.</summary>
        <value>A <see cref="T:System.Windows.Forms.Menu" /> reprezentujący menu, które zawiera tego elementu menu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość służy do uzyskania <xref:System.Windows.Forms.Menu> obiektu dla podmenu. Można rzutować <xref:System.Windows.Forms.Menu> obiektu zwróconego przez tę właściwość, aby <xref:System.Windows.Forms.MenuItem> obiekt do manipulowania nim.  
  
   
  
## Examples  
 W tym przykładzie należy utworzyć menu głównego i element menu najwyższego poziomu `menuItem1` (`File`). Możesz również utworzyć dwa elementy menu, `menuItem2` (`New`) i `menuItem3` (`Open`) i dodaj je do listy elementów menu z `menuItem1`. Następnie sprawdź, czy `menuItem3` otrzymano nadrzędne menu, które ma wartość true i wyświetlania informacji w tym menu nadrzędne w oknie komunikatu. W tym przykładzie wymaga się, że utworzono <xref:System.Windows.Forms.Form> o nazwie `Form1`.  
  
 [!code-cpp[ParentMenu#1](~/samples/snippets/cpp/VS_Snippets_Winforms/ParentMenu/CPP/form1.cpp#1)]
 [!code-csharp[ParentMenu#1](~/samples/snippets/csharp/VS_Snippets_Winforms/ParentMenu/CS/form1.cs#1)]
 [!code-vb[ParentMenu#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/ParentMenu/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PerformClick">
      <MemberSignature Language="C#" Value="public void PerformClick ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void PerformClick() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.PerformClick" />
      <MemberSignature Language="VB.NET" Value="Public Sub PerformClick ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void PerformClick();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Generuje <see cref="E:System.Windows.Forms.Control.Click" /> zdarzenia dla <see cref="T:System.Windows.Forms.MenuItem" />, symulując kliknij przez użytkownika.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To menu można użyć do aktywowania elementu menu przy użyciu kodu bez przekazywania informacji o zdarzeniu. Na przykład, jeśli chcesz aktywować menu na akcję, która występuje w aplikacji, można wywołać elementu podstawie <xref:System.Windows.Forms.MenuItem.PerformClick%2A> metody w tym <xref:System.Windows.Forms.MenuItem>.  
  
   
  
## Examples  
 W tym przykładzie programowo kliknij element menu za pomocą `PerformClick` metody. Najpierw należy utworzyć menu głównego (`mainMenu1`) i Dodaj do niej dwa elementy menu `menuItem1` (`File`) i `menuItem2` (`Edit`). Można również użyć <xref:System.Windows.Forms.MenuItem.Click> zdarzenia w celu wysyłania danych do programu obsługi zdarzeń po kliknięciu elementu menu. Użyć `PerformClick` metody kliknij `File` elementu menu. Po uruchomieniu aplikacji, `File` element menu zostanie aktywowany, a okno komunikatu, który zawiera tekst "Plik menu zostanie kliknięty." zostanie wyświetlone na ekranie. Przykład wymaga, że utworzono <xref:System.Windows.Forms.Form> o nazwie `Form1`.  
  
 [!code-cpp[PerformClick#1](~/samples/snippets/cpp/VS_Snippets_Winforms/PerformClick/CPP/form1.cpp#1)]
 [!code-csharp[PerformClick#1](~/samples/snippets/csharp/VS_Snippets_Winforms/PerformClick/CS/form1.cs#1)]
 [!code-vb[PerformClick#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/PerformClick/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="PerformSelect">
      <MemberSignature Language="C#" Value="public virtual void PerformSelect ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void PerformSelect() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.PerformSelect" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub PerformSelect ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void PerformSelect();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zgłasza <see cref="E:System.Windows.Forms.MenuItem.Select" /> zdarzenia dla tego elementu menu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda umożliwia wywoływanie <xref:System.Windows.Forms.MenuItem.Select> zdarzeń bez przekazywania informacji o zdarzeniu do obsługi zdarzeń.  
  
   
  
## Examples  
 W tym przykładzie programowo wybierz element menu za pomocą `PerformSelect` metody. Najpierw należy utworzyć menu głównego (`mainMenu1`) i Dodaj do niej dwa elementy menu `menuItem1` (`File`) i `menuItem2` (`Edit`). Można również użyć <xref:System.Windows.Forms.MenuItem.Select> zdarzenia w celu wysyłania danych do programu obsługi zdarzeń, gdy element menu zostanie zaznaczony. Użyć `PerformSelect` metody, aby wybrać `File` elementu menu. Po uruchomieniu aplikacji, `File` element menu zostanie zaznaczony, a okno komunikatu, który zawiera tekst "Wybrano menu Plik." zostanie wyświetlone na ekranie. Przykład wymaga, że utworzono <xref:System.Windows.Forms.Form> o nazwie `Form1`.  
  
 [!code-cpp[PerformSelect#1](~/samples/snippets/cpp/VS_Snippets_Winforms/PerformSelect/CPP/form1.cpp#1)]
 [!code-csharp[PerformSelect#1](~/samples/snippets/csharp/VS_Snippets_Winforms/PerformSelect/CS/form1.cs#1)]
 [!code-vb[PerformSelect#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/PerformSelect/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.MenuItem.PerformClick" />
      </Docs>
    </Member>
    <Member MemberName="Popup">
      <MemberSignature Language="C#" Value="public event EventHandler Popup;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Popup" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.MenuItem.Popup" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Popup As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Popup;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje przed wyświetleniem elementu menu listy elementów menu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie występuje tylko w przypadku, gdy element menu ma podmenu elementów do wyświetlenia. Ten program obsługi zdarzeń umożliwia dodawanie, usuwanie, włączyć, wyłączyć, zaznaczenie lub usunięcie zaznaczenia elementów menu w oparciu o stan aplikacji, zanim zostaną one wyświetlone. Aby uzyskać więcej informacji na temat obsługi zdarzeń, zobacz [Obsługa i wywoływanie zdarzeń](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób użycia <xref:System.Windows.Forms.MenuItem.Popup> zdarzeń, aby określić, czy <xref:System.Windows.Forms.MenuItem> obiektów, które zapewniają obsługę wycinania, kopiowania i usuwania działań są włączone, zanim zostaną one wyświetlone w menu jest wyświetlany. Przykład określa, czy `textBox1`, <xref:System.Windows.Forms.TextBox> kontrolować na formularzu, jest włączona, ma wejściowych fokus i ma tekstu zaznaczonego przed włączeniem <xref:System.Windows.Forms.MenuItem> obiektów. W tym przykładzie wymaga tego trzech <xref:System.Windows.Forms.MenuItem> obiekty są tworzone nazwane `menuCut`, `menuCopy`, i `menuDelete` zostały utworzone.  
  
 [!code-cpp[MenuItem.Popup#1](~/samples/snippets/cpp/VS_Snippets_Winforms/MenuItem.Popup/CPP/form1.cpp#1)]
 [!code-csharp[MenuItem.Popup#1](~/samples/snippets/csharp/VS_Snippets_Winforms/MenuItem.Popup/CS/form1.cs#1)]
 [!code-vb[MenuItem.Popup#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/MenuItem.Popup/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="RadioCheck">
      <MemberSignature Language="C#" Value="public bool RadioCheck { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool RadioCheck" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.RadioCheck" />
      <MemberSignature Language="VB.NET" Value="Public Property RadioCheck As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool RadioCheck { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(false)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą czy <see cref="T:System.Windows.Forms.MenuItem" />, jeśli jest zaznaczone, wyświetla przycisku radiowego zamiast znacznik wyboru.</summary>
        <value>
          <see langword="true" /> Jeśli przycisk radiowy ma być używana zamiast znacznik wyboru; <see langword="false" /> standardowe znacznik wyboru jest wyświetlane, gdy jest zaznaczony element menu. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Znaczniki zaznaczenia nie musi oznaczać wykluczają się wzajemnie stan dla grupy elementów menu. Ta właściwość służy do wskazywania użytkownikowi znacznik wyboru elementu menu wykluczają się wzajemnie.  
  
   
  
## Examples  
 Poniższy przykład kodu wykorzystuje <xref:System.Windows.Forms.MenuItem.Checked%2A> właściwości zmiany stanu aplikacji. W tym przykładzie grupy elementów menu są pod warunkiem, że są używane do określania kolor tekstu w <xref:System.Windows.Forms.TextBox> formantu. W tym przykładzie podane programu obsługi zdarzeń jest używany przez <xref:System.Windows.Forms.MenuItem.Click> zdarzeń trzech elementów. Każdy element menu Określa kolor, `menuItemRed`, `menuItemGreen`, lub `menuItemBlue`. Określa, który element menu został kliknięty programu obsługi zdarzeń, umieszcza znacznik wyboru do wybranego elementu menu i kolor tekstu w postaci <xref:System.Windows.Forms.TextBox> formantu o nazwie `textBox1`. Funkcja <xref:System.Windows.Forms.MenuItem.RadioCheck%2A> właściwości, aby zademonstrować, jak wyboru przycisku radiowego jest używany do wyświetlenia elementów menu, które wzajemnie się wykluczają. W tym przykładzie wymaga, aby <xref:System.Drawing?displayProperty=nameWithType> przestrzeni nazw został dodany do formularza, który zawiera ten kod.  
  
 [!code-cpp[Classic MenuItem.RadioCheck Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.RadioCheck Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.RadioCheck Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.RadioCheck Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.RadioCheck Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.RadioCheck Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MenuItem.Checked" />
      </Docs>
    </Member>
    <Member MemberName="Select">
      <MemberSignature Language="C#" Value="public event EventHandler Select;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Select" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.MenuItem.Select" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Select As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Select;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy użytkownik umieszcza kursor za pośrednictwem elementu menu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 To zdarzenie jest wywoływane zazwyczaj, gdy użytkownik umieszcza wskaźnik myszy nad elementem menu. Zdarzenie również można wywoływane, gdy użytkownik wyróżnia elementu menu przy użyciu klawiatury, przewijając widok do elementu menu za pomocą klawiszy strzałek. To zdarzenie służy do wyświetlania ciąg szczegółową pomoc odnoszących się do tego elementu menu na pasku stanu aplikacji. Aby uzyskać więcej informacji na temat obsługi zdarzeń, zobacz [Obsługa i wywoływanie zdarzeń](~/docs/standard/events/index.md).  
  
> [!NOTE]
>  Jeśli <xref:System.Windows.Forms.Menu.MenuItems%2A> właściwość <xref:System.Windows.Forms.MenuItem> zawiera wszystkie elementy, to zdarzenie nie jest wywoływane. To zdarzenie nie jest wywoływane dla elementów menu nadrzędnego.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje sposób użycia <xref:System.Windows.Forms.MenuItem.Select> zdarzenie <xref:System.Windows.Forms.MenuItem> klasy można przypisać tekstu pomocy <xref:System.Windows.Forms.StatusBarPanel> z <xref:System.Windows.Forms.StatusBar> formantu. W tym przykładzie wymaga, aby <xref:System.Windows.Forms.MenuItem> obiektów o nazwie `menuOpen`, `menuSave`, i `menuExit` są dodawane do <xref:System.Windows.Forms.MainMenu> kontrolkę w formularzu. Przykład wymaga również, aby <xref:System.Windows.Forms.StatusBar> formantu o nazwie `statusBar1` został dodany do formularza. <xref:System.Windows.Forms.StatusBar> Formant powinien zawierać <xref:System.Windows.Forms.StatusBarPanel>.  
  
 [!code-cpp[MenuItem.Select#1](~/samples/snippets/cpp/VS_Snippets_Winforms/MenuItem.Select/CPP/form1.cpp#1)]
 [!code-csharp[MenuItem.Select#1](~/samples/snippets/csharp/VS_Snippets_Winforms/MenuItem.Select/CS/form1.cs#1)]
 [!code-vb[MenuItem.Select#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/MenuItem.Select/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="E:System.Windows.Forms.MenuItem.Click" />
      </Docs>
    </Member>
    <Member MemberName="Shortcut">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Shortcut Shortcut { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.Shortcut Shortcut" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.Shortcut" />
      <MemberSignature Language="VB.NET" Value="Public Property Shortcut As Shortcut" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Shortcut Shortcut { System::Windows::Forms::Shortcut get(); void set(System::Windows::Forms::Shortcut value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Shortcut</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą klawisz skrótu skojarzony z elementem menu.</summary>
        <value>Jeden z <see cref="T:System.Windows.Forms.Shortcut" /> wartości. Wartość domyślna to <see langword="Shortcut.None" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Klawisze skrótu podać metodę dla użytkowników aktywować często używanych elementów menu w systemie menu i zapewnienie klawiatury dostępu do aplikacji dla użytkowników, którzy nie mają dostępu do myszy lub innego urządzenia wskaźnika.  
  
   
  
## Examples  
 Poniższy przykład kodu tworzy element menu, Ustawia podpis przypisuje klawisz skrótu, powoduje, że element menu jest widoczna i przedstawia wyświetlanie klawiszy skrótu dla elementu menu. Przykład wymaga, aby <xref:System.Windows.Forms.MenuItem> czyli została utworzona o nazwie `menuItem1`.  
  
 [!code-cpp[Classic MenuItem.Text Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.Text Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.Text Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.Text Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.Text Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.Text Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Przypisaną wartość nie jest jednym z <see cref="T:System.Windows.Forms.Shortcut" /> wartości.</exception>
        <altmember cref="T:System.Windows.Forms.Shortcut" />
      </Docs>
    </Member>
    <Member MemberName="ShowShortcut">
      <MemberSignature Language="C#" Value="public bool ShowShortcut { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool ShowShortcut" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.ShowShortcut" />
      <MemberSignature Language="VB.NET" Value="Public Property ShowShortcut As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool ShowShortcut { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy klawisz skrótu, który jest skojarzony z elementem menu jest wyświetlany obok podpis elementu menu.</summary>
        <value>
          <see langword="true" /> Jeśli klawisz skrótu jest wyświetlany obok podpis elementu menu; <see langword="false" /> Jeśli klawisz skrótu nie ma być wyświetlany. Wartość domyślna to <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość służy do opcji dla użytkowników ukryć menu skrótów do oszczędzania przestrzeni menu lub ukrywania klawisza skrótu będą wyświetlane.  
  
   
  
## Examples  
 Poniższy przykład kodu tworzy element menu, Ustawia podpis przypisuje klawisz skrótu, powoduje, że element menu jest widoczna i przedstawia wyświetlanie klawiszy skrótu dla elementu menu. Przykład wymaga, aby <xref:System.Windows.Forms.MenuItem> czyli została utworzona o nazwie `menuItem1`.  
  
 [!code-cpp[Classic MenuItem.Text Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.Text Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.Text Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.Text Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.Text Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.Text Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MenuItem.Shortcut" />
      </Docs>
    </Member>
    <Member MemberName="Text">
      <MemberSignature Language="C#" Value="public string Text { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string Text" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.Text" />
      <MemberSignature Language="VB.NET" Value="Public Property Text As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::String ^ Text { System::String ^ get(); void set(System::String ^ value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą podpis elementu menu.</summary>
        <value>Podpis tekstowy elementu menu.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Po określeniu podpis dla elementu menu, można również określić klucz dostępu, umieszczając 'i' przed znakiem, który ma być używany jako klawisz dostępu. Na przykład aby określić "F" w "File" jako klawisz dostępu, można będzie Określ podpis elementu menu jako "& pliku". Ta funkcja służy do zapewnienia nawigacji klawiatury menu.  
  
 Ustawienie tej właściwości na "`-`" powoduje, że mają być wyświetlane jako separatora (linia pozioma) zamiast elementów menu standardowego elementu menu.  
  
   
  
## Examples  
 Poniższy przykład kodu tworzy element menu, Ustawia podpis przypisuje klawisz skrótu, powoduje, że element menu jest widoczna i przedstawia wyświetlanie klawiszy skrótu dla elementu menu. Przykład wymaga, aby <xref:System.Windows.Forms.MenuItem> czyli została utworzona o nazwie `menuItem1`.  
  
 [!code-cpp[Classic MenuItem.Text Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.Text Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.Text Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.Text Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.Text Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.Text Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.MenuItem.Mnemonic" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MenuItem.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca ciąg reprezentujący <see cref="T:System.Windows.Forms.MenuItem" />.</summary>
        <returns>Ciąg reprezentujący bieżące <see cref="T:System.Windows.Forms.MenuItem" />. Ciąg zawiera typ i <see cref="P:System.Windows.Forms.MenuItem.Text" /> właściwości formantu.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Visible">
      <MemberSignature Language="C#" Value="public bool Visible { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Visible" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MenuItem.Visible" />
      <MemberSignature Language="VB.NET" Value="Public Property Visible As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Visible { bool get(); void set(bool value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.DefaultValue(true)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy element menu jest widoczny.</summary>
        <value>
          <see langword="true" /> Jeśli element menu będzie widoczne w menu; w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="true" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość służy do modyfikowania struktury menu bez konieczności scalania menu lub Wyłącz menu. Na przykład, jeśli chcesz ukryć pełną sekcję funkcji z menu dla aplikacji, można je ukryć użytkownika przez ustawienie dla tej właściwości `false`.  
  
   
  
## Examples  
 Poniższy przykład kodu tworzy element menu, Ustawia podpis przypisuje klawisz skrótu, powoduje, że element menu jest widoczna i przedstawia wyświetlanie klawiszy skrótu dla elementu menu. Przykład wymaga, aby <xref:System.Windows.Forms.MenuItem> czyli została utworzona o nazwie `menuItem1`.  
  
 [!code-cpp[Classic MenuItem.Text Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MenuItem.Text Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MenuItem.Text Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MenuItem.Text Example/CS/source.cs#1)]
 [!code-vb[Classic MenuItem.Text Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MenuItem.Text Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>