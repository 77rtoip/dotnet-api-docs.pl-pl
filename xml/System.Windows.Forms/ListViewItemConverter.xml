<Type Name="ListViewItemConverter" FullName="System.Windows.Forms.ListViewItemConverter">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e5d59d5f9be842ee743eb3713890c5b5a0fbc638" /><Meta Name="ms.sourcegitcommit" Value="cbcba80f998e27b87425ad54726bdb684fb3a932" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="09/04/2018" /><Meta Name="ms.locfileid" Value="43570324" /></Metadata><TypeSignature Language="C#" Value="public class ListViewItemConverter : System.ComponentModel.ExpandableObjectConverter" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ListViewItemConverter extends System.ComponentModel.ExpandableObjectConverter" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.ListViewItemConverter" />
  <TypeSignature Language="VB.NET" Value="Public Class ListViewItemConverter&#xA;Inherits ExpandableObjectConverter" />
  <TypeSignature Language="C++ CLI" Value="public ref class ListViewItemConverter : System::ComponentModel::ExpandableObjectConverter" />
  <TypeSignature Language="F#" Value="type ListViewItemConverter = class&#xA;    inherit ExpandableObjectConverter" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.ComponentModel.ExpandableObjectConverter</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Udostępnia konwertera typów, aby przekonwertować <see cref="T:System.Windows.Forms.ListViewItem" /> obiektów do i z różnych innych reprezentacji.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uzyskać więcej informacji na temat konwerterów typów zobacz <xref:System.ComponentModel.TypeConverter> klasy bazowej i [porady: Implementowanie konwertera typów](https://docs.microsoft.com/previous-versions/visualstudio/visual-studio-2013/ayybcxe5(v=vs.120)).  
  
> [!NOTE]
>  Nigdy nie należy tworzyć wystąpienia <xref:System.Windows.Forms.ListViewItemConverter>. Zamiast tego należy wywołać <xref:System.ComponentModel.TypeDescriptor.GetConverter%2A> metody <xref:System.ComponentModel.TypeDescriptor>. Aby uzyskać więcej informacji, zobacz przykłady w <xref:System.ComponentModel.TypeConverter> klasy bazowej.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.ListViewItem" />
    <altmember cref="T:System.ComponentModel.TypeConverter" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ListViewItemConverter ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListViewItemConverter.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; ListViewItemConverter();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Forms.ListViewItemConverter" /> klasy.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CanConvertTo">
      <MemberSignature Language="C#" Value="public override bool CanConvertTo (System.ComponentModel.ITypeDescriptorContext context, Type destinationType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance bool CanConvertTo(class System.ComponentModel.ITypeDescriptorContext context, class System.Type destinationType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListViewItemConverter.CanConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function CanConvertTo (context As ITypeDescriptorContext, destinationType As Type) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override bool CanConvertTo(System::ComponentModel::ITypeDescriptorContext ^ context, Type ^ destinationType);" />
      <MemberSignature Language="F#" Value="abstract member CanConvertTo : System.ComponentModel.ITypeDescriptorContext * Type -&gt; bool&#xA;override this.CanConvertTo : System.ComponentModel.ITypeDescriptorContext * Type -&gt; bool" Usage="listViewItemConverter.CanConvertTo (context, destinationType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="destinationType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="context"><see cref="T:System.ComponentModel.ITypeDescriptorContext" /> Zapewniający kontekstu formatu.</param>
        <param name="destinationType">A <see cref="T:System.Type" /> reprezentujący typ chcesz przekonwertować.</param>
        <summary>Pobiera wartość wskazującą, czy tego konwertera można przekonwertować obiekt na typ zadanego miejsca docelowego przy użyciu tego kontekstu.</summary>
        <returns><see langword="true" /> w przypadku tego konwertera można wykonać konwersji; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 `context` Parametru należy używać w celu wyodrębnienia dodatkowe informacje na temat środowiska tego konwertera jest wywoływana z. Może to być `null`, dlatego należy zawsze sprawdzić. Ponadto we właściwościach obiektu context może zwrócić `null`.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides"><para>Zastępuje tę metodę, aby zapewnić wymagań konwersji.</para></block>
        <altmember cref="T:System.ComponentModel.ITypeDescriptorContext" />
      </Docs>
    </Member>
    <Member MemberName="ConvertTo">
      <MemberSignature Language="C#" Value="public override object ConvertTo (System.ComponentModel.ITypeDescriptorContext context, System.Globalization.CultureInfo culture, object value, Type destinationType);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance object ConvertTo(class System.ComponentModel.ITypeDescriptorContext context, class System.Globalization.CultureInfo culture, object value, class System.Type destinationType) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.ListViewItemConverter.ConvertTo(System.ComponentModel.ITypeDescriptorContext,System.Globalization.CultureInfo,System.Object,System.Type)" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ConvertTo (context As ITypeDescriptorContext, culture As CultureInfo, value As Object, destinationType As Type) As Object" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::Object ^ ConvertTo(System::ComponentModel::ITypeDescriptorContext ^ context, System::Globalization::CultureInfo ^ culture, System::Object ^ value, Type ^ destinationType);" />
      <MemberSignature Language="F#" Value="abstract member ConvertTo : System.ComponentModel.ITypeDescriptorContext * System.Globalization.CultureInfo * obj * Type -&gt; obj&#xA;override this.ConvertTo : System.ComponentModel.ITypeDescriptorContext * System.Globalization.CultureInfo * obj * Type -&gt; obj" Usage="listViewItemConverter.ConvertTo (context, culture, value, destinationType)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="context" Type="System.ComponentModel.ITypeDescriptorContext" />
        <Parameter Name="culture" Type="System.Globalization.CultureInfo" />
        <Parameter Name="value" Type="System.Object" />
        <Parameter Name="destinationType" Type="System.Type" />
      </Parameters>
      <Docs>
        <param name="context">Kontekst elementu formatującego. Ten obiekt może służyć do wyodrębnienia dodatkowe informacje na temat środowiska, które tego konwertera jest wywoływana z. Może to być <see langword="null" />, więc należy zawsze sprawdzić. Ponadto we właściwościach obiektu context może również zwracać <see langword="null" />.</param>
        <param name="culture">Informacje o opcjonalnych kultury. Przyjęto, że jeśli nie podano bieżącej kultury.</param>
        <param name="value">Obiekt do przekonwertowania.</param>
        <param name="destinationType">Typ, który można przekonwertować obiekt na potrzeby.</param>
        <summary>Konwertuje dany obiekt do innego typu.</summary>
        <returns>Przekonwertowany obiekt.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Najczęściej używane typy, aby przekonwertować są do i z obiektem ciągu. Domyślna implementacja spowoduje, że wywołanie <xref:System.Object.ToString%2A> obiektu Jeśli obiekt jest prawidłowy, a jeśli typ docelowy jest ciągiem. Jeśli to nie można przekonwertować na typ docelowy, będzie to sygnalizować <xref:System.NotSupportedException>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>