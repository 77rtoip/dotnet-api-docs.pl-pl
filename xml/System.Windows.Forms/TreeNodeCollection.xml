<Type Name="TreeNodeCollection" FullName="System.Windows.Forms.TreeNodeCollection">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="c5f2bff819795fa7d3ccdc484fee7ad60cd3b6ab" />
    <Meta Name="ms.sourcegitcommit" Value="0ec122ee5f3681159b8460ab15b409fd6e3d3ae0" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="10/04/2018" />
    <Meta Name="ms.locfileid" Value="48651426" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class TreeNodeCollection : System.Collections.IList" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TreeNodeCollection extends System.Object implements class System.Collections.ICollection, class System.Collections.IEnumerable, class System.Collections.IList" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.TreeNodeCollection" />
  <TypeSignature Language="VB.NET" Value="Public Class TreeNodeCollection&#xA;Implements IList" />
  <TypeSignature Language="C++ CLI" Value="public ref class TreeNodeCollection : System::Collections::IList" />
  <TypeSignature Language="F#" Value="type TreeNodeCollection = class&#xA;    interface IList&#xA;    interface ICollection&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.IList</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
      <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.TreeNodeCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1">
      <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.TreeNodeCollectionEditor, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
      <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.TreeNodeCollectionEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Reprezentuje kolekcję <see cref="T:System.Windows.Forms.TreeNode" /> obiektów.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.TreeNodeCollection.Add%2A>, <xref:System.Windows.Forms.TreeNodeCollection.Remove%2A>, I <xref:System.Windows.Forms.TreeNodeCollection.RemoveAt%2A> metody pozwalają na dodawanie i usuwanie węzłów poszczególnych drzewa z kolekcji.  
  
> [!NOTE]
>  Wyliczanie kolekcji i usuwanie węzłów nie jest obsługiwane.  
  
 Można również użyć <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> lub <xref:System.Windows.Forms.TreeNodeCollection.Clear%2A> metody, aby dodać lub usunąć wszystkie węzły drzewa z kolekcji.  
  
 Klasy nie może dziedziczyć z <xref:System.Windows.Forms.TreeNodeCollection> klasy.  
  
   
  
## Examples  
 Poniższy przykład kodu wyświetla informacje o kliencie w <xref:System.Windows.Forms.TreeView> kontroli. Węzły drzewa główne wyświetlenie nazwy klienta, a węzły drzewa podrzędnego wyświetlić numery przypisane do każdego klienta. W tym przykładzie 1000 klientów są wyświetlane z 15 zamówienia. Odświeżenie <xref:System.Windows.Forms.TreeView> jest pomijana przy użyciu <xref:System.Windows.Forms.TreeView.BeginUpdate%2A> i <xref:System.Windows.Forms.TreeView.EndUpdate%2A> metody i oczekiwania <xref:System.Windows.Forms.Cursor> jest wyświetlany podczas <xref:System.Windows.Forms.TreeView> tworzy i maluje <xref:System.Windows.Forms.TreeNode> obiektów. W tym przykładzie wymaga, że masz `Customer` obiekt, który może zawierać zbiór `Order` obiektów. Wymaga to również, że utworzono wystąpienie <xref:System.Windows.Forms.TreeView> kontrolować na <xref:System.Windows.Forms.Form>.  
  
 [!code-cpp[TreeView#1](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeView/CPP/treeview.cpp#1)]
 [!code-csharp[TreeView#1](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeView/CS/treeview.cs#1)]
 [!code-vb[TreeView#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeView/VB/treeview.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.TreeView" />
    <altmember cref="T:System.Windows.Forms.TreeNode" />
  </Docs>
  <Members>
    <MemberGroup MemberName="Add">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Dodaje nowy węzeł drzewa do kolekcji.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.TreeNode Add (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.TreeNode Add(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Add(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Add (text As String) As TreeNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::TreeNode ^ Add(System::String ^ text);" />
      <MemberSignature Language="F#" Value="abstract member Add : string -&gt; System.Windows.Forms.TreeNode&#xA;override this.Add : string -&gt; System.Windows.Forms.TreeNode" Usage="treeNodeCollection.Add text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">Tekst etykiety wyświetlany przez <see cref="T:System.Windows.Forms.TreeNode" />.</param>
        <summary>Dodaje nowy węzeł drzewa tekstu etykiety na końcu kolekcji bieżącego węzła drzewa.</summary>
        <returns>A <see cref="T:System.Windows.Forms.TreeNode" /> reprezentująca węzeł drzewa są dodawane do kolekcji.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można także dodać nowe <xref:System.Windows.Forms.TreeNode> obiekty do kolekcji przy użyciu <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> lub <xref:System.Windows.Forms.TreeNodeCollection.Insert%2A> metody.  
  
 Aby usunąć <xref:System.Windows.Forms.TreeNode> , wcześniej dodany, użyj <xref:System.Windows.Forms.TreeNodeCollection.Remove%2A>, <xref:System.Windows.Forms.TreeNodeCollection.RemoveAt%2A>, lub <xref:System.Windows.Forms.TreeNodeCollection.Clear%2A> metody.  
  
   
  
## Examples  
 Poniższy przykład kodu wyświetla informacje o kliencie w <xref:System.Windows.Forms.TreeView> kontroli. Węzły drzewa główne wyświetlenie nazwy klienta, a węzły drzewa podrzędnego wyświetlić numery przypisane do każdego klienta. W tym przykładzie 1000 klientów są wyświetlane z 15 zamówienia. Odświeżenie <xref:System.Windows.Forms.TreeView> jest pomijana przy użyciu <xref:System.Windows.Forms.TreeView.BeginUpdate%2A> i <xref:System.Windows.Forms.TreeView.EndUpdate%2A> metody i oczekiwania <xref:System.Windows.Forms.Cursor> jest wyświetlany podczas <xref:System.Windows.Forms.TreeView> tworzy i maluje <xref:System.Windows.Forms.TreeNode> obiektów. W tym przykładzie wymaga, że masz `Customer` obiekt, który może zawierać zbiór `Order` obiektów. Wymaga to również, że utworzono wystąpienie <xref:System.Windows.Forms.TreeView> kontrolować na <xref:System.Windows.Forms.Form>.  
  
 [!code-cpp[TreeView#1](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeView/CPP/treeview.cpp#1)]
 [!code-csharp[TreeView#1](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeView/CS/treeview.cs#1)]
 [!code-vb[TreeView#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeView/VB/treeview.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.TreeNodeCollection.Remove(System.Windows.Forms.TreeNode)" />
        <altmember cref="M:System.Windows.Forms.TreeNodeCollection.RemoveAt(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual int Add (System.Windows.Forms.TreeNode node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Add(class System.Windows.Forms.TreeNode node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Add(System.Windows.Forms.TreeNode)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Add (node As TreeNode) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int Add(System::Windows::Forms::TreeNode ^ node);" />
      <MemberSignature Language="F#" Value="abstract member Add : System.Windows.Forms.TreeNode -&gt; int&#xA;override this.Add : System.Windows.Forms.TreeNode -&gt; int" Usage="treeNodeCollection.Add node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Windows.Forms.TreeNode" />
      </Parameters>
      <Docs>
        <param name="node">
          <see cref="T:System.Windows.Forms.TreeNode" /> Do dodania do kolekcji.</param>
        <summary>Dodaje węzeł drzewa utworzone wcześniej na końcu kolekcji węzła drzewa.</summary>
        <returns>Wartość indeksu zaczynającego się od zera <see cref="T:System.Windows.Forms.TreeNode" /> dodawane do kolekcji węzła drzewa.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta wersja <xref:System.Windows.Forms.TreeNodeCollection.Add%2A> metoda pozwala dodać wcześniej utworzony <xref:System.Windows.Forms.TreeNode> obiektów na końcu kolekcji węzła drzewa.  
  
 Można także dodać nowe <xref:System.Windows.Forms.TreeNode> obiekty do kolekcji przy użyciu <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> lub <xref:System.Windows.Forms.TreeNodeCollection.Insert%2A> metody.  
  
 Aby usunąć <xref:System.Windows.Forms.TreeNode> , wcześniej dodany, użyj <xref:System.Windows.Forms.TreeNodeCollection.Remove%2A>, <xref:System.Windows.Forms.TreeNodeCollection.RemoveAt%2A>, lub <xref:System.Windows.Forms.TreeNodeCollection.Clear%2A> metody.  
  
> [!NOTE]
>  A <xref:System.Windows.Forms.TreeNode> można przypisać tylko do jednego <xref:System.Windows.Forms.TreeView> formantu w czasie. Aby dodać węzeł drzewa do nowej kontrolki widoku drzewa, musisz go usunąć z widoku drzewa najpierw lub sklonować ten projekt.  
  
   
  
## Examples  
 Poniższy przykład kodu wyświetla informacje o kliencie w <xref:System.Windows.Forms.TreeView> kontroli. Węzły drzewa główne wyświetlenie nazwy klienta, a węzły drzewa podrzędnego wyświetlić numery przypisane do każdego klienta. W tym przykładzie 1000 klientów są wyświetlane z 15 zamówienia. Odświeżenie <xref:System.Windows.Forms.TreeView> jest pomijana przy użyciu <xref:System.Windows.Forms.TreeView.BeginUpdate%2A> i <xref:System.Windows.Forms.TreeView.EndUpdate%2A> metody i oczekiwania <xref:System.Windows.Forms.Cursor> jest wyświetlany podczas <xref:System.Windows.Forms.TreeView> tworzy i maluje <xref:System.Windows.Forms.TreeNode> obiektów. W tym przykładzie wymaga, że masz `Customer` obiekt, który może zawierać zbiór `Order` obiektów. Wymaga to również, że utworzono wystąpienie <xref:System.Windows.Forms.TreeView> kontrolować na <xref:System.Windows.Forms.Form>.  
  
 [!code-cpp[TreeView#1](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeView/CPP/treeview.cpp#1)]
 [!code-csharp[TreeView#1](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeView/CS/treeview.cs#1)]
 [!code-vb[TreeView#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeView/VB/treeview.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="node" /> Jest aktualnie przypisana do innego <see cref="T:System.Windows.Forms.TreeView" />.</exception>
        <altmember cref="M:System.Windows.Forms.TreeNodeCollection.Remove(System.Windows.Forms.TreeNode)" />
        <altmember cref="M:System.Windows.Forms.TreeNodeCollection.RemoveAt(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.TreeNode Add (string key, string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.TreeNode Add(string key, string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Add(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Add (key As String, text As String) As TreeNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::TreeNode ^ Add(System::String ^ key, System::String ^ text);" />
      <MemberSignature Language="F#" Value="abstract member Add : string * string -&gt; System.Windows.Forms.TreeNode&#xA;override this.Add : string * string -&gt; System.Windows.Forms.TreeNode" Usage="treeNodeCollection.Add (key, text)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">Nazwa węzła drzewa.</param>
        <param name="text">Tekst do wyświetlenia w węźle drzewa.</param>
        <summary>Tworzy nowy węzeł drzewa z określonym kluczem i tekst i dodaje go do kolekcji.</summary>
        <returns>
          <see cref="T:System.Windows.Forms.TreeNode" /> Który został dodany do kolekcji.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.TreeNode.Name%2A> Właściwość odnosi się do klucza dla <xref:System.Windows.Forms.TreeNode> w <xref:System.Windows.Forms.TreeNodeCollection>.  
  
 Można także dodać nowe <xref:System.Windows.Forms.TreeNode> obiekty do kolekcji przy użyciu <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> lub <xref:System.Windows.Forms.TreeNodeCollection.Insert%2A> metody.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.TreeNode Add (string key, string text, int imageIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.TreeNode Add(string key, string text, int32 imageIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Add(System.String,System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Add (key As String, text As String, imageIndex As Integer) As TreeNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::TreeNode ^ Add(System::String ^ key, System::String ^ text, int imageIndex);" />
      <MemberSignature Language="F#" Value="abstract member Add : string * string * int -&gt; System.Windows.Forms.TreeNode&#xA;override this.Add : string * string * int -&gt; System.Windows.Forms.TreeNode" Usage="treeNodeCollection.Add (key, text, imageIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="imageIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="key">Nazwa węzła drzewa.</param>
        <param name="text">Tekst do wyświetlenia w węźle drzewa.</param>
        <param name="imageIndex">Indeks obrazu do wyświetlenia w węźle drzewa.</param>
        <summary>Tworzy węzeł drzewa z określonym kluczem, tekst i obraz i dodaje go do kolekcji.</summary>
        <returns>
          <see cref="T:System.Windows.Forms.TreeNode" /> Który został dodany do kolekcji.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.TreeNode.Name%2A> Właściwość odnosi się do klucza dla <xref:System.Windows.Forms.TreeNode> w <xref:System.Windows.Forms.TreeNodeCollection>.  
  
 `imageIndex` Parametr odnosi się do obrazu w <xref:System.Windows.Forms.TreeView.ImageList%2A> właściwości elementu nadrzędnego <xref:System.Windows.Forms.TreeView>.  
  
 Węzeł drzewa zostanie dodany na końcu kolekcji. Można także dodać nowe <xref:System.Windows.Forms.TreeNode> obiekty do kolekcji przy użyciu <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> lub <xref:System.Windows.Forms.TreeNodeCollection.Insert%2A> metody.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.TreeNode Add (string key, string text, string imageKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.TreeNode Add(string key, string text, string imageKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Add(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Add (key As String, text As String, imageKey As String) As TreeNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::TreeNode ^ Add(System::String ^ key, System::String ^ text, System::String ^ imageKey);" />
      <MemberSignature Language="F#" Value="abstract member Add : string * string * string -&gt; System.Windows.Forms.TreeNode&#xA;override this.Add : string * string * string -&gt; System.Windows.Forms.TreeNode" Usage="treeNodeCollection.Add (key, text, imageKey)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="imageKey" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">Nazwa węzła drzewa.</param>
        <param name="text">Tekst do wyświetlenia w węźle drzewa.</param>
        <param name="imageKey">Obraz wyświetlany w węźle drzewa.</param>
        <summary>Tworzy węzeł drzewa z określonym kluczem, tekst i obraz i dodaje go do kolekcji.</summary>
        <returns>
          <see cref="T:System.Windows.Forms.TreeNode" /> Który został dodany do kolekcji.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.TreeNode.Name%2A> Właściwość odnosi się do klucza dla <xref:System.Windows.Forms.TreeNode> w <xref:System.Windows.Forms.TreeNodeCollection>.  
  
 Węzeł drzewa zostanie dodany na końcu kolekcji. Można także dodać nowe <xref:System.Windows.Forms.TreeNode> obiekty do kolekcji przy użyciu <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> lub <xref:System.Windows.Forms.TreeNodeCollection.Insert%2A> metody.  
  
 `imageKey` Parametr odnosi się do obrazu w <xref:System.Windows.Forms.TreeView.ImageList%2A> właściwości elementu nadrzędnego <xref:System.Windows.Forms.TreeView>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.TreeNode Add (string key, string text, int imageIndex, int selectedImageIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.TreeNode Add(string key, string text, int32 imageIndex, int32 selectedImageIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Add(System.String,System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Add (key As String, text As String, imageIndex As Integer, selectedImageIndex As Integer) As TreeNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::TreeNode ^ Add(System::String ^ key, System::String ^ text, int imageIndex, int selectedImageIndex);" />
      <MemberSignature Language="F#" Value="abstract member Add : string * string * int * int -&gt; System.Windows.Forms.TreeNode&#xA;override this.Add : string * string * int * int -&gt; System.Windows.Forms.TreeNode" Usage="treeNodeCollection.Add (key, text, imageIndex, selectedImageIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="imageIndex" Type="System.Int32" />
        <Parameter Name="selectedImageIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="key">Nazwa węzła drzewa.</param>
        <param name="text">Tekst do wyświetlenia w węźle drzewa.</param>
        <param name="imageIndex">Indeks obrazu do wyświetlenia w węźle drzewa.</param>
        <param name="selectedImageIndex">Indeks obrazu, które mają być wyświetlane w węźle drzewa, gdy jest on w stanie wybrania.</param>
        <summary>Tworzy węzeł drzewa z określonym kluczem, tekst i obrazy i dodaje go do kolekcji.</summary>
        <returns>Węzeł drzewa, która została dodana do kolekcji.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.TreeNode.Name%2A> Właściwość odnosi się do klucza dla <xref:System.Windows.Forms.TreeNode> w <xref:System.Windows.Forms.TreeNodeCollection>.  
  
 Węzeł drzewa zostanie dodany na końcu kolekcji. Można także dodać nowe <xref:System.Windows.Forms.TreeNode> obiekty do kolekcji przy użyciu <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> lub <xref:System.Windows.Forms.TreeNodeCollection.Insert%2A> metody.  
  
 `imageIndex` Parametr odnosi się do obrazu w <xref:System.Windows.Forms.TreeView.ImageList%2A> właściwości elementu nadrzędnego <xref:System.Windows.Forms.TreeView>.  
  
 `selectedImageIndex` Parametr odnosi się do obrazu w <xref:System.Windows.Forms.TreeView.StateImageList%2A> właściwości elementu nadrzędnego <xref:System.Windows.Forms.TreeView>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.TreeNode Add (string key, string text, string imageKey, string selectedImageKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.TreeNode Add(string key, string text, string imageKey, string selectedImageKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Add(System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Add (key As String, text As String, imageKey As String, selectedImageKey As String) As TreeNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::TreeNode ^ Add(System::String ^ key, System::String ^ text, System::String ^ imageKey, System::String ^ selectedImageKey);" />
      <MemberSignature Language="F#" Value="abstract member Add : string * string * string * string -&gt; System.Windows.Forms.TreeNode&#xA;override this.Add : string * string * string * string -&gt; System.Windows.Forms.TreeNode" Usage="treeNodeCollection.Add (key, text, imageKey, selectedImageKey)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="imageKey" Type="System.String" />
        <Parameter Name="selectedImageKey" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">Nazwa węzła drzewa.</param>
        <param name="text">Tekst do wyświetlenia w węźle drzewa.</param>
        <param name="imageKey">Klucz obraz do wyświetlania w węźle drzewa.</param>
        <param name="selectedImageKey">Klucz obraz do wyświetlania, gdy węzeł jest w stanie wybrania.</param>
        <summary>Tworzy węzeł drzewa z określonym kluczem, tekst i obrazy i dodaje go do kolekcji.</summary>
        <returns>
          <see cref="T:System.Windows.Forms.TreeNode" /> Który został dodany do kolekcji.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.TreeNode.Name%2A> Właściwość odnosi się do klucza dla <xref:System.Windows.Forms.TreeNode> w <xref:System.Windows.Forms.TreeNodeCollection>.  
  
 Węzeł drzewa zostanie dodany na końcu kolekcji. Można także dodać nowe <xref:System.Windows.Forms.TreeNode> obiekty do kolekcji przy użyciu <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> lub <xref:System.Windows.Forms.TreeNodeCollection.Insert%2A> metody.  
  
 `imageKey` Parametr odnosi się do obrazu w <xref:System.Windows.Forms.TreeView.ImageList%2A> właściwości elementu nadrzędnego <xref:System.Windows.Forms.TreeView>.  
  
 `selectedImageKey` Parametr odnosi się do obrazu w <xref:System.Windows.Forms.TreeView.StateImageList%2A> właściwości elementu nadrzędnego <xref:System.Windows.Forms.TreeView>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddRange">
      <MemberSignature Language="C#" Value="public virtual void AddRange (System.Windows.Forms.TreeNode[] nodes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddRange(class System.Windows.Forms.TreeNode[] nodes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.AddRange(System.Windows.Forms.TreeNode[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddRange (nodes As TreeNode())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddRange(cli::array &lt;System::Windows::Forms::TreeNode ^&gt; ^ nodes);" />
      <MemberSignature Language="F#" Value="abstract member AddRange : System.Windows.Forms.TreeNode[] -&gt; unit&#xA;override this.AddRange : System.Windows.Forms.TreeNode[] -&gt; unit" Usage="treeNodeCollection.AddRange nodes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodes" Type="System.Windows.Forms.TreeNode[]" />
      </Parameters>
      <Docs>
        <param name="nodes">Tablica <see cref="T:System.Windows.Forms.TreeNode" /> obiekty reprezentujące węzły drzewa, aby dodać je do kolekcji.</param>
        <summary>Tablica węzły drzewa utworzonej wcześniej są dodawane do kolekcji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.TreeNode> Obiektów zawartych w `nodes` tablicy są dołączane na końcu kolekcji.  
  
 Możesz użyć <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> metodę, aby szybko dodać grupę wcześniej utworzone <xref:System.Windows.Forms.TreeNode> obiekty kolekcji zamiast ręcznego dodawania każdego <xref:System.Windows.Forms.TreeNode> do kolekcji przy użyciu <xref:System.Windows.Forms.TreeNodeCollection.Add%2A> metody.  
  
 Aby usunąć <xref:System.Windows.Forms.TreeNode> , wcześniej dodany, użyj <xref:System.Windows.Forms.TreeNodeCollection.Remove%2A>, <xref:System.Windows.Forms.TreeNodeCollection.RemoveAt%2A>, lub <xref:System.Windows.Forms.TreeNodeCollection.Clear%2A> metody.  
  
   
  
## Examples  
 Poniższy kod kopiuje przykład <xref:System.Windows.Forms.TreeNodeCollection> z <xref:System.Windows.Forms.TreeView> do tymczasowej <xref:System.Array>, a następnie dodaje zawartości tablicy do innej <xref:System.Windows.Forms.TreeView> przy użyciu <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> — metoda. <xref:System.Windows.Forms.TreeNodeCollection> Ze źródła <xref:System.Windows.Forms.TreeView> jest zaznaczone, przy użyciu <xref:System.Windows.Forms.TreeNodeCollection.Clear%2A> metody. W tym przykładzie wymaga, że masz dwa <xref:System.Windows.Forms.TreeView> określa jeden z kolekcją <xref:System.Windows.Forms.TreeNode> obiektów.  
  
 [!code-cpp[TreeNodeCollection_Clear#1](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeNodeCollection_Clear/CPP/treenodecollection_clear.cpp#1)]
 [!code-csharp[TreeNodeCollection_Clear#1](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeNodeCollection_Clear/CS/treenodecollection_clear.cs#1)]
 [!code-vb[TreeNodeCollection_Clear#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeNodeCollection_Clear/VB/treenodecollection_clear.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="nodes" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="nodes" /> jest elementem podrzędnym innego <see cref="T:System.Windows.Forms.TreeView" />.</exception>
        <altmember cref="M:System.Windows.Forms.TreeNodeCollection.Add(System.String)" />
        <altmember cref="M:System.Windows.Forms.TreeNodeCollection.CopyTo(System.Array,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public virtual void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Clear();" />
      <MemberSignature Language="F#" Value="abstract member Clear : unit -&gt; unit&#xA;override this.Clear : unit -&gt; unit" Usage="treeNodeCollection.Clear " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Usuwa wszystkie węzły drzewa z kolekcji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda umożliwia wyczyść całą kolekcję węzłów drzewa z widoku drzewa.  
  
 Aby usunąć węzeł drzewa poszczególnych z kolekcji, użyj <xref:System.Windows.Forms.TreeNodeCollection.Remove%2A> lub <xref:System.Windows.Forms.TreeNodeCollection.RemoveAt%2A> metody.  
  
 Aby dodać nowe <xref:System.Windows.Forms.TreeNode> obiekty do kolekcji, używają <xref:System.Windows.Forms.TreeNodeCollection.Add%2A>, <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A>, lub <xref:System.Windows.Forms.TreeNodeCollection.Insert%2A> metody.  
  
   
  
## Examples  
 Poniższy kod kopiuje przykład <xref:System.Windows.Forms.TreeNodeCollection> z <xref:System.Windows.Forms.TreeView> do tymczasowej <xref:System.Array>, a następnie dodaje zawartości tablicy do innej <xref:System.Windows.Forms.TreeView> przy użyciu <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> — metoda. <xref:System.Windows.Forms.TreeNodeCollection> Ze źródła <xref:System.Windows.Forms.TreeView> jest zaznaczone, przy użyciu <xref:System.Windows.Forms.TreeNodeCollection.Clear%2A> metody. W tym przykładzie wymaga, że masz dwa <xref:System.Windows.Forms.TreeView> określa jeden z kolekcją <xref:System.Windows.Forms.TreeNode> obiektów.  
  
 [!code-cpp[TreeNodeCollection_Clear#1](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeNodeCollection_Clear/CPP/treenodecollection_clear.cpp#1)]
 [!code-csharp[TreeNodeCollection_Clear#1](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeNodeCollection_Clear/CS/treenodecollection_clear.cs#1)]
 [!code-vb[TreeNodeCollection_Clear#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeNodeCollection_Clear/VB/treenodecollection_clear.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (System.Windows.Forms.TreeNode node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(class System.Windows.Forms.TreeNode node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Contains(System.Windows.Forms.TreeNode)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (node As TreeNode) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(System::Windows::Forms::TreeNode ^ node);" />
      <MemberSignature Language="F#" Value="member this.Contains : System.Windows.Forms.TreeNode -&gt; bool" Usage="treeNodeCollection.Contains node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Windows.Forms.TreeNode" />
      </Parameters>
      <Docs>
        <param name="node">
          <see cref="T:System.Windows.Forms.TreeNode" /> Do zlokalizowania w kolekcji.</param>
        <summary>Określa, czy węzeł drzewa jest członkiem kolekcji.</summary>
        <returns>
          <see langword="true" /> Jeśli <see cref="T:System.Windows.Forms.TreeNode" /> jest elementem członkowskim kolekcji; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda umożliwia określenie czy <xref:System.Windows.Forms.TreeNode> jest elementem członkowskim zbioru, zanim przystąpisz do wykonywania operacji na <xref:System.Windows.Forms.TreeNode>. Ta metoda służy do upewnij się, że <xref:System.Windows.Forms.TreeNode> została dodana do lub nadal jest elementem członkowskim kolekcji.  
  
 Ilość czasu potrzebnego do tej metody jest proporcjonalny do rozmiaru kolekcji węzła, więc możesz uniknąć przy dużych kolekcjach.  
  
 Ta metoda sprawdza, czy tylko równości odwołań. Nie możesz użyć do określenia, czy równoważne, ale inny węzeł znajduje się w kolekcji.  
  
> [!NOTE]
>  Jeden domniemanie wymagania równości odwołań jest nie można dostosować zachowanie tej metody dla pochodne <xref:System.Windows.Forms.TreeNode> typów poprzez zastąpienie <xref:System.Object.Equals%2A> metody <xref:System.Windows.Forms.TreeNode> klasy.  
  
   
  
## Examples  
 Poniższy przykład kodu Określa, czy użycie określonego <xref:System.Windows.Forms.TreeNode> znajduje się w <xref:System.Windows.Forms.TreeNodeCollection>, a następnie wylicza kolekcji. W tym przykładzie wymaga, że masz <xref:System.Windows.Forms.Form> z <xref:System.Windows.Forms.TreeView> zawierający <xref:System.Windows.Forms.TreeNodeCollection> zawierający <xref:System.Windows.Forms.TreeNode> o nazwie `myTreeNode2`.  
  
 [!code-cpp[TreeNodeCollection_Contains_GetEnumerator#1](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeNodeCollection_Contains_GetEnumerator/CPP/treenodecollection_contains_getenumerator.cpp#1)]
 [!code-csharp[TreeNodeCollection_Contains_GetEnumerator#1](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeNodeCollection_Contains_GetEnumerator/CS/treenodecollection_contains_getenumerator.cs#1)]
 [!code-vb[TreeNodeCollection_Contains_GetEnumerator#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeNodeCollection_Contains_GetEnumerator/VB/treenodecollection_contains_getenumerator.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContainsKey">
      <MemberSignature Language="C#" Value="public virtual bool ContainsKey (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ContainsKey(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.ContainsKey(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ContainsKey (key As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool ContainsKey(System::String ^ key);" />
      <MemberSignature Language="F#" Value="abstract member ContainsKey : string -&gt; bool&#xA;override this.ContainsKey : string -&gt; bool" Usage="treeNodeCollection.ContainsKey key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">Nazwa <see cref="T:System.Windows.Forms.TreeNode" /> do wyszukania.</param>
        <summary>Określa, czy kolekcja zawiera węzeł drzewa z określonym kluczem.</summary>
        <returns>
          <see langword="true" /> Aby wskazać, Kolekcja zawiera <see cref="T:System.Windows.Forms.TreeNode" /> z określonym kluczem, a w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.TreeNode.Name%2A> Właściwość odnosi się do klucza dla <xref:System.Windows.Forms.TreeNode> w <xref:System.Windows.Forms.TreeNodeCollection>.  
  
 Porównanie klucza nie jest rozróżniana wielkość liter. Jeśli `key` parametr jest `null` ani być pustym ciągiem <xref:System.Windows.Forms.TreeNodeCollection.Item%2A> właściwość zwraca `false`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (Array dest, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(class System.Array dest, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (dest As Array, index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CopyTo(Array ^ dest, int index);" />
      <MemberSignature Language="F#" Value="abstract member CopyTo : Array * int -&gt; unit&#xA;override this.CopyTo : Array * int -&gt; unit" Usage="treeNodeCollection.CopyTo (dest, index)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dest" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="dest">Tablica docelowa.</param>
        <param name="index">Indeks w tablicy docelowej, w których przechowywanie rozpoczyna się.</param>
        <summary>Kopiuje całą kolekcję do istniejącej tablicy w określonej lokalizacji w tablicy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu przedstawia liczbę <xref:System.Windows.Forms.TreeNode> obiekty w <xref:System.Windows.Forms.TreeNodeCollection>, kopiuje zawartość kolekcji <xref:System.Object> tablicy i wyświetla listę węzłów drzewa z <xref:System.Windows.Forms.Label> kontroli. W tym przykładzie wymaga, że masz <xref:System.Windows.Forms.TreeView> z co najmniej jednym <xref:System.Windows.Forms.TreeNode> w jego <xref:System.Windows.Forms.TreeNodeCollection>, a <xref:System.Windows.Forms.Label> kontrolować na <xref:System.Windows.Forms.Form>.  
  
 [!code-cpp[TreeNodeCollection_Count_CopyTo#1](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeNodeCollection_Count_CopyTo/CPP/treenodecollection_count_copyto.cpp#1)]
 [!code-csharp[TreeNodeCollection_Count_CopyTo#1](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeNodeCollection_Count_CopyTo/CS/treenodecollection_count_copyto.cs#1)]
 [!code-vb[TreeNodeCollection_Count_CopyTo#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeNodeCollection_Count_CopyTo/VB/treenodecollection_count_copyto.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TreeNodeCollection.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Windows.Forms.TreeNodeCollection.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8">
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera łączną liczbę <see cref="T:System.Windows.Forms.TreeNode" /> obiektów w kolekcji.</summary>
        <value>Całkowita liczba <see cref="T:System.Windows.Forms.TreeNode" /> obiektów w kolekcji.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.TreeNodeCollection.Count%2A> Właściwości jest przechowywana liczba <xref:System.Windows.Forms.TreeNode> przypisanego do kolekcji obiektów. Możesz użyć <xref:System.Windows.Forms.TreeNodeCollection.Count%2A> wartości właściwości jako górne granice pętli do iterowania po kolekcji.  
  
> [!NOTE]
>  Ponieważ wartość indeks kolekcji jest liczony od zera indeks, należy odjąć jeden ze zmiennej pętli. Jeśli to nie jest objęty, spowoduje to przekroczenie górną granicą zbierania i throw <xref:System.IndexOutOfRangeException> wyjątku.  
  
   
  
## Examples  
 Poniższy przykład kodu przedstawia liczbę <xref:System.Windows.Forms.TreeNode> obiekty w <xref:System.Windows.Forms.TreeNodeCollection>, kopiuje zawartość kolekcji <xref:System.Object> tablicy i wyświetla listę węzłów drzewa z <xref:System.Windows.Forms.Label> kontroli. W tym przykładzie wymaga, że masz <xref:System.Windows.Forms.TreeView> z co najmniej jednym <xref:System.Windows.Forms.TreeNode> w jego <xref:System.Windows.Forms.TreeNodeCollection>, a <xref:System.Windows.Forms.Label> kontrolować na <xref:System.Windows.Forms.Form>.  
  
 [!code-cpp[TreeNodeCollection_Count_CopyTo#1](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeNodeCollection_Count_CopyTo/CPP/treenodecollection_count_copyto.cpp#1)]
 [!code-csharp[TreeNodeCollection_Count_CopyTo#1](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeNodeCollection_Count_CopyTo/CS/treenodecollection_count_copyto.cs#1)]
 [!code-vb[TreeNodeCollection_Count_CopyTo#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeNodeCollection_Count_CopyTo/VB/treenodecollection_count_copyto.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Find">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.TreeNode[] Find (string key, bool searchAllChildren);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.TreeNode[] Find(string key, bool searchAllChildren) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Find(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Find (key As String, searchAllChildren As Boolean) As TreeNode()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Windows::Forms::TreeNode ^&gt; ^ Find(System::String ^ key, bool searchAllChildren);" />
      <MemberSignature Language="F#" Value="member this.Find : string * bool -&gt; System.Windows.Forms.TreeNode[]" Usage="treeNodeCollection.Find (key, searchAllChildren)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="searchAllChildren" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="key">Nazwa węzła drzewa, aby wyszukać.</param>
        <param name="searchAllChildren">
          <see langword="true" /> Aby wyszukać węzły podrzędne węzły drzewa; w przeciwnym razie <see langword="false" />.</param>
        <summary>Umożliwia znalezienie węzłów drzewa z określonym kluczem, opcjonalnie wyszukiwanie węzłów podrzędnych.</summary>
        <returns>Tablica <see cref="T:System.Windows.Forms.TreeNode" /> obiekty, których <see cref="P:System.Windows.Forms.TreeNode.Name" /> właściwości jest zgodny z określonym kluczem.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.TreeNode.Name%2A> Właściwość odnosi się do klucza dla <xref:System.Windows.Forms.TreeNode> w <xref:System.Windows.Forms.TreeNodeCollection>.  
  
 Porównanie klucza nie jest rozróżniana wielkość liter. Jeśli `key` parametr jest `null` lub ciąg pusty lub nie ma żadnych dopasowań <xref:System.Windows.Forms.TreeNodeCollection.Item%2A> właściwość zwraca pustą tablicę`.`  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IEnumerator ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.IEnumerator&#xA;override this.GetEnumerator : unit -&gt; System.Collections.IEnumerator" Usage="treeNodeCollection.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca moduł wyliczający, który może służyć do iterowania po kolekcji węzła drzewa.</summary>
        <returns>
          <see cref="T:System.Collections.IEnumerator" /> Reprezentujący kolekcji węzła drzewa.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu Określa, czy użycie określonego <xref:System.Windows.Forms.TreeNode> znajduje się w <xref:System.Windows.Forms.TreeNodeCollection>, a następnie wylicza kolekcji. W tym przykładzie wymaga, że masz <xref:System.Windows.Forms.Form> z <xref:System.Windows.Forms.TreeView> zawierający <xref:System.Windows.Forms.TreeNodeCollection> zawierający <xref:System.Windows.Forms.TreeNode> o nazwie `myTreeNode2`.  
  
 [!code-cpp[TreeNodeCollection_Contains_GetEnumerator#1](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeNodeCollection_Contains_GetEnumerator/CPP/treenodecollection_contains_getenumerator.cpp#1)]
 [!code-csharp[TreeNodeCollection_Contains_GetEnumerator#1](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeNodeCollection_Contains_GetEnumerator/CS/treenodecollection_contains_getenumerator.cs#1)]
 [!code-vb[TreeNodeCollection_Contains_GetEnumerator#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeNodeCollection_Contains_GetEnumerator/VB/treenodecollection_contains_getenumerator.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (System.Windows.Forms.TreeNode node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(class System.Windows.Forms.TreeNode node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.IndexOf(System.Windows.Forms.TreeNode)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (node As TreeNode) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(System::Windows::Forms::TreeNode ^ node);" />
      <MemberSignature Language="F#" Value="member this.IndexOf : System.Windows.Forms.TreeNode -&gt; int" Usage="treeNodeCollection.IndexOf node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Windows.Forms.TreeNode" />
      </Parameters>
      <Docs>
        <param name="node">
          <see cref="T:System.Windows.Forms.TreeNode" /> Do zlokalizowania w kolekcji.</param>
        <summary>Zwraca indeks węzła drzewa w kolekcji.</summary>
        <returns>Liczony od zera indeks elementu w kolekcji węzła drzewa; w przeciwnym razie, wartość -1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ilość czasu potrzebnego do tej metody jest proporcjonalny do rozmiaru kolekcji węzła, więc możesz uniknąć przy dużych kolekcjach.  
  
 Ta metoda sprawdza, czy tylko równości odwołań. Nie możesz użyć do pobrania indeks równoważne, ale inny węzeł w kolekcji.  
  
> [!NOTE]
>  Jeden domniemanie wymagania równości odwołań jest nie można dostosować zachowanie tej metody dla pochodne <xref:System.Windows.Forms.TreeNode> typów poprzez zastąpienie <xref:System.Object.Equals%2A> metody <xref:System.Windows.Forms.TreeNode> klasy.  
  
   
  
## Examples  
 Poniższy przykład kodu Określa, czy użycie określonego <xref:System.Windows.Forms.TreeNode> znajduje się w <xref:System.Windows.Forms.TreeNodeCollection>, a następnie wylicza kolekcji. W tym przykładzie wymaga, że masz <xref:System.Windows.Forms.Form> z <xref:System.Windows.Forms.TreeView> zawierający <xref:System.Windows.Forms.TreeNodeCollection> zawierający <xref:System.Windows.Forms.TreeNode> o nazwie `myTreeNode2`.  
  
 [!code-cpp[TreeNodeCollection_Contains_GetEnumerator#2](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeNodeCollection_Contains_GetEnumerator/CPP/treenodecollection_contains_getenumerator.cpp#2)]
 [!code-csharp[TreeNodeCollection_Contains_GetEnumerator#2](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeNodeCollection_Contains_GetEnumerator/CS/treenodecollection_contains_getenumerator.cs#2)]
 [!code-vb[TreeNodeCollection_Contains_GetEnumerator#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeNodeCollection_Contains_GetEnumerator/VB/treenodecollection_contains_getenumerator.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOfKey">
      <MemberSignature Language="C#" Value="public virtual int IndexOfKey (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOfKey(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.IndexOfKey(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOfKey (key As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOfKey(System::String ^ key);" />
      <MemberSignature Language="F#" Value="abstract member IndexOfKey : string -&gt; int&#xA;override this.IndexOfKey : string -&gt; int" Usage="treeNodeCollection.IndexOfKey key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">Nazwa węzła drzewa, aby wyszukać.</param>
        <summary>Zwraca indeks pierwszego wystąpienia węzła drzewa z określonym kluczem.</summary>
        <returns>Liczony od zera indeks pierwszego wystąpienia węzła drzewa z określonym kluczem, jeśli znaleziono; w przeciwnym razie, wartość -1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli <xref:System.Windows.Forms.TreeNodeCollection.IndexOfKey%2A> nazywa się kolejno, ostatni zwrócony indeksu będą sprawdzane pod kątem dopasowania klucza najpierw, a jeśli nie zostanie odnaleziony odpowiednik, wyszukiwanie rozpoczyna się na początku kolekcji.  
  
 <xref:System.Windows.Forms.TreeNode.Name%2A> Właściwość odnosi się do klucza dla <xref:System.Windows.Forms.TreeNode> w <xref:System.Windows.Forms.TreeNodeCollection>.  
  
 Porównanie klucza nie jest rozróżniana wielkość liter. Jeśli `key` jest `null` ani być pustym ciągiem <xref:System.Windows.Forms.TreeNodeCollection.Item%2A> właściwość zwraca wartość -1.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Insert">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Wstawia element w kolekcji w określonej lokalizacji.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.TreeNode Insert (int index, string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.TreeNode Insert(int32 index, string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Insert(System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Insert (index As Integer, text As String) As TreeNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::TreeNode ^ Insert(int index, System::String ^ text);" />
      <MemberSignature Language="F#" Value="abstract member Insert : int * string -&gt; System.Windows.Forms.TreeNode&#xA;override this.Insert : int * string -&gt; System.Windows.Forms.TreeNode" Usage="treeNodeCollection.Insert (index, text)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="index">Lokalizacja w obrębie kolekcji można wstawić węzła.</param>
        <param name="text">Tekst do wyświetlenia w węźle drzewa.</param>
        <summary>Tworzy węzeł drzewa określonym tekstem i wstawia go pod określonym indeksem.</summary>
        <returns>
          <see cref="T:System.Windows.Forms.TreeNode" /> , Został wstawiony w kolekcji.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli <xref:System.Windows.Forms.TreeView.Sorted%2A> właściwość jest ustawiona na `true`, `index` wartość parametru jest ignorowana. <xref:System.Windows.Forms.TreeNode> Są wstawiane do widoku drzewa i <xref:System.Windows.Forms.TreeView> jest sortowana ponownie.  
  
 Można także dodać nowe <xref:System.Windows.Forms.TreeNode> obiekty do kolekcji przy użyciu <xref:System.Windows.Forms.TreeNodeCollection.Add%2A> lub <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> metody.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public virtual void Insert (int index, System.Windows.Forms.TreeNode node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Insert(int32 index, class System.Windows.Forms.TreeNode node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Insert(System.Int32,System.Windows.Forms.TreeNode)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Insert (index As Integer, node As TreeNode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Insert(int index, System::Windows::Forms::TreeNode ^ node);" />
      <MemberSignature Language="F#" Value="abstract member Insert : int * System.Windows.Forms.TreeNode -&gt; unit&#xA;override this.Insert : int * System.Windows.Forms.TreeNode -&gt; unit" Usage="treeNodeCollection.Insert (index, node)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="node" Type="System.Windows.Forms.TreeNode" />
      </Parameters>
      <Docs>
        <param name="index">Lokalizacja indeksowane w obrębie kolekcji można wstawić węzła drzewa.</param>
        <param name="node">
          <see cref="T:System.Windows.Forms.TreeNode" /> Do wstawienia do kolekcji.</param>
        <summary>Wstawia istniejący węzeł drzewa w kolekcji węzła drzewa w określonej lokalizacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli <xref:System.Windows.Forms.TreeView.Sorted%2A?displayProperty=nameWithType> właściwość jest ustawiona na `true`, `index` wartość parametru jest ignorowana. <xref:System.Windows.Forms.TreeNode> Są wstawiane do widoku drzewa i <xref:System.Windows.Forms.TreeView> zastosowanie.  
  
 Można także dodać nowe <xref:System.Windows.Forms.TreeNode> obiekty do kolekcji przy użyciu <xref:System.Windows.Forms.TreeNodeCollection.Add%2A> lub <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> metody.  
  
 Aby usunąć <xref:System.Windows.Forms.TreeNode> , wcześniej dodany, użyj <xref:System.Windows.Forms.TreeNodeCollection.Remove%2A>, <xref:System.Windows.Forms.TreeNodeCollection.RemoveAt%2A>, lub <xref:System.Windows.Forms.TreeNodeCollection.Clear%2A> metody.  
  
> [!NOTE]
>  A <xref:System.Windows.Forms.TreeNode> można przypisać tylko do jednego <xref:System.Windows.Forms.TreeView> formantu w czasie. Aby dodać węzeł drzewa do nowej kontrolki widoku drzewa, musisz go usunąć z widoku drzewa najpierw lub sklonować ten projekt.  
  
   
  
## Examples  
 Poniższy przykład kodu Usuwa zaznaczonego węzła drzewa z jednego <xref:System.Windows.Forms.TreeView> i dodaje go do innego, jeśli obie kolekcje węzła drzewa nie są tylko do odczytu. Podczas <xref:System.Windows.Forms.Button> po kliknięciu <xref:System.Windows.Forms.TreeNode> reprezentowany przez <xref:System.Windows.Forms.TreeView.SelectedNode%2A?displayProperty=nameWithType> właściwości zostanie usunięta z jedną <xref:System.Windows.Forms.TreeView> przy użyciu <xref:System.Windows.Forms.TreeNodeCollection.Remove%2A> metody i dodane do innego <xref:System.Windows.Forms.TreeView> przy użyciu <xref:System.Windows.Forms.TreeNodeCollection.Insert%2A> metody. W tym przykładzie wymaga, że masz <xref:System.Windows.Forms.Form> zawierający dwa <xref:System.Windows.Forms.TreeView> kontrolek i <xref:System.Windows.Forms.Button>. <xref:System.Windows.Forms.TreeView> Kontrolki powinien zostać nazwany `treeView1` i `treeView2`.  
  
 [!code-cpp[TreeNodeCollection#1](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeNodeCollection/CPP/treenodecollection.cpp#1)]
 [!code-csharp[TreeNodeCollection#1](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeNodeCollection/CS/treenodecollection.cs#1)]
 [!code-vb[TreeNodeCollection#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeNodeCollection/VB/treenodecollection.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="node" /> Jest aktualnie przypisana do innego <see cref="T:System.Windows.Forms.TreeView" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.TreeNode Insert (int index, string key, string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.TreeNode Insert(int32 index, string key, string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Insert(System.Int32,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Insert (index As Integer, key As String, text As String) As TreeNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::TreeNode ^ Insert(int index, System::String ^ key, System::String ^ text);" />
      <MemberSignature Language="F#" Value="abstract member Insert : int * string * string -&gt; System.Windows.Forms.TreeNode&#xA;override this.Insert : int * string * string -&gt; System.Windows.Forms.TreeNode" Usage="treeNodeCollection.Insert (index, key, text)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="index">Lokalizacja w obrębie kolekcji można wstawić węzła.</param>
        <param name="key">Nazwa węzła drzewa.</param>
        <param name="text">Tekst do wyświetlenia w węźle drzewa.</param>
        <summary>Tworzy węzeł drzewa określony tekst i kluczem i wstawia je do kolekcji.</summary>
        <returns>
          <see cref="T:System.Windows.Forms.TreeNode" /> , Został wstawiony w kolekcji.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli <xref:System.Windows.Forms.TreeView.Sorted%2A> właściwość jest ustawiona na `true`, `index` wartość parametru jest ignorowana. <xref:System.Windows.Forms.TreeNode> Są wstawiane do widoku drzewa i <xref:System.Windows.Forms.TreeView> jest sortowana ponownie.  
  
 Można także dodać nowe <xref:System.Windows.Forms.TreeNode> obiekty do kolekcji przy użyciu <xref:System.Windows.Forms.TreeNodeCollection.Add%2A> lub <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> metody.  
  
 <xref:System.Windows.Forms.TreeNode.Name%2A> Właściwość odnosi się do klucza dla <xref:System.Windows.Forms.TreeNode> w <xref:System.Windows.Forms.TreeNodeCollection>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.TreeNode Insert (int index, string key, string text, int imageIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.TreeNode Insert(int32 index, string key, string text, int32 imageIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Insert(System.Int32,System.String,System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Insert (index As Integer, key As String, text As String, imageIndex As Integer) As TreeNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::TreeNode ^ Insert(int index, System::String ^ key, System::String ^ text, int imageIndex);" />
      <MemberSignature Language="F#" Value="abstract member Insert : int * string * string * int -&gt; System.Windows.Forms.TreeNode&#xA;override this.Insert : int * string * string * int -&gt; System.Windows.Forms.TreeNode" Usage="treeNodeCollection.Insert (index, key, text, imageIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="imageIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Lokalizacja w obrębie kolekcji można wstawić węzła.</param>
        <param name="key">Nazwa węzła drzewa.</param>
        <param name="text">Tekst do wyświetlenia w węźle drzewa.</param>
        <param name="imageIndex">Indeks obrazu do wyświetlenia w węźle drzewa.</param>
        <summary>Tworzy węzeł drzewa z określonym kluczem, tekst i obraz i wstawia je do kolekcji pod określonym indeksem.</summary>
        <returns>
          <see cref="T:System.Windows.Forms.TreeNode" /> , Został wstawiony w kolekcji.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli <xref:System.Windows.Forms.TreeView.Sorted%2A> właściwość jest ustawiona na `true`, `index` wartość parametru jest ignorowana. <xref:System.Windows.Forms.TreeNode> Są wstawiane do widoku drzewa i <xref:System.Windows.Forms.TreeView> jest sortowana ponownie.  
  
 Można także dodać nowe <xref:System.Windows.Forms.TreeNode> obiekty do kolekcji przy użyciu <xref:System.Windows.Forms.TreeNodeCollection.Add%2A> lub <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> metody.  
  
 <xref:System.Windows.Forms.TreeNode.Name%2A> Właściwość odnosi się do klucza dla <xref:System.Windows.Forms.TreeNode> w <xref:System.Windows.Forms.TreeNodeCollection>.  
  
 `imageIndex` Parametr odnosi się do obrazu w <xref:System.Windows.Forms.TreeView.ImageList%2A> właściwości elementu nadrzędnego <xref:System.Windows.Forms.TreeView>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.TreeNode Insert (int index, string key, string text, string imageKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.TreeNode Insert(int32 index, string key, string text, string imageKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Insert(System.Int32,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Insert (index As Integer, key As String, text As String, imageKey As String) As TreeNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::TreeNode ^ Insert(int index, System::String ^ key, System::String ^ text, System::String ^ imageKey);" />
      <MemberSignature Language="F#" Value="abstract member Insert : int * string * string * string -&gt; System.Windows.Forms.TreeNode&#xA;override this.Insert : int * string * string * string -&gt; System.Windows.Forms.TreeNode" Usage="treeNodeCollection.Insert (index, key, text, imageKey)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="imageKey" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="index">Lokalizacja w obrębie kolekcji można wstawić węzła.</param>
        <param name="key">Nazwa węzła drzewa.</param>
        <param name="text">Tekst do wyświetlenia w węźle drzewa.</param>
        <param name="imageKey">Klucz obraz do wyświetlania w węźle drzewa.</param>
        <summary>Tworzy węzeł drzewa z określonym kluczem, tekst i obraz i wstawia je do kolekcji pod określonym indeksem.</summary>
        <returns>
          <see cref="T:System.Windows.Forms.TreeNode" /> , Został wstawiony w kolekcji.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli <xref:System.Windows.Forms.TreeView.Sorted%2A> właściwość jest ustawiona na `true`, `index` wartość parametru jest ignorowana. <xref:System.Windows.Forms.TreeNode> Są wstawiane do widoku drzewa i <xref:System.Windows.Forms.TreeView> jest sortowana ponownie.  
  
 Można także dodać nowe <xref:System.Windows.Forms.TreeNode> obiekty do kolekcji przy użyciu <xref:System.Windows.Forms.TreeNodeCollection.Add%2A> lub <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> metody.  
  
 <xref:System.Windows.Forms.TreeNode.Name%2A> Właściwość odnosi się do klucza dla <xref:System.Windows.Forms.TreeNode> w <xref:System.Windows.Forms.TreeNodeCollection>.  
  
 `imageKey` Parametr odnosi się do obrazu w <xref:System.Windows.Forms.TreeView.ImageList%2A> właściwości elementu nadrzędnego <xref:System.Windows.Forms.TreeView>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.TreeNode Insert (int index, string key, string text, int imageIndex, int selectedImageIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.TreeNode Insert(int32 index, string key, string text, int32 imageIndex, int32 selectedImageIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Insert(System.Int32,System.String,System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Insert (index As Integer, key As String, text As String, imageIndex As Integer, selectedImageIndex As Integer) As TreeNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::TreeNode ^ Insert(int index, System::String ^ key, System::String ^ text, int imageIndex, int selectedImageIndex);" />
      <MemberSignature Language="F#" Value="abstract member Insert : int * string * string * int * int -&gt; System.Windows.Forms.TreeNode&#xA;override this.Insert : int * string * string * int * int -&gt; System.Windows.Forms.TreeNode" Usage="treeNodeCollection.Insert (index, key, text, imageIndex, selectedImageIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="imageIndex" Type="System.Int32" />
        <Parameter Name="selectedImageIndex" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Lokalizacja w obrębie kolekcji można wstawić węzła.</param>
        <param name="key">Nazwa węzła drzewa.</param>
        <param name="text">Tekst do wyświetlenia w węźle drzewa.</param>
        <param name="imageIndex">Indeks obrazu do wyświetlenia w węźle drzewa.</param>
        <param name="selectedImageIndex">Indeks obrazu do wyświetlenia w węźle drzewa, gdy jest on w stanie wybrania.</param>
        <summary>Tworzy węzeł drzewa z określonym kluczem, tekst i obrazy i wstawia je do kolekcji pod określonym indeksem.</summary>
        <returns>
          <see cref="T:System.Windows.Forms.TreeNode" /> , Został wstawiony w kolekcji.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli <xref:System.Windows.Forms.TreeView.Sorted%2A> właściwość jest ustawiona na `true`, `index` wartość parametru jest ignorowana. <xref:System.Windows.Forms.TreeNode> Są wstawiane do widoku drzewa i <xref:System.Windows.Forms.TreeView> jest sortowana ponownie.  
  
 Można także dodać nowe <xref:System.Windows.Forms.TreeNode> obiekty do kolekcji przy użyciu <xref:System.Windows.Forms.TreeNodeCollection.Add%2A> lub <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> metody.  
  
 <xref:System.Windows.Forms.TreeNode.Name%2A> Właściwość odnosi się do klucza dla <xref:System.Windows.Forms.TreeNode> w <xref:System.Windows.Forms.TreeNodeCollection>.  
  
 `imageIndex` Parametr odnosi się do obrazu w <xref:System.Windows.Forms.TreeView.ImageList%2A> właściwości elementu nadrzędnego <xref:System.Windows.Forms.TreeView>.  
  
 `selectedimageIndex` Parametr odnosi się do obrazu w <xref:System.Windows.Forms.TreeView.StateImageList%2A> właściwości elementu nadrzędnego <xref:System.Windows.Forms.TreeView>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.TreeNode Insert (int index, string key, string text, string imageKey, string selectedImageKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.TreeNode Insert(int32 index, string key, string text, string imageKey, string selectedImageKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Insert(System.Int32,System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Insert (index As Integer, key As String, text As String, imageKey As String, selectedImageKey As String) As TreeNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::TreeNode ^ Insert(int index, System::String ^ key, System::String ^ text, System::String ^ imageKey, System::String ^ selectedImageKey);" />
      <MemberSignature Language="F#" Value="abstract member Insert : int * string * string * string * string -&gt; System.Windows.Forms.TreeNode&#xA;override this.Insert : int * string * string * string * string -&gt; System.Windows.Forms.TreeNode" Usage="treeNodeCollection.Insert (index, key, text, imageKey, selectedImageKey)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="key" Type="System.String" />
        <Parameter Name="text" Type="System.String" />
        <Parameter Name="imageKey" Type="System.String" />
        <Parameter Name="selectedImageKey" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="index">Lokalizacja w obrębie kolekcji można wstawić węzła.</param>
        <param name="key">Nazwa węzła drzewa.</param>
        <param name="text">Tekst do wyświetlenia w węźle drzewa.</param>
        <param name="imageKey">Klucz obraz do wyświetlania w węźle drzewa.</param>
        <param name="selectedImageKey">Klucz obraz do wyświetlania w węźle drzewa, gdy jest on w stanie wybrania.</param>
        <summary>Tworzy węzeł drzewa z określonym kluczem, tekst i obrazy i wstawia je do kolekcji pod określonym indeksem.</summary>
        <returns>
          <see cref="T:System.Windows.Forms.TreeNode" /> , Został wstawiony w kolekcji.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli <xref:System.Windows.Forms.TreeView.Sorted%2A> właściwość jest ustawiona na `true`, `index` wartość parametru jest ignorowana. <xref:System.Windows.Forms.TreeNode> Są wstawiane do widoku drzewa i <xref:System.Windows.Forms.TreeView> jest sortowana ponownie.  
  
 Można także dodać nowe <xref:System.Windows.Forms.TreeNode> obiekty do kolekcji przy użyciu <xref:System.Windows.Forms.TreeNodeCollection.Add%2A> lub <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> metody.  
  
 <xref:System.Windows.Forms.TreeNode.Name%2A> Właściwość odnosi się do klucza dla <xref:System.Windows.Forms.TreeNode> w <xref:System.Windows.Forms.TreeNodeCollection>.  
  
 `imageKey` Parametr odnosi się do obrazu w <xref:System.Windows.Forms.TreeView.ImageList%2A> właściwości elementu nadrzędnego <xref:System.Windows.Forms.TreeView>.  
  
 `selectedimageKey` Parametr odnosi się do obrazu w <xref:System.Windows.Forms.TreeView.StateImageList%2A> właściwości elementu nadrzędnego <xref:System.Windows.Forms.TreeView>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TreeNodeCollection.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReadOnly : bool" Usage="System.Windows.Forms.TreeNodeCollection.IsReadOnly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy kolekcja jest tylko do odczytu.</summary>
        <value>
          <see langword="true" /> Jeśli kolekcja jest tylko do odczytu. w przeciwnym razie <see langword="false" />. Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu Usuwa zaznaczonego węzła drzewa z jednego <xref:System.Windows.Forms.TreeView> i dodaje go do innego, jeśli obie kolekcje węzła drzewa nie są tylko do odczytu. Podczas <xref:System.Windows.Forms.Button> po kliknięciu <xref:System.Windows.Forms.TreeNode> reprezentowany przez <xref:System.Windows.Forms.TreeView.SelectedNode%2A?displayProperty=nameWithType> właściwości zostanie usunięta z jedną <xref:System.Windows.Forms.TreeView> przy użyciu <xref:System.Windows.Forms.TreeNodeCollection.Remove%2A> metody i dodane do innego <xref:System.Windows.Forms.TreeView> przy użyciu <xref:System.Windows.Forms.TreeNodeCollection.Insert%2A> metody. W tym przykładzie wymaga, że masz <xref:System.Windows.Forms.Form> zawierający dwa <xref:System.Windows.Forms.TreeView> kontrolek i <xref:System.Windows.Forms.Button>. <xref:System.Windows.Forms.TreeView> Kontrolki powinien zostać nazwany `treeView1` i `treeView2`.  
  
 [!code-cpp[TreeNodeCollection#1](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeNodeCollection/CPP/treenodecollection.cpp#1)]
 [!code-csharp[TreeNodeCollection#1](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeNodeCollection/CS/treenodecollection.cs#1)]
 [!code-vb[TreeNodeCollection#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeNodeCollection/VB/treenodecollection.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Item">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Pobiera lub ustawia węzeł drzewa w tej kolekcji.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.TreeNode this[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.TreeNode Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TreeNodeCollection.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public Overridable Property Item(index As Integer) As TreeNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::TreeNode ^ default[int] { System::Windows::Forms::TreeNode ^ get(int index); void set(int index, System::Windows::Forms::TreeNode ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Item(int) : System.Windows.Forms.TreeNode with get, set" Usage="System.Windows.Forms.TreeNodeCollection.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Lokalizacja indeksowanych <see cref="T:System.Windows.Forms.TreeNode" /> w kolekcji.</param>
        <summary>Pobiera lub ustawia <see cref="T:System.Windows.Forms.TreeNode" /> w określonym indeksowane lokalizacji w kolekcji.</summary>
        <value>
          <see cref="T:System.Windows.Forms.TreeNode" /> w określonym indeksowane lokalizacji w kolekcji.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby przypisać <xref:System.Windows.Forms.TreeNode> obiekty w określonej lokalizacji lub pobierać je z <xref:System.Windows.Forms.TreeNodeCollection>, można odwołać się do obiektu kolekcji z wartością określonego indeksu. Wartość indeksu <xref:System.Windows.Forms.TreeNodeCollection> to indeks zaczynający się od zera.  
  
   
  
## Examples  
 Poniższy przykład kodu usuwa pierwszy <xref:System.Windows.Forms.TreeNode> z <xref:System.Windows.Forms.TreeView> jeśli jego <xref:System.Windows.Forms.TreeNode.Text%2A?displayProperty=nameWithType> właściwość jest ustawiona na "Node0". Gdy <xref:System.Windows.Forms.Button> zostanie kliknięty pierwszy <xref:System.Windows.Forms.TreeNode> w <xref:System.Windows.Forms.TreeView> jest usuwana za pomocą <xref:System.Windows.Forms.TreeNodeCollection.RemoveAt%2A> metody. W tym przykładzie wymaga, że utworzono <xref:System.Windows.Forms.TreeView> i <xref:System.Windows.Forms.Button> na <xref:System.Windows.Forms.Form>. Pierwszy <xref:System.Windows.Forms.TreeNode> w swojej <xref:System.Windows.Forms.TreeView> powinien mieć właściwość tekst "Node0."  
  
 [!code-cpp[TreeNodeCollection#2](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeNodeCollection/CPP/treenodecollection.cpp#2)]
 [!code-csharp[TreeNodeCollection#2](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeNodeCollection/CS/treenodecollection.cs#2)]
 [!code-vb[TreeNodeCollection#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeNodeCollection/VB/treenodecollection.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <paramref name="index" /> Wartość jest mniejsza niż 0 lub jest większa niż liczba węzłów drzewa w kolekcji.</exception>
        <altmember cref="P:System.Windows.Forms.TreeNodeCollection.Count" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.TreeNode this[string key] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.TreeNode Item(string)" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TreeNodeCollection.Item(System.String)" />
      <MemberSignature Language="VB.NET" Value="Default Public Overridable ReadOnly Property Item(key As String) As TreeNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::TreeNode ^ default[System::String ^] { System::Windows::Forms::TreeNode ^ get(System::String ^ key); };" />
      <MemberSignature Language="F#" Value="member this.Item(string) : System.Windows.Forms.TreeNode" Usage="System.Windows.Forms.TreeNodeCollection.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">Nazwa <see cref="T:System.Windows.Forms.TreeNode" /> można pobrać z kolekcji.</param>
        <summary>Pobiera węzeł drzewa z określonym kluczem z kolekcji.</summary>
        <value>
          <see cref="T:System.Windows.Forms.TreeNode" /> z określonym kluczem.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.TreeNode.Name%2A> Właściwość odnosi się do klucza dla <xref:System.Windows.Forms.TreeNode> w <xref:System.Windows.Forms.TreeNodeCollection>.  
  
 Porównanie klucza nie jest rozróżniana wielkość liter. Jeśli `key` parametr jest `null` ani być pustym ciągiem <xref:System.Windows.Forms.TreeNodeCollection.Item%2A> właściwość zwraca `null`.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (System.Windows.Forms.TreeNode node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(class System.Windows.Forms.TreeNode node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Remove(System.Windows.Forms.TreeNode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (node As TreeNode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(System::Windows::Forms::TreeNode ^ node);" />
      <MemberSignature Language="F#" Value="member this.Remove : System.Windows.Forms.TreeNode -&gt; unit" Usage="treeNodeCollection.Remove node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Windows.Forms.TreeNode" />
      </Parameters>
      <Docs>
        <param name="node">
          <see cref="T:System.Windows.Forms.TreeNode" /> Do usunięcia.</param>
        <summary>Usunięcie węzła drzewa z kolekcji węzła drzewa.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy <xref:System.Windows.Forms.TreeNode> zostanie usunięty z kolekcji węzła drzewa ań kolejnych węzłów są przenoszone w górę o jedną pozycję w kolekcji.  
  
 Można również usunąć <xref:System.Windows.Forms.TreeNode> , wcześniej dodany przy użyciu <xref:System.Windows.Forms.TreeNodeCollection.RemoveAt%2A> lub <xref:System.Windows.Forms.TreeNodeCollection.Clear%2A> metody.  
  
> [!NOTE]
>  Wyliczanie kolekcji i usuwanie węzłów nie jest obsługiwane.  
  
 Aby dodać nowe <xref:System.Windows.Forms.TreeNode> obiekty do kolekcji, używają <xref:System.Windows.Forms.TreeNodeCollection.Add%2A>, <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A>, lub <xref:System.Windows.Forms.TreeNodeCollection.Insert%2A> metody.  
  
   
  
## Examples  
 Poniższy przykład kodu Usuwa zaznaczonego węzła drzewa z jednego <xref:System.Windows.Forms.TreeView> i dodaje go do innego, jeśli obie kolekcje węzła drzewa nie są tylko do odczytu. Podczas <xref:System.Windows.Forms.Button> po kliknięciu <xref:System.Windows.Forms.TreeNode> reprezentowany przez <xref:System.Windows.Forms.TreeView.SelectedNode%2A?displayProperty=nameWithType> właściwości zostanie usunięta z jedną <xref:System.Windows.Forms.TreeView> przy użyciu <xref:System.Windows.Forms.TreeNodeCollection.Remove%2A> metody i dodane do innego <xref:System.Windows.Forms.TreeView> przy użyciu <xref:System.Windows.Forms.TreeNodeCollection.Insert%2A> metody. W tym przykładzie wymaga, że masz <xref:System.Windows.Forms.Form> zawierający dwa <xref:System.Windows.Forms.TreeView> kontrolek i <xref:System.Windows.Forms.Button>. <xref:System.Windows.Forms.TreeView> Kontrolki powinien zostać nazwany `treeView1` i `treeView2`.  
  
 [!code-cpp[TreeNodeCollection#1](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeNodeCollection/CPP/treenodecollection.cpp#1)]
 [!code-csharp[TreeNodeCollection#1](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeNodeCollection/CS/treenodecollection.cs#1)]
 [!code-vb[TreeNodeCollection#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeNodeCollection/VB/treenodecollection.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.TreeNodeCollection.RemoveAt(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public virtual void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveAt (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveAt(int index);" />
      <MemberSignature Language="F#" Value="abstract member RemoveAt : int -&gt; unit&#xA;override this.RemoveAt : int -&gt; unit" Usage="treeNodeCollection.RemoveAt index" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.RemoveAt(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Indeks <see cref="T:System.Windows.Forms.TreeNode" /> do usunięcia.</param>
        <summary>Usunięcie węzła drzewa z kolekcji węzła drzewa z określonym indeksem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Gdy <xref:System.Windows.Forms.TreeNode> zostanie usunięty z kolekcji węzła drzewa ań kolejnych węzłów są przenoszone w górę o jedną pozycję w kolekcji.  
  
 Można również usunąć <xref:System.Windows.Forms.TreeNode> , wcześniej dodany przy użyciu <xref:System.Windows.Forms.TreeNodeCollection.Remove%2A> lub <xref:System.Windows.Forms.TreeNodeCollection.Clear%2A> metody.  
  
> [!NOTE]
>  Wyliczanie kolekcji i usuwanie węzłów nie jest obsługiwane.  
  
 Aby dodać nowe <xref:System.Windows.Forms.TreeNode> obiekty do kolekcji, używają <xref:System.Windows.Forms.TreeNodeCollection.Add%2A>, <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A>, lub <xref:System.Windows.Forms.TreeNodeCollection.Insert%2A> metody.  
  
   
  
## Examples  
 Poniższy przykład kodu usuwa pierwszy <xref:System.Windows.Forms.TreeNode> z <xref:System.Windows.Forms.TreeView> jeśli jego <xref:System.Windows.Forms.TreeNode.Text%2A?displayProperty=nameWithType> właściwość jest ustawiona na "Node0". Gdy <xref:System.Windows.Forms.Button> zostanie kliknięty pierwszy <xref:System.Windows.Forms.TreeNode> w <xref:System.Windows.Forms.TreeView> jest usuwana za pomocą <xref:System.Windows.Forms.TreeNodeCollection.RemoveAt%2A> metody. W tym przykładzie wymaga, że utworzono <xref:System.Windows.Forms.TreeView> i <xref:System.Windows.Forms.Button> na <xref:System.Windows.Forms.Form>. Pierwszy <xref:System.Windows.Forms.TreeNode> w swojej <xref:System.Windows.Forms.TreeView> powinien mieć właściwość tekst "Node0."  
  
 [!code-cpp[TreeNodeCollection#2](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeNodeCollection/CPP/treenodecollection.cpp#2)]
 [!code-csharp[TreeNodeCollection#2](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeNodeCollection/CS/treenodecollection.cs#2)]
 [!code-vb[TreeNodeCollection#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeNodeCollection/VB/treenodecollection.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.TreeNodeCollection.Remove(System.Windows.Forms.TreeNode)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveByKey">
      <MemberSignature Language="C#" Value="public virtual void RemoveByKey (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveByKey(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.RemoveByKey(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveByKey (key As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveByKey(System::String ^ key);" />
      <MemberSignature Language="F#" Value="abstract member RemoveByKey : string -&gt; unit&#xA;override this.RemoveByKey : string -&gt; unit" Usage="treeNodeCollection.RemoveByKey key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="key">Nazwa węzła drzewa, aby usunąć z kolekcji.</param>
        <summary>Usunięcie węzła drzewa z określonym kluczem z kolekcji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.TreeNode.Name%2A> Właściwość odnosi się do klucza dla <xref:System.Windows.Forms.TreeNode> w <xref:System.Windows.Forms.TreeNodeCollection>.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.IsSynchronized">
      <MemberSignature Language="C#" Value="bool System.Collections.ICollection.IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.ICollection.IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TreeNodeCollection.System#Collections#ICollection#IsSynchronized" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsSynchronized As Boolean Implements ICollection.IsSynchronized" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::ICollection::IsSynchronized { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ICollection.IsSynchronized" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy jest zsynchronizowany dostęp do kolekcji (wątkowo).</summary>
        <value>
          <see langword="false" /> we wszystkich przypadkach.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.SyncRoot">
      <MemberSignature Language="C#" Value="object System.Collections.ICollection.SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.ICollection.SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TreeNodeCollection.System#Collections#ICollection#SyncRoot" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property SyncRoot As Object Implements ICollection.SyncRoot" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::ICollection::SyncRoot { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ICollection.SyncRoot" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera obiekt, który może służyć do synchronizowania dostępu do kolekcji.</summary>
        <value>Obiekt, który może służyć do synchronizowania dostępu do <see cref="T:System.Windows.Forms.TreeNodeCollection" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Add">
      <MemberSignature Language="C#" Value="int IList.Add (object node);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.Add(object node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.System#Collections#IList#Add(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Add (node As Object) As Integer Implements IList.Add" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IList.Add(System::Object ^ node) = System::Collections::IList::Add;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Add(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="node">Obiekt do dodania do kolekcji węzła drzewa.</param>
        <summary>Dodaje obiekt do końca kolekcji węzła drzewa.</summary>
        <returns>Wartość indeksu zaczynającego się od zera <see cref="T:System.Windows.Forms.TreeNode" /> który został dodany do kolekcji węzła drzewa.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `node` nie <xref:System.Windows.Forms.TreeNodeCollection>, <xref:System.Windows.Forms.TreeNodeCollection.System%23Collections%23IList%23Add%2A> metoda użyje ciąg zwracany przez <xref:System.Windows.Forms.TreeNode.ToString%2A> metody <xref:System.Windows.Forms.TreeNode> klasy.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception">
          <paramref name="node" /> jest aktualnie przypisana do innego <see cref="T:System.Windows.Forms.TreeView" /> kontroli.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="node" /> jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Contains">
      <MemberSignature Language="C#" Value="bool IList.Contains (object node);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.IList.Contains(object node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.System#Collections#IList#Contains(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Contains (node As Object) As Boolean Implements IList.Contains" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.IList.Contains(System::Object ^ node) = System::Collections::IList::Contains;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Contains(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="node">Obiekt, który można znaleźć w kolekcji.</param>
        <summary>Określa, czy węzeł drzewa jest członkiem kolekcji.</summary>
        <returns>
          <see langword="true" /> Jeśli <paramref name="node" /> jest elementem członkowskim kolekcji; w przeciwnym razie <see langword="false" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `node` nie <xref:System.Windows.Forms.TreeNode>, <xref:System.Windows.Forms.TreeNodeCollection.System%23Collections%23IList%23Contains%2A> metoda zwraca `false`. W związku z tym, nie można przekazać w ciągu, aby ustalić, czy kolekcja zawiera węzeł, który ma wartość ciągu jako jego <xref:System.Windows.Forms.TreeNode.Text%2A> właściwości.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IndexOf">
      <MemberSignature Language="C#" Value="int IList.IndexOf (object node);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.IndexOf(object node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.System#Collections#IList#IndexOf(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function IndexOf (node As Object) As Integer Implements IList.IndexOf" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IList.IndexOf(System::Object ^ node) = System::Collections::IList::IndexOf;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.IndexOf(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="node">
          <see cref="T:System.Windows.Forms.TreeNode" /> Do zlokalizowania w kolekcji.</param>
        <summary>Zwraca indeks węzła drzewa w kolekcji.</summary>
        <returns>Liczony od zera indeks elementu w kolekcji węzła drzewa; w przeciwnym razie, wartość -1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `node` nie <xref:System.Windows.Forms.TreeNode>, <xref:System.Windows.Forms.TreeNodeCollection.System%23Collections%23IList%23IndexOf%2A> metoda zwraca wartość -1. W związku z tym, nie można przekazać w ciągu można odnaleźć węzła, który ma wartość ciągu jako jego <xref:System.Windows.Forms.TreeNode.Text%2A> właściwości.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Insert">
      <MemberSignature Language="C#" Value="void IList.Insert (int index, object node);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Insert(int32 index, object node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.System#Collections#IList#Insert(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Insert (index As Integer, node As Object) Implements IList.Insert" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Insert(int index, System::Object ^ node) = System::Collections::IList::Insert;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Insert(System.Int32,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="node" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index">Lokalizacja indeksowane w obrębie kolekcji można wstawić węzła drzewa.</param>
        <param name="node">
          <see cref="T:System.Windows.Forms.TreeNode" /> Do wstawienia do kolekcji.</param>
        <summary>Wstawia istniejący węzeł drzewa w kolekcji węzła drzewa w określonej lokalizacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli <xref:System.Windows.Forms.TreeView.Sorted%2A> właściwość jest ustawiona na `true`, `index` parametr jest ignorowany. <xref:System.Windows.Forms.TreeNode> Są wstawiane do widoku drzewa i <xref:System.Web.UI.WebControls.TreeView> jest sortowana ponownie.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="node" /> jest aktualnie przypisana do innego <see cref="T:System.Windows.Forms.TreeView" />.  
  
—lub— 
 <paramref name="node" /> nie jest <see cref="T:System.Windows.Forms.TreeNode" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IsFixedSize">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IsFixedSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.IList.IsFixedSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TreeNodeCollection.System#Collections#IList#IsFixedSize" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsFixedSize As Boolean Implements IList.IsFixedSize" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::IList::IsFixedSize { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IList.IsFixedSize" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.IsFixedSize</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy w kolekcji węzła drzewa o stałym rozmiarze.</summary>
        <value>
          <see langword="false" /> we wszystkich przypadkach.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Item">
      <MemberSignature Language="C#" Value="object System.Collections.IList.Item[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IList.Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TreeNodeCollection.System#Collections#IList#Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value=" Property Item(index As Integer) As Object Implements IList.Item" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::IList::Item[int] { System::Object ^ get(int index); void set(int index, System::Object ^ value); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IList.Item" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.Item(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Liczony od zera indeks, od którego należy pobrać lub ustawić element.</param>
        <summary>Pobiera lub ustawia węzeł drzewa w określonym indeksie w kolekcji.</summary>
        <value>
          <see cref="T:System.Windows.Forms.TreeNode" /> Pod określonym indeksem <see cref="T:System.Windows.Forms.TreeNodeCollection" />.</value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Podana wartość nie jest <see cref="T:System.Windows.Forms.TreeNode" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Remove">
      <MemberSignature Language="C#" Value="void IList.Remove (object node);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Remove(object node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.System#Collections#IList#Remove(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Remove (node As Object) Implements IList.Remove" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Remove(System::Object ^ node) = System::Collections::IList::Remove;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Remove(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="node">
          <see cref="T:System.Windows.Forms.TreeNode" /> Do usunięcia z kolekcji.</param>
        <summary>Usunięcie węzła drzewa z kolekcji węzła drzewa.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nie można przekazać w ciągu, aby usunąć węzeł, który ma wartość ciągu jako jego <xref:System.Windows.Forms.TreeNode.Text%2A> właściwości.  
  
 Gdy <xref:System.Windows.Forms.TreeNode> zostanie usunięty z kolekcji węzła drzewa ań kolejnych węzłów są przenoszone w górę o jedną pozycję w kolekcji.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>