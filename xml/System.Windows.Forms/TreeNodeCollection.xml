<Type Name="TreeNodeCollection" FullName="System.Windows.Forms.TreeNodeCollection">
  <Metadata><Meta Name="ms.openlocfilehash" Value="b5ec6459ada668fc0f4d2cdc10224e3ab8e6ae1d" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69176235" /></Metadata><TypeSignature Language="C#" Value="public class TreeNodeCollection : System.Collections.IList" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit TreeNodeCollection extends System.Object implements class System.Collections.ICollection, class System.Collections.IEnumerable, class System.Collections.IList" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.TreeNodeCollection" />
  <TypeSignature Language="VB.NET" Value="Public Class TreeNodeCollection&#xA;Implements IList" />
  <TypeSignature Language="C++ CLI" Value="public ref class TreeNodeCollection : System::Collections::IList" />
  <TypeSignature Language="F#" Value="type TreeNodeCollection = class&#xA;    interface IList&#xA;    interface ICollection&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.ICollection</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IList</InterfaceName>
    </Interface>
  </Interfaces>
  <Attributes>
    <Attribute FrameworkAlternate="netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
      <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.TreeNodeCollectionEditor, System.Design, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-1.1">
      <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.TreeNodeCollectionEditor, System.Design, Version=1.0.5000.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
    </Attribute>
    <Attribute FrameworkAlternate="netframework-2.0;netframework-3.0;netframework-3.5">
      <AttributeName>System.ComponentModel.Editor("System.Windows.Forms.Design.TreeNodeCollectionEditor, System.Design, Version=2.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a", typeof(System.Drawing.Design.UITypeEditor))</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Reprezentuje kolekcję <see cref="T:System.Windows.Forms.TreeNode" /> obiektów.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Metody <xref:System.Windows.Forms.TreeNodeCollection.Add%2A>, <xref:System.Windows.Forms.TreeNodeCollection.Remove%2A> i<xref:System.Windows.Forms.TreeNodeCollection.RemoveAt%2A> umożliwiają dodawanie i usuwanie poszczególnych węzłów drzewa z kolekcji.  
  
> [!NOTE]
>  Wyliczanie kolekcji i usuwanie węzłów nie jest obsługiwane.  
  
 Można również użyć metod lub <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> <xref:System.Windows.Forms.TreeNodeCollection.Clear%2A> , aby dodać lub usunąć wszystkie węzły drzewa z kolekcji.  
  
 Klasy nie mogą dziedziczyć <xref:System.Windows.Forms.TreeNodeCollection> po klasie.  
  
   
  
## Examples  
 Poniższy przykład kodu wyświetla informacje o klientach w <xref:System.Windows.Forms.TreeView> kontrolce. Węzły drzewa głównego wyświetlają nazwy klientów, a podrzędne węzły drzewa wyświetlają numery zamówień przypisane do każdego klienta. W tym przykładzie do 1 000 klientów są wyświetlane 15 zamówień. <xref:System.Windows.Forms.TreeView> Odświeżenie jest pomijane <xref:System.Windows.Forms.TreeView> <xref:System.Windows.Forms.TreeView.BeginUpdate%2A> przy użyciu metod i <xref:System.Windows.Forms.TreeView.EndUpdate%2A> , a podczas tworzenia i malowania <xref:System.Windows.Forms.TreeNode> obiektów <xref:System.Windows.Forms.Cursor> jest wyświetlany czas oczekiwania. Ten przykład wymaga, aby masz `Customer` obiekt, który może zawierać `Order` kolekcję obiektów. Wymaga również, aby utworzono wystąpienie <xref:System.Windows.Forms.TreeView> kontrolki <xref:System.Windows.Forms.Form>na.  
  
 [!code-cpp[TreeView#1](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeView/CPP/treeview.cpp#1)]
 [!code-csharp[TreeView#1](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeView/CS/treeview.cs#1)]
 [!code-vb[TreeView#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeView/VB/treeview.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.TreeView" />
    <altmember cref="T:System.Windows.Forms.TreeNode" />
  </Docs>
  <Members>
    <MemberGroup MemberName="Add">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Dodaje nowy węzeł drzewa do kolekcji.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.TreeNode Add (string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.TreeNode Add(string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Add(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Add (text As String) As TreeNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::TreeNode ^ Add(System::String ^ text);" />
      <MemberSignature Language="F#" Value="abstract member Add : string -&gt; System.Windows.Forms.TreeNode&#xA;override this.Add : string -&gt; System.Windows.Forms.TreeNode" Usage="treeNodeCollection.Add text" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="text" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="text">Tekst etykiety wyświetlany przez <see cref="T:System.Windows.Forms.TreeNode" />.</param>
        <summary>Dodaje nowy węzeł drzewa z określonym tekstem etykiety na końcu bieżącej kolekcji węzłów drzewa.</summary>
        <returns><see cref="T:System.Windows.Forms.TreeNode" /> Reprezentuje węzeł drzewa dodawany do kolekcji.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Możesz również dodać nowe <xref:System.Windows.Forms.TreeNode> obiekty do kolekcji <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> przy użyciu metod lub <xref:System.Windows.Forms.TreeNodeCollection.Insert%2A> .  
  
 Aby usunąć element <xref:System.Windows.Forms.TreeNode> , który został wcześniej dodany, <xref:System.Windows.Forms.TreeNodeCollection.Remove%2A>Użyj metody <xref:System.Windows.Forms.TreeNodeCollection.RemoveAt%2A>, lub <xref:System.Windows.Forms.TreeNodeCollection.Clear%2A> .  
  
   
  
## Examples  
 Poniższy przykład kodu wyświetla informacje o klientach w <xref:System.Windows.Forms.TreeView> kontrolce. Węzły drzewa głównego wyświetlają nazwy klientów, a podrzędne węzły drzewa wyświetlają numery zamówień przypisane do każdego klienta. W tym przykładzie do 1 000 klientów są wyświetlane 15 zamówień. <xref:System.Windows.Forms.TreeView> Odświeżenie jest pomijane <xref:System.Windows.Forms.TreeView> <xref:System.Windows.Forms.TreeView.BeginUpdate%2A> przy użyciu metod i <xref:System.Windows.Forms.TreeView.EndUpdate%2A> , a podczas tworzenia i malowania <xref:System.Windows.Forms.TreeNode> obiektów <xref:System.Windows.Forms.Cursor> jest wyświetlany czas oczekiwania. Ten przykład wymaga, aby masz `Customer` obiekt, który może zawierać `Order` kolekcję obiektów. Wymaga również, aby utworzono wystąpienie <xref:System.Windows.Forms.TreeView> kontrolki <xref:System.Windows.Forms.Form>na.  
  
 [!code-cpp[TreeView#1](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeView/CPP/treeview.cpp#1)]
 [!code-csharp[TreeView#1](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeView/CS/treeview.cs#1)]
 [!code-vb[TreeView#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeView/VB/treeview.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.TreeNodeCollection.Remove(System.Windows.Forms.TreeNode)" />
        <altmember cref="M:System.Windows.Forms.TreeNodeCollection.RemoveAt(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual int Add (System.Windows.Forms.TreeNode node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 Add(class System.Windows.Forms.TreeNode node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Add(System.Windows.Forms.TreeNode)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Add (node As TreeNode) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int Add(System::Windows::Forms::TreeNode ^ node);" />
      <MemberSignature Language="F#" Value="abstract member Add : System.Windows.Forms.TreeNode -&gt; int&#xA;override this.Add : System.Windows.Forms.TreeNode -&gt; int" Usage="treeNodeCollection.Add node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Windows.Forms.TreeNode" />
      </Parameters>
      <Docs>
        <param name="node">, <see cref="T:System.Windows.Forms.TreeNode" /> Aby dodać do kolekcji.</param>
        <summary>Dodaje wcześniej utworzony węzeł drzewa na końcu kolekcji węzłów drzewa.</summary>
        <returns>Wartość indeksu (liczony od zera) <see cref="T:System.Windows.Forms.TreeNode" /> dodana do kolekcji węzłów drzewa.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta wersja <xref:System.Windows.Forms.TreeNodeCollection.Add%2A> metody umożliwia dodanie wcześniej utworzonych <xref:System.Windows.Forms.TreeNode> obiektów na końcu kolekcji węzłów drzewa.  
  
 Możesz również dodać nowe <xref:System.Windows.Forms.TreeNode> obiekty do kolekcji <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> przy użyciu metod lub <xref:System.Windows.Forms.TreeNodeCollection.Insert%2A> .  
  
 Aby usunąć element <xref:System.Windows.Forms.TreeNode> , który został wcześniej dodany, <xref:System.Windows.Forms.TreeNodeCollection.Remove%2A>Użyj metody <xref:System.Windows.Forms.TreeNodeCollection.RemoveAt%2A>, lub <xref:System.Windows.Forms.TreeNodeCollection.Clear%2A> .  
  
> [!NOTE]
>  Można przypisać tylko do jednej <xref:System.Windows.Forms.TreeView> kontrolki naraz. <xref:System.Windows.Forms.TreeNode> Aby dodać węzeł drzewa do nowej kontrolki widoku drzewa, należy najpierw usunąć go z innego widoku drzewa lub sklonować go.  
  
   
  
## Examples  
 Poniższy przykład kodu wyświetla informacje o klientach w <xref:System.Windows.Forms.TreeView> kontrolce. Węzły drzewa głównego wyświetlają nazwy klientów, a podrzędne węzły drzewa wyświetlają numery zamówień przypisane do każdego klienta. W tym przykładzie do 1 000 klientów są wyświetlane 15 zamówień. <xref:System.Windows.Forms.TreeView> Odświeżenie jest pomijane <xref:System.Windows.Forms.TreeView> <xref:System.Windows.Forms.TreeView.BeginUpdate%2A> przy użyciu metod i <xref:System.Windows.Forms.TreeView.EndUpdate%2A> , a podczas tworzenia i malowania <xref:System.Windows.Forms.TreeNode> obiektów <xref:System.Windows.Forms.Cursor> jest wyświetlany czas oczekiwania. Ten przykład wymaga, aby masz `Customer` obiekt, który może zawierać `Order` kolekcję obiektów. Wymaga również, aby utworzono wystąpienie <xref:System.Windows.Forms.TreeView> kontrolki <xref:System.Windows.Forms.Form>na.  
  
 [!code-cpp[TreeView#1](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeView/CPP/treeview.cpp#1)]
 [!code-csharp[TreeView#1](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeView/CS/treeview.cs#1)]
 [!code-vb[TreeView#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeView/VB/treeview.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Jest obecnie przypisany do innego <see cref="T:System.Windows.Forms.TreeView" />. <paramref name="node" /></exception>
        <altmember cref="M:System.Windows.Forms.TreeNodeCollection.Remove(System.Windows.Forms.TreeNode)" />
        <altmember cref="M:System.Windows.Forms.TreeNodeCollection.RemoveAt(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.TreeNode Add (string key, string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.TreeNode Add(string key, string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Add(System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Add (key As String, text As String) As TreeNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::TreeNode ^ Add(System::String ^ key, System::String ^ text);" />
      <MemberSignature Language="F#" Value="abstract member Add : string * string -&gt; System.Windows.Forms.TreeNode&#xA;override this.Add : string * string -&gt; System.Windows.Forms.TreeNode" Usage="treeNodeCollection.Add (key, text)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="text" Type="System.String" Index="1" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="key">Nazwa węzła drzewa.</param>
        <param name="text">Tekst, który ma być wyświetlany w węźle drzewa.</param>
        <summary>Tworzy nowy węzeł drzewa z określonym kluczem i tekstem i dodaje go do kolekcji.</summary>
        <returns><see cref="T:System.Windows.Forms.TreeNode" /> , Który został dodany do kolekcji.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Właściwość odnosi się do klucza dla elementu <xref:System.Windows.Forms.TreeNode> w <xref:System.Windows.Forms.TreeNodeCollection>. <xref:System.Windows.Forms.TreeNode.Name%2A>  
  
 Możesz również dodać nowe <xref:System.Windows.Forms.TreeNode> obiekty do kolekcji <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> przy użyciu metod lub <xref:System.Windows.Forms.TreeNodeCollection.Insert%2A> .  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.TreeNode Add (string key, string text, int imageIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.TreeNode Add(string key, string text, int32 imageIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Add(System.String,System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Add (key As String, text As String, imageIndex As Integer) As TreeNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::TreeNode ^ Add(System::String ^ key, System::String ^ text, int imageIndex);" />
      <MemberSignature Language="F#" Value="abstract member Add : string * string * int -&gt; System.Windows.Forms.TreeNode&#xA;override this.Add : string * string * int -&gt; System.Windows.Forms.TreeNode" Usage="treeNodeCollection.Add (key, text, imageIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="text" Type="System.String" Index="1" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="imageIndex" Type="System.Int32" Index="2" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="key">Nazwa węzła drzewa.</param>
        <param name="text">Tekst, który ma być wyświetlany w węźle drzewa.</param>
        <param name="imageIndex">Indeks obrazu, który ma być wyświetlany w węźle drzewa.</param>
        <summary>Tworzy węzeł drzewa z określonym kluczem, tekstem i obrazem, a następnie dodaje go do kolekcji.</summary>
        <returns><see cref="T:System.Windows.Forms.TreeNode" /> , Który został dodany do kolekcji.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Właściwość odnosi się do klucza dla elementu <xref:System.Windows.Forms.TreeNode> w <xref:System.Windows.Forms.TreeNodeCollection>. <xref:System.Windows.Forms.TreeNode.Name%2A>  
  
 Parametr odnosi się do obrazu <xref:System.Windows.Forms.TreeView.ImageList%2A> we właściwości elementu nadrzędnego <xref:System.Windows.Forms.TreeView>. `imageIndex`  
  
 Węzeł drzewa zostanie dodany na końcu kolekcji. Możesz również dodać nowe <xref:System.Windows.Forms.TreeNode> obiekty do kolekcji <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> przy użyciu metod lub <xref:System.Windows.Forms.TreeNodeCollection.Insert%2A> .  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.TreeNode Add (string key, string text, string imageKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.TreeNode Add(string key, string text, string imageKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Add(System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Add (key As String, text As String, imageKey As String) As TreeNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::TreeNode ^ Add(System::String ^ key, System::String ^ text, System::String ^ imageKey);" />
      <MemberSignature Language="F#" Value="abstract member Add : string * string * string -&gt; System.Windows.Forms.TreeNode&#xA;override this.Add : string * string * string -&gt; System.Windows.Forms.TreeNode" Usage="treeNodeCollection.Add (key, text, imageKey)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="text" Type="System.String" Index="1" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="imageKey" Type="System.String" Index="2" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="key">Nazwa węzła drzewa.</param>
        <param name="text">Tekst, który ma być wyświetlany w węźle drzewa.</param>
        <param name="imageKey">Obraz do wyświetlenia w węźle drzewa.</param>
        <summary>Tworzy węzeł drzewa z określonym kluczem, tekstem i obrazem, a następnie dodaje go do kolekcji.</summary>
        <returns><see cref="T:System.Windows.Forms.TreeNode" /> , Który został dodany do kolekcji.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Właściwość odnosi się do klucza dla elementu <xref:System.Windows.Forms.TreeNode> w <xref:System.Windows.Forms.TreeNodeCollection>. <xref:System.Windows.Forms.TreeNode.Name%2A>  
  
 Węzeł drzewa zostanie dodany na końcu kolekcji. Możesz również dodać nowe <xref:System.Windows.Forms.TreeNode> obiekty do kolekcji <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> przy użyciu metod lub <xref:System.Windows.Forms.TreeNodeCollection.Insert%2A> .  
  
 Parametr odnosi się do obrazu <xref:System.Windows.Forms.TreeView.ImageList%2A> we właściwości elementu nadrzędnego <xref:System.Windows.Forms.TreeView>. `imageKey`  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.TreeNode Add (string key, string text, int imageIndex, int selectedImageIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.TreeNode Add(string key, string text, int32 imageIndex, int32 selectedImageIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Add(System.String,System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Add (key As String, text As String, imageIndex As Integer, selectedImageIndex As Integer) As TreeNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::TreeNode ^ Add(System::String ^ key, System::String ^ text, int imageIndex, int selectedImageIndex);" />
      <MemberSignature Language="F#" Value="abstract member Add : string * string * int * int -&gt; System.Windows.Forms.TreeNode&#xA;override this.Add : string * string * int * int -&gt; System.Windows.Forms.TreeNode" Usage="treeNodeCollection.Add (key, text, imageIndex, selectedImageIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="text" Type="System.String" Index="1" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="imageIndex" Type="System.Int32" Index="2" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="selectedImageIndex" Type="System.Int32" Index="3" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="key">Nazwa węzła drzewa.</param>
        <param name="text">Tekst, który ma być wyświetlany w węźle drzewa.</param>
        <param name="imageIndex">Indeks obrazu, który ma być wyświetlany w węźle drzewa.</param>
        <param name="selectedImageIndex">Indeks obrazu, który ma być wyświetlany w węźle drzewa, gdy jest w wybranym stanie.</param>
        <summary>Tworzy węzeł drzewa z określonym kluczem, tekstem i obrazami, a następnie dodaje go do kolekcji.</summary>
        <returns>Węzeł drzewa, który został dodany do kolekcji.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Właściwość odnosi się do klucza dla elementu <xref:System.Windows.Forms.TreeNode> w <xref:System.Windows.Forms.TreeNodeCollection>. <xref:System.Windows.Forms.TreeNode.Name%2A>  
  
 Węzeł drzewa zostanie dodany na końcu kolekcji. Możesz również dodać nowe <xref:System.Windows.Forms.TreeNode> obiekty do kolekcji <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> przy użyciu metod lub <xref:System.Windows.Forms.TreeNodeCollection.Insert%2A> .  
  
 Parametr odnosi się do obrazu <xref:System.Windows.Forms.TreeView.ImageList%2A> we właściwości elementu nadrzędnego <xref:System.Windows.Forms.TreeView>. `imageIndex`  
  
 Parametr odnosi się do obrazu <xref:System.Windows.Forms.TreeView.StateImageList%2A> we właściwości elementu nadrzędnego <xref:System.Windows.Forms.TreeView>. `selectedImageIndex`  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Add">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.TreeNode Add (string key, string text, string imageKey, string selectedImageKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.TreeNode Add(string key, string text, string imageKey, string selectedImageKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Add(System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Add (key As String, text As String, imageKey As String, selectedImageKey As String) As TreeNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::TreeNode ^ Add(System::String ^ key, System::String ^ text, System::String ^ imageKey, System::String ^ selectedImageKey);" />
      <MemberSignature Language="F#" Value="abstract member Add : string * string * string * string -&gt; System.Windows.Forms.TreeNode&#xA;override this.Add : string * string * string * string -&gt; System.Windows.Forms.TreeNode" Usage="treeNodeCollection.Add (key, text, imageKey, selectedImageKey)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="text" Type="System.String" Index="1" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="imageKey" Type="System.String" Index="2" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="selectedImageKey" Type="System.String" Index="3" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="key">Nazwa węzła drzewa.</param>
        <param name="text">Tekst, który ma być wyświetlany w węźle drzewa.</param>
        <param name="imageKey">Klucz obrazu do wyświetlenia w węźle drzewa.</param>
        <param name="selectedImageKey">Klucz obrazu do wyświetlenia, gdy węzeł jest w wybranym stanie.</param>
        <summary>Tworzy węzeł drzewa z określonym kluczem, tekstem i obrazami, a następnie dodaje go do kolekcji.</summary>
        <returns><see cref="T:System.Windows.Forms.TreeNode" /> , Który został dodany do kolekcji.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Właściwość odnosi się do klucza dla elementu <xref:System.Windows.Forms.TreeNode> w <xref:System.Windows.Forms.TreeNodeCollection>. <xref:System.Windows.Forms.TreeNode.Name%2A>  
  
 Węzeł drzewa zostanie dodany na końcu kolekcji. Możesz również dodać nowe <xref:System.Windows.Forms.TreeNode> obiekty do kolekcji <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> przy użyciu metod lub <xref:System.Windows.Forms.TreeNodeCollection.Insert%2A> .  
  
 Parametr odnosi się do obrazu <xref:System.Windows.Forms.TreeView.ImageList%2A> we właściwości elementu nadrzędnego <xref:System.Windows.Forms.TreeView>. `imageKey`  
  
 Parametr odnosi się do obrazu <xref:System.Windows.Forms.TreeView.StateImageList%2A> we właściwości elementu nadrzędnego <xref:System.Windows.Forms.TreeView>. `selectedImageKey`  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="AddRange">
      <MemberSignature Language="C#" Value="public virtual void AddRange (System.Windows.Forms.TreeNode[] nodes);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void AddRange(class System.Windows.Forms.TreeNode[] nodes) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.AddRange(System.Windows.Forms.TreeNode[])" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub AddRange (nodes As TreeNode())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void AddRange(cli::array &lt;System::Windows::Forms::TreeNode ^&gt; ^ nodes);" />
      <MemberSignature Language="F#" Value="abstract member AddRange : System.Windows.Forms.TreeNode[] -&gt; unit&#xA;override this.AddRange : System.Windows.Forms.TreeNode[] -&gt; unit" Usage="treeNodeCollection.AddRange nodes" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="nodes" Type="System.Windows.Forms.TreeNode[]" />
      </Parameters>
      <Docs>
        <param name="nodes">Tablica <see cref="T:System.Windows.Forms.TreeNode" /> obiektów reprezentujących węzły drzewa do dodania do kolekcji.</param>
        <summary>Dodaje tablicę wcześniej utworzonych węzłów drzewa do kolekcji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.TreeNode> Obiekty zawarte`nodes` w tablicy są dołączane na końcu kolekcji.  
  
 Możesz użyć metody, <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> aby szybko dodać grupę wcześniej utworzonych <xref:System.Windows.Forms.TreeNode> obiektów do kolekcji zamiast ręcznie dodać każdy <xref:System.Windows.Forms.TreeNode> do kolekcji przy użyciu <xref:System.Windows.Forms.TreeNodeCollection.Add%2A> metody.  
  
 Aby usunąć element <xref:System.Windows.Forms.TreeNode> , który został wcześniej dodany, <xref:System.Windows.Forms.TreeNodeCollection.Remove%2A>Użyj metody <xref:System.Windows.Forms.TreeNodeCollection.RemoveAt%2A>, lub <xref:System.Windows.Forms.TreeNodeCollection.Clear%2A> .  
  
   
  
## Examples  
 Poniższy przykład <xref:System.Windows.Forms.TreeNodeCollection> kodu kopiuje element od a <xref:System.Windows.Forms.TreeView> do tymczasowego <xref:System.Array>, a następnie dodaje <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> zawartość tablicy do innej <xref:System.Windows.Forms.TreeView> przy użyciu metody. Wartość <xref:System.Windows.Forms.TreeNodeCollection> ze źródła <xref:System.Windows.Forms.TreeView> jest czyszczona przy użyciu <xref:System.Windows.Forms.TreeNodeCollection.Clear%2A> metody. W tym przykładzie wymagane są dwie <xref:System.Windows.Forms.TreeView> kontrolki — jeden z <xref:System.Windows.Forms.TreeNode> kolekcją obiektów.  
  
 [!code-cpp[TreeNodeCollection_Clear#1](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeNodeCollection_Clear/CPP/treenodecollection_clear.cpp#1)]
 [!code-csharp[TreeNodeCollection_Clear#1](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeNodeCollection_Clear/CS/treenodecollection_clear.cs#1)]
 [!code-vb[TreeNodeCollection_Clear#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeNodeCollection_Clear/VB/treenodecollection_clear.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="nodes" />jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="nodes" />jest elementem podrzędnym innego <see cref="T:System.Windows.Forms.TreeView" />.</exception>
        <altmember cref="M:System.Windows.Forms.TreeNodeCollection.Add(System.String)" />
        <altmember cref="M:System.Windows.Forms.TreeNodeCollection.CopyTo(System.Array,System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="Clear">
      <MemberSignature Language="C#" Value="public virtual void Clear ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Clear() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Clear" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Clear ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Clear();" />
      <MemberSignature Language="F#" Value="abstract member Clear : unit -&gt; unit&#xA;override this.Clear : unit -&gt; unit" Usage="treeNodeCollection.Clear " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Clear</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Usuwa wszystkie węzły drzewa z kolekcji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Tej metody można użyć do wyczyszczenia całej kolekcji węzłów drzewa z widoku drzewa.  
  
 Aby usunąć poszczególne węzły drzewa z kolekcji, użyj <xref:System.Windows.Forms.TreeNodeCollection.Remove%2A> metod lub. <xref:System.Windows.Forms.TreeNodeCollection.RemoveAt%2A>  
  
 Aby dodać nowe <xref:System.Windows.Forms.TreeNode> obiekty do kolekcji, <xref:System.Windows.Forms.TreeNodeCollection.Add%2A>Użyj metody, <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A>lub <xref:System.Windows.Forms.TreeNodeCollection.Insert%2A> .  
  
   
  
## Examples  
 Poniższy przykład <xref:System.Windows.Forms.TreeNodeCollection> kodu kopiuje element od a <xref:System.Windows.Forms.TreeView> do tymczasowego <xref:System.Array>, a następnie dodaje <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> zawartość tablicy do innej <xref:System.Windows.Forms.TreeView> przy użyciu metody. Wartość <xref:System.Windows.Forms.TreeNodeCollection> ze źródła <xref:System.Windows.Forms.TreeView> jest czyszczona przy użyciu <xref:System.Windows.Forms.TreeNodeCollection.Clear%2A> metody. W tym przykładzie wymagane są dwie <xref:System.Windows.Forms.TreeView> kontrolki — jeden z <xref:System.Windows.Forms.TreeNode> kolekcją obiektów.  
  
 [!code-cpp[TreeNodeCollection_Clear#1](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeNodeCollection_Clear/CPP/treenodecollection_clear.cpp#1)]
 [!code-csharp[TreeNodeCollection_Clear#1](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeNodeCollection_Clear/CS/treenodecollection_clear.cs#1)]
 [!code-vb[TreeNodeCollection_Clear#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeNodeCollection_Clear/VB/treenodecollection_clear.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Contains">
      <MemberSignature Language="C#" Value="public bool Contains (System.Windows.Forms.TreeNode node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance bool Contains(class System.Windows.Forms.TreeNode node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Contains(System.Windows.Forms.TreeNode)" />
      <MemberSignature Language="VB.NET" Value="Public Function Contains (node As TreeNode) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; bool Contains(System::Windows::Forms::TreeNode ^ node);" />
      <MemberSignature Language="F#" Value="member this.Contains : System.Windows.Forms.TreeNode -&gt; bool" Usage="treeNodeCollection.Contains node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Windows.Forms.TreeNode" />
      </Parameters>
      <Docs>
        <param name="node"><see cref="T:System.Windows.Forms.TreeNode" /> Aby zlokalizować w kolekcji.</param>
        <summary>Określa, czy określony węzeł drzewa jest członkiem kolekcji.</summary>
        <returns><see langword="true" />Jeśli jest członkiem kolekcji; <see langword="false" />w przeciwnym razie. <see cref="T:System.Windows.Forms.TreeNode" /></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda pozwala określić, czy <xref:System.Windows.Forms.TreeNode> element jest członkiem kolekcji przed podjęciem próby wykonania operacji <xref:System.Windows.Forms.TreeNode>na. Za pomocą tej metody można potwierdzić, że element <xref:System.Windows.Forms.TreeNode> został dodany do kolekcji lub jest nadal elementem członkowskim.  
  
 Czas trwania tej metody jest proporcjonalny do rozmiaru kolekcji węzłów, dlatego warto uniknąć używania jej z dużymi kolekcjami.  
  
 Ta metoda sprawdza tylko odwołanie do równości. Nie można jej użyć do określenia, czy równoważne, ale w różnych węzłach, znajduje się w kolekcji.  
  
> [!NOTE]
>  Jednym z implikacji wymagania dotyczącego równości odwołań jest to, że nie można dostosować zachowania tej metody dla <xref:System.Windows.Forms.TreeNode> typów pochodnych poprzez <xref:System.Object.Equals%2A> zastąpienie metody <xref:System.Windows.Forms.TreeNode> klasy.  
  
   
  
## Examples  
 Poniższy przykład kodu określa <xref:System.Windows.Forms.TreeNode> <xref:System.Windows.Forms.TreeNodeCollection>, czy określony znajduje się w, a następnie wylicza kolekcję. Ten przykład wymaga, aby zawierał obiekt <xref:System.Windows.Forms.Form> <xref:System.Windows.Forms.TreeView> z <xref:System.Windows.Forms.TreeNodeCollection> , który zawiera <xref:System.Windows.Forms.TreeNode> nazwę `myTreeNode2`.  
  
 [!code-cpp[TreeNodeCollection_Contains_GetEnumerator#1](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeNodeCollection_Contains_GetEnumerator/CPP/treenodecollection_contains_getenumerator.cpp#1)]
 [!code-csharp[TreeNodeCollection_Contains_GetEnumerator#1](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeNodeCollection_Contains_GetEnumerator/CS/treenodecollection_contains_getenumerator.cs#1)]
 [!code-vb[TreeNodeCollection_Contains_GetEnumerator#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeNodeCollection_Contains_GetEnumerator/VB/treenodecollection_contains_getenumerator.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="ContainsKey">
      <MemberSignature Language="C#" Value="public virtual bool ContainsKey (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance bool ContainsKey(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.ContainsKey(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function ContainsKey (key As String) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual bool ContainsKey(System::String ^ key);" />
      <MemberSignature Language="F#" Value="abstract member ContainsKey : string -&gt; bool&#xA;override this.ContainsKey : string -&gt; bool" Usage="treeNodeCollection.ContainsKey key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="key">Nazwa <see cref="T:System.Windows.Forms.TreeNode" /> do wyszukania.</param>
        <summary>Określa, czy kolekcja zawiera węzeł drzewa o określonym kluczu.</summary>
        <returns><see langword="true" />Aby wskazać, że kolekcja zawiera <see cref="T:System.Windows.Forms.TreeNode" /> znak z określonym kluczem; <see langword="false" />w przeciwnym razie.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Właściwość odnosi się do klucza dla elementu <xref:System.Windows.Forms.TreeNode> w <xref:System.Windows.Forms.TreeNodeCollection>. <xref:System.Windows.Forms.TreeNode.Name%2A>  
  
 W porównaniu do klucza nie jest rozróżniana wielkość liter. Jeśli parametr jest `null` lub ciągiem pustym, <xref:System.Windows.Forms.TreeNodeCollection.Item%2A> Właściwość zwraca `false`. `key`  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CopyTo">
      <MemberSignature Language="C#" Value="public void CopyTo (Array dest, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void CopyTo(class System.Array dest, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.CopyTo(System.Array,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Sub CopyTo (dest As Array, index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void CopyTo(Array ^ dest, int index);" />
      <MemberSignature Language="F#" Value="abstract member CopyTo : Array * int -&gt; unit&#xA;override this.CopyTo : Array * int -&gt; unit" Usage="treeNodeCollection.CopyTo (dest, index)" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.ICollection.CopyTo(System.Array,System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="dest" Type="System.Array" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="dest">Tablica docelowa.</param>
        <param name="index">Indeks w tablicy docelowej, w którym rozpoczyna się przechowywanie.</param>
        <summary>Kopiuje całą kolekcję do istniejącej tablicy w określonej lokalizacji w tablicy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu wyświetla <xref:System.Windows.Forms.TreeNode> liczbę obiektów <xref:System.Windows.Forms.TreeNodeCollection>w, kopiuje zawartość kolekcji do <xref:System.Object> tablicy i wyświetla listę węzłów drzewa w <xref:System.Windows.Forms.Label> kontrolce. Ten przykład wymaga, aby mieć co <xref:System.Windows.Forms.TreeView> najmniej jeden <xref:System.Windows.Forms.TreeNode> <xref:System.Windows.Forms.TreeNodeCollection>element i <xref:System.Windows.Forms.Label> kontrolkę na <xref:System.Windows.Forms.Form>.  
  
 [!code-cpp[TreeNodeCollection_Count_CopyTo#1](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeNodeCollection_Count_CopyTo/CPP/treenodecollection_count_copyto.cpp#1)]
 [!code-csharp[TreeNodeCollection_Count_CopyTo#1](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeNodeCollection_Count_CopyTo/CS/treenodecollection_count_copyto.cs#1)]
 [!code-vb[TreeNodeCollection_Count_CopyTo#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeNodeCollection_Count_CopyTo/VB/treenodecollection_count_copyto.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Count">
      <MemberSignature Language="C#" Value="public int Count { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 Count" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TreeNodeCollection.Count" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Count As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int Count { int get(); };" />
      <MemberSignature Language="F#" Value="member this.Count : int" Usage="System.Windows.Forms.TreeNodeCollection.Count" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.Count</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.Browsable(false)</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-1.1">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Advanced)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera łączną liczbę <see cref="T:System.Windows.Forms.TreeNode" /> obiektów w kolekcji.</summary>
        <value>Całkowita liczba <see cref="T:System.Windows.Forms.TreeNode" /> obiektów w kolekcji.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.TreeNodeCollection.Count%2A> Właściwość przechowuje<xref:System.Windows.Forms.TreeNode> liczbę obiektów przypisanych do kolekcji. Możesz użyć <xref:System.Windows.Forms.TreeNodeCollection.Count%2A> wartości właściwości jako górnej granicy pętli, aby wykonać iterację w kolekcji.  
  
> [!NOTE]
>  Ponieważ wartość indeksu kolekcji jest indeksem rozpoczynającym się od zera, należy odjąć jeden od zmiennej pętli. Jeśli to nie zrobisz, zostanie przekroczenie górnych granic kolekcji i zgłoszenie <xref:System.IndexOutOfRangeException> wyjątku.  
  
   
  
## Examples  
 Poniższy przykład kodu wyświetla <xref:System.Windows.Forms.TreeNode> liczbę obiektów <xref:System.Windows.Forms.TreeNodeCollection>w, kopiuje zawartość kolekcji do <xref:System.Object> tablicy i wyświetla listę węzłów drzewa w <xref:System.Windows.Forms.Label> kontrolce. Ten przykład wymaga, aby mieć co <xref:System.Windows.Forms.TreeView> najmniej jeden <xref:System.Windows.Forms.TreeNode> <xref:System.Windows.Forms.TreeNodeCollection>element i <xref:System.Windows.Forms.Label> kontrolkę na <xref:System.Windows.Forms.Form>.  
  
 [!code-cpp[TreeNodeCollection_Count_CopyTo#1](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeNodeCollection_Count_CopyTo/CPP/treenodecollection_count_copyto.cpp#1)]
 [!code-csharp[TreeNodeCollection_Count_CopyTo#1](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeNodeCollection_Count_CopyTo/CS/treenodecollection_count_copyto.cs#1)]
 [!code-vb[TreeNodeCollection_Count_CopyTo#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeNodeCollection_Count_CopyTo/VB/treenodecollection_count_copyto.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Find">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.TreeNode[] Find (string key, bool searchAllChildren);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.TreeNode[] Find(string key, bool searchAllChildren) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Find(System.String,System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Public Function Find (key As String, searchAllChildren As Boolean) As TreeNode()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; cli::array &lt;System::Windows::Forms::TreeNode ^&gt; ^ Find(System::String ^ key, bool searchAllChildren);" />
      <MemberSignature Language="F#" Value="member this.Find : string * bool -&gt; System.Windows.Forms.TreeNode[]" Usage="treeNodeCollection.Find (key, searchAllChildren)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode[]</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="searchAllChildren" Type="System.Boolean" Index="1" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="key">Nazwa węzła drzewa do wyszukania.</param>
        <param name="searchAllChildren"><see langword="true" />Aby przeszukać węzły podrzędne węzłów drzewa; w przeciwnym razie. <see langword="false" /></param>
        <summary>Znajduje węzły drzewa z określonym kluczem, co pozwala na wyszukiwanie węzłów podrzędnych.</summary>
        <returns>Tablica <see cref="T:System.Windows.Forms.TreeNode" /> obiektów, których <see cref="P:System.Windows.Forms.TreeNode.Name" /> Właściwość pasuje do określonego klucza.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Właściwość odnosi się do klucza dla elementu <xref:System.Windows.Forms.TreeNode> w <xref:System.Windows.Forms.TreeNodeCollection>. <xref:System.Windows.Forms.TreeNode.Name%2A>  
  
 W porównaniu do klucza nie jest rozróżniana wielkość liter. Jeśli parametr jest lub `null` jest pustym ciągiem lub nie ma dopasowań, <xref:System.Windows.Forms.TreeNodeCollection.Item%2A> Właściwość zwraca pustą tablicę `key``.`  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetEnumerator">
      <MemberSignature Language="C#" Value="public System.Collections.IEnumerator GetEnumerator ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Collections.IEnumerator GetEnumerator() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.GetEnumerator" />
      <MemberSignature Language="VB.NET" Value="Public Function GetEnumerator () As IEnumerator" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Collections::IEnumerator ^ GetEnumerator();" />
      <MemberSignature Language="F#" Value="abstract member GetEnumerator : unit -&gt; System.Collections.IEnumerator&#xA;override this.GetEnumerator : unit -&gt; System.Collections.IEnumerator" Usage="treeNodeCollection.GetEnumerator " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IEnumerable.GetEnumerator</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.IEnumerator</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca moduł wyliczający, który może być używany do iteracji kolekcji węzłów drzewa.</summary>
        <returns><see cref="T:System.Collections.IEnumerator" /> Reprezentuje kolekcję węzłów drzewa.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu określa <xref:System.Windows.Forms.TreeNode> <xref:System.Windows.Forms.TreeNodeCollection>, czy określony znajduje się w, a następnie wylicza kolekcję. Ten przykład wymaga, aby zawierał obiekt <xref:System.Windows.Forms.Form> <xref:System.Windows.Forms.TreeView> z <xref:System.Windows.Forms.TreeNodeCollection> , który zawiera <xref:System.Windows.Forms.TreeNode> nazwę `myTreeNode2`.  
  
 [!code-cpp[TreeNodeCollection_Contains_GetEnumerator#1](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeNodeCollection_Contains_GetEnumerator/CPP/treenodecollection_contains_getenumerator.cpp#1)]
 [!code-csharp[TreeNodeCollection_Contains_GetEnumerator#1](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeNodeCollection_Contains_GetEnumerator/CS/treenodecollection_contains_getenumerator.cs#1)]
 [!code-vb[TreeNodeCollection_Contains_GetEnumerator#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeNodeCollection_Contains_GetEnumerator/VB/treenodecollection_contains_getenumerator.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOf">
      <MemberSignature Language="C#" Value="public int IndexOf (System.Windows.Forms.TreeNode node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance int32 IndexOf(class System.Windows.Forms.TreeNode node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.IndexOf(System.Windows.Forms.TreeNode)" />
      <MemberSignature Language="VB.NET" Value="Public Function IndexOf (node As TreeNode) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; int IndexOf(System::Windows::Forms::TreeNode ^ node);" />
      <MemberSignature Language="F#" Value="member this.IndexOf : System.Windows.Forms.TreeNode -&gt; int" Usage="treeNodeCollection.IndexOf node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Windows.Forms.TreeNode" />
      </Parameters>
      <Docs>
        <param name="node"><see cref="T:System.Windows.Forms.TreeNode" /> Aby zlokalizować w kolekcji.</param>
        <summary>Zwraca indeks określonego węzła drzewa w kolekcji.</summary>
        <returns>Liczony od zera indeks elementu znaleziony w kolekcji węzłów drzewa; w przeciwnym razie-1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Czas trwania tej metody jest proporcjonalny do rozmiaru kolekcji węzłów, dlatego warto uniknąć używania jej z dużymi kolekcjami.  
  
 Ta metoda sprawdza tylko odwołanie do równości. Nie można użyć go do pobrania indeksu równoważnego, ale innego węzła w kolekcji.  
  
> [!NOTE]
>  Jednym z implikacji wymagania dotyczącego równości odwołań jest to, że nie można dostosować zachowania tej metody dla <xref:System.Windows.Forms.TreeNode> typów pochodnych poprzez <xref:System.Object.Equals%2A> zastąpienie metody <xref:System.Windows.Forms.TreeNode> klasy.  
  
   
  
## Examples  
 Poniższy przykład kodu określa <xref:System.Windows.Forms.TreeNode> <xref:System.Windows.Forms.TreeNodeCollection>, czy określony znajduje się w, a następnie wylicza kolekcję. Ten przykład wymaga, aby zawierał obiekt <xref:System.Windows.Forms.Form> <xref:System.Windows.Forms.TreeView> z <xref:System.Windows.Forms.TreeNodeCollection> , który zawiera <xref:System.Windows.Forms.TreeNode> nazwę `myTreeNode2`.  
  
 [!code-cpp[TreeNodeCollection_Contains_GetEnumerator#2](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeNodeCollection_Contains_GetEnumerator/CPP/treenodecollection_contains_getenumerator.cpp#2)]
 [!code-csharp[TreeNodeCollection_Contains_GetEnumerator#2](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeNodeCollection_Contains_GetEnumerator/CS/treenodecollection_contains_getenumerator.cs#2)]
 [!code-vb[TreeNodeCollection_Contains_GetEnumerator#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeNodeCollection_Contains_GetEnumerator/VB/treenodecollection_contains_getenumerator.vb#2)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IndexOfKey">
      <MemberSignature Language="C#" Value="public virtual int IndexOfKey (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance int32 IndexOfKey(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.IndexOfKey(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function IndexOfKey (key As String) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual int IndexOfKey(System::String ^ key);" />
      <MemberSignature Language="F#" Value="abstract member IndexOfKey : string -&gt; int&#xA;override this.IndexOfKey : string -&gt; int" Usage="treeNodeCollection.IndexOfKey key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="key">Nazwa węzła drzewa do wyszukania.</param>
        <summary>Zwraca indeks pierwszego wystąpienia węzła drzewa z określonym kluczem.</summary>
        <returns>Indeks (liczony od zera) pierwszego wystąpienia węzła drzewa o określonym kluczu, jeśli znaleziono; w przeciwnym razie-1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli <xref:System.Windows.Forms.TreeNodeCollection.IndexOfKey%2A> jest wywoływana po raz pierwszy, ostatni zwrócony indeks zostanie sprawdzony pod kątem zgodności z kluczem, a w przypadku braku dopasowania wyszukiwanie rozpocznie się na początku kolekcji.  
  
 Właściwość odnosi się do klucza dla elementu <xref:System.Windows.Forms.TreeNode> w <xref:System.Windows.Forms.TreeNodeCollection>. <xref:System.Windows.Forms.TreeNode.Name%2A>  
  
 W porównaniu do klucza nie jest rozróżniana wielkość liter. Jeśli `key` jest `null` lub jest pustym ciągiem, <xref:System.Windows.Forms.TreeNodeCollection.Item%2A> Właściwość zwraca wartość-1.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Insert">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Wstawia element do kolekcji w określonej lokalizacji.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.TreeNode Insert (int index, string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.TreeNode Insert(int32 index, string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Insert(System.Int32,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Insert (index As Integer, text As String) As TreeNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::TreeNode ^ Insert(int index, System::String ^ text);" />
      <MemberSignature Language="F#" Value="abstract member Insert : int * string -&gt; System.Windows.Forms.TreeNode&#xA;override this.Insert : int * string -&gt; System.Windows.Forms.TreeNode" Usage="treeNodeCollection.Insert (index, text)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="text" Type="System.String" Index="1" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="index">Lokalizacja w kolekcji, w której ma zostać wstawiony węzeł.</param>
        <param name="text">Tekst, który ma być wyświetlany w węźle drzewa.</param>
        <summary>Tworzy węzeł drzewa z określonym tekstem i wstawia go w określonym indeksie.</summary>
        <returns><see cref="T:System.Windows.Forms.TreeNode" /> , Który został wstawiony w kolekcji.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli właściwość jest ustawiona na `true`, `index` wartość parametru jest ignorowana. <xref:System.Windows.Forms.TreeView.Sorted%2A> Zostanie wstawiony do widoku drzewa <xref:System.Windows.Forms.TreeView> , a następnie zostanie posortowany ponownie. <xref:System.Windows.Forms.TreeNode>  
  
 Możesz również dodać nowe <xref:System.Windows.Forms.TreeNode> obiekty do kolekcji <xref:System.Windows.Forms.TreeNodeCollection.Add%2A> przy użyciu metod lub <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> .  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public virtual void Insert (int index, System.Windows.Forms.TreeNode node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Insert(int32 index, class System.Windows.Forms.TreeNode node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Insert(System.Int32,System.Windows.Forms.TreeNode)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub Insert (index As Integer, node As TreeNode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Insert(int index, System::Windows::Forms::TreeNode ^ node);" />
      <MemberSignature Language="F#" Value="abstract member Insert : int * System.Windows.Forms.TreeNode -&gt; unit&#xA;override this.Insert : int * System.Windows.Forms.TreeNode -&gt; unit" Usage="treeNodeCollection.Insert (index, node)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="node" Type="System.Windows.Forms.TreeNode" />
      </Parameters>
      <Docs>
        <param name="index">Indeksowana lokalizacja w kolekcji, w której ma zostać wstawiony węzeł drzewa.</param>
        <param name="node"><see cref="T:System.Windows.Forms.TreeNode" /> Do wstawienia do kolekcji.</param>
        <summary>Wstawia istniejący węzeł drzewa do kolekcji węzłów drzewa w określonej lokalizacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli właściwość jest ustawiona na `true`, `index` wartość parametru jest ignorowana. <xref:System.Windows.Forms.TreeView.Sorted%2A?displayProperty=nameWithType> Program zostanie wstawiony do widoku drzewa, <xref:System.Windows.Forms.TreeView> a następnie. <xref:System.Windows.Forms.TreeNode>  
  
 Możesz również dodać nowe <xref:System.Windows.Forms.TreeNode> obiekty do kolekcji <xref:System.Windows.Forms.TreeNodeCollection.Add%2A> przy użyciu metod lub <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> .  
  
 Aby usunąć element <xref:System.Windows.Forms.TreeNode> , który został wcześniej dodany, <xref:System.Windows.Forms.TreeNodeCollection.Remove%2A>Użyj metody <xref:System.Windows.Forms.TreeNodeCollection.RemoveAt%2A>, lub <xref:System.Windows.Forms.TreeNodeCollection.Clear%2A> .  
  
> [!NOTE]
>  Można przypisać tylko do jednej <xref:System.Windows.Forms.TreeView> kontrolki naraz. <xref:System.Windows.Forms.TreeNode> Aby dodać węzeł drzewa do nowej kontrolki widoku drzewa, należy najpierw usunąć go z innego widoku drzewa lub sklonować go.  
  
   
  
## Examples  
 Poniższy przykład kodu usuwa wybrany węzeł drzewa z jednego <xref:System.Windows.Forms.TreeView> i dodaje go do innego, jeśli obie kolekcje węzłów drzewa nie są tylko do odczytu. <xref:System.Windows.Forms.TreeView> <xref:System.Windows.Forms.TreeNodeCollection.Insert%2A> <xref:System.Windows.Forms.TreeNodeCollection.Remove%2A> <xref:System.Windows.Forms.TreeView> Gdy zostanie kliknięty <xref:System.Windows.Forms.TreeNode> , reprezentowana przez <xref:System.Windows.Forms.TreeView.SelectedNode%2A?displayProperty=nameWithType> właściwość jest usuwana z jednej z nich przy użyciu metody i dodawana do drugiej przy użyciu metody. <xref:System.Windows.Forms.Button> Ten przykład wymaga <xref:System.Windows.Forms.Form> , aby zawierał dwie <xref:System.Windows.Forms.TreeView> kontrolki i <xref:System.Windows.Forms.Button>. Kontrolki powinny mieć nazwę `treeView1` i `treeView2`. <xref:System.Windows.Forms.TreeView>  
  
 [!code-cpp[TreeNodeCollection#1](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeNodeCollection/CPP/treenodecollection.cpp#1)]
 [!code-csharp[TreeNodeCollection#1](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeNodeCollection/CS/treenodecollection.cs#1)]
 [!code-vb[TreeNodeCollection#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeNodeCollection/VB/treenodecollection.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException">Jest obecnie przypisany do innego <see cref="T:System.Windows.Forms.TreeView" />. <paramref name="node" /></exception>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.TreeNode Insert (int index, string key, string text);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.TreeNode Insert(int32 index, string key, string text) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Insert(System.Int32,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Insert (index As Integer, key As String, text As String) As TreeNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::TreeNode ^ Insert(int index, System::String ^ key, System::String ^ text);" />
      <MemberSignature Language="F#" Value="abstract member Insert : int * string * string -&gt; System.Windows.Forms.TreeNode&#xA;override this.Insert : int * string * string -&gt; System.Windows.Forms.TreeNode" Usage="treeNodeCollection.Insert (index, key, text)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="key" Type="System.String" Index="1" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="text" Type="System.String" Index="2" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="index">Lokalizacja w kolekcji, w której ma zostać wstawiony węzeł.</param>
        <param name="key">Nazwa węzła drzewa.</param>
        <param name="text">Tekst, który ma być wyświetlany w węźle drzewa.</param>
        <summary>Tworzy węzeł drzewa z określonym tekstem i kluczem i wstawia go do kolekcji.</summary>
        <returns><see cref="T:System.Windows.Forms.TreeNode" /> , Który został wstawiony w kolekcji.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli właściwość jest ustawiona na `true`, `index` wartość parametru jest ignorowana. <xref:System.Windows.Forms.TreeView.Sorted%2A> Zostanie wstawiony do widoku drzewa <xref:System.Windows.Forms.TreeView> , a następnie zostanie posortowany ponownie. <xref:System.Windows.Forms.TreeNode>  
  
 Możesz również dodać nowe <xref:System.Windows.Forms.TreeNode> obiekty do kolekcji <xref:System.Windows.Forms.TreeNodeCollection.Add%2A> przy użyciu metod lub <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> .  
  
 Właściwość odnosi się do klucza dla elementu <xref:System.Windows.Forms.TreeNode> w <xref:System.Windows.Forms.TreeNodeCollection>. <xref:System.Windows.Forms.TreeNode.Name%2A>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.TreeNode Insert (int index, string key, string text, int imageIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.TreeNode Insert(int32 index, string key, string text, int32 imageIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Insert(System.Int32,System.String,System.String,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Insert (index As Integer, key As String, text As String, imageIndex As Integer) As TreeNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::TreeNode ^ Insert(int index, System::String ^ key, System::String ^ text, int imageIndex);" />
      <MemberSignature Language="F#" Value="abstract member Insert : int * string * string * int -&gt; System.Windows.Forms.TreeNode&#xA;override this.Insert : int * string * string * int -&gt; System.Windows.Forms.TreeNode" Usage="treeNodeCollection.Insert (index, key, text, imageIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="key" Type="System.String" Index="1" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="text" Type="System.String" Index="2" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="imageIndex" Type="System.Int32" Index="3" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="index">Lokalizacja w kolekcji, w której ma zostać wstawiony węzeł.</param>
        <param name="key">Nazwa węzła drzewa.</param>
        <param name="text">Tekst, który ma być wyświetlany w węźle drzewa.</param>
        <param name="imageIndex">Indeks obrazu, który ma być wyświetlany w węźle drzewa.</param>
        <summary>Tworzy węzeł drzewa z określonym kluczem, tekstem i obrazem, a następnie wstawia go do kolekcji o określonym indeksie.</summary>
        <returns><see cref="T:System.Windows.Forms.TreeNode" /> , Który został wstawiony w kolekcji.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli właściwość jest ustawiona na `true`, `index` wartość parametru jest ignorowana. <xref:System.Windows.Forms.TreeView.Sorted%2A> Zostanie wstawiony do widoku drzewa <xref:System.Windows.Forms.TreeView> , a następnie zostanie posortowany ponownie. <xref:System.Windows.Forms.TreeNode>  
  
 Możesz również dodać nowe <xref:System.Windows.Forms.TreeNode> obiekty do kolekcji <xref:System.Windows.Forms.TreeNodeCollection.Add%2A> przy użyciu metod lub <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> .  
  
 Właściwość odnosi się do klucza dla elementu <xref:System.Windows.Forms.TreeNode> w <xref:System.Windows.Forms.TreeNodeCollection>. <xref:System.Windows.Forms.TreeNode.Name%2A>  
  
 Parametr odnosi się do obrazu <xref:System.Windows.Forms.TreeView.ImageList%2A> we właściwości elementu nadrzędnego <xref:System.Windows.Forms.TreeView>. `imageIndex`  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.TreeNode Insert (int index, string key, string text, string imageKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.TreeNode Insert(int32 index, string key, string text, string imageKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Insert(System.Int32,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Insert (index As Integer, key As String, text As String, imageKey As String) As TreeNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::TreeNode ^ Insert(int index, System::String ^ key, System::String ^ text, System::String ^ imageKey);" />
      <MemberSignature Language="F#" Value="abstract member Insert : int * string * string * string -&gt; System.Windows.Forms.TreeNode&#xA;override this.Insert : int * string * string * string -&gt; System.Windows.Forms.TreeNode" Usage="treeNodeCollection.Insert (index, key, text, imageKey)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="key" Type="System.String" Index="1" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="text" Type="System.String" Index="2" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="imageKey" Type="System.String" Index="3" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="index">Lokalizacja w kolekcji, w której ma zostać wstawiony węzeł.</param>
        <param name="key">Nazwa węzła drzewa.</param>
        <param name="text">Tekst, który ma być wyświetlany w węźle drzewa.</param>
        <param name="imageKey">Klucz obrazu do wyświetlenia w węźle drzewa.</param>
        <summary>Tworzy węzeł drzewa z określonym kluczem, tekstem i obrazem, a następnie wstawia go do kolekcji o określonym indeksie.</summary>
        <returns><see cref="T:System.Windows.Forms.TreeNode" /> , Który został wstawiony w kolekcji.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli właściwość jest ustawiona na `true`, `index` wartość parametru jest ignorowana. <xref:System.Windows.Forms.TreeView.Sorted%2A> Zostanie wstawiony do widoku drzewa <xref:System.Windows.Forms.TreeView> , a następnie zostanie posortowany ponownie. <xref:System.Windows.Forms.TreeNode>  
  
 Możesz również dodać nowe <xref:System.Windows.Forms.TreeNode> obiekty do kolekcji <xref:System.Windows.Forms.TreeNodeCollection.Add%2A> przy użyciu metod lub <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> .  
  
 Właściwość odnosi się do klucza dla elementu <xref:System.Windows.Forms.TreeNode> w <xref:System.Windows.Forms.TreeNodeCollection>. <xref:System.Windows.Forms.TreeNode.Name%2A>  
  
 Parametr odnosi się do obrazu <xref:System.Windows.Forms.TreeView.ImageList%2A> we właściwości elementu nadrzędnego <xref:System.Windows.Forms.TreeView>. `imageKey`  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.TreeNode Insert (int index, string key, string text, int imageIndex, int selectedImageIndex);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.TreeNode Insert(int32 index, string key, string text, int32 imageIndex, int32 selectedImageIndex) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Insert(System.Int32,System.String,System.String,System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Insert (index As Integer, key As String, text As String, imageIndex As Integer, selectedImageIndex As Integer) As TreeNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::TreeNode ^ Insert(int index, System::String ^ key, System::String ^ text, int imageIndex, int selectedImageIndex);" />
      <MemberSignature Language="F#" Value="abstract member Insert : int * string * string * int * int -&gt; System.Windows.Forms.TreeNode&#xA;override this.Insert : int * string * string * int * int -&gt; System.Windows.Forms.TreeNode" Usage="treeNodeCollection.Insert (index, key, text, imageIndex, selectedImageIndex)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="key" Type="System.String" Index="1" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="text" Type="System.String" Index="2" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="imageIndex" Type="System.Int32" Index="3" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="selectedImageIndex" Type="System.Int32" Index="4" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="index">Lokalizacja w kolekcji, w której ma zostać wstawiony węzeł.</param>
        <param name="key">Nazwa węzła drzewa.</param>
        <param name="text">Tekst, który ma być wyświetlany w węźle drzewa.</param>
        <param name="imageIndex">Indeks obrazu, który ma być wyświetlany w węźle drzewa.</param>
        <param name="selectedImageIndex">Indeks obrazu, który ma być wyświetlany w węźle drzewa, gdy jest w wybranym stanie.</param>
        <summary>Tworzy węzeł drzewa z określonym kluczem, tekstem i obrazami, a następnie wstawia go do kolekcji o określonym indeksie.</summary>
        <returns><see cref="T:System.Windows.Forms.TreeNode" /> , Który został wstawiony w kolekcji.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli właściwość jest ustawiona na `true`, `index` wartość parametru jest ignorowana. <xref:System.Windows.Forms.TreeView.Sorted%2A> Zostanie wstawiony do widoku drzewa <xref:System.Windows.Forms.TreeView> , a następnie zostanie posortowany ponownie. <xref:System.Windows.Forms.TreeNode>  
  
 Możesz również dodać nowe <xref:System.Windows.Forms.TreeNode> obiekty do kolekcji <xref:System.Windows.Forms.TreeNodeCollection.Add%2A> przy użyciu metod lub <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> .  
  
 Właściwość odnosi się do klucza dla elementu <xref:System.Windows.Forms.TreeNode> w <xref:System.Windows.Forms.TreeNodeCollection>. <xref:System.Windows.Forms.TreeNode.Name%2A>  
  
 Parametr odnosi się do obrazu <xref:System.Windows.Forms.TreeView.ImageList%2A> we właściwości elementu nadrzędnego <xref:System.Windows.Forms.TreeView>. `imageIndex`  
  
 Parametr odnosi się do obrazu <xref:System.Windows.Forms.TreeView.StateImageList%2A> we właściwości elementu nadrzędnego <xref:System.Windows.Forms.TreeView>. `selectedimageIndex`  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Insert">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.TreeNode Insert (int index, string key, string text, string imageKey, string selectedImageKey);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.TreeNode Insert(int32 index, string key, string text, string imageKey, string selectedImageKey) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Insert(System.Int32,System.String,System.String,System.String,System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function Insert (index As Integer, key As String, text As String, imageKey As String, selectedImageKey As String) As TreeNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::TreeNode ^ Insert(int index, System::String ^ key, System::String ^ text, System::String ^ imageKey, System::String ^ selectedImageKey);" />
      <MemberSignature Language="F#" Value="abstract member Insert : int * string * string * string * string -&gt; System.Windows.Forms.TreeNode&#xA;override this.Insert : int * string * string * string * string -&gt; System.Windows.Forms.TreeNode" Usage="treeNodeCollection.Insert (index, key, text, imageKey, selectedImageKey)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="key" Type="System.String" Index="1" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="text" Type="System.String" Index="2" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="imageKey" Type="System.String" Index="3" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
        <Parameter Name="selectedImageKey" Type="System.String" Index="4" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="index">Lokalizacja w kolekcji, w której ma zostać wstawiony węzeł.</param>
        <param name="key">Nazwa węzła drzewa.</param>
        <param name="text">Tekst, który ma być wyświetlany w węźle drzewa.</param>
        <param name="imageKey">Klucz obrazu do wyświetlenia w węźle drzewa.</param>
        <param name="selectedImageKey">Klucz obrazu, który ma być wyświetlany w węźle drzewa, gdy jest w wybranym stanie.</param>
        <summary>Tworzy węzeł drzewa z określonym kluczem, tekstem i obrazami, a następnie wstawia go do kolekcji o określonym indeksie.</summary>
        <returns><see cref="T:System.Windows.Forms.TreeNode" /> , Który został wstawiony w kolekcji.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli właściwość jest ustawiona na `true`, `index` wartość parametru jest ignorowana. <xref:System.Windows.Forms.TreeView.Sorted%2A> Zostanie wstawiony do widoku drzewa <xref:System.Windows.Forms.TreeView> , a następnie zostanie posortowany ponownie. <xref:System.Windows.Forms.TreeNode>  
  
 Możesz również dodać nowe <xref:System.Windows.Forms.TreeNode> obiekty do kolekcji <xref:System.Windows.Forms.TreeNodeCollection.Add%2A> przy użyciu metod lub <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A> .  
  
 Właściwość odnosi się do klucza dla elementu <xref:System.Windows.Forms.TreeNode> w <xref:System.Windows.Forms.TreeNodeCollection>. <xref:System.Windows.Forms.TreeNode.Name%2A>  
  
 Parametr odnosi się do obrazu <xref:System.Windows.Forms.TreeView.ImageList%2A> we właściwości elementu nadrzędnego <xref:System.Windows.Forms.TreeView>. `imageKey`  
  
 Parametr odnosi się do obrazu <xref:System.Windows.Forms.TreeView.StateImageList%2A> we właściwości elementu nadrzędnego <xref:System.Windows.Forms.TreeView>. `selectedimageKey`  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="IsReadOnly">
      <MemberSignature Language="C#" Value="public bool IsReadOnly { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsReadOnly" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TreeNodeCollection.IsReadOnly" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsReadOnly As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsReadOnly { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsReadOnly : bool" Usage="System.Windows.Forms.TreeNodeCollection.IsReadOnly" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.IsReadOnly</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy kolekcja jest tylko do odczytu.</summary>
        <value><see langword="true" />Jeśli kolekcja jest tylko do odczytu; w przeciwnym razie. <see langword="false" /> Wartość domyślna to <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu usuwa wybrany węzeł drzewa z jednego <xref:System.Windows.Forms.TreeView> i dodaje go do innego, jeśli obie kolekcje węzłów drzewa nie są tylko do odczytu. <xref:System.Windows.Forms.TreeView> <xref:System.Windows.Forms.TreeNodeCollection.Insert%2A> <xref:System.Windows.Forms.TreeNodeCollection.Remove%2A> <xref:System.Windows.Forms.TreeView> Gdy zostanie kliknięty <xref:System.Windows.Forms.TreeNode> , reprezentowana przez <xref:System.Windows.Forms.TreeView.SelectedNode%2A?displayProperty=nameWithType> właściwość jest usuwana z jednej z nich przy użyciu metody i dodawana do drugiej przy użyciu metody. <xref:System.Windows.Forms.Button> Ten przykład wymaga <xref:System.Windows.Forms.Form> , aby zawierał dwie <xref:System.Windows.Forms.TreeView> kontrolki i <xref:System.Windows.Forms.Button>. Kontrolki powinny mieć nazwę `treeView1` i `treeView2`. <xref:System.Windows.Forms.TreeView>  
  
 [!code-cpp[TreeNodeCollection#1](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeNodeCollection/CPP/treenodecollection.cpp#1)]
 [!code-csharp[TreeNodeCollection#1](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeNodeCollection/CS/treenodecollection.cs#1)]
 [!code-vb[TreeNodeCollection#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeNodeCollection/VB/treenodecollection.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Item">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Pobiera lub ustawia węzeł drzewa w kolekcji.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.TreeNode this[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.TreeNode Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TreeNodeCollection.Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Default Public Overridable Property Item(index As Integer) As TreeNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::TreeNode ^ default[int] { System::Windows::Forms::TreeNode ^ get(int index); void set(int index, System::Windows::Forms::TreeNode ^ value); };" />
      <MemberSignature Language="F#" Value="member this.Item(int) : System.Windows.Forms.TreeNode with get, set" Usage="System.Windows.Forms.TreeNodeCollection.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Indeksowana lokalizacja <see cref="T:System.Windows.Forms.TreeNode" /> w kolekcji.</param>
        <summary>Pobiera lub ustawia wartość <see cref="T:System.Windows.Forms.TreeNode" /> w określonej indeksowanej lokalizacji w kolekcji.</summary>
        <value><see cref="T:System.Windows.Forms.TreeNode" /> W określonej indeksowanej lokalizacji w kolekcji.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby przypisać <xref:System.Windows.Forms.TreeNode> obiekty do określonej lokalizacji lub pobrać je <xref:System.Windows.Forms.TreeNodeCollection>z, można odwoływać się do obiektu kolekcji z określoną wartością indeksu. Wartość <xref:System.Windows.Forms.TreeNodeCollection> indeksu jest indeksem liczonym od zera.  
  
   
  
## Examples  
 Poniższy przykład kodu usuwa pierwszy <xref:System.Windows.Forms.TreeNode> z, <xref:System.Windows.Forms.TreeView> jeśli jego <xref:System.Windows.Forms.TreeNode.Text%2A?displayProperty=nameWithType> właściwość jest ustawiona na wartość "Node0". Gdy zostanie kliknięty, pierwszy <xref:System.Windows.Forms.TreeNode> <xref:System.Windows.Forms.TreeView> element jest usuwany przy użyciu <xref:System.Windows.Forms.TreeNodeCollection.RemoveAt%2A> metody. <xref:System.Windows.Forms.Button> Ten przykład wymaga, aby zostały utworzone <xref:System.Windows.Forms.TreeView> <xref:System.Windows.Forms.Button> i w <xref:System.Windows.Forms.Form>. <xref:System.Windows.Forms.TreeNode> Pierwszy<xref:System.Windows.Forms.TreeView> element powinien mieć właściwość Text "Node0".  
  
 [!code-cpp[TreeNodeCollection#2](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeNodeCollection/CPP/treenodecollection.cpp#2)]
 [!code-csharp[TreeNodeCollection#2](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeNodeCollection/CS/treenodecollection.cs#2)]
 [!code-vb[TreeNodeCollection#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeNodeCollection/VB/treenodecollection.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><paramref name="index" /> Wartość jest mniejsza niż 0 lub jest większa niż liczba węzłów drzewa w kolekcji.</exception>
        <altmember cref="P:System.Windows.Forms.TreeNodeCollection.Count" />
      </Docs>
    </Member>
    <Member MemberName="Item">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.TreeNode this[string key] { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Windows.Forms.TreeNode Item(string)" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TreeNodeCollection.Item(System.String)" />
      <MemberSignature Language="VB.NET" Value="Default Public Overridable ReadOnly Property Item(key As String) As TreeNode" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::TreeNode ^ default[System::String ^] { System::Windows::Forms::TreeNode ^ get(System::String ^ key); };" />
      <MemberSignature Language="F#" Value="member this.Item(string) : System.Windows.Forms.TreeNode" Usage="System.Windows.Forms.TreeNodeCollection.Item" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.TreeNode</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="key">Nazwa <see cref="T:System.Windows.Forms.TreeNode" /> do pobrania z kolekcji.</param>
        <summary>Pobiera węzeł drzewa z określonym kluczem z kolekcji.</summary>
        <value><see cref="T:System.Windows.Forms.TreeNode" /> Przy użyciu określonego klucza.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Właściwość odnosi się do klucza dla elementu <xref:System.Windows.Forms.TreeNode> w <xref:System.Windows.Forms.TreeNodeCollection>. <xref:System.Windows.Forms.TreeNode.Name%2A>  
  
 W porównaniu do klucza nie jest rozróżniana wielkość liter. Jeśli parametr jest `null` lub ciągiem pustym, <xref:System.Windows.Forms.TreeNodeCollection.Item%2A> Właściwość zwraca `null`. `key`  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Remove">
      <MemberSignature Language="C#" Value="public void Remove (System.Windows.Forms.TreeNode node);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void Remove(class System.Windows.Forms.TreeNode node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.Remove(System.Windows.Forms.TreeNode)" />
      <MemberSignature Language="VB.NET" Value="Public Sub Remove (node As TreeNode)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void Remove(System::Windows::Forms::TreeNode ^ node);" />
      <MemberSignature Language="F#" Value="member this.Remove : System.Windows.Forms.TreeNode -&gt; unit" Usage="treeNodeCollection.Remove node" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Windows.Forms.TreeNode" />
      </Parameters>
      <Docs>
        <param name="node"><see cref="T:System.Windows.Forms.TreeNode" /> Do usunięcia.</param>
        <summary>Usuwa określony węzeł drzewa z kolekcji węzłów drzewa.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.TreeNode> Po usunięciu z kolekcji węzłów drzewa wszystkie kolejne węzły drzewa zostają przesunięte w górę o jedną pozycję w kolekcji.  
  
 Możesz również usunąć element <xref:System.Windows.Forms.TreeNode> , który został wcześniej dodany przy <xref:System.Windows.Forms.TreeNodeCollection.RemoveAt%2A> użyciu metod lub <xref:System.Windows.Forms.TreeNodeCollection.Clear%2A> .  
  
> [!NOTE]
>  Wyliczanie kolekcji i usuwanie węzłów nie jest obsługiwane.  
  
 Aby dodać nowe <xref:System.Windows.Forms.TreeNode> obiekty do kolekcji, <xref:System.Windows.Forms.TreeNodeCollection.Add%2A>Użyj metody, <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A>lub <xref:System.Windows.Forms.TreeNodeCollection.Insert%2A> .  
  
   
  
## Examples  
 Poniższy przykład kodu usuwa wybrany węzeł drzewa z jednego <xref:System.Windows.Forms.TreeView> i dodaje go do innego, jeśli obie kolekcje węzłów drzewa nie są tylko do odczytu. <xref:System.Windows.Forms.TreeView> <xref:System.Windows.Forms.TreeNodeCollection.Insert%2A> <xref:System.Windows.Forms.TreeNodeCollection.Remove%2A> <xref:System.Windows.Forms.TreeView> Gdy zostanie kliknięty <xref:System.Windows.Forms.TreeNode> , reprezentowana przez <xref:System.Windows.Forms.TreeView.SelectedNode%2A?displayProperty=nameWithType> właściwość jest usuwana z jednej z nich przy użyciu metody i dodawana do drugiej przy użyciu metody. <xref:System.Windows.Forms.Button> Ten przykład wymaga <xref:System.Windows.Forms.Form> , aby zawierał dwie <xref:System.Windows.Forms.TreeView> kontrolki i <xref:System.Windows.Forms.Button>. Kontrolki powinny mieć nazwę `treeView1` i `treeView2`. <xref:System.Windows.Forms.TreeView>  
  
 [!code-cpp[TreeNodeCollection#1](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeNodeCollection/CPP/treenodecollection.cpp#1)]
 [!code-csharp[TreeNodeCollection#1](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeNodeCollection/CS/treenodecollection.cs#1)]
 [!code-vb[TreeNodeCollection#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeNodeCollection/VB/treenodecollection.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.TreeNodeCollection.RemoveAt(System.Int32)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveAt">
      <MemberSignature Language="C#" Value="public virtual void RemoveAt (int index);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveAt(int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.RemoveAt(System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveAt (index As Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveAt(int index);" />
      <MemberSignature Language="F#" Value="abstract member RemoveAt : int -&gt; unit&#xA;override this.RemoveAt : int -&gt; unit" Usage="treeNodeCollection.RemoveAt index" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.RemoveAt(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="index">Indeks <see cref="T:System.Windows.Forms.TreeNode" /> do usunięcia.</param>
        <summary>Usuwa węzeł drzewa z kolekcji węzłów drzewa pod określonym indeksem.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.TreeNode> Po usunięciu z kolekcji węzłów drzewa wszystkie kolejne węzły drzewa zostają przesunięte w górę o jedną pozycję w kolekcji.  
  
 Możesz również usunąć element <xref:System.Windows.Forms.TreeNode> , który został wcześniej dodany przy <xref:System.Windows.Forms.TreeNodeCollection.Remove%2A> użyciu metod lub <xref:System.Windows.Forms.TreeNodeCollection.Clear%2A> .  
  
> [!NOTE]
>  Wyliczanie kolekcji i usuwanie węzłów nie jest obsługiwane.  
  
 Aby dodać nowe <xref:System.Windows.Forms.TreeNode> obiekty do kolekcji, <xref:System.Windows.Forms.TreeNodeCollection.Add%2A>Użyj metody, <xref:System.Windows.Forms.TreeNodeCollection.AddRange%2A>lub <xref:System.Windows.Forms.TreeNodeCollection.Insert%2A> .  
  
   
  
## Examples  
 Poniższy przykład kodu usuwa pierwszy <xref:System.Windows.Forms.TreeNode> z, <xref:System.Windows.Forms.TreeView> jeśli jego <xref:System.Windows.Forms.TreeNode.Text%2A?displayProperty=nameWithType> właściwość jest ustawiona na wartość "Node0". Gdy zostanie kliknięty, pierwszy <xref:System.Windows.Forms.TreeNode> <xref:System.Windows.Forms.TreeView> element jest usuwany przy użyciu <xref:System.Windows.Forms.TreeNodeCollection.RemoveAt%2A> metody. <xref:System.Windows.Forms.Button> Ten przykład wymaga, aby zostały utworzone <xref:System.Windows.Forms.TreeView> <xref:System.Windows.Forms.Button> i w <xref:System.Windows.Forms.Form>. <xref:System.Windows.Forms.TreeNode> Pierwszy<xref:System.Windows.Forms.TreeView> element powinien mieć właściwość Text "Node0".  
  
 [!code-cpp[TreeNodeCollection#2](~/samples/snippets/cpp/VS_Snippets_Winforms/TreeNodeCollection/CPP/treenodecollection.cpp#2)]
 [!code-csharp[TreeNodeCollection#2](~/samples/snippets/csharp/VS_Snippets_Winforms/TreeNodeCollection/CS/treenodecollection.cs#2)]
 [!code-vb[TreeNodeCollection#2](~/samples/snippets/visualbasic/VS_Snippets_Winforms/TreeNodeCollection/VB/treenodecollection.vb#2)]  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Windows.Forms.TreeNodeCollection.Remove(System.Windows.Forms.TreeNode)" />
      </Docs>
    </Member>
    <Member MemberName="RemoveByKey">
      <MemberSignature Language="C#" Value="public virtual void RemoveByKey (string key);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void RemoveByKey(string key) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.RemoveByKey(System.String)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Sub RemoveByKey (key As String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void RemoveByKey(System::String ^ key);" />
      <MemberSignature Language="F#" Value="abstract member RemoveByKey : string -&gt; unit&#xA;override this.RemoveByKey : string -&gt; unit" Usage="treeNodeCollection.RemoveByKey key" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="key" Type="System.String" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="key">Nazwa węzła drzewa do usunięcia z kolekcji.</param>
        <summary>Usuwa węzeł drzewa z określonym kluczem z kolekcji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Właściwość odnosi się do klucza dla elementu <xref:System.Windows.Forms.TreeNode> w <xref:System.Windows.Forms.TreeNodeCollection>. <xref:System.Windows.Forms.TreeNode.Name%2A>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.IsSynchronized">
      <MemberSignature Language="C#" Value="bool System.Collections.ICollection.IsSynchronized { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.ICollection.IsSynchronized" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TreeNodeCollection.System#Collections#ICollection#IsSynchronized" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsSynchronized As Boolean Implements ICollection.IsSynchronized" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::ICollection::IsSynchronized { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ICollection.IsSynchronized" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.IsSynchronized</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy dostęp do kolekcji jest synchronizowany (bezpieczny wątkowo).</summary>
        <value><see langword="false" />we wszystkich przypadkach.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.ICollection.SyncRoot">
      <MemberSignature Language="C#" Value="object System.Collections.ICollection.SyncRoot { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.ICollection.SyncRoot" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TreeNodeCollection.System#Collections#ICollection#SyncRoot" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property SyncRoot As Object Implements ICollection.SyncRoot" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::ICollection::SyncRoot { System::Object ^ get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.ICollection.SyncRoot" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.ICollection.SyncRoot</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera obiekt, który może służyć do synchronizowania dostępu do kolekcji.</summary>
        <value>Obiekt, który może służyć do synchronizowania dostępu do <see cref="T:System.Windows.Forms.TreeNodeCollection" />.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Add">
      <MemberSignature Language="C#" Value="int IList.Add (object node);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.Add(object node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.System#Collections#IList#Add(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Add (node As Object) As Integer Implements IList.Add" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IList.Add(System::Object ^ node) = System::Collections::IList::Add;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Add(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="node">Obiekt, który ma zostać dodany do kolekcji węzłów drzewa.</param>
        <summary>Dodaje obiekt na końcu kolekcji węzłów drzewa.</summary>
        <returns>Wartość indeksu liczony od zera, <see cref="T:System.Windows.Forms.TreeNode" /> która została dodana do kolekcji węzłów drzewa.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `node` <xref:System.Windows.Forms.TreeNode> nie jest ,<xref:System.Windows.Forms.TreeNodeCollection.System%23Collections%23IList%23Add%2A> Metoda będzie używać ciągu zwracanego przez metodęklasy.<xref:System.Windows.Forms.TreeNode.ToString%2A> <xref:System.Windows.Forms.TreeNodeCollection>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.Exception"><paramref name="node" />jest obecnie przypisany do innej <see cref="T:System.Windows.Forms.TreeView" /> kontrolki.</exception>
        <exception cref="T:System.ArgumentNullException"><paramref name="node" />jest <see langword="null" />.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Contains">
      <MemberSignature Language="C#" Value="bool IList.Contains (object node);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance bool System.Collections.IList.Contains(object node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.System#Collections#IList#Contains(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function Contains (node As Object) As Boolean Implements IList.Contains" />
      <MemberSignature Language="C++ CLI" Value=" virtual bool System.Collections.IList.Contains(System::Object ^ node) = System::Collections::IList::Contains;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Contains(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="node">Obiekt, który ma znajdować się w kolekcji.</param>
        <summary>Określa, czy określony węzeł drzewa jest członkiem kolekcji.</summary>
        <returns><see langword="true" />Jeśli <paramref name="node" /> jest członkiem kolekcji; <see langword="false" />w przeciwnym razie.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `node` niejest<xref:System.Windows.Forms.TreeNodeCollection.System%23Collections%23IList%23Contains%2A> , Metoda zwraca`false`. <xref:System.Windows.Forms.TreeNode> W związku z tym nie można przekazać ciągu, aby określić, czy kolekcja zawiera węzeł, który ma wartość ciągu jako <xref:System.Windows.Forms.TreeNode.Text%2A> właściwość.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IndexOf">
      <MemberSignature Language="C#" Value="int IList.IndexOf (object node);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance int32 System.Collections.IList.IndexOf(object node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.System#Collections#IList#IndexOf(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Function IndexOf (node As Object) As Integer Implements IList.IndexOf" />
      <MemberSignature Language="C++ CLI" Value=" virtual int System.Collections.IList.IndexOf(System::Object ^ node) = System::Collections::IList::IndexOf;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.IndexOf(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="node"><see cref="T:System.Windows.Forms.TreeNode" /> Aby zlokalizować w kolekcji.</param>
        <summary>Zwraca indeks określonego węzła drzewa w kolekcji.</summary>
        <returns>Liczony od zera indeks elementu znaleziony w kolekcji węzłów drzewa; w przeciwnym razie-1.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli `node` niejest<xref:System.Windows.Forms.TreeNodeCollection.System%23Collections%23IList%23IndexOf%2A>,Metoda zwraca wartość-1. <xref:System.Windows.Forms.TreeNode> W związku z tym nie można przekazać ciągu, aby znaleźć węzeł, który ma wartość ciągu jako <xref:System.Windows.Forms.TreeNode.Text%2A> właściwość.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Insert">
      <MemberSignature Language="C#" Value="void IList.Insert (int index, object node);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Insert(int32 index, object node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.System#Collections#IList#Insert(System.Int32,System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Insert (index As Integer, node As Object) Implements IList.Insert" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Insert(int index, System::Object ^ node) = System::Collections::IList::Insert;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Insert(System.Int32,System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" />
        <Parameter Name="node" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="index">Indeksowana lokalizacja w kolekcji, w której ma zostać wstawiony węzeł drzewa.</param>
        <param name="node"><see cref="T:System.Windows.Forms.TreeNode" /> Do wstawienia do kolekcji.</param>
        <summary>Wstawia istniejący węzeł drzewa w kolekcji węzłów drzewa w określonej lokalizacji.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli właściwość jest ustawiona na `true`, `index` parametr jest ignorowany. <xref:System.Windows.Forms.TreeView.Sorted%2A> Zostanie wstawiony do widoku drzewa <xref:System.Web.UI.WebControls.TreeView> , a następnie zostanie posortowany ponownie. <xref:System.Windows.Forms.TreeNode>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentException"><paramref name="node" />jest obecnie przypisany do innej <see cref="T:System.Windows.Forms.TreeView" />.  
  
—lub— 
 <paramref name="node" />nie <see cref="T:System.Windows.Forms.TreeNode" />jest.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.IsFixedSize">
      <MemberSignature Language="C#" Value="bool System.Collections.IList.IsFixedSize { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool System.Collections.IList.IsFixedSize" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TreeNodeCollection.System#Collections#IList#IsFixedSize" />
      <MemberSignature Language="VB.NET" Value=" ReadOnly Property IsFixedSize As Boolean Implements IList.IsFixedSize" />
      <MemberSignature Language="C++ CLI" Value="property bool System::Collections::IList::IsFixedSize { bool get(); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IList.IsFixedSize" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.IsFixedSize</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy kolekcja węzłów drzewa ma stały rozmiar.</summary>
        <value><see langword="false" />we wszystkich przypadkach.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Item">
      <MemberSignature Language="C#" Value="object System.Collections.IList.Item[int index] { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance object System.Collections.IList.Item(int32)" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.TreeNodeCollection.System#Collections#IList#Item(System.Int32)" />
      <MemberSignature Language="VB.NET" Value=" Property Item(index As Integer) As Object Implements IList.Item" />
      <MemberSignature Language="C++ CLI" Value="property System::Object ^ System::Collections::IList::Item[int] { System::Object ^ get(int index); void set(int index, System::Object ^ value); };" />
      <MemberSignature Language="F#" Usage="System.Collections.IList.Item" />
      <MemberType>Property</MemberType>
      <Implements>
        <InterfaceMember>P:System.Collections.IList.Item(System.Int32)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Object</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="index" Type="System.Int32" Index="0" FrameworkAlternate="netcore-3.0;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8" />
      </Parameters>
      <Docs>
        <param name="index">Indeks (liczony od zera), w którym ma zostać pobrany lub ustawiony element.</param>
        <summary>Pobiera lub ustawia węzeł drzewa o określonym indeksie w kolekcji.</summary>
        <value>Pod określonym indeksem <see cref="T:System.Windows.Forms.TreeNodeCollection" />w. <see cref="T:System.Windows.Forms.TreeNode" /></value>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">Ustawiona wartość nie <see cref="T:System.Windows.Forms.TreeNode" />jest.</exception>
      </Docs>
    </Member>
    <Member MemberName="System.Collections.IList.Remove">
      <MemberSignature Language="C#" Value="void IList.Remove (object node);" />
      <MemberSignature Language="ILAsm" Value=".method hidebysig newslot virtual instance void System.Collections.IList.Remove(object node) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.TreeNodeCollection.System#Collections#IList#Remove(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Sub Remove (node As Object) Implements IList.Remove" />
      <MemberSignature Language="C++ CLI" Value=" virtual void System.Collections.IList.Remove(System::Object ^ node) = System::Collections::IList::Remove;" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.Collections.IList.Remove(System.Object)</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="node" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="node"><see cref="T:System.Windows.Forms.TreeNode" /> Do usunięcia z kolekcji.</param>
        <summary>Usuwa określony węzeł drzewa z kolekcji węzłów drzewa.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Nie można przekazać ciągu, aby usunąć węzeł, który ma wartość ciągu jako <xref:System.Windows.Forms.TreeNode.Text%2A> właściwość.  
  
 <xref:System.Windows.Forms.TreeNode> Po usunięciu z kolekcji węzłów drzewa wszystkie kolejne węzły drzewa zostają przesunięte w górę o jedną pozycję w kolekcji.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>
