<Type Name="KeyEventArgs" FullName="System.Windows.Forms.KeyEventArgs">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="5034188cc4252d2600766ee8008fcaf5e7d70ab1" />
    <Meta Name="ms.sourcegitcommit" Value="6a0b904069161bbaec4ffd02aa7d9cf38c61e72e" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="06/24/2018" />
    <Meta Name="ms.locfileid" Value="36519870" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class KeyEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit KeyEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.KeyEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class KeyEventArgs&#xA;Inherits EventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class KeyEventArgs : EventArgs" />
  <TypeSignature Language="F#" Value="type KeyEventArgs = class&#xA;    inherit EventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Udostępnia dane dla <see cref="E:System.Windows.Forms.Control.KeyDown" /> lub <see cref="E:System.Windows.Forms.Control.KeyUp" /> zdarzeń.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.Windows.Forms.KeyEventArgs>, który określa klucz użytkownika naciśnięty i czy wszystkie klawisze modyfikujące (CTRL, ALT i SHIFT) zostały naciśnięte w tym samym czasie, jest przekazywany z każdym <xref:System.Windows.Forms.Control.KeyDown> lub <xref:System.Windows.Forms.Control.KeyUp> zdarzeń.  
  
 <xref:System.Windows.Forms.Control.KeyDown> Zdarzenie wystąpi, gdy użytkownik naciśnie dowolny klawisz. <xref:System.Windows.Forms.Control.KeyUp> Zdarzenie wystąpi, gdy użytkownik zwolni klawisz. Zduplikowana <xref:System.Windows.Forms.Control.KeyDown> zdarzenia występują zawsze klucz jest powtarzany, jeśli klucz jest przechowywany w dół, ale tylko jeden <xref:System.Windows.Forms.Control.KeyUp> zdarzenie jest generowane, gdy użytkownik zwolni klawisz.  
  
 <xref:System.Windows.Forms.Control.KeyPress> Zdarzeń występuje także, gdy zostanie naciśnięty klawisz. A <xref:System.Windows.Forms.KeyPressEventArgs> jest przekazywany z każdym <xref:System.Windows.Forms.Control.KeyPress> zdarzeń i określa znak, który został utworzony w wyniku każdego naciśnięcie klawisza.  
  
 Aby uzyskać informacje na temat modelu zdarzeń, zobacz [Obsługa i wywoływanie zdarzeń](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 W poniższych przykładach kodu przedstawiają sposób wykrywania stanu naciśnięcie klawisza.  
  
 **Przykład 1**  
  
 Poniższy przykład kodu pokazuje sposób użycia <xref:System.Windows.Forms.Control.KeyDown> zdarzenie z <xref:System.Windows.Forms.Help> klasy do wyświetlenia wyskakującego Styl pomocy dla użytkownika aplikacji. W przykładzie użyto <xref:System.Windows.Forms.KeyEventArgs> właściwości przekazywany do metody obsługi zdarzeń można filtrować wszystkie odmiany funkcji naciśnięcie klawisza F1 z klawisz modyfikujący. Gdy użytkownik naciśnie zmiany F1 zawierający wszystkie modyfikator klawiatury <xref:System.Windows.Forms.Help> klasa Wyświetla okno podręczne, podobnie jak <xref:System.Windows.Forms.ToolTip>, pobliżu formantu. Gdy użytkownik naciśnie klawisz ALT + F2, różnych okno pomocy zostanie wyświetlone dodatkowe informacje.  
  
 [!code-cpp[KeyEventArgs.Modifiers#1](~/samples/snippets/cpp/VS_Snippets_Winforms/KeyEventArgs.Modifiers/CPP/form1.cpp#1)]
 [!code-csharp[KeyEventArgs.Modifiers#1](~/samples/snippets/csharp/VS_Snippets_Winforms/KeyEventArgs.Modifiers/CS/form1.cs#1)]
 [!code-vb[KeyEventArgs.Modifiers#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/KeyEventArgs.Modifiers/VB/form1.vb#1)]  
  
 **Przykład 2**  
  
 Poniższy przykład określa, czy użytkownik nacisnął klawisz ALT + E, a wskaźnik myszy znajduje się nad <xref:System.Windows.Forms.TreeNode>, umożliwia użytkownikom edytowanie, który <xref:System.Windows.Forms.TreeNode>.  
  
 [!code-cpp[Windows.Forms.Control Members4#3](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Members4/CPP/controlmembers4.cpp#3)]
 [!code-csharp[Windows.Forms.Control Members4#3](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Members4/CS/controlmembers4.cs#3)]
 [!code-vb[Windows.Forms.Control Members4#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Members4/VB/controlmembers4.vb#3)]  
  
 **Przykład 3**  
  
 Poniższy przykład określa, czy użytkownik nacisnął klawisz klucz nieliczbowy i jeśli tak, anuluje <xref:System.Windows.Forms.Control.KeyPress> zdarzeń za pomocą <xref:System.Windows.Forms.KeyEventArgs.Handled%2A> właściwości.  
  
 [!code-cpp[Control.KeyDown#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.KeyDown/CPP/form1.cpp#1)]
 [!code-csharp[Control.KeyDown#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.KeyDown/CS/form1.cs#1)]
 [!code-vb[Control.KeyDown#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.KeyDown/VB/form1.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Windows.Forms.Control.OnKeyDown(System.Windows.Forms.KeyEventArgs)" />
    <altmember cref="E:System.Windows.Forms.Control.KeyDown" />
    <altmember cref="M:System.Windows.Forms.Control.OnKeyUp(System.Windows.Forms.KeyEventArgs)" />
    <altmember cref="E:System.Windows.Forms.Control.KeyUp" />
    <altmember cref="T:System.Windows.Forms.KeyPressEventArgs" />
    <altmember cref="M:System.Windows.Forms.Control.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)" />
    <altmember cref="E:System.Windows.Forms.Control.KeyPress" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public KeyEventArgs (System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.KeyEventArgs.#ctor(System.Windows.Forms.Keys)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (keyData As Keys)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; KeyEventArgs(System::Windows::Forms::Keys keyData);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.KeyEventArgs : System.Windows.Forms.Keys -&gt; System.Windows.Forms.KeyEventArgs" Usage="new System.Windows.Forms.KeyEventArgs keyData" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="keyData">A <see cref="T:System.Windows.Forms.Keys" /> reprezentujących klucz, który został naciśnięty, połączone przy użyciu flag modyfikator wskazujące zostały naciśnięte klawisze CTRL i SHIFT, ALT, w tym samym czasie. Możliwe wartości są uzyskiwane stosować bitowe lub operatora (|), aby stałe z <see cref="T:System.Windows.Forms.Keys" /> wyliczenia.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Forms.KeyEventArgs" /> klasy.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Forms.KeyPressEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="Alt">
      <MemberSignature Language="C#" Value="public virtual bool Alt { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Alt" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.KeyEventArgs.Alt" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Alt As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool Alt { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.Alt : bool" Usage="System.Windows.Forms.KeyEventArgs.Alt" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy został naciśnięty klawisz ALT.</summary>
        <value>
          <see langword="true" /> Jeśli został naciśnięty klawisz ALT; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 **Przykład 1**  
  
 Poniższy przykład kodu pokazuje sposób użycia <xref:System.Windows.Forms.Control.KeyDown> zdarzenie z <xref:System.Windows.Forms.Help> klasy do wyświetlenia wyskakującego Styl pomocy dla użytkownika aplikacji. W przykładzie użyto <xref:System.Windows.Forms.KeyEventArgs> właściwości przekazywany do metody obsługi zdarzeń można filtrować wszystkie odmiany funkcji naciśnięcie klawisza F1 z klawisz modyfikujący. Gdy użytkownik naciśnie zmiany F1 zawierający wszystkie modyfikator klawiatury <xref:System.Windows.Forms.Help> klasa Wyświetla okno podręczne, podobnie jak <xref:System.Windows.Forms.ToolTip>, pobliżu formantu. Gdy użytkownik naciśnie klawisz ALT + F2, różnych okno pomocy zostanie wyświetlone dodatkowe informacje.  
  
 [!code-cpp[KeyEventArgs.Modifiers#1](~/samples/snippets/cpp/VS_Snippets_Winforms/KeyEventArgs.Modifiers/CPP/form1.cpp#1)]
 [!code-csharp[KeyEventArgs.Modifiers#1](~/samples/snippets/csharp/VS_Snippets_Winforms/KeyEventArgs.Modifiers/CS/form1.cs#1)]
 [!code-vb[KeyEventArgs.Modifiers#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/KeyEventArgs.Modifiers/VB/form1.vb#1)]  
  
 **Przykład 2**  
  
 Poniższy przykład określa, czy użytkownik nacisnął klawisz ALT + E, a wskaźnik myszy znajduje się nad <xref:System.Windows.Forms.TreeNode>, umożliwia użytkownikom edytowanie, który <xref:System.Windows.Forms.TreeNode>.  
  
 [!code-cpp[Windows.Forms.Control Members4#3](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Members4/CPP/controlmembers4.cpp#3)]
 [!code-csharp[Windows.Forms.Control Members4#3](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Members4/CS/controlmembers4.cs#3)]
 [!code-vb[Windows.Forms.Control Members4#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Members4/VB/controlmembers4.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.Control" />
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.Shift" />
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.Modifiers" />
      </Docs>
    </Member>
    <Member MemberName="Control">
      <MemberSignature Language="C#" Value="public bool Control { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Control" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.KeyEventArgs.Control" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Control As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Control { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.Control : bool" Usage="System.Windows.Forms.KeyEventArgs.Control" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy został naciśnięty klawisz CTRL.</summary>
        <value>
          <see langword="true" /> Jeśli został naciśnięty klawisz CTRL; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu pokazuje sposób użycia <xref:System.Windows.Forms.Control.KeyDown> zdarzenie z <xref:System.Windows.Forms.Help> klasy do wyświetlenia wyskakującego Styl pomocy dla użytkownika aplikacji. W przykładzie użyto <xref:System.Windows.Forms.KeyEventArgs> właściwości przekazywany do metody obsługi zdarzeń można filtrować wszystkie odmiany funkcji naciśnięcie klawisza F1 z klawisz modyfikujący. Gdy użytkownik naciśnie zmiany F1 zawierający wszystkie modyfikator klawiatury <xref:System.Windows.Forms.Help> klasa Wyświetla okno podręczne, podobnie jak <xref:System.Windows.Forms.ToolTip>, pobliżu formantu. Gdy użytkownik naciśnie klawisz ALT + F2, różnych okno pomocy zostanie wyświetlone dodatkowe informacje.  
  
 [!code-cpp[KeyEventArgs.Modifiers#1](~/samples/snippets/cpp/VS_Snippets_Winforms/KeyEventArgs.Modifiers/CPP/form1.cpp#1)]
 [!code-csharp[KeyEventArgs.Modifiers#1](~/samples/snippets/csharp/VS_Snippets_Winforms/KeyEventArgs.Modifiers/CS/form1.cs#1)]
 [!code-vb[KeyEventArgs.Modifiers#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/KeyEventArgs.Modifiers/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.Alt" />
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.Shift" />
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.Modifiers" />
      </Docs>
    </Member>
    <Member MemberName="Handled">
      <MemberSignature Language="C#" Value="public bool Handled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Handled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.KeyEventArgs.Handled" />
      <MemberSignature Language="VB.NET" Value="Public Property Handled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Handled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Handled : bool with get, set" Usage="System.Windows.Forms.KeyEventArgs.Handled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy zdarzenie zostało obsłużone.</summary>
        <value>
          <see langword="true" /> Aby pominąć formantu domyślny Obsługa; w przeciwnym razie <see langword="false" /> również przekazać zdarzeń wzdłuż do domyślny program obsługi sterowania.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.KeyEventArgs.Handled%2A> zaimplementowano inaczej przez inne formanty w formularzach systemu Windows. Dla formantów, takich jak <xref:System.Windows.Forms.TextBox> które podklasy kontrolki natywnego Win32, jest interpretowany oznacza komunikat klucza nie powinny być przekazywane do podstawowej macierzystego formantu. Jeśli ustawisz `Handled` true na <xref:System.Windows.Forms.TextBox>, formantu nie przejdą naciśnięcie klawisza `events` podstawowej Win32 kontrolki pola tekstowego, ale będzie nadal wyświetlana wpisane znaki, które użytkownik.  
  
 Jeśli chcesz uniemożliwić odbieranie naciśnięcie klawisza, Użyj bieżącego formantu <xref:System.Windows.Forms.KeyEventArgs.SuppressKeyPress%2A> właściwości.  
  
   
  
## Examples  
 Poniższy przykład określa, czy użytkownik nacisnął klawisz klucz nieliczbowy i jeśli tak, anuluje <xref:System.Windows.Forms.Control.KeyPress> zdarzeń za pomocą <xref:System.Windows.Forms.KeyEventArgs.Handled%2A> właściwości.  
  
 [!code-cpp[Control.KeyDown#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.KeyDown/CPP/form1.cpp#1)]
 [!code-csharp[Control.KeyDown#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.KeyDown/CS/form1.cs#1)]
 [!code-vb[Control.KeyDown#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.KeyDown/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.SuppressKeyPress" />
      </Docs>
    </Member>
    <Member MemberName="KeyCode">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Keys KeyCode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.Keys KeyCode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.KeyEventArgs.KeyCode" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property KeyCode As Keys" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Keys KeyCode { System::Windows::Forms::Keys get(); };" />
      <MemberSignature Language="F#" Value="member this.KeyCode : System.Windows.Forms.Keys" Usage="System.Windows.Forms.KeyEventArgs.KeyCode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Keys</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera kod klawiatury <see cref="E:System.Windows.Forms.Control.KeyDown" /> lub <see cref="E:System.Windows.Forms.Control.KeyUp" /> zdarzeń.</summary>
        <value>A <see cref="T:System.Windows.Forms.Keys" /> wartość, która jest kod klucza dla zdarzenia.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 W poniższych przykładach kodu pokazano sposób użycia <xref:System.Windows.Forms.KeyEventArgs.KeyCode%2A> właściwości w celu określenia, który klucz został naciśnięty.  
  
 **Przykład 1**  
  
 Poniższy przykład kodu pokazuje sposób użycia <xref:System.Windows.Forms.Control.KeyDown> zdarzenie z <xref:System.Windows.Forms.Help> klasy do wyświetlenia wyskakującego Styl pomocy dla użytkownika aplikacji. W przykładzie użyto <xref:System.Windows.Forms.KeyEventArgs> właściwości przekazywany do metody obsługi zdarzeń można filtrować wszystkie odmiany funkcji naciśnięcie klawisza F1 z klawisz modyfikujący. Gdy użytkownik naciśnie zmiany F1 zawierający wszystkie modyfikator klawiatury <xref:System.Windows.Forms.Help> klasa Wyświetla okno podręczne, podobnie jak <xref:System.Windows.Forms.ToolTip>, pobliżu formantu. Gdy użytkownik naciśnie klawisz ALT + F2, różnych okno pomocy zostanie wyświetlone dodatkowe informacje.  
  
 [!code-cpp[KeyEventArgs.Modifiers#1](~/samples/snippets/cpp/VS_Snippets_Winforms/KeyEventArgs.Modifiers/CPP/form1.cpp#1)]
 [!code-csharp[KeyEventArgs.Modifiers#1](~/samples/snippets/csharp/VS_Snippets_Winforms/KeyEventArgs.Modifiers/CS/form1.cs#1)]
 [!code-vb[KeyEventArgs.Modifiers#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/KeyEventArgs.Modifiers/VB/form1.vb#1)]  
  
 **Przykład 2**  
  
 Poniższy przykład określa, czy użytkownik nacisnął klawisz ALT + E, a wskaźnik myszy znajduje się nad <xref:System.Windows.Forms.TreeNode>, umożliwia użytkownikom edytowanie, który <xref:System.Windows.Forms.TreeNode>.  
  
 [!code-cpp[Windows.Forms.Control Members4#3](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Members4/CPP/controlmembers4.cpp#3)]
 [!code-csharp[Windows.Forms.Control Members4#3](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Members4/CS/controlmembers4.cs#3)]
 [!code-vb[Windows.Forms.Control Members4#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Members4/VB/controlmembers4.vb#3)]  
  
 **Przykład 3**  
  
 Poniższy przykład określa, czy użytkownik nacisnął klawisz klucz nieliczbowy i jeśli tak, anuluje <xref:System.Windows.Forms.Control.KeyPress> zdarzeń za pomocą <xref:System.Windows.Forms.KeyEventArgs.Handled%2A> właściwości.  
  
 [!code-cpp[Control.KeyDown#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.KeyDown/CPP/form1.cpp#1)]
 [!code-csharp[Control.KeyDown#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.KeyDown/CS/form1.cs#1)]
 [!code-vb[Control.KeyDown#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.KeyDown/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.KeyData" />
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.KeyValue" />
      </Docs>
    </Member>
    <Member MemberName="KeyData">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Keys KeyData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.Keys KeyData" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.KeyEventArgs.KeyData" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property KeyData As Keys" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Keys KeyData { System::Windows::Forms::Keys get(); };" />
      <MemberSignature Language="F#" Value="member this.KeyData : System.Windows.Forms.Keys" Usage="System.Windows.Forms.KeyEventArgs.KeyData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Keys</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera dane klucza dla <see cref="E:System.Windows.Forms.Control.KeyDown" /> lub <see cref="E:System.Windows.Forms.Control.KeyUp" /> zdarzeń.</summary>
        <value>A <see cref="T:System.Windows.Forms.Keys" /> reprezentującą kod klucza dla klucza, który został naciśnięty, połączeniu z modyfikatora flagi, które wskazują kombinację klawiszy CTRL i SHIFT, ALT został naciśnięty w tym samym czasie.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można użyć stałe z <xref:System.Windows.Forms.Keys> do wyodrębnienia informacji z <xref:System.Windows.Forms.KeyEventArgs.KeyData%2A> właściwości. Bitowy operator AND umożliwia porównanie danych zwróconych przez <xref:System.Windows.Forms.KeyEventArgs.KeyData%2A> za pomocą stałych w <xref:System.Windows.Forms.Keys> uzyskanie informacji dotyczących kluczy użytkownik kliknął przycisk. Aby określić, czy został naciśnięty klawisz modyfikujący określonych, użyj <xref:System.Windows.Forms.KeyEventArgs.Control%2A>, <xref:System.Windows.Forms.KeyEventArgs.Shift%2A>, i <xref:System.Windows.Forms.KeyEventArgs.Alt%2A> właściwości.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje użycie tego elementu członkowskiego. W tym przykładzie program obsługi zdarzeń raportów w przypadku wystąpienia <xref:System.Windows.Forms.Control.KeyDown?displayProperty=nameWithType> zdarzeń. Ten raport pomaga, aby dowiedzieć się, gdy zdarzenie występuje i mogą pomóc w debugowaniu. Aby raport wiele zdarzeń lub zdarzeń, które występuje często, rozważ zastąpienie <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> z <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> lub dołączanie wiadomości w wielowierszowym <xref:System.Windows.Forms.TextBox>.  
  
 Aby uruchomić przykładowy kod, wklej go do projektu, który zawiera wystąpienie typu, która dziedziczy po <xref:System.Windows.Forms.Control>, takich jak <xref:System.Windows.Forms.Button> lub <xref:System.Windows.Forms.ComboBox>. Następnie nazwą wystąpienia `Control1` i upewnij się, że program obsługi zdarzeń jest skojarzony z <xref:System.Windows.Forms.Control.KeyDown?displayProperty=nameWithType> zdarzeń.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#48](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#48)]
 [!code-vb[System.Windows.Forms.EventExamples#48](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#48)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.KeyCode" />
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.KeyValue" />
      </Docs>
    </Member>
    <Member MemberName="KeyValue">
      <MemberSignature Language="C#" Value="public int KeyValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 KeyValue" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.KeyEventArgs.KeyValue" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property KeyValue As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int KeyValue { int get(); };" />
      <MemberSignature Language="F#" Value="member this.KeyValue : int" Usage="System.Windows.Forms.KeyEventArgs.KeyValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość klawiatury <see cref="E:System.Windows.Forms.Control.KeyDown" /> lub <see cref="E:System.Windows.Forms.Control.KeyUp" /> zdarzeń.</summary>
        <value>Liczba całkowita reprezentację <see cref="P:System.Windows.Forms.KeyEventArgs.KeyCode" /> właściwości.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu pokazuje użycie tego elementu członkowskiego. W tym przykładzie program obsługi zdarzeń raportów w przypadku wystąpienia <xref:System.Windows.Forms.Control.KeyDown?displayProperty=nameWithType> zdarzeń. Ten raport pomaga, aby dowiedzieć się, gdy zdarzenie występuje i mogą pomóc w debugowaniu. Aby raport wiele zdarzeń lub zdarzeń, które występuje często, rozważ zastąpienie <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> z <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> lub dołączanie wiadomości w wielowierszowym <xref:System.Windows.Forms.TextBox>.  
  
 Aby uruchomić przykładowy kod, wklej go do projektu, który zawiera wystąpienie typu, która dziedziczy po <xref:System.Windows.Forms.Control>, takich jak <xref:System.Windows.Forms.Button> lub <xref:System.Windows.Forms.ComboBox>. Następnie nazwą wystąpienia `Control1` i upewnij się, że program obsługi zdarzeń jest skojarzony z <xref:System.Windows.Forms.Control.KeyDown?displayProperty=nameWithType> zdarzeń.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#48](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#48)]
 [!code-vb[System.Windows.Forms.EventExamples#48](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#48)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.KeyData" />
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.KeyCode" />
      </Docs>
    </Member>
    <Member MemberName="Modifiers">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Keys Modifiers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.Keys Modifiers" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.KeyEventArgs.Modifiers" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Modifiers As Keys" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Keys Modifiers { System::Windows::Forms::Keys get(); };" />
      <MemberSignature Language="F#" Value="member this.Modifiers : System.Windows.Forms.Keys" Usage="System.Windows.Forms.KeyEventArgs.Modifiers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Keys</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera modyfikator flag <see cref="E:System.Windows.Forms.Control.KeyDown" /> lub <see cref="E:System.Windows.Forms.Control.KeyUp" /> zdarzeń. Flagi wskazują kombinację klawiszy CTRL i SHIFT, ALT został naciśnięty.</summary>
        <value>A <see cref="T:System.Windows.Forms.Keys" /> reprezentującego jedną lub więcej flag modyfikator wartość.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby określić, czy został naciśnięty klawisz modyfikujący określonych, użyj <xref:System.Windows.Forms.KeyEventArgs.Control%2A>, <xref:System.Windows.Forms.KeyEventArgs.Shift%2A>, i <xref:System.Windows.Forms.KeyEventArgs.Alt%2A> właściwości. Modyfikator flagi można łączyć z bitowego OR.  
  
   
  
## Examples  
 Poniższy przykładowy kod przedstawia sposób użycia <xref:System.Windows.Forms.KeyEventArgs.Modifiers%2A> właściwości w celu określenia, które klawisze modyfikujące zostały naciśnięte wraz z kluczem podstawowym.  
  
 [!code-cpp[KeyEventArgs.Modifiers#1](~/samples/snippets/cpp/VS_Snippets_Winforms/KeyEventArgs.Modifiers/CPP/form1.cpp#1)]
 [!code-csharp[KeyEventArgs.Modifiers#1](~/samples/snippets/csharp/VS_Snippets_Winforms/KeyEventArgs.Modifiers/CS/form1.cs#1)]
 [!code-vb[KeyEventArgs.Modifiers#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/KeyEventArgs.Modifiers/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.Alt" />
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.Control" />
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.Shift" />
        <altmember cref="P:System.Windows.Forms.Control.ModifierKeys" />
      </Docs>
    </Member>
    <Member MemberName="Shift">
      <MemberSignature Language="C#" Value="public virtual bool Shift { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Shift" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.KeyEventArgs.Shift" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Shift As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool Shift { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.Shift : bool" Usage="System.Windows.Forms.KeyEventArgs.Shift" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy został naciśnięty klawisz SHIFT.</summary>
        <value>
          <see langword="true" /> Jeśli został naciśnięty klawisz SHIFT; w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład określa, czy użytkownik naciśnięty klawisz Shift klawisz F1, a jeśli tak, wyświetla Pomoc.  
  
 [!code-cpp[KeyEventArgs.Modifiers#1](~/samples/snippets/cpp/VS_Snippets_Winforms/KeyEventArgs.Modifiers/CPP/form1.cpp#1)]
 [!code-csharp[KeyEventArgs.Modifiers#1](~/samples/snippets/csharp/VS_Snippets_Winforms/KeyEventArgs.Modifiers/CS/form1.cs#1)]
 [!code-vb[KeyEventArgs.Modifiers#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/KeyEventArgs.Modifiers/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.Alt" />
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.Control" />
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.Modifiers" />
      </Docs>
    </Member>
    <Member MemberName="SuppressKeyPress">
      <MemberSignature Language="C#" Value="public bool SuppressKeyPress { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SuppressKeyPress" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.KeyEventArgs.SuppressKeyPress" />
      <MemberSignature Language="VB.NET" Value="Public Property SuppressKeyPress As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SuppressKeyPress { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.SuppressKeyPress : bool with get, set" Usage="System.Windows.Forms.KeyEventArgs.SuppressKeyPress" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy zdarzenie klucza powinny być przekazywane do kontrolki podstawowej.</summary>
        <value>
          <see langword="true" /> Jeśli klucza zdarzenia nie powinny być przesyłane do kontroli. w przeciwnym razie <see langword="false" />.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można przypisać `true` do tej właściwości w obsłudze zdarzeń, takich jak <xref:System.Windows.Forms.Control.KeyDown> zapobiec danych wejściowych użytkownika.  
  
 Ustawienie <xref:System.Windows.Forms.KeyEventArgs.SuppressKeyPress%2A> do `true` ustawia również <xref:System.Windows.Forms.KeyEventArgs.Handled%2A> do `true`.  
  
   
  
## Examples  
 Poniższy przykład kodu zapobiega osiągnięciu naciśnięcia klawiszy numerycznych <xref:System.Windows.Forms.TextBox> formantu o nazwie `textBox1`.  
  
 [!code-csharp[KeyEventArgs.SuppressKeyPress#1](~/samples/snippets/csharp/VS_Snippets_Winforms/keyeventargs.suppresskeypress/cs/form1.cs#1)]
 [!code-vb[KeyEventArgs.SuppressKeyPress#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/keyeventargs.suppresskeypress/vb/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.Handled" />
      </Docs>
    </Member>
  </Members>
</Type>