<Type Name="KeyEventArgs" FullName="System.Windows.Forms.KeyEventArgs">
  <Metadata><Meta Name="ms.openlocfilehash" Value="a8f65f040f1d8b55a519d5d3c2d3dd87576dca25" /><Meta Name="ms.sourcegitcommit" Value="055a4a82a0b08bfbdc21bd1347fb71f7fe2c099e" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="08/15/2019" /><Meta Name="ms.locfileid" Value="69186517" /></Metadata><TypeSignature Language="C#" Value="public class KeyEventArgs : EventArgs" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit KeyEventArgs extends System.EventArgs" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.KeyEventArgs" />
  <TypeSignature Language="VB.NET" Value="Public Class KeyEventArgs&#xA;Inherits EventArgs" />
  <TypeSignature Language="C++ CLI" Value="public ref class KeyEventArgs : EventArgs" />
  <TypeSignature Language="F#" Value="type KeyEventArgs = class&#xA;    inherit EventArgs" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>1.0.5000.0</AssemblyVersion>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.EventArgs</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute FrameworkAlternate="netframework-1.1;netframework-2.0;netframework-3.0;netframework-3.5;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netcore-3.0">
      <AttributeName>System.Runtime.InteropServices.ComVisible(true)</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Dostarcza dane dla <see cref="E:System.Windows.Forms.Control.KeyDown" /> zdarzenia lub <see cref="E:System.Windows.Forms.Control.KeyUp" /> .</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 A <xref:System.Windows.Forms.KeyEventArgs>, który określa klawisz naciśniętego przez użytkownika i czy wszystkie klawisze modyfikujące (Ctrl, Alt i Shift) zostały naciśnięte w tym samym czasie, są przesyłane ze <xref:System.Windows.Forms.Control.KeyDown> wszystkimi <xref:System.Windows.Forms.Control.KeyUp> zdarzeniami lub.  
  
 <xref:System.Windows.Forms.Control.KeyDown> Zdarzenie występuje, gdy użytkownik naciśnie dowolny klucz. Zdarzenie <xref:System.Windows.Forms.Control.KeyUp> występuje, gdy użytkownik zwolni klucz. Zdarzenia powtarzają się za każdym razem, gdy klucz jest wyłączony, ale tylko jedno <xref:System.Windows.Forms.Control.KeyUp> zdarzenie jest generowane, gdy użytkownik zwolni klucz. <xref:System.Windows.Forms.Control.KeyDown>  
  
 <xref:System.Windows.Forms.Control.KeyPress> Zdarzenie również występuje po naciśnięciu klawisza. Jest przesyłany przy każdym <xref:System.Windows.Forms.Control.KeyPress> zdarzeniu i określa znak, który został utworzony w wyniku poszczególnych klawiszy. <xref:System.Windows.Forms.KeyPressEventArgs>  
  
 Informacje o modelu zdarzenia można znaleźć w temacie [Obsługa i](~/docs/standard/events/index.md)wywoływanie zdarzeń.  
  
   
  
## Examples  
 Poniższy przykład kodu przedstawia sposób wykrywania stanu naciśnięcia klawisza.  
  
 **Przykład 1**  
  
 Poniższy przykład kodu ilustruje sposób użycia <xref:System.Windows.Forms.Control.KeyDown> zdarzenia <xref:System.Windows.Forms.Help> z klasą w celu wyświetlenia pomocy w stylu wyskakującym dla użytkownika aplikacji. W przykładzie zastosowano <xref:System.Windows.Forms.KeyEventArgs> właściwości przesłane do metody obsługi zdarzeń, aby odfiltrować wszystkie Wariacje naciskania klawisza F1 z klawiszem modyfikującym. Gdy użytkownik naciśnie dowolną odmianę F1, która zawiera dowolny modyfikator klawiatury, <xref:System.Windows.Forms.Help> Klasa wyświetli okno podręczne, podobne do a <xref:System.Windows.Forms.ToolTip>, obok formantu. Jeśli użytkownik naciśnie kombinację klawiszy ALT + F2, pojawi się okno podręczne pomocy z dodatkowymi informacjami.  
  
 [!code-cpp[KeyEventArgs.Modifiers#1](~/samples/snippets/cpp/VS_Snippets_Winforms/KeyEventArgs.Modifiers/CPP/form1.cpp#1)]
 [!code-csharp[KeyEventArgs.Modifiers#1](~/samples/snippets/csharp/VS_Snippets_Winforms/KeyEventArgs.Modifiers/CS/form1.cs#1)]
 [!code-vb[KeyEventArgs.Modifiers#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/KeyEventArgs.Modifiers/VB/form1.vb#1)]  
  
 **Przykład 2**  
  
 Poniższy przykład określa, czy użytkownik naciśnie klawisze ALT + E, a jeśli wskaźnik myszy znajduje się nad <xref:System.Windows.Forms.TreeNode>, umożliwia użytkownikowi edytowanie tego <xref:System.Windows.Forms.TreeNode>elementu.  
  
 [!code-cpp[Windows.Forms.Control Members4#3](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Members4/CPP/controlmembers4.cpp#3)]
 [!code-csharp[Windows.Forms.Control Members4#3](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Members4/CS/controlmembers4.cs#3)]
 [!code-vb[Windows.Forms.Control Members4#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Members4/VB/controlmembers4.vb#3)]  
  
 **Przykład 3**  
  
 Poniższy przykład określa, czy użytkownik naciśnie klawisz nienumeryczny, a jeśli tak, anuluje <xref:System.Windows.Forms.Control.KeyPress> zdarzenie przy <xref:System.Windows.Forms.KeyEventArgs.Handled%2A> użyciu właściwości.  
  
 [!code-cpp[Control.KeyDown#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.KeyDown/CPP/form1.cpp#1)]
 [!code-csharp[Control.KeyDown#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.KeyDown/CS/form1.cs#1)]
 [!code-vb[Control.KeyDown#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.KeyDown/VB/form1.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="M:System.Windows.Forms.Control.OnKeyDown(System.Windows.Forms.KeyEventArgs)" />
    <altmember cref="E:System.Windows.Forms.Control.KeyDown" />
    <altmember cref="M:System.Windows.Forms.Control.OnKeyUp(System.Windows.Forms.KeyEventArgs)" />
    <altmember cref="E:System.Windows.Forms.Control.KeyUp" />
    <altmember cref="T:System.Windows.Forms.KeyPressEventArgs" />
    <altmember cref="M:System.Windows.Forms.Control.OnKeyPress(System.Windows.Forms.KeyPressEventArgs)" />
    <altmember cref="E:System.Windows.Forms.Control.KeyPress" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public KeyEventArgs (System.Windows.Forms.Keys keyData);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(valuetype System.Windows.Forms.Keys keyData) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.KeyEventArgs.#ctor(System.Windows.Forms.Keys)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (keyData As Keys)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; KeyEventArgs(System::Windows::Forms::Keys keyData);" />
      <MemberSignature Language="F#" Value="new System.Windows.Forms.KeyEventArgs : System.Windows.Forms.Keys -&gt; System.Windows.Forms.KeyEventArgs" Usage="new System.Windows.Forms.KeyEventArgs keyData" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <Parameters>
        <Parameter Name="keyData" Type="System.Windows.Forms.Keys" />
      </Parameters>
      <Docs>
        <param name="keyData"><see cref="T:System.Windows.Forms.Keys" /> Reprezentujący klawisz, który został naciśnięty, w połączeniu z wszystkimi flagami modyfikującymi, które wskazują, które klawisze CTRL, Shift i Alt zostały naciśnięte w tym samym czasie. Możliwe wartości są stosowane przy zastosowaniu operatora bitowego lub (|) do stałych z <see cref="T:System.Windows.Forms.Keys" /> wyliczenia.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Forms.KeyEventArgs" /> klasy.</summary>
        <remarks>To be added.</remarks>
        <altmember cref="T:System.Windows.Forms.KeyPressEventArgs" />
      </Docs>
    </Member>
    <Member MemberName="Alt">
      <MemberSignature Language="C#" Value="public virtual bool Alt { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Alt" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.KeyEventArgs.Alt" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Alt As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool Alt { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.Alt : bool" Usage="System.Windows.Forms.KeyEventArgs.Alt" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy naciśnięto klawisz ALT.</summary>
        <value><see langword="true" />po naciśnięciu klawisza ALT; w przeciwnym razie. <see langword="false" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 **Przykład 1**  
  
 Poniższy przykład kodu ilustruje sposób użycia <xref:System.Windows.Forms.Control.KeyDown> zdarzenia <xref:System.Windows.Forms.Help> z klasą w celu wyświetlenia pomocy w stylu wyskakującym dla użytkownika aplikacji. W przykładzie zastosowano <xref:System.Windows.Forms.KeyEventArgs> właściwości przesłane do metody obsługi zdarzeń, aby odfiltrować wszystkie Wariacje naciskania klawisza F1 z klawiszem modyfikującym. Gdy użytkownik naciśnie dowolną odmianę F1, która zawiera dowolny modyfikator klawiatury, <xref:System.Windows.Forms.Help> Klasa wyświetli okno podręczne, podobne do a <xref:System.Windows.Forms.ToolTip>, obok formantu. Jeśli użytkownik naciśnie kombinację klawiszy ALT + F2, pojawi się okno podręczne pomocy z dodatkowymi informacjami.  
  
 [!code-cpp[KeyEventArgs.Modifiers#1](~/samples/snippets/cpp/VS_Snippets_Winforms/KeyEventArgs.Modifiers/CPP/form1.cpp#1)]
 [!code-csharp[KeyEventArgs.Modifiers#1](~/samples/snippets/csharp/VS_Snippets_Winforms/KeyEventArgs.Modifiers/CS/form1.cs#1)]
 [!code-vb[KeyEventArgs.Modifiers#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/KeyEventArgs.Modifiers/VB/form1.vb#1)]  
  
 **Przykład 2**  
  
 Poniższy przykład określa, czy użytkownik naciśnie klawisze ALT + E, a jeśli wskaźnik myszy znajduje się nad <xref:System.Windows.Forms.TreeNode>, umożliwia użytkownikowi edytowanie tego <xref:System.Windows.Forms.TreeNode>elementu.  
  
 [!code-cpp[Windows.Forms.Control Members4#3](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Members4/CPP/controlmembers4.cpp#3)]
 [!code-csharp[Windows.Forms.Control Members4#3](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Members4/CS/controlmembers4.cs#3)]
 [!code-vb[Windows.Forms.Control Members4#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Members4/VB/controlmembers4.vb#3)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.Control" />
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.Shift" />
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.Modifiers" />
      </Docs>
    </Member>
    <Member MemberName="Control">
      <MemberSignature Language="C#" Value="public bool Control { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Control" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.KeyEventArgs.Control" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Control As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Control { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.Control : bool" Usage="System.Windows.Forms.KeyEventArgs.Control" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy naciśnięto klawisz CTRL.</summary>
        <value><see langword="true" />Jeśli naciśnięto klawisz CTRL; w przeciwnym razie. <see langword="false" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu ilustruje sposób użycia <xref:System.Windows.Forms.Control.KeyDown> zdarzenia <xref:System.Windows.Forms.Help> z klasą w celu wyświetlenia pomocy w stylu wyskakującym dla użytkownika aplikacji. W przykładzie zastosowano <xref:System.Windows.Forms.KeyEventArgs> właściwości przesłane do metody obsługi zdarzeń, aby odfiltrować wszystkie Wariacje naciskania klawisza F1 z klawiszem modyfikującym. Gdy użytkownik naciśnie dowolną odmianę F1, która zawiera dowolny modyfikator klawiatury, <xref:System.Windows.Forms.Help> Klasa wyświetli okno podręczne, podobne do a <xref:System.Windows.Forms.ToolTip>, obok formantu. Jeśli użytkownik naciśnie kombinację klawiszy ALT + F2, pojawi się okno podręczne pomocy z dodatkowymi informacjami.  
  
 [!code-cpp[KeyEventArgs.Modifiers#1](~/samples/snippets/cpp/VS_Snippets_Winforms/KeyEventArgs.Modifiers/CPP/form1.cpp#1)]
 [!code-csharp[KeyEventArgs.Modifiers#1](~/samples/snippets/csharp/VS_Snippets_Winforms/KeyEventArgs.Modifiers/CS/form1.cs#1)]
 [!code-vb[KeyEventArgs.Modifiers#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/KeyEventArgs.Modifiers/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.Alt" />
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.Shift" />
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.Modifiers" />
      </Docs>
    </Member>
    <Member MemberName="Handled">
      <MemberSignature Language="C#" Value="public bool Handled { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Handled" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.KeyEventArgs.Handled" />
      <MemberSignature Language="VB.NET" Value="Public Property Handled As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool Handled { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.Handled : bool with get, set" Usage="System.Windows.Forms.KeyEventArgs.Handled" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>set: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy zdarzenie zostało obsłużone.</summary>
        <value><see langword="true" />Aby pominąć domyślną obsługę kontrolki; w przeciwnym <see langword="false" /> razie, aby przekazać zdarzenie do domyślnego programu obsługi kontrolek.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.KeyEventArgs.Handled%2A>jest zaimplementowany inaczej przez różne kontrolki w Windows Forms. Dla kontrolek <xref:System.Windows.Forms.TextBox> , takich jak klasy natywne kontrolki Win32, jest interpretowany jako oznacza, że nie należy przekazywać komunikatów klucza do podstawowej kontroli natywnej. Jeśli ustawisz `Handled` na wartość true <xref:System.Windows.Forms.TextBox>w, to kontrolka nie przejdzie do klawisza `events` , a nie zostanie ona przekazana do kontrolki pola tekstowego Win32, ale nadal będzie wyświetlać znaki wpisane przez użytkownika.  
  
 Jeśli chcesz uniemożliwić bieżącemu formantowi otrzymywanie klawisza, użyj <xref:System.Windows.Forms.KeyEventArgs.SuppressKeyPress%2A> właściwości.  
  
   
  
## Examples  
 Poniższy przykład określa, czy użytkownik naciśnie klawisz nienumeryczny, a jeśli tak, anuluje <xref:System.Windows.Forms.Control.KeyPress> zdarzenie przy <xref:System.Windows.Forms.KeyEventArgs.Handled%2A> użyciu właściwości.  
  
 [!code-cpp[Control.KeyDown#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.KeyDown/CPP/form1.cpp#1)]
 [!code-csharp[Control.KeyDown#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.KeyDown/CS/form1.cs#1)]
 [!code-vb[Control.KeyDown#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.KeyDown/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.SuppressKeyPress" />
      </Docs>
    </Member>
    <Member MemberName="KeyCode">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Keys KeyCode { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.Keys KeyCode" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.KeyEventArgs.KeyCode" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property KeyCode As Keys" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Keys KeyCode { System::Windows::Forms::Keys get(); };" />
      <MemberSignature Language="F#" Value="member this.KeyCode : System.Windows.Forms.Keys" Usage="System.Windows.Forms.KeyEventArgs.KeyCode" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Keys</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera kod klawiatury dla <see cref="E:System.Windows.Forms.Control.KeyDown" /> zdarzenia or. <see cref="E:System.Windows.Forms.Control.KeyUp" /></summary>
        <value><see cref="T:System.Windows.Forms.Keys" /> Wartość, która jest kodem klucza dla zdarzenia.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu pokazuje, jak użyć właściwości, <xref:System.Windows.Forms.KeyEventArgs.KeyCode%2A> aby określić, który klucz został naciśnięty.  
  
 **Przykład 1**  
  
 Poniższy przykład kodu ilustruje sposób użycia <xref:System.Windows.Forms.Control.KeyDown> zdarzenia <xref:System.Windows.Forms.Help> z klasą w celu wyświetlenia pomocy w stylu wyskakującym dla użytkownika aplikacji. W przykładzie zastosowano <xref:System.Windows.Forms.KeyEventArgs> właściwości przesłane do metody obsługi zdarzeń, aby odfiltrować wszystkie Wariacje naciskania klawisza F1 z klawiszem modyfikującym. Gdy użytkownik naciśnie dowolną odmianę F1, która zawiera dowolny modyfikator klawiatury, <xref:System.Windows.Forms.Help> Klasa wyświetli okno podręczne, podobne do a <xref:System.Windows.Forms.ToolTip>, obok formantu. Jeśli użytkownik naciśnie kombinację klawiszy ALT + F2, pojawi się okno podręczne pomocy z dodatkowymi informacjami.  
  
 [!code-cpp[KeyEventArgs.Modifiers#1](~/samples/snippets/cpp/VS_Snippets_Winforms/KeyEventArgs.Modifiers/CPP/form1.cpp#1)]
 [!code-csharp[KeyEventArgs.Modifiers#1](~/samples/snippets/csharp/VS_Snippets_Winforms/KeyEventArgs.Modifiers/CS/form1.cs#1)]
 [!code-vb[KeyEventArgs.Modifiers#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/KeyEventArgs.Modifiers/VB/form1.vb#1)]  
  
 **Przykład 2**  
  
 Poniższy przykład określa, czy użytkownik naciśnie klawisze ALT + E, a jeśli wskaźnik myszy znajduje się nad <xref:System.Windows.Forms.TreeNode>, umożliwia użytkownikowi edytowanie tego <xref:System.Windows.Forms.TreeNode>elementu.  
  
 [!code-cpp[Windows.Forms.Control Members4#3](~/samples/snippets/cpp/VS_Snippets_Winforms/Windows.Forms.Control Members4/CPP/controlmembers4.cpp#3)]
 [!code-csharp[Windows.Forms.Control Members4#3](~/samples/snippets/csharp/VS_Snippets_Winforms/Windows.Forms.Control Members4/CS/controlmembers4.cs#3)]
 [!code-vb[Windows.Forms.Control Members4#3](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Windows.Forms.Control Members4/VB/controlmembers4.vb#3)]  
  
 **Przykład 3**  
  
 Poniższy przykład określa, czy użytkownik naciśnie klawisz nienumeryczny, a jeśli tak, anuluje <xref:System.Windows.Forms.Control.KeyPress> zdarzenie przy <xref:System.Windows.Forms.KeyEventArgs.Handled%2A> użyciu właściwości.  
  
 [!code-cpp[Control.KeyDown#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Control.KeyDown/CPP/form1.cpp#1)]
 [!code-csharp[Control.KeyDown#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Control.KeyDown/CS/form1.cs#1)]
 [!code-vb[Control.KeyDown#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Control.KeyDown/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.KeyData" />
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.KeyValue" />
      </Docs>
    </Member>
    <Member MemberName="KeyData">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Keys KeyData { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.Keys KeyData" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.KeyEventArgs.KeyData" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property KeyData As Keys" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Keys KeyData { System::Windows::Forms::Keys get(); };" />
      <MemberSignature Language="F#" Value="member this.KeyData : System.Windows.Forms.Keys" Usage="System.Windows.Forms.KeyEventArgs.KeyData" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Keys</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera dane klucza dla <see cref="E:System.Windows.Forms.Control.KeyDown" /> zdarzenia lub. <see cref="E:System.Windows.Forms.Control.KeyUp" /></summary>
        <value><see cref="T:System.Windows.Forms.Keys" /> Reprezentujący kod klawisza, który został naciśnięty, w połączeniu z flagami modyfikatora wskazującymi, które kombinacje klawiszy CTRL, Shift i Alt zostały naciśnięte w tym samym czasie.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Możesz użyć stałych z <xref:System.Windows.Forms.Keys> , aby wyodrębnić informacje <xref:System.Windows.Forms.KeyEventArgs.KeyData%2A> z właściwości. Używaj operatora bitowego i do porównywania danych zwracanych <xref:System.Windows.Forms.KeyEventArgs.KeyData%2A> przez ze stałymi w programie <xref:System.Windows.Forms.Keys> , aby uzyskać informacje o kluczach naciśniętych przez użytkownika. Aby określić, czy określony klawisz modyfikujący został naciśnięty, <xref:System.Windows.Forms.KeyEventArgs.Control%2A>Użyj <xref:System.Windows.Forms.KeyEventArgs.Shift%2A>właściwości, <xref:System.Windows.Forms.KeyEventArgs.Alt%2A> i.  
  
   
  
## Examples  
 Poniższy przykład kodu demonstruje użycie tego elementu członkowskiego. W tym przykładzie program obsługi zdarzeń raportuje wystąpienie <xref:System.Windows.Forms.Control.KeyDown?displayProperty=nameWithType> zdarzenia. Ten raport pomaga dowiedzieć się, kiedy wystąpi zdarzenie i może pomóc w debugowaniu. Aby zgłosić wiele zdarzeń lub zdarzenia, które występują często, należy rozważyć <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> zamianę <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> lub dołączenie komunikatu do wielowierszowego <xref:System.Windows.Forms.TextBox>.  
  
 Aby uruchomić przykładowy kod, wklej go do projektu zawierającego wystąpienie typu, który dziedziczy z <xref:System.Windows.Forms.Control>, takich <xref:System.Windows.Forms.Button> jak lub <xref:System.Windows.Forms.ComboBox>. Następnie nadaj nazwę wystąpieniu `Control1` i upewnij się, że program obsługi zdarzeń jest skojarzony <xref:System.Windows.Forms.Control.KeyDown?displayProperty=nameWithType> ze zdarzeniem.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#48](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#48)]
 [!code-vb[System.Windows.Forms.EventExamples#48](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#48)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.KeyCode" />
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.KeyValue" />
      </Docs>
    </Member>
    <Member MemberName="KeyValue">
      <MemberSignature Language="C#" Value="public int KeyValue { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance int32 KeyValue" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.KeyEventArgs.KeyValue" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property KeyValue As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property int KeyValue { int get(); };" />
      <MemberSignature Language="F#" Value="member this.KeyValue : int" Usage="System.Windows.Forms.KeyEventArgs.KeyValue" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość klawiatury dla <see cref="E:System.Windows.Forms.Control.KeyDown" /> zdarzenia lub. <see cref="E:System.Windows.Forms.Control.KeyUp" /></summary>
        <value>Reprezentacja liczby całkowitej <see cref="P:System.Windows.Forms.KeyEventArgs.KeyCode" /> właściwości.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład kodu demonstruje użycie tego elementu członkowskiego. W tym przykładzie program obsługi zdarzeń raportuje wystąpienie <xref:System.Windows.Forms.Control.KeyDown?displayProperty=nameWithType> zdarzenia. Ten raport pomaga dowiedzieć się, kiedy wystąpi zdarzenie i może pomóc w debugowaniu. Aby zgłosić wiele zdarzeń lub zdarzenia, które występują często, należy rozważyć <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> zamianę <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> lub dołączenie komunikatu do wielowierszowego <xref:System.Windows.Forms.TextBox>.  
  
 Aby uruchomić przykładowy kod, wklej go do projektu zawierającego wystąpienie typu, który dziedziczy z <xref:System.Windows.Forms.Control>, takich <xref:System.Windows.Forms.Button> jak lub <xref:System.Windows.Forms.ComboBox>. Następnie nadaj nazwę wystąpieniu `Control1` i upewnij się, że program obsługi zdarzeń jest skojarzony <xref:System.Windows.Forms.Control.KeyDown?displayProperty=nameWithType> ze zdarzeniem.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#48](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#48)]
 [!code-vb[System.Windows.Forms.EventExamples#48](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#48)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.KeyData" />
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.KeyCode" />
      </Docs>
    </Member>
    <Member MemberName="Modifiers">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Keys Modifiers { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.Keys Modifiers" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.KeyEventArgs.Modifiers" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property Modifiers As Keys" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property System::Windows::Forms::Keys Modifiers { System::Windows::Forms::Keys get(); };" />
      <MemberSignature Language="F#" Value="member this.Modifiers : System.Windows.Forms.Keys" Usage="System.Windows.Forms.KeyEventArgs.Modifiers" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Keys</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera flagi modyfikatora dla <see cref="E:System.Windows.Forms.Control.KeyDown" /> zdarzenia or. <see cref="E:System.Windows.Forms.Control.KeyUp" /> Flagi wskazują, którą kombinację klawiszy CTRL, SHIFT i ALT zostały naciśnięte.</summary>
        <value><see cref="T:System.Windows.Forms.Keys" /> Wartość reprezentująca co najmniej jedną flagę modyfikatora.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby określić, czy określony klawisz modyfikujący został naciśnięty, <xref:System.Windows.Forms.KeyEventArgs.Control%2A>Użyj <xref:System.Windows.Forms.KeyEventArgs.Shift%2A>właściwości, <xref:System.Windows.Forms.KeyEventArgs.Alt%2A> i. Flagi modyfikatorów można łączyć z bitowym lub.  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje, jak używać właściwości, <xref:System.Windows.Forms.KeyEventArgs.Modifiers%2A> aby określić, które klawisze modyfikujące zostały naciśnięte wraz z kluczem podstawowym.  
  
 [!code-cpp[KeyEventArgs.Modifiers#1](~/samples/snippets/cpp/VS_Snippets_Winforms/KeyEventArgs.Modifiers/CPP/form1.cpp#1)]
 [!code-csharp[KeyEventArgs.Modifiers#1](~/samples/snippets/csharp/VS_Snippets_Winforms/KeyEventArgs.Modifiers/CS/form1.cs#1)]
 [!code-vb[KeyEventArgs.Modifiers#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/KeyEventArgs.Modifiers/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.Alt" />
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.Control" />
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.Shift" />
        <altmember cref="P:System.Windows.Forms.Control.ModifierKeys" />
      </Docs>
    </Member>
    <Member MemberName="Shift">
      <MemberSignature Language="C#" Value="public virtual bool Shift { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool Shift" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.KeyEventArgs.Shift" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Shift As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property bool Shift { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.Shift : bool" Usage="System.Windows.Forms.KeyEventArgs.Shift" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>1.0.5000.0</AssemblyVersion>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość wskazującą, czy naciśnięto klawisz SHIFT.</summary>
        <value><see langword="true" />Jeśli naciśnięto klawisz SHIFT; w przeciwnym razie. <see langword="false" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Examples  
 Poniższy przykład określa, czy użytkownik naciśnie klawisz Shift przy użyciu klawisza F1, a jeśli tak, wyświetla pomoc.  
  
 [!code-cpp[KeyEventArgs.Modifiers#1](~/samples/snippets/cpp/VS_Snippets_Winforms/KeyEventArgs.Modifiers/CPP/form1.cpp#1)]
 [!code-csharp[KeyEventArgs.Modifiers#1](~/samples/snippets/csharp/VS_Snippets_Winforms/KeyEventArgs.Modifiers/CS/form1.cs#1)]
 [!code-vb[KeyEventArgs.Modifiers#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/KeyEventArgs.Modifiers/VB/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.Alt" />
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.Control" />
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.Modifiers" />
      </Docs>
    </Member>
    <Member MemberName="SuppressKeyPress">
      <MemberSignature Language="C#" Value="public bool SuppressKeyPress { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool SuppressKeyPress" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.KeyEventArgs.SuppressKeyPress" />
      <MemberSignature Language="VB.NET" Value="Public Property SuppressKeyPress As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool SuppressKeyPress { bool get(); void set(bool value); };" />
      <MemberSignature Language="F#" Value="member this.SuppressKeyPress : bool with get, set" Usage="System.Windows.Forms.KeyEventArgs.SuppressKeyPress" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia wartość wskazującą, czy zdarzenie klucza powinno być przesyłane do kontroli podstawowej.</summary>
        <value><see langword="true" />Jeśli zdarzenia klucza nie należy wysyłać do kontrolki; w przeciwnym razie. <see langword="false" /></value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Można przypisać `true` do tej właściwości w programie obsługi zdarzeń, <xref:System.Windows.Forms.Control.KeyDown> na przykład w celu uniemożliwienia wprowadzania danych przez użytkownika.  
  
 Ustawienie <xref:System.Windows.Forms.KeyEventArgs.SuppressKeyPress%2A> <xref:System.Windows.Forms.KeyEventArgs.Handled%2A> `true`to `true` jest również ustawiane na.  
  
   
  
## Examples  
 Poniższy przykład kodu uniemożliwia naciśnięcie klawiszy numerycznych przed osiągnięciem <xref:System.Windows.Forms.TextBox> kontrolki `textBox1`o nazwie.  
  
 [!code-csharp[KeyEventArgs.SuppressKeyPress#1](~/samples/snippets/csharp/VS_Snippets_Winforms/keyeventargs.suppresskeypress/cs/form1.cs#1)]
 [!code-vb[KeyEventArgs.SuppressKeyPress#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/keyeventargs.suppresskeypress/vb/form1.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="P:System.Windows.Forms.KeyEventArgs.Handled" />
      </Docs>
    </Member>
  </Members>
</Type>
