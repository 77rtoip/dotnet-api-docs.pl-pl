<Type Name="MainMenu" FullName="System.Windows.Forms.MainMenu">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="223d004886d0115f7d435b6bd28a85998b094b17" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30706385" />
  </Metadata>
  <TypeSignature Language="C#" Value="public class MainMenu : System.Windows.Forms.Menu" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit MainMenu extends System.Windows.Forms.Menu" />
  <TypeSignature Language="DocId" Value="T:System.Windows.Forms.MainMenu" />
  <TypeSignature Language="VB.NET" Value="Public Class MainMenu&#xA;Inherits Menu" />
  <TypeSignature Language="C++ CLI" Value="public ref class MainMenu : System::Windows::Forms::Menu" />
  <AssemblyInfo>
    <AssemblyName>System.Windows.Forms</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Windows.Forms.Menu</BaseTypeName>
  </Base>
  <Interfaces />
  <Attributes>
    <Attribute>
      <AttributeName>System.ComponentModel.ToolboxItemFilter("System.Windows.Forms.MainMenu")</AttributeName>
    </Attribute>
  </Attributes>
  <Docs>
    <summary>Reprezentuje strukturę menu formularza. Mimo że <see cref="T:System.Windows.Forms.MenuStrip" /> zastępuje i dodaje funkcje do <see cref="T:System.Windows.Forms.MainMenu" /> kontrolę nad poprzednie wersje <see cref="T:System.Windows.Forms.MainMenu" /> są przechowywane dla zgodności z poprzednimi wersjami i użycia w przyszłości, jeśli zostanie wybrana.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Windows.Forms.MainMenu> Kontroli reprezentuje kontener dla struktury menu formularza. Menu składa się z <xref:System.Windows.Forms.MenuItem> obiektów, które reprezentują poszczególnych poleceń w strukturze menu. Każdy <xref:System.Windows.Forms.MenuItem> może być polecenia aplikacji lub menu nadrzędne dla innych elementów podmenu. Aby powiązać <xref:System.Windows.Forms.MainMenu> do <xref:System.Windows.Forms.Form> który będzie je wyświetlić, Przypisz <xref:System.Windows.Forms.MainMenu> do <xref:System.Windows.Forms.Form.Menu%2A> właściwość <xref:System.Windows.Forms.Form>.  
  
 W przypadku aplikacji, które będą miały obsługi wielu języków, można użyć <xref:System.Windows.Forms.MainMenu.RightToLeft%2A> właściwości do wyświetlania tekstu od prawej do lewej w celu włączenia obsługi języków, takich jak arabski menu.  
  
 Możesz utworzyć różne <xref:System.Windows.Forms.MainMenu> obiekty do reprezentowania struktury inne menu dla formularza użytkownika. Jeśli chcesz użyć ponownie struktury menu zawarte w określonej <xref:System.Windows.Forms.MainMenu>, można użyć jej <xref:System.Windows.Forms.MainMenu.CloneMenu%2A> metody, aby utworzyć kopię. Po utworzeniu kopii struktury menu, możesz wprowadzić odpowiednie modyfikacje dla struktury nowego menu.  
  
> [!NOTE]
>  Wycinanie i wklejanie menu, które elementy z jednego formularza do innego w Projektancie może nie działać zgodnie z oczekiwaniami, jeśli formularza, które chcesz wkleić do nie zawiera żadnych elementów menu zdefiniowane.  
  
   
  
## Examples  
 Poniższy przykład kodu tworzy <xref:System.Windows.Forms.MainMenu>, przypisuje dwa <xref:System.Windows.Forms.MenuItem> obiekty do <xref:System.Windows.Forms.MainMenu> i wiąże go do formularza. W tym przykładzie wymaga <xref:System.Windows.Forms.Form> utworzony o nazwie `Form1`.  
  
 [!code-cpp[Classic MainMenu.MainMenu Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MainMenu.MainMenu Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MainMenu.MainMenu Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MainMenu.MainMenu Example/CS/source.cs#1)]
 [!code-vb[Classic MainMenu.MainMenu Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MainMenu.MainMenu Example/VB/source.vb#1)]  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Windows.Forms.MenuItem" />
    <altmember cref="M:System.Windows.Forms.Menu.MenuItemCollection.Add(System.String)" />
    <altmember cref="P:System.Windows.Forms.Form.Menu" />
    <altmember cref="P:System.Windows.Forms.Menu.MenuItems" />
    <altmember cref="T:System.Windows.Forms.MenuStrip" />
    <altmember cref="T:System.Windows.Forms.ContextMenuStrip" />
  </Docs>
  <Members>
    <MemberGroup MemberName=".ctor">
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Forms.MainMenu" /> klasy.</summary>
      </Docs>
    </MemberGroup>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MainMenu ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MainMenu.#ctor" />
      <MemberSignature Language="VB.NET" Value="Public Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MainMenu();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Forms.MainMenu" /> klasy bez żadnego określonych elementów menu.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta wersja konstruktora tworzy <xref:System.Windows.Forms.MainMenu> bez żadnej określonej <xref:System.Windows.Forms.MenuItem> obiektów. Aby dodać elementy menu do formantu przy użyciu innych wersji tego konstruktora akceptującego tablicę <xref:System.Windows.Forms.MenuItem> obiekty jako jego parametr lub użyj <xref:System.Windows.Forms.Menu.MenuItemCollection.Add%2A> metody <xref:System.Windows.Forms.Menu.MenuItems%2A> właściwości.  
  
   
  
## Examples  
 Poniższy przykład kodu tworzy <xref:System.Windows.Forms.MainMenu>, przypisuje dwa <xref:System.Windows.Forms.MenuItem> obiekty do <xref:System.Windows.Forms.MainMenu> i wiąże go do formularza. W tym przykładzie wymaga <xref:System.Windows.Forms.Form> utworzony o nazwie `Form1`.  
  
 [!code-cpp[Classic MainMenu.MainMenu Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MainMenu.MainMenu Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MainMenu.MainMenu Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MainMenu.MainMenu Example/CS/source.cs#1)]
 [!code-vb[Classic MainMenu.MainMenu Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MainMenu.MainMenu Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.MenuItem" />
        <altmember cref="M:System.Windows.Forms.Menu.MenuItemCollection.Add(System.String)" />
        <altmember cref="P:System.Windows.Forms.Form.Menu" />
        <altmember cref="P:System.Windows.Forms.Menu.MenuItems" />
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MainMenu (System.ComponentModel.IContainer container);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.ComponentModel.IContainer container) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MainMenu.#ctor(System.ComponentModel.IContainer)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (container As IContainer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MainMenu(System::ComponentModel::IContainer ^ container);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="container" Type="System.ComponentModel.IContainer" />
      </Parameters>
      <Docs>
        <param name="container">
          <see cref="T:System.ComponentModel.IContainer" /> Reprezentujący kontener <see cref="T:System.Windows.Forms.MainMenu" />.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Forms.MainMenu" /> klasy z określonego kontenera.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public MainMenu (System.Windows.Forms.MenuItem[] items);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Windows.Forms.MenuItem[] items) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MainMenu.#ctor(System.Windows.Forms.MenuItem[])" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (items As MenuItem())" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; MainMenu(cli::array &lt;System::Windows::Forms::MenuItem ^&gt; ^ items);" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="items" Type="System.Windows.Forms.MenuItem[]" />
      </Parameters>
      <Docs>
        <param name="items">Tablica <see cref="T:System.Windows.Forms.MenuItem" /> obiektów, które zostaną dodane do <see cref="T:System.Windows.Forms.MainMenu" />.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Windows.Forms.MainMenu" /> z określonego zestawu <see cref="T:System.Windows.Forms.MenuItem" /> obiektów.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ten konstruktor służy do przypisywania tablicą <xref:System.Windows.Forms.MenuItem> obiekty do <xref:System.Windows.Forms.MainMenu> w momencie jego tworzenia. Po <xref:System.Windows.Forms.MainMenu> utworzono można dodać dodatkowe <xref:System.Windows.Forms.MenuItem> obiekty do <xref:System.Windows.Forms.MainMenu> przy użyciu <xref:System.Windows.Forms.Menu.MenuItemCollection.Add%2A> metody <xref:System.Windows.Forms.Menu.MenuItems%2A> właściwości.  
  
   
  
## Examples  
 Poniższy przykład kodu tworzy <xref:System.Windows.Forms.MainMenu>i przypisuje dwa <xref:System.Windows.Forms.MenuItem> obiekty do <xref:System.Windows.Forms.MainMenu> za pomocą tej wersji konstruktora. Przykład czym wiąże <xref:System.Windows.Forms.MainMenu> do <xref:System.Windows.Forms.Form>. W tym przykładzie wymaga <xref:System.Windows.Forms.Form> utworzony o nazwie `Form1`.  
  
 [!code-cpp[Classic MainMenu.MainMenu1 Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MainMenu.MainMenu1 Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MainMenu.MainMenu1 Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MainMenu.MainMenu1 Example/CS/source.cs#1)]
 [!code-vb[Classic MainMenu.MainMenu1 Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MainMenu.MainMenu1 Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.MenuItem" />
      </Docs>
    </Member>
    <Member MemberName="CloneMenu">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.MainMenu CloneMenu ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Windows.Forms.MainMenu CloneMenu() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MainMenu.CloneMenu" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function CloneMenu () As MainMenu" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual System::Windows::Forms::MainMenu ^ CloneMenu();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.MainMenu</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Tworzy nowy <see cref="T:System.Windows.Forms.MainMenu" /> czyli duplikat bieżącego <see cref="T:System.Windows.Forms.MainMenu" />.</summary>
        <returns>A <see cref="T:System.Windows.Forms.MainMenu" /> reprezentujący sklonowany menu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta metoda umożliwia utworzenie kopii struktury menu przechowywane w <xref:System.Windows.Forms.MainMenu>. Ta metoda służy do ponownego użycia struktury menu przechowywane w <xref:System.Windows.Forms.MainMenu> jako podstawa nowej <xref:System.Windows.Forms.MainMenu>. Na przykład, jeśli chcesz utworzyć strukturę menu który ma te same elementy menu jako istniejące <xref:System.Windows.Forms.MainMenu> , ale będą także mieć dodatkowe <xref:System.Windows.Forms.MenuItem> obiekty dodane do niego, można użyć <xref:System.Windows.Forms.MainMenu.CloneMenu%2A> metodę, aby utworzyć kopię oryginalnej <xref:System.Windows.Forms.MainMenu> i następnie dodaj nowe <xref:System.Windows.Forms.MenuItem> obiektów do sklonowanego <xref:System.Windows.Forms.MainMenu>.  
  
   
  
## Examples  
 Poniższy przykład kodu wykorzystuje <xref:System.Windows.Forms.MainMenu.GetForm%2A> metodę, aby określić, czy <xref:System.Windows.Forms.MainMenu> obecnie jest elementem nadrzędnym w formularzu. Jeśli wywołanie w przykładzie kodu <xref:System.Windows.Forms.MainMenu.GetForm%2A> nie zwraca `null`, kod następnie klonów struktury menu <xref:System.Windows.Forms.MainMenu> przy użyciu <xref:System.Windows.Forms.MainMenu.CloneMenu%2A> metody. Następnie ustawia kod <xref:System.Windows.Forms.MainMenu.RightToLeft%2A> właściwości na wartość true na nową kopię <xref:System.Windows.Forms.MainMenu> utworzyć <xref:System.Windows.Forms.MainMenu> które mogą być używane dla języków, które obsługuje prawo do tekstu z lewej. W tym przykładzie wymaga <xref:System.Windows.Forms.MainMenu> utworzony o nazwie `mainMenu1`.  
  
 [!code-cpp[Classic MainMenu.GetForm Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MainMenu.GetForm Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MainMenu.GetForm Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MainMenu.GetForm Example/CS/source.cs#1)]
 [!code-vb[Classic MainMenu.GetForm Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MainMenu.GetForm Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="Collapse">
      <MemberSignature Language="C#" Value="public event EventHandler Collapse;" />
      <MemberSignature Language="ILAsm" Value=".event class System.EventHandler Collapse" />
      <MemberSignature Language="DocId" Value="E:System.Windows.Forms.MainMenu.Collapse" />
      <MemberSignature Language="VB.NET" Value="Public Custom Event Collapse As EventHandler " />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; event EventHandler ^ Collapse;" />
      <MemberType>Event</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.EventHandler</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Występuje, gdy menu główne zostanie zwinięte.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Aby uzyskać więcej informacji na temat obsługi zdarzeń, zobacz [Obsługa i wywoływanie zdarzeń](~/docs/standard/events/index.md).  
  
   
  
## Examples  
 Poniższy przykład kodu pokazuje użycie tego elementu członkowskiego. W tym przykładzie program obsługi zdarzeń raportów w przypadku wystąpienia <xref:System.Windows.Forms.MainMenu.Collapse> zdarzeń. Ten raport pomaga, aby dowiedzieć się, gdy zdarzenie występuje i mogą pomóc w debugowaniu. Aby raport wiele zdarzeń lub zdarzeń, które występuje często, rozważ zastąpienie <xref:System.Windows.Forms.MessageBox.Show%2A?displayProperty=nameWithType> z <xref:System.Console.WriteLine%2A?displayProperty=nameWithType> lub dołączanie wiadomości w wielowierszowym <xref:System.Windows.Forms.TextBox>.  
  
 Aby uruchomić przykładowy kod, wklej go do projektu, który zawiera wystąpienie typu <xref:System.Windows.Forms.MainMenu> o nazwie `MainMenu1`. Następnie upewnij się, że program obsługi zdarzeń jest skojarzony z <xref:System.Windows.Forms.MainMenu.Collapse> zdarzeń.  
  
 [!code-csharp[System.Windows.Forms.EventExamples#483](~/samples/snippets/csharp/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/CS/EventExamples.cs#483)]
 [!code-vb[System.Windows.Forms.EventExamples#483](~/samples/snippets/visualbasic/VS_Snippets_Winforms/System.Windows.Forms.EventExamples/VB/EventExamples.vb#483)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateMenuHandle">
      <MemberSignature Language="C#" Value="protected override IntPtr CreateMenuHandle ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance native int CreateMenuHandle() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MainMenu.CreateMenuHandle" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Function CreateMenuHandle () As IntPtr" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override IntPtr CreateMenuHandle();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.IntPtr</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Tworzy nowy uchwyt do Menu.</summary>
        <returns>Dojście do menu, jeśli metoda zakończy się pomyślnie; w przeciwnym razie <see langword="null" />.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="M:System.Windows.Forms.Menu.CreateMenuHandle" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MainMenu.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <see langword="true" /> Aby zwolnić zasoby zarządzane i niezarządzane; <see langword="false" /> aby zwolnić tylko zasoby niezarządzane.</param>
        <summary>Usuwa zasoby, innego niż pamięci używanej przez <see cref="T:System.Windows.Forms.MainMenu" />.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wywołanie <xref:System.Windows.Forms.MainMenu.Dispose%2A> po zakończeniu przy użyciu <xref:System.Windows.Forms.MainMenu>. <xref:System.Windows.Forms.MainMenu.Dispose%2A> Pozostawia metody <xref:System.Windows.Forms.MainMenu> w stanie uniemożliwiającym jego używanie. Po wywołaniu <xref:System.Windows.Forms.MainMenu.Dispose%2A>, konieczne jest zwolnienie wszystkich odwołań do <xref:System.Windows.Forms.MainMenu> , można odzyskać pamięci, jej klasy przez wyrzucanie elementów bezużytecznych.  
  
> [!NOTE]
>  Wywoływanie zawsze <xref:System.Windows.Forms.MainMenu.Dispose%2A> przed zwolnieniem ostatniego odwołania do <xref:System.Windows.Forms.MainMenu>. W przeciwnym razie zasoby <xref:System.Windows.Forms.MainMenu> jest przy użyciu nie zostanie zwolniona, dopóki wywołania kolekcji pamięci <xref:System.Windows.Forms.MainMenu> destruktor obiektu.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="GetForm">
      <MemberSignature Language="C#" Value="public System.Windows.Forms.Form GetForm ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance class System.Windows.Forms.Form GetForm() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MainMenu.GetForm" />
      <MemberSignature Language="VB.NET" Value="Public Function GetForm () As Form" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; System::Windows::Forms::Form ^ GetForm();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.Form</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Pobiera <see cref="T:System.Windows.Forms.Form" /> zawierający ten formant.</summary>
        <returns>A <see cref="T:System.Windows.Forms.Form" /> oznacza to kontener dla tego formantu. Zwraca <see langword="null" /> Jeśli <see cref="T:System.Windows.Forms.MainMenu" /> nie jest obecnie obsługiwany w formularzu.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość umożliwia określenie, jeśli określony <xref:System.Windows.Forms.MainMenu> jest elementem nadrzędnym w formularzu. Ta właściwość jest zwykle używana, gdy wiele <xref:System.Windows.Forms.MainMenu> obiekty są używane w formularzu i należy ustalić, które jest obecnie używany przez formularz.  
  
   
  
## Examples  
 Poniższy przykład kodu wykorzystuje <xref:System.Windows.Forms.MainMenu.GetForm%2A> metodę, aby określić, czy <xref:System.Windows.Forms.MainMenu> obecnie jest elementem nadrzędnym w formularzu. Jeśli wywołanie w przykładzie kodu <xref:System.Windows.Forms.MainMenu.GetForm%2A> nie zwraca `null`, kod następnie klonów struktury menu <xref:System.Windows.Forms.MainMenu> przy użyciu <xref:System.Windows.Forms.MainMenu.CloneMenu%2A> metody. Następnie ustawia kod <xref:System.Windows.Forms.MainMenu.RightToLeft%2A> właściwości na wartość true na nową kopię <xref:System.Windows.Forms.MainMenu> utworzyć <xref:System.Windows.Forms.MainMenu> które mogą być używane dla języków, które obsługuje prawo do tekstu z lewej. W tym przykładzie wymaga <xref:System.Windows.Forms.MainMenu> utworzony o nazwie `mainMenu1`.  
  
 [!code-cpp[Classic MainMenu.GetForm Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MainMenu.GetForm Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MainMenu.GetForm Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MainMenu.GetForm Example/CS/source.cs#1)]
 [!code-vb[Classic MainMenu.GetForm Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MainMenu.GetForm Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <altmember cref="T:System.Windows.Forms.Form" />
      </Docs>
    </Member>
    <Member MemberName="OnCollapse">
      <MemberSignature Language="C#" Value="protected internal virtual void OnCollapse (EventArgs e);" />
      <MemberSignature Language="ILAsm" Value=".method familyorassemblyhidebysig newslot virtual instance void OnCollapse(class System.EventArgs e) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MainMenu.OnCollapse(System.EventArgs)" />
      <MemberSignature Language="VB.NET" Value="Protected Friend Overridable Sub OnCollapse (e As EventArgs)" />
      <MemberSignature Language="C++ CLI" Value="protected public:&#xA; virtual void OnCollapse(EventArgs ^ e);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="e" Type="System.EventArgs" />
      </Parameters>
      <Docs>
        <param name="e">
          <see cref="T:System.EventArgs" /> Zawierający dane zdarzenia.</param>
        <summary>Zgłasza <see cref="E:System.Windows.Forms.MainMenu.Collapse" /> zdarzeń.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Podnoszenie zdarzenia wywołuje program obsługi zdarzeń przez delegata. Aby uzyskać więcej informacji, zobacz [Obsługa i wywoływanie zdarzeń](~/docs/standard/events/index.md).  
  
 <xref:System.Windows.Forms.MainMenu.OnCollapse%2A> Metoda umożliwia również klas pochodnych do obsługi zdarzenia bez dołączanie delegata. Jest to preferowana metoda obsługi zdarzeń w klasie pochodnej.  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>W przypadku przesłaniania <see cref="M:System.Windows.Forms.MainMenu.OnCollapse(System.EventArgs)" /> w klasie pochodnej, należy wywołać klasy podstawowej <see cref="M:System.Windows.Forms.MainMenu.OnCollapse(System.EventArgs)" /> metody, które zarejestrowane delegatów odbierać zdarzenia.</para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="RightToLeft">
      <MemberSignature Language="C#" Value="public virtual System.Windows.Forms.RightToLeft RightToLeft { get; set; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.Windows.Forms.RightToLeft RightToLeft" />
      <MemberSignature Language="DocId" Value="P:System.Windows.Forms.MainMenu.RightToLeft" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Property RightToLeft As RightToLeft" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Windows::Forms::RightToLeft RightToLeft { System::Windows::Forms::RightToLeft get(); void set(System::Windows::Forms::RightToLeft value); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute>
          <AttributeName>System.ComponentModel.AmbientValue(Mono.Cecil.CustomAttributeArgument)</AttributeName>
        </Attribute>
        <Attribute>
          <AttributeName>System.ComponentModel.Localizable(true)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Windows.Forms.RightToLeft</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera lub ustawia tekst wyświetlany przez formant jest wyświetlany od prawej do lewej.</summary>
        <value>Jeden z <see cref="T:System.Windows.Forms.RightToLeft" /> wartości.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ta właściwość umożliwia menu do włączenia obsługi języków, które są zapisywane od prawej do lewej. Jeśli ta właściwość jest równa `RightToLeft.Yes`, tekst elementu menu będzie wyświetlane od prawej do lewej strony zamiast domyślnej od lewej do prawej metody.  
  
> [!NOTE]
>  Aby uzyskać więcej informacji na temat włączania od prawej do lewej Wyrównanie wpływ formanty formularzy systemu Windows, temacie <xref:System.Windows.Forms.Control.RightToLeft%2A> właściwości.  
  
   
  
## Examples  
 Poniższy przykład kodu wykorzystuje <xref:System.Windows.Forms.MainMenu.GetForm%2A> metodę, aby określić, czy <xref:System.Windows.Forms.MainMenu> obecnie jest elementem nadrzędnym w formularzu. Jeśli wywołanie w przykładzie kodu <xref:System.Windows.Forms.MainMenu.GetForm%2A> nie zwraca `null`, kod następnie klonów struktury menu <xref:System.Windows.Forms.MainMenu> przy użyciu <xref:System.Windows.Forms.MainMenu.CloneMenu%2A> metody. Przykładowy kod następnie ustawia <xref:System.Windows.Forms.MainMenu.RightToLeft%2A> właściwości `RightToLeft.Yes` na nową kopię <xref:System.Windows.Forms.MainMenu> utworzyć <xref:System.Windows.Forms.MainMenu> które mogą być używane dla języków, które obsługuje prawo do tekstu z lewej. W tym przykładzie wymaga <xref:System.Windows.Forms.MainMenu> utworzony o nazwie `mainMenu1`.  
  
 [!code-cpp[Classic MainMenu.RightToLeft Example#1](~/samples/snippets/cpp/VS_Snippets_Winforms/Classic MainMenu.RightToLeft Example/CPP/source.cpp#1)]
 [!code-csharp[Classic MainMenu.RightToLeft Example#1](~/samples/snippets/csharp/VS_Snippets_Winforms/Classic MainMenu.RightToLeft Example/CS/source.cs#1)]
 [!code-vb[Classic MainMenu.RightToLeft Example#1](~/samples/snippets/visualbasic/VS_Snippets_Winforms/Classic MainMenu.RightToLeft Example/VB/source.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ComponentModel.InvalidEnumArgumentException">Wartość przypisana do właściwości nie jest prawidłowym elementem członkowskim <see cref="T:System.Windows.Forms.RightToLeft" /> wyliczenia.</exception>
        <altmember cref="T:System.Windows.Forms.RightToLeft" />
      </Docs>
    </Member>
    <Member MemberName="ToString">
      <MemberSignature Language="C#" Value="public override string ToString ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig virtual instance string ToString() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Windows.Forms.MainMenu.ToString" />
      <MemberSignature Language="VB.NET" Value="Public Overrides Function ToString () As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; override System::String ^ ToString();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Windows.Forms</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>Zwraca ciąg reprezentujący <see cref="T:System.Windows.Forms.MainMenu" />.</summary>
        <returns>Ciąg reprezentujący bieżące <see cref="T:System.Windows.Forms.MainMenu" />.</returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Zwracany ciąg zawiera typ i ciąg zwrócony przez <xref:System.Windows.Forms.Form.ToString%2A> metody Jeśli <xref:System.Windows.Forms.MainMenu> jest przypisany do formularza.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>