<Type Name="Enumerable" FullName="System.Linq.Enumerable">
  <Metadata><Meta Name="ms.openlocfilehash" Value="4fb2daf49b5cdaaedf527a2fb64dd68e07f82789" /><Meta Name="ms.sourcegitcommit" Value="634678f7ccd2928c6b2cf792a301b079b63639af" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="07/26/2019" /><Meta Name="ms.locfileid" Value="68543651" /></Metadata><TypeSignature Language="C#" Value="public static class Enumerable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Enumerable extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Linq.Enumerable" />
  <TypeSignature Language="VB.NET" Value="Public Module Enumerable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Enumerable abstract sealed" />
  <TypeSignature Language="F#" Value="type Enumerable = class" />
  <AssemblyInfo>
    <AssemblyName>System.Linq</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary><span data-ttu-id="994a2-101">Zawiera zestaw <see langword="static" /> metod (<see langword="Shared" /> w Visual Basic) służących do wykonywania zapytań dotyczących obiektów, <see cref="T:System.Collections.Generic.IEnumerable`1" />które implementują.</span><span class="sxs-lookup"><span data-stu-id="994a2-101">Provides a set of <see langword="static" /> (<see langword="Shared" /> in Visual Basic) methods for querying objects that implement <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span></span></summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-102">Metody w tej klasie zapewniają implementację standardowych operatorów zapytań na potrzeby wykonywania zapytań dotyczących źródeł danych, które implementują <xref:System.Collections.Generic.IEnumerable%601>.</span><span class="sxs-lookup"><span data-stu-id="994a2-102">The methods in this class provide an implementation of the standard query operators for querying data sources that implement <xref:System.Collections.Generic.IEnumerable%601>.</span></span> <span data-ttu-id="994a2-103">Standardowe operatory zapytań są metodami ogólnego przeznaczenia, które są [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] zgodne ze wzorcem i umożliwiają wyrażanie operacji przechodzenia, filtrowania i projekcji danych w dowolnym z nich. Język programowania oparty na sieci.</span><span class="sxs-lookup"><span data-stu-id="994a2-103">The standard query operators are general purpose methods that follow the [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] pattern and enable you to express traversal, filter, and projection operations over data in any .NET-based programming language.</span></span>  
  
 <span data-ttu-id="994a2-104">Większość metod w tej klasie jest definiowana jako metody rozszerzające, które rozszerzają <xref:System.Collections.Generic.IEnumerable%601>.</span><span class="sxs-lookup"><span data-stu-id="994a2-104">The majority of the methods in this class are defined as extension methods that extend <xref:System.Collections.Generic.IEnumerable%601>.</span></span> <span data-ttu-id="994a2-105">Oznacza to, że mogą one być wywoływane jak metoda wystąpienia dla każdego obiektu, <xref:System.Collections.Generic.IEnumerable%601>który implementuje.</span><span class="sxs-lookup"><span data-stu-id="994a2-105">This means they can be called like an instance method on any object that implements <xref:System.Collections.Generic.IEnumerable%601>.</span></span>  
  
 <span data-ttu-id="994a2-106">Metody, które są używane w zapytaniu zwracającym sekwencję wartości, nie zużywają danych docelowych do momentu wyliczenia obiektu zapytania.</span><span class="sxs-lookup"><span data-stu-id="994a2-106">Methods that are used in a query that returns a sequence of values do not consume the target data until the query object is enumerated.</span></span> <span data-ttu-id="994a2-107">Jest to tzw. wykonywanie odroczone.</span><span class="sxs-lookup"><span data-stu-id="994a2-107">This is known as deferred execution.</span></span> <span data-ttu-id="994a2-108">Metody, które są używane w zapytaniu zwracającym wartość pojedynczą, wykonują i natychmiast zużywają dane docelowe.</span><span class="sxs-lookup"><span data-stu-id="994a2-108">Methods that are used in a query that returns a singleton value execute and consume the target data immediately.</span></span>  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/24cda21e-8af8-4632-b519-c404a839b9b2"><span data-ttu-id="994a2-109">Standardowe operatory zapytań — przegląd</span><span class="sxs-lookup"><span data-stu-id="994a2-109">Standard Query Operators Overview</span></span></related>
    <related type="Article" href="~/docs/csharp/programming-guide/classes-and-structs/extension-methods.md"><span data-ttu-id="994a2-110">Metody rozszerzeń (Przewodnik programowania w języku C#)</span><span class="sxs-lookup"><span data-stu-id="994a2-110">Extension Methods (C# Programming Guide)</span></span></related>
    <related type="Article" href="~/docs/visual-basic/programming-guide/language-features/procedures/extension-methods.md"><span data-ttu-id="994a2-111">Metody rozszerzeń (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-111">Extension Methods (Visual Basic)</span></span></related>
  </Docs>
  <Members>
    <Member MemberName="Aggregate&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource Aggregate&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TSource,TSource&gt; func);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource Aggregate&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`3&lt;!!TSource, !!TSource, !!TSource&gt; func) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Aggregate(Of TSource) (source As IEnumerable(Of TSource), func As Func(Of TSource, TSource, TSource)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource Aggregate(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TSource, TSource&gt; ^ func);" />
      <MemberSignature Language="F#" Value="static member Aggregate : seq&lt;'Source&gt; * Func&lt;'Source, 'Source, 'Source&gt; -&gt; 'Source" Usage="System.Linq.Enumerable.Aggregate (source, func)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="func" Type="System.Func&lt;TSource,TSource,TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-112">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-112">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-113"><see cref="T:System.Collections.Generic.IEnumerable`1" /> Do agregacji.</span><span class="sxs-lookup"><span data-stu-id="994a2-113">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to aggregate over.</span></span></param>
        <param name="func"><span data-ttu-id="994a2-114">Funkcja akumulowana, która ma być wywoływana dla każdego elementu.</span><span class="sxs-lookup"><span data-stu-id="994a2-114">An accumulator function to be invoked on each element.</span></span></param>
        <summary><span data-ttu-id="994a2-115">Stosuje funkcję akumulatora po sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-115">Applies an accumulator function over a sequence.</span></span></summary>
        <returns><span data-ttu-id="994a2-116">Końcowa wartość akumulowana.</span><span class="sxs-lookup"><span data-stu-id="994a2-116">The final accumulator value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-117"><xref:System.Linq.Enumerable.Aggregate%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%29> Metoda ułatwia wykonywanie obliczeń na sekwencji wartości.</span><span class="sxs-lookup"><span data-stu-id="994a2-117">The <xref:System.Linq.Enumerable.Aggregate%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%29> method makes it simple to perform a calculation over a sequence of values.</span></span> <span data-ttu-id="994a2-118">Ta metoda działa przez wywoływanie `func` jednokrotnie dla każdego elementu w `source` z wyjątkiem pierwszego.</span><span class="sxs-lookup"><span data-stu-id="994a2-118">This method works by calling `func` one time for each element in `source` except the first one.</span></span> <span data-ttu-id="994a2-119">Każdy moment `func` jest wywoływany <xref:System.Linq.Enumerable.Aggregate%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%29> , przekazuje zarówno element z sekwencji, jak i agregowaną wartość (jako pierwszy argument do `func`).</span><span class="sxs-lookup"><span data-stu-id="994a2-119">Each time `func` is called, <xref:System.Linq.Enumerable.Aggregate%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%29> passes both the element from the sequence and an aggregated value (as the first argument to `func`).</span></span> <span data-ttu-id="994a2-120">Pierwszy element `source` jest używany jako początkowa wartość agregowania.</span><span class="sxs-lookup"><span data-stu-id="994a2-120">The first element of `source` is used as the initial aggregate value.</span></span> <span data-ttu-id="994a2-121">Wynik `func` zastąpienia poprzedniej wartości agregowanej.</span><span class="sxs-lookup"><span data-stu-id="994a2-121">The result of `func` replaces the previous aggregated value.</span></span> <span data-ttu-id="994a2-122"><xref:System.Linq.Enumerable.Aggregate%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%29>zwraca końcowy wynik `func`.</span><span class="sxs-lookup"><span data-stu-id="994a2-122"><xref:System.Linq.Enumerable.Aggregate%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%29> returns the final result of `func`.</span></span>  
  
 <span data-ttu-id="994a2-123">To Przeciążenie <xref:System.Linq.Enumerable.Aggregate%2A> metody nie jest odpowiednie dla wszystkich przypadków, ponieważ używa pierwszego `source` elementu jako początkowej wartości agregowanej.</span><span class="sxs-lookup"><span data-stu-id="994a2-123">This overload of the <xref:System.Linq.Enumerable.Aggregate%2A> method isn't suitable for all cases because it uses the first element of `source` as the initial aggregate value.</span></span> <span data-ttu-id="994a2-124">Należy wybrać inne Przeciążenie, jeśli wartość zwracana powinna zawierać tylko elementy `source` , które spełniają określony warunek.</span><span class="sxs-lookup"><span data-stu-id="994a2-124">You should choose another overload if the return value should include only the elements of `source` that meet a certain condition.</span></span> <span data-ttu-id="994a2-125">Na przykład to Przeciążenie nie jest niezawodne, jeśli chcesz obliczyć sumę parzystych liczb w `source`.</span><span class="sxs-lookup"><span data-stu-id="994a2-125">For example, this overload isn't reliable if you want to calculate the sum of the even numbers in `source`.</span></span> <span data-ttu-id="994a2-126">Wynik będzie nieprawidłowy, jeśli pierwszy element jest nieparzysty, a nie nawet.</span><span class="sxs-lookup"><span data-stu-id="994a2-126">The result will be incorrect if the first element is odd instead of even.</span></span>  
  
 <span data-ttu-id="994a2-127">Aby uprościć Typowe operacje agregacji, standardowe operatory zapytań obejmują również metodę zliczania ogólnego zastosowania <xref:System.Linq.Enumerable.Count%2A>, i cztery metody agregacji liczbowej <xref:System.Linq.Enumerable.Min%2A>, <xref:System.Linq.Enumerable.Max%2A>mianowicie <xref:System.Linq.Enumerable.Sum%2A>,, <xref:System.Linq.Enumerable.Average%2A>, i.</span><span class="sxs-lookup"><span data-stu-id="994a2-127">To simplify common aggregation operations, the standard query operators also include a general purpose count method, <xref:System.Linq.Enumerable.Count%2A>, and four numeric aggregation methods, namely <xref:System.Linq.Enumerable.Min%2A>, <xref:System.Linq.Enumerable.Max%2A>, <xref:System.Linq.Enumerable.Sum%2A>, and <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-128">Poniższy przykład kodu demonstruje sposób odwrócenia kolejności wyrazów w ciągu przy użyciu <xref:System.Linq.Enumerable.Aggregate%2A>.</span><span class="sxs-lookup"><span data-stu-id="994a2-128">The following code example demonstrates how to reverse the order of words in a string by using <xref:System.Linq.Enumerable.Aggregate%2A>.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#1)]
 [!code-vb[System.Linq.Enumerable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-129"><paramref name="source" />lub <paramref name="func" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-129"><paramref name="source" /> or <paramref name="func" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="994a2-130"><paramref name="source" />nie zawiera żadnych elementów.</span><span class="sxs-lookup"><span data-stu-id="994a2-130"><paramref name="source" /> contains no elements.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Aggregate&lt;TSource,TAccumulate&gt;">
      <MemberSignature Language="C#" Value="public static TAccumulate Aggregate&lt;TSource,TAccumulate&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, TAccumulate seed, Func&lt;TAccumulate,TSource,TAccumulate&gt; func);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TAccumulate Aggregate&lt;TSource, TAccumulate&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, !!TAccumulate seed, class System.Func`3&lt;!!TAccumulate, !!TSource, !!TAccumulate&gt; func) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Aggregate(Of TSource, TAccumulate) (source As IEnumerable(Of TSource), seed As TAccumulate, func As Func(Of TAccumulate, TSource, TAccumulate)) As TAccumulate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TAccumulate&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TAccumulate Aggregate(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, TAccumulate seed, Func&lt;TAccumulate, TSource, TAccumulate&gt; ^ func);" />
      <MemberSignature Language="F#" Value="static member Aggregate : seq&lt;'Source&gt; * 'Accumulate * Func&lt;'Accumulate, 'Source, 'Accumulate&gt; -&gt; 'Accumulate" Usage="System.Linq.Enumerable.Aggregate (source, seed, func)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TAccumulate</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TAccumulate" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="seed" Type="TAccumulate" />
        <Parameter Name="func" Type="System.Func&lt;TAccumulate,TSource,TAccumulate&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-131">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-131">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TAccumulate"><span data-ttu-id="994a2-132">Typ wartości elementu akumulowana.</span><span class="sxs-lookup"><span data-stu-id="994a2-132">The type of the accumulator value.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-133"><see cref="T:System.Collections.Generic.IEnumerable`1" /> Do agregacji.</span><span class="sxs-lookup"><span data-stu-id="994a2-133">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to aggregate over.</span></span></param>
        <param name="seed"><span data-ttu-id="994a2-134">Początkowa wartość akumulowana.</span><span class="sxs-lookup"><span data-stu-id="994a2-134">The initial accumulator value.</span></span></param>
        <param name="func"><span data-ttu-id="994a2-135">Funkcja akumulowana, która ma być wywoływana dla każdego elementu.</span><span class="sxs-lookup"><span data-stu-id="994a2-135">An accumulator function to be invoked on each element.</span></span></param>
        <summary><span data-ttu-id="994a2-136">Stosuje funkcję akumulatora po sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-136">Applies an accumulator function over a sequence.</span></span> <span data-ttu-id="994a2-137">Określona wartość inicjatora jest używana jako początkowa wartość akumulowana.</span><span class="sxs-lookup"><span data-stu-id="994a2-137">The specified seed value is used as the initial accumulator value.</span></span></summary>
        <returns><span data-ttu-id="994a2-138">Końcowa wartość akumulowana.</span><span class="sxs-lookup"><span data-stu-id="994a2-138">The final accumulator value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-139"><xref:System.Linq.Enumerable.Aggregate%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%29> Metoda ułatwia wykonywanie obliczeń na sekwencji wartości.</span><span class="sxs-lookup"><span data-stu-id="994a2-139">The <xref:System.Linq.Enumerable.Aggregate%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%29> method makes it simple to perform a calculation over a sequence of values.</span></span> <span data-ttu-id="994a2-140">Ta metoda działa przez wywoływanie `func` jednokrotnie dla każdego elementu w. `source`</span><span class="sxs-lookup"><span data-stu-id="994a2-140">This method works by calling `func` one time for each element in `source`.</span></span> <span data-ttu-id="994a2-141">Każdy moment `func` jest wywoływany <xref:System.Linq.Enumerable.Aggregate%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%29> , przekazuje zarówno element z sekwencji, jak i agregowaną wartość (jako pierwszy argument do `func`).</span><span class="sxs-lookup"><span data-stu-id="994a2-141">Each time `func` is called, <xref:System.Linq.Enumerable.Aggregate%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%29> passes both the element from the sequence and an aggregated value (as the first argument to `func`).</span></span> <span data-ttu-id="994a2-142">Wartość `seed` parametru jest używana jako początkowa wartość agregowania.</span><span class="sxs-lookup"><span data-stu-id="994a2-142">The value of the `seed` parameter is used as the initial aggregate value.</span></span> <span data-ttu-id="994a2-143">Wynik `func` zastąpienia poprzedniej wartości agregowanej.</span><span class="sxs-lookup"><span data-stu-id="994a2-143">The result of `func` replaces the previous aggregated value.</span></span> <span data-ttu-id="994a2-144"><xref:System.Linq.Enumerable.Aggregate%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%29>zwraca końcowy wynik `func`.</span><span class="sxs-lookup"><span data-stu-id="994a2-144"><xref:System.Linq.Enumerable.Aggregate%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%29> returns the final result of `func`.</span></span>  
  
 <span data-ttu-id="994a2-145">Aby uprościć Typowe operacje agregacji, standardowe operatory zapytań obejmują również metodę zliczania ogólnego zastosowania <xref:System.Linq.Enumerable.Count%2A>, i cztery metody agregacji liczbowej <xref:System.Linq.Enumerable.Min%2A>, <xref:System.Linq.Enumerable.Max%2A>mianowicie <xref:System.Linq.Enumerable.Sum%2A>,, <xref:System.Linq.Enumerable.Average%2A>, i.</span><span class="sxs-lookup"><span data-stu-id="994a2-145">To simplify common aggregation operations, the standard query operators also include a general purpose count method, <xref:System.Linq.Enumerable.Count%2A>, and four numeric aggregation methods, namely <xref:System.Linq.Enumerable.Min%2A>, <xref:System.Linq.Enumerable.Max%2A>, <xref:System.Linq.Enumerable.Sum%2A>, and <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-146">Poniższy przykład kodu demonstruje, jak używać <xref:System.Linq.Enumerable.Aggregate%2A> do zastosowania funkcji akumulowana i używania wartości inicjatora.</span><span class="sxs-lookup"><span data-stu-id="994a2-146">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Aggregate%2A> to apply an accumulator function and use a seed value.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#2)]
 [!code-vb[System.Linq.Enumerable#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-147"><paramref name="source" />lub <paramref name="func" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-147"><paramref name="source" /> or <paramref name="func" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Aggregate&lt;TSource,TAccumulate,TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Aggregate&lt;TSource,TAccumulate,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, TAccumulate seed, Func&lt;TAccumulate,TSource,TAccumulate&gt; func, Func&lt;TAccumulate,TResult&gt; resultSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Aggregate&lt;TSource, TAccumulate, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, !!TAccumulate seed, class System.Func`3&lt;!!TAccumulate, !!TSource, !!TAccumulate&gt; func, class System.Func`2&lt;!!TAccumulate, !!TResult&gt; resultSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Aggregate(Of TSource, TAccumulate, TResult) (source As IEnumerable(Of TSource), seed As TAccumulate, func As Func(Of TAccumulate, TSource, TAccumulate), resultSelector As Func(Of TAccumulate, TResult)) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TAccumulate, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TResult Aggregate(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, TAccumulate seed, Func&lt;TAccumulate, TSource, TAccumulate&gt; ^ func, Func&lt;TAccumulate, TResult&gt; ^ resultSelector);" />
      <MemberSignature Language="F#" Value="static member Aggregate : seq&lt;'Source&gt; * 'Accumulate * Func&lt;'Accumulate, 'Source, 'Accumulate&gt; * Func&lt;'Accumulate, 'Result&gt; -&gt; 'Result" Usage="System.Linq.Enumerable.Aggregate (source, seed, func, resultSelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TAccumulate" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="seed" Type="TAccumulate" />
        <Parameter Name="func" Type="System.Func&lt;TAccumulate,TSource,TAccumulate&gt;" />
        <Parameter Name="resultSelector" Type="System.Func&lt;TAccumulate,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-148">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-148">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TAccumulate"><span data-ttu-id="994a2-149">Typ wartości elementu akumulowana.</span><span class="sxs-lookup"><span data-stu-id="994a2-149">The type of the accumulator value.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="994a2-150">Typ wartości otrzymanej.</span><span class="sxs-lookup"><span data-stu-id="994a2-150">The type of the resulting value.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-151"><see cref="T:System.Collections.Generic.IEnumerable`1" /> Do agregacji.</span><span class="sxs-lookup"><span data-stu-id="994a2-151">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to aggregate over.</span></span></param>
        <param name="seed"><span data-ttu-id="994a2-152">Początkowa wartość akumulowana.</span><span class="sxs-lookup"><span data-stu-id="994a2-152">The initial accumulator value.</span></span></param>
        <param name="func"><span data-ttu-id="994a2-153">Funkcja akumulowana, która ma być wywoływana dla każdego elementu.</span><span class="sxs-lookup"><span data-stu-id="994a2-153">An accumulator function to be invoked on each element.</span></span></param>
        <param name="resultSelector"><span data-ttu-id="994a2-154">Funkcja Przekształć końcową wartość akumulowana na wartość wynikową.</span><span class="sxs-lookup"><span data-stu-id="994a2-154">A function to transform the final accumulator value into the result value.</span></span></param>
        <summary><span data-ttu-id="994a2-155">Stosuje funkcję akumulatora po sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-155">Applies an accumulator function over a sequence.</span></span> <span data-ttu-id="994a2-156">Określona wartość inicjatora jest używana jako początkowa wartość akumulowana, a określona funkcja jest używana do wybierania wartości wyniku.</span><span class="sxs-lookup"><span data-stu-id="994a2-156">The specified seed value is used as the initial accumulator value, and the specified function is used to select the result value.</span></span></summary>
        <returns><span data-ttu-id="994a2-157">Przekształcona wartość końcowego akumulowana.</span><span class="sxs-lookup"><span data-stu-id="994a2-157">The transformed final accumulator value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-158"><xref:System.Linq.Enumerable.Aggregate%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%29> Metoda ułatwia wykonywanie obliczeń na sekwencji wartości.</span><span class="sxs-lookup"><span data-stu-id="994a2-158">The <xref:System.Linq.Enumerable.Aggregate%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%29> method makes it simple to perform a calculation over a sequence of values.</span></span> <span data-ttu-id="994a2-159">Ta metoda działa przez wywoływanie `func` jednokrotnie dla każdego elementu w. `source`</span><span class="sxs-lookup"><span data-stu-id="994a2-159">This method works by calling `func` one time for each element in `source`.</span></span> <span data-ttu-id="994a2-160">Każdy moment `func` jest wywoływany <xref:System.Linq.Enumerable.Aggregate%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%29> , przekazuje zarówno element z sekwencji, jak i agregowaną wartość (jako pierwszy argument do `func`).</span><span class="sxs-lookup"><span data-stu-id="994a2-160">Each time `func` is called, <xref:System.Linq.Enumerable.Aggregate%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%29> passes both the element from the sequence and an aggregated value (as the first argument to `func`).</span></span> <span data-ttu-id="994a2-161">Wartość `seed` parametru jest używana jako początkowa wartość agregowania.</span><span class="sxs-lookup"><span data-stu-id="994a2-161">The value of the `seed` parameter is used as the initial aggregate value.</span></span> <span data-ttu-id="994a2-162">Wynik `func` zastąpienia poprzedniej wartości agregowanej.</span><span class="sxs-lookup"><span data-stu-id="994a2-162">The result of `func` replaces the previous aggregated value.</span></span> <span data-ttu-id="994a2-163">Końcowy wynik `func` jest przekazanie do `resultSelector` w celu <xref:System.Linq.Enumerable.Aggregate%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%29>uzyskania końcowego wyniku.</span><span class="sxs-lookup"><span data-stu-id="994a2-163">The final result of `func` is passed to `resultSelector` to obtain the final result of <xref:System.Linq.Enumerable.Aggregate%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%29>.</span></span>  
  
 <span data-ttu-id="994a2-164">Aby uprościć Typowe operacje agregacji, standardowe operatory zapytań obejmują również metodę zliczania ogólnego zastosowania <xref:System.Linq.Enumerable.Count%2A>, i cztery metody agregacji liczbowej <xref:System.Linq.Enumerable.Min%2A>, <xref:System.Linq.Enumerable.Max%2A>mianowicie <xref:System.Linq.Enumerable.Sum%2A>,, <xref:System.Linq.Enumerable.Average%2A>, i.</span><span class="sxs-lookup"><span data-stu-id="994a2-164">To simplify common aggregation operations, the standard query operators also include a general purpose count method, <xref:System.Linq.Enumerable.Count%2A>, and four numeric aggregation methods, namely <xref:System.Linq.Enumerable.Min%2A>, <xref:System.Linq.Enumerable.Max%2A>, <xref:System.Linq.Enumerable.Sum%2A>, and <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-165">Poniższy przykład kodu demonstruje, jak używać <xref:System.Linq.Enumerable.Aggregate%2A> do zastosowania funkcji i selektora wyników.</span><span class="sxs-lookup"><span data-stu-id="994a2-165">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Aggregate%2A> to apply an accumulator function and a result selector.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#3)]
 [!code-vb[System.Linq.Enumerable#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-166"><paramref name="source" />or <paramref name="func" /> lub <paramref name="resultSelector" /> is .<see langword="null" /></span><span class="sxs-lookup"><span data-stu-id="994a2-166"><paramref name="source" /> or <paramref name="func" /> or <paramref name="resultSelector" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="All&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static bool All&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool All&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function All(Of TSource) (source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool All(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member All : seq&lt;'Source&gt; * Func&lt;'Source, bool&gt; -&gt; bool" Usage="System.Linq.Enumerable.All (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-167">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-167">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-168">Element <see cref="T:System.Collections.Generic.IEnumerable`1" /> zawierający elementy, do których ma zostać zastosowany predykat.</span><span class="sxs-lookup"><span data-stu-id="994a2-168">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements to apply the predicate to.</span></span></param>
        <param name="predicate"><span data-ttu-id="994a2-169">Funkcja testowania każdego elementu na stanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-169">A function to test each element for a condition.</span></span></param>
        <summary><span data-ttu-id="994a2-170">Określa, czy wszystkie elementy sekwencji spełniają warunek.</span><span class="sxs-lookup"><span data-stu-id="994a2-170">Determines whether all elements of a sequence satisfy a condition.</span></span></summary>
        <returns><span data-ttu-id="994a2-171"><see langword="true" />Jeśli każdy element sekwencji źródłowej przekazuje test w określonym predykacie lub jeśli sekwencja jest pusta; w przeciwnym razie. <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="994a2-171"><see langword="true" /> if every element of the source sequence passes the test in the specified predicate, or if the sequence is empty; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="994a2-172">Ta metoda nie zwraca wszystkich elementów kolekcji.</span><span class="sxs-lookup"><span data-stu-id="994a2-172">This method does not return all the elements of a collection.</span></span> <span data-ttu-id="994a2-173">Zamiast tego określa, czy wszystkie elementy kolekcji spełniają warunek.</span><span class="sxs-lookup"><span data-stu-id="994a2-173">Instead, it determines whether all the elements of a collection satisfy a condition.</span></span>  
  
 <span data-ttu-id="994a2-174">Wyliczenie `source` jest zatrzymane od razu po ustaleniu wyniku.</span><span class="sxs-lookup"><span data-stu-id="994a2-174">The enumeration of `source` is stopped as soon as the result can be determined.</span></span>  
  
 <span data-ttu-id="994a2-175">W Visual Basic składni wyrażenia zapytania, `Aggregate Into All()` klauzula tłumaczy na <xref:System.Linq.Enumerable.All%2A>wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-175">In Visual Basic query expression syntax, an `Aggregate Into All()` clause translates to an invocation of <xref:System.Linq.Enumerable.All%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-176">Poniższy przykład kodu demonstruje, jak użyć <xref:System.Linq.Enumerable.All%2A> , aby określić, czy wszystkie elementy w sekwencji spełniają warunek.</span><span class="sxs-lookup"><span data-stu-id="994a2-176">The following code example demonstrates how to use <xref:System.Linq.Enumerable.All%2A> to determine whether all the elements in a sequence satisfy a condition.</span></span> <span data-ttu-id="994a2-177">Zmienna `allStartWithB` ma wartość true, jeśli wszystkie nazwy zwierząt domowych zaczynają się od "B `pets` " lub jeśli tablica jest pusta.</span><span class="sxs-lookup"><span data-stu-id="994a2-177">Variable `allStartWithB` is true if all the pet names start with "B" or if the `pets` array is empty.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#4)]
 [!code-vb[System.Linq.Enumerable#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#4)]  
  
 <span data-ttu-id="994a2-178">Wartość <xref:System.Linq.Enumerable.All%2A> logiczna zwracana przez metodę jest zwykle używana w predykacie `where` klauzuli (`Where` klauzula w <xref:System.Linq.Enumerable.Where%2A> Visual Basic) lub bezpośrednie wywołanie metody.</span><span class="sxs-lookup"><span data-stu-id="994a2-178">The Boolean value that the <xref:System.Linq.Enumerable.All%2A> method returns is typically used in the predicate of a `where` clause (`Where` clause in Visual Basic) or a direct call to the <xref:System.Linq.Enumerable.Where%2A> method.</span></span> <span data-ttu-id="994a2-179">Poniższy przykład demonstruje użycie `All` metody.</span><span class="sxs-lookup"><span data-stu-id="994a2-179">The following example demonstrates this use of the `All` method.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#129](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#129)]
 [!code-vb[System.Linq.Enumerable#129](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#129)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-180"><paramref name="source" />lub <paramref name="predicate" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-180"><paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="994a2-181">Aggregate — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-181">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Any&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="994a2-182">Określa, czy element sekwencji istnieje, czy spełnia warunek.</span><span class="sxs-lookup"><span data-stu-id="994a2-182">Determines whether any element of a sequence exists or satisfies a condition.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Any&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static bool Any&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Any&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Any(Of TSource) (source As IEnumerable(Of TSource)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool Any(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Any : seq&lt;'Source&gt; -&gt; bool" Usage="System.Linq.Enumerable.Any source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-183">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-183">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-184"><see cref="T:System.Collections.Generic.IEnumerable`1" /> Aby sprawdzić obecność opróżniania.</span><span class="sxs-lookup"><span data-stu-id="994a2-184">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to check for emptiness.</span></span></param>
        <summary><span data-ttu-id="994a2-185">Określa, czy sekwencja zawiera dowolne elementy.</span><span class="sxs-lookup"><span data-stu-id="994a2-185">Determines whether a sequence contains any elements.</span></span></summary>
        <returns><span data-ttu-id="994a2-186"><see langword="true" />Jeśli sekwencja źródłowa zawiera jakiekolwiek elementy; w przeciwnym razie. <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="994a2-186"><see langword="true" /> if the source sequence contains any elements; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="994a2-187">Ta metoda nie zwraca żadnego elementu kolekcji.</span><span class="sxs-lookup"><span data-stu-id="994a2-187">This method does not return any one element of a collection.</span></span> <span data-ttu-id="994a2-188">Zamiast tego określa, czy kolekcja zawiera dowolne elementy.</span><span class="sxs-lookup"><span data-stu-id="994a2-188">Instead, it determines whether the collection contains any elements.</span></span>  
  
 <span data-ttu-id="994a2-189">Wyliczenie `source` jest zatrzymane od razu po ustaleniu wyniku.</span><span class="sxs-lookup"><span data-stu-id="994a2-189">The enumeration of `source` is stopped as soon as the result can be determined.</span></span>  
  
 <span data-ttu-id="994a2-190">W Visual Basic składni wyrażenia zapytania, `Aggregate Into Any()` klauzula tłumaczy na <xref:System.Linq.Enumerable.Any%2A>wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-190">In Visual Basic query expression syntax, an `Aggregate Into Any()` clause translates to an invocation of <xref:System.Linq.Enumerable.Any%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-191">Poniższy przykład kodu demonstruje, jak użyć <xref:System.Linq.Enumerable.Any%2A> , aby określić, czy sekwencja zawiera jakiekolwiek elementy.</span><span class="sxs-lookup"><span data-stu-id="994a2-191">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Any%2A> to determine whether a sequence contains any elements.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#5)]
 [!code-vb[System.Linq.Enumerable#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#5)]  
  
 <span data-ttu-id="994a2-192">Wartość <xref:System.Linq.Enumerable.Any%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> logiczna zwracana przez metodę jest zwykle używana w predykacie `where` klauzuli (`Where` klauzula w <xref:System.Linq.Enumerable.Where%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> Visual Basic) lub bezpośrednie wywołanie metody.</span><span class="sxs-lookup"><span data-stu-id="994a2-192">The Boolean value that the <xref:System.Linq.Enumerable.Any%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> method returns is typically used in the predicate of a `where` clause (`Where` clause in Visual Basic) or a direct call to the <xref:System.Linq.Enumerable.Where%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> method.</span></span> <span data-ttu-id="994a2-193">Poniższy przykład demonstruje użycie `Any` metody.</span><span class="sxs-lookup"><span data-stu-id="994a2-193">The following example demonstrates this use of the `Any` method.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#130](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#130)]
 [!code-vb[System.Linq.Enumerable#130](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#130)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-194"><paramref name="source" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-194"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="994a2-195">Aggregate — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-195">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Any&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static bool Any&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Any&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Any(Of TSource) (source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool Any(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member Any : seq&lt;'Source&gt; * Func&lt;'Source, bool&gt; -&gt; bool" Usage="System.Linq.Enumerable.Any (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-196">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-196">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-197"><see cref="T:System.Collections.Generic.IEnumerable`1" /> Których elementów należy użyć predykatu.</span><span class="sxs-lookup"><span data-stu-id="994a2-197">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to apply the predicate to.</span></span></param>
        <param name="predicate"><span data-ttu-id="994a2-198">Funkcja testowania każdego elementu na stanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-198">A function to test each element for a condition.</span></span></param>
        <summary><span data-ttu-id="994a2-199">Określa, czy dowolny element sekwencji spełnia warunek.</span><span class="sxs-lookup"><span data-stu-id="994a2-199">Determines whether any element of a sequence satisfies a condition.</span></span></summary>
        <returns><span data-ttu-id="994a2-200"><see langword="true" />Jeśli jakiekolwiek elementy w sekwencji źródłowej przekazują test w określonym predykacie; w przeciwnym razie. <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="994a2-200"><see langword="true" /> if any elements in the source sequence pass the test in the specified predicate; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="994a2-201">Ta metoda nie zwraca żadnego elementu kolekcji.</span><span class="sxs-lookup"><span data-stu-id="994a2-201">This method does not return any one element of a collection.</span></span> <span data-ttu-id="994a2-202">Zamiast tego określa, czy wszystkie elementy kolekcji spełniają warunek.</span><span class="sxs-lookup"><span data-stu-id="994a2-202">Instead, it determines whether any elements of a collection satisfy a condition.</span></span>  
  
 <span data-ttu-id="994a2-203">Wyliczenie `source` jest zatrzymane od razu po ustaleniu wyniku.</span><span class="sxs-lookup"><span data-stu-id="994a2-203">The enumeration of `source` is stopped as soon as the result can be determined.</span></span>  
  
 <span data-ttu-id="994a2-204">W Visual Basic składni wyrażenia zapytania, `Aggregate Into Any()` klauzula tłumaczy na <xref:System.Linq.Enumerable.Any%2A>wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-204">In Visual Basic query expression syntax, an `Aggregate Into Any()` clause translates to an invocation of <xref:System.Linq.Enumerable.Any%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-205">Poniższy przykład kodu demonstruje, jak użyć <xref:System.Linq.Enumerable.Any%2A> , aby określić, czy dowolny element w sekwencji spełnia warunek.</span><span class="sxs-lookup"><span data-stu-id="994a2-205">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Any%2A> to determine whether any element in a sequence satisfies a condition.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#6)]
 [!code-vb[System.Linq.Enumerable#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-206"><paramref name="source" />lub <paramref name="predicate" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-206"><paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="994a2-207">Aggregate — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-207">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Append&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Append&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, TSource element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Append&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, !!TSource element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Append``1(System.Collections.Generic.IEnumerable{``0},``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Append(Of TSource) (source As IEnumerable(Of TSource), element As TSource) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ Append(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, TSource element);" />
      <MemberSignature Language="F#" Value="static member Append : seq&lt;'Source&gt; * 'Source -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.Append (source, element)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netstandard-2.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;netstandard-2.1" />
        <Parameter Name="element" Type="TSource" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;netstandard-2.1" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-208">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-208">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-209">Sekwencja wartości.</span><span class="sxs-lookup"><span data-stu-id="994a2-209">A sequence of values.</span></span></param>
        <param name="element"><span data-ttu-id="994a2-210">Wartość do dołączenia <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-210">The value to append to <paramref name="source" />.</span></span></param>
        <summary><span data-ttu-id="994a2-211">Dołącza wartość do końca sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-211">Appends a value to the end of the sequence.</span></span></summary>
        <returns><span data-ttu-id="994a2-212">Nowa sekwencja kończąca się od <paramref name="element" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-212">A new sequence that ends with <paramref name="element" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="994a2-213">Ta metoda nie modyfikuje elementów kolekcji.</span><span class="sxs-lookup"><span data-stu-id="994a2-213">This method does not modify the elements of the collection.</span></span> <span data-ttu-id="994a2-214">Zamiast tego tworzy kopię kolekcji z nowym elementem.</span><span class="sxs-lookup"><span data-stu-id="994a2-214">Instead, it creates a copy of the collection with the new element.</span></span>
  
## Examples  
 <span data-ttu-id="994a2-215">Poniższy przykład kodu ilustruje sposób użycia <xref:System.Linq.Enumerable.Append%2A> programu w celu dołączenia wartości na końcu sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-215">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Append%2A> to append a value to the end of the sequence.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#201](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#201)]
 [!code-vb[System.Linq.Enumerable#201](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#201)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-216"><paramref name="source" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-216"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="AsEnumerable&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; AsEnumerable&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; AsEnumerable&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsEnumerable(Of TSource) (source As IEnumerable(Of TSource)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ AsEnumerable(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member AsEnumerable : seq&lt;'Source&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.AsEnumerable source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-217">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-217">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-218">Sekwencja do wpisania jako <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-218">The sequence to type as <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span></span></param>
        <summary><span data-ttu-id="994a2-219">Zwraca dane wejściowe wpisane jako <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-219">Returns the input typed as <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span></span></summary>
        <returns><span data-ttu-id="994a2-220">Sekwencja wejściowa wpisana jako <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-220">The input sequence typed as <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-221">Metoda nie ma żadnego efektu niż zmiana `source` typu czasu kompilacji z typu, który implementuje <xref:System.Collections.Generic.IEnumerable%601> <xref:System.Collections.Generic.IEnumerable%601> sam. <xref:System.Linq.Enumerable.AsEnumerable%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29></span><span class="sxs-lookup"><span data-stu-id="994a2-221">The <xref:System.Linq.Enumerable.AsEnumerable%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> method has no effect other than to change the compile-time type of `source` from a type that implements <xref:System.Collections.Generic.IEnumerable%601> to <xref:System.Collections.Generic.IEnumerable%601> itself.</span></span>  
  
 <span data-ttu-id="994a2-222"><xref:System.Linq.Enumerable.AsEnumerable%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29>może służyć do wybierania między implementacjami zapytań, gdy sekwencja implementuje <xref:System.Collections.Generic.IEnumerable%601> , ale również ma inny zestaw metod zapytania publicznego.</span><span class="sxs-lookup"><span data-stu-id="994a2-222"><xref:System.Linq.Enumerable.AsEnumerable%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> can be used to choose between query implementations when a sequence implements <xref:System.Collections.Generic.IEnumerable%601> but also has a different set of public query methods available.</span></span> <span data-ttu-id="994a2-223">Na przykład `Table` , w przypadku klasy generycznej, która implementuje <xref:System.Collections.Generic.IEnumerable%601> i ma własne metody, `Where`takie `Select`jak, `SelectMany`, i, wywołanie `Where` wywoła metodę `Where` `Table`publiczną.</span><span class="sxs-lookup"><span data-stu-id="994a2-223">For example, given a generic class `Table` that implements <xref:System.Collections.Generic.IEnumerable%601> and has its own methods such as `Where`, `Select`, and `SelectMany`, a call to `Where` would invoke the public `Where` method of `Table`.</span></span> <span data-ttu-id="994a2-224">Typ reprezentujący tabelę bazy danych może `Where` mieć metodę, która przyjmuje argument predykat jako drzewo wyrażenia i konwertuje drzewo na SQL na potrzeby wykonywania zdalnego. `Table`</span><span class="sxs-lookup"><span data-stu-id="994a2-224">A `Table` type that represents a database table could have a `Where` method that takes the predicate argument as an expression tree and converts the tree to SQL for remote execution.</span></span> <span data-ttu-id="994a2-225">Jeśli zdalne wykonywanie nie jest wymagane, na przykład dlatego, że predykat wywołuje metodę lokalną, <xref:System.Linq.Enumerable.AsEnumerable%2A> można użyć metody do ukrycia metod niestandardowych i zamiast tego udostępnić standardowe operatory zapytań.</span><span class="sxs-lookup"><span data-stu-id="994a2-225">If remote execution is not desired, for example because the predicate invokes a local method, the <xref:System.Linq.Enumerable.AsEnumerable%2A> method can be used to hide the custom methods and instead make the standard query operators available.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-226">Poniższy przykład kodu demonstruje, jak użyć <xref:System.Linq.Enumerable.AsEnumerable%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> do ukrycia niestandardowej `Where` metody typu, gdy wymagana jest implementacja standardowego operatora zapytań.</span><span class="sxs-lookup"><span data-stu-id="994a2-226">The following code example demonstrates how to use <xref:System.Linq.Enumerable.AsEnumerable%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to hide a type's custom `Where` method when the standard query operator implementation is desired.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#108](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#108)]
 [!code-vb[System.Linq.Enumerable#108](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#108)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Average">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="994a2-227">Oblicza średnią sekwencji wartości liczbowych.</span><span class="sxs-lookup"><span data-stu-id="994a2-227">Computes the average of a sequence of numeric values.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Average">
      <MemberSignature Language="C#" Value="public static decimal Average (this System.Collections.Generic.IEnumerable&lt;decimal&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Average(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Decimal&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Decimal})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average (source As IEnumerable(Of Decimal)) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Decimal Average(System::Collections::Generic::IEnumerable&lt;System::Decimal&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;decimal&gt; -&gt; decimal" Usage="System.Linq.Enumerable.Average source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Decimal&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="994a2-228">Sekwencja <see cref="T:System.Decimal" /> wartości, aby obliczyć średnią.</span><span class="sxs-lookup"><span data-stu-id="994a2-228">A sequence of <see cref="T:System.Decimal" /> values to calculate the average of.</span></span></param>
        <summary><span data-ttu-id="994a2-229">Oblicza średnią sekwencji <see cref="T:System.Decimal" /> wartości.</span><span class="sxs-lookup"><span data-stu-id="994a2-229">Computes the average of a sequence of <see cref="T:System.Decimal" /> values.</span></span></summary>
        <returns><span data-ttu-id="994a2-230">Średnia sekwencji wartości.</span><span class="sxs-lookup"><span data-stu-id="994a2-230">The average of the sequence of values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-231">W Visual Basic składni wyrażenia zapytania, `Aggregate Into Average()` klauzula tłumaczy na <xref:System.Linq.Enumerable.Average%2A>wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-231">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-232">Poniższy przykład kodu demonstruje, jak użyć <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29> do obliczenia średniej liczby sekwencji wartości.</span><span class="sxs-lookup"><span data-stu-id="994a2-232">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29> to calculate the average of a sequence of values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#8)]
 [!code-vb[System.Linq.Enumerable#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-233"><paramref name="source" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-233"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="994a2-234"><paramref name="source" />nie zawiera żadnych elementów.</span><span class="sxs-lookup"><span data-stu-id="994a2-234"><paramref name="source" /> contains no elements.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="994a2-235">Aggregate — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-235">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Average">
      <MemberSignature Language="C#" Value="public static double Average (this System.Collections.Generic.IEnumerable&lt;double&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Average(class System.Collections.Generic.IEnumerable`1&lt;float64&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Double})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average (source As IEnumerable(Of Double)) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static double Average(System::Collections::Generic::IEnumerable&lt;double&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;double&gt; -&gt; double" Usage="System.Linq.Enumerable.Average source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Double&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="994a2-236">Sekwencja <see cref="T:System.Double" /> wartości, aby obliczyć średnią.</span><span class="sxs-lookup"><span data-stu-id="994a2-236">A sequence of <see cref="T:System.Double" /> values to calculate the average of.</span></span></param>
        <summary><span data-ttu-id="994a2-237">Oblicza średnią sekwencji <see cref="T:System.Double" /> wartości.</span><span class="sxs-lookup"><span data-stu-id="994a2-237">Computes the average of a sequence of <see cref="T:System.Double" /> values.</span></span></summary>
        <returns><span data-ttu-id="994a2-238">Średnia sekwencji wartości.</span><span class="sxs-lookup"><span data-stu-id="994a2-238">The average of the sequence of values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-239">Jeśli suma elementów jest zbyt duża <xref:System.Double>, aby reprezentować jako, Metoda ta zwraca dodatnią lub ujemną nieskończoność.</span><span class="sxs-lookup"><span data-stu-id="994a2-239">If the sum of the elements is too large to represent as a <xref:System.Double>, this method returns positive or negative infinity.</span></span>  
  
 <span data-ttu-id="994a2-240">W Visual Basic składni wyrażenia zapytania, `Aggregate Into Average()` klauzula tłumaczy na <xref:System.Linq.Enumerable.Average%2A>wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-240">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-241">Poniższy przykład kodu demonstruje, jak użyć <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29> do obliczenia średniej.</span><span class="sxs-lookup"><span data-stu-id="994a2-241">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29> to calculate an average.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#8)]
 [!code-vb[System.Linq.Enumerable#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-242"><paramref name="source" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-242"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="994a2-243"><paramref name="source" />nie zawiera żadnych elementów.</span><span class="sxs-lookup"><span data-stu-id="994a2-243"><paramref name="source" /> contains no elements.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="994a2-244">Aggregate — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-244">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Average">
      <MemberSignature Language="C#" Value="public static double Average (this System.Collections.Generic.IEnumerable&lt;int&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Average(class System.Collections.Generic.IEnumerable`1&lt;int32&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average (source As IEnumerable(Of Integer)) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static double Average(System::Collections::Generic::IEnumerable&lt;int&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;int&gt; -&gt; double" Usage="System.Linq.Enumerable.Average source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Int32&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="994a2-245">Sekwencja <see cref="T:System.Int32" /> wartości, aby obliczyć średnią.</span><span class="sxs-lookup"><span data-stu-id="994a2-245">A sequence of <see cref="T:System.Int32" /> values to calculate the average of.</span></span></param>
        <summary><span data-ttu-id="994a2-246">Oblicza średnią sekwencji <see cref="T:System.Int32" /> wartości.</span><span class="sxs-lookup"><span data-stu-id="994a2-246">Computes the average of a sequence of <see cref="T:System.Int32" /> values.</span></span></summary>
        <returns><span data-ttu-id="994a2-247">Średnia sekwencji wartości.</span><span class="sxs-lookup"><span data-stu-id="994a2-247">The average of the sequence of values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-248">W Visual Basic składni wyrażenia zapytania, `Aggregate Into Average()` klauzula tłumaczy na <xref:System.Linq.Enumerable.Average%2A>wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-248">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-249">Poniższy przykład kodu demonstruje, jak użyć <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29> do obliczenia średniej.</span><span class="sxs-lookup"><span data-stu-id="994a2-249">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29> to calculate an average.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#8)]
 [!code-vb[System.Linq.Enumerable#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-250"><paramref name="source" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-250"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="994a2-251"><paramref name="source" />nie zawiera żadnych elementów.</span><span class="sxs-lookup"><span data-stu-id="994a2-251"><paramref name="source" /> contains no elements.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="994a2-252">Aggregate — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-252">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Average">
      <MemberSignature Language="C#" Value="public static double Average (this System.Collections.Generic.IEnumerable&lt;long&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Average(class System.Collections.Generic.IEnumerable`1&lt;int64&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int64})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average (source As IEnumerable(Of Long)) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static double Average(System::Collections::Generic::IEnumerable&lt;long&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;int64&gt; -&gt; double" Usage="System.Linq.Enumerable.Average source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Int64&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="994a2-253">Sekwencja <see cref="T:System.Int64" /> wartości, aby obliczyć średnią.</span><span class="sxs-lookup"><span data-stu-id="994a2-253">A sequence of <see cref="T:System.Int64" /> values to calculate the average of.</span></span></param>
        <summary><span data-ttu-id="994a2-254">Oblicza średnią sekwencji <see cref="T:System.Int64" /> wartości.</span><span class="sxs-lookup"><span data-stu-id="994a2-254">Computes the average of a sequence of <see cref="T:System.Int64" /> values.</span></span></summary>
        <returns><span data-ttu-id="994a2-255">Średnia sekwencji wartości.</span><span class="sxs-lookup"><span data-stu-id="994a2-255">The average of the sequence of values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-256">W Visual Basic składni wyrażenia zapytania, `Aggregate Into Average()` klauzula tłumaczy na <xref:System.Linq.Enumerable.Average%2A>wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-256">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-257">Poniższy przykład kodu demonstruje, jak użyć <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29> do obliczenia średniej.</span><span class="sxs-lookup"><span data-stu-id="994a2-257">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29> to calculate an average.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#8)]
 [!code-vb[System.Linq.Enumerable#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-258"><paramref name="source" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-258"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="994a2-259"><paramref name="source" />nie zawiera żadnych elementów.</span><span class="sxs-lookup"><span data-stu-id="994a2-259"><paramref name="source" /> contains no elements.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="994a2-260">Aggregate — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-260">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Average">
      <MemberSignature Language="C#" Value="public static Nullable&lt;decimal&gt; Average (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;decimal&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype System.Decimal&gt; Average(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average (source As IEnumerable(Of Nullable(Of Decimal))) As Nullable(Of Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;System::Decimal&gt; Average(System::Collections::Generic::IEnumerable&lt;Nullable&lt;System::Decimal&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;Nullable&lt;decimal&gt;&gt; -&gt; Nullable&lt;decimal&gt;" Usage="System.Linq.Enumerable.Average source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Decimal&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="994a2-261">Sekwencja wartości dopuszczająca wartość null <see cref="T:System.Decimal" /> , aby obliczyć średnią.</span><span class="sxs-lookup"><span data-stu-id="994a2-261">A sequence of nullable <see cref="T:System.Decimal" /> values to calculate the average of.</span></span></param>
        <summary><span data-ttu-id="994a2-262">Oblicza średnią sekwencji wartości dopuszczającej wartość <see cref="T:System.Decimal" /> null.</span><span class="sxs-lookup"><span data-stu-id="994a2-262">Computes the average of a sequence of nullable <see cref="T:System.Decimal" /> values.</span></span></summary>
        <returns><span data-ttu-id="994a2-263">Średnia sekwencji wartości lub <see langword="null" /> , jeśli sekwencja źródłowa jest pusta lub zawiera tylko wartości, które są. <see langword="null" /></span><span class="sxs-lookup"><span data-stu-id="994a2-263">The average of the sequence of values, or <see langword="null" /> if the source sequence is empty or contains only values that are <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-264">W Visual Basic składni wyrażenia zapytania, `Aggregate Into Average()` klauzula tłumaczy na <xref:System.Linq.Enumerable.Average%2A>wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-264">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-265">Poniższy przykład kodu demonstruje, jak użyć <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> do obliczenia średniej.</span><span class="sxs-lookup"><span data-stu-id="994a2-265">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> to calculate an average.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#12)]
 [!code-vb[System.Linq.Enumerable#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-266"><paramref name="source" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-266"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="994a2-267">Suma elementów w sekwencji jest większa niż <see cref="F:System.Decimal.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-267">The sum of the elements in the sequence is larger than <see cref="F:System.Decimal.MaxValue" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="994a2-268">Aggregate — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-268">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Average">
      <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Average (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;double&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Average(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;float64&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average (source As IEnumerable(Of Nullable(Of Double))) As Nullable(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;double&gt; Average(System::Collections::Generic::IEnumerable&lt;Nullable&lt;double&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;Nullable&lt;double&gt;&gt; -&gt; Nullable&lt;double&gt;" Usage="System.Linq.Enumerable.Average source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Double&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="994a2-269">Sekwencja wartości dopuszczająca wartość null <see cref="T:System.Double" /> , aby obliczyć średnią.</span><span class="sxs-lookup"><span data-stu-id="994a2-269">A sequence of nullable <see cref="T:System.Double" /> values to calculate the average of.</span></span></param>
        <summary><span data-ttu-id="994a2-270">Oblicza średnią sekwencji wartości dopuszczającej wartość <see cref="T:System.Double" /> null.</span><span class="sxs-lookup"><span data-stu-id="994a2-270">Computes the average of a sequence of nullable <see cref="T:System.Double" /> values.</span></span></summary>
        <returns><span data-ttu-id="994a2-271">Średnia sekwencji wartości lub <see langword="null" /> , jeśli sekwencja źródłowa jest pusta lub zawiera tylko wartości, które są. <see langword="null" /></span><span class="sxs-lookup"><span data-stu-id="994a2-271">The average of the sequence of values, or <see langword="null" /> if the source sequence is empty or contains only values that are <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-272">Jeśli suma elementów jest zbyt duża <xref:System.Double>, aby reprezentować jako, Metoda ta zwraca dodatnią lub ujemną nieskończoność.</span><span class="sxs-lookup"><span data-stu-id="994a2-272">If the sum of the elements is too large to represent as a <xref:System.Double>, this method returns positive or negative infinity.</span></span>  
  
 <span data-ttu-id="994a2-273">W Visual Basic składni wyrażenia zapytania, `Aggregate Into Average()` klauzula tłumaczy na <xref:System.Linq.Enumerable.Average%2A>wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-273">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-274">Poniższy przykład kodu demonstruje, jak użyć <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> do obliczenia średniej.</span><span class="sxs-lookup"><span data-stu-id="994a2-274">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> to calculate an average.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#12)]
 [!code-vb[System.Linq.Enumerable#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-275"><paramref name="source" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-275"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="994a2-276">Aggregate — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-276">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Average">
      <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Average (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;int&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Average(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;int32&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average (source As IEnumerable(Of Nullable(Of Integer))) As Nullable(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;double&gt; Average(System::Collections::Generic::IEnumerable&lt;Nullable&lt;int&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;Nullable&lt;int&gt;&gt; -&gt; Nullable&lt;double&gt;" Usage="System.Linq.Enumerable.Average source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Int32&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="994a2-277">Sekwencja wartości dopuszczająca wartość null <see cref="T:System.Int32" /> , aby obliczyć średnią.</span><span class="sxs-lookup"><span data-stu-id="994a2-277">A sequence of nullable <see cref="T:System.Int32" /> values to calculate the average of.</span></span></param>
        <summary><span data-ttu-id="994a2-278">Oblicza średnią sekwencji wartości dopuszczającej wartość <see cref="T:System.Int32" /> null.</span><span class="sxs-lookup"><span data-stu-id="994a2-278">Computes the average of a sequence of nullable <see cref="T:System.Int32" /> values.</span></span></summary>
        <returns><span data-ttu-id="994a2-279">Średnia sekwencji wartości lub <see langword="null" /> , jeśli sekwencja źródłowa jest pusta lub zawiera tylko wartości, które są. <see langword="null" /></span><span class="sxs-lookup"><span data-stu-id="994a2-279">The average of the sequence of values, or <see langword="null" /> if the source sequence is empty or contains only values that are <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-280">W Visual Basic składni wyrażenia zapytania, `Aggregate Into Average()` klauzula tłumaczy na <xref:System.Linq.Enumerable.Average%2A>wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-280">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-281">Poniższy przykład kodu demonstruje, jak użyć <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> do obliczenia średniej.</span><span class="sxs-lookup"><span data-stu-id="994a2-281">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> to calculate an average.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#12)]
 [!code-vb[System.Linq.Enumerable#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-282"><paramref name="source" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-282"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="994a2-283">Suma elementów w sekwencji jest większa niż <see cref="F:System.Int64.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-283">The sum of the elements in the sequence is larger than <see cref="F:System.Int64.MaxValue" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="994a2-284">Aggregate — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-284">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Average">
      <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Average (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;long&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Average(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;int64&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average (source As IEnumerable(Of Nullable(Of Long))) As Nullable(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;double&gt; Average(System::Collections::Generic::IEnumerable&lt;Nullable&lt;long&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;Nullable&lt;int64&gt;&gt; -&gt; Nullable&lt;double&gt;" Usage="System.Linq.Enumerable.Average source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Int64&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="994a2-285">Sekwencja wartości dopuszczająca wartość null <see cref="T:System.Int64" /> , aby obliczyć średnią.</span><span class="sxs-lookup"><span data-stu-id="994a2-285">A sequence of nullable <see cref="T:System.Int64" /> values to calculate the average of.</span></span></param>
        <summary><span data-ttu-id="994a2-286">Oblicza średnią sekwencji wartości dopuszczającej wartość <see cref="T:System.Int64" /> null.</span><span class="sxs-lookup"><span data-stu-id="994a2-286">Computes the average of a sequence of nullable <see cref="T:System.Int64" /> values.</span></span></summary>
        <returns><span data-ttu-id="994a2-287">Średnia sekwencji wartości lub <see langword="null" /> , jeśli sekwencja źródłowa jest pusta lub zawiera tylko wartości, które są. <see langword="null" /></span><span class="sxs-lookup"><span data-stu-id="994a2-287">The average of the sequence of values, or <see langword="null" /> if the source sequence is empty or contains only values that are <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-288">W Visual Basic składni wyrażenia zapytania, `Aggregate Into Average()` klauzula tłumaczy na <xref:System.Linq.Enumerable.Average%2A>wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-288">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-289">Poniższy przykład kodu demonstruje, jak użyć <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> do obliczenia średniej.</span><span class="sxs-lookup"><span data-stu-id="994a2-289">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> to calculate an average.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#12)]
 [!code-vb[System.Linq.Enumerable#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-290"><paramref name="source" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-290"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="994a2-291">Suma elementów w sekwencji jest większa niż <see cref="F:System.Int64.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-291">The sum of the elements in the sequence is larger than <see cref="F:System.Int64.MaxValue" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="994a2-292">Aggregate — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-292">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Average">
      <MemberSignature Language="C#" Value="public static Nullable&lt;float&gt; Average (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;float&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float32&gt; Average(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;float32&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average (source As IEnumerable(Of Nullable(Of Single))) As Nullable(Of Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;float&gt; Average(System::Collections::Generic::IEnumerable&lt;Nullable&lt;float&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;Nullable&lt;single&gt;&gt; -&gt; Nullable&lt;single&gt;" Usage="System.Linq.Enumerable.Average source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Single&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="994a2-293">Sekwencja wartości dopuszczająca wartość null <see cref="T:System.Single" /> , aby obliczyć średnią.</span><span class="sxs-lookup"><span data-stu-id="994a2-293">A sequence of nullable <see cref="T:System.Single" /> values to calculate the average of.</span></span></param>
        <summary><span data-ttu-id="994a2-294">Oblicza średnią sekwencji wartości dopuszczającej wartość <see cref="T:System.Single" /> null.</span><span class="sxs-lookup"><span data-stu-id="994a2-294">Computes the average of a sequence of nullable <see cref="T:System.Single" /> values.</span></span></summary>
        <returns><span data-ttu-id="994a2-295">Średnia sekwencji wartości lub <see langword="null" /> , jeśli sekwencja źródłowa jest pusta lub zawiera tylko wartości, które są. <see langword="null" /></span><span class="sxs-lookup"><span data-stu-id="994a2-295">The average of the sequence of values, or <see langword="null" /> if the source sequence is empty or contains only values that are <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-296">W Visual Basic składni wyrażenia zapytania, `Aggregate Into Average()` klauzula tłumaczy na <xref:System.Linq.Enumerable.Average%2A>wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-296">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-297">Poniższy przykład kodu demonstruje, jak użyć <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> do obliczenia średniej.</span><span class="sxs-lookup"><span data-stu-id="994a2-297">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> to calculate an average.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#12)]
 [!code-vb[System.Linq.Enumerable#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-298"><paramref name="source" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-298"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="994a2-299">Aggregate — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-299">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Average">
      <MemberSignature Language="C#" Value="public static float Average (this System.Collections.Generic.IEnumerable&lt;float&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Average(class System.Collections.Generic.IEnumerable`1&lt;float32&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Single})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average (source As IEnumerable(Of Single)) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static float Average(System::Collections::Generic::IEnumerable&lt;float&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;single&gt; -&gt; single" Usage="System.Linq.Enumerable.Average source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Single&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="994a2-300">Sekwencja <see cref="T:System.Single" /> wartości, aby obliczyć średnią.</span><span class="sxs-lookup"><span data-stu-id="994a2-300">A sequence of <see cref="T:System.Single" /> values to calculate the average of.</span></span></param>
        <summary><span data-ttu-id="994a2-301">Oblicza średnią sekwencji <see cref="T:System.Single" /> wartości.</span><span class="sxs-lookup"><span data-stu-id="994a2-301">Computes the average of a sequence of <see cref="T:System.Single" /> values.</span></span></summary>
        <returns><span data-ttu-id="994a2-302">Średnia sekwencji wartości.</span><span class="sxs-lookup"><span data-stu-id="994a2-302">The average of the sequence of values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-303">W Visual Basic składni wyrażenia zapytania, `Aggregate Into Average()` klauzula tłumaczy na <xref:System.Linq.Enumerable.Average%2A>wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-303">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-304">Poniższy przykład kodu demonstruje, jak użyć <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29> do obliczenia średniej.</span><span class="sxs-lookup"><span data-stu-id="994a2-304">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29> to calculate an average.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#8)]
 [!code-vb[System.Linq.Enumerable#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-305"><paramref name="source" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-305"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="994a2-306"><paramref name="source" />nie zawiera żadnych elementów.</span><span class="sxs-lookup"><span data-stu-id="994a2-306"><paramref name="source" /> contains no elements.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="994a2-307">Aggregate — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-307">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Average&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static decimal Average&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,decimal&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Average&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Decimal&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Decimal)) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Decimal Average(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, System::Decimal&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;'Source&gt; * Func&lt;'Source, decimal&gt; -&gt; decimal" Usage="System.Linq.Enumerable.Average (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Decimal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-308">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-308">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-309">Sekwencja wartości, które są używane do obliczania średniej.</span><span class="sxs-lookup"><span data-stu-id="994a2-309">A sequence of values that are used to calculate an average.</span></span></param>
        <param name="selector"><span data-ttu-id="994a2-310">Funkcja transformacji do zastosowania do każdego elementu.</span><span class="sxs-lookup"><span data-stu-id="994a2-310">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="994a2-311">Oblicza średnią sekwencji <see cref="T:System.Decimal" /> wartości, które są uzyskiwane przez wywoływanie funkcji przekształcania dla każdego elementu sekwencji wejściowej.</span><span class="sxs-lookup"><span data-stu-id="994a2-311">Computes the average of a sequence of <see cref="T:System.Decimal" /> values that are obtained by invoking a transform function on each element of the input sequence.</span></span></summary>
        <returns><span data-ttu-id="994a2-312">Średnia sekwencji wartości.</span><span class="sxs-lookup"><span data-stu-id="994a2-312">The average of the sequence of values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-313">W Visual Basic składni wyrażenia zapytania, `Aggregate Into Average()` klauzula tłumaczy na <xref:System.Linq.Enumerable.Average%2A>wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-313">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-314">Poniższy przykład kodu demonstruje, jak użyć <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29> do obliczenia średniej.</span><span class="sxs-lookup"><span data-stu-id="994a2-314">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29> to calculate an average.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#16)]
 [!code-vb[System.Linq.Enumerable#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-315"><paramref name="source" />lub <paramref name="selector" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-315"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="994a2-316"><paramref name="source" />nie zawiera żadnych elementów.</span><span class="sxs-lookup"><span data-stu-id="994a2-316"><paramref name="source" /> contains no elements.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="994a2-317">Suma elementów w sekwencji jest większa niż <see cref="F:System.Decimal.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-317">The sum of the elements in the sequence is larger than <see cref="F:System.Decimal.MaxValue" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="994a2-318">Aggregate — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-318">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Average&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static double Average&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,double&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Average&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, float64&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Double)) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static double Average(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, double&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;'Source&gt; * Func&lt;'Source, double&gt; -&gt; double" Usage="System.Linq.Enumerable.Average (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Double&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-319">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-319">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-320">Sekwencja wartości do obliczenia średniej.</span><span class="sxs-lookup"><span data-stu-id="994a2-320">A sequence of values to calculate the average of.</span></span></param>
        <param name="selector"><span data-ttu-id="994a2-321">Funkcja transformacji do zastosowania do każdego elementu.</span><span class="sxs-lookup"><span data-stu-id="994a2-321">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="994a2-322">Oblicza średnią sekwencji <see cref="T:System.Double" /> wartości, które są uzyskiwane przez wywoływanie funkcji przekształcania dla każdego elementu sekwencji wejściowej.</span><span class="sxs-lookup"><span data-stu-id="994a2-322">Computes the average of a sequence of <see cref="T:System.Double" /> values that are obtained by invoking a transform function on each element of the input sequence.</span></span></summary>
        <returns><span data-ttu-id="994a2-323">Średnia sekwencji wartości.</span><span class="sxs-lookup"><span data-stu-id="994a2-323">The average of the sequence of values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-324">W Visual Basic składni wyrażenia zapytania, `Aggregate Into Average()` klauzula tłumaczy na <xref:System.Linq.Enumerable.Average%2A>wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-324">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-325">Poniższy przykład kodu demonstruje, jak użyć <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29> do obliczenia średniej.</span><span class="sxs-lookup"><span data-stu-id="994a2-325">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29> to calculate an average.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#16)]
 [!code-vb[System.Linq.Enumerable#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-326"><paramref name="source" />lub <paramref name="selector" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-326"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="994a2-327"><paramref name="source" />nie zawiera żadnych elementów.</span><span class="sxs-lookup"><span data-stu-id="994a2-327"><paramref name="source" /> contains no elements.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="994a2-328">Aggregate — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-328">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Average&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static double Average&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,int&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Average&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, int32&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Integer)) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static double Average(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, int&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;'Source&gt; * Func&lt;'Source, int&gt; -&gt; double" Usage="System.Linq.Enumerable.Average (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Int32&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-329">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-329">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-330">Sekwencja wartości do obliczenia średniej.</span><span class="sxs-lookup"><span data-stu-id="994a2-330">A sequence of values to calculate the average of.</span></span></param>
        <param name="selector"><span data-ttu-id="994a2-331">Funkcja transformacji do zastosowania do każdego elementu.</span><span class="sxs-lookup"><span data-stu-id="994a2-331">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="994a2-332">Oblicza średnią sekwencji <see cref="T:System.Int32" /> wartości, które są uzyskiwane przez wywoływanie funkcji przekształcania dla każdego elementu sekwencji wejściowej.</span><span class="sxs-lookup"><span data-stu-id="994a2-332">Computes the average of a sequence of <see cref="T:System.Int32" /> values that are obtained by invoking a transform function on each element of the input sequence.</span></span></summary>
        <returns><span data-ttu-id="994a2-333">Średnia sekwencji wartości.</span><span class="sxs-lookup"><span data-stu-id="994a2-333">The average of the sequence of values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-334">W Visual Basic składni wyrażenia zapytania, `Aggregate Into Average()` klauzula tłumaczy na <xref:System.Linq.Enumerable.Average%2A>wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-334">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-335">Poniższy przykład kodu demonstruje, jak użyć <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> do obliczenia średniej.</span><span class="sxs-lookup"><span data-stu-id="994a2-335">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to calculate an average.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#18)]
 [!code-vb[System.Linq.Enumerable#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-336"><paramref name="source" />lub <paramref name="selector" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-336"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="994a2-337"><paramref name="source" />nie zawiera żadnych elementów.</span><span class="sxs-lookup"><span data-stu-id="994a2-337"><paramref name="source" /> contains no elements.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="994a2-338">Suma elementów w sekwencji jest większa niż <see cref="F:System.Int64.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-338">The sum of the elements in the sequence is larger than <see cref="F:System.Int64.MaxValue" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="994a2-339">Aggregate — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-339">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Average&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static double Average&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,long&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Average&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, int64&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Long)) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static double Average(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, long&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;'Source&gt; * Func&lt;'Source, int64&gt; -&gt; double" Usage="System.Linq.Enumerable.Average (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Int64&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-340">Typ elementów źródła.</span><span class="sxs-lookup"><span data-stu-id="994a2-340">The type of the elements of source.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-341">Sekwencja wartości do obliczenia średniej.</span><span class="sxs-lookup"><span data-stu-id="994a2-341">A sequence of values to calculate the average of.</span></span></param>
        <param name="selector"><span data-ttu-id="994a2-342">Funkcja transformacji do zastosowania do każdego elementu.</span><span class="sxs-lookup"><span data-stu-id="994a2-342">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="994a2-343">Oblicza średnią sekwencji <see cref="T:System.Int64" /> wartości, które są uzyskiwane przez wywoływanie funkcji przekształcania dla każdego elementu sekwencji wejściowej.</span><span class="sxs-lookup"><span data-stu-id="994a2-343">Computes the average of a sequence of <see cref="T:System.Int64" /> values that are obtained by invoking a transform function on each element of the input sequence.</span></span></summary>
        <returns><span data-ttu-id="994a2-344">Średnia sekwencji wartości.</span><span class="sxs-lookup"><span data-stu-id="994a2-344">The average of the sequence of values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-345">W Visual Basic składni wyrażenia zapytania, `Aggregate Into Average()` klauzula tłumaczy na <xref:System.Linq.Enumerable.Average%2A>wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-345">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-346">Poniższy przykład kodu demonstruje, jak użyć <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29> do obliczenia średniej.</span><span class="sxs-lookup"><span data-stu-id="994a2-346">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29> to calculate an average.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#16)]
 [!code-vb[System.Linq.Enumerable#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-347"><paramref name="source" />lub <paramref name="selector" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-347"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="994a2-348"><paramref name="source" />nie zawiera żadnych elementów.</span><span class="sxs-lookup"><span data-stu-id="994a2-348"><paramref name="source" /> contains no elements.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="994a2-349">Suma elementów w sekwencji jest większa niż <see cref="F:System.Int64.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-349">The sum of the elements in the sequence is larger than <see cref="F:System.Int64.MaxValue" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="994a2-350">Aggregate — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-350">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Average&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;decimal&gt; Average&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;decimal&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype System.Decimal&gt; Average&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Decimal))) As Nullable(Of Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;System::Decimal&gt; Average(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;System::Decimal&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;decimal&gt;&gt; -&gt; Nullable&lt;decimal&gt;" Usage="System.Linq.Enumerable.Average (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Decimal&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-351">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-351">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-352">Sekwencja wartości do obliczenia średniej.</span><span class="sxs-lookup"><span data-stu-id="994a2-352">A sequence of values to calculate the average of.</span></span></param>
        <param name="selector"><span data-ttu-id="994a2-353">Funkcja transformacji do zastosowania do każdego elementu.</span><span class="sxs-lookup"><span data-stu-id="994a2-353">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="994a2-354">Oblicza średnią sekwencję wartości dopuszczających <see cref="T:System.Decimal" /> wartość null, które są uzyskiwane przez wywołanie funkcji przekształcania dla każdego elementu sekwencji wejściowej.</span><span class="sxs-lookup"><span data-stu-id="994a2-354">Computes the average of a sequence of nullable <see cref="T:System.Decimal" /> values that are obtained by invoking a transform function on each element of the input sequence.</span></span></summary>
        <returns><span data-ttu-id="994a2-355">Średnia sekwencji wartości lub <see langword="null" /> , jeśli sekwencja źródłowa jest pusta lub zawiera tylko wartości, które są. <see langword="null" /></span><span class="sxs-lookup"><span data-stu-id="994a2-355">The average of the sequence of values, or <see langword="null" /> if the source sequence is empty or contains only values that are <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-356">W Visual Basic składni wyrażenia zapytania, `Aggregate Into Average()` klauzula tłumaczy na <xref:System.Linq.Enumerable.Average%2A>wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-356">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-357">Poniższy przykład kodu demonstruje, jak użyć <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29> do obliczenia średniej.</span><span class="sxs-lookup"><span data-stu-id="994a2-357">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29> to calculate an average.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#16)]
 [!code-vb[System.Linq.Enumerable#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-358"><paramref name="source" />lub <paramref name="selector" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-358"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="994a2-359">Suma elementów w sekwencji jest większa niż <see cref="F:System.Decimal.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-359">The sum of the elements in the sequence is larger than <see cref="F:System.Decimal.MaxValue" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="994a2-360">Aggregate — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-360">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Average&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Average&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;double&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Average&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;float64&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Double))) As Nullable(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;double&gt; Average(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;double&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;double&gt;&gt; -&gt; Nullable&lt;double&gt;" Usage="System.Linq.Enumerable.Average (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Double&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-361">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-361">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-362">Sekwencja wartości do obliczenia średniej.</span><span class="sxs-lookup"><span data-stu-id="994a2-362">A sequence of values to calculate the average of.</span></span></param>
        <param name="selector"><span data-ttu-id="994a2-363">Funkcja transformacji do zastosowania do każdego elementu.</span><span class="sxs-lookup"><span data-stu-id="994a2-363">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="994a2-364">Oblicza średnią sekwencję wartości dopuszczających <see cref="T:System.Double" /> wartość null, które są uzyskiwane przez wywołanie funkcji przekształcania dla każdego elementu sekwencji wejściowej.</span><span class="sxs-lookup"><span data-stu-id="994a2-364">Computes the average of a sequence of nullable <see cref="T:System.Double" /> values that are obtained by invoking a transform function on each element of the input sequence.</span></span></summary>
        <returns><span data-ttu-id="994a2-365">Średnia sekwencji wartości lub <see langword="null" /> , jeśli sekwencja źródłowa jest pusta lub zawiera tylko wartości, które są. <see langword="null" /></span><span class="sxs-lookup"><span data-stu-id="994a2-365">The average of the sequence of values, or <see langword="null" /> if the source sequence is empty or contains only values that are <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-366">W Visual Basic składni wyrażenia zapytania, `Aggregate Into Average()` klauzula tłumaczy na <xref:System.Linq.Enumerable.Average%2A>wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-366">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-367">Poniższy przykład kodu demonstruje, jak użyć <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29> do obliczenia średniej.</span><span class="sxs-lookup"><span data-stu-id="994a2-367">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29> to calculate an average.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#16)]
 [!code-vb[System.Linq.Enumerable#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-368"><paramref name="source" />lub <paramref name="selector" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-368"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="994a2-369">Aggregate — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-369">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Average&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Average&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;int&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Average&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;int32&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Integer))) As Nullable(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;double&gt; Average(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;int&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;int&gt;&gt; -&gt; Nullable&lt;double&gt;" Usage="System.Linq.Enumerable.Average (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Int32&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-370">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-370">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-371">Sekwencja wartości do obliczenia średniej.</span><span class="sxs-lookup"><span data-stu-id="994a2-371">A sequence of values to calculate the average of.</span></span></param>
        <param name="selector"><span data-ttu-id="994a2-372">Funkcja transformacji do zastosowania do każdego elementu.</span><span class="sxs-lookup"><span data-stu-id="994a2-372">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="994a2-373">Oblicza średnią sekwencję wartości dopuszczających <see cref="T:System.Int32" /> wartość null, które są uzyskiwane przez wywołanie funkcji przekształcania dla każdego elementu sekwencji wejściowej.</span><span class="sxs-lookup"><span data-stu-id="994a2-373">Computes the average of a sequence of nullable <see cref="T:System.Int32" /> values that are obtained by invoking a transform function on each element of the input sequence.</span></span></summary>
        <returns><span data-ttu-id="994a2-374">Średnia sekwencji wartości lub <see langword="null" /> , jeśli sekwencja źródłowa jest pusta lub zawiera tylko wartości, które są. <see langword="null" /></span><span class="sxs-lookup"><span data-stu-id="994a2-374">The average of the sequence of values, or <see langword="null" /> if the source sequence is empty or contains only values that are <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-375">W Visual Basic składni wyrażenia zapytania, `Aggregate Into Average()` klauzula tłumaczy na <xref:System.Linq.Enumerable.Average%2A>wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-375">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-376">Poniższy przykład kodu demonstruje, jak użyć <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> do obliczenia średniej.</span><span class="sxs-lookup"><span data-stu-id="994a2-376">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to calculate an average.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#18)]
 [!code-vb[System.Linq.Enumerable#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-377"><paramref name="source" />lub <paramref name="selector" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-377"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="994a2-378">Suma elementów w sekwencji jest większa niż <see cref="F:System.Int64.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-378">The sum of the elements in the sequence is larger than <see cref="F:System.Int64.MaxValue" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="994a2-379">Aggregate — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-379">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Average&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Average&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;long&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Average&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;int64&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Long))) As Nullable(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;double&gt; Average(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;long&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;int64&gt;&gt; -&gt; Nullable&lt;double&gt;" Usage="System.Linq.Enumerable.Average (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Int64&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-380">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-380">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-381">Sekwencja wartości do obliczenia średniej.</span><span class="sxs-lookup"><span data-stu-id="994a2-381">A sequence of values to calculate the average of.</span></span></param>
        <param name="selector"><span data-ttu-id="994a2-382">Funkcja transformacji do zastosowania do każdego elementu.</span><span class="sxs-lookup"><span data-stu-id="994a2-382">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="994a2-383">Oblicza średnią sekwencję wartości dopuszczających <see cref="T:System.Int64" /> wartość null, które są uzyskiwane przez wywołanie funkcji przekształcania dla każdego elementu sekwencji wejściowej.</span><span class="sxs-lookup"><span data-stu-id="994a2-383">Computes the average of a sequence of nullable <see cref="T:System.Int64" /> values that are obtained by invoking a transform function on each element of the input sequence.</span></span></summary>
        <returns><span data-ttu-id="994a2-384">Średnia sekwencji wartości lub <see langword="null" /> , jeśli sekwencja źródłowa jest pusta lub zawiera tylko wartości, które są. <see langword="null" /></span><span class="sxs-lookup"><span data-stu-id="994a2-384">The average of the sequence of values, or <see langword="null" /> if the source sequence is empty or contains only values that are <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-385">W Visual Basic składni wyrażenia zapytania, `Aggregate Into Average()` klauzula tłumaczy na <xref:System.Linq.Enumerable.Average%2A>wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-385">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-386">Poniższy przykład kodu demonstruje, jak użyć <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29> do obliczenia średniej.</span><span class="sxs-lookup"><span data-stu-id="994a2-386">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29> to calculate an average.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#16)]
 [!code-vb[System.Linq.Enumerable#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#16)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="994a2-387">Aggregate — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-387">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Average&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;float&gt; Average&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;float&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float32&gt; Average&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;float32&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Single))) As Nullable(Of Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;float&gt; Average(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;float&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;single&gt;&gt; -&gt; Nullable&lt;single&gt;" Usage="System.Linq.Enumerable.Average (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Single&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-388">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-388">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-389">Sekwencja wartości do obliczenia średniej.</span><span class="sxs-lookup"><span data-stu-id="994a2-389">A sequence of values to calculate the average of.</span></span></param>
        <param name="selector"><span data-ttu-id="994a2-390">Funkcja transformacji do zastosowania do każdego elementu.</span><span class="sxs-lookup"><span data-stu-id="994a2-390">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="994a2-391">Oblicza średnią sekwencję wartości dopuszczających <see cref="T:System.Single" /> wartość null, które są uzyskiwane przez wywołanie funkcji przekształcania dla każdego elementu sekwencji wejściowej.</span><span class="sxs-lookup"><span data-stu-id="994a2-391">Computes the average of a sequence of nullable <see cref="T:System.Single" /> values that are obtained by invoking a transform function on each element of the input sequence.</span></span></summary>
        <returns><span data-ttu-id="994a2-392">Średnia sekwencji wartości lub <see langword="null" /> , jeśli sekwencja źródłowa jest pusta lub zawiera tylko wartości, które są. <see langword="null" /></span><span class="sxs-lookup"><span data-stu-id="994a2-392">The average of the sequence of values, or <see langword="null" /> if the source sequence is empty or contains only values that are <see langword="null" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-393">W Visual Basic składni wyrażenia zapytania, `Aggregate Into Average()` klauzula tłumaczy na <xref:System.Linq.Enumerable.Average%2A>wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-393">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-394">Poniższy przykład kodu demonstruje, jak użyć <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> do obliczenia średniej.</span><span class="sxs-lookup"><span data-stu-id="994a2-394">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to calculate an average.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#18)]
 [!code-vb[System.Linq.Enumerable#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-395"><paramref name="source" />lub <paramref name="selector" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-395"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="994a2-396">Aggregate — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-396">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Average&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static float Average&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,float&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Average&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, float32&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Single)) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static float Average(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, float&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;'Source&gt; * Func&lt;'Source, single&gt; -&gt; single" Usage="System.Linq.Enumerable.Average (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Single&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-397">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-397">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-398">Sekwencja wartości do obliczenia średniej.</span><span class="sxs-lookup"><span data-stu-id="994a2-398">A sequence of values to calculate the average of.</span></span></param>
        <param name="selector"><span data-ttu-id="994a2-399">Funkcja transformacji do zastosowania do każdego elementu.</span><span class="sxs-lookup"><span data-stu-id="994a2-399">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="994a2-400">Oblicza średnią sekwencji <see cref="T:System.Single" /> wartości, które są uzyskiwane przez wywoływanie funkcji przekształcania dla każdego elementu sekwencji wejściowej.</span><span class="sxs-lookup"><span data-stu-id="994a2-400">Computes the average of a sequence of <see cref="T:System.Single" /> values that are obtained by invoking a transform function on each element of the input sequence.</span></span></summary>
        <returns><span data-ttu-id="994a2-401">Średnia sekwencji wartości.</span><span class="sxs-lookup"><span data-stu-id="994a2-401">The average of the sequence of values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-402">W Visual Basic składni wyrażenia zapytania, `Aggregate Into Average()` klauzula tłumaczy na <xref:System.Linq.Enumerable.Average%2A>wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-402">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-403">Poniższy przykład kodu demonstruje, jak użyć <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> do obliczenia średniej.</span><span class="sxs-lookup"><span data-stu-id="994a2-403">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to calculate an average.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#18)]
 [!code-vb[System.Linq.Enumerable#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-404"><paramref name="source" />lub <paramref name="selector" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-404"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="994a2-405"><paramref name="source" />nie zawiera żadnych elementów.</span><span class="sxs-lookup"><span data-stu-id="994a2-405"><paramref name="source" /> contains no elements.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="994a2-406">Aggregate — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-406">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Cast&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; Cast&lt;TResult&gt; (this System.Collections.IEnumerable source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; Cast&lt;TResult&gt;(class System.Collections.IEnumerable source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Cast(Of TResult) (source As IEnumerable) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ Cast(System::Collections::IEnumerable ^ source);" />
      <MemberSignature Language="F#" Value="static member Cast : System.Collections.IEnumerable -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.Cast source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.IEnumerable" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="994a2-407">Typ, <paramref name="source" /> do którego mają być rzutowane elementy.</span><span class="sxs-lookup"><span data-stu-id="994a2-407">The type to cast the elements of <paramref name="source" /> to.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-408">Zawiera elementy <paramref name="TResult" />, które mają być rzutowane na typ. <see cref="T:System.Collections.IEnumerable" /></span><span class="sxs-lookup"><span data-stu-id="994a2-408">The <see cref="T:System.Collections.IEnumerable" /> that contains the elements to be cast to type <paramref name="TResult" />.</span></span></param>
        <summary><span data-ttu-id="994a2-409">Rzutuje elementy <see cref="T:System.Collections.IEnumerable" /> elementu do określonego typu.</span><span class="sxs-lookup"><span data-stu-id="994a2-409">Casts the elements of an <see cref="T:System.Collections.IEnumerable" /> to the specified type.</span></span></summary>
        <returns><span data-ttu-id="994a2-410"><see cref="T:System.Collections.Generic.IEnumerable`1" /> Zawiera każdy element rzutowania sekwencji źródłowej na określony typ.</span><span class="sxs-lookup"><span data-stu-id="994a2-410">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains each element of the source sequence cast to the specified type.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-411">Ta metoda jest implementowana za pomocą odroczonego wykonania.</span><span class="sxs-lookup"><span data-stu-id="994a2-411">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="994a2-412">Bezpośrednio zwracana wartość jest obiektem, który przechowuje wszystkie informacje wymagane do wykonania akcji.</span><span class="sxs-lookup"><span data-stu-id="994a2-412">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="994a2-413">Zapytanie reprezentowane przez tę metodę nie jest wykonywane `GetEnumerator` do momentu wyliczenia obiektu przez wywołanie jego metody bezpośrednio lub przy użyciu `foreach` w wizualizacji C# lub `For Each` w Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="994a2-413">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="994a2-414"><xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29> Metoda umożliwia wywoływanie standardowych operatorów zapytań na kolekcjach nieogólnych przez dostarczenie niezbędnych informacji o typie.</span><span class="sxs-lookup"><span data-stu-id="994a2-414">The <xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29> method enables the standard query operators to be invoked on non-generic collections by supplying the necessary type information.</span></span> <span data-ttu-id="994a2-415">Na przykład, <xref:System.Collections.ArrayList> nie implementuje <xref:System.Collections.Generic.IEnumerable%601> <xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29> ,<xref:System.Collections.ArrayList> ale przez wywołanie obiektu, standardowe operatory zapytań mogą następnie służyć do wykonywania zapytań względem sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-415">For example, <xref:System.Collections.ArrayList> does not implement <xref:System.Collections.Generic.IEnumerable%601>, but by calling <xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29> on the <xref:System.Collections.ArrayList> object, the standard query operators can then be used to query the sequence.</span></span>  
  
 <span data-ttu-id="994a2-416">Jeśli elementu nie można przekonwertować na typ `TResult`, Metoda ta <xref:System.InvalidCastException>zgłasza.</span><span class="sxs-lookup"><span data-stu-id="994a2-416">If an element cannot be converted to type `TResult`, this method throws a <xref:System.InvalidCastException>.</span></span>

 <span data-ttu-id="994a2-417">Sekwencja źródłowa tej metody <xref:System.Collections.IEnumerable>to, co oznacza, że elementy mają `object`typ statyczny w czasie kompilacji.</span><span class="sxs-lookup"><span data-stu-id="994a2-417">The source sequence for this method is <xref:System.Collections.IEnumerable>, which means the elements have the compile-time static type of `object`.</span></span> <span data-ttu-id="994a2-418">Jedyne konwersje typów, które są wykonywane przez tę metodę, to konwersje odwołań i konwersje rozpakowywanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-418">The only type conversions that are performed by this method are reference conversions and unboxing conversions.</span></span> <span data-ttu-id="994a2-419">Typ środowiska uruchomieniowego elementów w kolekcji musi być zgodny z typem docelowym lub w przypadku typów wartości typ środowiska uruchomieniowego musi być wynikiem konwersji z opakowania typu docelowego.</span><span class="sxs-lookup"><span data-stu-id="994a2-419">The runtime type of the elements in the collection must match the target type, or in the case of value types, the runtime type of elements must be the result of a boxing conversion of the target type.</span></span> <span data-ttu-id="994a2-420">Inne typy konwersji, takie jak te między różnymi typami liczbowymi, są niedozwolone.</span><span class="sxs-lookup"><span data-stu-id="994a2-420">Other conversion types, such as those between different numeric types, are not allowed.</span></span> 
 
 <span data-ttu-id="994a2-421">Aby uzyskać tylko te elementy, które można przekonwertować na typ `TResult`, <xref:System.Linq.Enumerable.OfType%2A> Użyj metody zamiast <xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29>.</span><span class="sxs-lookup"><span data-stu-id="994a2-421">To obtain only those elements that can be converted to type `TResult`, use the <xref:System.Linq.Enumerable.OfType%2A> method instead of <xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29>.</span></span>  
  
 <span data-ttu-id="994a2-422">W wyrażeniu zapytania jawnie wpisana Zmienna iteracji tłumaczy na wywołanie <xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29>.</span><span class="sxs-lookup"><span data-stu-id="994a2-422">In a query expression, an explicitly typed iteration variable translates to an invocation of <xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29>.</span></span> <span data-ttu-id="994a2-423">Ten przykład pokazuje składnię dla jawnie wpisanej zmiennej zakresu.</span><span class="sxs-lookup"><span data-stu-id="994a2-423">This example shows the syntax for an explicitly typed range variable.</span></span>  
  
```csharp  
from int i in objects  
```  
  
```vb  
From i As Integer In objects  
```  

<span data-ttu-id="994a2-424">`select` Użyj klauzuli zapytania, aby wykonać inne typy konwersji, takie jak niejawne konwersje numeryczne.</span><span class="sxs-lookup"><span data-stu-id="994a2-424">Use the `select` clause of a query to perform other conversion types, like the implicit numeric conversions.</span></span> <span data-ttu-id="994a2-425">W poniższym przykładzie zastosowano `Cast` metodę `select` i instrukcję, aby skonwertować sekwencję liczb całkowitych opakowanych na sekwencję podwajania.</span><span class="sxs-lookup"><span data-stu-id="994a2-425">The following example uses both the `Cast` method and a `select` statement to convert a sequence of boxed integers to a sequence of doubles.</span></span>

```csharp
IEnumerable sequence = Enumerable.Range(0, 10);
var doubles = from int item in sequence
                select (double)item;
``` 

```vb
Dim sequence As IEnumerable = Enumerable.Range(0, 10)
Dim doubles = From item As Integer In sequence
                Select CType(item, Double)
```

## Examples  
 <span data-ttu-id="994a2-426">Poniższy przykład kodu ilustruje sposób użycia <xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29> programu w celu umożliwienia używania standardowych operatorów zapytań <xref:System.Collections.ArrayList>w.</span><span class="sxs-lookup"><span data-stu-id="994a2-426">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29> to enable the use of the standard query operators on an <xref:System.Collections.ArrayList>.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#19](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#19)]
 [!code-vb[System.Linq.Enumerable#19](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-427"><paramref name="source" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-427"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidCastException"><span data-ttu-id="994a2-428">Elementu w sekwencji nie można rzutować na typ <paramref name="TResult" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-428">An element in the sequence cannot be cast to type <paramref name="TResult" />.</span></span></exception>
        <related type="Article" href="~/docs/csharp/language-reference/keywords/from-clause.md"><span data-ttu-id="994a2-429">Klauzula From (odwołanie w C#)</span><span class="sxs-lookup"><span data-stu-id="994a2-429">from clause (C# Reference)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/from-clause.md"><span data-ttu-id="994a2-430">From — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-430">From Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Concat&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Concat&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; first, System.Collections.Generic.IEnumerable&lt;TSource&gt; second);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Concat&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; first, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; second) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Concat(Of TSource) (first As IEnumerable(Of TSource), second As IEnumerable(Of TSource)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ Concat(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ first, System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ second);" />
      <MemberSignature Language="F#" Value="static member Concat : seq&lt;'Source&gt; * seq&lt;'Source&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.Concat (first, second)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="first" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="second" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-431">Typ elementów sekwencji wejściowych.</span><span class="sxs-lookup"><span data-stu-id="994a2-431">The type of the elements of the input sequences.</span></span></typeparam>
        <param name="first"><span data-ttu-id="994a2-432">Pierwsza sekwencja do łączenia.</span><span class="sxs-lookup"><span data-stu-id="994a2-432">The first sequence to concatenate.</span></span></param>
        <param name="second"><span data-ttu-id="994a2-433">Sekwencja do łączenia z pierwszą sekwencją.</span><span class="sxs-lookup"><span data-stu-id="994a2-433">The sequence to concatenate to the first sequence.</span></span></param>
        <summary><span data-ttu-id="994a2-434">Łączy dwie sekwencje.</span><span class="sxs-lookup"><span data-stu-id="994a2-434">Concatenates two sequences.</span></span></summary>
        <returns><span data-ttu-id="994a2-435"><see cref="T:System.Collections.Generic.IEnumerable`1" /> Zawierający połączone elementy dwóch sekwencji wejściowych.</span><span class="sxs-lookup"><span data-stu-id="994a2-435">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the concatenated elements of the two input sequences.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-436">Ta metoda jest implementowana za pomocą odroczonego wykonania.</span><span class="sxs-lookup"><span data-stu-id="994a2-436">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="994a2-437">Bezpośrednio zwracana wartość jest obiektem, który przechowuje wszystkie informacje wymagane do wykonania akcji.</span><span class="sxs-lookup"><span data-stu-id="994a2-437">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="994a2-438">Zapytanie reprezentowane przez tę metodę nie jest wykonywane `GetEnumerator` do momentu wyliczenia obiektu przez wywołanie jego metody bezpośrednio lub przy użyciu `foreach` w wizualizacji C# lub `For Each` w Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="994a2-438">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="994a2-439">Metoda różni się <xref:System.Linq.Enumerable.Union%2A> od metody, ponieważ <xref:System.Linq.Enumerable.Concat%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> Metoda zwraca wszystkie oryginalne elementy w sekwencjach wejściowych. <xref:System.Linq.Enumerable.Concat%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29></span><span class="sxs-lookup"><span data-stu-id="994a2-439">The <xref:System.Linq.Enumerable.Concat%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> method differs from the <xref:System.Linq.Enumerable.Union%2A> method because the <xref:System.Linq.Enumerable.Concat%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> method returns all the original elements in the input sequences.</span></span> <span data-ttu-id="994a2-440"><xref:System.Linq.Enumerable.Union%2A> Metoda zwraca tylko unikatowe elementy.</span><span class="sxs-lookup"><span data-stu-id="994a2-440">The <xref:System.Linq.Enumerable.Union%2A> method returns only unique elements.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-441">Poniższy przykład kodu demonstruje, jak używać <xref:System.Linq.Enumerable.Concat%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> do łączenia dwóch sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-441">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Concat%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> to concatenate two sequences.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#20](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#20)]
 [!code-vb[System.Linq.Enumerable#20](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#20)]  
  
 <span data-ttu-id="994a2-442">Alternatywnym sposobem łączenia dwóch sekwencji jest konstruowanie kolekcji, na przykład tablicy, sekwencji, a następnie zastosowanie <xref:System.Linq.Enumerable.SelectMany%2A> metody, przekazanie jej do funkcji selektora tożsamości.</span><span class="sxs-lookup"><span data-stu-id="994a2-442">An alternative way of concatenating two sequences is to construct a collection, for example an array, of sequences and then apply the <xref:System.Linq.Enumerable.SelectMany%2A> method, passing it the identity selector function.</span></span> <span data-ttu-id="994a2-443">Poniższy przykład ilustruje to użycie <xref:System.Linq.Enumerable.SelectMany%2A>.</span><span class="sxs-lookup"><span data-stu-id="994a2-443">The following example demonstrates this use of <xref:System.Linq.Enumerable.SelectMany%2A>.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#112](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#112)]
 [!code-vb[System.Linq.Enumerable#112](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#112)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-444"><paramref name="first" />lub <paramref name="second" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-444"><paramref name="first" /> or <paramref name="second" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Contains&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="994a2-445">Określa, czy sekwencja zawiera określony element.</span><span class="sxs-lookup"><span data-stu-id="994a2-445">Determines whether a sequence contains a specified element.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Contains&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static bool Contains&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, TSource value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Contains&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, !!TSource value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Contains(Of TSource) (source As IEnumerable(Of TSource), value As TSource) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool Contains(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, TSource value);" />
      <MemberSignature Language="F#" Value="static member Contains : seq&lt;'Source&gt; * 'Source -&gt; bool" Usage="System.Linq.Enumerable.Contains (source, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="value" Type="TSource" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-446">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-446">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-447">Sekwencja, w której ma zostać zlokalizowana wartość.</span><span class="sxs-lookup"><span data-stu-id="994a2-447">A sequence in which to locate a value.</span></span></param>
        <param name="value"><span data-ttu-id="994a2-448">Wartość, która ma zostać zlokalizowana w sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-448">The value to locate in the sequence.</span></span></param>
        <summary><span data-ttu-id="994a2-449">Określa, czy sekwencja zawiera określony element przy użyciu domyślnej funkcji porównującej równość.</span><span class="sxs-lookup"><span data-stu-id="994a2-449">Determines whether a sequence contains a specified element by using the default equality comparer.</span></span></summary>
        <returns><span data-ttu-id="994a2-450"><see langword="true" />Jeśli sekwencja źródłowa zawiera element, który ma określoną wartość; w przeciwnym razie. <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="994a2-450"><see langword="true" /> if the source sequence contains an element that has the specified value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-451">Jeśli typ `source` implementuje <xref:System.Collections.Generic.ICollection%601>, `Contains` Metoda w tej implementacji jest wywoływana w celu uzyskania wyniku.</span><span class="sxs-lookup"><span data-stu-id="994a2-451">If the type of `source` implements <xref:System.Collections.Generic.ICollection%601>, the `Contains` method in that implementation is invoked to obtain the result.</span></span> <span data-ttu-id="994a2-452">W przeciwnym razie ta metoda określa `source` , czy zawiera określony element.</span><span class="sxs-lookup"><span data-stu-id="994a2-452">Otherwise, this method determines whether `source` contains the specified element.</span></span>  
  
 <span data-ttu-id="994a2-453">Wyliczenie zostało zakończone zaraz po znalezieniu pasującego elementu.</span><span class="sxs-lookup"><span data-stu-id="994a2-453">Enumeration is terminated as soon as a matching element is found.</span></span>  
  
 <span data-ttu-id="994a2-454">Elementy są porównywane z określoną wartością przy użyciu domyślnej funkcji porównującej równość <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>,.</span><span class="sxs-lookup"><span data-stu-id="994a2-454">Elements are compared to the specified value by using the default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-455">Poniższy przykład kodu demonstruje, jak użyć <xref:System.Linq.Enumerable.Contains%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> , aby określić, czy tablica zawiera określony element.</span><span class="sxs-lookup"><span data-stu-id="994a2-455">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Contains%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> to determine whether an array contains a specific element.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#21](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#21)]
 [!code-vb[System.Linq.Enumerable#21](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#21)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-456"><paramref name="source" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-456"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Contains&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static bool Contains&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, TSource value, System.Collections.Generic.IEqualityComparer&lt;TSource&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Contains&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, !!TSource value, class System.Collections.Generic.IEqualityComparer`1&lt;!!TSource&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Contains(Of TSource) (source As IEnumerable(Of TSource), value As TSource, comparer As IEqualityComparer(Of TSource)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool Contains(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, TSource value, System::Collections::Generic::IEqualityComparer&lt;TSource&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member Contains : seq&lt;'Source&gt; * 'Source * System.Collections.Generic.IEqualityComparer&lt;'Source&gt; -&gt; bool" Usage="System.Linq.Enumerable.Contains (source, value, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="value" Type="TSource" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-457">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-457">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-458">Sekwencja, w której ma zostać zlokalizowana wartość.</span><span class="sxs-lookup"><span data-stu-id="994a2-458">A sequence in which to locate a value.</span></span></param>
        <param name="value"><span data-ttu-id="994a2-459">Wartość, która ma zostać zlokalizowana w sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-459">The value to locate in the sequence.</span></span></param>
        <param name="comparer"><span data-ttu-id="994a2-460">Funkcja porównująca równość do porównywania wartości.</span><span class="sxs-lookup"><span data-stu-id="994a2-460">An equality comparer to compare values.</span></span></param>
        <summary><span data-ttu-id="994a2-461">Określa, czy sekwencja zawiera określony element przy użyciu określonego <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-461">Determines whether a sequence contains a specified element by using a specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</span></span></summary>
        <returns><span data-ttu-id="994a2-462"><see langword="true" />Jeśli sekwencja źródłowa zawiera element, który ma określoną wartość; w przeciwnym razie. <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="994a2-462"><see langword="true" /> if the source sequence contains an element that has the specified value; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-463">Wyliczenie zostało zakończone zaraz po znalezieniu pasującego elementu.</span><span class="sxs-lookup"><span data-stu-id="994a2-463">Enumeration is terminated as soon as a matching element is found.</span></span>  
  
 <span data-ttu-id="994a2-464">Jeśli `comparer` <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>jest `null`, domyślna funkcja porównująca równość jest używana do porównywania elementów z określoną wartością.</span><span class="sxs-lookup"><span data-stu-id="994a2-464">If `comparer` is `null`, the default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare elements to the specified value.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-465">Poniższy przykład pokazuje, jak zaimplementować funkcję porównującą równość, która może zostać użyta <xref:System.Linq.Enumerable.Contains%2A> w metodzie.</span><span class="sxs-lookup"><span data-stu-id="994a2-465">The following example shows how to implement an equality comparer that can be used in the <xref:System.Linq.Enumerable.Contains%2A> method.</span></span>  
  
 [!code-csharp[CSLINQCustomComparer#1](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQCustomComparer/CS/CustomComparer.cs#1)]
 [!code-vb[CSLINQCustomComparer#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQCustomComparer/VB/CustomComparer.vb#1)]  
  
 <span data-ttu-id="994a2-466">Po zaimplementowaniu tej `Product` <xref:System.Linq.Enumerable.Contains%2A> metody porównującej można użyć sekwencji obiektów w metodzie, jak pokazano w następującym przykładzie:</span><span class="sxs-lookup"><span data-stu-id="994a2-466">After you implement this comparer, you can use a sequence of `Product` objects in the <xref:System.Linq.Enumerable.Contains%2A> method, as shown in the following example:</span></span>  
  
 [!code-csharp[CSLINQCustomComparer#6](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQCustomComparer/CS/CustomComparer.cs#6)]
 [!code-vb[CSLINQCustomComparer#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQCustomComparer/VB/CustomComparer.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-467"><paramref name="source" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-467"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Count&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="994a2-468">Zwraca liczbę elementów w sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-468">Returns the number of elements in a sequence.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Count&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static int Count&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Count&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Count(Of TSource) (source As IEnumerable(Of TSource)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int Count(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Count : seq&lt;'Source&gt; -&gt; int" Usage="System.Linq.Enumerable.Count source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-469">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-469">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-470">Sekwencja, która zawiera elementy do zliczenia.</span><span class="sxs-lookup"><span data-stu-id="994a2-470">A sequence that contains elements to be counted.</span></span></param>
        <summary><span data-ttu-id="994a2-471">Zwraca liczbę elementów w sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-471">Returns the number of elements in a sequence.</span></span></summary>
        <returns><span data-ttu-id="994a2-472">Liczba elementów w sekwencji wejściowej.</span><span class="sxs-lookup"><span data-stu-id="994a2-472">The number of elements in the input sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-473">Jeśli typ `source` <xref:System.Collections.Generic.ICollection%601>implementacji, ta implementacja jest używana w celu uzyskania liczby elementów.</span><span class="sxs-lookup"><span data-stu-id="994a2-473">If the type of `source` implements <xref:System.Collections.Generic.ICollection%601>, that implementation is used to obtain the count of elements.</span></span> <span data-ttu-id="994a2-474">W przeciwnym razie ta metoda określa liczbę.</span><span class="sxs-lookup"><span data-stu-id="994a2-474">Otherwise, this method determines the count.</span></span>  
  
 <span data-ttu-id="994a2-475">Użyj metody, gdy oczekiwano, i chcesz zezwolić na to, aby wynik był <xref:System.Int32.MaxValue>większy niż. <xref:System.Linq.Enumerable.LongCount%2A></span><span class="sxs-lookup"><span data-stu-id="994a2-475">Use the <xref:System.Linq.Enumerable.LongCount%2A> method when you expect and want to allow the result to be greater than <xref:System.Int32.MaxValue>.</span></span>  
  
 <span data-ttu-id="994a2-476">W Visual Basic składni wyrażenia zapytania, `Aggregate Into Count()` klauzula tłumaczy na <xref:System.Linq.Enumerable.Count%2A>wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-476">In Visual Basic query expression syntax, an `Aggregate Into Count()` clause translates to an invocation of <xref:System.Linq.Enumerable.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-477">Poniższy przykład kodu demonstruje, jak używać <xref:System.Linq.Enumerable.Count%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> do zliczania elementów w tablicy.</span><span class="sxs-lookup"><span data-stu-id="994a2-477">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Count%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to count the elements in an array.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#22](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#22)]
 [!code-vb[System.Linq.Enumerable#22](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#22)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-478"><paramref name="source" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-478"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="994a2-479">Liczba elementów w <paramref name="source" /> jest większa niż <see cref="F:System.Int32.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-479">The number of elements in <paramref name="source" /> is larger than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="994a2-480">Aggregate — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-480">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Count&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static int Count&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Count&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Count(Of TSource) (source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int Count(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member Count : seq&lt;'Source&gt; * Func&lt;'Source, bool&gt; -&gt; int" Usage="System.Linq.Enumerable.Count (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-481">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-481">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-482">Sekwencja, która zawiera elementy do przetestowania i zliczenia.</span><span class="sxs-lookup"><span data-stu-id="994a2-482">A sequence that contains elements to be tested and counted.</span></span></param>
        <param name="predicate"><span data-ttu-id="994a2-483">Funkcja testowania każdego elementu na stanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-483">A function to test each element for a condition.</span></span></param>
        <summary><span data-ttu-id="994a2-484">Zwraca liczbę reprezentującą liczbę elementów w określonej sekwencji spełniających warunek.</span><span class="sxs-lookup"><span data-stu-id="994a2-484">Returns a number that represents how many elements in the specified sequence satisfy a condition.</span></span></summary>
        <returns><span data-ttu-id="994a2-485">Liczba, która reprezentuje, ile elementów w sekwencji spełnia warunek w funkcji predykatu.</span><span class="sxs-lookup"><span data-stu-id="994a2-485">A number that represents how many elements in the sequence satisfy the condition in the predicate function.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-486">Jeśli typ `source` <xref:System.Collections.Generic.ICollection%601>implementacji, ta implementacja jest używana w celu uzyskania liczby elementów.</span><span class="sxs-lookup"><span data-stu-id="994a2-486">If the type of `source` implements <xref:System.Collections.Generic.ICollection%601>, that implementation is used to obtain the count of elements.</span></span> <span data-ttu-id="994a2-487">W przeciwnym razie ta metoda określa liczbę.</span><span class="sxs-lookup"><span data-stu-id="994a2-487">Otherwise, this method determines the count.</span></span>  
  
 <span data-ttu-id="994a2-488">Należy użyć <xref:System.Linq.Enumerable.LongCount%2A> metody, gdy oczekiwano, i chcesz zezwolić na to, aby wynik był większy <xref:System.Int32.MaxValue>niż.</span><span class="sxs-lookup"><span data-stu-id="994a2-488">You should use the <xref:System.Linq.Enumerable.LongCount%2A> method when you expect and want to allow the result to be greater than <xref:System.Int32.MaxValue>.</span></span>  
  
 <span data-ttu-id="994a2-489">W Visual Basic składni wyrażenia zapytania, `Aggregate Into Count()` klauzula tłumaczy na <xref:System.Linq.Enumerable.Count%2A>wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-489">In Visual Basic query expression syntax, an `Aggregate Into Count()` clause translates to an invocation of <xref:System.Linq.Enumerable.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-490">Poniższy przykład kodu demonstruje, jak używać <xref:System.Linq.Enumerable.Count%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> do zliczania elementów w tablicy, które spełniają warunek.</span><span class="sxs-lookup"><span data-stu-id="994a2-490">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Count%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> to count the elements in an array that satisfy a condition.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#23](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#23)]
 [!code-vb[System.Linq.Enumerable#23](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#23)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-491"><paramref name="source" />lub <paramref name="predicate" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-491"><paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="994a2-492">Liczba elementów w <paramref name="source" /> jest większa niż <see cref="F:System.Int32.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-492">The number of elements in <paramref name="source" /> is larger than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="994a2-493">Aggregate — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-493">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="DefaultIfEmpty&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="994a2-494">Zwraca elementy <see cref="T:System.Collections.Generic.IEnumerable`1" />lub domyślną kolekcję singleton pojedynczej, jeśli sekwencja jest pusta.</span><span class="sxs-lookup"><span data-stu-id="994a2-494">Returns the elements of an <see cref="T:System.Collections.Generic.IEnumerable`1" />, or a default valued singleton collection if the sequence is empty.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DefaultIfEmpty&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; DefaultIfEmpty&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; DefaultIfEmpty&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DefaultIfEmpty(Of TSource) (source As IEnumerable(Of TSource)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ DefaultIfEmpty(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member DefaultIfEmpty : seq&lt;'Source&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.DefaultIfEmpty source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-495">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-495">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-496">Sekwencja, dla której ma zostać zwrócona wartość domyślna, jeśli jest pusta.</span><span class="sxs-lookup"><span data-stu-id="994a2-496">The sequence to return a default value for if it is empty.</span></span></param>
        <summary><span data-ttu-id="994a2-497">Zwraca elementy określonej sekwencji lub wartość domyślną parametru typu w kolekcji pojedynczej, jeśli sekwencja jest pusta.</span><span class="sxs-lookup"><span data-stu-id="994a2-497">Returns the elements of the specified sequence or the type parameter's default value in a singleton collection if the sequence is empty.</span></span></summary>
        <returns><span data-ttu-id="994a2-498">Obiekt, który zawiera wartość domyślną <paramref name="TSource" /> dla typu, <paramref name="source" />Jeśli <paramref name="source" /> jest pusty; w przeciwnym razie. <see cref="T:System.Collections.Generic.IEnumerable`1" /></span><span class="sxs-lookup"><span data-stu-id="994a2-498">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> object that contains the default value for the <paramref name="TSource" /> type if <paramref name="source" /> is empty; otherwise, <paramref name="source" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-499">Ta metoda jest implementowana za pomocą odroczonego wykonania.</span><span class="sxs-lookup"><span data-stu-id="994a2-499">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="994a2-500">Bezpośrednio zwracana wartość jest obiektem, który przechowuje wszystkie informacje wymagane do wykonania akcji.</span><span class="sxs-lookup"><span data-stu-id="994a2-500">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="994a2-501">Zapytanie reprezentowane przez tę metodę nie jest wykonywane `GetEnumerator` do momentu wyliczenia obiektu przez wywołanie jego metody bezpośrednio lub przy użyciu `foreach` w wizualizacji C# lub `For Each` w Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="994a2-501">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="994a2-502">Wartość domyślna dla typów Reference i nullable jest równa `null`.</span><span class="sxs-lookup"><span data-stu-id="994a2-502">The default value for reference and nullable types is `null`.</span></span>  
  
 <span data-ttu-id="994a2-503">Ta metoda może służyć do tworzenia lewego sprzężenia zewnętrznego, gdy jest połączone z <xref:System.Linq.Enumerable.GroupJoin%2A>metodą).</span><span class="sxs-lookup"><span data-stu-id="994a2-503">This method can be used to produce a left outer join when it is combined with the <xref:System.Linq.Enumerable.GroupJoin%2A>) method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-504">Poniższy przykład kodu pokazuje, jak użyć <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> , aby podać wartość domyślną w przypadku, gdy sekwencja źródłowa jest pusta.</span><span class="sxs-lookup"><span data-stu-id="994a2-504">The following code examples demonstrate how to use <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to provide a default value in case the source sequence is empty.</span></span>  
  
 <span data-ttu-id="994a2-505">W tym przykładzie używa niepustej sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-505">This example uses a non-empty sequence.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#24](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#24)]
 [!code-vb[System.Linq.Enumerable#24](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#24)]  
  
 <span data-ttu-id="994a2-506">W tym przykładzie zastosowano pustą sekwencję.</span><span class="sxs-lookup"><span data-stu-id="994a2-506">This example uses an empty sequence.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#25](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#25)]
 [!code-vb[System.Linq.Enumerable#25](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#25)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-507"><paramref name="source" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-507"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107"><span data-ttu-id="994a2-508">Łączenie</span><span class="sxs-lookup"><span data-stu-id="994a2-508">Joining</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="DefaultIfEmpty&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; DefaultIfEmpty&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, TSource defaultValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; DefaultIfEmpty&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, !!TSource defaultValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DefaultIfEmpty(Of TSource) (source As IEnumerable(Of TSource), defaultValue As TSource) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ DefaultIfEmpty(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, TSource defaultValue);" />
      <MemberSignature Language="F#" Value="static member DefaultIfEmpty : seq&lt;'Source&gt; * 'Source -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.DefaultIfEmpty (source, defaultValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="defaultValue" Type="TSource" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-509">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-509">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-510">Sekwencja, w której ma zostać zwrócona określona wartość, jeśli jest pusta.</span><span class="sxs-lookup"><span data-stu-id="994a2-510">The sequence to return the specified value for if it is empty.</span></span></param>
        <param name="defaultValue"><span data-ttu-id="994a2-511">Wartość, która ma zostać zwrócona, jeśli sekwencja jest pusta.</span><span class="sxs-lookup"><span data-stu-id="994a2-511">The value to return if the sequence is empty.</span></span></param>
        <summary><span data-ttu-id="994a2-512">Zwraca elementy określonej sekwencji lub określoną wartość w kolekcji pojedynczej, jeśli sekwencja jest pusta.</span><span class="sxs-lookup"><span data-stu-id="994a2-512">Returns the elements of the specified sequence or the specified value in a singleton collection if the sequence is empty.</span></span></summary>
        <returns><span data-ttu-id="994a2-513">Element <see cref="T:System.Collections.Generic.IEnumerable`1" /> zawierający <paramref name="defaultValue" /> <paramref name="source" />Jeśli jestpusty;wprzeciwnymrazie<paramref name="source" /> .</span><span class="sxs-lookup"><span data-stu-id="994a2-513">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <paramref name="defaultValue" /> if <paramref name="source" /> is empty; otherwise, <paramref name="source" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-514">Ta metoda jest implementowana za pomocą odroczonego wykonania.</span><span class="sxs-lookup"><span data-stu-id="994a2-514">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="994a2-515">Bezpośrednio zwracana wartość jest obiektem, który przechowuje wszystkie informacje wymagane do wykonania akcji.</span><span class="sxs-lookup"><span data-stu-id="994a2-515">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="994a2-516">Zapytanie reprezentowane przez tę metodę nie jest wykonywane `GetEnumerator` do momentu wyliczenia obiektu przez wywołanie jego metody bezpośrednio lub przy użyciu `foreach` w wizualizacji C# lub `For Each` w Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="994a2-516">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="994a2-517">Ta metoda może służyć do tworzenia lewego sprzężenia zewnętrznego, gdy jest połączone z <xref:System.Linq.Enumerable.GroupJoin%2A>metodą).</span><span class="sxs-lookup"><span data-stu-id="994a2-517">This method can be used to produce a left outer join when it is combined with the <xref:System.Linq.Enumerable.GroupJoin%2A>) method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-518">Poniższy przykład kodu demonstruje, jak używać <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> metody i określać wartość domyślną.</span><span class="sxs-lookup"><span data-stu-id="994a2-518">The following code example demonstrates how to use the <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> method and specify a default value.</span></span> <span data-ttu-id="994a2-519">Pierwsza sekwencja nie jest pusta, a druga sekwencja jest pusta.</span><span class="sxs-lookup"><span data-stu-id="994a2-519">The first sequence is not empty and the second sequence is empty.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#26](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#26)]
 [!code-vb[System.Linq.Enumerable#26](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#26)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107"><span data-ttu-id="994a2-520">Łączenie</span><span class="sxs-lookup"><span data-stu-id="994a2-520">Joining</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Distinct&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="994a2-521">Zwraca różne elementy z sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-521">Returns distinct elements from a sequence.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-522">Sekwencja wyników jest nieuporządkowana.</span><span class="sxs-lookup"><span data-stu-id="994a2-522">The result sequence is unordered.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Distinct&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Distinct&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Distinct&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Distinct(Of TSource) (source As IEnumerable(Of TSource)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ Distinct(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Distinct : seq&lt;'Source&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.Distinct source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-523">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-523">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-524">Sekwencja, z której mają zostać usunięte zduplikowane elementy.</span><span class="sxs-lookup"><span data-stu-id="994a2-524">The sequence to remove duplicate elements from.</span></span></param>
        <summary><span data-ttu-id="994a2-525">Zwraca różne elementy z sekwencji przy użyciu domyślnej funkcji porównującej równość do porównywania wartości.</span><span class="sxs-lookup"><span data-stu-id="994a2-525">Returns distinct elements from a sequence by using the default equality comparer to compare values.</span></span></summary>
        <returns><span data-ttu-id="994a2-526"><see cref="T:System.Collections.Generic.IEnumerable`1" /> Zawiera różne elementy z sekwencji źródłowej.</span><span class="sxs-lookup"><span data-stu-id="994a2-526">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains distinct elements from the source sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-527">Ta metoda jest implementowana za pomocą odroczonego wykonania.</span><span class="sxs-lookup"><span data-stu-id="994a2-527">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="994a2-528">Bezpośrednio zwracana wartość jest obiektem, który przechowuje wszystkie informacje wymagane do wykonania akcji.</span><span class="sxs-lookup"><span data-stu-id="994a2-528">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="994a2-529">Zapytanie reprezentowane przez tę metodę nie jest wykonywane `GetEnumerator` do momentu wyliczenia obiektu przez wywołanie jego metody bezpośrednio lub przy użyciu `foreach` w wizualizacji C# lub `For Each` w Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="994a2-529">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="994a2-530"><xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> Metoda zwraca sekwencję nieuporządkowaną, która nie zawiera zduplikowanych wartości.</span><span class="sxs-lookup"><span data-stu-id="994a2-530">The <xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> method returns an unordered sequence that contains no duplicate values.</span></span> <span data-ttu-id="994a2-531">Używa domyślnej opcji porównującej równość, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>aby porównać wartości.</span><span class="sxs-lookup"><span data-stu-id="994a2-531">It uses the default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, to compare values.</span></span>  
  
 <span data-ttu-id="994a2-532">W Visual Basic składni wyrażenia zapytania, `Distinct` klauzula tłumaczy na <xref:System.Linq.Enumerable.Distinct%2A>wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-532">In Visual Basic query expression syntax, a `Distinct` clause translates to an invocation of <xref:System.Linq.Enumerable.Distinct%2A>.</span></span>  
  
 <span data-ttu-id="994a2-533">Domyślna funkcja porównująca <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>równość jest używana do porównywania wartości typów, które <xref:System.IEquatable%601> implementują interfejs ogólny.</span><span class="sxs-lookup"><span data-stu-id="994a2-533">The default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare values of the types that implement the <xref:System.IEquatable%601> generic interface.</span></span> <span data-ttu-id="994a2-534">Aby porównać niestandardowy typ danych, należy zaimplementować ten interfejs i udostępnić własne <xref:System.Object.GetHashCode%2A> <xref:System.Object.Equals%2A> metody dla typu.</span><span class="sxs-lookup"><span data-stu-id="994a2-534">To compare a custom data type, you need to implement this interface and provide your own <xref:System.Object.GetHashCode%2A> and <xref:System.Object.Equals%2A> methods for the type.</span></span>  
  
 <span data-ttu-id="994a2-535">Aby zapoznać się z przykładem, który używa <xref:System.Collections.Generic.IEqualityComparer%601> do definiowania niestandardowego modułu porównującego, zobacz. <xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29></span><span class="sxs-lookup"><span data-stu-id="994a2-535">For an example that uses <xref:System.Collections.Generic.IEqualityComparer%601> to define a custom comparer, see <xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-536">Poniższy przykład kodu demonstruje, jak używać <xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> do zwracania odrębnych elementów z sekwencji liczb całkowitych.</span><span class="sxs-lookup"><span data-stu-id="994a2-536">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to return distinct elements from a sequence of integers.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#27](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#27)]
 [!code-vb[System.Linq.Enumerable#27](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#27)]  
  
 <span data-ttu-id="994a2-537">Jeśli chcesz zwrócić różne elementy z sekwencji obiektów pewnego niestandardowego typu danych, musisz zaimplementować <xref:System.IEquatable%601> interfejs generyczny w klasie.</span><span class="sxs-lookup"><span data-stu-id="994a2-537">If you want to return distinct elements from sequences of objects of some custom data type, you have to implement the <xref:System.IEquatable%601> generic interface in the class.</span></span> <span data-ttu-id="994a2-538">Poniższy przykład kodu pokazuje, jak zaimplementować ten interfejs w niestandardowym typie danych i zapewnić <xref:System.Object.GetHashCode%2A> metody <xref:System.Object.Equals%2A> i.</span><span class="sxs-lookup"><span data-stu-id="994a2-538">The following code example shows how to implement this interface in a custom data type and provide <xref:System.Object.GetHashCode%2A> and <xref:System.Object.Equals%2A> methods.</span></span>  
  
 [!code-csharp[CSLINQEncapsulatedComparer#1](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/CS/EncapsulatedComparer.cs#1)]
 [!code-vb[CSLINQEncapsulatedComparer#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/VB/EncapsulatedComparer.vb#1)]  
  
 <span data-ttu-id="994a2-539">Po zaimplementowaniu tego interfejsu można użyć sekwencji `Product` obiektów <xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> w metodzie, jak pokazano w następującym przykładzie:</span><span class="sxs-lookup"><span data-stu-id="994a2-539">After you implement this interface, you can use a sequence of `Product` objects in the <xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> method, as shown in the following example:</span></span>  
  
 [!code-csharp[CSLINQEncapsulatedComparer#5](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/CS/EncapsulatedComparer.cs#5)]
 [!code-vb[CSLINQEncapsulatedComparer#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/VB/EncapsulatedComparer.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-540"><paramref name="source" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-540"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/distinct-clause.md"><span data-ttu-id="994a2-541">Distinct — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-541">Distinct Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Distinct&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Distinct&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, System.Collections.Generic.IEqualityComparer&lt;TSource&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Distinct&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Collections.Generic.IEqualityComparer`1&lt;!!TSource&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Distinct(Of TSource) (source As IEnumerable(Of TSource), comparer As IEqualityComparer(Of TSource)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ Distinct(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, System::Collections::Generic::IEqualityComparer&lt;TSource&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member Distinct : seq&lt;'Source&gt; * System.Collections.Generic.IEqualityComparer&lt;'Source&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.Distinct (source, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-542">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-542">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-543">Sekwencja, z której mają zostać usunięte zduplikowane elementy.</span><span class="sxs-lookup"><span data-stu-id="994a2-543">The sequence to remove duplicate elements from.</span></span></param>
        <param name="comparer"><span data-ttu-id="994a2-544"><see cref="T:System.Collections.Generic.IEqualityComparer`1" /> Do porównywania wartości.</span><span class="sxs-lookup"><span data-stu-id="994a2-544">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</span></span></param>
        <summary><span data-ttu-id="994a2-545">Zwraca różne elementy z sekwencji przy użyciu określonej <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> do porównywania wartości.</span><span class="sxs-lookup"><span data-stu-id="994a2-545">Returns distinct elements from a sequence by using a specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</span></span></summary>
        <returns><span data-ttu-id="994a2-546"><see cref="T:System.Collections.Generic.IEnumerable`1" /> Zawiera różne elementy z sekwencji źródłowej.</span><span class="sxs-lookup"><span data-stu-id="994a2-546">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains distinct elements from the source sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-547">Ta metoda jest implementowana za pomocą odroczonego wykonania.</span><span class="sxs-lookup"><span data-stu-id="994a2-547">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="994a2-548">Bezpośrednio zwracana wartość jest obiektem, który przechowuje wszystkie informacje wymagane do wykonania akcji.</span><span class="sxs-lookup"><span data-stu-id="994a2-548">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="994a2-549">Zapytanie reprezentowane przez tę metodę nie jest wykonywane `GetEnumerator` do momentu wyliczenia obiektu przez wywołanie jego metody bezpośrednio lub przy użyciu `foreach` w wizualizacji C# lub `For Each` w Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="994a2-549">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="994a2-550"><xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> Metoda zwraca sekwencję nieuporządkowaną, która nie zawiera zduplikowanych wartości.</span><span class="sxs-lookup"><span data-stu-id="994a2-550">The <xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> method returns an unordered sequence that contains no duplicate values.</span></span> <span data-ttu-id="994a2-551">Jeśli `comparer` <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>jest `null`, domyślna funkcja porównująca równość jest używana do porównywania wartości.</span><span class="sxs-lookup"><span data-stu-id="994a2-551">If `comparer` is `null`, the default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-552">Poniższy przykład pokazuje, jak zaimplementować funkcję porównującą równość, która może zostać użyta <xref:System.Linq.Enumerable.Distinct%2A> w metodzie.</span><span class="sxs-lookup"><span data-stu-id="994a2-552">The following example shows how to implement an equality comparer that can be used in the <xref:System.Linq.Enumerable.Distinct%2A> method.</span></span>  
  
 [!code-csharp[CSLINQCustomComparer#1](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQCustomComparer/CS/CustomComparer.cs#1)]
 [!code-vb[CSLINQCustomComparer#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQCustomComparer/VB/CustomComparer.vb#1)]  
  
 <span data-ttu-id="994a2-553">Po zaimplementowaniu tej `Product` <xref:System.Linq.Enumerable.Distinct%2A> metody porównującej można użyć sekwencji obiektów w metodzie, jak pokazano w następującym przykładzie:</span><span class="sxs-lookup"><span data-stu-id="994a2-553">After you implement this comparer, you can use a sequence of `Product` objects in the <xref:System.Linq.Enumerable.Distinct%2A> method, as shown in the following example:</span></span>  
  
 [!code-csharp[CSLINQCustomComparer#5](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQCustomComparer/CS/CustomComparer.cs#5)]
 [!code-vb[CSLINQCustomComparer#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQCustomComparer/VB/CustomComparer.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-554"><paramref name="source" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-554"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ElementAt&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource ElementAt&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource ElementAt&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ElementAt(Of TSource) (source As IEnumerable(Of TSource), index As Integer) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource ElementAt(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, int index);" />
      <MemberSignature Language="F#" Value="static member ElementAt : seq&lt;'Source&gt; * int -&gt; 'Source" Usage="System.Linq.Enumerable.ElementAt (source, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-555">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-555">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-556"><see cref="T:System.Collections.Generic.IEnumerable`1" /> Do zwrócenia elementu z.</span><span class="sxs-lookup"><span data-stu-id="994a2-556">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return an element from.</span></span></param>
        <param name="index"><span data-ttu-id="994a2-557">Indeks (liczony od zera) elementu do pobrania.</span><span class="sxs-lookup"><span data-stu-id="994a2-557">The zero-based index of the element to retrieve.</span></span></param>
        <summary><span data-ttu-id="994a2-558">Zwraca element o określonym indeksie w sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-558">Returns the element at a specified index in a sequence.</span></span></summary>
        <returns><span data-ttu-id="994a2-559">Element w określonej pozycji w sekwencji źródłowej.</span><span class="sxs-lookup"><span data-stu-id="994a2-559">The element at the specified position in the source sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-560">Jeśli typ `source` <xref:System.Collections.Generic.IList%601>implementacji, ta implementacja jest używana w celu uzyskania elementu pod określonym indeksem.</span><span class="sxs-lookup"><span data-stu-id="994a2-560">If the type of `source` implements <xref:System.Collections.Generic.IList%601>, that implementation is used to obtain the element at the specified index.</span></span> <span data-ttu-id="994a2-561">W przeciwnym razie ta metoda uzyskuje określony element.</span><span class="sxs-lookup"><span data-stu-id="994a2-561">Otherwise, this method obtains the specified element.</span></span>  
  
 <span data-ttu-id="994a2-562">Ta metoda zgłasza wyjątek, jeśli `index` jest poza zakresem.</span><span class="sxs-lookup"><span data-stu-id="994a2-562">This method throws an exception if `index` is out of range.</span></span> <span data-ttu-id="994a2-563">Aby zamiast tego zwrócić wartość domyślną, gdy określony indeks jest poza zakresem, użyj <xref:System.Linq.Enumerable.ElementAtOrDefault%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="994a2-563">To instead return a default value when the specified index is out of range, use the <xref:System.Linq.Enumerable.ElementAtOrDefault%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-564">Poniższy przykład kodu demonstruje, jak użyć <xref:System.Linq.Enumerable.ElementAt%2A> do zwrócenia elementu w określonej pozycji.</span><span class="sxs-lookup"><span data-stu-id="994a2-564">The following code example demonstrates how to use <xref:System.Linq.Enumerable.ElementAt%2A> to return an element at a specific position.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#28](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#28)]
 [!code-vb[System.Linq.Enumerable#28](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#28)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-565"><paramref name="source" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-565"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="994a2-566"><paramref name="index" />jest mniejsza od 0 lub większa lub równa liczbie elementów w <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-566"><paramref name="index" /> is less than 0 or greater than or equal to the number of elements in <paramref name="source" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ElementAtOrDefault&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource ElementAtOrDefault&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource ElementAtOrDefault&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ElementAtOrDefault(Of TSource) (source As IEnumerable(Of TSource), index As Integer) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource ElementAtOrDefault(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, int index);" />
      <MemberSignature Language="F#" Value="static member ElementAtOrDefault : seq&lt;'Source&gt; * int -&gt; 'Source" Usage="System.Linq.Enumerable.ElementAtOrDefault (source, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-567">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-567">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-568"><see cref="T:System.Collections.Generic.IEnumerable`1" /> Do zwrócenia elementu z.</span><span class="sxs-lookup"><span data-stu-id="994a2-568">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return an element from.</span></span></param>
        <param name="index"><span data-ttu-id="994a2-569">Indeks (liczony od zera) elementu do pobrania.</span><span class="sxs-lookup"><span data-stu-id="994a2-569">The zero-based index of the element to retrieve.</span></span></param>
        <summary><span data-ttu-id="994a2-570">Zwraca element o określonym indeksie w sekwencji lub wartości domyślnej, jeśli indeks jest poza zakresem.</span><span class="sxs-lookup"><span data-stu-id="994a2-570">Returns the element at a specified index in a sequence or a default value if the index is out of range.</span></span></summary>
        <returns><span data-ttu-id="994a2-571"><see langword="default" />(<paramref name="TSource" />), jeśli indeks znajduje się poza granicami sekwencji źródłowej; w przeciwnym razie element w określonej pozycji w sekwencji źródłowej.</span><span class="sxs-lookup"><span data-stu-id="994a2-571"><see langword="default" />(<paramref name="TSource" />) if the index is outside the bounds of the source sequence; otherwise, the element at the specified position in the source sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-572">Jeśli typ `source` <xref:System.Collections.Generic.IList%601>implementacji, ta implementacja jest używana w celu uzyskania elementu pod określonym indeksem.</span><span class="sxs-lookup"><span data-stu-id="994a2-572">If the type of `source` implements <xref:System.Collections.Generic.IList%601>, that implementation is used to obtain the element at the specified index.</span></span> <span data-ttu-id="994a2-573">W przeciwnym razie ta metoda uzyskuje określony element.</span><span class="sxs-lookup"><span data-stu-id="994a2-573">Otherwise, this method obtains the specified element.</span></span>  
  
 <span data-ttu-id="994a2-574">Wartość domyślna dla typów Reference i nullable jest równa `null`.</span><span class="sxs-lookup"><span data-stu-id="994a2-574">The default value for reference and nullable types is `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-575">Poniższy przykład kodu demonstruje sposób użycia <xref:System.Linq.Enumerable.ElementAtOrDefault%2A>.</span><span class="sxs-lookup"><span data-stu-id="994a2-575">The following code example demonstrates how to use <xref:System.Linq.Enumerable.ElementAtOrDefault%2A>.</span></span> <span data-ttu-id="994a2-576">W tym przykładzie użyto indeksu, który znajduje się poza granicami tablicy.</span><span class="sxs-lookup"><span data-stu-id="994a2-576">This example uses an index that is outside the bounds of the array.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#29](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#29)]
 [!code-vb[System.Linq.Enumerable#29](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#29)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-577"><paramref name="source" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-577"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Empty&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; Empty&lt;TResult&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; Empty&lt;TResult&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Empty``1" />
      <MemberSignature Language="VB.NET" Value="Public Function Empty(Of TResult) () As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ Empty();" />
      <MemberSignature Language="F#" Value="static member Empty : unit -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.Empty " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="994a2-578">Typ, który ma zostać przypisany do parametru typu zwracanej wartości <see cref="T:System.Collections.Generic.IEnumerable`1" />ogólnej.</span><span class="sxs-lookup"><span data-stu-id="994a2-578">The type to assign to the type parameter of the returned generic <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span></span></typeparam>
        <summary><span data-ttu-id="994a2-579">Zwraca wartość pustą <see cref="T:System.Collections.Generic.IEnumerable`1" /> , która ma określony argument typu.</span><span class="sxs-lookup"><span data-stu-id="994a2-579">Returns an empty <see cref="T:System.Collections.Generic.IEnumerable`1" /> that has the specified type argument.</span></span></summary>
        <returns><span data-ttu-id="994a2-580"><see cref="T:System.Collections.Generic.IEnumerable`1" /> Pusty<paramref name="TResult" />argument typu.</span><span class="sxs-lookup"><span data-stu-id="994a2-580">An empty <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose type argument is <paramref name="TResult" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-581">Metoda buforuje pustą sekwencję typu `TResult`. <xref:System.Linq.Enumerable.Empty%60%601></span><span class="sxs-lookup"><span data-stu-id="994a2-581">The <xref:System.Linq.Enumerable.Empty%60%601> method caches an empty sequence of type `TResult`.</span></span> <span data-ttu-id="994a2-582">Gdy zwracany obiekt jest wyliczany, nie zwraca żadnych elementów.</span><span class="sxs-lookup"><span data-stu-id="994a2-582">When the object it returns is enumerated, it yields no elements.</span></span>  
  
 <span data-ttu-id="994a2-583">W niektórych przypadkach ta metoda jest przydatna do przekazywania pustej sekwencji do metody zdefiniowanej przez użytkownika, która przyjmuje <xref:System.Collections.Generic.IEnumerable%601>.</span><span class="sxs-lookup"><span data-stu-id="994a2-583">In some cases, this method is useful for passing an empty sequence to a user-defined method that takes an <xref:System.Collections.Generic.IEnumerable%601>.</span></span> <span data-ttu-id="994a2-584">Można go również użyć do wygenerowania neutralnego elementu dla metod, takich <xref:System.Linq.Enumerable.Union%2A>jak.</span><span class="sxs-lookup"><span data-stu-id="994a2-584">It can also be used to generate a neutral element for methods such as <xref:System.Linq.Enumerable.Union%2A>.</span></span> <span data-ttu-id="994a2-585">Przykład korzystania z programu <xref:System.Linq.Enumerable.Empty%60%601>znajduje się w sekcji przykładowej.</span><span class="sxs-lookup"><span data-stu-id="994a2-585">See the Example section for an example of this use of <xref:System.Linq.Enumerable.Empty%60%601>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-586">Poniższy przykład kodu demonstruje, jak użyć <xref:System.Linq.Enumerable.Empty%60%601> do wygenerowania pustej. <xref:System.Collections.Generic.IEnumerable%601></span><span class="sxs-lookup"><span data-stu-id="994a2-586">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Empty%60%601> to generate an empty <xref:System.Collections.Generic.IEnumerable%601>.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#30](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#30)]
 [!code-vb[System.Linq.Enumerable#30](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#30)]  
  
 <span data-ttu-id="994a2-587">Poniższy przykład kodu demonstruje możliwe zastosowania <xref:System.Linq.Enumerable.Empty%60%601> metody.</span><span class="sxs-lookup"><span data-stu-id="994a2-587">The following code example demonstrates a possible application of the <xref:System.Linq.Enumerable.Empty%60%601> method.</span></span> <span data-ttu-id="994a2-588"><xref:System.Linq.Enumerable.Aggregate%2A> Metoda jest stosowana do kolekcji tablic ciągów.</span><span class="sxs-lookup"><span data-stu-id="994a2-588">The <xref:System.Linq.Enumerable.Aggregate%2A> method is applied to a collection of string arrays.</span></span> <span data-ttu-id="994a2-589">Elementy każdej tablicy w kolekcji są dodawane do wyników <xref:System.Collections.Generic.IEnumerable%601> tylko wtedy, gdy ta tablica zawiera cztery lub więcej elementów.</span><span class="sxs-lookup"><span data-stu-id="994a2-589">The elements of each array in the collection are added to the resulting <xref:System.Collections.Generic.IEnumerable%601> only if that array contains four or more elements.</span></span> <span data-ttu-id="994a2-590"><xref:System.Linq.Enumerable.Empty%2A>służy do generowania wartości <xref:System.Linq.Enumerable.Aggregate%2A> inicjatora, ponieważ jeśli żadna tablica w kolekcji nie ma czterech lub więcej elementów, zwracana jest tylko pusta sekwencja.</span><span class="sxs-lookup"><span data-stu-id="994a2-590"><xref:System.Linq.Enumerable.Empty%2A> is used to generate the seed value for <xref:System.Linq.Enumerable.Aggregate%2A> because if no array in the collection has four or more elements, only the empty sequence is returned.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#31](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#31)]
 [!code-vb[System.Linq.Enumerable#31](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#31)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Except&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="994a2-591">Tworzy różnicę dwóch sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-591">Produces the set difference of two sequences.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

<span data-ttu-id="994a2-592">Różnica między zestawami dwóch zestawów jest definiowana jako elementy członkowskie pierwszego zestawu, które nie są wyświetlane w drugim zestawie.</span><span class="sxs-lookup"><span data-stu-id="994a2-592">The set difference of two sets is defined as the members of the first set that don't appear in the second set.</span></span>  
  
<span data-ttu-id="994a2-593">Ta metoda zwraca te elementy `first` , które nie są wyświetlane w. `second`</span><span class="sxs-lookup"><span data-stu-id="994a2-593">This method returns those elements in `first` that don't appear in `second`.</span></span> <span data-ttu-id="994a2-594">Nie zwracają tych elementów `second` , które nie są wyświetlane w. `first`</span><span class="sxs-lookup"><span data-stu-id="994a2-594">It doesn't return those elements in `second` that don't appear in `first`.</span></span>
<span data-ttu-id="994a2-595">Zwracane są tylko unikatowe elementy.</span><span class="sxs-lookup"><span data-stu-id="994a2-595">Only unique elements are returned.</span></span>

[!INCLUDE[interactive-note](~/includes/csharp-interactive-note-some.md)]

]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/dotnet/api/system.linq.enumerable.intersect"><span data-ttu-id="994a2-596">Wyliczalna Metoda. Intersect</span><span class="sxs-lookup"><span data-stu-id="994a2-596">Enumerable.Intersect Method</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="Except&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Except&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; first, System.Collections.Generic.IEnumerable&lt;TSource&gt; second);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Except&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; first, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; second) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Except(Of TSource) (first As IEnumerable(Of TSource), second As IEnumerable(Of TSource)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ Except(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ first, System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ second);" />
      <MemberSignature Language="F#" Value="static member Except : seq&lt;'Source&gt; * seq&lt;'Source&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.Except (first, second)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="first" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="second" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-597">Typ elementów sekwencji wejściowych.</span><span class="sxs-lookup"><span data-stu-id="994a2-597">The type of the elements of the input sequences.</span></span></typeparam>
        <param name="first"><span data-ttu-id="994a2-598">, Których elementy, które nie są również <paramref name="second" /> w programie, zostaną zwrócone. <see cref="T:System.Collections.Generic.IEnumerable`1" /></span><span class="sxs-lookup"><span data-stu-id="994a2-598">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements that are not also in <paramref name="second" /> will be returned.</span></span></param>
        <param name="second"><span data-ttu-id="994a2-599"><see cref="T:System.Collections.Generic.IEnumerable`1" /> Elementy, których także występują w pierwszej sekwencji, spowodują usunięcie tych elementów z zwróconej sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-599">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements that also occur in the first sequence will cause those elements to be removed from the returned sequence.</span></span></param>
        <summary><span data-ttu-id="994a2-600">Tworzy różnicę dwóch sekwencji przy użyciu domyślnej funkcji porównującej równość do porównywania wartości.</span><span class="sxs-lookup"><span data-stu-id="994a2-600">Produces the set difference of two sequences by using the default equality comparer to compare values.</span></span></summary>
        <returns><span data-ttu-id="994a2-601">Sekwencja, która zawiera zestaw różnic między elementami dwóch sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-601">A sequence that contains the set difference of the elements of two sequences.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-602">Ta metoda jest implementowana za pomocą odroczonego wykonania.</span><span class="sxs-lookup"><span data-stu-id="994a2-602">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="994a2-603">Bezpośrednio zwracana wartość jest obiektem, który przechowuje wszystkie informacje wymagane do wykonania akcji.</span><span class="sxs-lookup"><span data-stu-id="994a2-603">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="994a2-604">Zapytanie reprezentowane przez tę metodę nie jest wykonywane `GetEnumerator` do momentu wyliczenia obiektu przez wywołanie jego metody bezpośrednio lub przy użyciu `foreach` w wizualizacji C# lub `For Each` w Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="994a2-604">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
    
 <span data-ttu-id="994a2-605">Domyślna funkcja porównująca <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>równość jest używana do porównywania wartości typów.</span><span class="sxs-lookup"><span data-stu-id="994a2-605">The default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare values of the types.</span></span> <span data-ttu-id="994a2-606">Aby porównać niestandardowy typ danych, należy zastąpić <xref:System.Object.Equals%2A> <xref:System.Object.GetHashCode%2A> metody i i opcjonalnie zaimplementować <xref:System.IEquatable%601> interfejs generyczny w typie niestandardowym.</span><span class="sxs-lookup"><span data-stu-id="994a2-606">To compare a custom data type, you need to override the <xref:System.Object.Equals%2A> and the <xref:System.Object.GetHashCode%2A> methods, and optionally implement the <xref:System.IEquatable%601> generic interface in the custom type.</span></span> <span data-ttu-id="994a2-607">Aby uzyskać więcej informacji, zobacz <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> właściwość.</span><span class="sxs-lookup"><span data-stu-id="994a2-607">For more information, see the <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> property.</span></span>
  
## Examples  
 <span data-ttu-id="994a2-608">Poniższy przykład kodu demonstruje, `Except<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)` jak używać metody do porównywania dwóch sekwencji liczb i zwracać elementy, które są wyświetlane tylko w pierwszej sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-608">The following code example demonstrates how to use the `Except<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)` method to compare two sequences of numbers and return elements that appear only in the first sequence.</span></span>  
  
 [!code-csharp-interactive[System.Linq.Enumerable#34](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#34)]
 [!code-vb[System.Linq.Enumerable#34](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#34)]  
  
  <span data-ttu-id="994a2-609">Jeśli chcesz porównać sekwencje obiektów z niestandardowym typem danych, musisz zaimplementować <xref:System.IEquatable%601> interfejs generyczny w klasie pomocnika.</span><span class="sxs-lookup"><span data-stu-id="994a2-609">If you want to compare sequences of objects of some custom data type, you have to implement the <xref:System.IEquatable%601> generic interface in a helper class.</span></span> <span data-ttu-id="994a2-610">Poniższy przykład kodu pokazuje, jak zaimplementować ten interfejs w niestandardowym typie danych oraz zastąpień <xref:System.Object.GetHashCode%2A> i <xref:System.Object.Equals%2A> metodach.</span><span class="sxs-lookup"><span data-stu-id="994a2-610">The following code example shows how to implement this interface in a custom data type and override <xref:System.Object.GetHashCode%2A> and <xref:System.Object.Equals%2A> methods.</span></span>
  
 [!code-csharp[CSLINQEncapsulatedComparer#9](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/CS/EncapsulatedComparer.cs#9)]
 [!code-vb[CSLINQEncapsulatedComparer#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/VB/EncapsulatedComparer.vb#9)]  
  
 <span data-ttu-id="994a2-611">Po zaimplementowaniu tego interfejsu można użyć sekwencji `ProductA` obiektów `Except<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)` w metodzie, jak pokazano w następującym przykładzie:</span><span class="sxs-lookup"><span data-stu-id="994a2-611">After you implement this interface, you can use sequences of `ProductA` objects in the `Except<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)` method, as shown in the following example:</span></span>
  
 [!code-csharp[CSLINQEncapsulatedComparer#7](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/CS/EncapsulatedComparer.cs#7)]
 [!code-vb[CSLINQEncapsulatedComparer#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/VB/EncapsulatedComparer.vb#7)]  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-612"><paramref name="first" />lub <paramref name="second" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-612"><paramref name="first" /> or <paramref name="second" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Except&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Except&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; first, System.Collections.Generic.IEnumerable&lt;TSource&gt; second, System.Collections.Generic.IEqualityComparer&lt;TSource&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Except&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; first, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; second, class System.Collections.Generic.IEqualityComparer`1&lt;!!TSource&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Except(Of TSource) (first As IEnumerable(Of TSource), second As IEnumerable(Of TSource), comparer As IEqualityComparer(Of TSource)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ Except(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ first, System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ second, System::Collections::Generic::IEqualityComparer&lt;TSource&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member Except : seq&lt;'Source&gt; * seq&lt;'Source&gt; * System.Collections.Generic.IEqualityComparer&lt;'Source&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.Except (first, second, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="first" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="second" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-613">Typ elementów sekwencji wejściowych.</span><span class="sxs-lookup"><span data-stu-id="994a2-613">The type of the elements of the input sequences.</span></span></typeparam>
        <param name="first"><span data-ttu-id="994a2-614">, Których elementy, które nie są również <paramref name="second" /> w programie, zostaną zwrócone. <see cref="T:System.Collections.Generic.IEnumerable`1" /></span><span class="sxs-lookup"><span data-stu-id="994a2-614">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements that are not also in <paramref name="second" /> will be returned.</span></span></param>
        <param name="second"><span data-ttu-id="994a2-615"><see cref="T:System.Collections.Generic.IEnumerable`1" /> Elementy, których także występują w pierwszej sekwencji, spowodują usunięcie tych elementów z zwróconej sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-615">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements that also occur in the first sequence will cause those elements to be removed from the returned sequence.</span></span></param>
        <param name="comparer"><span data-ttu-id="994a2-616"><see cref="T:System.Collections.Generic.IEqualityComparer`1" /> Do porównywania wartości.</span><span class="sxs-lookup"><span data-stu-id="994a2-616">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</span></span></param>
        <summary><span data-ttu-id="994a2-617">Tworzy różnicę dwóch sekwencji przy użyciu określonej <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> do porównania wartości.</span><span class="sxs-lookup"><span data-stu-id="994a2-617">Produces the set difference of two sequences by using the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</span></span></summary>
        <returns><span data-ttu-id="994a2-618">Sekwencja, która zawiera zestaw różnic między elementami dwóch sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-618">A sequence that contains the set difference of the elements of two sequences.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-619">Jeśli `comparer` <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>jest `null`, domyślna funkcja porównująca równość jest używana do porównywania wartości.</span><span class="sxs-lookup"><span data-stu-id="994a2-619">If `comparer` is `null`, the default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare values.</span></span>
  
## Examples  
 <span data-ttu-id="994a2-620">Jeśli chcesz porównać sekwencje obiektów z niestandardowym typem danych, musisz zaimplementować <xref:System.Collections.Generic.IEqualityComparer%601> interfejs generyczny w klasie pomocnika.</span><span class="sxs-lookup"><span data-stu-id="994a2-620">If you want to compare sequences of objects of some custom data type, you have to implement the <xref:System.Collections.Generic.IEqualityComparer%601> generic interface in a helper class.</span></span> <span data-ttu-id="994a2-621">Poniższy przykład kodu pokazuje, jak zaimplementować ten interfejs w niestandardowym typie danych i zapewnić <xref:System.Object.GetHashCode%2A> metody <xref:System.Object.Equals%2A> i.</span><span class="sxs-lookup"><span data-stu-id="994a2-621">The following code example shows how to implement this interface in a custom data type and provide <xref:System.Object.GetHashCode%2A> and <xref:System.Object.Equals%2A> methods.</span></span> <span data-ttu-id="994a2-622">Poniższy przykład pokazuje, jak zaimplementować funkcję porównującą równość, która może zostać użyta <xref:System.Linq.Enumerable.Except%2A> w metodzie.</span><span class="sxs-lookup"><span data-stu-id="994a2-622">The following example shows how to implement an equality comparer that can be used in the <xref:System.Linq.Enumerable.Except%2A> method.</span></span>  
  
 [!code-csharp[CSLINQCustomComparer#1](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQCustomComparer/CS/CustomComparer.cs#1)]
 [!code-vb[CSLINQCustomComparer#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQCustomComparer/VB/CustomComparer.vb#1)]  
  
 <span data-ttu-id="994a2-623">Po zaimplementowaniu tej <xref:System.Linq.Enumerable.Except%2A> metody porównującej można użyć sekwencji `Product` obiektów w metodzie, jak pokazano w następującym przykładzie:</span><span class="sxs-lookup"><span data-stu-id="994a2-623">After you implement this comparer, you can use sequences of `Product` objects in the <xref:System.Linq.Enumerable.Except%2A> method, as shown in the following example:</span></span>  
  
 [!code-csharp[CSLINQCustomComparer#7](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQCustomComparer/CS/CustomComparer.cs#7)]
 [!code-vb[CSLINQCustomComparer#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQCustomComparer/VB/CustomComparer.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-624"><paramref name="first" />lub <paramref name="second" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-624"><paramref name="first" /> or <paramref name="second" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="First&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="994a2-625">Zwraca pierwszy element sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-625">Returns the first element of a sequence.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="First&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource First&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource First&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function First(Of TSource) (source As IEnumerable(Of TSource)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource First(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member First : seq&lt;'Source&gt; -&gt; 'Source" Usage="System.Linq.Enumerable.First source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-626">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-626">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-627"><see cref="T:System.Collections.Generic.IEnumerable`1" /> Do zwrócenia pierwszego elementu.</span><span class="sxs-lookup"><span data-stu-id="994a2-627">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return the first element of.</span></span></param>
        <summary><span data-ttu-id="994a2-628">Zwraca pierwszy element sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-628">Returns the first element of a sequence.</span></span></summary>
        <returns><span data-ttu-id="994a2-629">Pierwszy element w określonej sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-629">The first element in the specified sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-630">Metoda zgłasza wyjątek, jeśli `source` nie zawiera żadnych elementów. <xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29></span><span class="sxs-lookup"><span data-stu-id="994a2-630">The <xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> method throws an exception if `source` contains no elements.</span></span> <span data-ttu-id="994a2-631">Aby zamiast tego zwrócić wartość domyślną, gdy sekwencja źródłowa jest pusta, użyj <xref:System.Linq.Enumerable.FirstOrDefault%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="994a2-631">To instead return a default value when the source sequence is empty, use the <xref:System.Linq.Enumerable.FirstOrDefault%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-632">Poniższy przykład kodu demonstruje, jak użyć <xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> do zwrócenia pierwszego elementu tablicy.</span><span class="sxs-lookup"><span data-stu-id="994a2-632">The following code example demonstrates how to use <xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to return the first element of an array.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#35](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#35)]
 [!code-vb[System.Linq.Enumerable#35](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-633"><paramref name="source" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-633"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="994a2-634">Sekwencja źródłowa jest pusta.</span><span class="sxs-lookup"><span data-stu-id="994a2-634">The source sequence is empty.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="First&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource First&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource First&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function First(Of TSource) (source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource First(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member First : seq&lt;'Source&gt; * Func&lt;'Source, bool&gt; -&gt; 'Source" Usage="System.Linq.Enumerable.First (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-635">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-635">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-636"><see cref="T:System.Collections.Generic.IEnumerable`1" /> Do zwrócenia elementu z.</span><span class="sxs-lookup"><span data-stu-id="994a2-636">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return an element from.</span></span></param>
        <param name="predicate"><span data-ttu-id="994a2-637">Funkcja testowania każdego elementu na stanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-637">A function to test each element for a condition.</span></span></param>
        <summary><span data-ttu-id="994a2-638">Zwraca pierwszy element w sekwencji, który spełnia określony warunek.</span><span class="sxs-lookup"><span data-stu-id="994a2-638">Returns the first element in a sequence that satisfies a specified condition.</span></span></summary>
        <returns><span data-ttu-id="994a2-639">Pierwszy element w sekwencji, który przekazuje test w określonej funkcji predykatu.</span><span class="sxs-lookup"><span data-stu-id="994a2-639">The first element in the sequence that passes the test in the specified predicate function.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-640">Metoda zgłasza wyjątek, jeśli nie znaleziono pasującego elementu w `source`. <xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29></span><span class="sxs-lookup"><span data-stu-id="994a2-640">The <xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> method throws an exception if no matching element is found in `source`.</span></span> <span data-ttu-id="994a2-641">Aby zamiast tego zwrócić wartość domyślną, gdy nie znaleziono pasującego elementu, użyj <xref:System.Linq.Enumerable.FirstOrDefault%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="994a2-641">To instead return a default value when no matching element is found, use the <xref:System.Linq.Enumerable.FirstOrDefault%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-642">Poniższy przykład kodu demonstruje, jak użyć <xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> do zwrócenia pierwszego elementu tablicy, który spełnia warunek.</span><span class="sxs-lookup"><span data-stu-id="994a2-642">The following code example demonstrates how to use <xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> to return the first element of an array that satisfies a condition.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#36](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#36)]
 [!code-vb[System.Linq.Enumerable#36](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#36)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-643"><paramref name="source" />lub <paramref name="predicate" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-643"><paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="994a2-644">Żaden element nie spełnia warunku <paramref name="predicate" />w elemencie.</span><span class="sxs-lookup"><span data-stu-id="994a2-644">No element satisfies the condition in <paramref name="predicate" />.</span></span>  
  
<span data-ttu-id="994a2-645">—lub—</span><span class="sxs-lookup"><span data-stu-id="994a2-645">-or-</span></span> 
<span data-ttu-id="994a2-646">Sekwencja źródłowa jest pusta.</span><span class="sxs-lookup"><span data-stu-id="994a2-646">The source sequence is empty.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="FirstOrDefault&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="994a2-647">Zwraca pierwszy element sekwencji lub wartość domyślną, jeśli nie odnaleziono elementu.</span><span class="sxs-lookup"><span data-stu-id="994a2-647">Returns the first element of a sequence, or a default value if no element is found.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FirstOrDefault&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource FirstOrDefault&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource FirstOrDefault&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FirstOrDefault(Of TSource) (source As IEnumerable(Of TSource)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource FirstOrDefault(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member FirstOrDefault : seq&lt;'Source&gt; -&gt; 'Source" Usage="System.Linq.Enumerable.FirstOrDefault source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-648">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-648">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-649"><see cref="T:System.Collections.Generic.IEnumerable`1" /> Do zwrócenia pierwszego elementu.</span><span class="sxs-lookup"><span data-stu-id="994a2-649">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return the first element of.</span></span></param>
        <summary><span data-ttu-id="994a2-650">Zwraca pierwszy element sekwencji lub wartość domyślną, jeśli sekwencja nie zawiera żadnych elementów.</span><span class="sxs-lookup"><span data-stu-id="994a2-650">Returns the first element of a sequence, or a default value if the sequence contains no elements.</span></span></summary>
        <returns><span data-ttu-id="994a2-651"><see langword="default" />(<paramref name="TSource" />) Jeśli <paramref name="source" /> jest pusty; w przeciwnym razie pierwszy element w <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-651"><see langword="default" />(<paramref name="TSource" />) if <paramref name="source" /> is empty; otherwise, the first element in <paramref name="source" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-652">Wartość domyślna dla typów Reference i nullable jest równa `null`.</span><span class="sxs-lookup"><span data-stu-id="994a2-652">The default value for reference and nullable types is `null`.</span></span>  
  
 <span data-ttu-id="994a2-653"><xref:System.Linq.Enumerable.FirstOrDefault%2A> Metoda nie pozwala na określenie wartości domyślnej.</span><span class="sxs-lookup"><span data-stu-id="994a2-653">The <xref:System.Linq.Enumerable.FirstOrDefault%2A> method does not provide a way to specify a default value.</span></span> <span data-ttu-id="994a2-654">Jeśli chcesz określić wartość domyślną inną niż `default(TSource)`, <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> Użyj metody opisanej w sekcji przykład.</span><span class="sxs-lookup"><span data-stu-id="994a2-654">If you want to specify a default value other than `default(TSource)`, use the <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> method as described in the Example section.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-655">Poniższy przykład kodu demonstruje, jak używać <xref:System.Linq.Enumerable.FirstOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> na pustej tablicy.</span><span class="sxs-lookup"><span data-stu-id="994a2-655">The following code example demonstrates how to use <xref:System.Linq.Enumerable.FirstOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> on an empty array.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#37](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#37)]
 [!code-vb[System.Linq.Enumerable#37](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#37)]  
  
 <span data-ttu-id="994a2-656">Czasami wartość `default(TSource)` nie jest wartością domyślną, która ma być używana, jeśli kolekcja nie zawiera żadnych elementów.</span><span class="sxs-lookup"><span data-stu-id="994a2-656">Sometimes the value of `default(TSource)` is not the default value that you want to use if the collection contains no elements.</span></span> <span data-ttu-id="994a2-657">Zamiast sprawdzać wynik niepożądanej wartości domyślnej, a następnie zmieniać ją w razie potrzeby, można użyć <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> metody, aby określić wartość domyślną, która ma być używana, jeśli kolekcja jest pusta.</span><span class="sxs-lookup"><span data-stu-id="994a2-657">Instead of checking the result for the unwanted default value and then changing it if necessary, you can use the <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> method to specify the default value that you want to use if the collection is empty.</span></span> <span data-ttu-id="994a2-658">Następnie należy wywołać <xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> , aby uzyskać pierwszy element.</span><span class="sxs-lookup"><span data-stu-id="994a2-658">Then, call <xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to obtain the first element.</span></span> <span data-ttu-id="994a2-659">Poniższy przykład kodu używa obu technik do uzyskania wartości domyślnej 1, jeśli kolekcja miesięcy liczbowych jest pusta.</span><span class="sxs-lookup"><span data-stu-id="994a2-659">The following code example uses both techniques to obtain a default value of 1 if a collection of numeric months is empty.</span></span> <span data-ttu-id="994a2-660">Ponieważ wartością domyślną dla liczby całkowitej jest 0, która nie odpowiada żadnemu miesiącowi, wartość domyślna musi być określona jako 1.</span><span class="sxs-lookup"><span data-stu-id="994a2-660">Because the default value for an integer is 0, which does not correspond to any month, the default value must be specified as 1 instead.</span></span> <span data-ttu-id="994a2-661">Pierwsza zmienna wynikowa jest sprawdzana pod kątem niepożądanej wartości domyślnej po zakończeniu wykonywania zapytania.</span><span class="sxs-lookup"><span data-stu-id="994a2-661">The first result variable is checked for the unwanted default value after the query has finished executing.</span></span> <span data-ttu-id="994a2-662">Druga zmienna wynikowa jest uzyskiwana przy <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> użyciu, aby określić wartość domyślną 1.</span><span class="sxs-lookup"><span data-stu-id="994a2-662">The second result variable is obtained by using <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> to specify a default value of 1.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#126](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#126)]
 [!code-vb[System.Linq.Enumerable#126](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#126)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-663"><paramref name="source" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-663"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="FirstOrDefault&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource FirstOrDefault&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource FirstOrDefault&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FirstOrDefault(Of TSource) (source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource FirstOrDefault(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member FirstOrDefault : seq&lt;'Source&gt; * Func&lt;'Source, bool&gt; -&gt; 'Source" Usage="System.Linq.Enumerable.FirstOrDefault (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-664">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-664">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-665"><see cref="T:System.Collections.Generic.IEnumerable`1" /> Do zwrócenia elementu z.</span><span class="sxs-lookup"><span data-stu-id="994a2-665">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return an element from.</span></span></param>
        <param name="predicate"><span data-ttu-id="994a2-666">Funkcja testowania każdego elementu na stanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-666">A function to test each element for a condition.</span></span></param>
        <summary><span data-ttu-id="994a2-667">Zwraca pierwszy element sekwencji, który spełnia warunek lub wartość domyślną, jeśli taki element nie zostanie znaleziony.</span><span class="sxs-lookup"><span data-stu-id="994a2-667">Returns the first element of the sequence that satisfies a condition or a default value if no such element is found.</span></span></summary>
        <returns><span data-ttu-id="994a2-668"><see langword="default" />(<paramref name="TSource" />) Jeśli <paramref name="source" /> jest pusty lub żaden element nie przekazuje testu określonego przez <paramref name="predicate" />; w przeciwnym razie pierwszy element w <paramref name="source" /> , który przekazuje Test określony przez <paramref name="predicate" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-668"><see langword="default" />(<paramref name="TSource" />) if <paramref name="source" /> is empty or if no element passes the test specified by <paramref name="predicate" />; otherwise, the first element in <paramref name="source" /> that passes the test specified by <paramref name="predicate" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-669">Wartość domyślna dla typów Reference i nullable jest równa `null`.</span><span class="sxs-lookup"><span data-stu-id="994a2-669">The default value for reference and nullable types is `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-670">Poniższy przykład kodu demonstruje sposób użycia <xref:System.Linq.Enumerable.FirstOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> przez przekazanie predykatu.</span><span class="sxs-lookup"><span data-stu-id="994a2-670">The following code example demonstrates how to use <xref:System.Linq.Enumerable.FirstOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> by passing in a predicate.</span></span> <span data-ttu-id="994a2-671">W drugim wywołaniu metody w tablicy nie ma elementu, który spełnia warunek.</span><span class="sxs-lookup"><span data-stu-id="994a2-671">In the second call to the method, there is no element in the array that satisfies the condition.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#38](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#38)]
 [!code-vb[System.Linq.Enumerable#38](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#38)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-672"><paramref name="source" />lub <paramref name="predicate" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-672"><paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GroupBy&lt;TSource,TKey&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="994a2-673">Grupuje elementy sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-673">Groups the elements of a sequence.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GroupBy&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;System.Linq.IGrouping&lt;TKey,TSource&gt;&gt; GroupBy&lt;TSource,TKey&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.IGrouping`2&lt;!!TKey, !!TSource&gt;&gt; GroupBy&lt;TSource, TKey&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GroupBy(Of TSource, TKey) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey)) As IEnumerable(Of IGrouping(Of TKey, TSource))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;System::Linq::IGrouping&lt;TKey, TSource&gt; ^&gt; ^ GroupBy(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector);" />
      <MemberSignature Language="F#" Value="static member GroupBy : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; -&gt; seq&lt;System.Linq.IGrouping&lt;'Key, 'Source&gt;&gt;" Usage="System.Linq.Enumerable.GroupBy (source, keySelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Linq.IGrouping&lt;TKey,TSource&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-674">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-674">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TKey"><span data-ttu-id="994a2-675">Typ klucza zwracanego przez <paramref name="keySelector" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-675">The type of the key returned by <paramref name="keySelector" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-676">, <see cref="T:System.Collections.Generic.IEnumerable`1" /> Których elementów należy grupować.</span><span class="sxs-lookup"><span data-stu-id="994a2-676">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to group.</span></span></param>
        <param name="keySelector"><span data-ttu-id="994a2-677">Funkcja wyodrębniania klucza do każdego elementu.</span><span class="sxs-lookup"><span data-stu-id="994a2-677">A function to extract the key for each element.</span></span></param>
        <summary><span data-ttu-id="994a2-678">Grupuje elementy sekwencji zgodnie z określoną funkcją selektora kluczy.</span><span class="sxs-lookup"><span data-stu-id="994a2-678">Groups the elements of a sequence according to a specified key selector function.</span></span></summary>
        <returns><span data-ttu-id="994a2-679"><c>Interfejs IEnumerable&lt;IGrouping&lt;TKey, TSource&gt; in&gt;</c> C# lub <c>IEnumerable (of IGrouping (TKey, TSource))</c> w Visual Basic gdzie każdy <see cref="T:System.Linq.IGrouping`2" /> obiekt zawiera sekwencję obiektów i kluczy.</span><span class="sxs-lookup"><span data-stu-id="994a2-679">An <c>IEnumerable&lt;IGrouping&lt;TKey, TSource&gt;&gt;</c> in C# or <c>IEnumerable(Of IGrouping(Of TKey, TSource))</c> in Visual Basic where each <see cref="T:System.Linq.IGrouping`2" /> object contains a sequence of objects and a key.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-680">Ta metoda jest implementowana za pomocą odroczonego wykonania.</span><span class="sxs-lookup"><span data-stu-id="994a2-680">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="994a2-681">Bezpośrednio zwracana wartość jest obiektem, który przechowuje wszystkie informacje wymagane do wykonania akcji.</span><span class="sxs-lookup"><span data-stu-id="994a2-681">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="994a2-682">Zapytanie reprezentowane przez tę metodę nie jest wykonywane `GetEnumerator` do momentu wyliczenia obiektu przez wywołanie jego metody bezpośrednio lub przy użyciu `foreach` w wizualizacji C# lub `For Each` w Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="994a2-682">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="994a2-683">Przykłady `GroupBy`można znaleźć w następujących artykułach:</span><span class="sxs-lookup"><span data-stu-id="994a2-683">For examples of `GroupBy`, see the following articles:</span></span>
>   
> - <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29>  
> - <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%29>  
> - <xref:System.Linq.Enumerable.GroupBy%60%604%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%29>  
  
 <span data-ttu-id="994a2-684"><xref:System.Linq.Enumerable.GroupBy%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29> Metoda zwraca<xref:System.Linq.IGrouping%602> kolekcję obiektów, jeden dla każdego napotkanego oddzielnego klucza.</span><span class="sxs-lookup"><span data-stu-id="994a2-684">The <xref:System.Linq.Enumerable.GroupBy%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29> method returns a collection of <xref:System.Linq.IGrouping%602> objects, one for each distinct key that was encountered.</span></span> <span data-ttu-id="994a2-685"><xref:System.Linq.IGrouping%602> Jesttorównieżklucz<xref:System.Collections.Generic.IEnumerable%601> skojarzony z jego elementami.</span><span class="sxs-lookup"><span data-stu-id="994a2-685">An <xref:System.Linq.IGrouping%602> is an <xref:System.Collections.Generic.IEnumerable%601> that also has a key associated with its elements.</span></span>  
  
 <span data-ttu-id="994a2-686">Obiekty są uzyskiwane w kolejności na podstawie kolejności elementów w programie `source` , która wygenerowała pierwszy klucz każdego z nich <xref:System.Linq.IGrouping%602>. <xref:System.Linq.IGrouping%602></span><span class="sxs-lookup"><span data-stu-id="994a2-686">The <xref:System.Linq.IGrouping%602> objects are yielded in an order based on the order of the elements in `source` that produced the first key of each <xref:System.Linq.IGrouping%602>.</span></span> <span data-ttu-id="994a2-687">Elementy w grupowaniu są realizowane w kolejności, w `source`której się znajdują.</span><span class="sxs-lookup"><span data-stu-id="994a2-687">Elements in a grouping are yielded in the order they appear in `source`.</span></span>  
  
 <span data-ttu-id="994a2-688">Domyślna funkcja porównująca <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> równość jest używana do porównywania kluczy.</span><span class="sxs-lookup"><span data-stu-id="994a2-688">The default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> is used to compare keys.</span></span>  
  
 <span data-ttu-id="994a2-689">W `group by` składni wyrażenia zapytania, klauzula (wizualizacja C#) `Group By Into` lub (Visual Basic) <xref:System.Linq.Enumerable.GroupBy%2A>tłumaczy na wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-689">In query expression syntax, a `group by` (Visual C#) or `Group By Into` (Visual Basic) clause translates to an invocation of <xref:System.Linq.Enumerable.GroupBy%2A>.</span></span> <span data-ttu-id="994a2-690">Aby uzyskać więcej informacji i przykłady użycia, zobacz [klauzula](~/docs/csharp/language-reference/keywords/group-clause.md) Group i [klauzula GROUP by](~/docs/visual-basic/language-reference/queries/group-by-clause.md).</span><span class="sxs-lookup"><span data-stu-id="994a2-690">For more information and usage examples, see [group clause](~/docs/csharp/language-reference/keywords/group-clause.md) and [Group By Clause](~/docs/visual-basic/language-reference/queries/group-by-clause.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-691"><paramref name="source" />lub <paramref name="keySelector" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-691"><paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/csharp/language-reference/keywords/group-clause.md"><span data-ttu-id="994a2-692">group — Klauzula (odwołanie w C#)</span><span class="sxs-lookup"><span data-stu-id="994a2-692">group clause (C# Reference)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/group-by-clause.md"><span data-ttu-id="994a2-693">Group By — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-693">Group By Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GroupBy&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;System.Linq.IGrouping&lt;TKey,TSource&gt;&gt; GroupBy&lt;TSource,TKey&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.IGrouping`2&lt;!!TKey, !!TSource&gt;&gt; GroupBy&lt;TSource, TKey&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GroupBy(Of TSource, TKey) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), comparer As IEqualityComparer(Of TKey)) As IEnumerable(Of IGrouping(Of TKey, TSource))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;System::Linq::IGrouping&lt;TKey, TSource&gt; ^&gt; ^ GroupBy(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member GroupBy : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; seq&lt;System.Linq.IGrouping&lt;'Key, 'Source&gt;&gt;" Usage="System.Linq.Enumerable.GroupBy (source, keySelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Linq.IGrouping&lt;TKey,TSource&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-694">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-694">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TKey"><span data-ttu-id="994a2-695">Typ klucza zwracanego przez <paramref name="keySelector" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-695">The type of the key returned by <paramref name="keySelector" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-696">, <see cref="T:System.Collections.Generic.IEnumerable`1" /> Których elementów należy grupować.</span><span class="sxs-lookup"><span data-stu-id="994a2-696">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to group.</span></span></param>
        <param name="keySelector"><span data-ttu-id="994a2-697">Funkcja wyodrębniania klucza do każdego elementu.</span><span class="sxs-lookup"><span data-stu-id="994a2-697">A function to extract the key for each element.</span></span></param>
        <param name="comparer"><span data-ttu-id="994a2-698"><see cref="T:System.Collections.Generic.IEqualityComparer`1" /> Do porównywania kluczy.</span><span class="sxs-lookup"><span data-stu-id="994a2-698">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</span></span></param>
        <summary><span data-ttu-id="994a2-699">Grupuje elementy sekwencji zgodnie z określoną funkcją selektora kluczy i porównuje klucze przy użyciu określonej funkcji porównującej.</span><span class="sxs-lookup"><span data-stu-id="994a2-699">Groups the elements of a sequence according to a specified key selector function and compares the keys by using a specified comparer.</span></span></summary>
        <returns><span data-ttu-id="994a2-700"><c>Interfejs IEnumerable&lt;IGrouping&lt;TKey, TSource&gt; in&gt;</c> C# lub <c>IEnumerable (of IGrouping (TKey, TSource))</c> w Visual Basic gdzie każdy <see cref="T:System.Linq.IGrouping`2" /> obiekt zawiera Kolekcja obiektów i klucz.</span><span class="sxs-lookup"><span data-stu-id="994a2-700">An <c>IEnumerable&lt;IGrouping&lt;TKey, TSource&gt;&gt;</c> in C# or <c>IEnumerable(Of IGrouping(Of TKey, TSource))</c> in Visual Basic where each <see cref="T:System.Linq.IGrouping`2" /> object contains a collection of objects and a key.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-701">Ta metoda jest implementowana za pomocą odroczonego wykonania.</span><span class="sxs-lookup"><span data-stu-id="994a2-701">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="994a2-702">Bezpośrednio zwracana wartość jest obiektem, który przechowuje wszystkie informacje wymagane do wykonania akcji.</span><span class="sxs-lookup"><span data-stu-id="994a2-702">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="994a2-703">Zapytanie reprezentowane przez tę metodę nie jest wykonywane `GetEnumerator` do momentu wyliczenia obiektu przez wywołanie jego metody bezpośrednio lub przy użyciu `foreach` w wizualizacji C# lub `For Each` w Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="994a2-703">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="994a2-704">Przykłady `GroupBy`można znaleźć w następujących artykułach:</span><span class="sxs-lookup"><span data-stu-id="994a2-704">For examples of `GroupBy`, see the following articles:</span></span>
>   
> - <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29>  
> - <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%29>  
> - <xref:System.Linq.Enumerable.GroupBy%60%604%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%29>  
  
 <span data-ttu-id="994a2-705"><xref:System.Linq.Enumerable.GroupBy%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> Metoda zwraca<xref:System.Linq.IGrouping%602> kolekcję obiektów, jeden dla każdego napotkanego oddzielnego klucza.</span><span class="sxs-lookup"><span data-stu-id="994a2-705">The <xref:System.Linq.Enumerable.GroupBy%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> method returns a collection of <xref:System.Linq.IGrouping%602> objects, one for each distinct key that was encountered.</span></span> <span data-ttu-id="994a2-706"><xref:System.Linq.IGrouping%602> Jesttorównieżklucz<xref:System.Collections.Generic.IEnumerable%601> skojarzony z jego elementami.</span><span class="sxs-lookup"><span data-stu-id="994a2-706">An <xref:System.Linq.IGrouping%602> is an <xref:System.Collections.Generic.IEnumerable%601> that also has a key associated with its elements.</span></span>  
  
 <span data-ttu-id="994a2-707">Obiekty są uzyskiwane w kolejności na podstawie kolejności elementów w programie `source` , która wygenerowała pierwszy klucz każdego z nich <xref:System.Linq.IGrouping%602>. <xref:System.Linq.IGrouping%602></span><span class="sxs-lookup"><span data-stu-id="994a2-707">The <xref:System.Linq.IGrouping%602> objects are yielded in an order based on the order of the elements in `source` that produced the first key of each <xref:System.Linq.IGrouping%602>.</span></span> <span data-ttu-id="994a2-708">Elementy w grupowaniu są realizowane w kolejności, w `source`której się znajdują.</span><span class="sxs-lookup"><span data-stu-id="994a2-708">Elements in a grouping are yielded in the order they appear in `source`.</span></span>  
  
 <span data-ttu-id="994a2-709">Jeśli `comparer` <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> jest `null`, domyślną funkcję porównującą równość używa się do porównywania kluczy.</span><span class="sxs-lookup"><span data-stu-id="994a2-709">If `comparer` is `null`, the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> is used to compare keys.</span></span>  
  
 <span data-ttu-id="994a2-710">Jeśli dwa klucze są uważane za równe `comparer`, pierwszy klucz jest wybierany jako klucz dla tego grupowania.</span><span class="sxs-lookup"><span data-stu-id="994a2-710">If two keys are considered equal according to `comparer`, the first key is chosen as the key for that grouping.</span></span>  
  
 <span data-ttu-id="994a2-711">W `group by` składni wyrażenia zapytania, klauzula (wizualizacja C#) `Group By Into` lub (Visual Basic) <xref:System.Linq.Enumerable.GroupBy%2A>tłumaczy na wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-711">In query expression syntax, a `group by` (Visual C#) or `Group By Into` (Visual Basic) clause translates to an invocation of <xref:System.Linq.Enumerable.GroupBy%2A>.</span></span> <span data-ttu-id="994a2-712">Aby uzyskać więcej informacji i przykłady użycia, zobacz [klauzula](~/docs/csharp/language-reference/keywords/group-clause.md) Group i [klauzula GROUP by](~/docs/visual-basic/language-reference/queries/group-by-clause.md).</span><span class="sxs-lookup"><span data-stu-id="994a2-712">For more information and usage examples, see [group clause](~/docs/csharp/language-reference/keywords/group-clause.md) and [Group By Clause](~/docs/visual-basic/language-reference/queries/group-by-clause.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-713"><paramref name="source" />lub <paramref name="keySelector" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-713"><paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/csharp/language-reference/keywords/group-clause.md"><span data-ttu-id="994a2-714">group — Klauzula (odwołanie w C#)</span><span class="sxs-lookup"><span data-stu-id="994a2-714">group clause (C# Reference)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/group-by-clause.md"><span data-ttu-id="994a2-715">Group By — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-715">Group By Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GroupBy&lt;TSource,TKey,TElement&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;System.Linq.IGrouping&lt;TKey,TElement&gt;&gt; GroupBy&lt;TSource,TKey,TElement&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TSource,TElement&gt; elementSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.IGrouping`2&lt;!!TKey, !!TElement&gt;&gt; GroupBy&lt;TSource, TKey, TElement&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Func`2&lt;!!TSource, !!TElement&gt; elementSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GroupBy(Of TSource, TKey, TElement) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement)) As IEnumerable(Of IGrouping(Of TKey, TElement))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey, typename TElement&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;System::Linq::IGrouping&lt;TKey, TElement&gt; ^&gt; ^ GroupBy(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, Func&lt;TSource, TElement&gt; ^ elementSelector);" />
      <MemberSignature Language="F#" Value="static member GroupBy : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * Func&lt;'Source, 'Element&gt; -&gt; seq&lt;System.Linq.IGrouping&lt;'Key, 'Element&gt;&gt;" Usage="System.Linq.Enumerable.GroupBy (source, keySelector, elementSelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Linq.IGrouping&lt;TKey,TElement&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TElement" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="elementSelector" Type="System.Func&lt;TSource,TElement&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-716">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-716">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TKey"><span data-ttu-id="994a2-717">Typ klucza zwracanego przez <paramref name="keySelector" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-717">The type of the key returned by <paramref name="keySelector" />.</span></span></typeparam>
        <typeparam name="TElement"><span data-ttu-id="994a2-718">Typ elementów w <see cref="T:System.Linq.IGrouping`2" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-718">The type of the elements in the <see cref="T:System.Linq.IGrouping`2" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-719">, <see cref="T:System.Collections.Generic.IEnumerable`1" /> Których elementów należy grupować.</span><span class="sxs-lookup"><span data-stu-id="994a2-719">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to group.</span></span></param>
        <param name="keySelector"><span data-ttu-id="994a2-720">Funkcja wyodrębniania klucza do każdego elementu.</span><span class="sxs-lookup"><span data-stu-id="994a2-720">A function to extract the key for each element.</span></span></param>
        <param name="elementSelector"><span data-ttu-id="994a2-721">Funkcja mapowania każdego elementu źródłowego do elementu w <see cref="T:System.Linq.IGrouping`2" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-721">A function to map each source element to an element in the <see cref="T:System.Linq.IGrouping`2" />.</span></span></param>
        <summary><span data-ttu-id="994a2-722">Grupuje elementy sekwencji zgodnie z określoną funkcją selektora kluczy i tworzy projekty elementów dla każdej grupy przy użyciu określonej funkcji.</span><span class="sxs-lookup"><span data-stu-id="994a2-722">Groups the elements of a sequence according to a specified key selector function and projects the elements for each group by using a specified function.</span></span></summary>
        <returns><span data-ttu-id="994a2-723"><c>Interfejs IEnumerable&lt;IGrouping&lt;TKey,&gt; tele&gt;</c> w C# lub <c>IEnumerable (of IGrouping (of TKey, tele))</c> w Visual Basic gdzie każdy <see cref="T:System.Linq.IGrouping`2" /> obiekt zawiera Kolekcja obiektów typu <paramref name="TElement" /> i klucza.</span><span class="sxs-lookup"><span data-stu-id="994a2-723">An <c>IEnumerable&lt;IGrouping&lt;TKey, TElement&gt;&gt;</c> in C# or <c>IEnumerable(Of IGrouping(Of TKey, TElement))</c> in Visual Basic where each <see cref="T:System.Linq.IGrouping`2" /> object contains a collection of objects of type <paramref name="TElement" /> and a key.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-724">Ta metoda jest implementowana za pomocą odroczonego wykonania.</span><span class="sxs-lookup"><span data-stu-id="994a2-724">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="994a2-725">Bezpośrednio zwracana wartość jest obiektem, który przechowuje wszystkie informacje wymagane do wykonania akcji.</span><span class="sxs-lookup"><span data-stu-id="994a2-725">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="994a2-726">Zapytanie reprezentowane przez tę metodę nie jest wykonywane `GetEnumerator` do momentu wyliczenia obiektu przez wywołanie jego metody bezpośrednio lub przy użyciu `foreach` w wizualizacji C# lub `For Each` w Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="994a2-726">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="994a2-727"><xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29> Metoda zwraca<xref:System.Linq.IGrouping%602> kolekcję obiektów, jeden dla każdego napotkanego oddzielnego klucza.</span><span class="sxs-lookup"><span data-stu-id="994a2-727">The <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29> method returns a collection of <xref:System.Linq.IGrouping%602> objects, one for each distinct key that was encountered.</span></span> <span data-ttu-id="994a2-728"><xref:System.Linq.IGrouping%602> Jesttorównieżklucz<xref:System.Collections.Generic.IEnumerable%601> skojarzony z jego elementami.</span><span class="sxs-lookup"><span data-stu-id="994a2-728">An <xref:System.Linq.IGrouping%602> is an <xref:System.Collections.Generic.IEnumerable%601> that also has a key associated with its elements.</span></span>  
  
 <span data-ttu-id="994a2-729">Obiekty są uzyskiwane w kolejności na podstawie kolejności elementów w programie `source` , która wygenerowała pierwszy klucz każdego z nich <xref:System.Linq.IGrouping%602>. <xref:System.Linq.IGrouping%602></span><span class="sxs-lookup"><span data-stu-id="994a2-729">The <xref:System.Linq.IGrouping%602> objects are yielded in an order based on the order of the elements in `source` that produced the first key of each <xref:System.Linq.IGrouping%602>.</span></span> <span data-ttu-id="994a2-730">Elementy w grupowaniu są generowane w kolejności, w jakiej są wyświetlane elementy, w `source`których zostały utworzone.</span><span class="sxs-lookup"><span data-stu-id="994a2-730">Elements in a grouping are yielded in the order that the elements that produced them appear in `source`.</span></span>  
  
 <span data-ttu-id="994a2-731">Domyślna funkcja porównująca <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> równość jest używana do porównywania kluczy.</span><span class="sxs-lookup"><span data-stu-id="994a2-731">The default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> is used to compare keys.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-732">Poniższy przykład kodu pokazuje, jak używać <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29> do grupowania elementów sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-732">The following code example demonstrates how to use <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29> to group the elements of a sequence.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#39](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#39)]
 [!code-vb[System.Linq.Enumerable#39](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#39)]  
  
 <span data-ttu-id="994a2-733">W `group by` składni wyrażenia zapytania, klauzula (wizualizacja C#) `Group By Into` lub (Visual Basic) <xref:System.Linq.Enumerable.GroupBy%2A>tłumaczy na wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-733">In query expression syntax, a `group by` (Visual C#) or `Group By Into` (Visual Basic) clause translates to an invocation of <xref:System.Linq.Enumerable.GroupBy%2A>.</span></span> <span data-ttu-id="994a2-734">Tłumaczenie wyrażenia zapytania w poniższym przykładzie jest równoznaczne z kwerendą w powyższym przykładzie.</span><span class="sxs-lookup"><span data-stu-id="994a2-734">The translation of the query expression in the following example is equivalent to the query in the example above.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#122](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#122)]
 [!code-vb[System.Linq.Enumerable#122](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#122)]  
  
> [!NOTE]
>  <span data-ttu-id="994a2-735">W wyrażeniu C# zapytania Visual lub Visual Basic wyrażenia wyboru elementu i klucza występują w odwrotnej kolejności od ich pozycji argumentów w wywołaniu <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29> metody.</span><span class="sxs-lookup"><span data-stu-id="994a2-735">In a Visual C# or Visual Basic query expression, the element and key selection expressions occur in the reverse order from their argument positions in a call to the <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-736"><paramref name="source" />or <paramref name="keySelector" /> lub <paramref name="elementSelector" /> is .<see langword="null" /></span><span class="sxs-lookup"><span data-stu-id="994a2-736"><paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/csharp/language-reference/keywords/group-clause.md"><span data-ttu-id="994a2-737">group — Klauzula (odwołanie w C#)</span><span class="sxs-lookup"><span data-stu-id="994a2-737">group clause (C# Reference)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/group-by-clause.md"><span data-ttu-id="994a2-738">Group By — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-738">Group By Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GroupBy&lt;TSource,TKey,TElement&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;System.Linq.IGrouping&lt;TKey,TElement&gt;&gt; GroupBy&lt;TSource,TKey,TElement&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TSource,TElement&gt; elementSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.IGrouping`2&lt;!!TKey, !!TElement&gt;&gt; GroupBy&lt;TSource, TKey, TElement&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Func`2&lt;!!TSource, !!TElement&gt; elementSelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GroupBy(Of TSource, TKey, TElement) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement), comparer As IEqualityComparer(Of TKey)) As IEnumerable(Of IGrouping(Of TKey, TElement))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey, typename TElement&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;System::Linq::IGrouping&lt;TKey, TElement&gt; ^&gt; ^ GroupBy(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, Func&lt;TSource, TElement&gt; ^ elementSelector, System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member GroupBy : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * Func&lt;'Source, 'Element&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; seq&lt;System.Linq.IGrouping&lt;'Key, 'Element&gt;&gt;" Usage="System.Linq.Enumerable.GroupBy (source, keySelector, elementSelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Linq.IGrouping&lt;TKey,TElement&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TElement" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="elementSelector" Type="System.Func&lt;TSource,TElement&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-739">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-739">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TKey"><span data-ttu-id="994a2-740">Typ klucza zwracanego przez <paramref name="keySelector" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-740">The type of the key returned by <paramref name="keySelector" />.</span></span></typeparam>
        <typeparam name="TElement"><span data-ttu-id="994a2-741">Typ elementów w <see cref="T:System.Linq.IGrouping`2" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-741">The type of the elements in the <see cref="T:System.Linq.IGrouping`2" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-742">, <see cref="T:System.Collections.Generic.IEnumerable`1" /> Których elementów należy grupować.</span><span class="sxs-lookup"><span data-stu-id="994a2-742">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to group.</span></span></param>
        <param name="keySelector"><span data-ttu-id="994a2-743">Funkcja wyodrębniania klucza do każdego elementu.</span><span class="sxs-lookup"><span data-stu-id="994a2-743">A function to extract the key for each element.</span></span></param>
        <param name="elementSelector"><span data-ttu-id="994a2-744">Funkcja mapowania każdego elementu źródłowego do elementu w <see cref="T:System.Linq.IGrouping`2" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-744">A function to map each source element to an element in an <see cref="T:System.Linq.IGrouping`2" />.</span></span></param>
        <param name="comparer"><span data-ttu-id="994a2-745"><see cref="T:System.Collections.Generic.IEqualityComparer`1" /> Do porównywania kluczy.</span><span class="sxs-lookup"><span data-stu-id="994a2-745">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</span></span></param>
        <summary><span data-ttu-id="994a2-746">Grupuje elementy sekwencji zgodnie z funkcją selektora kluczy.</span><span class="sxs-lookup"><span data-stu-id="994a2-746">Groups the elements of a sequence according to a key selector function.</span></span> <span data-ttu-id="994a2-747">Klucze są porównywane przy użyciu funkcji porównującej, a elementy każdej grupy są rzutowane przy użyciu określonej usługi.</span><span class="sxs-lookup"><span data-stu-id="994a2-747">The keys are compared by using a comparer and each group's elements are projected by using a specified function.</span></span></summary>
        <returns><span data-ttu-id="994a2-748"><c>Interfejs IEnumerable&lt;IGrouping&lt;TKey,&gt; tele&gt;</c> w C# lub <c>IEnumerable (of IGrouping (of TKey, tele))</c> w Visual Basic gdzie każdy <see cref="T:System.Linq.IGrouping`2" /> obiekt zawiera Kolekcja obiektów typu <paramref name="TElement" /> i klucza.</span><span class="sxs-lookup"><span data-stu-id="994a2-748">An <c>IEnumerable&lt;IGrouping&lt;TKey, TElement&gt;&gt;</c> in C# or <c>IEnumerable(Of IGrouping(Of TKey, TElement))</c> in Visual Basic where each <see cref="T:System.Linq.IGrouping`2" /> object contains a collection of objects of type <paramref name="TElement" /> and a key.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-749">Ta metoda jest implementowana za pomocą odroczonego wykonania.</span><span class="sxs-lookup"><span data-stu-id="994a2-749">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="994a2-750">Bezpośrednio zwracana wartość jest obiektem, który przechowuje wszystkie informacje wymagane do wykonania akcji.</span><span class="sxs-lookup"><span data-stu-id="994a2-750">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="994a2-751">Zapytanie reprezentowane przez tę metodę nie jest wykonywane `GetEnumerator` do momentu wyliczenia obiektu przez wywołanie jego metody bezpośrednio lub przy użyciu `foreach` w wizualizacji C# lub `For Each` w Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="994a2-751">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="994a2-752">Przykłady `GroupBy`można znaleźć w następujących artykułach:</span><span class="sxs-lookup"><span data-stu-id="994a2-752">For examples of `GroupBy`, see the following articles:</span></span>
>   
> - <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29>  
> - <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%29>  
> - <xref:System.Linq.Enumerable.GroupBy%60%604%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%29>  
  
 <span data-ttu-id="994a2-753"><xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> Metoda zwraca<xref:System.Linq.IGrouping%602> kolekcję obiektów, jeden dla każdego napotkanego oddzielnego klucza.</span><span class="sxs-lookup"><span data-stu-id="994a2-753">The <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> method returns a collection of <xref:System.Linq.IGrouping%602> objects, one for each distinct key that was encountered.</span></span> <span data-ttu-id="994a2-754"><xref:System.Linq.IGrouping%602> Jesttorównieżklucz<xref:System.Collections.Generic.IEnumerable%601> skojarzony z jego elementami.</span><span class="sxs-lookup"><span data-stu-id="994a2-754">An <xref:System.Linq.IGrouping%602> is an <xref:System.Collections.Generic.IEnumerable%601> that also has a key associated with its elements.</span></span>  
  
 <span data-ttu-id="994a2-755">Obiekty są uzyskiwane w kolejności na podstawie kolejności elementów w programie `source` , która wygenerowała pierwszy klucz każdego z nich <xref:System.Linq.IGrouping%602>. <xref:System.Linq.IGrouping%602></span><span class="sxs-lookup"><span data-stu-id="994a2-755">The <xref:System.Linq.IGrouping%602> objects are yielded in an order based on the order of the elements in `source` that produced the first key of each <xref:System.Linq.IGrouping%602>.</span></span> <span data-ttu-id="994a2-756">Elementy w grupowaniu są generowane w kolejności, w jakiej są wyświetlane elementy, w `source`których zostały utworzone.</span><span class="sxs-lookup"><span data-stu-id="994a2-756">Elements in a grouping are yielded in the order that the elements that produced them appear in `source`.</span></span>  
  
 <span data-ttu-id="994a2-757">Jeśli `comparer` <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> jest `null`, domyślną funkcję porównującą równość używa się do porównywania kluczy.</span><span class="sxs-lookup"><span data-stu-id="994a2-757">If `comparer` is `null`, the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> is used to compare keys.</span></span>  
  
 <span data-ttu-id="994a2-758">Jeśli dwa klucze są uważane za równe `comparer`, pierwszy klucz jest wybierany jako klucz dla tego grupowania.</span><span class="sxs-lookup"><span data-stu-id="994a2-758">If two keys are considered equal according to `comparer`, the first key is chosen as the key for that grouping.</span></span>  
  
 <span data-ttu-id="994a2-759">W `group by` składni wyrażenia zapytania, klauzula (wizualizacja C#) `Group By Into` lub (Visual Basic) <xref:System.Linq.Enumerable.GroupBy%2A>tłumaczy na wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-759">In query expression syntax, a `group by` (Visual C#) or `Group By Into` (Visual Basic) clause translates to an invocation of <xref:System.Linq.Enumerable.GroupBy%2A>.</span></span> <span data-ttu-id="994a2-760">Aby uzyskać więcej informacji i przykłady użycia, zobacz [klauzula](~/docs/csharp/language-reference/keywords/group-clause.md) Group i [klauzula GROUP by](~/docs/visual-basic/language-reference/queries/group-by-clause.md).</span><span class="sxs-lookup"><span data-stu-id="994a2-760">For more information and usage examples, see [group clause](~/docs/csharp/language-reference/keywords/group-clause.md) and [Group By Clause](~/docs/visual-basic/language-reference/queries/group-by-clause.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-761"><paramref name="source" />or <paramref name="keySelector" /> lub <paramref name="elementSelector" /> is .<see langword="null" /></span><span class="sxs-lookup"><span data-stu-id="994a2-761"><paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/csharp/language-reference/keywords/group-clause.md"><span data-ttu-id="994a2-762">group — Klauzula (odwołanie w C#)</span><span class="sxs-lookup"><span data-stu-id="994a2-762">group clause (C# Reference)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/group-by-clause.md"><span data-ttu-id="994a2-763">Group By — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-763">Group By Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GroupBy&lt;TSource,TKey,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; GroupBy&lt;TSource,TKey,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TSource&gt;,TResult&gt; resultSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; GroupBy&lt;TSource, TKey, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Func`3&lt;!!TKey, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt;, !!TResult&gt; resultSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GroupBy(Of TSource, TKey, TResult) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), resultSelector As Func(Of TKey, IEnumerable(Of TSource), TResult)) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ GroupBy(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, Func&lt;TKey, System::Collections::Generic::IEnumerable&lt;TSource&gt; ^, TResult&gt; ^ resultSelector);" />
      <MemberSignature Language="F#" Value="static member GroupBy : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * Func&lt;'Key, seq&lt;'Source&gt;, 'Result&gt; -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.GroupBy (source, keySelector, resultSelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="resultSelector" Type="System.Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TSource&gt;,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-764">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-764">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TKey"><span data-ttu-id="994a2-765">Typ klucza zwracanego przez <paramref name="keySelector" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-765">The type of the key returned by <paramref name="keySelector" />.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="994a2-766">Typ wartości wyniku zwróconej przez <paramref name="resultSelector" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-766">The type of the result value returned by <paramref name="resultSelector" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-767">, <see cref="T:System.Collections.Generic.IEnumerable`1" /> Których elementów należy grupować.</span><span class="sxs-lookup"><span data-stu-id="994a2-767">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to group.</span></span></param>
        <param name="keySelector"><span data-ttu-id="994a2-768">Funkcja wyodrębniania klucza do każdego elementu.</span><span class="sxs-lookup"><span data-stu-id="994a2-768">A function to extract the key for each element.</span></span></param>
        <param name="resultSelector"><span data-ttu-id="994a2-769">Funkcja tworzenia wartości wyniku z każdej grupy.</span><span class="sxs-lookup"><span data-stu-id="994a2-769">A function to create a result value from each group.</span></span></param>
        <summary><span data-ttu-id="994a2-770">Grupuje elementy sekwencji zgodnie z określoną kluczową funkcją wyboru i tworzy wartość wyniku z każdej grupy i klucza.</span><span class="sxs-lookup"><span data-stu-id="994a2-770">Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.</span></span></summary>
        <returns><span data-ttu-id="994a2-771">Kolekcja elementów typu <paramref name="TResult" /> , gdzie każdy element reprezentuje projekcję nad grupą i jej klucz.</span><span class="sxs-lookup"><span data-stu-id="994a2-771">A collection of elements of type <paramref name="TResult" /> where each element represents a projection over a group and its key.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-772">W `group by` składni wyrażenia zapytania, klauzula (wizualizacja C#) `Group By Into` lub (Visual Basic) <xref:System.Linq.Enumerable.GroupBy%2A>tłumaczy na wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-772">In query expression syntax, a `group by` (Visual C#) or `Group By Into` (Visual Basic) clause translates to an invocation of <xref:System.Linq.Enumerable.GroupBy%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-773">Poniższy przykład kodu demonstruje, jak używać <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%29> do grupowania elementów sekwencji i projektu sekwencji wyników typu. `TResult`</span><span class="sxs-lookup"><span data-stu-id="994a2-773">The following code example demonstrates how to use <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%29> to group the elements of a sequence and project a sequence of results of type `TResult`.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#15)]
 [!code-vb[System.Linq.Enumerable#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#15)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/csharp/language-reference/keywords/group-clause.md"><span data-ttu-id="994a2-774">group — Klauzula (odwołanie w C#)</span><span class="sxs-lookup"><span data-stu-id="994a2-774">group clause (C# Reference)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/group-by-clause.md"><span data-ttu-id="994a2-775">Group By — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-775">Group By Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GroupBy&lt;TSource,TKey,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; GroupBy&lt;TSource,TKey,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TSource&gt;,TResult&gt; resultSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; GroupBy&lt;TSource, TKey, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Func`3&lt;!!TKey, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt;, !!TResult&gt; resultSelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GroupBy(Of TSource, TKey, TResult) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), resultSelector As Func(Of TKey, IEnumerable(Of TSource), TResult), comparer As IEqualityComparer(Of TKey)) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ GroupBy(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, Func&lt;TKey, System::Collections::Generic::IEnumerable&lt;TSource&gt; ^, TResult&gt; ^ resultSelector, System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member GroupBy : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * Func&lt;'Key, seq&lt;'Source&gt;, 'Result&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.GroupBy (source, keySelector, resultSelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="resultSelector" Type="System.Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TSource&gt;,TResult&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-776">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-776">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TKey"><span data-ttu-id="994a2-777">Typ klucza zwracanego przez <paramref name="keySelector" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-777">The type of the key returned by <paramref name="keySelector" />.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="994a2-778">Typ wartości wyniku zwróconej przez <paramref name="resultSelector" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-778">The type of the result value returned by <paramref name="resultSelector" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-779">, <see cref="T:System.Collections.Generic.IEnumerable`1" /> Których elementów należy grupować.</span><span class="sxs-lookup"><span data-stu-id="994a2-779">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to group.</span></span></param>
        <param name="keySelector"><span data-ttu-id="994a2-780">Funkcja wyodrębniania klucza do każdego elementu.</span><span class="sxs-lookup"><span data-stu-id="994a2-780">A function to extract the key for each element.</span></span></param>
        <param name="resultSelector"><span data-ttu-id="994a2-781">Funkcja tworzenia wartości wyniku z każdej grupy.</span><span class="sxs-lookup"><span data-stu-id="994a2-781">A function to create a result value from each group.</span></span></param>
        <param name="comparer"><span data-ttu-id="994a2-782"><see cref="T:System.Collections.Generic.IEqualityComparer`1" /> Aby porównać klucze z.</span><span class="sxs-lookup"><span data-stu-id="994a2-782">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys with.</span></span></param>
        <summary><span data-ttu-id="994a2-783">Grupuje elementy sekwencji zgodnie z określoną kluczową funkcją wyboru i tworzy wartość wyniku z każdej grupy i klucza.</span><span class="sxs-lookup"><span data-stu-id="994a2-783">Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.</span></span> <span data-ttu-id="994a2-784">Klucze są porównywane przy użyciu określonej funkcji porównującej.</span><span class="sxs-lookup"><span data-stu-id="994a2-784">The keys are compared by using a specified comparer.</span></span></summary>
        <returns><span data-ttu-id="994a2-785">Kolekcja elementów typu <paramref name="TResult" /> , gdzie każdy element reprezentuje projekcję nad grupą i jej klucz.</span><span class="sxs-lookup"><span data-stu-id="994a2-785">A collection of elements of type <paramref name="TResult" /> where each element represents a projection over a group and its key.</span></span></returns>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/csharp/language-reference/keywords/group-clause.md"><span data-ttu-id="994a2-786">group — Klauzula (odwołanie w C#)</span><span class="sxs-lookup"><span data-stu-id="994a2-786">group clause (C# Reference)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/group-by-clause.md"><span data-ttu-id="994a2-787">Group By — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-787">Group By Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GroupBy&lt;TSource,TKey,TElement,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; GroupBy&lt;TSource,TKey,TElement,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TSource,TElement&gt; elementSelector, Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TElement&gt;,TResult&gt; resultSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; GroupBy&lt;TSource, TKey, TElement, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Func`2&lt;!!TSource, !!TElement&gt; elementSelector, class System.Func`3&lt;!!TKey, class System.Collections.Generic.IEnumerable`1&lt;!!TElement&gt;, !!TResult&gt; resultSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GroupBy(Of TSource, TKey, TElement, TResult) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement), resultSelector As Func(Of TKey, IEnumerable(Of TElement), TResult)) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey, typename TElement, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ GroupBy(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, Func&lt;TSource, TElement&gt; ^ elementSelector, Func&lt;TKey, System::Collections::Generic::IEnumerable&lt;TElement&gt; ^, TResult&gt; ^ resultSelector);" />
      <MemberSignature Language="F#" Value="static member GroupBy : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * Func&lt;'Source, 'Element&gt; * Func&lt;'Key, seq&lt;'Element&gt;, 'Result&gt; -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.GroupBy (source, keySelector, elementSelector, resultSelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TElement" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="elementSelector" Type="System.Func&lt;TSource,TElement&gt;" />
        <Parameter Name="resultSelector" Type="System.Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TElement&gt;,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-788">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-788">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TKey"><span data-ttu-id="994a2-789">Typ klucza zwracanego przez <paramref name="keySelector" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-789">The type of the key returned by <paramref name="keySelector" />.</span></span></typeparam>
        <typeparam name="TElement"><span data-ttu-id="994a2-790">Typ elementów w każdym z nich <see cref="T:System.Linq.IGrouping`2" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-790">The type of the elements in each <see cref="T:System.Linq.IGrouping`2" />.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="994a2-791">Typ wartości wyniku zwróconej przez <paramref name="resultSelector" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-791">The type of the result value returned by <paramref name="resultSelector" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-792">, <see cref="T:System.Collections.Generic.IEnumerable`1" /> Których elementów należy grupować.</span><span class="sxs-lookup"><span data-stu-id="994a2-792">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to group.</span></span></param>
        <param name="keySelector"><span data-ttu-id="994a2-793">Funkcja wyodrębniania klucza do każdego elementu.</span><span class="sxs-lookup"><span data-stu-id="994a2-793">A function to extract the key for each element.</span></span></param>
        <param name="elementSelector"><span data-ttu-id="994a2-794">Funkcja mapowania każdego elementu źródłowego do elementu w <see cref="T:System.Linq.IGrouping`2" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-794">A function to map each source element to an element in an <see cref="T:System.Linq.IGrouping`2" />.</span></span></param>
        <param name="resultSelector"><span data-ttu-id="994a2-795">Funkcja tworzenia wartości wyniku z każdej grupy.</span><span class="sxs-lookup"><span data-stu-id="994a2-795">A function to create a result value from each group.</span></span></param>
        <summary><span data-ttu-id="994a2-796">Grupuje elementy sekwencji zgodnie z określoną kluczową funkcją wyboru i tworzy wartość wyniku z każdej grupy i klucza.</span><span class="sxs-lookup"><span data-stu-id="994a2-796">Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.</span></span> <span data-ttu-id="994a2-797">Elementy każdej grupy są rzutowane przy użyciu określonej funkcji.</span><span class="sxs-lookup"><span data-stu-id="994a2-797">The elements of each group are projected by using a specified function.</span></span></summary>
        <returns><span data-ttu-id="994a2-798">Kolekcja elementów typu <paramref name="TResult" /> , gdzie każdy element reprezentuje projekcję nad grupą i jej klucz.</span><span class="sxs-lookup"><span data-stu-id="994a2-798">A collection of elements of type <paramref name="TResult" /> where each element represents a projection over a group and its key.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-799">W `group by` składni wyrażenia zapytania, klauzula (wizualizacja C#) `Group By Into` lub (Visual Basic) <xref:System.Linq.Enumerable.GroupBy%2A>tłumaczy na wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-799">In query expression syntax, a `group by` (Visual C#) or `Group By Into` (Visual Basic) clause translates to an invocation of <xref:System.Linq.Enumerable.GroupBy%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-800">Poniższy przykład kodu ilustruje sposób używania <xref:System.Linq.Enumerable.GroupBy%60%604%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%29> do grupowania rzutowanych elementów sekwencji, a następnie tworzenia kolejności wyników typu. `TResult`</span><span class="sxs-lookup"><span data-stu-id="994a2-800">The following code example demonstrates how to use <xref:System.Linq.Enumerable.GroupBy%60%604%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%29> to group the projected elements of a sequence and then project a sequence of results of type `TResult`.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#125](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#125)]
 [!code-vb[System.Linq.Enumerable#125](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#125)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="~/docs/csharp/language-reference/keywords/group-clause.md"><span data-ttu-id="994a2-801">group — Klauzula (odwołanie w C#)</span><span class="sxs-lookup"><span data-stu-id="994a2-801">group clause (C# Reference)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/group-by-clause.md"><span data-ttu-id="994a2-802">Group By — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-802">Group By Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GroupBy&lt;TSource,TKey,TElement,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; GroupBy&lt;TSource,TKey,TElement,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TSource,TElement&gt; elementSelector, Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TElement&gt;,TResult&gt; resultSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; GroupBy&lt;TSource, TKey, TElement, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Func`2&lt;!!TSource, !!TElement&gt; elementSelector, class System.Func`3&lt;!!TKey, class System.Collections.Generic.IEnumerable`1&lt;!!TElement&gt;, !!TResult&gt; resultSelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GroupBy(Of TSource, TKey, TElement, TResult) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement), resultSelector As Func(Of TKey, IEnumerable(Of TElement), TResult), comparer As IEqualityComparer(Of TKey)) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey, typename TElement, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ GroupBy(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, Func&lt;TSource, TElement&gt; ^ elementSelector, Func&lt;TKey, System::Collections::Generic::IEnumerable&lt;TElement&gt; ^, TResult&gt; ^ resultSelector, System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member GroupBy : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * Func&lt;'Source, 'Element&gt; * Func&lt;'Key, seq&lt;'Element&gt;, 'Result&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.GroupBy (source, keySelector, elementSelector, resultSelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TElement" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="elementSelector" Type="System.Func&lt;TSource,TElement&gt;" />
        <Parameter Name="resultSelector" Type="System.Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TElement&gt;,TResult&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-803">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-803">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TKey"><span data-ttu-id="994a2-804">Typ klucza zwracanego przez <paramref name="keySelector" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-804">The type of the key returned by <paramref name="keySelector" />.</span></span></typeparam>
        <typeparam name="TElement"><span data-ttu-id="994a2-805">Typ elementów w każdym z nich <see cref="T:System.Linq.IGrouping`2" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-805">The type of the elements in each <see cref="T:System.Linq.IGrouping`2" />.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="994a2-806">Typ wartości wyniku zwróconej przez <paramref name="resultSelector" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-806">The type of the result value returned by <paramref name="resultSelector" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-807">, <see cref="T:System.Collections.Generic.IEnumerable`1" /> Których elementów należy grupować.</span><span class="sxs-lookup"><span data-stu-id="994a2-807">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to group.</span></span></param>
        <param name="keySelector"><span data-ttu-id="994a2-808">Funkcja wyodrębniania klucza do każdego elementu.</span><span class="sxs-lookup"><span data-stu-id="994a2-808">A function to extract the key for each element.</span></span></param>
        <param name="elementSelector"><span data-ttu-id="994a2-809">Funkcja mapowania każdego elementu źródłowego do elementu w <see cref="T:System.Linq.IGrouping`2" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-809">A function to map each source element to an element in an <see cref="T:System.Linq.IGrouping`2" />.</span></span></param>
        <param name="resultSelector"><span data-ttu-id="994a2-810">Funkcja tworzenia wartości wyniku z każdej grupy.</span><span class="sxs-lookup"><span data-stu-id="994a2-810">A function to create a result value from each group.</span></span></param>
        <param name="comparer"><span data-ttu-id="994a2-811"><see cref="T:System.Collections.Generic.IEqualityComparer`1" /> Aby porównać klucze z.</span><span class="sxs-lookup"><span data-stu-id="994a2-811">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys with.</span></span></param>
        <summary><span data-ttu-id="994a2-812">Grupuje elementy sekwencji zgodnie z określoną kluczową funkcją wyboru i tworzy wartość wyniku z każdej grupy i klucza.</span><span class="sxs-lookup"><span data-stu-id="994a2-812">Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.</span></span> <span data-ttu-id="994a2-813">Wartości klucza są porównywane przy użyciu określonej funkcji porównującej, a elementy każdej grupy są rzutowane przy użyciu określonej usługi.</span><span class="sxs-lookup"><span data-stu-id="994a2-813">Key values are compared by using a specified comparer, and the elements of each group are projected by using a specified function.</span></span></summary>
        <returns><span data-ttu-id="994a2-814">Kolekcja elementów typu <paramref name="TResult" /> , gdzie każdy element reprezentuje projekcję nad grupą i jej klucz.</span><span class="sxs-lookup"><span data-stu-id="994a2-814">A collection of elements of type <paramref name="TResult" /> where each element represents a projection over a group and its key.</span></span></returns>
        <remarks>To be added.</remarks>
        <related type="Article" href="~/docs/csharp/language-reference/keywords/group-clause.md"><span data-ttu-id="994a2-815">group — Klauzula (odwołanie w C#)</span><span class="sxs-lookup"><span data-stu-id="994a2-815">group clause (C# Reference)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/group-by-clause.md"><span data-ttu-id="994a2-816">Group By — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-816">Group By Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="GroupJoin&lt;TOuter,TInner,TKey,TResult&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="994a2-817">Skorelowanie elementów dwóch sekwencji w oparciu o równość klucza i grupuje wyniki.</span><span class="sxs-lookup"><span data-stu-id="994a2-817">Correlates the elements of two sequences based on key equality, and groups the results.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GroupJoin&lt;TOuter,TInner,TKey,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; GroupJoin&lt;TOuter,TInner,TKey,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TOuter&gt; outer, System.Collections.Generic.IEnumerable&lt;TInner&gt; inner, Func&lt;TOuter,TKey&gt; outerKeySelector, Func&lt;TInner,TKey&gt; innerKeySelector, Func&lt;TOuter,System.Collections.Generic.IEnumerable&lt;TInner&gt;,TResult&gt; resultSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; GroupJoin&lt;TOuter, TInner, TKey, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TOuter&gt; outer, class System.Collections.Generic.IEnumerable`1&lt;!!TInner&gt; inner, class System.Func`2&lt;!!TOuter, !!TKey&gt; outerKeySelector, class System.Func`2&lt;!!TInner, !!TKey&gt; innerKeySelector, class System.Func`3&lt;!!TOuter, class System.Collections.Generic.IEnumerable`1&lt;!!TInner&gt;, !!TResult&gt; resultSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GroupJoin(Of TOuter, TInner, TKey, TResult) (outer As IEnumerable(Of TOuter), inner As IEnumerable(Of TInner), outerKeySelector As Func(Of TOuter, TKey), innerKeySelector As Func(Of TInner, TKey), resultSelector As Func(Of TOuter, IEnumerable(Of TInner), TResult)) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOuter, typename TInner, typename TKey, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ GroupJoin(System::Collections::Generic::IEnumerable&lt;TOuter&gt; ^ outer, System::Collections::Generic::IEnumerable&lt;TInner&gt; ^ inner, Func&lt;TOuter, TKey&gt; ^ outerKeySelector, Func&lt;TInner, TKey&gt; ^ innerKeySelector, Func&lt;TOuter, System::Collections::Generic::IEnumerable&lt;TInner&gt; ^, TResult&gt; ^ resultSelector);" />
      <MemberSignature Language="F#" Value="static member GroupJoin : seq&lt;'Outer&gt; * seq&lt;'Inner&gt; * Func&lt;'Outer, 'Key&gt; * Func&lt;'Inner, 'Key&gt; * Func&lt;'Outer, seq&lt;'Inner&gt;, 'Result&gt; -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.GroupJoin (outer, inner, outerKeySelector, innerKeySelector, resultSelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOuter" />
        <TypeParameter Name="TInner" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="outer" Type="System.Collections.Generic.IEnumerable&lt;TOuter&gt;" RefType="this" />
        <Parameter Name="inner" Type="System.Collections.Generic.IEnumerable&lt;TInner&gt;" />
        <Parameter Name="outerKeySelector" Type="System.Func&lt;TOuter,TKey&gt;" />
        <Parameter Name="innerKeySelector" Type="System.Func&lt;TInner,TKey&gt;" />
        <Parameter Name="resultSelector" Type="System.Func&lt;TOuter,System.Collections.Generic.IEnumerable&lt;TInner&gt;,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TOuter"><span data-ttu-id="994a2-818">Typ elementów pierwszej sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-818">The type of the elements of the first sequence.</span></span></typeparam>
        <typeparam name="TInner"><span data-ttu-id="994a2-819">Typ elementów drugiej sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-819">The type of the elements of the second sequence.</span></span></typeparam>
        <typeparam name="TKey"><span data-ttu-id="994a2-820">Typ kluczy zwracanych przez funkcje przełącznika kluczowego.</span><span class="sxs-lookup"><span data-stu-id="994a2-820">The type of the keys returned by the key selector functions.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="994a2-821">Typ elementów wyniku.</span><span class="sxs-lookup"><span data-stu-id="994a2-821">The type of the result elements.</span></span></typeparam>
        <param name="outer"><span data-ttu-id="994a2-822">Pierwsza sekwencja do przyłączenia.</span><span class="sxs-lookup"><span data-stu-id="994a2-822">The first sequence to join.</span></span></param>
        <param name="inner"><span data-ttu-id="994a2-823">Sekwencja do przyłączenia do pierwszej sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-823">The sequence to join to the first sequence.</span></span></param>
        <param name="outerKeySelector"><span data-ttu-id="994a2-824">Funkcja wyodrębniania klucza łączenia z każdego elementu pierwszej sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-824">A function to extract the join key from each element of the first sequence.</span></span></param>
        <param name="innerKeySelector"><span data-ttu-id="994a2-825">Funkcja wyodrębniania klucza łączenia z każdego elementu drugiej sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-825">A function to extract the join key from each element of the second sequence.</span></span></param>
        <param name="resultSelector"><span data-ttu-id="994a2-826">Funkcja do tworzenia elementu wyniku z elementu z pierwszej sekwencji i kolekcji pasujących elementów z drugiej sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-826">A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.</span></span></param>
        <summary><span data-ttu-id="994a2-827">Skorelowanie elementów dwóch sekwencji na podstawie równości kluczy i grupuje wyniki.</span><span class="sxs-lookup"><span data-stu-id="994a2-827">Correlates the elements of two sequences based on equality of keys and groups the results.</span></span> <span data-ttu-id="994a2-828">Domyślna funkcja porównująca równość jest używana do porównywania kluczy.</span><span class="sxs-lookup"><span data-stu-id="994a2-828">The default equality comparer is used to compare keys.</span></span></summary>
        <returns><span data-ttu-id="994a2-829">Element <see cref="T:System.Collections.Generic.IEnumerable`1" /> zawierający elementy typu <paramref name="TResult" /> , które są uzyskiwane przez wykonanie zgrupowanych sprzężeń na dwie sekwencje.</span><span class="sxs-lookup"><span data-stu-id="994a2-829">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains elements of type <paramref name="TResult" /> that are obtained by performing a grouped join on two sequences.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-830">Ta metoda jest implementowana za pomocą odroczonego wykonania.</span><span class="sxs-lookup"><span data-stu-id="994a2-830">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="994a2-831">Bezpośrednio zwracana wartość jest obiektem, który przechowuje wszystkie informacje wymagane do wykonania akcji.</span><span class="sxs-lookup"><span data-stu-id="994a2-831">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="994a2-832">Zapytanie reprezentowane przez tę metodę nie jest wykonywane `GetEnumerator` do momentu wyliczenia obiektu przez wywołanie jego metody bezpośrednio lub przy użyciu `foreach` w wizualizacji C# lub `For Each` w Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="994a2-832">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="994a2-833">Domyślna funkcja porównująca <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>równość jest używana do mieszania i porównywania kluczy.</span><span class="sxs-lookup"><span data-stu-id="994a2-833">The default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to hash and compare keys.</span></span>  
  
 <span data-ttu-id="994a2-834"><xref:System.Linq.Enumerable.GroupJoin%2A>generuje hierarchiczne wyniki, co oznacza, że `outer` elementy z są sparowane z kolekcjami pasujących elementów z. `inner`</span><span class="sxs-lookup"><span data-stu-id="994a2-834"><xref:System.Linq.Enumerable.GroupJoin%2A> produces hierarchical results, which means that elements from `outer` are paired with collections of matching elements from `inner`.</span></span> <span data-ttu-id="994a2-835">`GroupJoin`umożliwia oparcie wyników na całym zestawie dopasowań dla każdego elementu `outer`.</span><span class="sxs-lookup"><span data-stu-id="994a2-835">`GroupJoin` enables you to base your results on a whole set of matches for each element of `outer`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="994a2-836">Jeśli nie ma żadnych skorelowanych elementów w `inner` dla danego `outer`elementu, sekwencja dopasowań dla tego elementu będzie pusta, ale nadal będzie wyświetlana w wynikach.</span><span class="sxs-lookup"><span data-stu-id="994a2-836">If there are no correlated elements in `inner` for a given element of `outer`, the sequence of matches for that element will be empty but will still appear in the results.</span></span>  
  
 <span data-ttu-id="994a2-837">Funkcja jest wywoływana tylko raz dla każdego `outer` elementu wraz z kolekcją wszystkich `inner` elementów, które pasują do `outer` elementu. `resultSelector`</span><span class="sxs-lookup"><span data-stu-id="994a2-837">The `resultSelector` function is called only one time for each `outer` element together with a collection of all the `inner` elements that match the `outer` element.</span></span> <span data-ttu-id="994a2-838">Różni się to od <xref:System.Linq.Enumerable.Join%2A> metody, w której funkcja selektora wyników jest wywoływana na parach, które zawierają jeden element `outer` z i jeden element `inner`z.</span><span class="sxs-lookup"><span data-stu-id="994a2-838">This differs from the <xref:System.Linq.Enumerable.Join%2A> method, in which the result selector function is invoked on pairs that contain one element from `outer` and one element from `inner`.</span></span>  
  
 <span data-ttu-id="994a2-839">`GroupJoin`zachowuje kolejność elementów `outer`i dla każdego `outer`elementu, w kolejności pasujących elementów od `inner`.</span><span class="sxs-lookup"><span data-stu-id="994a2-839">`GroupJoin` preserves the order of the elements of `outer`, and for each element of `outer`, the order of the matching elements from `inner`.</span></span>  
  
 <span data-ttu-id="994a2-840"><xref:System.Linq.Enumerable.GroupJoin%2A>nie ma bezpośredniego odpowiednika w tradycyjnych warunkach relacyjnej bazy danych.</span><span class="sxs-lookup"><span data-stu-id="994a2-840"><xref:System.Linq.Enumerable.GroupJoin%2A> has no direct equivalent in traditional relational database terms.</span></span> <span data-ttu-id="994a2-841">Jednakże ta metoda implementuje nadzbiór sprzężeń wewnętrznych i Lewe sprzężenia zewnętrzne.</span><span class="sxs-lookup"><span data-stu-id="994a2-841">However, this method does implement a superset of inner joins and left outer joins.</span></span> <span data-ttu-id="994a2-842">Obie te operacje można napisać w odniesieniu do zgrupowanego sprzężenia.</span><span class="sxs-lookup"><span data-stu-id="994a2-842">Both of these operations can be written in terms of a grouped join.</span></span> <span data-ttu-id="994a2-843">Zobacz [Operacje łączenia](https://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107).</span><span class="sxs-lookup"><span data-stu-id="994a2-843">See [Join Operations](https://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107).</span></span>  
  
 <span data-ttu-id="994a2-844">W `join … into` składni wyrażenia zapytania, klauzula (wizualizacja C#) `Group Join` lub (Visual Basic) <xref:System.Linq.Enumerable.GroupJoin%2A>tłumaczy na wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-844">In query expression syntax, a `join … into` (Visual C#) or `Group Join` (Visual Basic) clause translates to an invocation of <xref:System.Linq.Enumerable.GroupJoin%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-845">Poniższy przykład kodu demonstruje, jak używać <xref:System.Linq.Enumerable.GroupJoin%60%604%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2C%60%603%7D%29> do wykonywania zgrupowanych sprzężeń na dwóch sekwencjach.</span><span class="sxs-lookup"><span data-stu-id="994a2-845">The following code example demonstrates how to use <xref:System.Linq.Enumerable.GroupJoin%60%604%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2C%60%603%7D%29> to perform a grouped join on two sequences.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#40](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#40)]
 [!code-vb[System.Linq.Enumerable#40](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#40)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-846"><paramref name="outer" /><paramref name="inner" /> orlub<see langword="null" />or. <paramref name="outerKeySelector" /> <paramref name="innerKeySelector" /> <paramref name="resultSelector" /></span><span class="sxs-lookup"><span data-stu-id="994a2-846"><paramref name="outer" /> or <paramref name="inner" /> or <paramref name="outerKeySelector" /> or <paramref name="innerKeySelector" /> or <paramref name="resultSelector" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107"><span data-ttu-id="994a2-847">Operacje połączone</span><span class="sxs-lookup"><span data-stu-id="994a2-847">Join Operations</span></span></related>
        <related type="Article" href="~/docs/csharp/language-reference/keywords/join-clause.md"><span data-ttu-id="994a2-848">Klauzula join (odwołanie w C#)</span><span class="sxs-lookup"><span data-stu-id="994a2-848">join clause (C# Reference)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/group-join-clause.md"><span data-ttu-id="994a2-849">Group Join — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-849">Group Join Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="GroupJoin&lt;TOuter,TInner,TKey,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; GroupJoin&lt;TOuter,TInner,TKey,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TOuter&gt; outer, System.Collections.Generic.IEnumerable&lt;TInner&gt; inner, Func&lt;TOuter,TKey&gt; outerKeySelector, Func&lt;TInner,TKey&gt; innerKeySelector, Func&lt;TOuter,System.Collections.Generic.IEnumerable&lt;TInner&gt;,TResult&gt; resultSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; GroupJoin&lt;TOuter, TInner, TKey, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TOuter&gt; outer, class System.Collections.Generic.IEnumerable`1&lt;!!TInner&gt; inner, class System.Func`2&lt;!!TOuter, !!TKey&gt; outerKeySelector, class System.Func`2&lt;!!TInner, !!TKey&gt; innerKeySelector, class System.Func`3&lt;!!TOuter, class System.Collections.Generic.IEnumerable`1&lt;!!TInner&gt;, !!TResult&gt; resultSelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GroupJoin(Of TOuter, TInner, TKey, TResult) (outer As IEnumerable(Of TOuter), inner As IEnumerable(Of TInner), outerKeySelector As Func(Of TOuter, TKey), innerKeySelector As Func(Of TInner, TKey), resultSelector As Func(Of TOuter, IEnumerable(Of TInner), TResult), comparer As IEqualityComparer(Of TKey)) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOuter, typename TInner, typename TKey, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ GroupJoin(System::Collections::Generic::IEnumerable&lt;TOuter&gt; ^ outer, System::Collections::Generic::IEnumerable&lt;TInner&gt; ^ inner, Func&lt;TOuter, TKey&gt; ^ outerKeySelector, Func&lt;TInner, TKey&gt; ^ innerKeySelector, Func&lt;TOuter, System::Collections::Generic::IEnumerable&lt;TInner&gt; ^, TResult&gt; ^ resultSelector, System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member GroupJoin : seq&lt;'Outer&gt; * seq&lt;'Inner&gt; * Func&lt;'Outer, 'Key&gt; * Func&lt;'Inner, 'Key&gt; * Func&lt;'Outer, seq&lt;'Inner&gt;, 'Result&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.GroupJoin (outer, inner, outerKeySelector, innerKeySelector, resultSelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOuter" />
        <TypeParameter Name="TInner" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="outer" Type="System.Collections.Generic.IEnumerable&lt;TOuter&gt;" RefType="this" />
        <Parameter Name="inner" Type="System.Collections.Generic.IEnumerable&lt;TInner&gt;" />
        <Parameter Name="outerKeySelector" Type="System.Func&lt;TOuter,TKey&gt;" />
        <Parameter Name="innerKeySelector" Type="System.Func&lt;TInner,TKey&gt;" />
        <Parameter Name="resultSelector" Type="System.Func&lt;TOuter,System.Collections.Generic.IEnumerable&lt;TInner&gt;,TResult&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TOuter"><span data-ttu-id="994a2-850">Typ elementów pierwszej sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-850">The type of the elements of the first sequence.</span></span></typeparam>
        <typeparam name="TInner"><span data-ttu-id="994a2-851">Typ elementów drugiej sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-851">The type of the elements of the second sequence.</span></span></typeparam>
        <typeparam name="TKey"><span data-ttu-id="994a2-852">Typ kluczy zwracanych przez funkcje przełącznika kluczowego.</span><span class="sxs-lookup"><span data-stu-id="994a2-852">The type of the keys returned by the key selector functions.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="994a2-853">Typ elementów wyniku.</span><span class="sxs-lookup"><span data-stu-id="994a2-853">The type of the result elements.</span></span></typeparam>
        <param name="outer"><span data-ttu-id="994a2-854">Pierwsza sekwencja do przyłączenia.</span><span class="sxs-lookup"><span data-stu-id="994a2-854">The first sequence to join.</span></span></param>
        <param name="inner"><span data-ttu-id="994a2-855">Sekwencja do przyłączenia do pierwszej sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-855">The sequence to join to the first sequence.</span></span></param>
        <param name="outerKeySelector"><span data-ttu-id="994a2-856">Funkcja wyodrębniania klucza łączenia z każdego elementu pierwszej sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-856">A function to extract the join key from each element of the first sequence.</span></span></param>
        <param name="innerKeySelector"><span data-ttu-id="994a2-857">Funkcja wyodrębniania klucza łączenia z każdego elementu drugiej sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-857">A function to extract the join key from each element of the second sequence.</span></span></param>
        <param name="resultSelector"><span data-ttu-id="994a2-858">Funkcja do tworzenia elementu wyniku z elementu z pierwszej sekwencji i kolekcji pasujących elementów z drugiej sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-858">A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.</span></span></param>
        <param name="comparer"><span data-ttu-id="994a2-859">Skróty <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> do mieszania i porównywania kluczy.</span><span class="sxs-lookup"><span data-stu-id="994a2-859">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to hash and compare keys.</span></span></param>
        <summary><span data-ttu-id="994a2-860">Skorelowanie elementów dwóch sekwencji w oparciu o równość klucza i grupuje wyniki.</span><span class="sxs-lookup"><span data-stu-id="994a2-860">Correlates the elements of two sequences based on key equality and groups the results.</span></span> <span data-ttu-id="994a2-861">Określony <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> jest używany do porównywania kluczy.</span><span class="sxs-lookup"><span data-stu-id="994a2-861">A specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> is used to compare keys.</span></span></summary>
        <returns><span data-ttu-id="994a2-862">Element <see cref="T:System.Collections.Generic.IEnumerable`1" /> zawierający elementy typu <paramref name="TResult" /> , które są uzyskiwane przez wykonanie zgrupowanych sprzężeń na dwie sekwencje.</span><span class="sxs-lookup"><span data-stu-id="994a2-862">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains elements of type <paramref name="TResult" /> that are obtained by performing a grouped join on two sequences.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-863">Ta metoda jest implementowana za pomocą odroczonego wykonania.</span><span class="sxs-lookup"><span data-stu-id="994a2-863">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="994a2-864">Bezpośrednio zwracana wartość jest obiektem, który przechowuje wszystkie informacje wymagane do wykonania akcji.</span><span class="sxs-lookup"><span data-stu-id="994a2-864">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="994a2-865">Zapytanie reprezentowane przez tę metodę nie jest wykonywane `GetEnumerator` do momentu wyliczenia obiektu przez wywołanie jego metody bezpośrednio lub przy użyciu `foreach` w wizualizacji C# lub `For Each` w Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="994a2-865">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="994a2-866">Jeśli `comparer` <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>jest `null`, domyślna funkcja porównująca równość,, jest używana do mieszania i porównywania kluczy.</span><span class="sxs-lookup"><span data-stu-id="994a2-866">If `comparer` is `null`, the default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to hash and compare keys.</span></span>  
  
 <span data-ttu-id="994a2-867"><xref:System.Linq.Enumerable.GroupJoin%2A>generuje hierarchiczne wyniki, co oznacza, że `outer` elementy z są sparowane z kolekcjami pasujących elementów z. `inner`</span><span class="sxs-lookup"><span data-stu-id="994a2-867"><xref:System.Linq.Enumerable.GroupJoin%2A> produces hierarchical results, which means that elements from `outer` are paired with collections of matching elements from `inner`.</span></span> <span data-ttu-id="994a2-868">`GroupJoin`umożliwia oparcie wyników na całym zestawie dopasowań dla każdego elementu `outer`.</span><span class="sxs-lookup"><span data-stu-id="994a2-868">`GroupJoin` enables you to base your results on a whole set of matches for each element of `outer`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="994a2-869">Jeśli nie ma żadnych skorelowanych elementów w `inner` dla danego `outer`elementu, sekwencja dopasowań dla tego elementu będzie pusta, ale nadal będzie wyświetlana w wynikach.</span><span class="sxs-lookup"><span data-stu-id="994a2-869">If there are no correlated elements in `inner` for a given element of `outer`, the sequence of matches for that element will be empty but will still appear in the results.</span></span>  
  
 <span data-ttu-id="994a2-870">Funkcja jest wywoływana tylko raz dla każdego `outer` elementu wraz z kolekcją wszystkich `inner` elementów, które pasują do `outer` elementu. `resultSelector`</span><span class="sxs-lookup"><span data-stu-id="994a2-870">The `resultSelector` function is called only one time for each `outer` element together with a collection of all the `inner` elements that match the `outer` element.</span></span> <span data-ttu-id="994a2-871">Różni się to od <xref:System.Linq.Enumerable.Join%2A> metody, w której funkcja selektora wyników jest wywoływana na parach, które zawierają jeden `outer` element z i jeden `inner`element z.</span><span class="sxs-lookup"><span data-stu-id="994a2-871">This differs from the <xref:System.Linq.Enumerable.Join%2A> method in which the result selector function is invoked on pairs that contain one element from `outer` and one element from `inner`.</span></span>  
  
 <span data-ttu-id="994a2-872">`GroupJoin`zachowuje kolejność elementów `outer`i dla każdego `outer`elementu, w kolejności pasujących elementów od `inner`.</span><span class="sxs-lookup"><span data-stu-id="994a2-872">`GroupJoin` preserves the order of the elements of `outer`, and for each element of `outer`, the order of the matching elements from `inner`.</span></span>  
  
 <span data-ttu-id="994a2-873"><xref:System.Linq.Enumerable.GroupJoin%2A>nie ma bezpośredniego odpowiednika w tradycyjnych warunkach relacyjnej bazy danych.</span><span class="sxs-lookup"><span data-stu-id="994a2-873"><xref:System.Linq.Enumerable.GroupJoin%2A> has no direct equivalent in traditional relational database terms.</span></span> <span data-ttu-id="994a2-874">Jednakże ta metoda implementuje nadzbiór sprzężeń wewnętrznych i Lewe sprzężenia zewnętrzne.</span><span class="sxs-lookup"><span data-stu-id="994a2-874">However, this method does implement a superset of inner joins and left outer joins.</span></span> <span data-ttu-id="994a2-875">Obie te operacje można napisać w odniesieniu do zgrupowanego sprzężenia.</span><span class="sxs-lookup"><span data-stu-id="994a2-875">Both of these operations can be written in terms of a grouped join.</span></span> <span data-ttu-id="994a2-876">Zobacz [Operacje łączenia](https://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107).</span><span class="sxs-lookup"><span data-stu-id="994a2-876">See [Join Operations](https://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-877"><paramref name="outer" /><paramref name="inner" /> orlub<see langword="null" />or. <paramref name="outerKeySelector" /> <paramref name="innerKeySelector" /> <paramref name="resultSelector" /></span><span class="sxs-lookup"><span data-stu-id="994a2-877"><paramref name="outer" /> or <paramref name="inner" /> or <paramref name="outerKeySelector" /> or <paramref name="innerKeySelector" /> or <paramref name="resultSelector" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107"><span data-ttu-id="994a2-878">Wykonywanie operacji JOIN</span><span class="sxs-lookup"><span data-stu-id="994a2-878">Performing Join Operations</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Intersect&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="994a2-879">Tworzy część wspólną dwóch sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-879">Produces the set intersection of two sequences.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

[!INCLUDE[interactive-note](~/includes/csharp-interactive-note-some.md)]

]]></format>
        </remarks>
        <related type="Article" href="https://docs.microsoft.com/dotnet/api/system.linq.enumerable.except"><span data-ttu-id="994a2-880">Wyliczalna Metoda. except</span><span class="sxs-lookup"><span data-stu-id="994a2-880">Enumerable.Except Method</span></span></related>
      </Docs>
    </MemberGroup>
    <Member MemberName="Intersect&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Intersect&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; first, System.Collections.Generic.IEnumerable&lt;TSource&gt; second);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Intersect&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; first, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; second) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Intersect(Of TSource) (first As IEnumerable(Of TSource), second As IEnumerable(Of TSource)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ Intersect(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ first, System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ second);" />
      <MemberSignature Language="F#" Value="static member Intersect : seq&lt;'Source&gt; * seq&lt;'Source&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.Intersect (first, second)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="first" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="second" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-881">Typ elementów sekwencji wejściowych.</span><span class="sxs-lookup"><span data-stu-id="994a2-881">The type of the elements of the input sequences.</span></span></typeparam>
        <param name="first"><span data-ttu-id="994a2-882">Zostaną zwrócone odrębne elementy, które również pojawiają się w programie <paramref name="second" />. <see cref="T:System.Collections.Generic.IEnumerable`1" /></span><span class="sxs-lookup"><span data-stu-id="994a2-882">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose distinct elements that also appear in <paramref name="second" /> will be returned.</span></span></param>
        <param name="second"><span data-ttu-id="994a2-883"><see cref="T:System.Collections.Generic.IEnumerable`1" /> Zostaną zwrócone odrębne elementy, które również pojawiają się w pierwszej sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-883">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose distinct elements that also appear in the first sequence will be returned.</span></span></param>
        <summary><span data-ttu-id="994a2-884">Tworzy przecięcie zestawu dwóch sekwencji przy użyciu domyślnej funkcji porównującej równość do porównywania wartości.</span><span class="sxs-lookup"><span data-stu-id="994a2-884">Produces the set intersection of two sequences by using the default equality comparer to compare values.</span></span></summary>
        <returns><span data-ttu-id="994a2-885">Sekwencja, która zawiera elementy, które tworzą przecięcie zestawu dwóch sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-885">A sequence that contains the elements that form the set intersection of two sequences.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-886">Ta metoda jest implementowana za pomocą odroczonego wykonania.</span><span class="sxs-lookup"><span data-stu-id="994a2-886">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="994a2-887">Bezpośrednio zwracana wartość jest obiektem, który przechowuje wszystkie informacje wymagane do wykonania akcji.</span><span class="sxs-lookup"><span data-stu-id="994a2-887">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="994a2-888">Zapytanie reprezentowane przez tę metodę nie jest wykonywane `GetEnumerator` do momentu wyliczenia obiektu przez wywołanie jego metody bezpośrednio lub przy użyciu `foreach` w wizualizacji C# lub `For Each` w Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="994a2-888">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="994a2-889">Część wspólną dwóch zestawów A i B jest definiowana jako zestaw, który zawiera wszystkie elementy elementu, który również występuje w B, ale nie inne elementy.</span><span class="sxs-lookup"><span data-stu-id="994a2-889">The intersection of two sets A and B is defined as the set that contains all the elements of A that also appear in B, but no other elements.</span></span>  
  
 <span data-ttu-id="994a2-890">Gdy obiekt zwracany przez tę metodę jest wyliczany, program `Intersect` zwraca różne elementy występujące w obu sekwencjach w kolejności, w jakiej występują w `first`.</span><span class="sxs-lookup"><span data-stu-id="994a2-890">When the object returned by this method is enumerated, `Intersect` yields distinct elements occurring in both sequences in the order in which they appear in `first`.</span></span>  
  
 <span data-ttu-id="994a2-891">Domyślna funkcja porównująca <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>równość jest używana do porównywania wartości typów.</span><span class="sxs-lookup"><span data-stu-id="994a2-891">The default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare values of the types.</span></span> <span data-ttu-id="994a2-892">Aby porównać niestandardowy typ danych, należy zastąpić <xref:System.Object.Equals%2A> <xref:System.Object.GetHashCode%2A> metody i i opcjonalnie zaimplementować <xref:System.IEquatable%601> interfejs generyczny w typie niestandardowym.</span><span class="sxs-lookup"><span data-stu-id="994a2-892">To compare a custom data type, you need to override the <xref:System.Object.Equals%2A> and the <xref:System.Object.GetHashCode%2A> methods, and optionally implement the <xref:System.IEquatable%601> generic interface in the custom type.</span></span> <span data-ttu-id="994a2-893">Aby uzyskać więcej informacji, zobacz <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> właściwość.</span><span class="sxs-lookup"><span data-stu-id="994a2-893">For more information, see the <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> property.</span></span>
  
   
  
## Examples  
 <span data-ttu-id="994a2-894">Poniższy przykład kodu demonstruje, jak użyć `Intersect<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)` , aby zwrócić elementy, które pojawiają się w każdej z dwóch sekwencji liczb całkowitych.</span><span class="sxs-lookup"><span data-stu-id="994a2-894">The following code example demonstrates how to use `Intersect<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)` to return the elements that appear in each of two sequences of integers.</span></span>  
  
 [!code-csharp-interactive[System.Linq.Enumerable#41](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#41)]
 [!code-vb[System.Linq.Enumerable#41](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#41)]  
  
 <span data-ttu-id="994a2-895">Jeśli chcesz porównać sekwencje obiektów z niestandardowym typem danych, musisz zaimplementować <xref:System.IEquatable%601> interfejs generyczny w klasie pomocnika.</span><span class="sxs-lookup"><span data-stu-id="994a2-895">If you want to compare sequences of objects of some custom data type, you have to implement the <xref:System.IEquatable%601> generic interface in a helper class.</span></span> <span data-ttu-id="994a2-896">Poniższy przykład kodu pokazuje, jak zaimplementować ten interfejs w niestandardowym typie danych oraz zastąpień <xref:System.Object.GetHashCode%2A> i <xref:System.Object.Equals%2A> metodach.</span><span class="sxs-lookup"><span data-stu-id="994a2-896">The following code example shows how to implement this interface in a custom data type and override <xref:System.Object.GetHashCode%2A> and <xref:System.Object.Equals%2A> methods.</span></span>
  
 [!code-csharp[CSLINQEncapsulatedComparer#9](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/CS/EncapsulatedComparer.cs#9)]  
 [!code-vb[CSLINQEncapsulatedComparer#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/VB/EncapsulatedComparer.vb#9)]  

 <span data-ttu-id="994a2-897">Po zaimplementowaniu tego interfejsu można użyć sekwencji `ProductA` obiektów `Intersect` w metodzie, jak pokazano w następującym przykładzie:</span><span class="sxs-lookup"><span data-stu-id="994a2-897">After you implement this interface, you can use sequences of `ProductA` objects in the `Intersect` method, as shown in the following example:</span></span>
  
[!code-csharp[CSLINQEncapsulatedComparer#10](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/CS/EncapsulatedComparer.cs#10)]  
[!code-vb[CSLINQEncapsulatedComparer#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/VB/EncapsulatedComparer.vb#10)]  

[!code-csharp[CSLINQEncapsulatedComparer#3](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/CS/EncapsulatedComparer.cs#3)]
[!code-vb[CSLINQEncapsulatedComparer#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/VB/EncapsulatedComparer.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-898"><paramref name="first" />lub <paramref name="second" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-898"><paramref name="first" /> or <paramref name="second" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Intersect&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Intersect&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; first, System.Collections.Generic.IEnumerable&lt;TSource&gt; second, System.Collections.Generic.IEqualityComparer&lt;TSource&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Intersect&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; first, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; second, class System.Collections.Generic.IEqualityComparer`1&lt;!!TSource&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Intersect(Of TSource) (first As IEnumerable(Of TSource), second As IEnumerable(Of TSource), comparer As IEqualityComparer(Of TSource)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ Intersect(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ first, System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ second, System::Collections::Generic::IEqualityComparer&lt;TSource&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member Intersect : seq&lt;'Source&gt; * seq&lt;'Source&gt; * System.Collections.Generic.IEqualityComparer&lt;'Source&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.Intersect (first, second, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="first" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="second" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-899">Typ elementów sekwencji wejściowych.</span><span class="sxs-lookup"><span data-stu-id="994a2-899">The type of the elements of the input sequences.</span></span></typeparam>
        <param name="first"><span data-ttu-id="994a2-900">Zostaną zwrócone odrębne elementy, które również pojawiają się w programie <paramref name="second" />. <see cref="T:System.Collections.Generic.IEnumerable`1" /></span><span class="sxs-lookup"><span data-stu-id="994a2-900">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose distinct elements that also appear in <paramref name="second" /> will be returned.</span></span></param>
        <param name="second"><span data-ttu-id="994a2-901"><see cref="T:System.Collections.Generic.IEnumerable`1" /> Zostaną zwrócone odrębne elementy, które również pojawiają się w pierwszej sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-901">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose distinct elements that also appear in the first sequence will be returned.</span></span></param>
        <param name="comparer"><span data-ttu-id="994a2-902"><see cref="T:System.Collections.Generic.IEqualityComparer`1" /> Do porównywania wartości.</span><span class="sxs-lookup"><span data-stu-id="994a2-902">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</span></span></param>
        <summary><span data-ttu-id="994a2-903">Tworzy część wspólną dwóch sekwencji przy użyciu określonego <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> do porównywania wartości.</span><span class="sxs-lookup"><span data-stu-id="994a2-903">Produces the set intersection of two sequences by using the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</span></span></summary>
        <returns><span data-ttu-id="994a2-904">Sekwencja, która zawiera elementy, które tworzą przecięcie zestawu dwóch sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-904">A sequence that contains the elements that form the set intersection of two sequences.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-905">Ta metoda jest implementowana za pomocą odroczonego wykonania.</span><span class="sxs-lookup"><span data-stu-id="994a2-905">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="994a2-906">Bezpośrednio zwracana wartość jest obiektem, który przechowuje wszystkie informacje wymagane do wykonania akcji.</span><span class="sxs-lookup"><span data-stu-id="994a2-906">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="994a2-907">Zapytanie reprezentowane przez tę metodę nie jest wykonywane `GetEnumerator` do momentu wyliczenia obiektu przez wywołanie jego metody bezpośrednio lub przy użyciu `foreach` w wizualizacji C# lub `For Each` w Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="994a2-907">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="994a2-908">Część wspólną dwóch zestawów A i B jest definiowana jako zestaw, który zawiera wszystkie elementy elementu, który również występuje w B, ale nie inne elementy.</span><span class="sxs-lookup"><span data-stu-id="994a2-908">The intersection of two sets A and B is defined as the set that contains all the elements of A that also appear in B, but no other elements.</span></span>  
  
 <span data-ttu-id="994a2-909">Gdy obiekt zwracany przez tę metodę jest wyliczany, program `Intersect` zwraca różne elementy występujące w obu sekwencjach w kolejności, w jakiej występują w `first`.</span><span class="sxs-lookup"><span data-stu-id="994a2-909">When the object returned by this method is enumerated, `Intersect` yields distinct elements occurring in both sequences in the order in which they appear in `first`.</span></span>  
  
 <span data-ttu-id="994a2-910">Jeśli `comparer` <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>jest `null`, domyślna funkcja porównująca równość jest używana do porównywania wartości.</span><span class="sxs-lookup"><span data-stu-id="994a2-910">If `comparer` is `null`, the default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare values.</span></span>  
  
## Examples  
 <span data-ttu-id="994a2-911">Poniższy przykład pokazuje, jak zaimplementować funkcję porównującą równość, która może zostać użyta `Intersect` w metodzie.</span><span class="sxs-lookup"><span data-stu-id="994a2-911">The following example shows how to implement an equality comparer that can be used in the `Intersect` method.</span></span>  
  
 [!code-csharp[CSLINQCustomComparer#1](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQCustomComparer/CS/CustomComparer.cs#1)]
 [!code-vb[CSLINQCustomComparer#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQCustomComparer/VB/CustomComparer.vb#1)]  
  
 <span data-ttu-id="994a2-912">Po zaimplementowaniu tej `Intersect` metody porównującej można użyć sekwencji `Product` obiektów w metodzie, jak pokazano w następującym przykładzie:</span><span class="sxs-lookup"><span data-stu-id="994a2-912">After you implement this comparer, you can use sequences of `Product` objects in the `Intersect` method, as shown in the following example:</span></span>  
  
 [!code-csharp[CSLINQCustomComparer#2](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQCustomComparer/CS/CustomComparer.cs#2)]
 [!code-vb[CSLINQCustomComparer#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQCustomComparer/VB/CustomComparer.vb#2)]  
[!code-csharp[CSLINQCustomComparer#3](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQCustomComparer/CS/CustomComparer.cs#3)]
[!code-vb[CSLINQCustomComparer#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQCustomComparer/VB/CustomComparer.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-913"><paramref name="first" />lub <paramref name="second" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-913"><paramref name="first" /> or <paramref name="second" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Join&lt;TOuter,TInner,TKey,TResult&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="994a2-914">Skorelowanie elementów dwóch sekwencji na podstawie pasujących kluczy.</span><span class="sxs-lookup"><span data-stu-id="994a2-914">Correlates the elements of two sequences based on matching keys.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Join&lt;TOuter,TInner,TKey,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; Join&lt;TOuter,TInner,TKey,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TOuter&gt; outer, System.Collections.Generic.IEnumerable&lt;TInner&gt; inner, Func&lt;TOuter,TKey&gt; outerKeySelector, Func&lt;TInner,TKey&gt; innerKeySelector, Func&lt;TOuter,TInner,TResult&gt; resultSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; Join&lt;TOuter, TInner, TKey, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TOuter&gt; outer, class System.Collections.Generic.IEnumerable`1&lt;!!TInner&gt; inner, class System.Func`2&lt;!!TOuter, !!TKey&gt; outerKeySelector, class System.Func`2&lt;!!TInner, !!TKey&gt; innerKeySelector, class System.Func`3&lt;!!TOuter, !!TInner, !!TResult&gt; resultSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Join(Of TOuter, TInner, TKey, TResult) (outer As IEnumerable(Of TOuter), inner As IEnumerable(Of TInner), outerKeySelector As Func(Of TOuter, TKey), innerKeySelector As Func(Of TInner, TKey), resultSelector As Func(Of TOuter, TInner, TResult)) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOuter, typename TInner, typename TKey, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ Join(System::Collections::Generic::IEnumerable&lt;TOuter&gt; ^ outer, System::Collections::Generic::IEnumerable&lt;TInner&gt; ^ inner, Func&lt;TOuter, TKey&gt; ^ outerKeySelector, Func&lt;TInner, TKey&gt; ^ innerKeySelector, Func&lt;TOuter, TInner, TResult&gt; ^ resultSelector);" />
      <MemberSignature Language="F#" Value="static member Join : seq&lt;'Outer&gt; * seq&lt;'Inner&gt; * Func&lt;'Outer, 'Key&gt; * Func&lt;'Inner, 'Key&gt; * Func&lt;'Outer, 'Inner, 'Result&gt; -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.Join (outer, inner, outerKeySelector, innerKeySelector, resultSelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOuter" />
        <TypeParameter Name="TInner" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="outer" Type="System.Collections.Generic.IEnumerable&lt;TOuter&gt;" RefType="this" />
        <Parameter Name="inner" Type="System.Collections.Generic.IEnumerable&lt;TInner&gt;" />
        <Parameter Name="outerKeySelector" Type="System.Func&lt;TOuter,TKey&gt;" />
        <Parameter Name="innerKeySelector" Type="System.Func&lt;TInner,TKey&gt;" />
        <Parameter Name="resultSelector" Type="System.Func&lt;TOuter,TInner,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TOuter"><span data-ttu-id="994a2-915">Typ elementów pierwszej sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-915">The type of the elements of the first sequence.</span></span></typeparam>
        <typeparam name="TInner"><span data-ttu-id="994a2-916">Typ elementów drugiej sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-916">The type of the elements of the second sequence.</span></span></typeparam>
        <typeparam name="TKey"><span data-ttu-id="994a2-917">Typ kluczy zwracanych przez funkcje przełącznika kluczowego.</span><span class="sxs-lookup"><span data-stu-id="994a2-917">The type of the keys returned by the key selector functions.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="994a2-918">Typ elementów wyniku.</span><span class="sxs-lookup"><span data-stu-id="994a2-918">The type of the result elements.</span></span></typeparam>
        <param name="outer"><span data-ttu-id="994a2-919">Pierwsza sekwencja do przyłączenia.</span><span class="sxs-lookup"><span data-stu-id="994a2-919">The first sequence to join.</span></span></param>
        <param name="inner"><span data-ttu-id="994a2-920">Sekwencja do przyłączenia do pierwszej sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-920">The sequence to join to the first sequence.</span></span></param>
        <param name="outerKeySelector"><span data-ttu-id="994a2-921">Funkcja wyodrębniania klucza łączenia z każdego elementu pierwszej sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-921">A function to extract the join key from each element of the first sequence.</span></span></param>
        <param name="innerKeySelector"><span data-ttu-id="994a2-922">Funkcja wyodrębniania klucza łączenia z każdego elementu drugiej sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-922">A function to extract the join key from each element of the second sequence.</span></span></param>
        <param name="resultSelector"><span data-ttu-id="994a2-923">Funkcja do tworzenia elementu wyniku z dwóch zgodnych elementów.</span><span class="sxs-lookup"><span data-stu-id="994a2-923">A function to create a result element from two matching elements.</span></span></param>
        <summary><span data-ttu-id="994a2-924">Skorelowanie elementów dwóch sekwencji na podstawie pasujących kluczy.</span><span class="sxs-lookup"><span data-stu-id="994a2-924">Correlates the elements of two sequences based on matching keys.</span></span> <span data-ttu-id="994a2-925">Domyślna funkcja porównująca równość jest używana do porównywania kluczy.</span><span class="sxs-lookup"><span data-stu-id="994a2-925">The default equality comparer is used to compare keys.</span></span></summary>
        <returns><span data-ttu-id="994a2-926">Ma elementy typu <paramref name="TResult" /> , które są uzyskiwane przez wykonywanie sprzężenia wewnętrznego na dwie sekwencje. <see cref="T:System.Collections.Generic.IEnumerable`1" /></span><span class="sxs-lookup"><span data-stu-id="994a2-926">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that has elements of type <paramref name="TResult" /> that are obtained by performing an inner join on two sequences.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-927">Ta metoda jest implementowana za pomocą odroczonego wykonania.</span><span class="sxs-lookup"><span data-stu-id="994a2-927">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="994a2-928">Bezpośrednio zwracana wartość jest obiektem, który przechowuje wszystkie informacje wymagane do wykonania akcji.</span><span class="sxs-lookup"><span data-stu-id="994a2-928">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="994a2-929">Zapytanie reprezentowane przez tę metodę nie jest wykonywane `GetEnumerator` do momentu wyliczenia obiektu przez wywołanie jego metody bezpośrednio lub przy użyciu `foreach` w wizualizacji C# lub `For Each` w Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="994a2-929">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="994a2-930">Domyślna funkcja porównująca <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>równość jest używana do mieszania i porównywania kluczy.</span><span class="sxs-lookup"><span data-stu-id="994a2-930">The default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to hash and compare keys.</span></span>  
  
 <span data-ttu-id="994a2-931">Sprzężenie odnosi się do operacji skorelowania elementów dwóch źródeł informacji w oparciu o wspólny klucz.</span><span class="sxs-lookup"><span data-stu-id="994a2-931">A join refers to the operation of correlating the elements of two sources of information based on a common key.</span></span> <span data-ttu-id="994a2-932"><xref:System.Linq.Enumerable.Join%2A>przenosi dwa źródła informacji oraz klucze, za pomocą których są one dopasowywane w jednym wywołaniu metody.</span><span class="sxs-lookup"><span data-stu-id="994a2-932"><xref:System.Linq.Enumerable.Join%2A> brings the two information sources and the keys by which they are matched together in one method call.</span></span> <span data-ttu-id="994a2-933">Różni się to od użycia `SelectMany`, co wymaga więcej niż jedno wywołanie metody do wykonania tej samej operacji.</span><span class="sxs-lookup"><span data-stu-id="994a2-933">This differs from the use of `SelectMany`, which requires more than one method call to perform the same operation.</span></span>  
  
 <span data-ttu-id="994a2-934"><xref:System.Linq.Enumerable.Join%2A>zachowuje kolejność elementów `outer`i dla każdego z tych elementów, kolejność pasujących `inner`elementów.</span><span class="sxs-lookup"><span data-stu-id="994a2-934"><xref:System.Linq.Enumerable.Join%2A> preserves the order of the elements of `outer`, and for each of these elements, the order of the matching elements of `inner`.</span></span>  
  
 <span data-ttu-id="994a2-935">W `join` składni wyrażenia zapytania, klauzula (wizualizacja C#) `Join` lub (Visual Basic) <xref:System.Linq.Enumerable.Join%2A>tłumaczy na wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-935">In query expression syntax, a `join` (Visual C#) or `Join` (Visual Basic) clause translates to an invocation of <xref:System.Linq.Enumerable.Join%2A>.</span></span>  
  
 <span data-ttu-id="994a2-936">W terminologii <xref:System.Linq.Enumerable.Join%2A> relacyjnej bazy danych metoda implementuje wewnętrzny equijoin.</span><span class="sxs-lookup"><span data-stu-id="994a2-936">In relational database terms, the <xref:System.Linq.Enumerable.Join%2A> method implements an inner equijoin.</span></span> <span data-ttu-id="994a2-937">"Inner" oznacza, że tylko elementy, które mają dopasowanie w innej sekwencji, są uwzględniane w wynikach.</span><span class="sxs-lookup"><span data-stu-id="994a2-937">'Inner' means that only elements that have a match in the other sequence are included in the results.</span></span> <span data-ttu-id="994a2-938">"Equijoin" to sprzężenie, w którym klucze są porównywane pod kątem równości.</span><span class="sxs-lookup"><span data-stu-id="994a2-938">An 'equijoin' is a join in which the keys are compared for equality.</span></span> <span data-ttu-id="994a2-939">Nie ma dedykowanego standardowego operatora zapytania z lewej strony, ale można go wykonać przy użyciu <xref:System.Linq.Enumerable.GroupJoin%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="994a2-939">A left outer join operation has no dedicated standard query operator, but can be performed by using the <xref:System.Linq.Enumerable.GroupJoin%2A> method.</span></span> <span data-ttu-id="994a2-940">Zobacz [Operacje łączenia](https://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107).</span><span class="sxs-lookup"><span data-stu-id="994a2-940">See [Join Operations](https://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-941">Poniższy przykład kodu demonstruje, jak używać <xref:System.Linq.Enumerable.Join%60%604%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%603%7D%29> do wykonywania wewnętrznego przyłączania dwóch sekwencji na podstawie wspólnego klucza.</span><span class="sxs-lookup"><span data-stu-id="994a2-941">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Join%60%604%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%603%7D%29> to perform an inner join of two sequences based on a common key.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#42](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#42)]
 [!code-vb[System.Linq.Enumerable#42](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-942"><paramref name="outer" /><paramref name="inner" /> orlub<see langword="null" />or. <paramref name="outerKeySelector" /> <paramref name="innerKeySelector" /> <paramref name="resultSelector" /></span><span class="sxs-lookup"><span data-stu-id="994a2-942"><paramref name="outer" /> or <paramref name="inner" /> or <paramref name="outerKeySelector" /> or <paramref name="innerKeySelector" /> or <paramref name="resultSelector" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107"><span data-ttu-id="994a2-943">Łączenie</span><span class="sxs-lookup"><span data-stu-id="994a2-943">Joining</span></span></related>
        <related type="Article" href="~/docs/csharp/language-reference/keywords/join-clause.md"><span data-ttu-id="994a2-944">Klauzula join (odwołanie w C#)</span><span class="sxs-lookup"><span data-stu-id="994a2-944">join clause (C# Reference)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/join-clause.md"><span data-ttu-id="994a2-945">Join — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-945">Join Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Join&lt;TOuter,TInner,TKey,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; Join&lt;TOuter,TInner,TKey,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TOuter&gt; outer, System.Collections.Generic.IEnumerable&lt;TInner&gt; inner, Func&lt;TOuter,TKey&gt; outerKeySelector, Func&lt;TInner,TKey&gt; innerKeySelector, Func&lt;TOuter,TInner,TResult&gt; resultSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; Join&lt;TOuter, TInner, TKey, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TOuter&gt; outer, class System.Collections.Generic.IEnumerable`1&lt;!!TInner&gt; inner, class System.Func`2&lt;!!TOuter, !!TKey&gt; outerKeySelector, class System.Func`2&lt;!!TInner, !!TKey&gt; innerKeySelector, class System.Func`3&lt;!!TOuter, !!TInner, !!TResult&gt; resultSelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Join(Of TOuter, TInner, TKey, TResult) (outer As IEnumerable(Of TOuter), inner As IEnumerable(Of TInner), outerKeySelector As Func(Of TOuter, TKey), innerKeySelector As Func(Of TInner, TKey), resultSelector As Func(Of TOuter, TInner, TResult), comparer As IEqualityComparer(Of TKey)) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOuter, typename TInner, typename TKey, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ Join(System::Collections::Generic::IEnumerable&lt;TOuter&gt; ^ outer, System::Collections::Generic::IEnumerable&lt;TInner&gt; ^ inner, Func&lt;TOuter, TKey&gt; ^ outerKeySelector, Func&lt;TInner, TKey&gt; ^ innerKeySelector, Func&lt;TOuter, TInner, TResult&gt; ^ resultSelector, System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member Join : seq&lt;'Outer&gt; * seq&lt;'Inner&gt; * Func&lt;'Outer, 'Key&gt; * Func&lt;'Inner, 'Key&gt; * Func&lt;'Outer, 'Inner, 'Result&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.Join (outer, inner, outerKeySelector, innerKeySelector, resultSelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOuter" />
        <TypeParameter Name="TInner" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="outer" Type="System.Collections.Generic.IEnumerable&lt;TOuter&gt;" RefType="this" />
        <Parameter Name="inner" Type="System.Collections.Generic.IEnumerable&lt;TInner&gt;" />
        <Parameter Name="outerKeySelector" Type="System.Func&lt;TOuter,TKey&gt;" />
        <Parameter Name="innerKeySelector" Type="System.Func&lt;TInner,TKey&gt;" />
        <Parameter Name="resultSelector" Type="System.Func&lt;TOuter,TInner,TResult&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TOuter"><span data-ttu-id="994a2-946">Typ elementów pierwszej sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-946">The type of the elements of the first sequence.</span></span></typeparam>
        <typeparam name="TInner"><span data-ttu-id="994a2-947">Typ elementów drugiej sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-947">The type of the elements of the second sequence.</span></span></typeparam>
        <typeparam name="TKey"><span data-ttu-id="994a2-948">Typ kluczy zwracanych przez funkcje przełącznika kluczowego.</span><span class="sxs-lookup"><span data-stu-id="994a2-948">The type of the keys returned by the key selector functions.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="994a2-949">Typ elementów wyniku.</span><span class="sxs-lookup"><span data-stu-id="994a2-949">The type of the result elements.</span></span></typeparam>
        <param name="outer"><span data-ttu-id="994a2-950">Pierwsza sekwencja do przyłączenia.</span><span class="sxs-lookup"><span data-stu-id="994a2-950">The first sequence to join.</span></span></param>
        <param name="inner"><span data-ttu-id="994a2-951">Sekwencja do przyłączenia do pierwszej sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-951">The sequence to join to the first sequence.</span></span></param>
        <param name="outerKeySelector"><span data-ttu-id="994a2-952">Funkcja wyodrębniania klucza łączenia z każdego elementu pierwszej sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-952">A function to extract the join key from each element of the first sequence.</span></span></param>
        <param name="innerKeySelector"><span data-ttu-id="994a2-953">Funkcja wyodrębniania klucza łączenia z każdego elementu drugiej sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-953">A function to extract the join key from each element of the second sequence.</span></span></param>
        <param name="resultSelector"><span data-ttu-id="994a2-954">Funkcja do tworzenia elementu wyniku z dwóch zgodnych elementów.</span><span class="sxs-lookup"><span data-stu-id="994a2-954">A function to create a result element from two matching elements.</span></span></param>
        <param name="comparer"><span data-ttu-id="994a2-955">Skróty <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> do mieszania i porównywania kluczy.</span><span class="sxs-lookup"><span data-stu-id="994a2-955">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to hash and compare keys.</span></span></param>
        <summary><span data-ttu-id="994a2-956">Skorelowanie elementów dwóch sekwencji na podstawie pasujących kluczy.</span><span class="sxs-lookup"><span data-stu-id="994a2-956">Correlates the elements of two sequences based on matching keys.</span></span> <span data-ttu-id="994a2-957">Określony <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> jest używany do porównywania kluczy.</span><span class="sxs-lookup"><span data-stu-id="994a2-957">A specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> is used to compare keys.</span></span></summary>
        <returns><span data-ttu-id="994a2-958">Ma elementy typu <paramref name="TResult" /> , które są uzyskiwane przez wykonywanie sprzężenia wewnętrznego na dwie sekwencje. <see cref="T:System.Collections.Generic.IEnumerable`1" /></span><span class="sxs-lookup"><span data-stu-id="994a2-958">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that has elements of type <paramref name="TResult" /> that are obtained by performing an inner join on two sequences.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-959">Ta metoda jest implementowana za pomocą odroczonego wykonania.</span><span class="sxs-lookup"><span data-stu-id="994a2-959">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="994a2-960">Bezpośrednio zwracana wartość jest obiektem, który przechowuje wszystkie informacje wymagane do wykonania akcji.</span><span class="sxs-lookup"><span data-stu-id="994a2-960">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="994a2-961">Zapytanie reprezentowane przez tę metodę nie jest wykonywane `GetEnumerator` do momentu wyliczenia obiektu przez wywołanie jego metody bezpośrednio lub przy użyciu `foreach` w wizualizacji C# lub `For Each` w Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="994a2-961">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="994a2-962">Jeśli `comparer` <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>jest `null`, domyślna funkcja porównująca równość,, jest używana do mieszania i porównywania kluczy.</span><span class="sxs-lookup"><span data-stu-id="994a2-962">If `comparer` is `null`, the default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to hash and compare keys.</span></span>  
  
 <span data-ttu-id="994a2-963">Sprzężenie odnosi się do operacji skorelowania elementów dwóch źródeł informacji w oparciu o wspólny klucz.</span><span class="sxs-lookup"><span data-stu-id="994a2-963">A join refers to the operation of correlating the elements of two sources of information based on a common key.</span></span> <span data-ttu-id="994a2-964"><xref:System.Linq.Enumerable.Join%2A>przenosi dwa źródła informacji oraz klucze, za pomocą których są one dopasowywane w jednym wywołaniu metody.</span><span class="sxs-lookup"><span data-stu-id="994a2-964"><xref:System.Linq.Enumerable.Join%2A> brings the two information sources and the keys by which they are matched together in one method call.</span></span> <span data-ttu-id="994a2-965">Różni się to od użycia `SelectMany`, co wymaga więcej niż jedno wywołanie metody do wykonania tej samej operacji.</span><span class="sxs-lookup"><span data-stu-id="994a2-965">This differs from the use of `SelectMany`, which requires more than one method call to perform the same operation.</span></span>  
  
 <span data-ttu-id="994a2-966"><xref:System.Linq.Enumerable.Join%2A>zachowuje kolejność elementów `outer`i dla każdego z tych elementów, kolejność pasujących `inner`elementów.</span><span class="sxs-lookup"><span data-stu-id="994a2-966"><xref:System.Linq.Enumerable.Join%2A> preserves the order of the elements of `outer`, and for each of these elements, the order of the matching elements of `inner`.</span></span>  
  
 <span data-ttu-id="994a2-967">W terminologii <xref:System.Linq.Enumerable.Join%2A> relacyjnej bazy danych metoda implementuje wewnętrzny equijoin.</span><span class="sxs-lookup"><span data-stu-id="994a2-967">In relational database terms, the <xref:System.Linq.Enumerable.Join%2A> method implements an inner equijoin.</span></span> <span data-ttu-id="994a2-968">"Inner" oznacza, że tylko elementy, które mają dopasowanie w innej sekwencji, są uwzględniane w wynikach.</span><span class="sxs-lookup"><span data-stu-id="994a2-968">'Inner' means that only elements that have a match in the other sequence are included in the results.</span></span> <span data-ttu-id="994a2-969">"Equijoin" to sprzężenie, w którym klucze są porównywane pod kątem równości.</span><span class="sxs-lookup"><span data-stu-id="994a2-969">An 'equijoin' is a join in which the keys are compared for equality.</span></span> <span data-ttu-id="994a2-970">Nie ma dedykowanego standardowego operatora zapytania z lewej strony, ale można go wykonać przy użyciu <xref:System.Linq.Enumerable.GroupJoin%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="994a2-970">A left outer join operation has no dedicated standard query operator, but can be performed by using the <xref:System.Linq.Enumerable.GroupJoin%2A> method.</span></span> <span data-ttu-id="994a2-971">Zobacz [Operacje łączenia](https://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107).</span><span class="sxs-lookup"><span data-stu-id="994a2-971">See [Join Operations](https://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-972"><paramref name="outer" /><paramref name="inner" /> orlub<see langword="null" />or. <paramref name="outerKeySelector" /> <paramref name="innerKeySelector" /> <paramref name="resultSelector" /></span><span class="sxs-lookup"><span data-stu-id="994a2-972"><paramref name="outer" /> or <paramref name="inner" /> or <paramref name="outerKeySelector" /> or <paramref name="innerKeySelector" /> or <paramref name="resultSelector" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="https://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107"><span data-ttu-id="994a2-973">Łączenie</span><span class="sxs-lookup"><span data-stu-id="994a2-973">Joining</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Last&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="994a2-974">Zwraca ostatni element sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-974">Returns the last element of a sequence.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Last&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource Last&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource Last&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Last(Of TSource) (source As IEnumerable(Of TSource)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource Last(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Last : seq&lt;'Source&gt; -&gt; 'Source" Usage="System.Linq.Enumerable.Last source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-975">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-975">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-976"><see cref="T:System.Collections.Generic.IEnumerable`1" /> Do zwrócenia ostatniego elementu.</span><span class="sxs-lookup"><span data-stu-id="994a2-976">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return the last element of.</span></span></param>
        <summary><span data-ttu-id="994a2-977">Zwraca ostatni element sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-977">Returns the last element of a sequence.</span></span></summary>
        <returns><span data-ttu-id="994a2-978">Wartość w ostatniej pozycji sekwencji źródłowej.</span><span class="sxs-lookup"><span data-stu-id="994a2-978">The value at the last position in the source sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-979">Metoda zgłasza wyjątek, jeśli `source` nie zawiera żadnych elementów. <xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29></span><span class="sxs-lookup"><span data-stu-id="994a2-979">The <xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> method throws an exception if `source` contains no elements.</span></span> <span data-ttu-id="994a2-980">Aby zamiast tego zwrócić wartość domyślną, gdy sekwencja źródłowa jest pusta, użyj <xref:System.Linq.Enumerable.LastOrDefault%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="994a2-980">To instead return a default value when the source sequence is empty, use the <xref:System.Linq.Enumerable.LastOrDefault%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-981">Poniższy przykład kodu demonstruje, jak użyć <xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> do zwrócenia ostatniego elementu tablicy.</span><span class="sxs-lookup"><span data-stu-id="994a2-981">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to return the last element of an array.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#43](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#43)]
 [!code-vb[System.Linq.Enumerable#43](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#43)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-982"><paramref name="source" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-982"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="994a2-983">Sekwencja źródłowa jest pusta.</span><span class="sxs-lookup"><span data-stu-id="994a2-983">The source sequence is empty.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Last&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource Last&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource Last&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Last(Of TSource) (source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource Last(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member Last : seq&lt;'Source&gt; * Func&lt;'Source, bool&gt; -&gt; 'Source" Usage="System.Linq.Enumerable.Last (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-984">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-984">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-985"><see cref="T:System.Collections.Generic.IEnumerable`1" /> Do zwrócenia elementu z.</span><span class="sxs-lookup"><span data-stu-id="994a2-985">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return an element from.</span></span></param>
        <param name="predicate"><span data-ttu-id="994a2-986">Funkcja testowania każdego elementu na stanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-986">A function to test each element for a condition.</span></span></param>
        <summary><span data-ttu-id="994a2-987">Zwraca ostatni element sekwencji, który spełnia określony warunek.</span><span class="sxs-lookup"><span data-stu-id="994a2-987">Returns the last element of a sequence that satisfies a specified condition.</span></span></summary>
        <returns><span data-ttu-id="994a2-988">Ostatni element w sekwencji, który przekazuje test w określonej funkcji predykatu.</span><span class="sxs-lookup"><span data-stu-id="994a2-988">The last element in the sequence that passes the test in the specified predicate function.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-989">Metoda zgłasza wyjątek, jeśli nie znaleziono pasującego elementu w `source`. <xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29></span><span class="sxs-lookup"><span data-stu-id="994a2-989">The <xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> method throws an exception if no matching element is found in `source`.</span></span> <span data-ttu-id="994a2-990">Aby zamiast tego zwrócić wartość domyślną, gdy nie znaleziono pasującego elementu, użyj <xref:System.Linq.Enumerable.LastOrDefault%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="994a2-990">To instead return a default value when no matching element is found, use the <xref:System.Linq.Enumerable.LastOrDefault%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-991">Poniższy przykład kodu demonstruje, jak użyć <xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> do zwrócenia ostatniego elementu tablicy, który spełnia warunek.</span><span class="sxs-lookup"><span data-stu-id="994a2-991">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> to return the last element of an array that satisfies a condition.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#44](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#44)]
 [!code-vb[System.Linq.Enumerable#44](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#44)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-992"><paramref name="source" />lub <paramref name="predicate" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-992"><paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="994a2-993">Żaden element nie spełnia warunku <paramref name="predicate" />w elemencie.</span><span class="sxs-lookup"><span data-stu-id="994a2-993">No element satisfies the condition in <paramref name="predicate" />.</span></span>  
  
<span data-ttu-id="994a2-994">—lub—</span><span class="sxs-lookup"><span data-stu-id="994a2-994">-or-</span></span> 
<span data-ttu-id="994a2-995">Sekwencja źródłowa jest pusta.</span><span class="sxs-lookup"><span data-stu-id="994a2-995">The source sequence is empty.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="LastOrDefault&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="994a2-996">Zwraca ostatni element sekwencji lub wartość domyślną, jeśli nie odnaleziono elementu.</span><span class="sxs-lookup"><span data-stu-id="994a2-996">Returns the last element of a sequence, or a default value if no element is found.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LastOrDefault&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource LastOrDefault&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource LastOrDefault&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LastOrDefault(Of TSource) (source As IEnumerable(Of TSource)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource LastOrDefault(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member LastOrDefault : seq&lt;'Source&gt; -&gt; 'Source" Usage="System.Linq.Enumerable.LastOrDefault source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-997">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-997">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-998"><see cref="T:System.Collections.Generic.IEnumerable`1" /> Do zwrócenia ostatniego elementu.</span><span class="sxs-lookup"><span data-stu-id="994a2-998">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return the last element of.</span></span></param>
        <summary><span data-ttu-id="994a2-999">Zwraca ostatni element sekwencji lub wartość domyślną, jeśli sekwencja nie zawiera żadnych elementów.</span><span class="sxs-lookup"><span data-stu-id="994a2-999">Returns the last element of a sequence, or a default value if the sequence contains no elements.</span></span></summary>
        <returns><span data-ttu-id="994a2-1000"><see langword="default" />(<paramref name="TSource" />), jeśli sekwencja źródłowa jest pusta; w przeciwnym razie ostatni element <see cref="T:System.Collections.Generic.IEnumerable`1" />w.</span><span class="sxs-lookup"><span data-stu-id="994a2-1000"><see langword="default" />(<paramref name="TSource" />) if the source sequence is empty; otherwise, the last element in the <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-1001">Wartość domyślna dla typów Reference i nullable jest równa `null`.</span><span class="sxs-lookup"><span data-stu-id="994a2-1001">The default value for reference and nullable types is `null`.</span></span>  
  
 <span data-ttu-id="994a2-1002"><xref:System.Linq.Enumerable.LastOrDefault%2A> Metoda nie pozwala na określenie wartości domyślnej.</span><span class="sxs-lookup"><span data-stu-id="994a2-1002">The <xref:System.Linq.Enumerable.LastOrDefault%2A> method does not provide a way to specify a default value.</span></span> <span data-ttu-id="994a2-1003">Jeśli chcesz określić wartość domyślną inną niż `default(TSource)`, <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> Użyj metody opisanej w sekcji przykład.</span><span class="sxs-lookup"><span data-stu-id="994a2-1003">If you want to specify a default value other than `default(TSource)`, use the <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> method as described in the Example section.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-1004">Poniższy przykład kodu demonstruje, jak używać <xref:System.Linq.Enumerable.LastOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> na pustej tablicy.</span><span class="sxs-lookup"><span data-stu-id="994a2-1004">The following code example demonstrates how to use <xref:System.Linq.Enumerable.LastOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> on an empty array.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#45](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#45)]
 [!code-vb[System.Linq.Enumerable#45](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#45)]  
  
 <span data-ttu-id="994a2-1005">Czasami wartość `default(TSource)` nie jest wartością domyślną, która ma być używana, jeśli kolekcja nie zawiera żadnych elementów.</span><span class="sxs-lookup"><span data-stu-id="994a2-1005">Sometimes the value of `default(TSource)` is not the default value that you want to use if the collection contains no elements.</span></span> <span data-ttu-id="994a2-1006">Zamiast sprawdzać wynik niepożądanej wartości domyślnej, a następnie zmieniać ją w razie potrzeby, można użyć <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> metody, aby określić wartość domyślną, która ma być używana, jeśli kolekcja jest pusta.</span><span class="sxs-lookup"><span data-stu-id="994a2-1006">Instead of checking the result for the unwanted default value and then changing it if necessary, you can use the <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> method to specify the default value that you want to use if the collection is empty.</span></span> <span data-ttu-id="994a2-1007">Następnie należy wywołać <xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> , aby uzyskać ostatni element.</span><span class="sxs-lookup"><span data-stu-id="994a2-1007">Then, call <xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to obtain the last element.</span></span> <span data-ttu-id="994a2-1008">Poniższy przykład kodu używa obu technik do uzyskania wartości domyślnej 1, jeśli kolekcja dni miesiąca jest pusta.</span><span class="sxs-lookup"><span data-stu-id="994a2-1008">The following code example uses both techniques to obtain a default value of 1 if a collection of numeric days of the month is empty.</span></span> <span data-ttu-id="994a2-1009">Ponieważ wartością domyślną dla liczby całkowitej jest 0, która nie odpowiada żadnemu dzień miesiąca, wartość domyślna musi być określona jako 1.</span><span class="sxs-lookup"><span data-stu-id="994a2-1009">Because the default value for an integer is 0, which does not correspond to any day of the month, the default value must be specified as 1 instead.</span></span> <span data-ttu-id="994a2-1010">Pierwsza zmienna wynikowa jest sprawdzana pod kątem niepożądanej wartości domyślnej po zakończeniu wykonywania zapytania.</span><span class="sxs-lookup"><span data-stu-id="994a2-1010">The first result variable is checked for the unwanted default value after the query has finished executing.</span></span> <span data-ttu-id="994a2-1011">Druga zmienna wynikowa jest uzyskiwana przy <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> użyciu, aby określić wartość domyślną 1.</span><span class="sxs-lookup"><span data-stu-id="994a2-1011">The second result variable is obtained by using <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> to specify a default value of 1.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#127](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#127)]
 [!code-vb[System.Linq.Enumerable#127](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#127)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-1012"><paramref name="source" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1012"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="LastOrDefault&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource LastOrDefault&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource LastOrDefault&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LastOrDefault(Of TSource) (source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource LastOrDefault(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member LastOrDefault : seq&lt;'Source&gt; * Func&lt;'Source, bool&gt; -&gt; 'Source" Usage="System.Linq.Enumerable.LastOrDefault (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-1013">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1013">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-1014"><see cref="T:System.Collections.Generic.IEnumerable`1" /> Do zwrócenia elementu z.</span><span class="sxs-lookup"><span data-stu-id="994a2-1014">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return an element from.</span></span></param>
        <param name="predicate"><span data-ttu-id="994a2-1015">Funkcja testowania każdego elementu na stanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-1015">A function to test each element for a condition.</span></span></param>
        <summary><span data-ttu-id="994a2-1016">Zwraca ostatni element sekwencji, który spełnia warunek lub wartość domyślną, jeśli taki element nie zostanie znaleziony.</span><span class="sxs-lookup"><span data-stu-id="994a2-1016">Returns the last element of a sequence that satisfies a condition or a default value if no such element is found.</span></span></summary>
        <returns><span data-ttu-id="994a2-1017"><see langword="default" />(<paramref name="TSource" />) Jeśli sekwencja jest pusta lub żaden element nie przeszedł testu w funkcji predykatu; w przeciwnym razie ostatni element, który przekazuje test w funkcji predykatu.</span><span class="sxs-lookup"><span data-stu-id="994a2-1017"><see langword="default" />(<paramref name="TSource" />) if the sequence is empty or if no elements pass the test in the predicate function; otherwise, the last element that passes the test in the predicate function.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-1018">Wartość domyślna dla typów Reference i nullable jest równa `null`.</span><span class="sxs-lookup"><span data-stu-id="994a2-1018">The default value for reference and nullable types is `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-1019">Poniższy przykład kodu demonstruje sposób użycia <xref:System.Linq.Enumerable.LastOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> przez przekazanie predykatu.</span><span class="sxs-lookup"><span data-stu-id="994a2-1019">The following code example demonstrates how to use <xref:System.Linq.Enumerable.LastOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> by passing in a predicate.</span></span> <span data-ttu-id="994a2-1020">W drugim wywołaniu metody nie ma elementu w sekwencji, który spełnia warunek.</span><span class="sxs-lookup"><span data-stu-id="994a2-1020">In the second call to the method, there is no element in the sequence that satisfies the condition.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#46](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#46)]
 [!code-vb[System.Linq.Enumerable#46](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#46)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-1021"><paramref name="source" />lub <paramref name="predicate" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1021"><paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="LongCount&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="994a2-1022"><see cref="T:System.Int64" /> Zwraca wartość reprezentującą liczbę elementów w sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1022">Returns an <see cref="T:System.Int64" /> that represents the number of elements in a sequence.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LongCount&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static long LongCount&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 LongCount&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LongCount(Of TSource) (source As IEnumerable(Of TSource)) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static long LongCount(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member LongCount : seq&lt;'Source&gt; -&gt; int64" Usage="System.Linq.Enumerable.LongCount source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-1023">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1023">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-1024">Element <see cref="T:System.Collections.Generic.IEnumerable`1" /> zawierający elementy do zliczenia.</span><span class="sxs-lookup"><span data-stu-id="994a2-1024">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements to be counted.</span></span></param>
        <summary><span data-ttu-id="994a2-1025"><see cref="T:System.Int64" /> Zwraca wartość reprezentującą łączną liczbę elementów w sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1025">Returns an <see cref="T:System.Int64" /> that represents the total number of elements in a sequence.</span></span></summary>
        <returns><span data-ttu-id="994a2-1026">Liczba elementów w sekwencji źródłowej.</span><span class="sxs-lookup"><span data-stu-id="994a2-1026">The number of elements in the source sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-1027">Użyj tej metody zamiast <xref:System.Linq.Enumerable.Count%2A> oczekiwać, że wynik będzie większy niż. <xref:System.Int32.MaxValue></span><span class="sxs-lookup"><span data-stu-id="994a2-1027">Use this method rather than <xref:System.Linq.Enumerable.Count%2A> when you expect the result to be greater than <xref:System.Int32.MaxValue>.</span></span>  
  
 <span data-ttu-id="994a2-1028">W Visual Basic składni wyrażenia zapytania, `Aggregate Into LongCount()` klauzula tłumaczy na <xref:System.Linq.Enumerable.LongCount%2A>wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-1028">In Visual Basic query expression syntax, an `Aggregate Into LongCount()` clause translates to an invocation of <xref:System.Linq.Enumerable.LongCount%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-1029">Poniższy przykład kodu demonstruje, jak używać <xref:System.Linq.Enumerable.LongCount%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> do zliczania elementów w tablicy.</span><span class="sxs-lookup"><span data-stu-id="994a2-1029">The following code example demonstrates how to use <xref:System.Linq.Enumerable.LongCount%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to count the elements in an array.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#47](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#47)]
 [!code-vb[System.Linq.Enumerable#47](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#47)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-1030"><paramref name="source" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1030"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="994a2-1031">Liczba elementów przekracza <see cref="F:System.Int64.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1031">The number of elements exceeds <see cref="F:System.Int64.MaxValue" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="994a2-1032">Aggregate — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-1032">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="LongCount&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static long LongCount&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 LongCount&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LongCount(Of TSource) (source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static long LongCount(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member LongCount : seq&lt;'Source&gt; * Func&lt;'Source, bool&gt; -&gt; int64" Usage="System.Linq.Enumerable.LongCount (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-1033">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1033">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-1034">Element <see cref="T:System.Collections.Generic.IEnumerable`1" /> zawierający elementy do zliczenia.</span><span class="sxs-lookup"><span data-stu-id="994a2-1034">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements to be counted.</span></span></param>
        <param name="predicate"><span data-ttu-id="994a2-1035">Funkcja testowania każdego elementu na stanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-1035">A function to test each element for a condition.</span></span></param>
        <summary><span data-ttu-id="994a2-1036">Zwraca element <see cref="T:System.Int64" /> reprezentujący liczbę elementów w sekwencji spełnia warunek.</span><span class="sxs-lookup"><span data-stu-id="994a2-1036">Returns an <see cref="T:System.Int64" /> that represents how many elements in a sequence satisfy a condition.</span></span></summary>
        <returns><span data-ttu-id="994a2-1037">Liczba, która reprezentuje, ile elementów w sekwencji spełnia warunek w funkcji predykatu.</span><span class="sxs-lookup"><span data-stu-id="994a2-1037">A number that represents how many elements in the sequence satisfy the condition in the predicate function.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-1038">Użyj tej metody zamiast <xref:System.Linq.Enumerable.Count%2A> oczekiwać, że wynik będzie większy niż. <xref:System.Int32.MaxValue></span><span class="sxs-lookup"><span data-stu-id="994a2-1038">Use this method rather than <xref:System.Linq.Enumerable.Count%2A> when you expect the result to be greater than <xref:System.Int32.MaxValue>.</span></span>  
  
 <span data-ttu-id="994a2-1039">W Visual Basic składni wyrażenia zapytania, `Aggregate Into LongCount()` klauzula tłumaczy na <xref:System.Linq.Enumerable.LongCount%2A>wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-1039">In Visual Basic query expression syntax, an `Aggregate Into LongCount()` clause translates to an invocation of <xref:System.Linq.Enumerable.LongCount%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-1040">Poniższy przykład kodu demonstruje, jak używać <xref:System.Linq.Enumerable.LongCount%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> do zliczania elementów w tablicy, które spełniają warunek.</span><span class="sxs-lookup"><span data-stu-id="994a2-1040">The following code example demonstrates how to use <xref:System.Linq.Enumerable.LongCount%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> to count the elements in an array that satisfy a condition.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#48](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#48)]
 [!code-vb[System.Linq.Enumerable#48](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#48)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-1041"><paramref name="source" />lub <paramref name="predicate" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1041"><paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="994a2-1042">Liczba pasujących elementów przekracza <see cref="F:System.Int64.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1042">The number of matching elements exceeds <see cref="F:System.Int64.MaxValue" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="994a2-1043">Aggregate — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-1043">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Max">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="994a2-1044">Zwraca maksymalną wartość w sekwencji wartości.</span><span class="sxs-lookup"><span data-stu-id="994a2-1044">Returns the maximum value in a sequence of values.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static decimal Max (this System.Collections.Generic.IEnumerable&lt;decimal&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Max(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Decimal&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Decimal})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max (source As IEnumerable(Of Decimal)) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Decimal Max(System::Collections::Generic::IEnumerable&lt;System::Decimal&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;decimal&gt; -&gt; decimal" Usage="System.Linq.Enumerable.Max source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Decimal&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="994a2-1045">Sekwencja <see cref="T:System.Decimal" /> wartości, aby określić wartość maksymalną.</span><span class="sxs-lookup"><span data-stu-id="994a2-1045">A sequence of <see cref="T:System.Decimal" /> values to determine the maximum value of.</span></span></param>
        <summary><span data-ttu-id="994a2-1046">Zwraca maksymalną wartość w sekwencji <see cref="T:System.Decimal" /> wartości.</span><span class="sxs-lookup"><span data-stu-id="994a2-1046">Returns the maximum value in a sequence of <see cref="T:System.Decimal" /> values.</span></span></summary>
        <returns><span data-ttu-id="994a2-1047">Maksymalna wartość w sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1047">The maximum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-1048"><xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Decimal%7D%29> Metoda używaimplementacji<xref:System.IComparable%601>do porównywania wartości. <xref:System.Decimal></span><span class="sxs-lookup"><span data-stu-id="994a2-1048">The <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Decimal%7D%29> method uses the <xref:System.Decimal> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="994a2-1049">W Visual Basic składni wyrażenia zapytania, `Aggregate Into Max()` klauzula tłumaczy na <xref:System.Linq.Enumerable.Max%2A>wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-1049">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-1050">Poniższy przykład kodu demonstruje, jak użyć <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29> , aby określić maksymalną wartość w sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1050">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29> to determine the maximum value in a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#52](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#52)]
 [!code-vb[System.Linq.Enumerable#52](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-1051"><paramref name="source" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1051"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="994a2-1052"><paramref name="source" />nie zawiera żadnych elementów.</span><span class="sxs-lookup"><span data-stu-id="994a2-1052"><paramref name="source" /> contains no elements.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="994a2-1053">Aggregate — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-1053">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static double Max (this System.Collections.Generic.IEnumerable&lt;double&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Max(class System.Collections.Generic.IEnumerable`1&lt;float64&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Double})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max (source As IEnumerable(Of Double)) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static double Max(System::Collections::Generic::IEnumerable&lt;double&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;double&gt; -&gt; double" Usage="System.Linq.Enumerable.Max source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Double&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="994a2-1054">Sekwencja <see cref="T:System.Double" /> wartości, aby określić wartość maksymalną.</span><span class="sxs-lookup"><span data-stu-id="994a2-1054">A sequence of <see cref="T:System.Double" /> values to determine the maximum value of.</span></span></param>
        <summary><span data-ttu-id="994a2-1055">Zwraca maksymalną wartość w sekwencji <see cref="T:System.Double" /> wartości.</span><span class="sxs-lookup"><span data-stu-id="994a2-1055">Returns the maximum value in a sequence of <see cref="T:System.Double" /> values.</span></span></summary>
        <returns><span data-ttu-id="994a2-1056">Maksymalna wartość w sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1056">The maximum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-1057"><xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29> Metoda używaimplementacji<xref:System.IComparable%601>do porównywania wartości. <xref:System.Double></span><span class="sxs-lookup"><span data-stu-id="994a2-1057">The <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29> method uses the <xref:System.Double> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="994a2-1058">W Visual Basic składni wyrażenia zapytania, `Aggregate Into Max()` klauzula tłumaczy na <xref:System.Linq.Enumerable.Max%2A>wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-1058">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-1059">Poniższy przykład kodu demonstruje, jak użyć <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29> , aby określić maksymalną wartość w sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1059">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29> to determine the maximum value in a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#52](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#52)]
 [!code-vb[System.Linq.Enumerable#52](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-1060"><paramref name="source" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1060"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="994a2-1061"><paramref name="source" />nie zawiera żadnych elementów.</span><span class="sxs-lookup"><span data-stu-id="994a2-1061"><paramref name="source" /> contains no elements.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="994a2-1062">Aggregate — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-1062">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static int Max (this System.Collections.Generic.IEnumerable&lt;int&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Max(class System.Collections.Generic.IEnumerable`1&lt;int32&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max (source As IEnumerable(Of Integer)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int Max(System::Collections::Generic::IEnumerable&lt;int&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;int&gt; -&gt; int" Usage="System.Linq.Enumerable.Max source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Int32&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="994a2-1063">Sekwencja <see cref="T:System.Int32" /> wartości, aby określić wartość maksymalną.</span><span class="sxs-lookup"><span data-stu-id="994a2-1063">A sequence of <see cref="T:System.Int32" /> values to determine the maximum value of.</span></span></param>
        <summary><span data-ttu-id="994a2-1064">Zwraca maksymalną wartość w sekwencji <see cref="T:System.Int32" /> wartości.</span><span class="sxs-lookup"><span data-stu-id="994a2-1064">Returns the maximum value in a sequence of <see cref="T:System.Int32" /> values.</span></span></summary>
        <returns><span data-ttu-id="994a2-1065">Maksymalna wartość w sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1065">The maximum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-1066"><xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29> Metoda używaimplementacji<xref:System.IComparable%601>do porównywania wartości. <xref:System.Int32></span><span class="sxs-lookup"><span data-stu-id="994a2-1066">The <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29> method uses the <xref:System.Int32> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="994a2-1067">W Visual Basic składni wyrażenia zapytania, `Aggregate Into Max()` klauzula tłumaczy na <xref:System.Linq.Enumerable.Max%2A>wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-1067">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-1068">Poniższy przykład kodu demonstruje, jak użyć <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29> , aby określić maksymalną wartość w sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1068">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29> to determine the maximum value in a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#52](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#52)]
 [!code-vb[System.Linq.Enumerable#52](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-1069"><paramref name="source" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1069"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="994a2-1070"><paramref name="source" />nie zawiera żadnych elementów.</span><span class="sxs-lookup"><span data-stu-id="994a2-1070"><paramref name="source" /> contains no elements.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="994a2-1071">Aggregate — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-1071">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static long Max (this System.Collections.Generic.IEnumerable&lt;long&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Max(class System.Collections.Generic.IEnumerable`1&lt;int64&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int64})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max (source As IEnumerable(Of Long)) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static long Max(System::Collections::Generic::IEnumerable&lt;long&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;int64&gt; -&gt; int64" Usage="System.Linq.Enumerable.Max source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Int64&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="994a2-1072">Sekwencja <see cref="T:System.Int64" /> wartości, aby określić wartość maksymalną.</span><span class="sxs-lookup"><span data-stu-id="994a2-1072">A sequence of <see cref="T:System.Int64" /> values to determine the maximum value of.</span></span></param>
        <summary><span data-ttu-id="994a2-1073">Zwraca maksymalną wartość w sekwencji <see cref="T:System.Int64" /> wartości.</span><span class="sxs-lookup"><span data-stu-id="994a2-1073">Returns the maximum value in a sequence of <see cref="T:System.Int64" /> values.</span></span></summary>
        <returns><span data-ttu-id="994a2-1074">Maksymalna wartość w sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1074">The maximum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-1075"><xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29> Metoda używaimplementacji<xref:System.IComparable%601>do porównywania wartości. <xref:System.Int64></span><span class="sxs-lookup"><span data-stu-id="994a2-1075">The <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29> method uses the <xref:System.Int64> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="994a2-1076">W Visual Basic składni wyrażenia zapytania, `Aggregate Into Max()` klauzula tłumaczy na <xref:System.Linq.Enumerable.Max%2A>wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-1076">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-1077">Poniższy przykład kodu demonstruje, jak użyć <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29> , aby określić maksymalną wartość w sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1077">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29> to determine the maximum value in a sequence.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#52](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#52)]
 [!code-vb[System.Linq.Enumerable#52](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-1078"><paramref name="source" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1078"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="994a2-1079"><paramref name="source" />nie zawiera żadnych elementów.</span><span class="sxs-lookup"><span data-stu-id="994a2-1079"><paramref name="source" /> contains no elements.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="994a2-1080">Aggregate — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-1080">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static Nullable&lt;decimal&gt; Max (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;decimal&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype System.Decimal&gt; Max(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max (source As IEnumerable(Of Nullable(Of Decimal))) As Nullable(Of Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;System::Decimal&gt; Max(System::Collections::Generic::IEnumerable&lt;Nullable&lt;System::Decimal&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;Nullable&lt;decimal&gt;&gt; -&gt; Nullable&lt;decimal&gt;" Usage="System.Linq.Enumerable.Max source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Decimal&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="994a2-1081">Sekwencja wartości null <see cref="T:System.Decimal" /> , aby określić wartość maksymalną.</span><span class="sxs-lookup"><span data-stu-id="994a2-1081">A sequence of nullable <see cref="T:System.Decimal" /> values to determine the maximum value of.</span></span></param>
        <summary><span data-ttu-id="994a2-1082">Zwraca maksymalną wartość w sekwencji wartości dopuszczających wartość <see cref="T:System.Decimal" /> null.</span><span class="sxs-lookup"><span data-stu-id="994a2-1082">Returns the maximum value in a sequence of nullable <see cref="T:System.Decimal" /> values.</span></span></summary>
        <returns><span data-ttu-id="994a2-1083">Wartość typu <c>Decimal&lt;&gt; -nullable</c> w C# lub dopuszczający wartości <c>null (liczba dziesiętna)</c> w Visual Basic, która odnosi się do wartości maksymalnej w sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1083">A value of type <c>Nullable&lt;Decimal&gt;</c> in C# or <c>Nullable(Of Decimal)</c> in Visual Basic that corresponds to the maximum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-1084"><xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29> Metoda używaimplementacji<xref:System.IComparable%601>do porównywania wartości. <xref:System.Decimal></span><span class="sxs-lookup"><span data-stu-id="994a2-1084">The <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29> method uses the <xref:System.Decimal> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="994a2-1085">Jeśli sekwencja źródłowa jest pusta lub zawiera tylko wartości, które `null`są, ta funkcja `null`zwraca wartość.</span><span class="sxs-lookup"><span data-stu-id="994a2-1085">If the source sequence is empty or contains only values that are `null`, this function returns `null`.</span></span>  
  
 <span data-ttu-id="994a2-1086">W Visual Basic składni wyrażenia zapytania, `Aggregate Into Max()` klauzula tłumaczy na <xref:System.Linq.Enumerable.Max%2A>wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-1086">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-1087">Poniższy przykład kodu demonstruje, jak użyć <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> , aby określić maksymalną wartość w sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1087">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> to determine the maximum value in a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#54](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#54)]
 [!code-vb[System.Linq.Enumerable#54](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-1088"><paramref name="source" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1088"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="994a2-1089">Aggregate — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-1089">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Max (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;double&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Max(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;float64&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max (source As IEnumerable(Of Nullable(Of Double))) As Nullable(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;double&gt; Max(System::Collections::Generic::IEnumerable&lt;Nullable&lt;double&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;Nullable&lt;double&gt;&gt; -&gt; Nullable&lt;double&gt;" Usage="System.Linq.Enumerable.Max source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Double&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="994a2-1090">Sekwencja wartości null <see cref="T:System.Double" /> , aby określić wartość maksymalną.</span><span class="sxs-lookup"><span data-stu-id="994a2-1090">A sequence of nullable <see cref="T:System.Double" /> values to determine the maximum value of.</span></span></param>
        <summary><span data-ttu-id="994a2-1091">Zwraca maksymalną wartość w sekwencji wartości dopuszczających wartość <see cref="T:System.Double" /> null.</span><span class="sxs-lookup"><span data-stu-id="994a2-1091">Returns the maximum value in a sequence of nullable <see cref="T:System.Double" /> values.</span></span></summary>
        <returns><span data-ttu-id="994a2-1092">Wartość typu <c>null&lt;podwójnego&gt;</c> C# lub dopuszczającego wartość <c>null (of Double)</c> w Visual Basic, która odnosi się do wartości maksymalnej w sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1092">A value of type <c>Nullable&lt;Double&gt;</c> in C# or <c>Nullable(Of Double)</c> in Visual Basic that corresponds to the maximum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-1093"><xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> Metoda używaimplementacji<xref:System.IComparable%601>do porównywania wartości. <xref:System.Double></span><span class="sxs-lookup"><span data-stu-id="994a2-1093">The <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> method uses the <xref:System.Double> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="994a2-1094">Jeśli sekwencja źródłowa jest pusta lub zawiera tylko wartości, które `null`są, ta funkcja `null`zwraca wartość.</span><span class="sxs-lookup"><span data-stu-id="994a2-1094">If the source sequence is empty or contains only values that are `null`, this function returns `null`.</span></span>  
  
 <span data-ttu-id="994a2-1095">W Visual Basic składni wyrażenia zapytania, `Aggregate Into Max()` klauzula tłumaczy na <xref:System.Linq.Enumerable.Max%2A>wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-1095">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-1096">Poniższy przykład kodu demonstruje, jak użyć <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> , aby określić maksymalną wartość w sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1096">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> to determine the maximum value in a sequence.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#54](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#54)]
 [!code-vb[System.Linq.Enumerable#54](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-1097"><paramref name="source" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1097"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="994a2-1098">Aggregate — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-1098">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static Nullable&lt;int&gt; Max (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;int&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int32&gt; Max(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;int32&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max (source As IEnumerable(Of Nullable(Of Integer))) As Nullable(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;int&gt; Max(System::Collections::Generic::IEnumerable&lt;Nullable&lt;int&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;Nullable&lt;int&gt;&gt; -&gt; Nullable&lt;int&gt;" Usage="System.Linq.Enumerable.Max source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Int32&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="994a2-1099">Sekwencja wartości null <see cref="T:System.Int32" /> , aby określić wartość maksymalną.</span><span class="sxs-lookup"><span data-stu-id="994a2-1099">A sequence of nullable <see cref="T:System.Int32" /> values to determine the maximum value of.</span></span></param>
        <summary><span data-ttu-id="994a2-1100">Zwraca maksymalną wartość w sekwencji wartości dopuszczających wartość <see cref="T:System.Int32" /> null.</span><span class="sxs-lookup"><span data-stu-id="994a2-1100">Returns the maximum value in a sequence of nullable <see cref="T:System.Int32" /> values.</span></span></summary>
        <returns><span data-ttu-id="994a2-1101">Wartość typu <c>null&lt;Int32&gt;</c> w C# lub dopuszczający wartość <c>null (z Int32)</c> w Visual Basic, która odnosi się do wartości maksymalnej w sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1101">A value of type <c>Nullable&lt;Int32&gt;</c> in C# or <c>Nullable(Of Int32)</c> in Visual Basic that corresponds to the maximum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-1102"><xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> Metoda używaimplementacji<xref:System.IComparable%601>do porównywania wartości. <xref:System.Int32></span><span class="sxs-lookup"><span data-stu-id="994a2-1102">The <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> method uses the <xref:System.Int32> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="994a2-1103">Jeśli sekwencja źródłowa jest pusta lub zawiera tylko wartości, które `null`są, ta funkcja `null`zwraca wartość.</span><span class="sxs-lookup"><span data-stu-id="994a2-1103">If the source sequence is empty or contains only values that are `null`, this function returns `null`.</span></span>  
  
 <span data-ttu-id="994a2-1104">W Visual Basic składni wyrażenia zapytania, `Aggregate Into Max()` klauzula tłumaczy na <xref:System.Linq.Enumerable.Max%2A>wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-1104">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-1105">Poniższy przykład kodu demonstruje, jak użyć <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> , aby określić maksymalną wartość w sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1105">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> to determine the maximum value in a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#54](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#54)]
 [!code-vb[System.Linq.Enumerable#54](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-1106"><paramref name="source" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1106"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="994a2-1107">Aggregate — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-1107">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static Nullable&lt;long&gt; Max (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;long&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int64&gt; Max(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;int64&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max (source As IEnumerable(Of Nullable(Of Long))) As Nullable(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;long&gt; Max(System::Collections::Generic::IEnumerable&lt;Nullable&lt;long&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;Nullable&lt;int64&gt;&gt; -&gt; Nullable&lt;int64&gt;" Usage="System.Linq.Enumerable.Max source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Int64&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="994a2-1108">Sekwencja wartości null <see cref="T:System.Int64" /> , aby określić wartość maksymalną.</span><span class="sxs-lookup"><span data-stu-id="994a2-1108">A sequence of nullable <see cref="T:System.Int64" /> values to determine the maximum value of.</span></span></param>
        <summary><span data-ttu-id="994a2-1109">Zwraca maksymalną wartość w sekwencji wartości dopuszczających wartość <see cref="T:System.Int64" /> null.</span><span class="sxs-lookup"><span data-stu-id="994a2-1109">Returns the maximum value in a sequence of nullable <see cref="T:System.Int64" /> values.</span></span></summary>
        <returns><span data-ttu-id="994a2-1110">Wartość typu <c>Nullable&lt;Int64&gt;</c> w C# lub dopuszczający wartości <c>null (Of Int64)</c> w Visual Basic, która odnosi się do wartości maksymalnej w sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1110">A value of type <c>Nullable&lt;Int64&gt;</c> in C# or <c>Nullable(Of Int64)</c> in Visual Basic that corresponds to the maximum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-1111"><xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> Metoda używaimplementacji<xref:System.IComparable%601>do porównywania wartości. <xref:System.Int64></span><span class="sxs-lookup"><span data-stu-id="994a2-1111">The <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> method uses the <xref:System.Int64> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="994a2-1112">Jeśli sekwencja źródłowa jest pusta lub zawiera tylko wartości, które `null`są, ta funkcja `null`zwraca wartość.</span><span class="sxs-lookup"><span data-stu-id="994a2-1112">If the source sequence is empty or contains only values that are `null`, this function returns `null`.</span></span>  
  
 <span data-ttu-id="994a2-1113">W Visual Basic składni wyrażenia zapytania, `Aggregate Into Max()` klauzula tłumaczy na <xref:System.Linq.Enumerable.Max%2A>wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-1113">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-1114">Poniższy przykład kodu demonstruje, jak użyć <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> , aby określić maksymalną wartość w sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1114">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> to determine the maximum value in a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#54](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#54)]
 [!code-vb[System.Linq.Enumerable#54](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-1115"><paramref name="source" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1115"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="994a2-1116">Aggregate — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-1116">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static Nullable&lt;float&gt; Max (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;float&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float32&gt; Max(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;float32&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max (source As IEnumerable(Of Nullable(Of Single))) As Nullable(Of Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;float&gt; Max(System::Collections::Generic::IEnumerable&lt;Nullable&lt;float&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;Nullable&lt;single&gt;&gt; -&gt; Nullable&lt;single&gt;" Usage="System.Linq.Enumerable.Max source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Single&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="994a2-1117">Sekwencja wartości null <see cref="T:System.Single" /> , aby określić wartość maksymalną.</span><span class="sxs-lookup"><span data-stu-id="994a2-1117">A sequence of nullable <see cref="T:System.Single" /> values to determine the maximum value of.</span></span></param>
        <summary><span data-ttu-id="994a2-1118">Zwraca maksymalną wartość w sekwencji wartości dopuszczających wartość <see cref="T:System.Single" /> null.</span><span class="sxs-lookup"><span data-stu-id="994a2-1118">Returns the maximum value in a sequence of nullable <see cref="T:System.Single" /> values.</span></span></summary>
        <returns><span data-ttu-id="994a2-1119">Wartość typu <c>null&lt;Single&gt;</c> in C# lub <c>Nullable (of Single)</c> w Visual Basic, która odnosi się do wartości maksymalnej w sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1119">A value of type <c>Nullable&lt;Single&gt;</c> in C# or <c>Nullable(Of Single)</c> in Visual Basic that corresponds to the maximum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-1120"><xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> Metoda używaimplementacji<xref:System.IComparable%601>do porównywania wartości. <xref:System.Single></span><span class="sxs-lookup"><span data-stu-id="994a2-1120">The <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> method uses the <xref:System.Single> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="994a2-1121">Jeśli sekwencja źródłowa jest pusta lub zawiera tylko wartości, które `null`są, ta funkcja `null`zwraca wartość.</span><span class="sxs-lookup"><span data-stu-id="994a2-1121">If the source sequence is empty or contains only values that are `null`, this function returns `null`.</span></span>  
  
 <span data-ttu-id="994a2-1122">W Visual Basic składni wyrażenia zapytania, `Aggregate Into Max()` klauzula tłumaczy na <xref:System.Linq.Enumerable.Max%2A>wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-1122">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-1123">Poniższy przykład kodu demonstruje, jak użyć <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> , aby określić maksymalną wartość w sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1123">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> to determine the maximum value in a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#54](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#54)]
 [!code-vb[System.Linq.Enumerable#54](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-1124"><paramref name="source" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1124"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="994a2-1125">Aggregate — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-1125">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static float Max (this System.Collections.Generic.IEnumerable&lt;float&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Max(class System.Collections.Generic.IEnumerable`1&lt;float32&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Single})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max (source As IEnumerable(Of Single)) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static float Max(System::Collections::Generic::IEnumerable&lt;float&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;single&gt; -&gt; single" Usage="System.Linq.Enumerable.Max source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Single&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="994a2-1126">Sekwencja <see cref="T:System.Single" /> wartości, aby określić wartość maksymalną.</span><span class="sxs-lookup"><span data-stu-id="994a2-1126">A sequence of <see cref="T:System.Single" /> values to determine the maximum value of.</span></span></param>
        <summary><span data-ttu-id="994a2-1127">Zwraca maksymalną wartość w sekwencji <see cref="T:System.Single" /> wartości.</span><span class="sxs-lookup"><span data-stu-id="994a2-1127">Returns the maximum value in a sequence of <see cref="T:System.Single" /> values.</span></span></summary>
        <returns><span data-ttu-id="994a2-1128">Maksymalna wartość w sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1128">The maximum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-1129"><xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29> Metoda używaimplementacji<xref:System.IComparable%601>do porównywania wartości. <xref:System.Single></span><span class="sxs-lookup"><span data-stu-id="994a2-1129">The <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29> method uses the <xref:System.Single> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="994a2-1130">W Visual Basic składni wyrażenia zapytania, `Aggregate Into Max()` klauzula tłumaczy na <xref:System.Linq.Enumerable.Max%2A>wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-1130">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-1131">Poniższy przykład kodu demonstruje, jak użyć <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29> , aby określić maksymalną wartość w sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1131">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29> to determine the maximum value in a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#52](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#52)]
 [!code-vb[System.Linq.Enumerable#52](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-1132"><paramref name="source" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1132"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="994a2-1133"><paramref name="source" />nie zawiera żadnych elementów.</span><span class="sxs-lookup"><span data-stu-id="994a2-1133"><paramref name="source" /> contains no elements.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="994a2-1134">Aggregate — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-1134">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Max&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource Max&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource Max&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max(Of TSource) (source As IEnumerable(Of TSource)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource Max(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;'Source&gt; -&gt; 'Source" Usage="System.Linq.Enumerable.Max source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-1135">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1135">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-1136">Kolejność wartości do określenia wartości maksymalnej.</span><span class="sxs-lookup"><span data-stu-id="994a2-1136">A sequence of values to determine the maximum value of.</span></span></param>
        <summary><span data-ttu-id="994a2-1137">Zwraca maksymalną wartość w sekwencji ogólnej.</span><span class="sxs-lookup"><span data-stu-id="994a2-1137">Returns the maximum value in a generic sequence.</span></span></summary>
        <returns><span data-ttu-id="994a2-1138">Maksymalna wartość w sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1138">The maximum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-1139">Jeśli typ `TSource` implementuje <xref:System.IComparable%601>, <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> Metoda używa tej implementacji do porównywania wartości.</span><span class="sxs-lookup"><span data-stu-id="994a2-1139">If type `TSource` implements <xref:System.IComparable%601>, the <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> method uses that implementation to compare values.</span></span> <span data-ttu-id="994a2-1140">W przeciwnym razie, `TSource` Jeśli <xref:System.IComparable>typ implementuje, ta implementacja jest używana do porównywania wartości.</span><span class="sxs-lookup"><span data-stu-id="994a2-1140">Otherwise, if type `TSource` implements <xref:System.IComparable>, that implementation is used to compare values.</span></span>  
  
 <span data-ttu-id="994a2-1141">Jeśli `TSource` jest typem referencyjnym, a sekwencja źródłowa jest pusta lub zawiera tylko wartości, `null`które są, ta `null`Metoda zwraca.</span><span class="sxs-lookup"><span data-stu-id="994a2-1141">If `TSource` is a reference type and the source sequence is empty or contains only values that are `null`, this method returns `null`.</span></span>  
  
 <span data-ttu-id="994a2-1142">W Visual Basic składni wyrażenia zapytania, `Aggregate Into Max()` klauzula tłumaczy na <xref:System.Linq.Enumerable.Max%2A>wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-1142">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-1143">Poniższy przykład kodu demonstruje, jak użyć <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> , aby określić maksymalną wartość w <xref:System.IComparable%601> sekwencji obiektów.</span><span class="sxs-lookup"><span data-stu-id="994a2-1143">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to determine the maximum value in a sequence of <xref:System.IComparable%601> objects.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#57](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#57)]
 [!code-vb[System.Linq.Enumerable#57](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#57)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-1144"><paramref name="source" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1144"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="994a2-1145">Brak obiektu w <paramref name="source" /> <see cref="T:System.IComparable" /> implementującym interfejsie lub <see cref="T:System.IComparable`1" /> .</span><span class="sxs-lookup"><span data-stu-id="994a2-1145">No object in <paramref name="source" /> implements the <see cref="T:System.IComparable" /> or <see cref="T:System.IComparable`1" /> interface.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="994a2-1146">Aggregate — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-1146">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Max&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static decimal Max&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,decimal&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Max&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Decimal&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Decimal)) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Decimal Max(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, System::Decimal&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;'Source&gt; * Func&lt;'Source, decimal&gt; -&gt; decimal" Usage="System.Linq.Enumerable.Max (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Decimal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-1147">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1147">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-1148">Kolejność wartości do określenia wartości maksymalnej.</span><span class="sxs-lookup"><span data-stu-id="994a2-1148">A sequence of values to determine the maximum value of.</span></span></param>
        <param name="selector"><span data-ttu-id="994a2-1149">Funkcja transformacji do zastosowania do każdego elementu.</span><span class="sxs-lookup"><span data-stu-id="994a2-1149">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="994a2-1150">Wywołuje funkcję transformacji dla każdego elementu sekwencji i zwraca wartość maksymalną <see cref="T:System.Decimal" /> .</span><span class="sxs-lookup"><span data-stu-id="994a2-1150">Invokes a transform function on each element of a sequence and returns the maximum <see cref="T:System.Decimal" /> value.</span></span></summary>
        <returns><span data-ttu-id="994a2-1151">Maksymalna wartość w sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1151">The maximum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-1152"><xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Decimal%7D%29> Metoda używaimplementacji<xref:System.IComparable%601>do porównywania wartości. <xref:System.Decimal></span><span class="sxs-lookup"><span data-stu-id="994a2-1152">The <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Decimal%7D%29> method uses the <xref:System.Decimal> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="994a2-1153">Tę metodę można zastosować do sekwencji dowolnych wartości, jeśli podajesz funkcję, `selector`która projektuje `source` elementy członkowskie do typu <xref:System.Decimal>liczbowego.</span><span class="sxs-lookup"><span data-stu-id="994a2-1153">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Decimal>.</span></span>  
  
 <span data-ttu-id="994a2-1154">W Visual Basic składni wyrażenia zapytania, `Aggregate Into Max()` klauzula tłumaczy na <xref:System.Linq.Enumerable.Max%2A>wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-1154">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-1155">Poniższy przykład kodu demonstruje, jak użyć <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> , aby określić maksymalną wartość w sekwencji prognozowanych wartości.</span><span class="sxs-lookup"><span data-stu-id="994a2-1155">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the maximum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#58](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#58)]
 [!code-vb[System.Linq.Enumerable#58](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#58)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-1156"><paramref name="source" />lub <paramref name="selector" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1156"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="994a2-1157"><paramref name="source" />nie zawiera żadnych elementów.</span><span class="sxs-lookup"><span data-stu-id="994a2-1157"><paramref name="source" /> contains no elements.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="994a2-1158">Aggregate — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-1158">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Max&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static double Max&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,double&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Max&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, float64&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Double)) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static double Max(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, double&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;'Source&gt; * Func&lt;'Source, double&gt; -&gt; double" Usage="System.Linq.Enumerable.Max (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Double&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-1159">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1159">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-1160">Kolejność wartości do określenia wartości maksymalnej.</span><span class="sxs-lookup"><span data-stu-id="994a2-1160">A sequence of values to determine the maximum value of.</span></span></param>
        <param name="selector"><span data-ttu-id="994a2-1161">Funkcja transformacji do zastosowania do każdego elementu.</span><span class="sxs-lookup"><span data-stu-id="994a2-1161">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="994a2-1162">Wywołuje funkcję transformacji dla każdego elementu sekwencji i zwraca wartość maksymalną <see cref="T:System.Double" /> .</span><span class="sxs-lookup"><span data-stu-id="994a2-1162">Invokes a transform function on each element of a sequence and returns the maximum <see cref="T:System.Double" /> value.</span></span></summary>
        <returns><span data-ttu-id="994a2-1163">Maksymalna wartość w sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1163">The maximum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-1164"><xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> Metoda używaimplementacji<xref:System.IComparable%601>do porównywania wartości. <xref:System.Double></span><span class="sxs-lookup"><span data-stu-id="994a2-1164">The <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> method uses the <xref:System.Double> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="994a2-1165">Tę metodę można zastosować do sekwencji dowolnych wartości, jeśli podajesz funkcję, `selector`która projektuje `source` elementy członkowskie do typu <xref:System.Double>liczbowego.</span><span class="sxs-lookup"><span data-stu-id="994a2-1165">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Double>.</span></span>  
  
 <span data-ttu-id="994a2-1166">W Visual Basic składni wyrażenia zapytania, `Aggregate Into Max()` klauzula tłumaczy na <xref:System.Linq.Enumerable.Max%2A>wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-1166">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-1167">Poniższy przykład kodu demonstruje, jak użyć <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> , aby określić maksymalną wartość w sekwencji prognozowanych wartości.</span><span class="sxs-lookup"><span data-stu-id="994a2-1167">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the maximum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#58](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#58)]
 [!code-vb[System.Linq.Enumerable#58](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#58)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-1168"><paramref name="source" />lub <paramref name="selector" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1168"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="994a2-1169"><paramref name="source" />nie zawiera żadnych elementów.</span><span class="sxs-lookup"><span data-stu-id="994a2-1169"><paramref name="source" /> contains no elements.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="994a2-1170">Aggregate — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-1170">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Max&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static int Max&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,int&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Max&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, int32&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Integer)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int Max(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, int&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;'Source&gt; * Func&lt;'Source, int&gt; -&gt; int" Usage="System.Linq.Enumerable.Max (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Int32&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-1171">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1171">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-1172">Kolejność wartości do określenia wartości maksymalnej.</span><span class="sxs-lookup"><span data-stu-id="994a2-1172">A sequence of values to determine the maximum value of.</span></span></param>
        <param name="selector"><span data-ttu-id="994a2-1173">Funkcja transformacji do zastosowania do każdego elementu.</span><span class="sxs-lookup"><span data-stu-id="994a2-1173">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="994a2-1174">Wywołuje funkcję transformacji dla każdego elementu sekwencji i zwraca wartość maksymalną <see cref="T:System.Int32" /> .</span><span class="sxs-lookup"><span data-stu-id="994a2-1174">Invokes a transform function on each element of a sequence and returns the maximum <see cref="T:System.Int32" /> value.</span></span></summary>
        <returns><span data-ttu-id="994a2-1175">Maksymalna wartość w sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1175">The maximum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-1176"><xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> Metoda używaimplementacji<xref:System.IComparable%601>do porównywania wartości. <xref:System.Int32></span><span class="sxs-lookup"><span data-stu-id="994a2-1176">The <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> method uses the <xref:System.Int32> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="994a2-1177">Tę metodę można zastosować do sekwencji dowolnych wartości, jeśli podajesz funkcję, `selector`która projektuje `source` elementy członkowskie do typu <xref:System.Int32>liczbowego.</span><span class="sxs-lookup"><span data-stu-id="994a2-1177">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Int32>.</span></span>  
  
 <span data-ttu-id="994a2-1178">W Visual Basic składni wyrażenia zapytania, `Aggregate Into Max()` klauzula tłumaczy na <xref:System.Linq.Enumerable.Max%2A>wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-1178">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-1179">Poniższy przykład kodu demonstruje, jak użyć <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> , aby określić maksymalną wartość w sekwencji prognozowanych wartości.</span><span class="sxs-lookup"><span data-stu-id="994a2-1179">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the maximum value in a sequence of projected values.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#58](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#58)]
 [!code-vb[System.Linq.Enumerable#58](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#58)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-1180"><paramref name="source" />lub <paramref name="selector" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1180"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="994a2-1181"><paramref name="source" />nie zawiera żadnych elementów.</span><span class="sxs-lookup"><span data-stu-id="994a2-1181"><paramref name="source" /> contains no elements.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="994a2-1182">Aggregate — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-1182">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Max&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static long Max&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,long&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Max&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, int64&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Long)) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static long Max(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, long&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;'Source&gt; * Func&lt;'Source, int64&gt; -&gt; int64" Usage="System.Linq.Enumerable.Max (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Int64&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-1183">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1183">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-1184">Kolejność wartości do określenia wartości maksymalnej.</span><span class="sxs-lookup"><span data-stu-id="994a2-1184">A sequence of values to determine the maximum value of.</span></span></param>
        <param name="selector"><span data-ttu-id="994a2-1185">Funkcja transformacji do zastosowania do każdego elementu.</span><span class="sxs-lookup"><span data-stu-id="994a2-1185">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="994a2-1186">Wywołuje funkcję transformacji dla każdego elementu sekwencji i zwraca wartość maksymalną <see cref="T:System.Int64" /> .</span><span class="sxs-lookup"><span data-stu-id="994a2-1186">Invokes a transform function on each element of a sequence and returns the maximum <see cref="T:System.Int64" /> value.</span></span></summary>
        <returns><span data-ttu-id="994a2-1187">Maksymalna wartość w sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1187">The maximum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-1188"><xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29> Metoda używaimplementacji<xref:System.IComparable%601>do porównywania wartości. <xref:System.Int64></span><span class="sxs-lookup"><span data-stu-id="994a2-1188">The <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29> method uses the <xref:System.Int64> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="994a2-1189">Tę metodę można zastosować do sekwencji dowolnych wartości, jeśli podajesz funkcję, `selector`która projektuje `source` elementy członkowskie do typu <xref:System.Int64>liczbowego.</span><span class="sxs-lookup"><span data-stu-id="994a2-1189">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Int64>.</span></span>  
  
 <span data-ttu-id="994a2-1190">W Visual Basic składni wyrażenia zapytania, `Aggregate Into Max()` klauzula tłumaczy na <xref:System.Linq.Enumerable.Max%2A>wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-1190">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-1191">Poniższy przykład kodu demonstruje, jak użyć <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> , aby określić maksymalną wartość w sekwencji prognozowanych wartości.</span><span class="sxs-lookup"><span data-stu-id="994a2-1191">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the maximum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#58](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#58)]
 [!code-vb[System.Linq.Enumerable#58](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#58)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-1192"><paramref name="source" />lub <paramref name="selector" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1192"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="994a2-1193"><paramref name="source" />nie zawiera żadnych elementów.</span><span class="sxs-lookup"><span data-stu-id="994a2-1193"><paramref name="source" /> contains no elements.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="994a2-1194">Aggregate — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-1194">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Max&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;decimal&gt; Max&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;decimal&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype System.Decimal&gt; Max&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Decimal))) As Nullable(Of Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;System::Decimal&gt; Max(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;System::Decimal&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;decimal&gt;&gt; -&gt; Nullable&lt;decimal&gt;" Usage="System.Linq.Enumerable.Max (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Decimal&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-1195">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1195">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-1196">Kolejność wartości do określenia wartości maksymalnej.</span><span class="sxs-lookup"><span data-stu-id="994a2-1196">A sequence of values to determine the maximum value of.</span></span></param>
        <param name="selector"><span data-ttu-id="994a2-1197">Funkcja transformacji do zastosowania do każdego elementu.</span><span class="sxs-lookup"><span data-stu-id="994a2-1197">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="994a2-1198">Wywołuje funkcję transformacji dla każdego elementu sekwencji i zwraca maksymalną wartość null <see cref="T:System.Decimal" /> .</span><span class="sxs-lookup"><span data-stu-id="994a2-1198">Invokes a transform function on each element of a sequence and returns the maximum nullable <see cref="T:System.Decimal" /> value.</span></span></summary>
        <returns><span data-ttu-id="994a2-1199">Wartość typu <c>Decimal&lt;&gt; -nullable</c> in C# lub <c>Nullable (liczba dziesiętna)</c> w Visual Basic, która odnosi się do wartości maksymalnej w sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1199">The value of type <c>Nullable&lt;Decimal&gt;</c> in C# or <c>Nullable(Of Decimal)</c> in Visual Basic that corresponds to the maximum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-1200"><xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%29> Metoda używaimplementacji<xref:System.IComparable%601>do porównywania wartości. <xref:System.Decimal></span><span class="sxs-lookup"><span data-stu-id="994a2-1200">The <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%29> method uses the <xref:System.Decimal> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="994a2-1201">Tę metodę można zastosować do sekwencji dowolnych wartości, jeśli podajesz funkcję, `selector`która zawiera projekty `source` elementów członkowskich do typu liczbowego, `Nullable<Decimal>` w tym w C# lub `Nullable(Of Decimal)` w Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="994a2-1201">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Decimal>` in C# or `Nullable(Of Decimal)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="994a2-1202">W Visual Basic składni wyrażenia zapytania, `Aggregate Into Max()` klauzula tłumaczy na <xref:System.Linq.Enumerable.Max%2A>wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-1202">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-1203">Poniższy przykład kodu demonstruje, jak użyć <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> , aby określić maksymalną wartość w sekwencji prognozowanych wartości.</span><span class="sxs-lookup"><span data-stu-id="994a2-1203">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the maximum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#58](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#58)]
 [!code-vb[System.Linq.Enumerable#58](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#58)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-1204"><paramref name="source" />lub <paramref name="selector" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1204"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="994a2-1205">Aggregate — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-1205">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Max&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Max&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;double&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Max&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;float64&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Double))) As Nullable(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;double&gt; Max(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;double&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;double&gt;&gt; -&gt; Nullable&lt;double&gt;" Usage="System.Linq.Enumerable.Max (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Double&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-1206">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1206">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-1207">Kolejność wartości do określenia wartości maksymalnej.</span><span class="sxs-lookup"><span data-stu-id="994a2-1207">A sequence of values to determine the maximum value of.</span></span></param>
        <param name="selector"><span data-ttu-id="994a2-1208">Funkcja transformacji do zastosowania do każdego elementu.</span><span class="sxs-lookup"><span data-stu-id="994a2-1208">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="994a2-1209">Wywołuje funkcję transformacji dla każdego elementu sekwencji i zwraca maksymalną wartość null <see cref="T:System.Double" /> .</span><span class="sxs-lookup"><span data-stu-id="994a2-1209">Invokes a transform function on each element of a sequence and returns the maximum nullable <see cref="T:System.Double" /> value.</span></span></summary>
        <returns><span data-ttu-id="994a2-1210">Wartość typu <c>null&lt;podwójnego&gt;</c> C# lub dopuszczającego wartość <c>null (of Double)</c> w Visual Basic, która odnosi się do wartości maksymalnej w sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1210">The value of type <c>Nullable&lt;Double&gt;</c> in C# or <c>Nullable(Of Double)</c> in Visual Basic that corresponds to the maximum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-1211"><xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%29> Metoda używaimplementacji<xref:System.IComparable%601>do porównywania wartości. <xref:System.Double></span><span class="sxs-lookup"><span data-stu-id="994a2-1211">The <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%29> method uses the <xref:System.Double> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="994a2-1212">Tę metodę można zastosować do sekwencji dowolnych wartości, jeśli podajesz funkcję, `selector`która zawiera projekty `source` elementów członkowskich do typu liczbowego, `Nullable<Double>` w tym w C# lub `Nullable(Of Double)` w Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="994a2-1212">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Double>` in C# or `Nullable(Of Double)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="994a2-1213">W Visual Basic składni wyrażenia zapytania, `Aggregate Into Max()` klauzula tłumaczy na <xref:System.Linq.Enumerable.Max%2A>wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-1213">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-1214">Poniższy przykład kodu demonstruje, jak użyć <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> , aby określić maksymalną wartość w sekwencji prognozowanych wartości.</span><span class="sxs-lookup"><span data-stu-id="994a2-1214">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the maximum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#58](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#58)]
 [!code-vb[System.Linq.Enumerable#58](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#58)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-1215"><paramref name="source" />lub <paramref name="selector" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1215"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="994a2-1216">Aggregate — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-1216">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Max&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;int&gt; Max&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;int&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int32&gt; Max&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;int32&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Integer))) As Nullable(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;int&gt; Max(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;int&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;int&gt;&gt; -&gt; Nullable&lt;int&gt;" Usage="System.Linq.Enumerable.Max (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Int32&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-1217">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1217">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-1218">Kolejność wartości do określenia wartości maksymalnej.</span><span class="sxs-lookup"><span data-stu-id="994a2-1218">A sequence of values to determine the maximum value of.</span></span></param>
        <param name="selector"><span data-ttu-id="994a2-1219">Funkcja transformacji do zastosowania do każdego elementu.</span><span class="sxs-lookup"><span data-stu-id="994a2-1219">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="994a2-1220">Wywołuje funkcję transformacji dla każdego elementu sekwencji i zwraca maksymalną wartość null <see cref="T:System.Int32" /> .</span><span class="sxs-lookup"><span data-stu-id="994a2-1220">Invokes a transform function on each element of a sequence and returns the maximum nullable <see cref="T:System.Int32" /> value.</span></span></summary>
        <returns><span data-ttu-id="994a2-1221">Wartość typu <c>null&lt;Int32&gt;</c> w C# lub dopuszczający wartość <c>null (z Int32)</c> w Visual Basic, która odnosi się do wartości maksymalnej w sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1221">The value of type <c>Nullable&lt;Int32&gt;</c> in C# or <c>Nullable(Of Int32)</c> in Visual Basic that corresponds to the maximum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-1222"><xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%29> Metoda używaimplementacji<xref:System.IComparable%601>do porównywania wartości. <xref:System.Int32></span><span class="sxs-lookup"><span data-stu-id="994a2-1222">The <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%29> method uses the <xref:System.Int32> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="994a2-1223">Tę metodę można zastosować do sekwencji dowolnych wartości, jeśli podajesz funkcję, `selector`która zawiera projekty `source` elementów członkowskich do typu liczbowego, `Nullable<Int32>` w tym w C# lub `Nullable(Of Int32)` w Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="994a2-1223">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Int32>` in C# or `Nullable(Of Int32)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="994a2-1224">W Visual Basic składni wyrażenia zapytania, `Aggregate Into Max()` klauzula tłumaczy na <xref:System.Linq.Enumerable.Max%2A>wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-1224">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-1225">Poniższy przykład kodu demonstruje, jak użyć <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> , aby określić maksymalną wartość w sekwencji prognozowanych wartości.</span><span class="sxs-lookup"><span data-stu-id="994a2-1225">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the maximum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#58](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#58)]
 [!code-vb[System.Linq.Enumerable#58](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#58)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-1226"><paramref name="source" />lub <paramref name="selector" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1226"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="994a2-1227">Aggregate — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-1227">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Max&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;long&gt; Max&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;long&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int64&gt; Max&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;int64&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Long))) As Nullable(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;long&gt; Max(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;long&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;int64&gt;&gt; -&gt; Nullable&lt;int64&gt;" Usage="System.Linq.Enumerable.Max (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Int64&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-1228">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1228">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-1229">Kolejność wartości do określenia wartości maksymalnej.</span><span class="sxs-lookup"><span data-stu-id="994a2-1229">A sequence of values to determine the maximum value of.</span></span></param>
        <param name="selector"><span data-ttu-id="994a2-1230">Funkcja transformacji do zastosowania do każdego elementu.</span><span class="sxs-lookup"><span data-stu-id="994a2-1230">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="994a2-1231">Wywołuje funkcję transformacji dla każdego elementu sekwencji i zwraca maksymalną wartość null <see cref="T:System.Int64" /> .</span><span class="sxs-lookup"><span data-stu-id="994a2-1231">Invokes a transform function on each element of a sequence and returns the maximum nullable <see cref="T:System.Int64" /> value.</span></span></summary>
        <returns><span data-ttu-id="994a2-1232">Wartość typu <c>Nullable&lt;Int64&gt;</c> w C# lub dopuszczający wartości <c>null (Of Int64)</c> w Visual Basic, która odnosi się do wartości maksymalnej w sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1232">The value of type <c>Nullable&lt;Int64&gt;</c> in C# or <c>Nullable(Of Int64)</c> in Visual Basic that corresponds to the maximum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-1233"><xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%29> Metoda używaimplementacji<xref:System.IComparable%601>do porównywania wartości. <xref:System.Int64></span><span class="sxs-lookup"><span data-stu-id="994a2-1233">The <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%29> method uses the <xref:System.Int64> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="994a2-1234">Tę metodę można zastosować do sekwencji dowolnych wartości, jeśli podajesz funkcję, `selector`która zawiera projekty `source` elementów członkowskich do typu liczbowego, `Nullable<Int64>` w tym w C# lub `Nullable(Of Int64)` w Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="994a2-1234">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Int64>` in C# or `Nullable(Of Int64)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="994a2-1235">W Visual Basic składni wyrażenia zapytania, `Aggregate Into Max()` klauzula tłumaczy na <xref:System.Linq.Enumerable.Max%2A>wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-1235">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-1236">Poniższy przykład kodu demonstruje, jak użyć <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> , aby określić maksymalną wartość w sekwencji prognozowanych wartości.</span><span class="sxs-lookup"><span data-stu-id="994a2-1236">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the maximum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#58](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#58)]
 [!code-vb[System.Linq.Enumerable#58](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#58)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-1237"><paramref name="source" />lub <paramref name="selector" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1237"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="994a2-1238">Aggregate — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-1238">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Max&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;float&gt; Max&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;float&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float32&gt; Max&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;float32&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Single))) As Nullable(Of Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;float&gt; Max(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;float&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;single&gt;&gt; -&gt; Nullable&lt;single&gt;" Usage="System.Linq.Enumerable.Max (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Single&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-1239">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1239">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-1240">Kolejność wartości do określenia wartości maksymalnej.</span><span class="sxs-lookup"><span data-stu-id="994a2-1240">A sequence of values to determine the maximum value of.</span></span></param>
        <param name="selector"><span data-ttu-id="994a2-1241">Funkcja transformacji do zastosowania do każdego elementu.</span><span class="sxs-lookup"><span data-stu-id="994a2-1241">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="994a2-1242">Wywołuje funkcję transformacji dla każdego elementu sekwencji i zwraca maksymalną wartość null <see cref="T:System.Single" /> .</span><span class="sxs-lookup"><span data-stu-id="994a2-1242">Invokes a transform function on each element of a sequence and returns the maximum nullable <see cref="T:System.Single" /> value.</span></span></summary>
        <returns><span data-ttu-id="994a2-1243">Wartość typu <c>null&lt;Single&gt;</c> in C# lub <c>Nullable (of Single)</c> w Visual Basic, która odnosi się do wartości maksymalnej w sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1243">The value of type <c>Nullable&lt;Single&gt;</c> in C# or <c>Nullable(Of Single)</c> in Visual Basic that corresponds to the maximum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-1244"><xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%29> Metoda używaimplementacji<xref:System.IComparable%601>do porównywania wartości. <xref:System.Single></span><span class="sxs-lookup"><span data-stu-id="994a2-1244">The <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%29> method uses the <xref:System.Single> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="994a2-1245">Tę metodę można zastosować do sekwencji dowolnych wartości, jeśli podajesz funkcję, `selector`która zawiera projekty `source` elementów członkowskich do typu liczbowego, `Nullable<Single>` w tym w C# lub `Nullable(Of Single)` w Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="994a2-1245">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Single>` in C# or `Nullable(Of Single)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="994a2-1246">W Visual Basic składni wyrażenia zapytania, `Aggregate Into Max()` klauzula tłumaczy na <xref:System.Linq.Enumerable.Max%2A>wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-1246">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-1247">Poniższy przykład kodu demonstruje, jak użyć <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> , aby określić maksymalną wartość w sekwencji prognozowanych wartości.</span><span class="sxs-lookup"><span data-stu-id="994a2-1247">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the maximum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#58](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#58)]
 [!code-vb[System.Linq.Enumerable#58](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#58)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-1248"><paramref name="source" />lub <paramref name="selector" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1248"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="994a2-1249">Aggregate — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-1249">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Max&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static float Max&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,float&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Max&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, float32&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Single)) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static float Max(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, float&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;'Source&gt; * Func&lt;'Source, single&gt; -&gt; single" Usage="System.Linq.Enumerable.Max (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Single&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-1250">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1250">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-1251">Kolejność wartości do określenia wartości maksymalnej.</span><span class="sxs-lookup"><span data-stu-id="994a2-1251">A sequence of values to determine the maximum value of.</span></span></param>
        <param name="selector"><span data-ttu-id="994a2-1252">Funkcja transformacji do zastosowania do każdego elementu.</span><span class="sxs-lookup"><span data-stu-id="994a2-1252">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="994a2-1253">Wywołuje funkcję transformacji dla każdego elementu sekwencji i zwraca wartość maksymalną <see cref="T:System.Single" /> .</span><span class="sxs-lookup"><span data-stu-id="994a2-1253">Invokes a transform function on each element of a sequence and returns the maximum <see cref="T:System.Single" /> value.</span></span></summary>
        <returns><span data-ttu-id="994a2-1254">Maksymalna wartość w sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1254">The maximum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-1255"><xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Single%7D%29> Metoda używaimplementacji<xref:System.IComparable%601>do porównywania wartości. <xref:System.Single></span><span class="sxs-lookup"><span data-stu-id="994a2-1255">The <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Single%7D%29> method uses the <xref:System.Single> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="994a2-1256">Tę metodę można zastosować do sekwencji dowolnych wartości, jeśli podajesz funkcję, `selector`która projektuje `source` elementy członkowskie do typu <xref:System.Single>liczbowego.</span><span class="sxs-lookup"><span data-stu-id="994a2-1256">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Single>.</span></span>  
  
 <span data-ttu-id="994a2-1257">W Visual Basic składni wyrażenia zapytania, `Aggregate Into Max()` klauzula tłumaczy na <xref:System.Linq.Enumerable.Max%2A>wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-1257">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-1258">Poniższy przykład kodu demonstruje, jak użyć <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> , aby określić maksymalną wartość w sekwencji prognozowanych wartości.</span><span class="sxs-lookup"><span data-stu-id="994a2-1258">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the maximum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#58](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#58)]
 [!code-vb[System.Linq.Enumerable#58](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#58)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-1259"><paramref name="source" />lub <paramref name="selector" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1259"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="994a2-1260"><paramref name="source" />nie zawiera żadnych elementów.</span><span class="sxs-lookup"><span data-stu-id="994a2-1260"><paramref name="source" /> contains no elements.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="994a2-1261">Aggregate — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-1261">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Max&lt;TSource,TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Max&lt;TSource,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TResult&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Max&lt;TSource, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TResult&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max(Of TSource, TResult) (source As IEnumerable(Of TSource), selector As Func(Of TSource, TResult)) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TResult Max(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TResult&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;'Source&gt; * Func&lt;'Source, 'Result&gt; -&gt; 'Result" Usage="System.Linq.Enumerable.Max (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-1262">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1262">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="994a2-1263">Typ wartości zwracanej przez <paramref name="selector" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1263">The type of the value returned by <paramref name="selector" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-1264">Kolejność wartości do określenia wartości maksymalnej.</span><span class="sxs-lookup"><span data-stu-id="994a2-1264">A sequence of values to determine the maximum value of.</span></span></param>
        <param name="selector"><span data-ttu-id="994a2-1265">Funkcja transformacji do zastosowania do każdego elementu.</span><span class="sxs-lookup"><span data-stu-id="994a2-1265">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="994a2-1266">Wywołuje funkcję transformacji dla każdego elementu sekwencji ogólnej i zwraca maksymalną wartość wynikową.</span><span class="sxs-lookup"><span data-stu-id="994a2-1266">Invokes a transform function on each element of a generic sequence and returns the maximum resulting value.</span></span></summary>
        <returns><span data-ttu-id="994a2-1267">Maksymalna wartość w sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1267">The maximum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-1268">Jeśli typ `TResult` implementuje <xref:System.IComparable%601>, ta metoda używa tej implementacji do porównywania wartości.</span><span class="sxs-lookup"><span data-stu-id="994a2-1268">If type `TResult` implements <xref:System.IComparable%601>, this method uses that implementation to compare values.</span></span> <span data-ttu-id="994a2-1269">W przeciwnym razie, `TResult` Jeśli <xref:System.IComparable>typ implementuje, ta implementacja jest używana do porównywania wartości.</span><span class="sxs-lookup"><span data-stu-id="994a2-1269">Otherwise, if type `TResult` implements <xref:System.IComparable>, that implementation is used to compare values.</span></span>  
  
 <span data-ttu-id="994a2-1270">W Visual Basic składni wyrażenia zapytania, `Aggregate Into Max()` klauzula tłumaczy na <xref:System.Linq.Enumerable.Max%2A>wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-1270">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-1271">Poniższy przykład kodu demonstruje, jak użyć <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> , aby określić maksymalną wartość w sekwencji prognozowanych wartości.</span><span class="sxs-lookup"><span data-stu-id="994a2-1271">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the maximum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#58](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#58)]
 [!code-vb[System.Linq.Enumerable#58](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#58)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-1272"><paramref name="source" />lub <paramref name="selector" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1272"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="994a2-1273">Aggregate — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-1273">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Min">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="994a2-1274">Zwraca wartość minimalną w sekwencji wartości.</span><span class="sxs-lookup"><span data-stu-id="994a2-1274">Returns the minimum value in a sequence of values.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static decimal Min (this System.Collections.Generic.IEnumerable&lt;decimal&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Min(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Decimal&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Decimal})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min (source As IEnumerable(Of Decimal)) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Decimal Min(System::Collections::Generic::IEnumerable&lt;System::Decimal&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;decimal&gt; -&gt; decimal" Usage="System.Linq.Enumerable.Min source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Decimal&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="994a2-1275">Sekwencja <see cref="T:System.Decimal" /> wartości do określenia wartości minimalnej.</span><span class="sxs-lookup"><span data-stu-id="994a2-1275">A sequence of <see cref="T:System.Decimal" /> values to determine the minimum value of.</span></span></param>
        <summary><span data-ttu-id="994a2-1276">Zwraca wartość minimalną w sekwencji <see cref="T:System.Decimal" /> wartości.</span><span class="sxs-lookup"><span data-stu-id="994a2-1276">Returns the minimum value in a sequence of <see cref="T:System.Decimal" /> values.</span></span></summary>
        <returns><span data-ttu-id="994a2-1277">Minimalna wartość w sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1277">The minimum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-1278"><xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Decimal%7D%29> Metoda używaimplementacji<xref:System.IComparable%601>do porównywania wartości. <xref:System.Decimal></span><span class="sxs-lookup"><span data-stu-id="994a2-1278">The <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Decimal%7D%29> method uses the <xref:System.Decimal> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="994a2-1279">W Visual Basic składni wyrażenia zapytania, `Aggregate Into Min()` klauzula tłumaczy na <xref:System.Linq.Enumerable.Min%2A>wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-1279">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-1280">Poniższy przykład kodu demonstruje, jak użyć <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29> , aby określić minimalną wartość w sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1280">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29> to determine the minimum value in a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#60](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#60)]
 [!code-vb[System.Linq.Enumerable#60](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#60)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-1281"><paramref name="source" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1281"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="994a2-1282"><paramref name="source" />nie zawiera żadnych elementów.</span><span class="sxs-lookup"><span data-stu-id="994a2-1282"><paramref name="source" /> contains no elements.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="994a2-1283">Aggregate — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-1283">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static double Min (this System.Collections.Generic.IEnumerable&lt;double&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Min(class System.Collections.Generic.IEnumerable`1&lt;float64&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Double})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min (source As IEnumerable(Of Double)) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static double Min(System::Collections::Generic::IEnumerable&lt;double&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;double&gt; -&gt; double" Usage="System.Linq.Enumerable.Min source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Double&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="994a2-1284">Sekwencja <see cref="T:System.Double" /> wartości do określenia wartości minimalnej.</span><span class="sxs-lookup"><span data-stu-id="994a2-1284">A sequence of <see cref="T:System.Double" /> values to determine the minimum value of.</span></span></param>
        <summary><span data-ttu-id="994a2-1285">Zwraca wartość minimalną w sekwencji <see cref="T:System.Double" /> wartości.</span><span class="sxs-lookup"><span data-stu-id="994a2-1285">Returns the minimum value in a sequence of <see cref="T:System.Double" /> values.</span></span></summary>
        <returns><span data-ttu-id="994a2-1286">Minimalna wartość w sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1286">The minimum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-1287"><xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29> Metoda używaimplementacji<xref:System.IComparable%601>do porównywania wartości. <xref:System.Double></span><span class="sxs-lookup"><span data-stu-id="994a2-1287">The <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29> method uses the <xref:System.Double> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="994a2-1288">W Visual Basic składni wyrażenia zapytania, `Aggregate Into Min()` klauzula tłumaczy na <xref:System.Linq.Enumerable.Min%2A>wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-1288">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-1289">Poniższy przykład kodu demonstruje, jak użyć <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29> , aby określić minimalną wartość w sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1289">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29> to determine the minimum value in a sequence.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#60](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#60)]
 [!code-vb[System.Linq.Enumerable#60](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#60)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-1290"><paramref name="source" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1290"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="994a2-1291"><paramref name="source" />nie zawiera żadnych elementów.</span><span class="sxs-lookup"><span data-stu-id="994a2-1291"><paramref name="source" /> contains no elements.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="994a2-1292">Aggregate — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-1292">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static int Min (this System.Collections.Generic.IEnumerable&lt;int&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Min(class System.Collections.Generic.IEnumerable`1&lt;int32&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min (source As IEnumerable(Of Integer)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int Min(System::Collections::Generic::IEnumerable&lt;int&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;int&gt; -&gt; int" Usage="System.Linq.Enumerable.Min source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Int32&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="994a2-1293">Sekwencja <see cref="T:System.Int32" /> wartości do określenia wartości minimalnej.</span><span class="sxs-lookup"><span data-stu-id="994a2-1293">A sequence of <see cref="T:System.Int32" /> values to determine the minimum value of.</span></span></param>
        <summary><span data-ttu-id="994a2-1294">Zwraca wartość minimalną w sekwencji <see cref="T:System.Int32" /> wartości.</span><span class="sxs-lookup"><span data-stu-id="994a2-1294">Returns the minimum value in a sequence of <see cref="T:System.Int32" /> values.</span></span></summary>
        <returns><span data-ttu-id="994a2-1295">Minimalna wartość w sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1295">The minimum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-1296"><xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29> Metoda używaimplementacji<xref:System.IComparable%601>do porównywania wartości. <xref:System.Int32></span><span class="sxs-lookup"><span data-stu-id="994a2-1296">The <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29> method uses the <xref:System.Int32> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="994a2-1297">W Visual Basic składni wyrażenia zapytania, `Aggregate Into Min()` klauzula tłumaczy na <xref:System.Linq.Enumerable.Min%2A>wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-1297">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-1298">Poniższy przykład kodu demonstruje, jak użyć <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29> , aby określić minimalną wartość w sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1298">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29> to determine the minimum value in a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#60](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#60)]
 [!code-vb[System.Linq.Enumerable#60](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#60)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-1299"><paramref name="source" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1299"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="994a2-1300"><paramref name="source" />nie zawiera żadnych elementów.</span><span class="sxs-lookup"><span data-stu-id="994a2-1300"><paramref name="source" /> contains no elements.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="994a2-1301">Aggregate — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-1301">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static long Min (this System.Collections.Generic.IEnumerable&lt;long&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Min(class System.Collections.Generic.IEnumerable`1&lt;int64&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int64})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min (source As IEnumerable(Of Long)) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static long Min(System::Collections::Generic::IEnumerable&lt;long&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;int64&gt; -&gt; int64" Usage="System.Linq.Enumerable.Min source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Int64&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="994a2-1302">Sekwencja <see cref="T:System.Int64" /> wartości do określenia wartości minimalnej.</span><span class="sxs-lookup"><span data-stu-id="994a2-1302">A sequence of <see cref="T:System.Int64" /> values to determine the minimum value of.</span></span></param>
        <summary><span data-ttu-id="994a2-1303">Zwraca wartość minimalną w sekwencji <see cref="T:System.Int64" /> wartości.</span><span class="sxs-lookup"><span data-stu-id="994a2-1303">Returns the minimum value in a sequence of <see cref="T:System.Int64" /> values.</span></span></summary>
        <returns><span data-ttu-id="994a2-1304">Minimalna wartość w sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1304">The minimum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-1305"><xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29> Metoda używaimplementacji<xref:System.IComparable%601>do porównywania wartości. <xref:System.Int64></span><span class="sxs-lookup"><span data-stu-id="994a2-1305">The <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29> method uses the <xref:System.Int64> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="994a2-1306">W Visual Basic składni wyrażenia zapytania, `Aggregate Into Min()` klauzula tłumaczy na <xref:System.Linq.Enumerable.Min%2A>wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-1306">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-1307">Poniższy przykład kodu demonstruje, jak użyć <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29> , aby określić minimalną wartość w sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1307">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29> to determine the minimum value in a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#60](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#60)]
 [!code-vb[System.Linq.Enumerable#60](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#60)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-1308"><paramref name="source" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1308"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="994a2-1309"><paramref name="source" />nie zawiera żadnych elementów.</span><span class="sxs-lookup"><span data-stu-id="994a2-1309"><paramref name="source" /> contains no elements.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="994a2-1310">Aggregate — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-1310">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static Nullable&lt;decimal&gt; Min (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;decimal&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype System.Decimal&gt; Min(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min (source As IEnumerable(Of Nullable(Of Decimal))) As Nullable(Of Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;System::Decimal&gt; Min(System::Collections::Generic::IEnumerable&lt;Nullable&lt;System::Decimal&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;Nullable&lt;decimal&gt;&gt; -&gt; Nullable&lt;decimal&gt;" Usage="System.Linq.Enumerable.Min source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Decimal&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="994a2-1311">Sekwencja wartości null <see cref="T:System.Decimal" /> , aby określić wartość minimalną.</span><span class="sxs-lookup"><span data-stu-id="994a2-1311">A sequence of nullable <see cref="T:System.Decimal" /> values to determine the minimum value of.</span></span></param>
        <summary><span data-ttu-id="994a2-1312">Zwraca wartość minimalną w sekwencji wartości dopuszczających <see cref="T:System.Decimal" /> wartość null.</span><span class="sxs-lookup"><span data-stu-id="994a2-1312">Returns the minimum value in a sequence of nullable <see cref="T:System.Decimal" /> values.</span></span></summary>
        <returns><span data-ttu-id="994a2-1313">Wartość typu <c>Decimal&lt;&gt; -nullable</c> w C# lub dopuszczający wartości <c>null (liczba dziesiętna)</c> w Visual Basic, która odnosi się do wartości minimalnej w sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1313">A value of type <c>Nullable&lt;Decimal&gt;</c> in C# or <c>Nullable(Of Decimal)</c> in Visual Basic that corresponds to the minimum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-1314"><xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29> Metoda używaimplementacji<xref:System.IComparable%601>do porównywania wartości. <xref:System.Decimal></span><span class="sxs-lookup"><span data-stu-id="994a2-1314">The <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29> method uses the <xref:System.Decimal> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="994a2-1315">Jeśli sekwencja źródłowa jest pusta lub zawiera tylko wartości, które `null`są, ta funkcja `null`zwraca wartość.</span><span class="sxs-lookup"><span data-stu-id="994a2-1315">If the source sequence is empty or contains only values that are `null`, this function returns `null`.</span></span>  
  
 <span data-ttu-id="994a2-1316">W Visual Basic składni wyrażenia zapytania, `Aggregate Into Min()` klauzula tłumaczy na <xref:System.Linq.Enumerable.Min%2A>wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-1316">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-1317">Poniższy przykład kodu demonstruje, jak użyć <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> , aby określić minimalną wartość w sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1317">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> to determine the minimum value in a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#63](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#63)]
 [!code-vb[System.Linq.Enumerable#63](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#63)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-1318"><paramref name="source" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1318"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="994a2-1319">Aggregate — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-1319">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Min (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;double&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Min(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;float64&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min (source As IEnumerable(Of Nullable(Of Double))) As Nullable(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;double&gt; Min(System::Collections::Generic::IEnumerable&lt;Nullable&lt;double&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;Nullable&lt;double&gt;&gt; -&gt; Nullable&lt;double&gt;" Usage="System.Linq.Enumerable.Min source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Double&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="994a2-1320">Sekwencja wartości null <see cref="T:System.Double" /> , aby określić wartość minimalną.</span><span class="sxs-lookup"><span data-stu-id="994a2-1320">A sequence of nullable <see cref="T:System.Double" /> values to determine the minimum value of.</span></span></param>
        <summary><span data-ttu-id="994a2-1321">Zwraca wartość minimalną w sekwencji wartości dopuszczających <see cref="T:System.Double" /> wartość null.</span><span class="sxs-lookup"><span data-stu-id="994a2-1321">Returns the minimum value in a sequence of nullable <see cref="T:System.Double" /> values.</span></span></summary>
        <returns><span data-ttu-id="994a2-1322">Wartość typu <c>null&lt;podwójna&gt;</c> C# lub dopuszczana do wartości <c>null (of Double)</c> w Visual Basic, która odnosi się do wartości minimalnej w sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1322">A value of type <c>Nullable&lt;Double&gt;</c> in C# or <c>Nullable(Of Double)</c> in Visual Basic that corresponds to the minimum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-1323"><xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> Metoda używaimplementacji<xref:System.IComparable%601>do porównywania wartości. <xref:System.Double></span><span class="sxs-lookup"><span data-stu-id="994a2-1323">The <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> method uses the <xref:System.Double> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="994a2-1324">Jeśli sekwencja źródłowa jest pusta lub zawiera tylko wartości, które `null`są, ta funkcja `null`zwraca wartość.</span><span class="sxs-lookup"><span data-stu-id="994a2-1324">If the source sequence is empty or contains only values that are `null`, this function returns `null`.</span></span>  
  
 <span data-ttu-id="994a2-1325">W Visual Basic składni wyrażenia zapytania, `Aggregate Into Min()` klauzula tłumaczy na <xref:System.Linq.Enumerable.Min%2A>wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-1325">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-1326">Poniższy przykład kodu demonstruje, jak użyć <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> , aby określić minimalną wartość w sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1326">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> to determine the minimum value in a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#63](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#63)]
 [!code-vb[System.Linq.Enumerable#63](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#63)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-1327"><paramref name="source" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1327"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="994a2-1328">Aggregate — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-1328">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static Nullable&lt;int&gt; Min (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;int&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int32&gt; Min(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;int32&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min (source As IEnumerable(Of Nullable(Of Integer))) As Nullable(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;int&gt; Min(System::Collections::Generic::IEnumerable&lt;Nullable&lt;int&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;Nullable&lt;int&gt;&gt; -&gt; Nullable&lt;int&gt;" Usage="System.Linq.Enumerable.Min source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Int32&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="994a2-1329">Sekwencja wartości null <see cref="T:System.Int32" /> , aby określić wartość minimalną.</span><span class="sxs-lookup"><span data-stu-id="994a2-1329">A sequence of nullable <see cref="T:System.Int32" /> values to determine the minimum value of.</span></span></param>
        <summary><span data-ttu-id="994a2-1330">Zwraca wartość minimalną w sekwencji wartości dopuszczających <see cref="T:System.Int32" /> wartość null.</span><span class="sxs-lookup"><span data-stu-id="994a2-1330">Returns the minimum value in a sequence of nullable <see cref="T:System.Int32" /> values.</span></span></summary>
        <returns><span data-ttu-id="994a2-1331">Wartość typu <c>null&lt;Int32&gt;</c> w C# lub dopuszczający wartość <c>null (z Int32)</c> w Visual Basic, która odnosi się do wartości minimalnej w sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1331">A value of type <c>Nullable&lt;Int32&gt;</c> in C# or <c>Nullable(Of Int32)</c> in Visual Basic that corresponds to the minimum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-1332"><xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> Metoda używaimplementacji<xref:System.IComparable%601>do porównywania wartości. <xref:System.Int32></span><span class="sxs-lookup"><span data-stu-id="994a2-1332">The <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> method uses the <xref:System.Int32> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="994a2-1333">Jeśli sekwencja źródłowa jest pusta lub zawiera tylko wartości, które `null`są, ta funkcja `null`zwraca wartość.</span><span class="sxs-lookup"><span data-stu-id="994a2-1333">If the source sequence is empty or contains only values that are `null`, this function returns `null`.</span></span>  
  
 <span data-ttu-id="994a2-1334">W Visual Basic składni wyrażenia zapytania, `Aggregate Into Min()` klauzula tłumaczy na <xref:System.Linq.Enumerable.Min%2A>wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-1334">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-1335">Poniższy przykład kodu demonstruje, jak użyć <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> , aby określić minimalną wartość w sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1335">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> to determine the minimum value in a sequence.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#63](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#63)]
 [!code-vb[System.Linq.Enumerable#63](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#63)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-1336"><paramref name="source" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1336"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="994a2-1337">Aggregate — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-1337">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static Nullable&lt;long&gt; Min (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;long&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int64&gt; Min(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;int64&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min (source As IEnumerable(Of Nullable(Of Long))) As Nullable(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;long&gt; Min(System::Collections::Generic::IEnumerable&lt;Nullable&lt;long&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;Nullable&lt;int64&gt;&gt; -&gt; Nullable&lt;int64&gt;" Usage="System.Linq.Enumerable.Min source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Int64&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="994a2-1338">Sekwencja wartości null <see cref="T:System.Int64" /> , aby określić wartość minimalną.</span><span class="sxs-lookup"><span data-stu-id="994a2-1338">A sequence of nullable <see cref="T:System.Int64" /> values to determine the minimum value of.</span></span></param>
        <summary><span data-ttu-id="994a2-1339">Zwraca wartość minimalną w sekwencji wartości dopuszczających <see cref="T:System.Int64" /> wartość null.</span><span class="sxs-lookup"><span data-stu-id="994a2-1339">Returns the minimum value in a sequence of nullable <see cref="T:System.Int64" /> values.</span></span></summary>
        <returns><span data-ttu-id="994a2-1340">Wartość typu <c>Nullable&lt;Int64&gt;</c> w C# lub dopuszczający wartości <c>null (Of Int64)</c> w Visual Basic, która odnosi się do wartości minimalnej w sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1340">A value of type <c>Nullable&lt;Int64&gt;</c> in C# or <c>Nullable(Of Int64)</c> in Visual Basic that corresponds to the minimum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-1341"><xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> Metoda używaimplementacji<xref:System.IComparable%601>do porównywania wartości. <xref:System.Int64></span><span class="sxs-lookup"><span data-stu-id="994a2-1341">The <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> method uses the <xref:System.Int64> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="994a2-1342">Jeśli sekwencja źródłowa jest pusta lub zawiera tylko wartości, które `null`są, ta funkcja `null`zwraca wartość.</span><span class="sxs-lookup"><span data-stu-id="994a2-1342">If the source sequence is empty or contains only values that are `null`, this function returns `null`.</span></span>  
  
 <span data-ttu-id="994a2-1343">W Visual Basic składni wyrażenia zapytania, `Aggregate Into Min()` klauzula tłumaczy na <xref:System.Linq.Enumerable.Min%2A>wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-1343">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-1344">Poniższy przykład kodu demonstruje, jak użyć <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> , aby określić minimalną wartość w sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1344">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> to determine the minimum value in a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#63](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#63)]
 [!code-vb[System.Linq.Enumerable#63](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#63)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-1345"><paramref name="source" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1345"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="994a2-1346">Aggregate — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-1346">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static Nullable&lt;float&gt; Min (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;float&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float32&gt; Min(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;float32&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min (source As IEnumerable(Of Nullable(Of Single))) As Nullable(Of Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;float&gt; Min(System::Collections::Generic::IEnumerable&lt;Nullable&lt;float&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;Nullable&lt;single&gt;&gt; -&gt; Nullable&lt;single&gt;" Usage="System.Linq.Enumerable.Min source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Single&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="994a2-1347">Sekwencja wartości null <see cref="T:System.Single" /> , aby określić wartość minimalną.</span><span class="sxs-lookup"><span data-stu-id="994a2-1347">A sequence of nullable <see cref="T:System.Single" /> values to determine the minimum value of.</span></span></param>
        <summary><span data-ttu-id="994a2-1348">Zwraca wartość minimalną w sekwencji wartości dopuszczających <see cref="T:System.Single" /> wartość null.</span><span class="sxs-lookup"><span data-stu-id="994a2-1348">Returns the minimum value in a sequence of nullable <see cref="T:System.Single" /> values.</span></span></summary>
        <returns><span data-ttu-id="994a2-1349">Wartość typu <c>null&lt;Single&gt;</c> in C# lub <c>Nullable (of Single)</c> w Visual Basic, która odnosi się do minimalnej wartości w sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1349">A value of type <c>Nullable&lt;Single&gt;</c> in C# or <c>Nullable(Of Single)</c> in Visual Basic that corresponds to the minimum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-1350"><xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> Metoda używaimplementacji<xref:System.IComparable%601>do porównywania wartości. <xref:System.Single></span><span class="sxs-lookup"><span data-stu-id="994a2-1350">The <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> method uses the <xref:System.Single> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="994a2-1351">Jeśli sekwencja źródłowa jest pusta lub zawiera tylko wartości, które `null`są, ta funkcja `null`zwraca wartość.</span><span class="sxs-lookup"><span data-stu-id="994a2-1351">If the source sequence is empty or contains only values that are `null`, this function returns `null`.</span></span>  
  
 <span data-ttu-id="994a2-1352">W Visual Basic składni wyrażenia zapytania, `Aggregate Into Min()` klauzula tłumaczy na <xref:System.Linq.Enumerable.Min%2A>wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-1352">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-1353">Poniższy przykład kodu demonstruje, jak użyć <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> , aby określić minimalną wartość w sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1353">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> to determine the minimum value in a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#63](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#63)]
 [!code-vb[System.Linq.Enumerable#63](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#63)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-1354"><paramref name="source" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1354"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="994a2-1355">Aggregate — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-1355">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static float Min (this System.Collections.Generic.IEnumerable&lt;float&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Min(class System.Collections.Generic.IEnumerable`1&lt;float32&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Single})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min (source As IEnumerable(Of Single)) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static float Min(System::Collections::Generic::IEnumerable&lt;float&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;single&gt; -&gt; single" Usage="System.Linq.Enumerable.Min source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Single&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="994a2-1356">Sekwencja <see cref="T:System.Single" /> wartości do określenia wartości minimalnej.</span><span class="sxs-lookup"><span data-stu-id="994a2-1356">A sequence of <see cref="T:System.Single" /> values to determine the minimum value of.</span></span></param>
        <summary><span data-ttu-id="994a2-1357">Zwraca wartość minimalną w sekwencji <see cref="T:System.Single" /> wartości.</span><span class="sxs-lookup"><span data-stu-id="994a2-1357">Returns the minimum value in a sequence of <see cref="T:System.Single" /> values.</span></span></summary>
        <returns><span data-ttu-id="994a2-1358">Minimalna wartość w sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1358">The minimum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-1359"><xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29> Metoda używaimplementacji<xref:System.IComparable%601>do porównywania wartości. <xref:System.Single></span><span class="sxs-lookup"><span data-stu-id="994a2-1359">The <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29> method uses the <xref:System.Single> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="994a2-1360">W Visual Basic składni wyrażenia zapytania, `Aggregate Into Min()` klauzula tłumaczy na <xref:System.Linq.Enumerable.Min%2A>wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-1360">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-1361">Poniższy przykład kodu demonstruje, jak użyć <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29> , aby określić minimalną wartość w sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1361">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29> to determine the minimum value in a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#60](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#60)]
 [!code-vb[System.Linq.Enumerable#60](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#60)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-1362"><paramref name="source" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1362"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="994a2-1363"><paramref name="source" />nie zawiera żadnych elementów.</span><span class="sxs-lookup"><span data-stu-id="994a2-1363"><paramref name="source" /> contains no elements.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="994a2-1364">Aggregate — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-1364">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Min&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource Min&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource Min&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min(Of TSource) (source As IEnumerable(Of TSource)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource Min(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;'Source&gt; -&gt; 'Source" Usage="System.Linq.Enumerable.Min source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-1365">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1365">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-1366">Kolejność wartości do określenia wartości minimalnej.</span><span class="sxs-lookup"><span data-stu-id="994a2-1366">A sequence of values to determine the minimum value of.</span></span></param>
        <summary><span data-ttu-id="994a2-1367">Zwraca wartość minimalną w sekwencji ogólnej.</span><span class="sxs-lookup"><span data-stu-id="994a2-1367">Returns the minimum value in a generic sequence.</span></span></summary>
        <returns><span data-ttu-id="994a2-1368">Minimalna wartość w sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1368">The minimum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-1369">Jeśli typ `TSource` implementuje <xref:System.IComparable%601>, ta metoda używa tej implementacji do porównywania wartości.</span><span class="sxs-lookup"><span data-stu-id="994a2-1369">If type `TSource` implements <xref:System.IComparable%601>, this method uses that implementation to compare values.</span></span> <span data-ttu-id="994a2-1370">W przeciwnym razie, `TSource` Jeśli <xref:System.IComparable>typ implementuje, ta implementacja jest używana do porównywania wartości.</span><span class="sxs-lookup"><span data-stu-id="994a2-1370">Otherwise, if type `TSource` implements <xref:System.IComparable>, that implementation is used to compare values.</span></span>  
  
 <span data-ttu-id="994a2-1371">Jeśli `TSource` jest typem referencyjnym, a sekwencja źródłowa jest pusta lub zawiera tylko wartości, `null`które są, ta `null`funkcja zwraca wartość.</span><span class="sxs-lookup"><span data-stu-id="994a2-1371">If `TSource` is a reference type and the source sequence is empty or contains only values that are `null`, this function returns `null`.</span></span>  
  
 <span data-ttu-id="994a2-1372">W Visual Basic składni wyrażenia zapytania, `Aggregate Into Min()` klauzula tłumaczy na <xref:System.Linq.Enumerable.Min%2A>wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-1372">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-1373">Poniższy przykład kodu demonstruje, jak użyć <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> , aby określić minimalną wartość w <xref:System.IComparable%601> sekwencji obiektów.</span><span class="sxs-lookup"><span data-stu-id="994a2-1373">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to determine the minimum value in a sequence of <xref:System.IComparable%601> objects.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#67](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#67)]
 [!code-vb[System.Linq.Enumerable#67](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#67)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-1374"><paramref name="source" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1374"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="994a2-1375">Brak obiektu w <paramref name="source" /> <see cref="T:System.IComparable" /> implementującym interfejsie lub <see cref="T:System.IComparable`1" /> .</span><span class="sxs-lookup"><span data-stu-id="994a2-1375">No object in <paramref name="source" /> implements the <see cref="T:System.IComparable" /> or <see cref="T:System.IComparable`1" /> interface.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="994a2-1376">Aggregate — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-1376">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Min&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static decimal Min&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,decimal&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Min&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Decimal&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Decimal)) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Decimal Min(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, System::Decimal&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;'Source&gt; * Func&lt;'Source, decimal&gt; -&gt; decimal" Usage="System.Linq.Enumerable.Min (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Decimal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-1377">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1377">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-1378">Kolejność wartości do określenia wartości minimalnej.</span><span class="sxs-lookup"><span data-stu-id="994a2-1378">A sequence of values to determine the minimum value of.</span></span></param>
        <param name="selector"><span data-ttu-id="994a2-1379">Funkcja transformacji do zastosowania do każdego elementu.</span><span class="sxs-lookup"><span data-stu-id="994a2-1379">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="994a2-1380">Wywołuje funkcję transformacji dla każdego elementu sekwencji i zwraca wartość minimalną <see cref="T:System.Decimal" /> .</span><span class="sxs-lookup"><span data-stu-id="994a2-1380">Invokes a transform function on each element of a sequence and returns the minimum <see cref="T:System.Decimal" /> value.</span></span></summary>
        <returns><span data-ttu-id="994a2-1381">Minimalna wartość w sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1381">The minimum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-1382"><xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Decimal%7D%29> Metoda używaimplementacji<xref:System.IComparable%601>do porównywania wartości. <xref:System.Decimal></span><span class="sxs-lookup"><span data-stu-id="994a2-1382">The <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Decimal%7D%29> method uses the <xref:System.Decimal> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="994a2-1383">Tę metodę można zastosować do sekwencji dowolnych wartości, jeśli podajesz funkcję, `selector`która projektuje `source` elementy członkowskie do typu <xref:System.Decimal>liczbowego.</span><span class="sxs-lookup"><span data-stu-id="994a2-1383">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Decimal>.</span></span>  
  
 <span data-ttu-id="994a2-1384">W Visual Basic składni wyrażenia zapytania, `Aggregate Into Min()` klauzula tłumaczy na <xref:System.Linq.Enumerable.Min%2A>wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-1384">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-1385">Poniższy przykład kodu demonstruje, jak użyć <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> , aby określić minimalną wartość w sekwencji prognozowanych wartości.</span><span class="sxs-lookup"><span data-stu-id="994a2-1385">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the minimum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#68](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#68)]
 [!code-vb[System.Linq.Enumerable#68](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#68)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-1386"><paramref name="source" />lub <paramref name="selector" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1386"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="994a2-1387"><paramref name="source" />nie zawiera żadnych elementów.</span><span class="sxs-lookup"><span data-stu-id="994a2-1387"><paramref name="source" /> contains no elements.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="994a2-1388">Aggregate — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-1388">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Min&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static double Min&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,double&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Min&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, float64&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Double)) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static double Min(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, double&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;'Source&gt; * Func&lt;'Source, double&gt; -&gt; double" Usage="System.Linq.Enumerable.Min (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Double&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-1389">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1389">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-1390">Kolejność wartości do określenia wartości minimalnej.</span><span class="sxs-lookup"><span data-stu-id="994a2-1390">A sequence of values to determine the minimum value of.</span></span></param>
        <param name="selector"><span data-ttu-id="994a2-1391">Funkcja transformacji do zastosowania do każdego elementu.</span><span class="sxs-lookup"><span data-stu-id="994a2-1391">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="994a2-1392">Wywołuje funkcję transformacji dla każdego elementu sekwencji i zwraca wartość minimalną <see cref="T:System.Double" /> .</span><span class="sxs-lookup"><span data-stu-id="994a2-1392">Invokes a transform function on each element of a sequence and returns the minimum <see cref="T:System.Double" /> value.</span></span></summary>
        <returns><span data-ttu-id="994a2-1393">Minimalna wartość w sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1393">The minimum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-1394"><xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> Metoda używaimplementacji<xref:System.IComparable%601>do porównywania wartości. <xref:System.Double></span><span class="sxs-lookup"><span data-stu-id="994a2-1394">The <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> method uses the <xref:System.Double> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="994a2-1395">Tę metodę można zastosować do sekwencji dowolnych wartości, jeśli podajesz funkcję, `selector`która projektuje `source` elementy członkowskie do typu <xref:System.Double>liczbowego.</span><span class="sxs-lookup"><span data-stu-id="994a2-1395">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Double>.</span></span>  
  
 <span data-ttu-id="994a2-1396">W Visual Basic składni wyrażenia zapytania, `Aggregate Into Min()` klauzula tłumaczy na <xref:System.Linq.Enumerable.Min%2A>wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-1396">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-1397">Poniższy przykład kodu demonstruje, jak użyć <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> , aby określić minimalną wartość w sekwencji prognozowanych wartości.</span><span class="sxs-lookup"><span data-stu-id="994a2-1397">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the minimum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#68](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#68)]
 [!code-vb[System.Linq.Enumerable#68](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#68)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-1398"><paramref name="source" />lub <paramref name="selector" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1398"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="994a2-1399"><paramref name="source" />nie zawiera żadnych elementów.</span><span class="sxs-lookup"><span data-stu-id="994a2-1399"><paramref name="source" /> contains no elements.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="994a2-1400">Aggregate — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-1400">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Min&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static int Min&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,int&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Min&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, int32&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Integer)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int Min(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, int&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;'Source&gt; * Func&lt;'Source, int&gt; -&gt; int" Usage="System.Linq.Enumerable.Min (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Int32&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-1401">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1401">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-1402">Kolejność wartości do określenia wartości minimalnej.</span><span class="sxs-lookup"><span data-stu-id="994a2-1402">A sequence of values to determine the minimum value of.</span></span></param>
        <param name="selector"><span data-ttu-id="994a2-1403">Funkcja transformacji do zastosowania do każdego elementu.</span><span class="sxs-lookup"><span data-stu-id="994a2-1403">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="994a2-1404">Wywołuje funkcję transformacji dla każdego elementu sekwencji i zwraca wartość minimalną <see cref="T:System.Int32" /> .</span><span class="sxs-lookup"><span data-stu-id="994a2-1404">Invokes a transform function on each element of a sequence and returns the minimum <see cref="T:System.Int32" /> value.</span></span></summary>
        <returns><span data-ttu-id="994a2-1405">Minimalna wartość w sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1405">The minimum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-1406"><xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> Metoda używaimplementacji<xref:System.IComparable%601>do porównywania wartości. <xref:System.Int32></span><span class="sxs-lookup"><span data-stu-id="994a2-1406">The <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> method uses the <xref:System.Int32> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="994a2-1407">Tę metodę można zastosować do sekwencji dowolnych wartości, jeśli podajesz funkcję, `selector`która projektuje `source` elementy członkowskie do typu <xref:System.Int32>liczbowego.</span><span class="sxs-lookup"><span data-stu-id="994a2-1407">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Int32>.</span></span>  
  
 <span data-ttu-id="994a2-1408">W Visual Basic składni wyrażenia zapytania, `Aggregate Into Min()` klauzula tłumaczy na <xref:System.Linq.Enumerable.Min%2A>wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-1408">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-1409">Poniższy przykład kodu demonstruje, jak użyć <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> , aby określić minimalną wartość w sekwencji prognozowanych wartości.</span><span class="sxs-lookup"><span data-stu-id="994a2-1409">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the minimum value in a sequence of projected values.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#68](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#68)]
 [!code-vb[System.Linq.Enumerable#68](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#68)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-1410"><paramref name="source" />lub <paramref name="selector" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1410"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="994a2-1411"><paramref name="source" />nie zawiera żadnych elementów.</span><span class="sxs-lookup"><span data-stu-id="994a2-1411"><paramref name="source" /> contains no elements.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="994a2-1412">Aggregate — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-1412">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Min&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static long Min&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,long&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Min&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, int64&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Long)) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static long Min(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, long&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;'Source&gt; * Func&lt;'Source, int64&gt; -&gt; int64" Usage="System.Linq.Enumerable.Min (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Int64&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-1413">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1413">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-1414">Kolejność wartości do określenia wartości minimalnej.</span><span class="sxs-lookup"><span data-stu-id="994a2-1414">A sequence of values to determine the minimum value of.</span></span></param>
        <param name="selector"><span data-ttu-id="994a2-1415">Funkcja transformacji do zastosowania do każdego elementu.</span><span class="sxs-lookup"><span data-stu-id="994a2-1415">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="994a2-1416">Wywołuje funkcję transformacji dla każdego elementu sekwencji i zwraca wartość minimalną <see cref="T:System.Int64" /> .</span><span class="sxs-lookup"><span data-stu-id="994a2-1416">Invokes a transform function on each element of a sequence and returns the minimum <see cref="T:System.Int64" /> value.</span></span></summary>
        <returns><span data-ttu-id="994a2-1417">Minimalna wartość w sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1417">The minimum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-1418"><xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29> Metoda używaimplementacji<xref:System.IComparable%601>do porównywania wartości. <xref:System.Int64></span><span class="sxs-lookup"><span data-stu-id="994a2-1418">The <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29> method uses the <xref:System.Int64> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="994a2-1419">Tę metodę można zastosować do sekwencji dowolnych wartości, jeśli podajesz funkcję, `selector`która projektuje `source` elementy członkowskie do typu <xref:System.Int64>liczbowego.</span><span class="sxs-lookup"><span data-stu-id="994a2-1419">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Int64>.</span></span>  
  
 <span data-ttu-id="994a2-1420">W Visual Basic składni wyrażenia zapytania, `Aggregate Into Min()` klauzula tłumaczy na <xref:System.Linq.Enumerable.Min%2A>wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-1420">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-1421">Poniższy przykład kodu demonstruje, jak użyć <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> , aby określić minimalną wartość w sekwencji prognozowanych wartości.</span><span class="sxs-lookup"><span data-stu-id="994a2-1421">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the minimum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#68](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#68)]
 [!code-vb[System.Linq.Enumerable#68](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#68)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-1422"><paramref name="source" />lub <paramref name="selector" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1422"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="994a2-1423"><paramref name="source" />nie zawiera żadnych elementów.</span><span class="sxs-lookup"><span data-stu-id="994a2-1423"><paramref name="source" /> contains no elements.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="994a2-1424">Aggregate — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-1424">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Min&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;decimal&gt; Min&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;decimal&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype System.Decimal&gt; Min&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Decimal))) As Nullable(Of Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;System::Decimal&gt; Min(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;System::Decimal&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;decimal&gt;&gt; -&gt; Nullable&lt;decimal&gt;" Usage="System.Linq.Enumerable.Min (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Decimal&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-1425">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1425">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-1426">Kolejność wartości do określenia wartości minimalnej.</span><span class="sxs-lookup"><span data-stu-id="994a2-1426">A sequence of values to determine the minimum value of.</span></span></param>
        <param name="selector"><span data-ttu-id="994a2-1427">Funkcja transformacji do zastosowania do każdego elementu.</span><span class="sxs-lookup"><span data-stu-id="994a2-1427">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="994a2-1428">Wywołuje funkcję transformacji dla każdego elementu sekwencji i zwraca minimalną wartość null <see cref="T:System.Decimal" /> .</span><span class="sxs-lookup"><span data-stu-id="994a2-1428">Invokes a transform function on each element of a sequence and returns the minimum nullable <see cref="T:System.Decimal" /> value.</span></span></summary>
        <returns><span data-ttu-id="994a2-1429">Wartość typu <c>Decimal&lt;&gt; -nullable</c> w C# lub dopuszczający wartości <c>null (liczba dziesiętna)</c> w Visual Basic, która odnosi się do wartości minimalnej w sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1429">The value of type <c>Nullable&lt;Decimal&gt;</c> in C# or <c>Nullable(Of Decimal)</c> in Visual Basic that corresponds to the minimum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-1430"><xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%29> Metoda używaimplementacji<xref:System.IComparable%601>do porównywania wartości. <xref:System.Decimal></span><span class="sxs-lookup"><span data-stu-id="994a2-1430">The <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%29> method uses the <xref:System.Decimal> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="994a2-1431">Tę metodę można zastosować do sekwencji dowolnych wartości, jeśli podajesz funkcję, `selector`która zawiera projekty `source` elementów członkowskich do typu liczbowego, `Nullable<Decimal>` w tym w C# lub `Nullable(Of Decimal)` w Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="994a2-1431">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Decimal>` in C# or `Nullable(Of Decimal)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="994a2-1432">W Visual Basic składni wyrażenia zapytania, `Aggregate Into Min()` klauzula tłumaczy na <xref:System.Linq.Enumerable.Min%2A>wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-1432">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-1433">Poniższy przykład kodu demonstruje, jak użyć <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> , aby określić minimalną wartość w sekwencji prognozowanych wartości.</span><span class="sxs-lookup"><span data-stu-id="994a2-1433">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the minimum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#68](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#68)]
 [!code-vb[System.Linq.Enumerable#68](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#68)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-1434"><paramref name="source" />lub <paramref name="selector" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1434"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="994a2-1435">Aggregate — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-1435">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Min&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Min&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;double&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Min&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;float64&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Double))) As Nullable(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;double&gt; Min(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;double&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;double&gt;&gt; -&gt; Nullable&lt;double&gt;" Usage="System.Linq.Enumerable.Min (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Double&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-1436">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1436">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-1437">Kolejność wartości do określenia wartości minimalnej.</span><span class="sxs-lookup"><span data-stu-id="994a2-1437">A sequence of values to determine the minimum value of.</span></span></param>
        <param name="selector"><span data-ttu-id="994a2-1438">Funkcja transformacji do zastosowania do każdego elementu.</span><span class="sxs-lookup"><span data-stu-id="994a2-1438">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="994a2-1439">Wywołuje funkcję transformacji dla każdego elementu sekwencji i zwraca minimalną wartość null <see cref="T:System.Double" /> .</span><span class="sxs-lookup"><span data-stu-id="994a2-1439">Invokes a transform function on each element of a sequence and returns the minimum nullable <see cref="T:System.Double" /> value.</span></span></summary>
        <returns><span data-ttu-id="994a2-1440">Wartość typu <c>null&lt;podwójnego&gt;</c> C# lub dopuszczającego wartość <c>null (of Double)</c> w Visual Basic, która odnosi się do wartości minimalnej w sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1440">The value of type <c>Nullable&lt;Double&gt;</c> in C# or <c>Nullable(Of Double)</c> in Visual Basic that corresponds to the minimum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-1441"><xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%29> Metoda używaimplementacji<xref:System.IComparable%601>do porównywania wartości. <xref:System.Double></span><span class="sxs-lookup"><span data-stu-id="994a2-1441">The <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%29> method uses the <xref:System.Double> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="994a2-1442">Tę metodę można zastosować do sekwencji dowolnych wartości, jeśli podajesz funkcję, `selector`która zawiera projekty `source` elementów członkowskich do typu liczbowego, `Nullable<Double>` w tym w C# lub `Nullable(Of Double)` w Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="994a2-1442">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Double>` in C# or `Nullable(Of Double)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="994a2-1443">W Visual Basic składni wyrażenia zapytania, `Aggregate Into Min()` klauzula tłumaczy na <xref:System.Linq.Enumerable.Min%2A>wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-1443">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-1444">Poniższy przykład kodu demonstruje, jak użyć <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> , aby określić minimalną wartość w sekwencji prognozowanych wartości.</span><span class="sxs-lookup"><span data-stu-id="994a2-1444">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the minimum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#68](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#68)]
 [!code-vb[System.Linq.Enumerable#68](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#68)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-1445"><paramref name="source" />lub <paramref name="selector" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1445"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="994a2-1446">Aggregate — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-1446">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Min&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;int&gt; Min&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;int&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int32&gt; Min&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;int32&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Integer))) As Nullable(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;int&gt; Min(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;int&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;int&gt;&gt; -&gt; Nullable&lt;int&gt;" Usage="System.Linq.Enumerable.Min (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Int32&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-1447">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1447">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-1448">Kolejność wartości do określenia wartości minimalnej.</span><span class="sxs-lookup"><span data-stu-id="994a2-1448">A sequence of values to determine the minimum value of.</span></span></param>
        <param name="selector"><span data-ttu-id="994a2-1449">Funkcja transformacji do zastosowania do każdego elementu.</span><span class="sxs-lookup"><span data-stu-id="994a2-1449">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="994a2-1450">Wywołuje funkcję transformacji dla każdego elementu sekwencji i zwraca minimalną wartość null <see cref="T:System.Int32" /> .</span><span class="sxs-lookup"><span data-stu-id="994a2-1450">Invokes a transform function on each element of a sequence and returns the minimum nullable <see cref="T:System.Int32" /> value.</span></span></summary>
        <returns><span data-ttu-id="994a2-1451">Wartość typu <c>null&lt;Int32&gt;</c> w C# lub dopuszczający wartość <c>null (z Int32)</c> w Visual Basic, która odnosi się do wartości minimalnej w sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1451">The value of type <c>Nullable&lt;Int32&gt;</c> in C# or <c>Nullable(Of Int32)</c> in Visual Basic that corresponds to the minimum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-1452"><xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%29> Metoda używaimplementacji<xref:System.IComparable%601>do porównywania wartości. <xref:System.Int32></span><span class="sxs-lookup"><span data-stu-id="994a2-1452">The <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%29> method uses the <xref:System.Int32> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="994a2-1453">Tę metodę można zastosować do sekwencji dowolnych wartości, jeśli podajesz funkcję, `selector`która zawiera projekty elementów członkowskich źródła do typu liczbowego `Nullable<Int32>` , w tym w C# lub `Nullable(Of Int32)` w Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="994a2-1453">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of source into a numeric type, specifically `Nullable<Int32>` in C# or `Nullable(Of Int32)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="994a2-1454">W Visual Basic składni wyrażenia zapytania, `Aggregate Into Min()` klauzula tłumaczy na <xref:System.Linq.Enumerable.Min%2A>wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-1454">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-1455">Poniższy przykład kodu demonstruje, jak użyć <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> , aby określić minimalną wartość w sekwencji prognozowanych wartości.</span><span class="sxs-lookup"><span data-stu-id="994a2-1455">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the minimum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#68](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#68)]
 [!code-vb[System.Linq.Enumerable#68](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#68)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-1456"><paramref name="source" />lub <paramref name="selector" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1456"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="994a2-1457">Aggregate — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-1457">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Min&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;long&gt; Min&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;long&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int64&gt; Min&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;int64&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Long))) As Nullable(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;long&gt; Min(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;long&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;int64&gt;&gt; -&gt; Nullable&lt;int64&gt;" Usage="System.Linq.Enumerable.Min (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Int64&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-1458">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1458">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-1459">Kolejność wartości do określenia wartości minimalnej.</span><span class="sxs-lookup"><span data-stu-id="994a2-1459">A sequence of values to determine the minimum value of.</span></span></param>
        <param name="selector"><span data-ttu-id="994a2-1460">Funkcja transformacji do zastosowania do każdego elementu.</span><span class="sxs-lookup"><span data-stu-id="994a2-1460">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="994a2-1461">Wywołuje funkcję transformacji dla każdego elementu sekwencji i zwraca minimalną wartość null <see cref="T:System.Int64" /> .</span><span class="sxs-lookup"><span data-stu-id="994a2-1461">Invokes a transform function on each element of a sequence and returns the minimum nullable <see cref="T:System.Int64" /> value.</span></span></summary>
        <returns><span data-ttu-id="994a2-1462">Wartość typu <c>Nullable&lt;Int64&gt;</c> w C# lub dopuszczający wartości <c>null (Of Int64)</c> w Visual Basic, która odnosi się do wartości minimalnej w sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1462">The value of type <c>Nullable&lt;Int64&gt;</c> in C# or <c>Nullable(Of Int64)</c> in Visual Basic that corresponds to the minimum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-1463"><xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%29> Metoda używaimplementacji<xref:System.IComparable%601>do porównywania wartości. <xref:System.Int64></span><span class="sxs-lookup"><span data-stu-id="994a2-1463">The <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%29> method uses the <xref:System.Int64> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="994a2-1464">Tę metodę można zastosować do sekwencji dowolnych wartości, jeśli podajesz funkcję, `selector`która zawiera projekty `source` elementów członkowskich do typu liczbowego, `Nullable<Int64>` w tym w C# lub `Nullable(Of Int64)` w Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="994a2-1464">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Int64>` in C# or `Nullable(Of Int64)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="994a2-1465">W Visual Basic składni wyrażenia zapytania, `Aggregate Into Min()` klauzula tłumaczy na <xref:System.Linq.Enumerable.Min%2A>wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-1465">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-1466">Poniższy przykład kodu demonstruje, jak użyć <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> , aby określić minimalną wartość w sekwencji prognozowanych wartości.</span><span class="sxs-lookup"><span data-stu-id="994a2-1466">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the minimum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#68](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#68)]
 [!code-vb[System.Linq.Enumerable#68](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#68)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-1467"><paramref name="source" />lub <paramref name="selector" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1467"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="994a2-1468">Aggregate — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-1468">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Min&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;float&gt; Min&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;float&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float32&gt; Min&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;float32&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Single))) As Nullable(Of Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;float&gt; Min(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;float&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;single&gt;&gt; -&gt; Nullable&lt;single&gt;" Usage="System.Linq.Enumerable.Min (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Single&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-1469">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1469">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-1470">Kolejność wartości do określenia wartości minimalnej.</span><span class="sxs-lookup"><span data-stu-id="994a2-1470">A sequence of values to determine the minimum value of.</span></span></param>
        <param name="selector"><span data-ttu-id="994a2-1471">Funkcja transformacji do zastosowania do każdego elementu.</span><span class="sxs-lookup"><span data-stu-id="994a2-1471">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="994a2-1472">Wywołuje funkcję transformacji dla każdego elementu sekwencji i zwraca minimalną wartość null <see cref="T:System.Single" /> .</span><span class="sxs-lookup"><span data-stu-id="994a2-1472">Invokes a transform function on each element of a sequence and returns the minimum nullable <see cref="T:System.Single" /> value.</span></span></summary>
        <returns><span data-ttu-id="994a2-1473">Wartość typu <c>null&lt;Single&gt;</c> in C# lub <c>Nullable (of Single)</c> w Visual Basic, która odnosi się do minimalnej wartości w sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1473">The value of type <c>Nullable&lt;Single&gt;</c> in C# or <c>Nullable(Of Single)</c> in Visual Basic that corresponds to the minimum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-1474"><xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%29> Metoda używaimplementacji<xref:System.IComparable%601>do porównywania wartości. <xref:System.Single></span><span class="sxs-lookup"><span data-stu-id="994a2-1474">The <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%29> method uses the <xref:System.Single> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="994a2-1475">Tę metodę można zastosować do sekwencji dowolnych wartości, jeśli podajesz funkcję, `selector`która zawiera projekty `source` elementów członkowskich do typu liczbowego, `Nullable<Single>` w tym w C# lub `Nullable(Of Single)` w Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="994a2-1475">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Single>` in C# or `Nullable(Of Single)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="994a2-1476">W Visual Basic składni wyrażenia zapytania, `Aggregate Into Min()` klauzula tłumaczy na <xref:System.Linq.Enumerable.Min%2A>wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-1476">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-1477">Poniższy przykład kodu demonstruje, jak użyć <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> , aby określić minimalną wartość w sekwencji prognozowanych wartości.</span><span class="sxs-lookup"><span data-stu-id="994a2-1477">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the minimum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#68](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#68)]
 [!code-vb[System.Linq.Enumerable#68](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#68)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-1478"><paramref name="source" />lub <paramref name="selector" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1478"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="994a2-1479">Aggregate — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-1479">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Min&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static float Min&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,float&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Min&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, float32&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Single)) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static float Min(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, float&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;'Source&gt; * Func&lt;'Source, single&gt; -&gt; single" Usage="System.Linq.Enumerable.Min (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Single&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-1480">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1480">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-1481">Kolejność wartości do określenia wartości minimalnej.</span><span class="sxs-lookup"><span data-stu-id="994a2-1481">A sequence of values to determine the minimum value of.</span></span></param>
        <param name="selector"><span data-ttu-id="994a2-1482">Funkcja transformacji do zastosowania do każdego elementu.</span><span class="sxs-lookup"><span data-stu-id="994a2-1482">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="994a2-1483">Wywołuje funkcję transformacji dla każdego elementu sekwencji i zwraca wartość minimalną <see cref="T:System.Single" /> .</span><span class="sxs-lookup"><span data-stu-id="994a2-1483">Invokes a transform function on each element of a sequence and returns the minimum <see cref="T:System.Single" /> value.</span></span></summary>
        <returns><span data-ttu-id="994a2-1484">Minimalna wartość w sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1484">The minimum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-1485"><xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Single%7D%29> Metoda używaimplementacji<xref:System.IComparable%601>do porównywania wartości. <xref:System.Single></span><span class="sxs-lookup"><span data-stu-id="994a2-1485">The <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Single%7D%29> method uses the <xref:System.Single> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="994a2-1486">Tę metodę można zastosować do sekwencji dowolnych wartości, jeśli podajesz funkcję, `selector`która projektuje `source` elementy członkowskie do typu <xref:System.Single>liczbowego.</span><span class="sxs-lookup"><span data-stu-id="994a2-1486">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Single>.</span></span>  
  
 <span data-ttu-id="994a2-1487">W Visual Basic składni wyrażenia zapytania, `Aggregate Into Min()` klauzula tłumaczy na <xref:System.Linq.Enumerable.Min%2A>wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-1487">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-1488">Poniższy przykład kodu demonstruje, jak użyć <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> , aby określić minimalną wartość w sekwencji prognozowanych wartości.</span><span class="sxs-lookup"><span data-stu-id="994a2-1488">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the minimum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#68](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#68)]
 [!code-vb[System.Linq.Enumerable#68](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#68)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-1489"><paramref name="source" />lub <paramref name="selector" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1489"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="994a2-1490"><paramref name="source" />nie zawiera żadnych elementów.</span><span class="sxs-lookup"><span data-stu-id="994a2-1490"><paramref name="source" /> contains no elements.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="994a2-1491">Aggregate — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-1491">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Min&lt;TSource,TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Min&lt;TSource,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TResult&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Min&lt;TSource, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TResult&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min(Of TSource, TResult) (source As IEnumerable(Of TSource), selector As Func(Of TSource, TResult)) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TResult Min(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TResult&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;'Source&gt; * Func&lt;'Source, 'Result&gt; -&gt; 'Result" Usage="System.Linq.Enumerable.Min (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-1492">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1492">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="994a2-1493">Typ wartości zwracanej przez <paramref name="selector" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1493">The type of the value returned by <paramref name="selector" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-1494">Kolejność wartości do określenia wartości minimalnej.</span><span class="sxs-lookup"><span data-stu-id="994a2-1494">A sequence of values to determine the minimum value of.</span></span></param>
        <param name="selector"><span data-ttu-id="994a2-1495">Funkcja transformacji do zastosowania do każdego elementu.</span><span class="sxs-lookup"><span data-stu-id="994a2-1495">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="994a2-1496">Wywołuje funkcję transformacji dla każdego elementu sekwencji ogólnej i zwraca minimalną wartość wynikową.</span><span class="sxs-lookup"><span data-stu-id="994a2-1496">Invokes a transform function on each element of a generic sequence and returns the minimum resulting value.</span></span></summary>
        <returns><span data-ttu-id="994a2-1497">Minimalna wartość w sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1497">The minimum value in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-1498">Jeśli typ `TResult` implementuje <xref:System.IComparable%601>, ta metoda używa tej implementacji do porównywania wartości.</span><span class="sxs-lookup"><span data-stu-id="994a2-1498">If type `TResult` implements <xref:System.IComparable%601>, this method uses that implementation to compare values.</span></span> <span data-ttu-id="994a2-1499">W przeciwnym razie, `TResult` Jeśli <xref:System.IComparable>typ implementuje, ta implementacja jest używana do porównywania wartości.</span><span class="sxs-lookup"><span data-stu-id="994a2-1499">Otherwise, if type `TResult` implements <xref:System.IComparable>, that implementation is used to compare values.</span></span>  
  
 <span data-ttu-id="994a2-1500">W Visual Basic składni wyrażenia zapytania, `Aggregate Into Min()` klauzula tłumaczy na <xref:System.Linq.Enumerable.Min%2A>wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-1500">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-1501">Poniższy przykład kodu demonstruje, jak użyć <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> , aby określić minimalną wartość w sekwencji prognozowanych wartości.</span><span class="sxs-lookup"><span data-stu-id="994a2-1501">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the minimum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#68](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#68)]
 [!code-vb[System.Linq.Enumerable#68](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#68)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-1502"><paramref name="source" />lub <paramref name="selector" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1502"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="994a2-1503">Aggregate — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-1503">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="OfType&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; OfType&lt;TResult&gt; (this System.Collections.IEnumerable source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; OfType&lt;TResult&gt;(class System.Collections.IEnumerable source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function OfType(Of TResult) (source As IEnumerable) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ OfType(System::Collections::IEnumerable ^ source);" />
      <MemberSignature Language="F#" Value="static member OfType : System.Collections.IEnumerable -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.OfType source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.IEnumerable" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="994a2-1504">Typ do filtrowania elementów sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1504">The type to filter the elements of the sequence on.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-1505"><see cref="T:System.Collections.IEnumerable" /> Których elementów do filtrowania.</span><span class="sxs-lookup"><span data-stu-id="994a2-1505">The <see cref="T:System.Collections.IEnumerable" /> whose elements to filter.</span></span></param>
        <summary><span data-ttu-id="994a2-1506">Filtruje elementy <see cref="T:System.Collections.IEnumerable" /> w oparciu o określony typ.</span><span class="sxs-lookup"><span data-stu-id="994a2-1506">Filters the elements of an <see cref="T:System.Collections.IEnumerable" /> based on a specified type.</span></span></summary>
        <returns><span data-ttu-id="994a2-1507">Element <see cref="T:System.Collections.Generic.IEnumerable`1" /> zawierający elementy z sekwencji wejściowej typu <paramref name="TResult" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1507">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains elements from the input sequence of type <paramref name="TResult" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-1508">Ta metoda jest implementowana za pomocą odroczonego wykonania.</span><span class="sxs-lookup"><span data-stu-id="994a2-1508">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="994a2-1509">Bezpośrednio zwracana wartość jest obiektem, który przechowuje wszystkie informacje wymagane do wykonania akcji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1509">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="994a2-1510">Zapytanie reprezentowane przez tę metodę nie jest wykonywane `GetEnumerator` do momentu wyliczenia obiektu przez wywołanie jego metody bezpośrednio lub przy użyciu `foreach` w wizualizacji C# lub `For Each` w Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="994a2-1510">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="994a2-1511">Metoda zwraca tylko te elementy w `source` , które mogą być rzutowane na `TResult`Typ. <xref:System.Linq.Enumerable.OfType%60%601%28System.Collections.IEnumerable%29></span><span class="sxs-lookup"><span data-stu-id="994a2-1511">The <xref:System.Linq.Enumerable.OfType%60%601%28System.Collections.IEnumerable%29> method returns only those elements in `source` that can be cast to type `TResult`.</span></span> <span data-ttu-id="994a2-1512">Aby zamiast tego otrzymać wyjątek, jeśli element nie może być rzutowany `TResult`na typ <xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29>, użyj.</span><span class="sxs-lookup"><span data-stu-id="994a2-1512">To instead receive an exception if an element cannot be cast to type `TResult`, use <xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29>.</span></span>  
  
 <span data-ttu-id="994a2-1513">Ta metoda jest jedną z kilku standardowych metod operatora zapytań, które można zastosować do kolekcji, która ma typ inny niż sparametryzowane, takich jak <xref:System.Collections.ArrayList>.</span><span class="sxs-lookup"><span data-stu-id="994a2-1513">This method is one of the few standard query operator methods that can be applied to a collection that has a non-parameterized type, such as an <xref:System.Collections.ArrayList>.</span></span> <span data-ttu-id="994a2-1514">Dzieje się tak <xref:System.Linq.Enumerable.OfType%2A> , ponieważ rozszerza <xref:System.Collections.IEnumerable>typ.</span><span class="sxs-lookup"><span data-stu-id="994a2-1514">This is because <xref:System.Linq.Enumerable.OfType%2A> extends the type <xref:System.Collections.IEnumerable>.</span></span> <span data-ttu-id="994a2-1515"><xref:System.Linq.Enumerable.OfType%2A>nie można zastosować do kolekcji, które są oparte na typie sparametryzowanym <xref:System.Collections.Generic.IEnumerable%601> , ale kolekcje, które są oparte na typie niesparametryzowanem. <xref:System.Collections.IEnumerable></span><span class="sxs-lookup"><span data-stu-id="994a2-1515"><xref:System.Linq.Enumerable.OfType%2A> cannot only be applied to collections that are based on the parameterized <xref:System.Collections.Generic.IEnumerable%601> type, but collections that are based on the non-parameterized <xref:System.Collections.IEnumerable> type also.</span></span>  
  
 <span data-ttu-id="994a2-1516">Po zastosowaniu <xref:System.Linq.Enumerable.OfType%2A> do kolekcji, która <xref:System.Collections.IEnumerable>implementuje, uzyskuje się możliwość wykonywania zapytań dotyczących kolekcji przy użyciu standardowych operatorów zapytań.</span><span class="sxs-lookup"><span data-stu-id="994a2-1516">By applying <xref:System.Linq.Enumerable.OfType%2A> to a collection that implements <xref:System.Collections.IEnumerable>, you gain the ability to query the collection by using the standard query operators.</span></span> <span data-ttu-id="994a2-1517"><xref:System.Object> Na przykład określenie argumentu typu do <xref:System.Linq.Enumerable.OfType%2A> zwraca obiekt typu `IEnumerable<Object>` w C# lub `IEnumerable(Of Object)` w Visual Basic, do którego można zastosować standardowe operatory zapytań.</span><span class="sxs-lookup"><span data-stu-id="994a2-1517">For example, specifying a type argument of <xref:System.Object> to <xref:System.Linq.Enumerable.OfType%2A> would return an object of type `IEnumerable<Object>` in C# or `IEnumerable(Of Object)` in Visual Basic, to which the standard query operators can be applied.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-1518">Poniższy przykład kodu demonstruje, jak używać <xref:System.Linq.Enumerable.OfType%2A> do filtrowania elementów. <xref:System.Collections.IEnumerable></span><span class="sxs-lookup"><span data-stu-id="994a2-1518">The following code example demonstrates how to use <xref:System.Linq.Enumerable.OfType%2A> to filter the elements of an <xref:System.Collections.IEnumerable>.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#69](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#69)]
 [!code-vb[System.Linq.Enumerable#69](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#69)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-1519"><paramref name="source" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1519"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="OrderBy&lt;TSource,TKey&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="994a2-1520">Sortuje elementy sekwencji w kolejności rosnącej.</span><span class="sxs-lookup"><span data-stu-id="994a2-1520">Sorts the elements of a sequence in ascending order.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OrderBy&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IOrderedEnumerable&lt;TSource&gt; OrderBy&lt;TSource,TKey&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IOrderedEnumerable`1&lt;!!TSource&gt; OrderBy&lt;TSource, TKey&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function OrderBy(Of TSource, TKey) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey)) As IOrderedEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IOrderedEnumerable&lt;TSource&gt; ^ OrderBy(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector);" />
      <MemberSignature Language="F#" Value="static member OrderBy : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; -&gt; System.Linq.IOrderedEnumerable&lt;'Source&gt;" Usage="System.Linq.Enumerable.OrderBy (source, keySelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IOrderedEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-1521">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1521">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TKey"><span data-ttu-id="994a2-1522">Typ klucza zwracanego przez <paramref name="keySelector" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1522">The type of the key returned by <paramref name="keySelector" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-1523">Sekwencja wartości do ustawienia w kolejności.</span><span class="sxs-lookup"><span data-stu-id="994a2-1523">A sequence of values to order.</span></span></param>
        <param name="keySelector"><span data-ttu-id="994a2-1524">Funkcja wyodrębniania klucza z elementu.</span><span class="sxs-lookup"><span data-stu-id="994a2-1524">A function to extract a key from an element.</span></span></param>
        <summary><span data-ttu-id="994a2-1525">Sortuje elementy sekwencji w kolejności rosnącej zgodnie z kluczem.</span><span class="sxs-lookup"><span data-stu-id="994a2-1525">Sorts the elements of a sequence in ascending order according to a key.</span></span></summary>
        <returns><span data-ttu-id="994a2-1526">, <see cref="T:System.Linq.IOrderedEnumerable`1" /> Których elementy są sortowane według klucza.</span><span class="sxs-lookup"><span data-stu-id="994a2-1526">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> whose elements are sorted according to a key.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-1527">Ta metoda jest implementowana za pomocą odroczonego wykonania.</span><span class="sxs-lookup"><span data-stu-id="994a2-1527">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="994a2-1528">Bezpośrednio zwracana wartość jest obiektem, który przechowuje wszystkie informacje wymagane do wykonania akcji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1528">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="994a2-1529">Zapytanie reprezentowane przez tę metodę nie jest wykonywane `GetEnumerator` do momentu wyliczenia obiektu przez wywołanie jego metody bezpośrednio lub przy użyciu `foreach` w wizualizacji C# lub `For Each` w Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="994a2-1529">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="994a2-1530">Aby zamówić sekwencję według wartości samych`x => x` elementów, określ funkcję Identity (w wizualizacji C# lub `Function(x) x` w Visual Basic) dla `keySelector`.</span><span class="sxs-lookup"><span data-stu-id="994a2-1530">To order a sequence by the values of the elements themselves, specify the identity function (`x => x` in Visual C# or `Function(x) x` in Visual Basic) for `keySelector`.</span></span>  
  
 <span data-ttu-id="994a2-1531">Dwie metody są zdefiniowane w celu poszerzenia typu <xref:System.Linq.IOrderedEnumerable%601>, który jest typem zwracanym tej metody.</span><span class="sxs-lookup"><span data-stu-id="994a2-1531">Two methods are defined to extend the type <xref:System.Linq.IOrderedEnumerable%601>, which is the return type of this method.</span></span> <span data-ttu-id="994a2-1532">Te dwie metody, a `ThenBy` mianowicie `ThenByDescending`i umożliwiają określenie dodatkowych kryteriów sortowania do sortowania sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1532">These two methods, namely `ThenBy` and `ThenByDescending`, enable you to specify additional sort criteria to sort a sequence.</span></span> <span data-ttu-id="994a2-1533">`ThenBy`i `ThenByDescending` `ThenBy` `ThenByDescending` zwracać również, co oznacza dowolną liczbę kolejnych wywołań lub można wykonać. <xref:System.Linq.IOrderedEnumerable%601></span><span class="sxs-lookup"><span data-stu-id="994a2-1533">`ThenBy` and `ThenByDescending` also return an <xref:System.Linq.IOrderedEnumerable%601>, which means any number of consecutive calls to `ThenBy` or `ThenByDescending` can be made.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="994a2-1534">Ponieważ <xref:System.Linq.IOrderedEnumerable%601> dziedziczy z <xref:System.Collections.Generic.IEnumerable%601>, można wywołać <xref:System.Linq.Enumerable.OrderBy%2A> lub <xref:System.Linq.Enumerable.OrderByDescending%2A> w wyniku wywołania do <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A> <xref:System.Linq.Enumerable.ThenBy%2A> lub .<xref:System.Linq.Enumerable.ThenByDescending%2A></span><span class="sxs-lookup"><span data-stu-id="994a2-1534">Because <xref:System.Linq.IOrderedEnumerable%601> inherits from <xref:System.Collections.Generic.IEnumerable%601>, you can call <xref:System.Linq.Enumerable.OrderBy%2A> or <xref:System.Linq.Enumerable.OrderByDescending%2A> on the results of a call to <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A>.</span></span> <span data-ttu-id="994a2-1535">Ten sposób wprowadza nowe podstawowe ustawianie kolejności, które ignoruje ustanowiony wcześniej sposób ustawiania.</span><span class="sxs-lookup"><span data-stu-id="994a2-1535">Doing this introduces a new primary ordering that ignores the previously established ordering.</span></span>  
  
 <span data-ttu-id="994a2-1536">Ta metoda porównuje klucze przy użyciu domyślnej funkcji <xref:System.Collections.Generic.Comparer%601.Default%2A>porównującej.</span><span class="sxs-lookup"><span data-stu-id="994a2-1536">This method compares keys by using the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A>.</span></span>  
  
 <span data-ttu-id="994a2-1537">Ta metoda wykonuje stabilne sortowanie; oznacza to, że jeśli klawisze dwóch elementów są równe, kolejność elementów jest zachowywana.</span><span class="sxs-lookup"><span data-stu-id="994a2-1537">This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved.</span></span> <span data-ttu-id="994a2-1538">Z drugiej strony, niestabilne sortowanie nie pozwala zachować kolejności elementów, które mają ten sam klucz.</span><span class="sxs-lookup"><span data-stu-id="994a2-1538">In contrast, an unstable sort does not preserve the order of elements that have the same key.</span></span>  
  
 <span data-ttu-id="994a2-1539">W `orderby` składni wyrażenia zapytania, klauzula (wizualizacja C#) `Order By` lub (Visual Basic) <xref:System.Linq.Enumerable.OrderBy%2A>tłumaczy na wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-1539">In query expression syntax, an `orderby` (Visual C#) or `Order By` (Visual Basic) clause translates to an invocation of <xref:System.Linq.Enumerable.OrderBy%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-1540">Poniższy przykład kodu demonstruje, jak używać <xref:System.Linq.Enumerable.OrderBy%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29> do sortowania elementów sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1540">The following code example demonstrates how to use <xref:System.Linq.Enumerable.OrderBy%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29> to sort the elements of a sequence.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#70](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#70)]
 [!code-vb[System.Linq.Enumerable#70](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#70)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-1541"><paramref name="source" />lub <paramref name="keySelector" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1541"><paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
        <altmember cref="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
        <related type="Article" href="~/docs/csharp/language-reference/keywords/orderby-clause.md"><span data-ttu-id="994a2-1542">Klauzula orderby (odwołanie w C#)</span><span class="sxs-lookup"><span data-stu-id="994a2-1542">orderby clause (C# Reference)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/order-by-clause.md"><span data-ttu-id="994a2-1543">Order By — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-1543">Order By Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="OrderBy&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IOrderedEnumerable&lt;TSource&gt; OrderBy&lt;TSource,TKey&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, System.Collections.Generic.IComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IOrderedEnumerable`1&lt;!!TSource&gt; OrderBy&lt;TSource, TKey&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Collections.Generic.IComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function OrderBy(Of TSource, TKey) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), comparer As IComparer(Of TKey)) As IOrderedEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IOrderedEnumerable&lt;TSource&gt; ^ OrderBy(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, System::Collections::Generic::IComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member OrderBy : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * System.Collections.Generic.IComparer&lt;'Key&gt; -&gt; System.Linq.IOrderedEnumerable&lt;'Source&gt;" Usage="System.Linq.Enumerable.OrderBy (source, keySelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IOrderedEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-1544">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1544">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TKey"><span data-ttu-id="994a2-1545">Typ klucza zwracanego przez <paramref name="keySelector" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1545">The type of the key returned by <paramref name="keySelector" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-1546">Sekwencja wartości do ustawienia w kolejności.</span><span class="sxs-lookup"><span data-stu-id="994a2-1546">A sequence of values to order.</span></span></param>
        <param name="keySelector"><span data-ttu-id="994a2-1547">Funkcja wyodrębniania klucza z elementu.</span><span class="sxs-lookup"><span data-stu-id="994a2-1547">A function to extract a key from an element.</span></span></param>
        <param name="comparer"><span data-ttu-id="994a2-1548"><see cref="T:System.Collections.Generic.IComparer`1" /> Do porównywania kluczy.</span><span class="sxs-lookup"><span data-stu-id="994a2-1548">An <see cref="T:System.Collections.Generic.IComparer`1" /> to compare keys.</span></span></param>
        <summary><span data-ttu-id="994a2-1549">Sortuje elementy sekwencji w kolejności rosnącej przy użyciu określonej funkcji porównującej.</span><span class="sxs-lookup"><span data-stu-id="994a2-1549">Sorts the elements of a sequence in ascending order by using a specified comparer.</span></span></summary>
        <returns><span data-ttu-id="994a2-1550">, <see cref="T:System.Linq.IOrderedEnumerable`1" /> Których elementy są sortowane według klucza.</span><span class="sxs-lookup"><span data-stu-id="994a2-1550">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> whose elements are sorted according to a key.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-1551">Ta metoda jest implementowana za pomocą odroczonego wykonania.</span><span class="sxs-lookup"><span data-stu-id="994a2-1551">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="994a2-1552">Bezpośrednio zwracana wartość jest obiektem, który przechowuje wszystkie informacje wymagane do wykonania akcji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1552">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="994a2-1553">Zapytanie reprezentowane przez tę metodę nie jest wykonywane `GetEnumerator` do momentu wyliczenia obiektu przez wywołanie jego metody bezpośrednio lub przy użyciu `foreach` w wizualizacji C# lub `For Each` w Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="994a2-1553">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="994a2-1554">Aby zamówić sekwencję według wartości samych`x => x` elementów, określ funkcję Identity (w wizualizacji C# lub `Function(x) x` w Visual Basic) dla `keySelector`.</span><span class="sxs-lookup"><span data-stu-id="994a2-1554">To order a sequence by the values of the elements themselves, specify the identity function (`x => x` in Visual C# or `Function(x) x` in Visual Basic) for `keySelector`.</span></span>  
  
 <span data-ttu-id="994a2-1555">Dwie metody są zdefiniowane w celu poszerzenia typu <xref:System.Linq.IOrderedEnumerable%601>, który jest typem zwracanym tej metody.</span><span class="sxs-lookup"><span data-stu-id="994a2-1555">Two methods are defined to extend the type <xref:System.Linq.IOrderedEnumerable%601>, which is the return type of this method.</span></span> <span data-ttu-id="994a2-1556">Te dwie metody, a `ThenBy` mianowicie `ThenByDescending`i umożliwiają określenie dodatkowych kryteriów sortowania do sortowania sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1556">These two methods, namely `ThenBy` and `ThenByDescending`, enable you to specify additional sort criteria to sort a sequence.</span></span> <span data-ttu-id="994a2-1557">`ThenBy`i `ThenByDescending` `ThenBy` `ThenByDescending` zwracać również, co oznacza dowolną liczbę kolejnych wywołań lub można wykonać. <xref:System.Linq.IOrderedEnumerable%601></span><span class="sxs-lookup"><span data-stu-id="994a2-1557">`ThenBy` and `ThenByDescending` also return an <xref:System.Linq.IOrderedEnumerable%601>, which means any number of consecutive calls to `ThenBy` or `ThenByDescending` can be made.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="994a2-1558">Ponieważ <xref:System.Linq.IOrderedEnumerable%601> dziedziczy z <xref:System.Collections.Generic.IEnumerable%601>, można wywołać <xref:System.Linq.Enumerable.OrderBy%2A> lub <xref:System.Linq.Enumerable.OrderByDescending%2A> w wyniku wywołania do <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A> <xref:System.Linq.Enumerable.ThenBy%2A> lub .<xref:System.Linq.Enumerable.ThenByDescending%2A></span><span class="sxs-lookup"><span data-stu-id="994a2-1558">Because <xref:System.Linq.IOrderedEnumerable%601> inherits from <xref:System.Collections.Generic.IEnumerable%601>, you can call <xref:System.Linq.Enumerable.OrderBy%2A> or <xref:System.Linq.Enumerable.OrderByDescending%2A> on the results of a call to <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A>.</span></span> <span data-ttu-id="994a2-1559">Ten sposób wprowadza nowe podstawowe ustawianie kolejności, które ignoruje ustanowiony wcześniej sposób ustawiania.</span><span class="sxs-lookup"><span data-stu-id="994a2-1559">Doing this introduces a new primary ordering that ignores the previously established ordering.</span></span>  
  
 <span data-ttu-id="994a2-1560">Jeśli `comparer` <xref:System.Collections.Generic.Comparer%601.Default%2A> jest `null`, domyślna funkcja porównująca służy do porównywania kluczy.</span><span class="sxs-lookup"><span data-stu-id="994a2-1560">If `comparer` is `null`, the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A> is used to compare keys.</span></span>  
  
 <span data-ttu-id="994a2-1561">Ta metoda wykonuje stabilne sortowanie; oznacza to, że jeśli klawisze dwóch elementów są równe, kolejność elementów jest zachowywana.</span><span class="sxs-lookup"><span data-stu-id="994a2-1561">This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved.</span></span> <span data-ttu-id="994a2-1562">Z drugiej strony, niestabilne sortowanie nie pozwala zachować kolejności elementów, które mają ten sam klucz.</span><span class="sxs-lookup"><span data-stu-id="994a2-1562">In contrast, an unstable sort does not preserve the order of elements that have the same key.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-1563"><paramref name="source" />lub <paramref name="keySelector" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1563"><paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
        <altmember cref="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
      </Docs>
    </Member>
    <MemberGroup MemberName="OrderByDescending&lt;TSource,TKey&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="994a2-1564">Sortuje elementy sekwencji w kolejności malejącej.</span><span class="sxs-lookup"><span data-stu-id="994a2-1564">Sorts the elements of a sequence in descending order.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OrderByDescending&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IOrderedEnumerable&lt;TSource&gt; OrderByDescending&lt;TSource,TKey&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IOrderedEnumerable`1&lt;!!TSource&gt; OrderByDescending&lt;TSource, TKey&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function OrderByDescending(Of TSource, TKey) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey)) As IOrderedEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IOrderedEnumerable&lt;TSource&gt; ^ OrderByDescending(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector);" />
      <MemberSignature Language="F#" Value="static member OrderByDescending : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; -&gt; System.Linq.IOrderedEnumerable&lt;'Source&gt;" Usage="System.Linq.Enumerable.OrderByDescending (source, keySelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IOrderedEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-1565">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1565">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TKey"><span data-ttu-id="994a2-1566">Typ klucza zwracanego przez <paramref name="keySelector" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1566">The type of the key returned by <paramref name="keySelector" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-1567">Sekwencja wartości do ustawienia w kolejności.</span><span class="sxs-lookup"><span data-stu-id="994a2-1567">A sequence of values to order.</span></span></param>
        <param name="keySelector"><span data-ttu-id="994a2-1568">Funkcja wyodrębniania klucza z elementu.</span><span class="sxs-lookup"><span data-stu-id="994a2-1568">A function to extract a key from an element.</span></span></param>
        <summary><span data-ttu-id="994a2-1569">Sortuje elementy sekwencji w kolejności malejącej zgodnie z kluczem.</span><span class="sxs-lookup"><span data-stu-id="994a2-1569">Sorts the elements of a sequence in descending order according to a key.</span></span></summary>
        <returns><span data-ttu-id="994a2-1570">, <see cref="T:System.Linq.IOrderedEnumerable`1" /> Których elementy są sortowane w kolejności malejącej zgodnie z kluczem.</span><span class="sxs-lookup"><span data-stu-id="994a2-1570">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> whose elements are sorted in descending order according to a key.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-1571">Ta metoda jest implementowana za pomocą odroczonego wykonania.</span><span class="sxs-lookup"><span data-stu-id="994a2-1571">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="994a2-1572">Bezpośrednio zwracana wartość jest obiektem, który przechowuje wszystkie informacje wymagane do wykonania akcji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1572">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="994a2-1573">Zapytanie reprezentowane przez tę metodę nie jest wykonywane `GetEnumerator` do momentu wyliczenia obiektu przez wywołanie jego metody bezpośrednio lub przy użyciu `foreach` w wizualizacji C# lub `For Each` w Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="994a2-1573">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="994a2-1574">Aby zamówić sekwencję według wartości samych`x => x` elementów, określ funkcję Identity (w wizualizacji C# lub `Function(x) x` w Visual Basic) dla `keySelector`.</span><span class="sxs-lookup"><span data-stu-id="994a2-1574">To order a sequence by the values of the elements themselves, specify the identity function (`x => x` in Visual C# or `Function(x) x` in Visual Basic) for `keySelector`.</span></span>  
  
 <span data-ttu-id="994a2-1575">Przykład tej metody można znaleźć w temacie <xref:System.Linq.Enumerable.OrderByDescending%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29>.</span><span class="sxs-lookup"><span data-stu-id="994a2-1575">For an example of this method, see <xref:System.Linq.Enumerable.OrderByDescending%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29>.</span></span>  
  
 <span data-ttu-id="994a2-1576">Dwie metody są zdefiniowane w celu poszerzenia typu <xref:System.Linq.IOrderedEnumerable%601>, który jest typem zwracanym tej metody.</span><span class="sxs-lookup"><span data-stu-id="994a2-1576">Two methods are defined to extend the type <xref:System.Linq.IOrderedEnumerable%601>, which is the return type of this method.</span></span> <span data-ttu-id="994a2-1577">Te dwie metody, a `ThenBy` mianowicie `ThenByDescending`i umożliwiają określenie dodatkowych kryteriów sortowania do sortowania sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1577">These two methods, namely `ThenBy` and `ThenByDescending`, enable you to specify additional sort criteria to sort a sequence.</span></span> <span data-ttu-id="994a2-1578">`ThenBy`i `ThenByDescending` `ThenBy` `ThenByDescending` zwracać również, co oznacza dowolną liczbę kolejnych wywołań lub można wykonać. <xref:System.Linq.IOrderedEnumerable%601></span><span class="sxs-lookup"><span data-stu-id="994a2-1578">`ThenBy` and `ThenByDescending` also return an <xref:System.Linq.IOrderedEnumerable%601>, which means any number of consecutive calls to `ThenBy` or `ThenByDescending` can be made.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="994a2-1579">Ponieważ <xref:System.Linq.IOrderedEnumerable%601> dziedziczy z <xref:System.Collections.Generic.IEnumerable%601>, można wywołać <xref:System.Linq.Enumerable.OrderBy%2A> lub <xref:System.Linq.Enumerable.OrderByDescending%2A> w wyniku wywołania do <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A> <xref:System.Linq.Enumerable.ThenBy%2A> lub .<xref:System.Linq.Enumerable.ThenByDescending%2A></span><span class="sxs-lookup"><span data-stu-id="994a2-1579">Because <xref:System.Linq.IOrderedEnumerable%601> inherits from <xref:System.Collections.Generic.IEnumerable%601>, you can call <xref:System.Linq.Enumerable.OrderBy%2A> or <xref:System.Linq.Enumerable.OrderByDescending%2A> on the results of a call to <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A>.</span></span> <span data-ttu-id="994a2-1580">Ten sposób wprowadza nowe podstawowe ustawianie kolejności, które ignoruje ustanowiony wcześniej sposób ustawiania.</span><span class="sxs-lookup"><span data-stu-id="994a2-1580">Doing this introduces a new primary ordering that ignores the previously established ordering.</span></span>  
  
 <span data-ttu-id="994a2-1581">Ta metoda porównuje klucze przy użyciu domyślnej funkcji <xref:System.Collections.Generic.Comparer%601.Default%2A>porównującej.</span><span class="sxs-lookup"><span data-stu-id="994a2-1581">This method compares keys by using the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A>.</span></span>  
  
 <span data-ttu-id="994a2-1582">Ta metoda wykonuje stabilne sortowanie; oznacza to, że jeśli klawisze dwóch elementów są równe, kolejność elementów jest zachowywana.</span><span class="sxs-lookup"><span data-stu-id="994a2-1582">This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved.</span></span> <span data-ttu-id="994a2-1583">Z drugiej strony, niestabilne sortowanie nie pozwala zachować kolejności elementów, które mają ten sam klucz.</span><span class="sxs-lookup"><span data-stu-id="994a2-1583">In contrast, an unstable sort does not preserve the order of elements that have the same key.</span></span>  
  
 <span data-ttu-id="994a2-1584">W `orderby descending` składni wyrażenia zapytania, klauzula (wizualizacja C#) `Order By Descending` lub (Visual Basic) <xref:System.Linq.Enumerable.OrderByDescending%2A>tłumaczy na wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-1584">In query expression syntax, an `orderby descending` (Visual C#) or `Order By Descending` (Visual Basic) clause translates to an invocation of <xref:System.Linq.Enumerable.OrderByDescending%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-1585"><paramref name="source" />lub <paramref name="keySelector" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1585"><paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
        <altmember cref="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
        <related type="Article" href="~/docs/csharp/language-reference/keywords/orderby-clause.md"><span data-ttu-id="994a2-1586">Klauzula orderby (odwołanie w C#)</span><span class="sxs-lookup"><span data-stu-id="994a2-1586">orderby clause (C# Reference)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/order-by-clause.md"><span data-ttu-id="994a2-1587">Order By — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-1587">Order By Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="OrderByDescending&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IOrderedEnumerable&lt;TSource&gt; OrderByDescending&lt;TSource,TKey&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, System.Collections.Generic.IComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IOrderedEnumerable`1&lt;!!TSource&gt; OrderByDescending&lt;TSource, TKey&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Collections.Generic.IComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function OrderByDescending(Of TSource, TKey) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), comparer As IComparer(Of TKey)) As IOrderedEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IOrderedEnumerable&lt;TSource&gt; ^ OrderByDescending(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, System::Collections::Generic::IComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member OrderByDescending : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * System.Collections.Generic.IComparer&lt;'Key&gt; -&gt; System.Linq.IOrderedEnumerable&lt;'Source&gt;" Usage="System.Linq.Enumerable.OrderByDescending (source, keySelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IOrderedEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-1588">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1588">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TKey"><span data-ttu-id="994a2-1589">Typ klucza zwracanego przez <paramref name="keySelector" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1589">The type of the key returned by <paramref name="keySelector" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-1590">Sekwencja wartości do ustawienia w kolejności.</span><span class="sxs-lookup"><span data-stu-id="994a2-1590">A sequence of values to order.</span></span></param>
        <param name="keySelector"><span data-ttu-id="994a2-1591">Funkcja wyodrębniania klucza z elementu.</span><span class="sxs-lookup"><span data-stu-id="994a2-1591">A function to extract a key from an element.</span></span></param>
        <param name="comparer"><span data-ttu-id="994a2-1592"><see cref="T:System.Collections.Generic.IComparer`1" /> Do porównywania kluczy.</span><span class="sxs-lookup"><span data-stu-id="994a2-1592">An <see cref="T:System.Collections.Generic.IComparer`1" /> to compare keys.</span></span></param>
        <summary><span data-ttu-id="994a2-1593">Sortuje elementy sekwencji w kolejności malejącej przy użyciu określonej funkcji porównującej.</span><span class="sxs-lookup"><span data-stu-id="994a2-1593">Sorts the elements of a sequence in descending order by using a specified comparer.</span></span></summary>
        <returns><span data-ttu-id="994a2-1594">, <see cref="T:System.Linq.IOrderedEnumerable`1" /> Których elementy są sortowane w kolejności malejącej zgodnie z kluczem.</span><span class="sxs-lookup"><span data-stu-id="994a2-1594">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> whose elements are sorted in descending order according to a key.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-1595">Ta metoda jest implementowana za pomocą odroczonego wykonania.</span><span class="sxs-lookup"><span data-stu-id="994a2-1595">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="994a2-1596">Bezpośrednio zwracana wartość jest obiektem, który przechowuje wszystkie informacje wymagane do wykonania akcji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1596">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="994a2-1597">Zapytanie reprezentowane przez tę metodę nie jest wykonywane `GetEnumerator` do momentu wyliczenia obiektu przez wywołanie jego metody bezpośrednio lub przy użyciu `foreach` w wizualizacji C# lub `For Each` w Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="994a2-1597">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="994a2-1598">Aby zamówić sekwencję według wartości samych`x => x` elementów, określ funkcję Identity (w wizualizacji C# lub `Function(x) x` w Visual Basic) dla `keySelector`.</span><span class="sxs-lookup"><span data-stu-id="994a2-1598">To order a sequence by the values of the elements themselves, specify the identity function (`x => x` in Visual C# or `Function(x) x` in Visual Basic) for `keySelector`.</span></span>  
  
 <span data-ttu-id="994a2-1599">Dwie metody są zdefiniowane w celu poszerzenia typu <xref:System.Linq.IOrderedEnumerable%601>, który jest typem zwracanym tej metody.</span><span class="sxs-lookup"><span data-stu-id="994a2-1599">Two methods are defined to extend the type <xref:System.Linq.IOrderedEnumerable%601>, which is the return type of this method.</span></span> <span data-ttu-id="994a2-1600">Te dwie metody, a `ThenBy` mianowicie `ThenByDescending`i umożliwiają określenie dodatkowych kryteriów sortowania do sortowania sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1600">These two methods, namely `ThenBy` and `ThenByDescending`, enable you to specify additional sort criteria to sort a sequence.</span></span> <span data-ttu-id="994a2-1601">`ThenBy`i `ThenByDescending` `ThenBy` `ThenByDescending` zwracać również, co oznacza dowolną liczbę kolejnych wywołań lub można wykonać. <xref:System.Linq.IOrderedEnumerable%601></span><span class="sxs-lookup"><span data-stu-id="994a2-1601">`ThenBy` and `ThenByDescending` also return an <xref:System.Linq.IOrderedEnumerable%601>, which means any number of consecutive calls to `ThenBy` or `ThenByDescending` can be made.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="994a2-1602">Ponieważ <xref:System.Linq.IOrderedEnumerable%601> dziedziczy z <xref:System.Collections.Generic.IEnumerable%601>, można wywołać <xref:System.Linq.Enumerable.OrderBy%2A> lub <xref:System.Linq.Enumerable.OrderByDescending%2A> w wyniku wywołania do <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A> <xref:System.Linq.Enumerable.ThenBy%2A> lub .<xref:System.Linq.Enumerable.ThenByDescending%2A></span><span class="sxs-lookup"><span data-stu-id="994a2-1602">Because <xref:System.Linq.IOrderedEnumerable%601> inherits from <xref:System.Collections.Generic.IEnumerable%601>, you can call <xref:System.Linq.Enumerable.OrderBy%2A> or <xref:System.Linq.Enumerable.OrderByDescending%2A> on the results of a call to <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A>.</span></span> <span data-ttu-id="994a2-1603">Ten sposób wprowadza nowe podstawowe ustawianie kolejności, które ignoruje ustanowiony wcześniej sposób ustawiania.</span><span class="sxs-lookup"><span data-stu-id="994a2-1603">Doing this introduces a new primary ordering that ignores the previously established ordering.</span></span>  
  
 <span data-ttu-id="994a2-1604">Jeśli `comparer` <xref:System.Collections.Generic.Comparer%601.Default%2A> jest `null`, domyślna funkcja porównująca służy do porównywania kluczy.</span><span class="sxs-lookup"><span data-stu-id="994a2-1604">If `comparer` is `null`, the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A> is used to compare keys.</span></span>  
  
 <span data-ttu-id="994a2-1605">Ta metoda wykonuje stabilne sortowanie; oznacza to, że jeśli klawisze dwóch elementów są równe, kolejność elementów jest zachowywana.</span><span class="sxs-lookup"><span data-stu-id="994a2-1605">This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved.</span></span> <span data-ttu-id="994a2-1606">Z drugiej strony, niestabilne sortowanie nie pozwala zachować kolejności elementów, które mają ten sam klucz.</span><span class="sxs-lookup"><span data-stu-id="994a2-1606">In contrast, an unstable sort does not preserve the order of elements that have the same key.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-1607">Poniższy przykład kodu demonstruje, jak używać <xref:System.Linq.Enumerable.OrderByDescending%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29> do sortowania elementów sekwencji w kolejności malejącej przy użyciu funkcji Transform i niestandardowej metody porównującej.</span><span class="sxs-lookup"><span data-stu-id="994a2-1607">The following code example demonstrates how to use <xref:System.Linq.Enumerable.OrderByDescending%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29> to sort the elements of a sequence in descending order by using a transform function and a custom comparer.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#71](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#71)]
 [!code-vb[System.Linq.Enumerable#71](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#71)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-1608"><paramref name="source" />lub <paramref name="keySelector" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1608"><paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span></span></exception>
        <altmember cref="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
        <altmember cref="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
      </Docs>
    </Member>
    <Member MemberName="Prepend&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Prepend&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, TSource element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Prepend&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, !!TSource element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Prepend(Of TSource) (source As IEnumerable(Of TSource), element As TSource) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ Prepend(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, TSource element);" />
      <MemberSignature Language="F#" Value="static member Prepend : seq&lt;'Source&gt; * 'Source -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.Prepend (source, element)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netstandard-2.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" Index="0" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;netstandard-2.1" />
        <Parameter Name="element" Type="TSource" Index="1" FrameworkAlternate="netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.6;netstandard-2.0;xamarinandroid-7.1;xamarinios-10.8;netstandard-2.1" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-1609">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1609">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-1610">Sekwencja wartości.</span><span class="sxs-lookup"><span data-stu-id="994a2-1610">A sequence of values.</span></span></param>
        <param name="element"><span data-ttu-id="994a2-1611">Wartość do <paramref name="source" />dołączania.</span><span class="sxs-lookup"><span data-stu-id="994a2-1611">The value to prepend to <paramref name="source" />.</span></span></param>
        <summary><span data-ttu-id="994a2-1612">Dodaje wartość na początku sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1612">Adds a value to the beginning of the sequence.</span></span></summary>
        <returns><span data-ttu-id="994a2-1613">Nowa sekwencja rozpoczynająca się od <paramref name="element" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1613">A new sequence that begins with <paramref name="element" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[    
          
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="994a2-1614">Ta metoda nie modyfikuje elementów kolekcji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1614">This method does not modify the elements of the collection.</span></span> <span data-ttu-id="994a2-1615">Zamiast tego tworzy kopię kolekcji z nowym elementem.</span><span class="sxs-lookup"><span data-stu-id="994a2-1615">Instead, it creates a copy of the collection with the new element.</span></span>
  
## Examples  
 <span data-ttu-id="994a2-1616">Poniższy przykład kodu demonstruje, jak użyć <xref:System.Linq.Enumerable.Prepend%2A> , aby dołączać wartość do początku sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1616">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Prepend%2A> to prepend a value to the beginning of the sequence.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#202](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#202)]
 [!code-vb[System.Linq.Enumerable#202](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#202)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-1617"><paramref name="source" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1617"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Range">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;int&gt; Range (int start, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;int32&gt; Range(int32 start, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Range(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Range (start As Integer, count As Integer) As IEnumerable(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IEnumerable&lt;int&gt; ^ Range(int start, int count);" />
      <MemberSignature Language="F#" Value="static member Range : int * int -&gt; seq&lt;int&gt;" Usage="System.Linq.Enumerable.Range (start, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="start"><span data-ttu-id="994a2-1618">Wartość pierwszej liczby całkowitej w sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1618">The value of the first integer in the sequence.</span></span></param>
        <param name="count"><span data-ttu-id="994a2-1619">Liczba liczb całkowitych sekwencyjnych do wygenerowania.</span><span class="sxs-lookup"><span data-stu-id="994a2-1619">The number of sequential integers to generate.</span></span></param>
        <summary><span data-ttu-id="994a2-1620">Generuje sekwencję liczb całkowitych w określonym zakresie.</span><span class="sxs-lookup"><span data-stu-id="994a2-1620">Generates a sequence of integral numbers within a specified range.</span></span></summary>
        <returns><span data-ttu-id="994a2-1621">Wartość <c>"&lt;IEnumerable&gt; Int32</c> " w C# języku or <c>(Int32)</c> w Visual Basic, która zawiera zakres sekwencyjnych numerów całkowitych.</span><span class="sxs-lookup"><span data-stu-id="994a2-1621">An <c>IEnumerable&lt;Int32&gt;</c> in C# or <c>IEnumerable(Of Int32)</c> in Visual Basic that contains a range of sequential integral numbers.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-1622">Ta metoda jest implementowana za pomocą odroczonego wykonania.</span><span class="sxs-lookup"><span data-stu-id="994a2-1622">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="994a2-1623">Bezpośrednio zwracana wartość jest obiektem, który przechowuje wszystkie informacje wymagane do wykonania akcji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1623">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="994a2-1624">Zapytanie reprezentowane przez tę metodę nie jest wykonywane `GetEnumerator` do momentu wyliczenia obiektu przez wywołanie jego metody bezpośrednio lub przy użyciu `foreach` w wizualizacji C# lub `For Each` w Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="994a2-1624">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-1625">Poniższy przykład kodu ilustruje sposób użycia <xref:System.Linq.Enumerable.Range%2A> programu w celu wygenerowania sekwencji wartości.</span><span class="sxs-lookup"><span data-stu-id="994a2-1625">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Range%2A> to generate a sequence of values.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#72](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#72)]
 [!code-vb[System.Linq.Enumerable#72](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#72)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="994a2-1626"><paramref name="count" />jest mniejsza niż 0.</span><span class="sxs-lookup"><span data-stu-id="994a2-1626"><paramref name="count" /> is less than 0.</span></span>  
  
<span data-ttu-id="994a2-1627">—lub—</span><span class="sxs-lookup"><span data-stu-id="994a2-1627">-or-</span></span> 
 <span data-ttu-id="994a2-1628"><paramref name="start" /> + <paramref name="count" />-1 jest większy niż <see cref="F:System.Int32.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1628"><paramref name="start" /> + <paramref name="count" /> -1 is larger than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Repeat&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; Repeat&lt;TResult&gt; (TResult element, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; Repeat&lt;TResult&gt;(!!TResult element, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Repeat``1(``0,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Repeat(Of TResult) (element As TResult, count As Integer) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ Repeat(TResult element, int count);" />
      <MemberSignature Language="F#" Value="static member Repeat : 'Result * int -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.Repeat (element, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="element" Type="TResult" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TResult"><span data-ttu-id="994a2-1629">Typ wartości, który ma zostać powtórzony w sekwencji wyników.</span><span class="sxs-lookup"><span data-stu-id="994a2-1629">The type of the value to be repeated in the result sequence.</span></span></typeparam>
        <param name="element"><span data-ttu-id="994a2-1630">Wartość, która ma zostać powtórzona.</span><span class="sxs-lookup"><span data-stu-id="994a2-1630">The value to be repeated.</span></span></param>
        <param name="count"><span data-ttu-id="994a2-1631">Liczba przypadków powtarzania wartości w wygenerowanej sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1631">The number of times to repeat the value in the generated sequence.</span></span></param>
        <summary><span data-ttu-id="994a2-1632">Generuje sekwencję zawierającą jedną powtórzoną wartość.</span><span class="sxs-lookup"><span data-stu-id="994a2-1632">Generates a sequence that contains one repeated value.</span></span></summary>
        <returns><span data-ttu-id="994a2-1633"><see cref="T:System.Collections.Generic.IEnumerable`1" /> Zawierający wartość powtórzoną.</span><span class="sxs-lookup"><span data-stu-id="994a2-1633">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains a repeated value.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-1634">Ta metoda jest implementowana za pomocą odroczonego wykonania.</span><span class="sxs-lookup"><span data-stu-id="994a2-1634">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="994a2-1635">Bezpośrednio zwracana wartość jest obiektem, który przechowuje wszystkie informacje wymagane do wykonania akcji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1635">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="994a2-1636">Zapytanie reprezentowane przez tę metodę nie jest wykonywane `GetEnumerator` do momentu wyliczenia obiektu przez wywołanie jego metody bezpośrednio lub przy użyciu `foreach` w wizualizacji C# lub `For Each` w Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="994a2-1636">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-1637">Poniższy przykład kodu demonstruje, jak używać <xref:System.Linq.Enumerable.Repeat%2A> do generowania sekwencji powtórzonej wartości.</span><span class="sxs-lookup"><span data-stu-id="994a2-1637">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Repeat%2A> to generate a sequence of a repeated value.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#73](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#73)]
 [!code-vb[System.Linq.Enumerable#73](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#73)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException"><span data-ttu-id="994a2-1638"><paramref name="count" />jest mniejsza niż 0.</span><span class="sxs-lookup"><span data-stu-id="994a2-1638"><paramref name="count" /> is less than 0.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Reverse&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Reverse&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Reverse&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Reverse(Of TSource) (source As IEnumerable(Of TSource)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ Reverse(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Reverse : seq&lt;'Source&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.Reverse source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-1639">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1639">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-1640">Sekwencja wartości do odwrócenia.</span><span class="sxs-lookup"><span data-stu-id="994a2-1640">A sequence of values to reverse.</span></span></param>
        <summary><span data-ttu-id="994a2-1641">Odwraca kolejność elementów w sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1641">Inverts the order of the elements in a sequence.</span></span></summary>
        <returns><span data-ttu-id="994a2-1642">Sekwencja, której elementy odpowiadają wartościom sekwencji wejściowej w odwrotnej kolejności.</span><span class="sxs-lookup"><span data-stu-id="994a2-1642">A sequence whose elements correspond to those of the input sequence in reverse order.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-1643">Ta metoda jest implementowana za pomocą odroczonego wykonania.</span><span class="sxs-lookup"><span data-stu-id="994a2-1643">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="994a2-1644">Bezpośrednio zwracana wartość jest obiektem, który przechowuje wszystkie informacje wymagane do wykonania akcji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1644">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="994a2-1645">Zapytanie reprezentowane przez tę metodę nie jest wykonywane `GetEnumerator` do momentu wyliczenia obiektu przez wywołanie jego metody bezpośrednio lub przy użyciu `foreach` w wizualizacji C# lub `For Each` w Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="994a2-1645">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="994a2-1646">W przeciwieństwie <xref:System.Linq.Enumerable.OrderBy%2A>do, ta metoda sortowania nie uwzględnia rzeczywistych wartości w celu określenia kolejności.</span><span class="sxs-lookup"><span data-stu-id="994a2-1646">Unlike <xref:System.Linq.Enumerable.OrderBy%2A>, this sorting method does not consider the actual values themselves in determining the order.</span></span> <span data-ttu-id="994a2-1647">Zamiast tego zwraca tylko elementy w odwrotnej kolejności, z których są tworzone przez bazowe źródło.</span><span class="sxs-lookup"><span data-stu-id="994a2-1647">Rather, it just returns the elements in the reverse order from which they are produced by the underlying source.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-1648">Poniższy przykład kodu demonstruje, jak użyć <xref:System.Linq.Enumerable.Reverse%2A> do odwrócenia kolejności elementów w tablicy.</span><span class="sxs-lookup"><span data-stu-id="994a2-1648">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Reverse%2A> to reverse the order of elements in an array.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#74](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#74)]
 [!code-vb[System.Linq.Enumerable#74](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#74)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-1649"><paramref name="source" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1649"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Select&lt;TSource,TResult&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="994a2-1650">Projektuje każdy element sekwencji w nowym formularzu.</span><span class="sxs-lookup"><span data-stu-id="994a2-1650">Projects each element of a sequence into a new form.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Select&lt;TSource,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; Select&lt;TSource,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,int,TResult&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; Select&lt;TSource, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`3&lt;!!TSource, int32, !!TResult&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Select(Of TSource, TResult) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Integer, TResult)) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ Select(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, int, TResult&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Select : seq&lt;'Source&gt; * Func&lt;'Source, int, 'Result&gt; -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.Select (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Int32,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-1651">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1651">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="994a2-1652">Typ wartości zwracanej przez <paramref name="selector" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1652">The type of the value returned by <paramref name="selector" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-1653">Sekwencja wartości do wywołania funkcji transformacji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1653">A sequence of values to invoke a transform function on.</span></span></param>
        <param name="selector"><span data-ttu-id="994a2-1654">Funkcja transformacji do zastosowania do każdego elementu źródłowego; drugi parametr funkcji reprezentuje indeks elementu źródłowego.</span><span class="sxs-lookup"><span data-stu-id="994a2-1654">A transform function to apply to each source element; the second parameter of the function represents the index of the source element.</span></span></param>
        <summary><span data-ttu-id="994a2-1655">Projektuje każdy element sekwencji w nowym formularzu, włączając indeks elementu.</span><span class="sxs-lookup"><span data-stu-id="994a2-1655">Projects each element of a sequence into a new form by incorporating the element's index.</span></span></summary>
        <returns><span data-ttu-id="994a2-1656">Których elementy są wynikiem wywołania funkcji Transform dla każdego <paramref name="source" />elementu. <see cref="T:System.Collections.Generic.IEnumerable`1" /></span><span class="sxs-lookup"><span data-stu-id="994a2-1656">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements are the result of invoking the transform function on each element of <paramref name="source" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-1657">Ta metoda jest implementowana za pomocą odroczonego wykonania.</span><span class="sxs-lookup"><span data-stu-id="994a2-1657">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="994a2-1658">Bezpośrednio zwracana wartość jest obiektem, który przechowuje wszystkie informacje wymagane do wykonania akcji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1658">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="994a2-1659">Zapytanie reprezentowane przez tę metodę nie jest wykonywane `GetEnumerator` do momentu wyliczenia obiektu przez wywołanie jego metody bezpośrednio lub przy użyciu `foreach` w wizualizacji C# lub `For Each` w Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="994a2-1659">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="994a2-1660">Pierwszy argument `selector` reprezentujący element do przetworzenia.</span><span class="sxs-lookup"><span data-stu-id="994a2-1660">The first argument to `selector` represents the element to process.</span></span> <span data-ttu-id="994a2-1661">Drugi argument `selector` reprezentujący liczony od zera indeks tego elementu w sekwencji źródłowej.</span><span class="sxs-lookup"><span data-stu-id="994a2-1661">The second argument to `selector` represents the zero-based index of that element in the source sequence.</span></span> <span data-ttu-id="994a2-1662">Może to być przydatne, jeśli elementy znajdują się w znanej kolejności i chcesz wykonać coś z elementem w określonym indeksie, na przykład.</span><span class="sxs-lookup"><span data-stu-id="994a2-1662">This can be useful if the elements are in a known order and you want to do something with an element at a particular index, for example.</span></span> <span data-ttu-id="994a2-1663">Może być również przydatna, jeśli chcesz pobrać indeks jednego lub większej liczby elementów.</span><span class="sxs-lookup"><span data-stu-id="994a2-1663">It can also be useful if you want to retrieve the index of one or more elements.</span></span>  
  
 <span data-ttu-id="994a2-1664">Ta metoda projekcji wymaga funkcji `selector`Transform, w celu utworzenia jednej wartości dla każdej wartości w `source`sekwencji źródłowej.</span><span class="sxs-lookup"><span data-stu-id="994a2-1664">This projection method requires the transform function, `selector`, to produce one value for each value in the source sequence, `source`.</span></span> <span data-ttu-id="994a2-1665">Jeśli `selector` zwraca wartość, która jest sama kolekcją, to odbiorca przejdzie ręcznie przechodzenie sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1665">If `selector` returns a value that is itself a collection, it is up to the consumer to traverse the subsequences manually.</span></span> <span data-ttu-id="994a2-1666">W takiej sytuacji lepszym rozwiązaniem może być zwrócenie pojedynczej połączonej sekwencji wartości przez zapytanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-1666">In such a situation, it might be better for your query to return a single coalesced sequence of values.</span></span> <span data-ttu-id="994a2-1667">Aby to osiągnąć, użyj <xref:System.Linq.Enumerable.SelectMany%2A> metody <xref:System.Linq.Enumerable.Select%2A>zamiast.</span><span class="sxs-lookup"><span data-stu-id="994a2-1667">To achieve this, use the <xref:System.Linq.Enumerable.SelectMany%2A> method instead of <xref:System.Linq.Enumerable.Select%2A>.</span></span> <span data-ttu-id="994a2-1668">Chociaż `SelectMany` działa podobnie do `Select`, różni się w tym, że funkcja Transform zwraca kolekcję, która jest następnie rozszerzana przez `SelectMany` przed zwróceniem.</span><span class="sxs-lookup"><span data-stu-id="994a2-1668">Although `SelectMany` works similarly to `Select`, it differs in that the transform function returns a collection that is then expanded by `SelectMany` before it is returned.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-1669">Poniższy przykład kodu demonstruje, jak używać <xref:System.Linq.Enumerable.Select%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2C%60%601%7D%29> do tworzenia projektu przez sekwencję wartości i używać indeksu każdego elementu.</span><span class="sxs-lookup"><span data-stu-id="994a2-1669">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Select%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2C%60%601%7D%29> to project over a sequence of values and use the index of each element.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#76](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#76)]
 [!code-vb[System.Linq.Enumerable#76](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#76)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-1670"><paramref name="source" />lub <paramref name="selector" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1670"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Select&lt;TSource,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; Select&lt;TSource,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TResult&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; Select&lt;TSource, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TResult&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Select(Of TSource, TResult) (source As IEnumerable(Of TSource), selector As Func(Of TSource, TResult)) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ Select(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TResult&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Select : seq&lt;'Source&gt; * Func&lt;'Source, 'Result&gt; -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.Select (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-1671">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1671">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="994a2-1672">Typ wartości zwracanej przez <paramref name="selector" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1672">The type of the value returned by <paramref name="selector" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-1673">Sekwencja wartości do wywołania funkcji transformacji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1673">A sequence of values to invoke a transform function on.</span></span></param>
        <param name="selector"><span data-ttu-id="994a2-1674">Funkcja transformacji do zastosowania do każdego elementu.</span><span class="sxs-lookup"><span data-stu-id="994a2-1674">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="994a2-1675">Projektuje każdy element sekwencji w nowym formularzu.</span><span class="sxs-lookup"><span data-stu-id="994a2-1675">Projects each element of a sequence into a new form.</span></span></summary>
        <returns><span data-ttu-id="994a2-1676">Których elementy są wynikiem wywołania funkcji Transform dla każdego <paramref name="source" />elementu. <see cref="T:System.Collections.Generic.IEnumerable`1" /></span><span class="sxs-lookup"><span data-stu-id="994a2-1676">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements are the result of invoking the transform function on each element of <paramref name="source" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-1677">Ta metoda jest implementowana za pomocą odroczonego wykonania.</span><span class="sxs-lookup"><span data-stu-id="994a2-1677">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="994a2-1678">Bezpośrednio zwracana wartość jest obiektem, który przechowuje wszystkie informacje wymagane do wykonania akcji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1678">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="994a2-1679">Zapytanie reprezentowane przez tę metodę nie jest wykonywane `GetEnumerator` do momentu wyliczenia obiektu przez wywołanie jego metody bezpośrednio lub przy użyciu `foreach` w wizualizacji C# lub `For Each` w Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="994a2-1679">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="994a2-1680">Ta metoda projekcji wymaga funkcji `selector`Transform, w celu utworzenia jednej wartości dla każdej wartości w `source`sekwencji źródłowej.</span><span class="sxs-lookup"><span data-stu-id="994a2-1680">This projection method requires the transform function, `selector`, to produce one value for each value in the source sequence, `source`.</span></span> <span data-ttu-id="994a2-1681">Jeśli `selector` zwraca wartość, która jest sama kolekcją, to odbiorca przejdzie ręcznie przechodzenie sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1681">If `selector` returns a value that is itself a collection, it is up to the consumer to traverse the subsequences manually.</span></span> <span data-ttu-id="994a2-1682">W takiej sytuacji lepszym rozwiązaniem może być zwrócenie pojedynczej połączonej sekwencji wartości przez zapytanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-1682">In such a situation, it might be better for your query to return a single coalesced sequence of values.</span></span> <span data-ttu-id="994a2-1683">Aby to osiągnąć, użyj <xref:System.Linq.Enumerable.SelectMany%2A> metody <xref:System.Linq.Enumerable.Select%2A>zamiast.</span><span class="sxs-lookup"><span data-stu-id="994a2-1683">To achieve this, use the <xref:System.Linq.Enumerable.SelectMany%2A> method instead of <xref:System.Linq.Enumerable.Select%2A>.</span></span> <span data-ttu-id="994a2-1684">Chociaż `SelectMany` działa podobnie do `Select`, różni się w tym, że funkcja Transform zwraca kolekcję, która jest następnie rozszerzana przez `SelectMany` przed zwróceniem.</span><span class="sxs-lookup"><span data-stu-id="994a2-1684">Although `SelectMany` works similarly to `Select`, it differs in that the transform function returns a collection that is then expanded by `SelectMany` before it is returned.</span></span>  
  
 <span data-ttu-id="994a2-1685">W `select` składni wyrażenia zapytania, klauzula (wizualizacja C#) `Select` lub (Visual Basic) <xref:System.Linq.Enumerable.Select%2A>tłumaczy na wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-1685">In query expression syntax, a `select` (Visual C#) or `Select` (Visual Basic) clause translates to an invocation of <xref:System.Linq.Enumerable.Select%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-1686">Poniższy przykład kodu demonstruje, jak używać <xref:System.Linq.Enumerable.Select%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29> do tworzenia projektów przez sekwencję wartości.</span><span class="sxs-lookup"><span data-stu-id="994a2-1686">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Select%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29> to project over a sequence of values.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#75](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#75)]
 [!code-vb[System.Linq.Enumerable#75](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#75)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-1687"><paramref name="source" />lub <paramref name="selector" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1687"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/csharp/language-reference/keywords/select-clause.md"><span data-ttu-id="994a2-1688">select — Klauzula (odwołanie w C#)</span><span class="sxs-lookup"><span data-stu-id="994a2-1688">select clause (C# Reference)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/select-clause.md"><span data-ttu-id="994a2-1689">Select — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-1689">Select Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="SelectMany&lt;TSource,TResult&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="994a2-1690">Projektuje każdy element sekwencji do <see cref="T:System.Collections.Generic.IEnumerable`1" /> i spłaszcza wyniki sekwencji w jedną sekwencję.</span><span class="sxs-lookup"><span data-stu-id="994a2-1690">Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1" /> and flattens the resulting sequences into one sequence.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SelectMany&lt;TSource,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; SelectMany&lt;TSource,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,System.Collections.Generic.IEnumerable&lt;TResult&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; SelectMany&lt;TSource, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SelectMany(Of TSource, TResult) (source As IEnumerable(Of TSource), selector As Func(Of TSource, IEnumerable(Of TResult))) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ SelectMany(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, System::Collections::Generic::IEnumerable&lt;TResult&gt; ^&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member SelectMany : seq&lt;'Source&gt; * Func&lt;'Source, seq&lt;'Result&gt;&gt; -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.SelectMany (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Collections.Generic.IEnumerable&lt;TResult&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-1691">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1691">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="994a2-1692">Typ elementów sekwencji zwracanych przez <paramref name="selector" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1692">The type of the elements of the sequence returned by <paramref name="selector" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-1693">Sekwencja wartości do projektu.</span><span class="sxs-lookup"><span data-stu-id="994a2-1693">A sequence of values to project.</span></span></param>
        <param name="selector"><span data-ttu-id="994a2-1694">Funkcja transformacji do zastosowania do każdego elementu.</span><span class="sxs-lookup"><span data-stu-id="994a2-1694">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="994a2-1695">Projektuje każdy element sekwencji do <see cref="T:System.Collections.Generic.IEnumerable`1" /> i spłaszcza wyniki sekwencji w jedną sekwencję.</span><span class="sxs-lookup"><span data-stu-id="994a2-1695">Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1" /> and flattens the resulting sequences into one sequence.</span></span></summary>
        <returns><span data-ttu-id="994a2-1696"><see cref="T:System.Collections.Generic.IEnumerable`1" /> Którego elementy są wynikiem wywołania funkcji przekształcenia jeden do wielu na każdym elemencie sekwencji wejściowej.</span><span class="sxs-lookup"><span data-stu-id="994a2-1696">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements are the result of invoking the one-to-many transform function on each element of the input sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-1697">Ta metoda jest implementowana za pomocą odroczonego wykonania.</span><span class="sxs-lookup"><span data-stu-id="994a2-1697">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="994a2-1698">Bezpośrednio zwracana wartość jest obiektem, który przechowuje wszystkie informacje wymagane do wykonania akcji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1698">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="994a2-1699">Zapytanie reprezentowane przez tę metodę nie jest wykonywane `GetEnumerator` do momentu wyliczenia obiektu przez wywołanie jego metody bezpośrednio lub przy użyciu `foreach` w wizualizacji C# lub `For Each` w Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="994a2-1699">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="994a2-1700">Metoda wylicza sekwencję wejściową, używa funkcji Transform do mapowania każdego elementu <xref:System.Collections.Generic.IEnumerable%601>na, a następnie wylicza i zwraca elementy każdego takiego <xref:System.Collections.Generic.IEnumerable%601> obiektu. <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29></span><span class="sxs-lookup"><span data-stu-id="994a2-1700">The <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> method enumerates the input sequence, uses a transform function to map each element to an <xref:System.Collections.Generic.IEnumerable%601>, and then enumerates and yields the elements of each such <xref:System.Collections.Generic.IEnumerable%601> object.</span></span> <span data-ttu-id="994a2-1701">Oznacza to, że dla każdego elementu `source`, `selector` jest wywoływana i zwracana jest sekwencja wartości.</span><span class="sxs-lookup"><span data-stu-id="994a2-1701">That is, for each element of `source`, `selector` is invoked and a sequence of values is returned.</span></span> <span data-ttu-id="994a2-1702"><xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29>następnie spłaszcza te dwuwymiarowe kolekcje kolekcji do jednowymiarowej <xref:System.Collections.Generic.IEnumerable%601> i zwraca ją.</span><span class="sxs-lookup"><span data-stu-id="994a2-1702"><xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> then flattens this two-dimensional collection of collections into a one-dimensional <xref:System.Collections.Generic.IEnumerable%601> and returns it.</span></span> <span data-ttu-id="994a2-1703">Na przykład <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> , jeśli zapytanie używa do uzyskania zamówień (typu `Order`) dla każdego klienta w bazie danych, wynik jest typu `IEnumerable<Order>` w C# lub `IEnumerable(Of Order)` Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="994a2-1703">For example, if a query uses <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> to obtain the orders (of type `Order`) for each customer in a database, the result is of type `IEnumerable<Order>` in C# or `IEnumerable(Of Order)` in Visual Basic.</span></span> <span data-ttu-id="994a2-1704">Jeśli zamiast tego zapytanie jest <xref:System.Linq.Enumerable.Select%2A> stosowane do uzyskiwania zamówień, kolekcja kolekcji zamówień nie jest łączona, a wynik jest typu `IEnumerable<List<Order>>` in C# lub `IEnumerable(Of List(Of Order))` w Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="994a2-1704">If instead the query uses <xref:System.Linq.Enumerable.Select%2A> to obtain the orders, the collection of collections of orders is not combined and the result is of type `IEnumerable<List<Order>>` in C# or `IEnumerable(Of List(Of Order))` in Visual Basic.</span></span>  
  
 <span data-ttu-id="994a2-1705">W `from` składni wyrażenia zapytania Każda klauzula (wizualizacja C#) lub `From` klauzula (Visual Basic) po początkowej tabeli zostanie <xref:System.Linq.Enumerable.SelectMany%2A>przetłumaczy na wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-1705">In query expression syntax, each `from` clause (Visual C#) or `From` clause (Visual Basic) after the initial one translates to an invocation of <xref:System.Linq.Enumerable.SelectMany%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-1706">Poniższy przykład kodu demonstruje, jak używać <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> do wykonywania projekcji "jeden do wielu" na tablicy.</span><span class="sxs-lookup"><span data-stu-id="994a2-1706">The following code example demonstrates how to use <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> to perform a one-to-many projection over an array.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#77](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#77)]
 [!code-vb[System.Linq.Enumerable#77](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#77)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-1707"><paramref name="source" />lub <paramref name="selector" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1707"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/csharp/language-reference/keywords/from-clause.md"><span data-ttu-id="994a2-1708">Klauzula From (odwołanie w C#)</span><span class="sxs-lookup"><span data-stu-id="994a2-1708">from clause (C# Reference)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/from-clause.md"><span data-ttu-id="994a2-1709">From — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-1709">From Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="SelectMany&lt;TSource,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; SelectMany&lt;TSource,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,int,System.Collections.Generic.IEnumerable&lt;TResult&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; SelectMany&lt;TSource, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`3&lt;!!TSource, int32, class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SelectMany(Of TSource, TResult) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Integer, IEnumerable(Of TResult))) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ SelectMany(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, int, System::Collections::Generic::IEnumerable&lt;TResult&gt; ^&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member SelectMany : seq&lt;'Source&gt; * Func&lt;'Source, int, seq&lt;'Result&gt;&gt; -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.SelectMany (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Int32,System.Collections.Generic.IEnumerable&lt;TResult&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-1710">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1710">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="994a2-1711">Typ elementów sekwencji zwracanych przez <paramref name="selector" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1711">The type of the elements of the sequence returned by <paramref name="selector" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-1712">Sekwencja wartości do projektu.</span><span class="sxs-lookup"><span data-stu-id="994a2-1712">A sequence of values to project.</span></span></param>
        <param name="selector"><span data-ttu-id="994a2-1713">Funkcja transformacji do zastosowania do każdego elementu źródłowego; drugi parametr funkcji reprezentuje indeks elementu źródłowego.</span><span class="sxs-lookup"><span data-stu-id="994a2-1713">A transform function to apply to each source element; the second parameter of the function represents the index of the source element.</span></span></param>
        <summary><span data-ttu-id="994a2-1714">Projektuje każdy element sekwencji do <see cref="T:System.Collections.Generic.IEnumerable`1" />i spłaszcza wyniki sekwencji w jedną sekwencję.</span><span class="sxs-lookup"><span data-stu-id="994a2-1714">Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1" />, and flattens the resulting sequences into one sequence.</span></span> <span data-ttu-id="994a2-1715">Indeks każdego elementu źródłowego jest używany w przewidywanej formie tego elementu.</span><span class="sxs-lookup"><span data-stu-id="994a2-1715">The index of each source element is used in the projected form of that element.</span></span></summary>
        <returns><span data-ttu-id="994a2-1716">Element <see cref="T:System.Collections.Generic.IEnumerable`1" /> , którego elementy są wynikiem wywołania funkcji przekształcania "jeden do wielu" na każdym elemencie sekwencji wejściowej.</span><span class="sxs-lookup"><span data-stu-id="994a2-1716">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements are the result of invoking the one-to-many transform function on each element of an input sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-1717">Ta metoda jest implementowana za pomocą odroczonego wykonania.</span><span class="sxs-lookup"><span data-stu-id="994a2-1717">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="994a2-1718">Bezpośrednio zwracana wartość jest obiektem, który przechowuje wszystkie informacje wymagane do wykonania akcji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1718">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="994a2-1719">Zapytanie reprezentowane przez tę metodę nie jest wykonywane `GetEnumerator` do momentu wyliczenia obiektu przez wywołanie jego metody bezpośrednio lub przy użyciu `foreach` w wizualizacji C# lub `For Each` w Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="994a2-1719">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="994a2-1720">Metoda wylicza sekwencję wejściową, używa funkcji Transform do mapowania każdego elementu <xref:System.Collections.Generic.IEnumerable%601>na, a następnie wylicza i zwraca elementy każdego takiego <xref:System.Collections.Generic.IEnumerable%601> obiektu. <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29></span><span class="sxs-lookup"><span data-stu-id="994a2-1720">The <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> method enumerates the input sequence, uses a transform function to map each element to an <xref:System.Collections.Generic.IEnumerable%601>, and then enumerates and yields the elements of each such <xref:System.Collections.Generic.IEnumerable%601> object.</span></span> <span data-ttu-id="994a2-1721">Oznacza to, że dla każdego elementu `source`, `selector` jest wywoływana i zwracana jest sekwencja wartości.</span><span class="sxs-lookup"><span data-stu-id="994a2-1721">That is, for each element of `source`, `selector` is invoked and a sequence of values is returned.</span></span> <span data-ttu-id="994a2-1722"><xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29>następnie spłaszcza te dwuwymiarowe kolekcje kolekcji do jednowymiarowej <xref:System.Collections.Generic.IEnumerable%601> i zwraca ją.</span><span class="sxs-lookup"><span data-stu-id="994a2-1722"><xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> then flattens this two-dimensional collection of collections into a one-dimensional <xref:System.Collections.Generic.IEnumerable%601> and returns it.</span></span> <span data-ttu-id="994a2-1723">Na przykład <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> , jeśli zapytanie używa do uzyskania zamówień (typu `Order`) dla każdego klienta w bazie danych, wynik jest typu `IEnumerable<Order>` w C# lub `IEnumerable(Of Order)` Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="994a2-1723">For example, if a query uses <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> to obtain the orders (of type `Order`) for each customer in a database, the result is of type `IEnumerable<Order>` in C# or `IEnumerable(Of Order)` in Visual Basic.</span></span> <span data-ttu-id="994a2-1724">Jeśli zamiast tego zapytanie jest <xref:System.Linq.Enumerable.Select%2A> stosowane do uzyskiwania zamówień, kolekcja kolekcji zamówień nie jest łączona, a wynik jest typu `IEnumerable<List<Order>>` in C# lub `IEnumerable(Of List(Of Order))` w Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="994a2-1724">If instead the query uses <xref:System.Linq.Enumerable.Select%2A> to obtain the orders, the collection of collections of orders is not combined and the result is of type `IEnumerable<List<Order>>` in C# or `IEnumerable(Of List(Of Order))` in Visual Basic.</span></span>  
  
 <span data-ttu-id="994a2-1725">Pierwszy argument `selector` reprezentujący element do przetworzenia.</span><span class="sxs-lookup"><span data-stu-id="994a2-1725">The first argument to `selector` represents the element to process.</span></span> <span data-ttu-id="994a2-1726">Drugi argument `selector` reprezentujący liczony od zera indeks tego elementu w sekwencji źródłowej.</span><span class="sxs-lookup"><span data-stu-id="994a2-1726">The second argument to `selector` represents the zero-based index of that element in the source sequence.</span></span> <span data-ttu-id="994a2-1727">Może to być przydatne, jeśli elementy znajdują się w znanej kolejności i chcesz wykonać coś z elementem w określonym indeksie, na przykład.</span><span class="sxs-lookup"><span data-stu-id="994a2-1727">This can be useful if the elements are in a known order and you want to do something with an element at a particular index, for example.</span></span> <span data-ttu-id="994a2-1728">Może być również przydatna, jeśli chcesz pobrać indeks jednego lub większej liczby elementów.</span><span class="sxs-lookup"><span data-stu-id="994a2-1728">It can also be useful if you want to retrieve the index of one or more elements.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-1729">Poniższy przykład kodu demonstruje, jak używać <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> do wykonywania projekcji jeden do wielu na tablicy i używania indeksu każdego elementu zewnętrznego.</span><span class="sxs-lookup"><span data-stu-id="994a2-1729">The following code example demonstrates how to use <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> to perform a one-to-many projection over an array and use the index of each outer element.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#78](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#78)]
 [!code-vb[System.Linq.Enumerable#78](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#78)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-1730"><paramref name="source" />lub <paramref name="selector" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1730"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SelectMany&lt;TSource,TCollection,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; SelectMany&lt;TSource,TCollection,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,System.Collections.Generic.IEnumerable&lt;TCollection&gt;&gt; collectionSelector, Func&lt;TSource,TCollection,TResult&gt; resultSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; SelectMany&lt;TSource, TCollection, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, class System.Collections.Generic.IEnumerable`1&lt;!!TCollection&gt;&gt; collectionSelector, class System.Func`3&lt;!!TSource, !!TCollection, !!TResult&gt; resultSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SelectMany(Of TSource, TCollection, TResult) (source As IEnumerable(Of TSource), collectionSelector As Func(Of TSource, IEnumerable(Of TCollection)), resultSelector As Func(Of TSource, TCollection, TResult)) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TCollection, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ SelectMany(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, System::Collections::Generic::IEnumerable&lt;TCollection&gt; ^&gt; ^ collectionSelector, Func&lt;TSource, TCollection, TResult&gt; ^ resultSelector);" />
      <MemberSignature Language="F#" Value="static member SelectMany : seq&lt;'Source&gt; * Func&lt;'Source, seq&lt;'Collection&gt;&gt; * Func&lt;'Source, 'Collection, 'Result&gt; -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.SelectMany (source, collectionSelector, resultSelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TCollection" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="collectionSelector" Type="System.Func&lt;TSource,System.Collections.Generic.IEnumerable&lt;TCollection&gt;&gt;" />
        <Parameter Name="resultSelector" Type="System.Func&lt;TSource,TCollection,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-1731">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1731">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TCollection"><span data-ttu-id="994a2-1732">Typ elementów pośrednich zbieranych przez <paramref name="collectionSelector" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1732">The type of the intermediate elements collected by <paramref name="collectionSelector" />.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="994a2-1733">Typ elementów wyniku sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1733">The type of the elements of the resulting sequence.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-1734">Sekwencja wartości do projektu.</span><span class="sxs-lookup"><span data-stu-id="994a2-1734">A sequence of values to project.</span></span></param>
        <param name="collectionSelector"><span data-ttu-id="994a2-1735">Funkcja transformacji do zastosowania do każdego elementu sekwencji wejściowej.</span><span class="sxs-lookup"><span data-stu-id="994a2-1735">A transform function to apply to each element of the input sequence.</span></span></param>
        <param name="resultSelector"><span data-ttu-id="994a2-1736">Funkcja transformacji do zastosowania do każdego elementu sekwencji pośredniej.</span><span class="sxs-lookup"><span data-stu-id="994a2-1736">A transform function to apply to each element of the intermediate sequence.</span></span></param>
        <summary><span data-ttu-id="994a2-1737">Projektuje każdy element sekwencji do <see cref="T:System.Collections.Generic.IEnumerable`1" />, spłaszcza wynikowe sekwencje w jedną sekwencję i wywołuje funkcję selektora wyników dla każdego elementu w nim.</span><span class="sxs-lookup"><span data-stu-id="994a2-1737">Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1" />, flattens the resulting sequences into one sequence, and invokes a result selector function on each element therein.</span></span></summary>
        <returns><span data-ttu-id="994a2-1738">Których elementy są wynikiem wywołania funkcji <paramref name="collectionSelector" /> przekształcenia jeden do wielu dla każdego elementu <paramref name="source" /> , a następnie mapowania poszczególnych elementów sekwencji i ich odpowiedniego elementu źródłowego do elementu wynik. <see cref="T:System.Collections.Generic.IEnumerable`1" /></span><span class="sxs-lookup"><span data-stu-id="994a2-1738">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements are the result of invoking the one-to-many transform function <paramref name="collectionSelector" /> on each element of <paramref name="source" /> and then mapping each of those sequence elements and their corresponding source element to a result element.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-1739">Ta metoda jest implementowana za pomocą odroczonego wykonania.</span><span class="sxs-lookup"><span data-stu-id="994a2-1739">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="994a2-1740">Bezpośrednio zwracana wartość jest obiektem, który przechowuje wszystkie informacje wymagane do wykonania akcji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1740">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="994a2-1741">Zapytanie reprezentowane przez tę metodę nie jest wykonywane `GetEnumerator` do momentu wyliczenia obiektu przez wywołanie jego metody bezpośrednio lub przy użyciu `foreach` w wizualizacji C# lub `For Each` w Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="994a2-1741">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="994a2-1742">Metoda jest przydatna, gdy trzeba zachować `source` elementy w zakresie dla logiki zapytań, która <xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29>występuje po wywołaniu. <xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29></span><span class="sxs-lookup"><span data-stu-id="994a2-1742">The <xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29> method is useful when you have to keep the elements of `source` in scope for query logic that occurs after the call to <xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29>.</span></span> <span data-ttu-id="994a2-1743">Zapoznaj się z przykładową sekcją przykładu kodu.</span><span class="sxs-lookup"><span data-stu-id="994a2-1743">See the Example section for a code example.</span></span> <span data-ttu-id="994a2-1744">Jeśli istnieje relacja dwukierunkowa między obiektami typu `TSource` i obiektów typu `TCollection`, oznacza to, że jeśli obiekt typu `TCollection` zawiera właściwość do pobrania `TSource` obiektu, który go wygenerował, nie jest potrzebny Przeciążenie elementu <xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29>.</span><span class="sxs-lookup"><span data-stu-id="994a2-1744">If there is a bidirectional relationship between objects of type `TSource` and objects of type `TCollection`, that is, if an object of type `TCollection` provides a property to retrieve the `TSource` object that produced it, you do not need this overload of <xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29>.</span></span> <span data-ttu-id="994a2-1745">Zamiast tego można użyć <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> i przejść `TSource` z powrotem do obiektu za pomocą `TCollection` obiektu.</span><span class="sxs-lookup"><span data-stu-id="994a2-1745">Instead, you can use <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> and navigate back to the `TSource` object through the `TCollection` object.</span></span>  
  
 <span data-ttu-id="994a2-1746">W `from` składni wyrażenia zapytania Każda klauzula (wizualizacja C#) lub `From` klauzula (Visual Basic) po początkowej tabeli zostanie <xref:System.Linq.Enumerable.SelectMany%2A>przetłumaczy na wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-1746">In query expression syntax, each `from` clause (Visual C#) or `From` clause (Visual Basic) after the initial one translates to an invocation of <xref:System.Linq.Enumerable.SelectMany%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-1747">Poniższy przykład kodu demonstruje, jak używać <xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29> do wykonywania projekcji jeden do wielu na tablicy i używania funkcji selektora wyników, aby zachować każdy odpowiadający element z sekwencji źródłowej w zakresie dla ostatniego `Select`wywołania.</span><span class="sxs-lookup"><span data-stu-id="994a2-1747">The following code example demonstrates how to use <xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29> to perform a one-to-many projection over an array and use a result selector function to keep each corresponding element from the source sequence in scope for the final call to `Select`.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#124](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#124)]
 [!code-vb[System.Linq.Enumerable#124](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#124)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-1748"><paramref name="source" />or <paramref name="collectionSelector" /> lub <paramref name="resultSelector" /> is .<see langword="null" /></span><span class="sxs-lookup"><span data-stu-id="994a2-1748"><paramref name="source" /> or <paramref name="collectionSelector" /> or <paramref name="resultSelector" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/csharp/language-reference/keywords/from-clause.md"><span data-ttu-id="994a2-1749">Klauzula From (odwołanie w C#)</span><span class="sxs-lookup"><span data-stu-id="994a2-1749">from clause (C# Reference)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/from-clause.md"><span data-ttu-id="994a2-1750">From — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-1750">From Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="SelectMany&lt;TSource,TCollection,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; SelectMany&lt;TSource,TCollection,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,int,System.Collections.Generic.IEnumerable&lt;TCollection&gt;&gt; collectionSelector, Func&lt;TSource,TCollection,TResult&gt; resultSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; SelectMany&lt;TSource, TCollection, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`3&lt;!!TSource, int32, class System.Collections.Generic.IEnumerable`1&lt;!!TCollection&gt;&gt; collectionSelector, class System.Func`3&lt;!!TSource, !!TCollection, !!TResult&gt; resultSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SelectMany(Of TSource, TCollection, TResult) (source As IEnumerable(Of TSource), collectionSelector As Func(Of TSource, Integer, IEnumerable(Of TCollection)), resultSelector As Func(Of TSource, TCollection, TResult)) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TCollection, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ SelectMany(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, int, System::Collections::Generic::IEnumerable&lt;TCollection&gt; ^&gt; ^ collectionSelector, Func&lt;TSource, TCollection, TResult&gt; ^ resultSelector);" />
      <MemberSignature Language="F#" Value="static member SelectMany : seq&lt;'Source&gt; * Func&lt;'Source, int, seq&lt;'Collection&gt;&gt; * Func&lt;'Source, 'Collection, 'Result&gt; -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.SelectMany (source, collectionSelector, resultSelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TCollection" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="collectionSelector" Type="System.Func&lt;TSource,System.Int32,System.Collections.Generic.IEnumerable&lt;TCollection&gt;&gt;" />
        <Parameter Name="resultSelector" Type="System.Func&lt;TSource,TCollection,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-1751">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1751">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TCollection"><span data-ttu-id="994a2-1752">Typ elementów pośrednich zbieranych przez <paramref name="collectionSelector" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1752">The type of the intermediate elements collected by <paramref name="collectionSelector" />.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="994a2-1753">Typ elementów wyniku sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1753">The type of the elements of the resulting sequence.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-1754">Sekwencja wartości do projektu.</span><span class="sxs-lookup"><span data-stu-id="994a2-1754">A sequence of values to project.</span></span></param>
        <param name="collectionSelector"><span data-ttu-id="994a2-1755">Funkcja transformacji do zastosowania do każdego elementu źródłowego; drugi parametr funkcji reprezentuje indeks elementu źródłowego.</span><span class="sxs-lookup"><span data-stu-id="994a2-1755">A transform function to apply to each source element; the second parameter of the function represents the index of the source element.</span></span></param>
        <param name="resultSelector"><span data-ttu-id="994a2-1756">Funkcja transformacji do zastosowania do każdego elementu sekwencji pośredniej.</span><span class="sxs-lookup"><span data-stu-id="994a2-1756">A transform function to apply to each element of the intermediate sequence.</span></span></param>
        <summary><span data-ttu-id="994a2-1757">Projektuje każdy element sekwencji do <see cref="T:System.Collections.Generic.IEnumerable`1" />, spłaszcza wynikowe sekwencje w jedną sekwencję i wywołuje funkcję selektora wyników dla każdego elementu w nim.</span><span class="sxs-lookup"><span data-stu-id="994a2-1757">Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1" />, flattens the resulting sequences into one sequence, and invokes a result selector function on each element therein.</span></span> <span data-ttu-id="994a2-1758">Indeks każdego elementu źródłowego jest używany w pośredniej formie projektu tego elementu.</span><span class="sxs-lookup"><span data-stu-id="994a2-1758">The index of each source element is used in the intermediate projected form of that element.</span></span></summary>
        <returns><span data-ttu-id="994a2-1759">Których elementy są wynikiem wywołania funkcji <paramref name="collectionSelector" /> przekształcenia jeden do wielu dla każdego elementu <paramref name="source" /> , a następnie mapowania poszczególnych elementów sekwencji i ich odpowiedniego elementu źródłowego do elementu wynik. <see cref="T:System.Collections.Generic.IEnumerable`1" /></span><span class="sxs-lookup"><span data-stu-id="994a2-1759">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements are the result of invoking the one-to-many transform function <paramref name="collectionSelector" /> on each element of <paramref name="source" /> and then mapping each of those sequence elements and their corresponding source element to a result element.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-1760">Ta metoda jest implementowana za pomocą odroczonego wykonania.</span><span class="sxs-lookup"><span data-stu-id="994a2-1760">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="994a2-1761">Bezpośrednio zwracana wartość jest obiektem, który przechowuje wszystkie informacje wymagane do wykonania akcji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1761">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="994a2-1762">Zapytanie reprezentowane przez tę metodę nie jest wykonywane `GetEnumerator` do momentu wyliczenia obiektu przez wywołanie jego metody bezpośrednio lub przy użyciu `foreach` w wizualizacji C# lub `For Each` w Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="994a2-1762">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="994a2-1763">Metoda jest przydatna, gdy trzeba zachować `source` elementy w zakresie dla logiki zapytań, która <xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29>występuje po wywołaniu. <xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29></span><span class="sxs-lookup"><span data-stu-id="994a2-1763">The <xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29> method is useful when you have to keep the elements of `source` in scope for query logic that occurs after the call to <xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29>.</span></span> <span data-ttu-id="994a2-1764">Zapoznaj się z przykładową sekcją przykładu kodu.</span><span class="sxs-lookup"><span data-stu-id="994a2-1764">See the Example section for a code example.</span></span> <span data-ttu-id="994a2-1765">Jeśli istnieje relacja dwukierunkowa między obiektami typu `TSource` i obiektów typu `TCollection`, oznacza to, że jeśli obiekt typu `TCollection` zawiera właściwość do pobrania `TSource` obiektu, który go wygenerował, nie jest potrzebny Przeciążenie elementu <xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29>.</span><span class="sxs-lookup"><span data-stu-id="994a2-1765">If there is a bidirectional relationship between objects of type `TSource` and objects of type `TCollection`, that is, if an object of type `TCollection` provides a property to retrieve the `TSource` object that produced it, you do not need this overload of <xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29>.</span></span> <span data-ttu-id="994a2-1766">Zamiast tego można użyć <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> i przejść `TSource` z powrotem do obiektu za pomocą `TCollection` obiektu.</span><span class="sxs-lookup"><span data-stu-id="994a2-1766">Instead, you can use <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> and navigate back to the `TSource` object through the `TCollection` object.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-1767"><paramref name="source" />or <paramref name="collectionSelector" /> lub <paramref name="resultSelector" /> is .<see langword="null" /></span><span class="sxs-lookup"><span data-stu-id="994a2-1767"><paramref name="source" /> or <paramref name="collectionSelector" /> or <paramref name="resultSelector" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="SequenceEqual&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="994a2-1768">Określa, czy dwie sekwencje są równe, zgodnie z ustawieniami porównania równości.</span><span class="sxs-lookup"><span data-stu-id="994a2-1768">Determines whether two sequences are equal according to an equality comparer.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SequenceEqual&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static bool SequenceEqual&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; first, System.Collections.Generic.IEnumerable&lt;TSource&gt; second);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SequenceEqual&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; first, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; second) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SequenceEqual(Of TSource) (first As IEnumerable(Of TSource), second As IEnumerable(Of TSource)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool SequenceEqual(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ first, System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ second);" />
      <MemberSignature Language="F#" Value="static member SequenceEqual : seq&lt;'Source&gt; * seq&lt;'Source&gt; -&gt; bool" Usage="System.Linq.Enumerable.SequenceEqual (first, second)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="first" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="second" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-1769">Typ elementów sekwencji wejściowych.</span><span class="sxs-lookup"><span data-stu-id="994a2-1769">The type of the elements of the input sequences.</span></span></typeparam>
        <param name="first"><span data-ttu-id="994a2-1770">Do porównania z <paramref name="second" />. <see cref="T:System.Collections.Generic.IEnumerable`1" /></span><span class="sxs-lookup"><span data-stu-id="994a2-1770">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to compare to <paramref name="second" />.</span></span></param>
        <param name="second"><span data-ttu-id="994a2-1771"><see cref="T:System.Collections.Generic.IEnumerable`1" /> Do porównania z pierwszą sekwencją.</span><span class="sxs-lookup"><span data-stu-id="994a2-1771">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to compare to the first sequence.</span></span></param>
        <summary><span data-ttu-id="994a2-1772">Określa, czy dwie sekwencje są równe, porównując elementy przy użyciu domyślnej funkcji porównującej równość dla ich typu.</span><span class="sxs-lookup"><span data-stu-id="994a2-1772">Determines whether two sequences are equal by comparing the elements by using the default equality comparer for their type.</span></span></summary>
        <returns><span data-ttu-id="994a2-1773"><see langword="true" />Jeśli dwie sekwencje źródłowe mają równą długość i odpowiadające im elementy są równe domyślnej wartości porównującej równości dla ich typu; w przeciwnym razie. <see langword="false" /></span><span class="sxs-lookup"><span data-stu-id="994a2-1773"><see langword="true" /> if the two source sequences are of equal length and their corresponding elements are equal according to the default equality comparer for their type; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-1774">Metoda wylicza dwie sekwencje źródłowe równolegle i porównuje odpowiadające im elementy przy użyciu domyślnej funkcji porównującej `TSource`równość dla, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>. `SequenceEqual<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)`</span><span class="sxs-lookup"><span data-stu-id="994a2-1774">The `SequenceEqual<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)` method enumerates the two source sequences in parallel and compares corresponding elements by using the default equality comparer for `TSource`, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>.</span></span> 

 <span data-ttu-id="994a2-1775">Domyślna funkcja porównująca <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>równość jest używana do porównywania wartości typów.</span><span class="sxs-lookup"><span data-stu-id="994a2-1775">The default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare values of the types.</span></span> <span data-ttu-id="994a2-1776">Aby porównać niestandardowy typ danych, należy zastąpić <xref:System.Object.Equals%2A> <xref:System.Object.GetHashCode%2A> metody i i opcjonalnie zaimplementować <xref:System.IEquatable%601> interfejs generyczny w typie niestandardowym.</span><span class="sxs-lookup"><span data-stu-id="994a2-1776">To compare a custom data type, you need to override the <xref:System.Object.Equals%2A> and the <xref:System.Object.GetHashCode%2A> methods, and optionally implement the <xref:System.IEquatable%601> generic interface in the custom type.</span></span> <span data-ttu-id="994a2-1777">Aby uzyskać więcej informacji, zobacz <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> właściwość.</span><span class="sxs-lookup"><span data-stu-id="994a2-1777">For more information, see the <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> property.</span></span>
  
## Examples  
 <span data-ttu-id="994a2-1778">Poniższy przykład kodu pokazuje, jak użyć `SequenceEqual<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)` , aby określić, czy dwie sekwencje są równe.</span><span class="sxs-lookup"><span data-stu-id="994a2-1778">The following code examples demonstrate how to use `SequenceEqual<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)` to determine whether two sequences are equal.</span></span> <span data-ttu-id="994a2-1779">W pierwszych dwóch przykładach Metoda określa, czy porównywane sekwencje zawierają odwołania do tych samych obiektów.</span><span class="sxs-lookup"><span data-stu-id="994a2-1779">In the first two examples, the method determines whether the compared sequences contain references to the same objects.</span></span> <span data-ttu-id="994a2-1780">W trzecim i czwartym przykładzie metoda porównuje rzeczywiste dane obiektów w ramach sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1780">In the third and fourth examples, the method compares the actual data of the objects within the sequences.</span></span>  
  
 <span data-ttu-id="994a2-1781">W tym przykładzie sekwencje są równe.</span><span class="sxs-lookup"><span data-stu-id="994a2-1781">In this example the sequences are equal.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#32](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#32)]
 [!code-vb[System.Linq.Enumerable#32](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#32)]  
  
 <span data-ttu-id="994a2-1782">Poniższy przykład kodu porównuje dwie sekwencje, które nie są równe.</span><span class="sxs-lookup"><span data-stu-id="994a2-1782">The following code example compares two sequences that are not equal.</span></span> <span data-ttu-id="994a2-1783">Należy zauważyć, że sekwencje zawierają identyczne dane, ale ponieważ obiekty, które zawierają różne odwołania, sekwencje nie są uważane za równe.</span><span class="sxs-lookup"><span data-stu-id="994a2-1783">Note that the sequences contain identical data, but because the objects that they contain have different references, the sequences are not considered equal.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#33](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#33)]
 [!code-vb[System.Linq.Enumerable#33](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#33)]  
  
 <span data-ttu-id="994a2-1784">Jeśli chcesz porównać rzeczywiste dane obiektów w sekwencjach zamiast porównywania ich odwołań, musisz zaimplementować <xref:System.Collections.Generic.IEqualityComparer%601> interfejs generyczny w klasie.</span><span class="sxs-lookup"><span data-stu-id="994a2-1784">If you want to compare the actual data of the objects in the sequences instead of just comparing their references, you have to implement the <xref:System.Collections.Generic.IEqualityComparer%601> generic interface in your class.</span></span> <span data-ttu-id="994a2-1785">Poniższy przykład kodu pokazuje, jak zaimplementować ten interfejs w klasie pomocnika i dostarczać <xref:System.Object.GetHashCode%2A> metody <xref:System.Object.Equals%2A> i.</span><span class="sxs-lookup"><span data-stu-id="994a2-1785">The following code example shows how to implement this interface in a helper class and provide <xref:System.Object.GetHashCode%2A> and <xref:System.Object.Equals%2A> methods.</span></span>  
  
 [!code-csharp[CSLINQEncapsulatedComparer#9](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/CS/EncapsulatedComparer.cs#9)]  
 [!code-vb[CSLINQEncapsulatedComparer#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/VB/EncapsulatedComparer.vb#9)]  

 <span data-ttu-id="994a2-1786">Po zaimplementowaniu tego interfejsu można użyć sekwencji `ProductA` obiektów `SequenceEqual<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)` w metodzie, jak pokazano w następującym przykładzie:</span><span class="sxs-lookup"><span data-stu-id="994a2-1786">After you implement this interface, you can use sequences of `ProductA` objects in the `SequenceEqual<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)` method, as shown in the following example:</span></span>
  
 [!code-csharp[CSLINQEncapsulatedComparer#8](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/CS/EncapsulatedComparer.cs#8)]
 [!code-vb[CSLINQEncapsulatedComparer#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/VB/EncapsulatedComparer.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-1787"><paramref name="first" />lub <paramref name="second" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1787"><paramref name="first" /> or <paramref name="second" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SequenceEqual&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static bool SequenceEqual&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; first, System.Collections.Generic.IEnumerable&lt;TSource&gt; second, System.Collections.Generic.IEqualityComparer&lt;TSource&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SequenceEqual&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; first, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; second, class System.Collections.Generic.IEqualityComparer`1&lt;!!TSource&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SequenceEqual(Of TSource) (first As IEnumerable(Of TSource), second As IEnumerable(Of TSource), comparer As IEqualityComparer(Of TSource)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool SequenceEqual(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ first, System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ second, System::Collections::Generic::IEqualityComparer&lt;TSource&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member SequenceEqual : seq&lt;'Source&gt; * seq&lt;'Source&gt; * System.Collections.Generic.IEqualityComparer&lt;'Source&gt; -&gt; bool" Usage="System.Linq.Enumerable.SequenceEqual (first, second, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="first" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="second" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-1788">Typ elementów sekwencji wejściowych.</span><span class="sxs-lookup"><span data-stu-id="994a2-1788">The type of the elements of the input sequences.</span></span></typeparam>
        <param name="first"><span data-ttu-id="994a2-1789">Do porównania z <paramref name="second" />. <see cref="T:System.Collections.Generic.IEnumerable`1" /></span><span class="sxs-lookup"><span data-stu-id="994a2-1789">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to compare to <paramref name="second" />.</span></span></param>
        <param name="second"><span data-ttu-id="994a2-1790"><see cref="T:System.Collections.Generic.IEnumerable`1" /> Do porównania z pierwszą sekwencją.</span><span class="sxs-lookup"><span data-stu-id="994a2-1790">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to compare to the first sequence.</span></span></param>
        <param name="comparer"><span data-ttu-id="994a2-1791"><see cref="T:System.Collections.Generic.IEqualityComparer`1" /> Do porównywania elementów.</span><span class="sxs-lookup"><span data-stu-id="994a2-1791">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to use to compare elements.</span></span></param>
        <summary><span data-ttu-id="994a2-1792">Określa, czy dwie sekwencje są równe, porównując ich elementy przy użyciu <see cref="T:System.Collections.Generic.IEqualityComparer`1" />określonego elementu.</span><span class="sxs-lookup"><span data-stu-id="994a2-1792">Determines whether two sequences are equal by comparing their elements by using a specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</span></span></summary>
        <returns><span data-ttu-id="994a2-1793"><see langword="true" />Jeśli dwie sekwencje źródłowe mają równą długość i odpowiadające im elementy są porównywane <paramref name="comparer" />jako równe; <see langword="false" />w przeciwnym razie.</span><span class="sxs-lookup"><span data-stu-id="994a2-1793"><see langword="true" /> if the two source sequences are of equal length and their corresponding elements compare equal according to <paramref name="comparer" />; otherwise, <see langword="false" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-1794">Metoda wylicza dwie sekwencje źródłowe równolegle i porównuje odpowiadające im elementy przy użyciu określonego <xref:System.Collections.Generic.IEqualityComparer%601>. <xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29></span><span class="sxs-lookup"><span data-stu-id="994a2-1794">The <xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> method enumerates the two source sequences in parallel and compares corresponding elements by using the specified <xref:System.Collections.Generic.IEqualityComparer%601>.</span></span> <span data-ttu-id="994a2-1795">Jeśli `comparer` <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>jest `null`, domyślna funkcja porównująca równość jest używana do porównywania elementów.</span><span class="sxs-lookup"><span data-stu-id="994a2-1795">If `comparer` is `null`, the default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare elements.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-1796">Poniższy przykład pokazuje, jak zaimplementować funkcję porównującą równość, która może zostać użyta <xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> w metodzie.</span><span class="sxs-lookup"><span data-stu-id="994a2-1796">The following example shows how to implement an equality comparer that can be used in the <xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> method.</span></span>  
  
 [!code-csharp[CSLINQCustomComparer#1](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQCustomComparer/CS/CustomComparer.cs#1)]
 [!code-vb[CSLINQCustomComparer#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQCustomComparer/VB/CustomComparer.vb#1)]  
  
 <span data-ttu-id="994a2-1797">Po zaimplementowaniu tej <xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> metody porównującej można użyć sekwencji `Product` obiektów w metodzie, jak pokazano w następującym przykładzie:</span><span class="sxs-lookup"><span data-stu-id="994a2-1797">After you implement this comparer, you can use sequences of `Product` objects in the <xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> method, as shown in the following example:</span></span>  
  
 [!code-csharp[CSLINQCustomComparer#8](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQCustomComparer/CS/CustomComparer.cs#8)]
 [!code-vb[CSLINQCustomComparer#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQCustomComparer/VB/CustomComparer.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-1798"><paramref name="first" />lub <paramref name="second" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1798"><paramref name="first" /> or <paramref name="second" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Single&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="994a2-1799">Zwraca pojedynczy, konkretny element sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1799">Returns a single, specific element of a sequence.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Single&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource Single&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource Single&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Single(Of TSource) (source As IEnumerable(Of TSource)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource Single(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Single : seq&lt;'Source&gt; -&gt; 'Source" Usage="System.Linq.Enumerable.Single source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-1800">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1800">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-1801"><see cref="T:System.Collections.Generic.IEnumerable`1" /> Do zwrócenia pojedynczego elementu.</span><span class="sxs-lookup"><span data-stu-id="994a2-1801">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return the single element of.</span></span></param>
        <summary><span data-ttu-id="994a2-1802">Zwraca jedyny element sekwencji i zgłasza wyjątek, jeśli nie ma dokładnie jednego elementu w sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1802">Returns the only element of a sequence, and throws an exception if there is not exactly one element in the sequence.</span></span></summary>
        <returns><span data-ttu-id="994a2-1803">Pojedynczy element sekwencji wejściowej.</span><span class="sxs-lookup"><span data-stu-id="994a2-1803">The single element of the input sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-1804"><xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> Metoda zgłasza wyjątek, jeśli sekwencja wejściowa jest pusta.</span><span class="sxs-lookup"><span data-stu-id="994a2-1804">The <xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> method throws an exception if the input sequence is empty.</span></span> <span data-ttu-id="994a2-1805">Aby zamiast tego `null` powrócić, gdy sekwencja wejściowa jest pusta <xref:System.Linq.Enumerable.SingleOrDefault%2A>, użyj.</span><span class="sxs-lookup"><span data-stu-id="994a2-1805">To instead return `null` when the input sequence is empty, use <xref:System.Linq.Enumerable.SingleOrDefault%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-1806">Poniższy przykład kodu demonstruje, jak używać <xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> do wybierania tylko elementu tablicy.</span><span class="sxs-lookup"><span data-stu-id="994a2-1806">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to select the only element of an array.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#79](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#79)]
 [!code-vb[System.Linq.Enumerable#79](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#79)]  
  
 <span data-ttu-id="994a2-1807">Poniższy przykład kodu demonstruje, że <xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> zgłasza wyjątek, gdy sekwencja nie zawiera dokładnie jednego elementu.</span><span class="sxs-lookup"><span data-stu-id="994a2-1807">The following code example demonstrates that <xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> throws an exception when the sequence does not contain exactly one element.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#80](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#80)]
 [!code-vb[System.Linq.Enumerable#80](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#80)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-1808"><paramref name="source" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1808"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="994a2-1809">Sekwencja wejściowa zawiera więcej niż jeden element.</span><span class="sxs-lookup"><span data-stu-id="994a2-1809">The input sequence contains more than one element.</span></span>  
  
 <span data-ttu-id="994a2-1810">—lub—</span><span class="sxs-lookup"><span data-stu-id="994a2-1810">-or-</span></span>  
  
 <span data-ttu-id="994a2-1811">Sekwencja wejściowa jest pusta.</span><span class="sxs-lookup"><span data-stu-id="994a2-1811">The input sequence is empty.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Single&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource Single&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource Single&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Single(Of TSource) (source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource Single(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member Single : seq&lt;'Source&gt; * Func&lt;'Source, bool&gt; -&gt; 'Source" Usage="System.Linq.Enumerable.Single (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-1812">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1812">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-1813"><see cref="T:System.Collections.Generic.IEnumerable`1" /> Do zwrócenia pojedynczego elementu z.</span><span class="sxs-lookup"><span data-stu-id="994a2-1813">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return a single element from.</span></span></param>
        <param name="predicate"><span data-ttu-id="994a2-1814">Funkcja do testowania elementu dla warunku.</span><span class="sxs-lookup"><span data-stu-id="994a2-1814">A function to test an element for a condition.</span></span></param>
        <summary><span data-ttu-id="994a2-1815">Zwraca jedyny element sekwencji, który spełnia określony warunek, i zgłasza wyjątek, jeśli istnieje więcej niż jeden taki element.</span><span class="sxs-lookup"><span data-stu-id="994a2-1815">Returns the only element of a sequence that satisfies a specified condition, and throws an exception if more than one such element exists.</span></span></summary>
        <returns><span data-ttu-id="994a2-1816">Pojedynczy element sekwencji wejściowej, który spełnia warunek.</span><span class="sxs-lookup"><span data-stu-id="994a2-1816">The single element of the input sequence that satisfies a condition.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-1817"><xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> Metoda zgłasza wyjątek, jeśli sekwencja wejściowa nie zawiera pasującego elementu.</span><span class="sxs-lookup"><span data-stu-id="994a2-1817">The <xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> method throws an exception if the input sequence contains no matching element.</span></span> <span data-ttu-id="994a2-1818">Aby zamiast tego `null` powrócić, gdy nie znaleziono pasującego elementu <xref:System.Linq.Enumerable.SingleOrDefault%2A>, użyj.</span><span class="sxs-lookup"><span data-stu-id="994a2-1818">To instead return `null` when no matching element is found, use <xref:System.Linq.Enumerable.SingleOrDefault%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-1819">Poniższy przykład kodu demonstruje, jak używać <xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> do wybierania tylko elementu tablicy, który spełnia warunek.</span><span class="sxs-lookup"><span data-stu-id="994a2-1819">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> to select the only element of an array that satisfies a condition.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#81](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#81)]
 [!code-vb[System.Linq.Enumerable#81](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#81)]  
  
 <span data-ttu-id="994a2-1820">Poniższy przykład kodu demonstruje, że <xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> zgłasza wyjątek, gdy sekwencja nie zawiera dokładnie jednego elementu, który spełnia warunek.</span><span class="sxs-lookup"><span data-stu-id="994a2-1820">The following code example demonstrates that <xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> throws an exception when the sequence does not contain exactly one element that satisfies the condition.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#82](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#82)]
 [!code-vb[System.Linq.Enumerable#82](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#82)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-1821"><paramref name="source" />lub <paramref name="predicate" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1821"><paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="994a2-1822">Żaden element nie spełnia warunku <paramref name="predicate" />w elemencie.</span><span class="sxs-lookup"><span data-stu-id="994a2-1822">No element satisfies the condition in <paramref name="predicate" />.</span></span>  
  
<span data-ttu-id="994a2-1823">—lub—</span><span class="sxs-lookup"><span data-stu-id="994a2-1823">-or-</span></span> 
<span data-ttu-id="994a2-1824">Więcej niż jeden element spełnia warunek w <paramref name="predicate" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1824">More than one element satisfies the condition in <paramref name="predicate" />.</span></span>  
  
<span data-ttu-id="994a2-1825">—lub—</span><span class="sxs-lookup"><span data-stu-id="994a2-1825">-or-</span></span> 
<span data-ttu-id="994a2-1826">Sekwencja źródłowa jest pusta.</span><span class="sxs-lookup"><span data-stu-id="994a2-1826">The source sequence is empty.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="SingleOrDefault&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="994a2-1827">Zwraca pojedynczy, konkretny element sekwencji lub wartość domyślną, jeśli ten element nie zostanie znaleziony.</span><span class="sxs-lookup"><span data-stu-id="994a2-1827">Returns a single, specific element of a sequence, or a default value if that element is not found.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SingleOrDefault&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource SingleOrDefault&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource SingleOrDefault&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SingleOrDefault(Of TSource) (source As IEnumerable(Of TSource)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource SingleOrDefault(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member SingleOrDefault : seq&lt;'Source&gt; -&gt; 'Source" Usage="System.Linq.Enumerable.SingleOrDefault source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-1828">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1828">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-1829"><see cref="T:System.Collections.Generic.IEnumerable`1" /> Do zwrócenia pojedynczego elementu.</span><span class="sxs-lookup"><span data-stu-id="994a2-1829">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return the single element of.</span></span></param>
        <summary><span data-ttu-id="994a2-1830">Zwraca jedyny element sekwencji lub wartość domyślną, jeśli sekwencja jest pusta. Ta metoda zgłasza wyjątek, jeśli w sekwencji występuje więcej niż jeden element.</span><span class="sxs-lookup"><span data-stu-id="994a2-1830">Returns the only element of a sequence, or a default value if the sequence is empty; this method throws an exception if there is more than one element in the sequence.</span></span></summary>
        <returns><span data-ttu-id="994a2-1831">Pojedynczy element sekwencji wejściowej lub <see langword="default" />(<paramref name="TSource" />), jeśli sekwencja nie zawiera żadnych elementów.</span><span class="sxs-lookup"><span data-stu-id="994a2-1831">The single element of the input sequence, or <see langword="default" />(<paramref name="TSource" />) if the sequence contains no elements.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-1832">Wartość domyślna dla typów Reference i nullable jest równa `null`.</span><span class="sxs-lookup"><span data-stu-id="994a2-1832">The default value for reference and nullable types is `null`.</span></span>  
  
 <span data-ttu-id="994a2-1833"><xref:System.Linq.Enumerable.SingleOrDefault%2A> Metoda nie pozwala na określenie wartości domyślnej.</span><span class="sxs-lookup"><span data-stu-id="994a2-1833">The <xref:System.Linq.Enumerable.SingleOrDefault%2A> method does not provide a way to specify a default value.</span></span> <span data-ttu-id="994a2-1834">Jeśli chcesz określić wartość domyślną inną niż `default(TSource)`, <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> Użyj metody opisanej w sekcji przykład.</span><span class="sxs-lookup"><span data-stu-id="994a2-1834">If you want to specify a default value other than `default(TSource)`, use the <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> method as described in the Example section.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-1835">Poniższy przykład kodu demonstruje, jak używać <xref:System.Linq.Enumerable.SingleOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> do wybierania tylko elementu tablicy.</span><span class="sxs-lookup"><span data-stu-id="994a2-1835">The following code example demonstrates how to use <xref:System.Linq.Enumerable.SingleOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to select the only element of an array.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#83](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#83)]
 [!code-vb[System.Linq.Enumerable#83](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#83)]  
  
 <span data-ttu-id="994a2-1836">Poniższy przykład kodu pokazuje, że <xref:System.Linq.Enumerable.SingleOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> zwraca wartość domyślną, gdy sekwencja nie zawiera dokładnie jednego elementu.</span><span class="sxs-lookup"><span data-stu-id="994a2-1836">The following code example demonstrates that <xref:System.Linq.Enumerable.SingleOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> returns a default value when the sequence does not contain exactly one element.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#84](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#84)]
 [!code-vb[System.Linq.Enumerable#84](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#84)]  
  
 <span data-ttu-id="994a2-1837">Czasami wartość `default(TSource)` nie jest wartością domyślną, która ma być używana, jeśli kolekcja nie zawiera żadnych elementów.</span><span class="sxs-lookup"><span data-stu-id="994a2-1837">Sometimes the value of `default(TSource)` is not the default value that you want to use if the collection contains no elements.</span></span> <span data-ttu-id="994a2-1838">Zamiast sprawdzać wynik niepożądanej wartości domyślnej, a następnie zmieniać ją w razie potrzeby, można użyć <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> metody, aby określić wartość domyślną, która ma być używana, jeśli kolekcja jest pusta.</span><span class="sxs-lookup"><span data-stu-id="994a2-1838">Instead of checking the result for the unwanted default value and then changing it if necessary, you can use the <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> method to specify the default value that you want to use if the collection is empty.</span></span> <span data-ttu-id="994a2-1839">Następnie należy wywołać <xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> , aby uzyskać element.</span><span class="sxs-lookup"><span data-stu-id="994a2-1839">Then, call <xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to obtain the element.</span></span> <span data-ttu-id="994a2-1840">Poniższy przykład kodu używa obu technik do uzyskania wartości domyślnej 1, jeśli kolekcja numerów stron jest pusta.</span><span class="sxs-lookup"><span data-stu-id="994a2-1840">The following code example uses both techniques to obtain a default value of 1 if a collection of page numbers is empty.</span></span> <span data-ttu-id="994a2-1841">Ponieważ wartością domyślną dla liczby całkowitej jest 0, która nie jest zazwyczaj prawidłowym numerem strony, wartość domyślna musi być określona jako 1.</span><span class="sxs-lookup"><span data-stu-id="994a2-1841">Because the default value for an integer is 0, which is not usually a valid page number, the default value must be specified as 1 instead.</span></span> <span data-ttu-id="994a2-1842">Pierwsza zmienna wynikowa jest sprawdzana pod kątem niepożądanej wartości domyślnej po zakończeniu wykonywania zapytania.</span><span class="sxs-lookup"><span data-stu-id="994a2-1842">The first result variable is checked for the unwanted default value after the query has finished executing.</span></span> <span data-ttu-id="994a2-1843">Druga zmienna wynikowa jest uzyskiwana przy <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> użyciu, aby określić wartość domyślną 1.</span><span class="sxs-lookup"><span data-stu-id="994a2-1843">The second result variable is obtained by using <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> to specify a default value of 1.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#128](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#128)]
 [!code-vb[System.Linq.Enumerable#128](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#128)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-1844"><paramref name="source" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1844"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="994a2-1845">Sekwencja wejściowa zawiera więcej niż jeden element.</span><span class="sxs-lookup"><span data-stu-id="994a2-1845">The input sequence contains more than one element.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="SingleOrDefault&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource SingleOrDefault&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource SingleOrDefault&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SingleOrDefault(Of TSource) (source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource SingleOrDefault(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member SingleOrDefault : seq&lt;'Source&gt; * Func&lt;'Source, bool&gt; -&gt; 'Source" Usage="System.Linq.Enumerable.SingleOrDefault (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-1846">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1846">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-1847"><see cref="T:System.Collections.Generic.IEnumerable`1" /> Do zwrócenia pojedynczego elementu z.</span><span class="sxs-lookup"><span data-stu-id="994a2-1847">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return a single element from.</span></span></param>
        <param name="predicate"><span data-ttu-id="994a2-1848">Funkcja do testowania elementu dla warunku.</span><span class="sxs-lookup"><span data-stu-id="994a2-1848">A function to test an element for a condition.</span></span></param>
        <summary><span data-ttu-id="994a2-1849">Zwraca jedyny element sekwencji, który spełnia określony warunek lub wartość domyślną, jeśli taki element nie istnieje; Ta metoda zgłasza wyjątek, jeśli więcej niż jeden element spełnia warunek.</span><span class="sxs-lookup"><span data-stu-id="994a2-1849">Returns the only element of a sequence that satisfies a specified condition or a default value if no such element exists; this method throws an exception if more than one element satisfies the condition.</span></span></summary>
        <returns><span data-ttu-id="994a2-1850">Pojedynczy element sekwencji wejściowej, który spełnia warunek lub <see langword="default" />(<paramref name="TSource" />), jeśli taki element nie zostanie znaleziony.</span><span class="sxs-lookup"><span data-stu-id="994a2-1850">The single element of the input sequence that satisfies the condition, or <see langword="default" />(<paramref name="TSource" />) if no such element is found.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-1851">Wartość domyślna dla typów Reference i nullable jest równa `null`.</span><span class="sxs-lookup"><span data-stu-id="994a2-1851">The default value for reference and nullable types is `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-1852">Poniższy przykład kodu demonstruje, jak używać <xref:System.Linq.Enumerable.SingleOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> do wybierania tylko elementu tablicy, który spełnia warunek.</span><span class="sxs-lookup"><span data-stu-id="994a2-1852">The following code example demonstrates how to use <xref:System.Linq.Enumerable.SingleOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> to select the only element of an array that satisfies a condition.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#85](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#85)]
 [!code-vb[System.Linq.Enumerable#85](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#85)]  
  
 <span data-ttu-id="994a2-1853">Poniższy przykład kodu demonstruje, że <xref:System.Linq.Enumerable.SingleOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> zwraca wartość domyślną, gdy sekwencja nie zawiera dokładnie jednego elementu, który spełnia warunek.</span><span class="sxs-lookup"><span data-stu-id="994a2-1853">The following code example demonstrates that <xref:System.Linq.Enumerable.SingleOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> returns a default value when the sequence does not contain exactly one element that satisfies the condition.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#86](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#86)]
 [!code-vb[System.Linq.Enumerable#86](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#86)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-1854"><paramref name="source" />lub <paramref name="predicate" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1854"><paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.InvalidOperationException"><span data-ttu-id="994a2-1855">Więcej niż jeden element spełnia warunek w <paramref name="predicate" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1855">More than one element satisfies the condition in <paramref name="predicate" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Skip&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Skip&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Skip&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Skip(Of TSource) (source As IEnumerable(Of TSource), count As Integer) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ Skip(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, int count);" />
      <MemberSignature Language="F#" Value="static member Skip : seq&lt;'Source&gt; * int -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.Skip (source, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-1856">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1856">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-1857"><see cref="T:System.Collections.Generic.IEnumerable`1" /> Do zwrócenia elementów z.</span><span class="sxs-lookup"><span data-stu-id="994a2-1857">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return elements from.</span></span></param>
        <param name="count"><span data-ttu-id="994a2-1858">Liczba elementów do pominięcia przed zwróceniem pozostałych elementów.</span><span class="sxs-lookup"><span data-stu-id="994a2-1858">The number of elements to skip before returning the remaining elements.</span></span></param>
        <summary><span data-ttu-id="994a2-1859">Pomija określoną liczbę elementów w sekwencji, a następnie zwraca pozostałe elementy.</span><span class="sxs-lookup"><span data-stu-id="994a2-1859">Bypasses a specified number of elements in a sequence and then returns the remaining elements.</span></span></summary>
        <returns><span data-ttu-id="994a2-1860">Element <see cref="T:System.Collections.Generic.IEnumerable`1" /> zawierający elementy występujące po określonym indeksie w sekwencji wejściowej.</span><span class="sxs-lookup"><span data-stu-id="994a2-1860">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements that occur after the specified index in the input sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-1861">Ta metoda jest implementowana za pomocą odroczonego wykonania.</span><span class="sxs-lookup"><span data-stu-id="994a2-1861">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="994a2-1862">Bezpośrednio zwracana wartość jest obiektem, który przechowuje wszystkie informacje wymagane do wykonania akcji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1862">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="994a2-1863">Zapytanie reprezentowane przez tę metodę nie jest wykonywane `GetEnumerator` do momentu wyliczenia obiektu przez wywołanie jego metody bezpośrednio lub przy użyciu `foreach` w wizualizacji C# lub `For Each` w Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="994a2-1863">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="994a2-1864">Jeśli `source` zawiera mniej niż `count` elementy, zwracany jest <xref:System.Collections.Generic.IEnumerable%601> pusty.</span><span class="sxs-lookup"><span data-stu-id="994a2-1864">If `source` contains fewer than `count` elements, an empty <xref:System.Collections.Generic.IEnumerable%601> is returned.</span></span> <span data-ttu-id="994a2-1865">Jeśli `count` jest mniejsza lub równa zero, `source` zostaną naliczone wszystkie elementy.</span><span class="sxs-lookup"><span data-stu-id="994a2-1865">If `count` is less than or equal to zero, all elements of `source` are yielded.</span></span>  
  
 <span data-ttu-id="994a2-1866">Metody <xref:System.Linq.Enumerable.Take%2A> i<xref:System.Linq.Enumerable.Skip%2A> są uzupełnieniem funkcjonalnym.</span><span class="sxs-lookup"><span data-stu-id="994a2-1866">The <xref:System.Linq.Enumerable.Take%2A> and <xref:System.Linq.Enumerable.Skip%2A> methods are functional complements.</span></span> <span data-ttu-id="994a2-1867">Podaną sekwencją `coll` i liczbę `n`całkowitą łączą wyniki `coll.Take(n)` i `coll.Skip(n)` dają tę samą sekwencję co `coll`.</span><span class="sxs-lookup"><span data-stu-id="994a2-1867">Given a sequence `coll` and an integer `n`, concatenating the results of `coll.Take(n)` and `coll.Skip(n)` yields the same sequence as `coll`.</span></span>  
  
 <span data-ttu-id="994a2-1868">W Visual Basic składni wyrażenia zapytania, `Skip` klauzula tłumaczy na <xref:System.Linq.Enumerable.Skip%2A>wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-1868">In Visual Basic query expression syntax, a `Skip` clause translates to an invocation of <xref:System.Linq.Enumerable.Skip%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-1869">Poniższy przykład kodu demonstruje, jak użyć <xref:System.Linq.Enumerable.Skip%2A> , aby pominąć określoną liczbę elementów w sortowanej tablicy i zwrócić pozostałe elementy.</span><span class="sxs-lookup"><span data-stu-id="994a2-1869">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Skip%2A> to skip a specified number of elements in a sorted array and return the remaining elements.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#87](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#87)]
 [!code-vb[System.Linq.Enumerable#87](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#87)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-1870"><paramref name="source" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1870"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/skip-clause.md"><span data-ttu-id="994a2-1871">Skip — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-1871">Skip Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="SkipLast&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; SkipLast&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; SkipLast&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.SkipLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SkipLast(Of TSource) (source As IEnumerable(Of TSource), count As Integer) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ SkipLast(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, int count);" />
      <MemberSignature Language="F#" Value="static member SkipLast : seq&lt;'Source&gt; * int -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.SkipLast (source, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="count" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">To be added.</typeparam>
        <param name="source">To be added.</param>
        <param name="count">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SkipWhile&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="994a2-1872">Pomija elementy w sekwencji tak długo, jak określony warunek ma wartość true, a następnie zwraca pozostałe elementy.</span><span class="sxs-lookup"><span data-stu-id="994a2-1872">Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SkipWhile&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; SkipWhile&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; SkipWhile&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SkipWhile(Of TSource) (source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ SkipWhile(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member SkipWhile : seq&lt;'Source&gt; * Func&lt;'Source, bool&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.SkipWhile (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-1873">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1873">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-1874"><see cref="T:System.Collections.Generic.IEnumerable`1" /> Do zwrócenia elementów z.</span><span class="sxs-lookup"><span data-stu-id="994a2-1874">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return elements from.</span></span></param>
        <param name="predicate"><span data-ttu-id="994a2-1875">Funkcja testowania każdego elementu na stanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-1875">A function to test each element for a condition.</span></span></param>
        <summary><span data-ttu-id="994a2-1876">Pomija elementy w sekwencji tak długo, jak określony warunek ma wartość true, a następnie zwraca pozostałe elementy.</span><span class="sxs-lookup"><span data-stu-id="994a2-1876">Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements.</span></span></summary>
        <returns><span data-ttu-id="994a2-1877">Element zawierający elementy z sekwencji wejściowej, zaczynając od pierwszego elementu w serii liniowej, który nie przekazuje testu określonego przez <paramref name="predicate" />. <see cref="T:System.Collections.Generic.IEnumerable`1" /></span><span class="sxs-lookup"><span data-stu-id="994a2-1877">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by <paramref name="predicate" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-1878"><xref:System.Linq.Enumerable.SkipWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> Metoda jest implementowana przy użyciu odroczonego wykonania.</span><span class="sxs-lookup"><span data-stu-id="994a2-1878">The <xref:System.Linq.Enumerable.SkipWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> method is implemented by using deferred execution.</span></span> <span data-ttu-id="994a2-1879">Bezpośrednio zwracana wartość jest obiektem, który przechowuje wszystkie informacje wymagane do wykonania akcji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1879">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="994a2-1880">Zapytanie reprezentowane przez tę metodę nie jest wykonywane `GetEnumerator` do momentu wyliczenia obiektu przez wywołanie jego metody bezpośrednio lub przy użyciu `foreach` w wizualizacji C# lub `For Each` w Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="994a2-1880">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="994a2-1881">Ta metoda sprawdza każdy element `source` przy użyciu `predicate` i pomija element, jeśli wynik jest `true`.</span><span class="sxs-lookup"><span data-stu-id="994a2-1881">This method tests each element of `source` by using `predicate` and skips the element if the result is `true`.</span></span> <span data-ttu-id="994a2-1882">Po powrocie `false` funkcji predykatu dla elementu, ten element i pozostałe elementy w `source` są naliczane i nie ma `predicate`więcej wywołań.</span><span class="sxs-lookup"><span data-stu-id="994a2-1882">After the predicate function returns `false` for an element, that element and the remaining elements in `source` are yielded and there are no more invocations of `predicate`.</span></span>  
  
 <span data-ttu-id="994a2-1883">Jeśli `predicate` <xref:System.Collections.Generic.IEnumerable%601> zwraca `true` dla wszystkich elementów w sekwencji, zwracany jest pusty.</span><span class="sxs-lookup"><span data-stu-id="994a2-1883">If `predicate` returns `true` for all elements in the sequence, an empty <xref:System.Collections.Generic.IEnumerable%601> is returned.</span></span>  
  
 <span data-ttu-id="994a2-1884">Metody <xref:System.Linq.Enumerable.TakeWhile%2A> i<xref:System.Linq.Enumerable.SkipWhile%2A> są uzupełnieniem funkcjonalnym.</span><span class="sxs-lookup"><span data-stu-id="994a2-1884">The <xref:System.Linq.Enumerable.TakeWhile%2A> and <xref:System.Linq.Enumerable.SkipWhile%2A> methods are functional complements.</span></span> <span data-ttu-id="994a2-1885">Uwzględniając sekwencję `coll` i czystą funkcję `p`, `coll.TakeWhile(p)` łączenie wyników i `coll.SkipWhile(p)` daje taką samą sekwencję jak `coll`.</span><span class="sxs-lookup"><span data-stu-id="994a2-1885">Given a sequence `coll` and a pure function `p`, concatenating the results of `coll.TakeWhile(p)` and `coll.SkipWhile(p)` yields the same sequence as `coll`.</span></span>  
  
 <span data-ttu-id="994a2-1886">W Visual Basic składni wyrażenia zapytania, `Skip While` klauzula tłumaczy na <xref:System.Linq.Enumerable.SkipWhile%2A>wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-1886">In Visual Basic query expression syntax, a `Skip While` clause translates to an invocation of <xref:System.Linq.Enumerable.SkipWhile%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-1887">Poniższy przykład kodu demonstruje, jak używać <xref:System.Linq.Enumerable.SkipWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> do pomijania elementów tablicy, tak długo, jak warunek ma wartość true.</span><span class="sxs-lookup"><span data-stu-id="994a2-1887">The following code example demonstrates how to use <xref:System.Linq.Enumerable.SkipWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> to skip elements of an array as long as a condition is true.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#88](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#88)]
 [!code-vb[System.Linq.Enumerable#88](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#88)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-1888"><paramref name="source" />lub <paramref name="predicate" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1888"><paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/skip-while-clause.md"><span data-ttu-id="994a2-1889">Skip While — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-1889">Skip While Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="SkipWhile&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; SkipWhile&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,int,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; SkipWhile&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`3&lt;!!TSource, int32, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SkipWhile(Of TSource) (source As IEnumerable(Of TSource), predicate As Func(Of TSource, Integer, Boolean)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ SkipWhile(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, int, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member SkipWhile : seq&lt;'Source&gt; * Func&lt;'Source, int, bool&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.SkipWhile (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Int32,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-1890">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1890">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-1891"><see cref="T:System.Collections.Generic.IEnumerable`1" /> Do zwrócenia elementów z.</span><span class="sxs-lookup"><span data-stu-id="994a2-1891">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return elements from.</span></span></param>
        <param name="predicate"><span data-ttu-id="994a2-1892">Funkcja do testowania każdego elementu źródłowego dla warunku; drugi parametr funkcji reprezentuje indeks elementu źródłowego.</span><span class="sxs-lookup"><span data-stu-id="994a2-1892">A function to test each source element for a condition; the second parameter of the function represents the index of the source element.</span></span></param>
        <summary><span data-ttu-id="994a2-1893">Pomija elementy w sekwencji tak długo, jak określony warunek ma wartość true, a następnie zwraca pozostałe elementy.</span><span class="sxs-lookup"><span data-stu-id="994a2-1893">Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements.</span></span> <span data-ttu-id="994a2-1894">Indeks elementu jest używany w logice funkcji predykatu.</span><span class="sxs-lookup"><span data-stu-id="994a2-1894">The element's index is used in the logic of the predicate function.</span></span></summary>
        <returns><span data-ttu-id="994a2-1895">Element zawierający elementy z sekwencji wejściowej, zaczynając od pierwszego elementu w serii liniowej, który nie przekazuje testu określonego przez <paramref name="predicate" />. <see cref="T:System.Collections.Generic.IEnumerable`1" /></span><span class="sxs-lookup"><span data-stu-id="994a2-1895">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by <paramref name="predicate" />.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-1896">Ta metoda jest implementowana za pomocą odroczonego wykonania.</span><span class="sxs-lookup"><span data-stu-id="994a2-1896">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="994a2-1897">Bezpośrednio zwracana wartość jest obiektem, który przechowuje wszystkie informacje wymagane do wykonania akcji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1897">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="994a2-1898">Zapytanie reprezentowane przez tę metodę nie jest wykonywane `GetEnumerator` do momentu wyliczenia obiektu przez wywołanie jego metody bezpośrednio lub przy użyciu `foreach` w wizualizacji C# lub `For Each` w Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="994a2-1898">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="994a2-1899">Metoda sprawdza każdy `source` element przy użyciu `predicate` i pomija element, jeśli wynik jest `true`. <xref:System.Linq.Enumerable.SkipWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29></span><span class="sxs-lookup"><span data-stu-id="994a2-1899">The <xref:System.Linq.Enumerable.SkipWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29> method tests each element of `source` by using `predicate` and skips the element if the result is `true`.</span></span> <span data-ttu-id="994a2-1900">Po powrocie `false` funkcji predykatu dla elementu, ten element i pozostałe elementy w `source` są naliczane i nie ma `predicate`więcej wywołań.</span><span class="sxs-lookup"><span data-stu-id="994a2-1900">After the predicate function returns `false` for an element, that element and the remaining elements in `source` are yielded and there are no more invocations of `predicate`.</span></span>  
  
 <span data-ttu-id="994a2-1901">Jeśli `predicate` <xref:System.Collections.Generic.IEnumerable%601> zwraca `true` dla wszystkich elementów w sekwencji, zwracany jest pusty.</span><span class="sxs-lookup"><span data-stu-id="994a2-1901">If `predicate` returns `true` for all elements in the sequence, an empty <xref:System.Collections.Generic.IEnumerable%601> is returned.</span></span>  
  
 <span data-ttu-id="994a2-1902">Pierwszy argument `predicate` przedstawia element do przetestowania.</span><span class="sxs-lookup"><span data-stu-id="994a2-1902">The first argument of `predicate` represents the element to test.</span></span> <span data-ttu-id="994a2-1903">Drugi argument reprezentuje indeks (liczony od zera) elementu w `source`.</span><span class="sxs-lookup"><span data-stu-id="994a2-1903">The second argument represents the zero-based index of the element within `source`.</span></span>  
  
 <span data-ttu-id="994a2-1904">Metody <xref:System.Linq.Enumerable.TakeWhile%2A> i<xref:System.Linq.Enumerable.SkipWhile%2A> są uzupełnieniem funkcjonalnym.</span><span class="sxs-lookup"><span data-stu-id="994a2-1904">The <xref:System.Linq.Enumerable.TakeWhile%2A> and <xref:System.Linq.Enumerable.SkipWhile%2A> methods are functional complements.</span></span> <span data-ttu-id="994a2-1905">Uwzględniając sekwencję `coll` i czystą funkcję `p`, `coll.TakeWhile(p)` łączenie wyników i `coll.SkipWhile(p)` daje taką samą sekwencję jak `coll`.</span><span class="sxs-lookup"><span data-stu-id="994a2-1905">Given a sequence `coll` and a pure function `p`, concatenating the results of `coll.TakeWhile(p)` and `coll.SkipWhile(p)` yields the same sequence as `coll`.</span></span>  
  
 <span data-ttu-id="994a2-1906">W Visual Basic składni wyrażenia zapytania, `Skip While` klauzula tłumaczy na <xref:System.Linq.Enumerable.SkipWhile%2A>wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-1906">In Visual Basic query expression syntax, a `Skip While` clause translates to an invocation of <xref:System.Linq.Enumerable.SkipWhile%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-1907">Poniższy przykład kodu demonstruje, jak używać <xref:System.Linq.Enumerable.SkipWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29> do pomijania elementów tablicy, o ile warunek zależny od indeksu elementu ma wartość true.</span><span class="sxs-lookup"><span data-stu-id="994a2-1907">The following code example demonstrates how to use <xref:System.Linq.Enumerable.SkipWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29> to skip elements of an array as long as a condition that depends on the element's index is true.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#89](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#89)]
 [!code-vb[System.Linq.Enumerable#89](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#89)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-1908"><paramref name="source" />lub <paramref name="predicate" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1908"><paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/skip-while-clause.md"><span data-ttu-id="994a2-1909">Skip While — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-1909">Skip While Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Sum">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="994a2-1910">Oblicza sumę sekwencji wartości liczbowych.</span><span class="sxs-lookup"><span data-stu-id="994a2-1910">Computes the sum of a sequence of numeric values.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Sum">
      <MemberSignature Language="C#" Value="public static decimal Sum (this System.Collections.Generic.IEnumerable&lt;decimal&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Sum(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Decimal&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Decimal})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum (source As IEnumerable(Of Decimal)) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Decimal Sum(System::Collections::Generic::IEnumerable&lt;System::Decimal&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;decimal&gt; -&gt; decimal" Usage="System.Linq.Enumerable.Sum source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Decimal&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="994a2-1911">Sekwencja <see cref="T:System.Decimal" /> wartości do obliczania sumy.</span><span class="sxs-lookup"><span data-stu-id="994a2-1911">A sequence of <see cref="T:System.Decimal" /> values to calculate the sum of.</span></span></param>
        <summary><span data-ttu-id="994a2-1912">Oblicza sumę sekwencji <see cref="T:System.Decimal" /> wartości.</span><span class="sxs-lookup"><span data-stu-id="994a2-1912">Computes the sum of a sequence of <see cref="T:System.Decimal" /> values.</span></span></summary>
        <returns><span data-ttu-id="994a2-1913">Suma wartości w sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1913">The sum of the values in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-1914">Metoda <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Decimal%7D%29> zwraca wartość zero, `source` Jeśli nie zawiera żadnych elementów.</span><span class="sxs-lookup"><span data-stu-id="994a2-1914">The <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Decimal%7D%29> method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="994a2-1915">W Visual Basic składni wyrażenia zapytania, `Aggregate Into Sum()` klauzula tłumaczy na <xref:System.Linq.Enumerable.Sum%2A>wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-1915">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-1916">Poniższy przykład kodu demonstruje, jak używać <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29> do sumowania wartości sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1916">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29> to sum the values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#120](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#120)]
 [!code-vb[System.Linq.Enumerable#120](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#120)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-1917"><paramref name="source" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1917"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="994a2-1918">Suma jest większa niż <see cref="F:System.Decimal.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1918">The sum is larger than <see cref="F:System.Decimal.MaxValue" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="994a2-1919">Aggregate — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-1919">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Sum">
      <MemberSignature Language="C#" Value="public static double Sum (this System.Collections.Generic.IEnumerable&lt;double&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Sum(class System.Collections.Generic.IEnumerable`1&lt;float64&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Double})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum (source As IEnumerable(Of Double)) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static double Sum(System::Collections::Generic::IEnumerable&lt;double&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;double&gt; -&gt; double" Usage="System.Linq.Enumerable.Sum source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Double&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="994a2-1920">Sekwencja <see cref="T:System.Double" /> wartości do obliczania sumy.</span><span class="sxs-lookup"><span data-stu-id="994a2-1920">A sequence of <see cref="T:System.Double" /> values to calculate the sum of.</span></span></param>
        <summary><span data-ttu-id="994a2-1921">Oblicza sumę sekwencji <see cref="T:System.Double" /> wartości.</span><span class="sxs-lookup"><span data-stu-id="994a2-1921">Computes the sum of a sequence of <see cref="T:System.Double" /> values.</span></span></summary>
        <returns><span data-ttu-id="994a2-1922">Suma wartości w sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1922">The sum of the values in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-1923">Ta metoda zwraca wartość zero `source` , jeśli nie zawiera żadnych elementów.</span><span class="sxs-lookup"><span data-stu-id="994a2-1923">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="994a2-1924">W Visual Basic składni wyrażenia zapytania, `Aggregate Into Sum()` klauzula tłumaczy na <xref:System.Linq.Enumerable.Sum%2A>wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-1924">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-1925">Poniższy przykład kodu demonstruje, jak używać <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29> do sumowania wartości sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1925">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29> to sum the values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#120](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#120)]
 [!code-vb[System.Linq.Enumerable#120](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#120)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-1926"><paramref name="source" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1926"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="994a2-1927">Aggregate — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-1927">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Sum">
      <MemberSignature Language="C#" Value="public static int Sum (this System.Collections.Generic.IEnumerable&lt;int&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Sum(class System.Collections.Generic.IEnumerable`1&lt;int32&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum (source As IEnumerable(Of Integer)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int Sum(System::Collections::Generic::IEnumerable&lt;int&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;int&gt; -&gt; int" Usage="System.Linq.Enumerable.Sum source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Int32&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="994a2-1928">Sekwencja <see cref="T:System.Int32" /> wartości do obliczania sumy.</span><span class="sxs-lookup"><span data-stu-id="994a2-1928">A sequence of <see cref="T:System.Int32" /> values to calculate the sum of.</span></span></param>
        <summary><span data-ttu-id="994a2-1929">Oblicza sumę sekwencji <see cref="T:System.Int32" /> wartości.</span><span class="sxs-lookup"><span data-stu-id="994a2-1929">Computes the sum of a sequence of <see cref="T:System.Int32" /> values.</span></span></summary>
        <returns><span data-ttu-id="994a2-1930">Suma wartości w sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1930">The sum of the values in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-1931">Ta metoda zwraca wartość zero `source` , jeśli nie zawiera żadnych elementów.</span><span class="sxs-lookup"><span data-stu-id="994a2-1931">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="994a2-1932">W Visual Basic składni wyrażenia zapytania, `Aggregate Into Sum()` klauzula tłumaczy na <xref:System.Linq.Enumerable.Sum%2A>wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-1932">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-1933">Poniższy przykład kodu demonstruje, jak używać <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29> do sumowania wartości sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1933">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29> to sum the values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#120](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#120)]
 [!code-vb[System.Linq.Enumerable#120](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#120)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-1934"><paramref name="source" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1934"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="994a2-1935">Suma jest większa niż <see cref="F:System.Int32.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1935">The sum is larger than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="994a2-1936">Aggregate — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-1936">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Sum">
      <MemberSignature Language="C#" Value="public static long Sum (this System.Collections.Generic.IEnumerable&lt;long&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Sum(class System.Collections.Generic.IEnumerable`1&lt;int64&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int64})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum (source As IEnumerable(Of Long)) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static long Sum(System::Collections::Generic::IEnumerable&lt;long&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;int64&gt; -&gt; int64" Usage="System.Linq.Enumerable.Sum source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Int64&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="994a2-1937">Sekwencja <see cref="T:System.Int64" /> wartości do obliczania sumy.</span><span class="sxs-lookup"><span data-stu-id="994a2-1937">A sequence of <see cref="T:System.Int64" /> values to calculate the sum of.</span></span></param>
        <summary><span data-ttu-id="994a2-1938">Oblicza sumę sekwencji <see cref="T:System.Int64" /> wartości.</span><span class="sxs-lookup"><span data-stu-id="994a2-1938">Computes the sum of a sequence of <see cref="T:System.Int64" /> values.</span></span></summary>
        <returns><span data-ttu-id="994a2-1939">Suma wartości w sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1939">The sum of the values in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-1940">Ta metoda zwraca wartość zero `source` , jeśli nie zawiera żadnych elementów.</span><span class="sxs-lookup"><span data-stu-id="994a2-1940">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="994a2-1941">W Visual Basic składni wyrażenia zapytania, `Aggregate Into Sum()` klauzula tłumaczy na <xref:System.Linq.Enumerable.Sum%2A>wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-1941">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-1942">Poniższy przykład kodu demonstruje, jak używać <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29> do sumowania wartości sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1942">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29> to sum the values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#120](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#120)]
 [!code-vb[System.Linq.Enumerable#120](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#120)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-1943"><paramref name="source" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1943"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="994a2-1944">Suma jest większa niż <see cref="F:System.Int64.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1944">The sum is larger than <see cref="F:System.Int64.MaxValue" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="994a2-1945">Aggregate — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-1945">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Sum">
      <MemberSignature Language="C#" Value="public static Nullable&lt;decimal&gt; Sum (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;decimal&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype System.Decimal&gt; Sum(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum (source As IEnumerable(Of Nullable(Of Decimal))) As Nullable(Of Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;System::Decimal&gt; Sum(System::Collections::Generic::IEnumerable&lt;Nullable&lt;System::Decimal&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;Nullable&lt;decimal&gt;&gt; -&gt; Nullable&lt;decimal&gt;" Usage="System.Linq.Enumerable.Sum source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Decimal&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="994a2-1946">Sekwencja wartości dopuszczająca wartość null <see cref="T:System.Decimal" /> w celu obliczenia sumy.</span><span class="sxs-lookup"><span data-stu-id="994a2-1946">A sequence of nullable <see cref="T:System.Decimal" /> values to calculate the sum of.</span></span></param>
        <summary><span data-ttu-id="994a2-1947">Oblicza sumę sekwencji wartości dopuszczających wartość null <see cref="T:System.Decimal" /> .</span><span class="sxs-lookup"><span data-stu-id="994a2-1947">Computes the sum of a sequence of nullable <see cref="T:System.Decimal" /> values.</span></span></summary>
        <returns><span data-ttu-id="994a2-1948">Suma wartości w sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1948">The sum of the values in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-1949">Ta metoda zwraca wartość zero `source` , jeśli nie zawiera żadnych elementów.</span><span class="sxs-lookup"><span data-stu-id="994a2-1949">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="994a2-1950">Wyniki udostępniono obejmują wartości, które są `null`.</span><span class="sxs-lookup"><span data-stu-id="994a2-1950">The result doesnot include values that are `null`.</span></span>  
  
 <span data-ttu-id="994a2-1951">W Visual Basic składni wyrażenia zapytania, `Aggregate Into Sum()` klauzula tłumaczy na <xref:System.Linq.Enumerable.Sum%2A>wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-1951">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-1952">Poniższy przykład kodu demonstruje, jak używać <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> do sumowania wartości sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1952">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> to sum the values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#121](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#121)]
 [!code-vb[System.Linq.Enumerable#121](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#121)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-1953"><paramref name="source" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1953"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="994a2-1954">Suma jest większa niż <see cref="F:System.Decimal.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1954">The sum is larger than <see cref="F:System.Decimal.MaxValue" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="994a2-1955">Aggregate — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-1955">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Sum">
      <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Sum (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;double&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Sum(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;float64&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum (source As IEnumerable(Of Nullable(Of Double))) As Nullable(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;double&gt; Sum(System::Collections::Generic::IEnumerable&lt;Nullable&lt;double&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;Nullable&lt;double&gt;&gt; -&gt; Nullable&lt;double&gt;" Usage="System.Linq.Enumerable.Sum source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Double&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="994a2-1956">Sekwencja wartości dopuszczająca wartość null <see cref="T:System.Double" /> w celu obliczenia sumy.</span><span class="sxs-lookup"><span data-stu-id="994a2-1956">A sequence of nullable <see cref="T:System.Double" /> values to calculate the sum of.</span></span></param>
        <summary><span data-ttu-id="994a2-1957">Oblicza sumę sekwencji wartości dopuszczających wartość null <see cref="T:System.Double" /> .</span><span class="sxs-lookup"><span data-stu-id="994a2-1957">Computes the sum of a sequence of nullable <see cref="T:System.Double" /> values.</span></span></summary>
        <returns><span data-ttu-id="994a2-1958">Suma wartości w sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1958">The sum of the values in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-1959">Ta metoda zwraca wartość zero `source` , jeśli nie zawiera żadnych elementów.</span><span class="sxs-lookup"><span data-stu-id="994a2-1959">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="994a2-1960">Wynik nie zawiera wartości, które są `null`.</span><span class="sxs-lookup"><span data-stu-id="994a2-1960">The result does not include values that are `null`.</span></span>  
  
 <span data-ttu-id="994a2-1961">W Visual Basic składni wyrażenia zapytania, `Aggregate Into Sum()` klauzula tłumaczy na <xref:System.Linq.Enumerable.Sum%2A>wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-1961">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-1962">Poniższy przykład kodu demonstruje, jak używać <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> do sumowania wartości sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1962">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> to sum the values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#121](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#121)]
 [!code-vb[System.Linq.Enumerable#121](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#121)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-1963"><paramref name="source" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1963"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="994a2-1964">Aggregate — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-1964">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Sum">
      <MemberSignature Language="C#" Value="public static Nullable&lt;int&gt; Sum (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;int&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int32&gt; Sum(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;int32&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum (source As IEnumerable(Of Nullable(Of Integer))) As Nullable(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;int&gt; Sum(System::Collections::Generic::IEnumerable&lt;Nullable&lt;int&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;Nullable&lt;int&gt;&gt; -&gt; Nullable&lt;int&gt;" Usage="System.Linq.Enumerable.Sum source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Int32&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="994a2-1965">Sekwencja wartości dopuszczająca wartość null <see cref="T:System.Int32" /> w celu obliczenia sumy.</span><span class="sxs-lookup"><span data-stu-id="994a2-1965">A sequence of nullable <see cref="T:System.Int32" /> values to calculate the sum of.</span></span></param>
        <summary><span data-ttu-id="994a2-1966">Oblicza sumę sekwencji wartości dopuszczających wartość null <see cref="T:System.Int32" /> .</span><span class="sxs-lookup"><span data-stu-id="994a2-1966">Computes the sum of a sequence of nullable <see cref="T:System.Int32" /> values.</span></span></summary>
        <returns><span data-ttu-id="994a2-1967">Suma wartości w sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1967">The sum of the values in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-1968">Ta metoda zwraca wartość zero `source` , jeśli nie zawiera żadnych elementów.</span><span class="sxs-lookup"><span data-stu-id="994a2-1968">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="994a2-1969">Wynik nie zawiera wartości, które są `null`.</span><span class="sxs-lookup"><span data-stu-id="994a2-1969">The result does not include values that are `null`.</span></span>  
  
 <span data-ttu-id="994a2-1970">W Visual Basic składni wyrażenia zapytania, `Aggregate Into Sum()` klauzula tłumaczy na <xref:System.Linq.Enumerable.Sum%2A>wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-1970">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-1971">Poniższy przykład kodu demonstruje, jak używać <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> do sumowania wartości sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1971">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> to sum the values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#121](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#121)]
 [!code-vb[System.Linq.Enumerable#121](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#121)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-1972"><paramref name="source" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1972"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="994a2-1973">Suma jest większa niż <see cref="F:System.Int32.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1973">The sum is larger than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="994a2-1974">Aggregate — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-1974">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Sum">
      <MemberSignature Language="C#" Value="public static Nullable&lt;long&gt; Sum (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;long&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int64&gt; Sum(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;int64&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum (source As IEnumerable(Of Nullable(Of Long))) As Nullable(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;long&gt; Sum(System::Collections::Generic::IEnumerable&lt;Nullable&lt;long&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;Nullable&lt;int64&gt;&gt; -&gt; Nullable&lt;int64&gt;" Usage="System.Linq.Enumerable.Sum source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Int64&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="994a2-1975">Sekwencja wartości dopuszczająca wartość null <see cref="T:System.Int64" /> w celu obliczenia sumy.</span><span class="sxs-lookup"><span data-stu-id="994a2-1975">A sequence of nullable <see cref="T:System.Int64" /> values to calculate the sum of.</span></span></param>
        <summary><span data-ttu-id="994a2-1976">Oblicza sumę sekwencji wartości dopuszczających wartość null <see cref="T:System.Int64" /> .</span><span class="sxs-lookup"><span data-stu-id="994a2-1976">Computes the sum of a sequence of nullable <see cref="T:System.Int64" /> values.</span></span></summary>
        <returns><span data-ttu-id="994a2-1977">Suma wartości w sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1977">The sum of the values in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-1978">Ta metoda zwraca wartość zero `source` , jeśli nie zawiera żadnych elementów.</span><span class="sxs-lookup"><span data-stu-id="994a2-1978">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="994a2-1979">Wynik nie zawiera wartości, które są `null`.</span><span class="sxs-lookup"><span data-stu-id="994a2-1979">The result does not include values that are `null`.</span></span>  
  
 <span data-ttu-id="994a2-1980">W Visual Basic składni wyrażenia zapytania, `Aggregate Into Sum()` klauzula tłumaczy na <xref:System.Linq.Enumerable.Sum%2A>wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-1980">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-1981">Poniższy przykład kodu demonstruje, jak używać <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> do sumowania wartości sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1981">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> to sum the values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#121](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#121)]
 [!code-vb[System.Linq.Enumerable#121](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#121)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-1982"><paramref name="source" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1982"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="994a2-1983">Suma jest większa niż <see cref="F:System.Int64.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1983">The sum is larger than <see cref="F:System.Int64.MaxValue" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="994a2-1984">Aggregate — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-1984">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Sum">
      <MemberSignature Language="C#" Value="public static Nullable&lt;float&gt; Sum (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;float&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float32&gt; Sum(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;float32&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum (source As IEnumerable(Of Nullable(Of Single))) As Nullable(Of Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;float&gt; Sum(System::Collections::Generic::IEnumerable&lt;Nullable&lt;float&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;Nullable&lt;single&gt;&gt; -&gt; Nullable&lt;single&gt;" Usage="System.Linq.Enumerable.Sum source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Single&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="994a2-1985">Sekwencja wartości dopuszczająca wartość null <see cref="T:System.Single" /> w celu obliczenia sumy.</span><span class="sxs-lookup"><span data-stu-id="994a2-1985">A sequence of nullable <see cref="T:System.Single" /> values to calculate the sum of.</span></span></param>
        <summary><span data-ttu-id="994a2-1986">Oblicza sumę sekwencji wartości dopuszczających wartość null <see cref="T:System.Single" /> .</span><span class="sxs-lookup"><span data-stu-id="994a2-1986">Computes the sum of a sequence of nullable <see cref="T:System.Single" /> values.</span></span></summary>
        <returns><span data-ttu-id="994a2-1987">Suma wartości w sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1987">The sum of the values in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-1988">Ta metoda zwraca wartość zero `source` , jeśli nie zawiera żadnych elementów.</span><span class="sxs-lookup"><span data-stu-id="994a2-1988">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="994a2-1989">Wynik nie zawiera wartości, które są `null`.</span><span class="sxs-lookup"><span data-stu-id="994a2-1989">The result does not include values that are `null`.</span></span>  
  
 <span data-ttu-id="994a2-1990">W Visual Basic składni wyrażenia zapytania, `Aggregate Into Sum()` klauzula tłumaczy na <xref:System.Linq.Enumerable.Sum%2A>wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-1990">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-1991">Poniższy przykład kodu demonstruje, jak używać <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> do sumowania wartości sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1991">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> to sum the values of a sequence.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#121](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#121)]
 [!code-vb[System.Linq.Enumerable#121](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#121)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-1992"><paramref name="source" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-1992"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="994a2-1993">Aggregate — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-1993">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Sum">
      <MemberSignature Language="C#" Value="public static float Sum (this System.Collections.Generic.IEnumerable&lt;float&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Sum(class System.Collections.Generic.IEnumerable`1&lt;float32&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Single})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum (source As IEnumerable(Of Single)) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static float Sum(System::Collections::Generic::IEnumerable&lt;float&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;single&gt; -&gt; single" Usage="System.Linq.Enumerable.Sum source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Single&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source"><span data-ttu-id="994a2-1994">Sekwencja <see cref="T:System.Single" /> wartości do obliczania sumy.</span><span class="sxs-lookup"><span data-stu-id="994a2-1994">A sequence of <see cref="T:System.Single" /> values to calculate the sum of.</span></span></param>
        <summary><span data-ttu-id="994a2-1995">Oblicza sumę sekwencji <see cref="T:System.Single" /> wartości.</span><span class="sxs-lookup"><span data-stu-id="994a2-1995">Computes the sum of a sequence of <see cref="T:System.Single" /> values.</span></span></summary>
        <returns><span data-ttu-id="994a2-1996">Suma wartości w sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1996">The sum of the values in the sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-1997">Ta metoda zwraca wartość zero `source` , jeśli nie zawiera żadnych elementów.</span><span class="sxs-lookup"><span data-stu-id="994a2-1997">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="994a2-1998">W Visual Basic składni wyrażenia zapytania, `Aggregate Into Sum()` klauzula tłumaczy na <xref:System.Linq.Enumerable.Sum%2A>wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-1998">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-1999">Poniższy przykład kodu demonstruje, jak używać <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29> do sumowania wartości sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-1999">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29> to sum the values of a sequence.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#120](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#120)]
 [!code-vb[System.Linq.Enumerable#120](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#120)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-2000"><paramref name="source" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-2000"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="994a2-2001">Aggregate — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-2001">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Sum&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static decimal Sum&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,decimal&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Sum&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Decimal&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Decimal)) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Decimal Sum(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, System::Decimal&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;'Source&gt; * Func&lt;'Source, decimal&gt; -&gt; decimal" Usage="System.Linq.Enumerable.Sum (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Decimal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-2002">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-2002">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-2003">Sekwencja wartości, które są używane do obliczania sumy.</span><span class="sxs-lookup"><span data-stu-id="994a2-2003">A sequence of values that are used to calculate a sum.</span></span></param>
        <param name="selector"><span data-ttu-id="994a2-2004">Funkcja transformacji do zastosowania do każdego elementu.</span><span class="sxs-lookup"><span data-stu-id="994a2-2004">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="994a2-2005">Oblicza sumę sekwencji <see cref="T:System.Decimal" /> wartości uzyskanych przez wywołanie funkcji Transform dla każdego elementu sekwencji wejściowej.</span><span class="sxs-lookup"><span data-stu-id="994a2-2005">Computes the sum of the sequence of <see cref="T:System.Decimal" /> values that are obtained by invoking a transform function on each element of the input sequence.</span></span></summary>
        <returns><span data-ttu-id="994a2-2006">Suma przewidywanych wartości.</span><span class="sxs-lookup"><span data-stu-id="994a2-2006">The sum of the projected values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-2007">Ta metoda zwraca wartość zero `source` , jeśli nie zawiera żadnych elementów.</span><span class="sxs-lookup"><span data-stu-id="994a2-2007">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="994a2-2008">Tę metodę można zastosować do sekwencji dowolnych wartości, jeśli podajesz funkcję, `selector`która projektuje `source` elementy członkowskie do typu <xref:System.Decimal>liczbowego.</span><span class="sxs-lookup"><span data-stu-id="994a2-2008">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Decimal>.</span></span>  
  
 <span data-ttu-id="994a2-2009">W Visual Basic składni wyrażenia zapytania, `Aggregate Into Sum()` klauzula tłumaczy na <xref:System.Linq.Enumerable.Sum%2A>wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-2009">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-2010">Poniższy przykład kodu demonstruje sposób użycia <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> do sumowania prognozowanych wartości sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-2010">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> to sum the projected values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#98](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#98)]
 [!code-vb[System.Linq.Enumerable#98](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#98)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-2011"><paramref name="source" />lub <paramref name="selector" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-2011"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="994a2-2012">Suma jest większa niż <see cref="F:System.Decimal.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-2012">The sum is larger than <see cref="F:System.Decimal.MaxValue" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="994a2-2013">Aggregate — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-2013">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Sum&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static double Sum&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,double&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Sum&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, float64&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Double)) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static double Sum(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, double&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;'Source&gt; * Func&lt;'Source, double&gt; -&gt; double" Usage="System.Linq.Enumerable.Sum (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Double&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-2014">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-2014">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-2015">Sekwencja wartości, które są używane do obliczania sumy.</span><span class="sxs-lookup"><span data-stu-id="994a2-2015">A sequence of values that are used to calculate a sum.</span></span></param>
        <param name="selector"><span data-ttu-id="994a2-2016">Funkcja transformacji do zastosowania do każdego elementu.</span><span class="sxs-lookup"><span data-stu-id="994a2-2016">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="994a2-2017">Oblicza sumę sekwencji <see cref="T:System.Double" /> wartości uzyskanych przez wywołanie funkcji Transform dla każdego elementu sekwencji wejściowej.</span><span class="sxs-lookup"><span data-stu-id="994a2-2017">Computes the sum of the sequence of <see cref="T:System.Double" /> values that are obtained by invoking a transform function on each element of the input sequence.</span></span></summary>
        <returns><span data-ttu-id="994a2-2018">Suma przewidywanych wartości.</span><span class="sxs-lookup"><span data-stu-id="994a2-2018">The sum of the projected values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-2019">Ta metoda zwraca wartość zero `source` , jeśli nie zawiera żadnych elementów.</span><span class="sxs-lookup"><span data-stu-id="994a2-2019">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="994a2-2020">Tę metodę można zastosować do sekwencji dowolnych wartości, jeśli podajesz funkcję, `selector`która projektuje `source` elementy członkowskie do typu <xref:System.Double>liczbowego.</span><span class="sxs-lookup"><span data-stu-id="994a2-2020">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Double>.</span></span>  
  
 <span data-ttu-id="994a2-2021">W Visual Basic składni wyrażenia zapytania, `Aggregate Into Sum()` klauzula tłumaczy na <xref:System.Linq.Enumerable.Sum%2A>wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-2021">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-2022">Poniższy przykład kodu demonstruje sposób użycia <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> do sumowania prognozowanych wartości sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-2022">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> to sum the projected values of a sequence.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#98](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#98)]
 [!code-vb[System.Linq.Enumerable#98](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#98)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-2023"><paramref name="source" />lub <paramref name="selector" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-2023"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="994a2-2024">Aggregate — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-2024">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Sum&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static int Sum&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,int&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Sum&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, int32&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Integer)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int Sum(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, int&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;'Source&gt; * Func&lt;'Source, int&gt; -&gt; int" Usage="System.Linq.Enumerable.Sum (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Int32&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-2025">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-2025">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-2026">Sekwencja wartości, które są używane do obliczania sumy.</span><span class="sxs-lookup"><span data-stu-id="994a2-2026">A sequence of values that are used to calculate a sum.</span></span></param>
        <param name="selector"><span data-ttu-id="994a2-2027">Funkcja transformacji do zastosowania do każdego elementu.</span><span class="sxs-lookup"><span data-stu-id="994a2-2027">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="994a2-2028">Oblicza sumę sekwencji <see cref="T:System.Int32" /> wartości uzyskanych przez wywołanie funkcji Transform dla każdego elementu sekwencji wejściowej.</span><span class="sxs-lookup"><span data-stu-id="994a2-2028">Computes the sum of the sequence of <see cref="T:System.Int32" /> values that are obtained by invoking a transform function on each element of the input sequence.</span></span></summary>
        <returns><span data-ttu-id="994a2-2029">Suma przewidywanych wartości.</span><span class="sxs-lookup"><span data-stu-id="994a2-2029">The sum of the projected values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-2030">Ta metoda zwraca wartość zero `source` , jeśli nie zawiera żadnych elementów.</span><span class="sxs-lookup"><span data-stu-id="994a2-2030">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="994a2-2031">Tę metodę można zastosować do sekwencji dowolnych wartości, jeśli podajesz funkcję, `selector`która projektuje `source` elementy członkowskie do typu <xref:System.Int32>liczbowego.</span><span class="sxs-lookup"><span data-stu-id="994a2-2031">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Int32>.</span></span>  
  
 <span data-ttu-id="994a2-2032">W Visual Basic składni wyrażenia zapytania, `Aggregate Into Sum()` klauzula tłumaczy na <xref:System.Linq.Enumerable.Sum%2A>wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-2032">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-2033">Poniższy przykład kodu demonstruje sposób użycia <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> do sumowania prognozowanych wartości sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-2033">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> to sum the projected values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#98](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#98)]
 [!code-vb[System.Linq.Enumerable#98](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#98)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-2034"><paramref name="source" />lub <paramref name="selector" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-2034"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="994a2-2035">Suma jest większa niż <see cref="F:System.Int32.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-2035">The sum is larger than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="994a2-2036">Aggregate — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-2036">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Sum&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static long Sum&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,long&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Sum&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, int64&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Long)) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static long Sum(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, long&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;'Source&gt; * Func&lt;'Source, int64&gt; -&gt; int64" Usage="System.Linq.Enumerable.Sum (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Int64&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-2037">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-2037">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-2038">Sekwencja wartości, które są używane do obliczania sumy.</span><span class="sxs-lookup"><span data-stu-id="994a2-2038">A sequence of values that are used to calculate a sum.</span></span></param>
        <param name="selector"><span data-ttu-id="994a2-2039">Funkcja transformacji do zastosowania do każdego elementu.</span><span class="sxs-lookup"><span data-stu-id="994a2-2039">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="994a2-2040">Oblicza sumę sekwencji <see cref="T:System.Int64" /> wartości uzyskanych przez wywołanie funkcji Transform dla każdego elementu sekwencji wejściowej.</span><span class="sxs-lookup"><span data-stu-id="994a2-2040">Computes the sum of the sequence of <see cref="T:System.Int64" /> values that are obtained by invoking a transform function on each element of the input sequence.</span></span></summary>
        <returns><span data-ttu-id="994a2-2041">Suma przewidywanych wartości.</span><span class="sxs-lookup"><span data-stu-id="994a2-2041">The sum of the projected values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-2042">Ta metoda zwraca wartość zero `source` , jeśli nie zawiera żadnych elementów.</span><span class="sxs-lookup"><span data-stu-id="994a2-2042">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="994a2-2043">Tę metodę można zastosować do sekwencji dowolnych wartości, jeśli podajesz funkcję, `selector`która projektuje `source` elementy członkowskie do typu <xref:System.Int64>liczbowego.</span><span class="sxs-lookup"><span data-stu-id="994a2-2043">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Int64>.</span></span>  
  
 <span data-ttu-id="994a2-2044">W Visual Basic składni wyrażenia zapytania, `Aggregate Into Sum()` klauzula tłumaczy na <xref:System.Linq.Enumerable.Sum%2A>wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-2044">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-2045">Poniższy przykład kodu demonstruje sposób użycia <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> do sumowania prognozowanych wartości sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-2045">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> to sum the projected values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#98](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#98)]
 [!code-vb[System.Linq.Enumerable#98](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#98)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-2046"><paramref name="source" />lub <paramref name="selector" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-2046"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="994a2-2047">Suma jest większa niż <see cref="F:System.Int64.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-2047">The sum is larger than <see cref="F:System.Int64.MaxValue" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="994a2-2048">Aggregate — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-2048">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Sum&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;decimal&gt; Sum&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;decimal&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype System.Decimal&gt; Sum&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Decimal))) As Nullable(Of Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;System::Decimal&gt; Sum(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;System::Decimal&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;decimal&gt;&gt; -&gt; Nullable&lt;decimal&gt;" Usage="System.Linq.Enumerable.Sum (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Decimal&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-2049">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-2049">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-2050">Sekwencja wartości, które są używane do obliczania sumy.</span><span class="sxs-lookup"><span data-stu-id="994a2-2050">A sequence of values that are used to calculate a sum.</span></span></param>
        <param name="selector"><span data-ttu-id="994a2-2051">Funkcja transformacji do zastosowania do każdego elementu.</span><span class="sxs-lookup"><span data-stu-id="994a2-2051">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="994a2-2052">Oblicza sumę sekwencji wartości dopuszczających wartość null <see cref="T:System.Decimal" /> , które są uzyskiwane przez wywołanie funkcji przekształcania dla każdego elementu sekwencji wejściowej.</span><span class="sxs-lookup"><span data-stu-id="994a2-2052">Computes the sum of the sequence of nullable <see cref="T:System.Decimal" /> values that are obtained by invoking a transform function on each element of the input sequence.</span></span></summary>
        <returns><span data-ttu-id="994a2-2053">Suma przewidywanych wartości.</span><span class="sxs-lookup"><span data-stu-id="994a2-2053">The sum of the projected values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-2054">Ta metoda zwraca wartość zero `source` , jeśli nie zawiera żadnych elementów.</span><span class="sxs-lookup"><span data-stu-id="994a2-2054">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="994a2-2055">Wynik nie zawiera wartości, które są `null`.</span><span class="sxs-lookup"><span data-stu-id="994a2-2055">The result does not included values that are `null`.</span></span>  
  
 <span data-ttu-id="994a2-2056">Tę metodę można zastosować do sekwencji dowolnych wartości, jeśli podajesz funkcję, `selector`która zawiera projekty `source` elementów członkowskich do typu liczbowego, `Nullable<Decimal>` w tym w C# lub `Nullable(Of Decimal)` w Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="994a2-2056">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Decimal>` in C# or `Nullable(Of Decimal)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="994a2-2057">W Visual Basic składni wyrażenia zapytania, `Aggregate Into Sum()` klauzula tłumaczy na <xref:System.Linq.Enumerable.Sum%2A>wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-2057">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-2058">Poniższy przykład kodu demonstruje sposób użycia <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> do sumowania prognozowanych wartości sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-2058">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> to sum the projected values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#98](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#98)]
 [!code-vb[System.Linq.Enumerable#98](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#98)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-2059"><paramref name="source" />lub <paramref name="selector" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-2059"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="994a2-2060">Suma jest większa niż <see cref="F:System.Decimal.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-2060">The sum is larger than <see cref="F:System.Decimal.MaxValue" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="994a2-2061">Aggregate — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-2061">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Sum&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Sum&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;double&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Sum&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;float64&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Double))) As Nullable(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;double&gt; Sum(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;double&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;double&gt;&gt; -&gt; Nullable&lt;double&gt;" Usage="System.Linq.Enumerable.Sum (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Double&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-2062">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-2062">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-2063">Sekwencja wartości, które są używane do obliczania sumy.</span><span class="sxs-lookup"><span data-stu-id="994a2-2063">A sequence of values that are used to calculate a sum.</span></span></param>
        <param name="selector"><span data-ttu-id="994a2-2064">Funkcja transformacji do zastosowania do każdego elementu.</span><span class="sxs-lookup"><span data-stu-id="994a2-2064">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="994a2-2065">Oblicza sumę sekwencji wartości dopuszczających wartość null <see cref="T:System.Double" /> , które są uzyskiwane przez wywołanie funkcji przekształcania dla każdego elementu sekwencji wejściowej.</span><span class="sxs-lookup"><span data-stu-id="994a2-2065">Computes the sum of the sequence of nullable <see cref="T:System.Double" /> values that are obtained by invoking a transform function on each element of the input sequence.</span></span></summary>
        <returns><span data-ttu-id="994a2-2066">Suma przewidywanych wartości.</span><span class="sxs-lookup"><span data-stu-id="994a2-2066">The sum of the projected values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-2067">Ta metoda zwraca wartość zero `source` , jeśli nie zawiera żadnych elementów.</span><span class="sxs-lookup"><span data-stu-id="994a2-2067">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="994a2-2068">Wynik nie zawiera wartości, które są `null`.</span><span class="sxs-lookup"><span data-stu-id="994a2-2068">The result does not include values that are `null`.</span></span>  
  
 <span data-ttu-id="994a2-2069">Tę metodę można zastosować do sekwencji dowolnych wartości, jeśli podajesz funkcję, `selector`która zawiera projekty `source` elementów członkowskich do typu liczbowego, `Nullable<Double>` w tym w C# lub `Nullable(Of Double)` w Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="994a2-2069">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Double>` in C# or `Nullable(Of Double)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="994a2-2070">W Visual Basic składni wyrażenia zapytania, `Aggregate Into Sum()` klauzula tłumaczy na <xref:System.Linq.Enumerable.Sum%2A>wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-2070">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-2071">Poniższy przykład kodu demonstruje sposób użycia <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> do sumowania prognozowanych wartości sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-2071">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> to sum the projected values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#98](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#98)]
 [!code-vb[System.Linq.Enumerable#98](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#98)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-2072"><paramref name="source" />lub <paramref name="selector" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-2072"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="994a2-2073">Aggregate — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-2073">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Sum&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;int&gt; Sum&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;int&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int32&gt; Sum&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;int32&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Integer))) As Nullable(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;int&gt; Sum(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;int&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;int&gt;&gt; -&gt; Nullable&lt;int&gt;" Usage="System.Linq.Enumerable.Sum (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Int32&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-2074">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-2074">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-2075">Sekwencja wartości, które są używane do obliczania sumy.</span><span class="sxs-lookup"><span data-stu-id="994a2-2075">A sequence of values that are used to calculate a sum.</span></span></param>
        <param name="selector"><span data-ttu-id="994a2-2076">Funkcja transformacji do zastosowania do każdego elementu.</span><span class="sxs-lookup"><span data-stu-id="994a2-2076">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="994a2-2077">Oblicza sumę sekwencji wartości dopuszczających wartość null <see cref="T:System.Int32" /> , które są uzyskiwane przez wywołanie funkcji przekształcania dla każdego elementu sekwencji wejściowej.</span><span class="sxs-lookup"><span data-stu-id="994a2-2077">Computes the sum of the sequence of nullable <see cref="T:System.Int32" /> values that are obtained by invoking a transform function on each element of the input sequence.</span></span></summary>
        <returns><span data-ttu-id="994a2-2078">Suma przewidywanych wartości.</span><span class="sxs-lookup"><span data-stu-id="994a2-2078">The sum of the projected values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-2079">Ta metoda zwraca wartość zero `source` , jeśli nie zawiera żadnych elementów.</span><span class="sxs-lookup"><span data-stu-id="994a2-2079">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="994a2-2080">Wynik nie zawiera wartości, które są `null`.</span><span class="sxs-lookup"><span data-stu-id="994a2-2080">The result does not include values that are `null`.</span></span>  
  
 <span data-ttu-id="994a2-2081">Tę metodę można zastosować do sekwencji dowolnych wartości, jeśli podajesz funkcję, `selector`która zawiera projekty `source` elementów członkowskich do typu liczbowego, `Nullable<Int32>` w tym w C# lub `Nullable(Of Int32)` w Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="994a2-2081">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Int32>` in C# or `Nullable(Of Int32)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="994a2-2082">W Visual Basic składni wyrażenia zapytania, `Aggregate Into Sum()` klauzula tłumaczy na <xref:System.Linq.Enumerable.Sum%2A>wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-2082">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-2083">Poniższy przykład kodu demonstruje sposób użycia <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> do sumowania prognozowanych wartości sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-2083">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> to sum the projected values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#98](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#98)]
 [!code-vb[System.Linq.Enumerable#98](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#98)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-2084"><paramref name="source" />lub <paramref name="selector" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-2084"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="994a2-2085">Suma jest większa niż <see cref="F:System.Int32.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-2085">The sum is larger than <see cref="F:System.Int32.MaxValue" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="994a2-2086">Aggregate — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-2086">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Sum&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;long&gt; Sum&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;long&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int64&gt; Sum&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;int64&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Long))) As Nullable(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;long&gt; Sum(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;long&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;int64&gt;&gt; -&gt; Nullable&lt;int64&gt;" Usage="System.Linq.Enumerable.Sum (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Int64&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-2087">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-2087">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-2088">Sekwencja wartości, które są używane do obliczania sumy.</span><span class="sxs-lookup"><span data-stu-id="994a2-2088">A sequence of values that are used to calculate a sum.</span></span></param>
        <param name="selector"><span data-ttu-id="994a2-2089">Funkcja transformacji do zastosowania do każdego elementu.</span><span class="sxs-lookup"><span data-stu-id="994a2-2089">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="994a2-2090">Oblicza sumę sekwencji wartości dopuszczających wartość null <see cref="T:System.Int64" /> , które są uzyskiwane przez wywołanie funkcji przekształcania dla każdego elementu sekwencji wejściowej.</span><span class="sxs-lookup"><span data-stu-id="994a2-2090">Computes the sum of the sequence of nullable <see cref="T:System.Int64" /> values that are obtained by invoking a transform function on each element of the input sequence.</span></span></summary>
        <returns><span data-ttu-id="994a2-2091">Suma przewidywanych wartości.</span><span class="sxs-lookup"><span data-stu-id="994a2-2091">The sum of the projected values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-2092">Ta metoda zwraca wartość zero `source` , jeśli nie zawiera żadnych elementów.</span><span class="sxs-lookup"><span data-stu-id="994a2-2092">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="994a2-2093">Wynik nie zawiera wartości, które są `null`.</span><span class="sxs-lookup"><span data-stu-id="994a2-2093">The result does not include values that are `null`.</span></span>  
  
 <span data-ttu-id="994a2-2094">Tę metodę można zastosować do sekwencji dowolnych wartości, jeśli podajesz funkcję, `selector`która zawiera projekty `source` elementów członkowskich do typu liczbowego, `Nullable<Int64>` w tym w C# lub `Nullable(Of Int64)` w Visual Basic</span><span class="sxs-lookup"><span data-stu-id="994a2-2094">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Int64>` in C# or `Nullable(Of Int64)` in Visual Basic</span></span>  
  
 <span data-ttu-id="994a2-2095">W Visual Basic składni wyrażenia zapytania, `Aggregate Into Sum()` klauzula tłumaczy na <xref:System.Linq.Enumerable.Sum%2A>wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-2095">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-2096">Poniższy przykład kodu demonstruje sposób użycia <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> do sumowania prognozowanych wartości sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-2096">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> to sum the projected values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#98](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#98)]
 [!code-vb[System.Linq.Enumerable#98](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#98)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-2097"><paramref name="source" />lub <paramref name="selector" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-2097"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.OverflowException"><span data-ttu-id="994a2-2098">Suma jest większa niż <see cref="F:System.Int64.MaxValue" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-2098">The sum is larger than <see cref="F:System.Int64.MaxValue" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="994a2-2099">Aggregate — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-2099">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Sum&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;float&gt; Sum&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;float&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float32&gt; Sum&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;float32&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Single))) As Nullable(Of Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;float&gt; Sum(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;float&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;single&gt;&gt; -&gt; Nullable&lt;single&gt;" Usage="System.Linq.Enumerable.Sum (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Single&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-2100">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-2100">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-2101">Sekwencja wartości, które są używane do obliczania sumy.</span><span class="sxs-lookup"><span data-stu-id="994a2-2101">A sequence of values that are used to calculate a sum.</span></span></param>
        <param name="selector"><span data-ttu-id="994a2-2102">Funkcja transformacji do zastosowania do każdego elementu.</span><span class="sxs-lookup"><span data-stu-id="994a2-2102">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="994a2-2103">Oblicza sumę sekwencji wartości dopuszczających wartość null <see cref="T:System.Single" /> , które są uzyskiwane przez wywołanie funkcji przekształcania dla każdego elementu sekwencji wejściowej.</span><span class="sxs-lookup"><span data-stu-id="994a2-2103">Computes the sum of the sequence of nullable <see cref="T:System.Single" /> values that are obtained by invoking a transform function on each element of the input sequence.</span></span></summary>
        <returns><span data-ttu-id="994a2-2104">Suma przewidywanych wartości.</span><span class="sxs-lookup"><span data-stu-id="994a2-2104">The sum of the projected values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-2105">Ta metoda zwraca wartość zero `source` , jeśli nie zawiera żadnych elementów.</span><span class="sxs-lookup"><span data-stu-id="994a2-2105">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="994a2-2106">Wynik nie zawiera wartości, które są `null`.</span><span class="sxs-lookup"><span data-stu-id="994a2-2106">The result does not include values that are `null`.</span></span>  
  
 <span data-ttu-id="994a2-2107">Tę metodę można zastosować do sekwencji dowolnych wartości, jeśli podajesz funkcję, `selector`która zawiera projekty `source` elementów członkowskich do typu liczbowego, `Nullable<Single>` w tym w C# lub `Nullable(Of Single)` w Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="994a2-2107">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Single>` in C# or `Nullable(Of Single)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="994a2-2108">W Visual Basic składni wyrażenia zapytania, `Aggregate Into Sum()` klauzula tłumaczy na <xref:System.Linq.Enumerable.Sum%2A>wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-2108">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-2109">Poniższy przykład kodu demonstruje sposób użycia <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> do sumowania prognozowanych wartości sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-2109">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> to sum the projected values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#98](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#98)]
 [!code-vb[System.Linq.Enumerable#98](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#98)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-2110"><paramref name="source" />lub <paramref name="selector" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-2110"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="994a2-2111">Aggregate — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-2111">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Sum&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static float Sum&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,float&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Sum&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, float32&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Single)) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static float Sum(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, float&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;'Source&gt; * Func&lt;'Source, single&gt; -&gt; single" Usage="System.Linq.Enumerable.Sum (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Single&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-2112">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-2112">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-2113">Sekwencja wartości, które są używane do obliczania sumy.</span><span class="sxs-lookup"><span data-stu-id="994a2-2113">A sequence of values that are used to calculate a sum.</span></span></param>
        <param name="selector"><span data-ttu-id="994a2-2114">Funkcja transformacji do zastosowania do każdego elementu.</span><span class="sxs-lookup"><span data-stu-id="994a2-2114">A transform function to apply to each element.</span></span></param>
        <summary><span data-ttu-id="994a2-2115">Oblicza sumę sekwencji <see cref="T:System.Single" /> wartości uzyskanych przez wywołanie funkcji Transform dla każdego elementu sekwencji wejściowej.</span><span class="sxs-lookup"><span data-stu-id="994a2-2115">Computes the sum of the sequence of <see cref="T:System.Single" /> values that are obtained by invoking a transform function on each element of the input sequence.</span></span></summary>
        <returns><span data-ttu-id="994a2-2116">Suma przewidywanych wartości.</span><span class="sxs-lookup"><span data-stu-id="994a2-2116">The sum of the projected values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-2117">Metoda <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Single%7D%29> zwraca wartość zero, `source` Jeśli nie zawiera żadnych elementów.</span><span class="sxs-lookup"><span data-stu-id="994a2-2117">The <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Single%7D%29> method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="994a2-2118">Tę metodę można zastosować do sekwencji dowolnych wartości, jeśli podajesz funkcję, `selector`która projektuje `source` elementy członkowskie do typu <xref:System.Single>liczbowego.</span><span class="sxs-lookup"><span data-stu-id="994a2-2118">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Single>.</span></span>  
  
 <span data-ttu-id="994a2-2119">W Visual Basic składni wyrażenia zapytania, `Aggregate Into Sum()` klauzula tłumaczy na <xref:System.Linq.Enumerable.Sum%2A>wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-2119">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-2120">Poniższy przykład kodu demonstruje sposób użycia <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> do sumowania prognozowanych wartości sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-2120">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> to sum the projected values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#98](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#98)]
 [!code-vb[System.Linq.Enumerable#98](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#98)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-2121"><paramref name="source" />lub <paramref name="selector" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-2121"><paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/aggregate-clause.md"><span data-ttu-id="994a2-2122">Aggregate — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-2122">Aggregate Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Take&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Take&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Take&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Take(Of TSource) (source As IEnumerable(Of TSource), count As Integer) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ Take(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, int count);" />
      <MemberSignature Language="F#" Value="static member Take : seq&lt;'Source&gt; * int -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.Take (source, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-2123">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-2123">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-2124">Sekwencja, z której mają zostać zwrócone elementy.</span><span class="sxs-lookup"><span data-stu-id="994a2-2124">The sequence to return elements from.</span></span></param>
        <param name="count"><span data-ttu-id="994a2-2125">Liczba elementów do zwrócenia.</span><span class="sxs-lookup"><span data-stu-id="994a2-2125">The number of elements to return.</span></span></param>
        <summary><span data-ttu-id="994a2-2126">Zwraca określoną liczbę elementów sąsiadujących od początku sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-2126">Returns a specified number of contiguous elements from the start of a sequence.</span></span></summary>
        <returns><span data-ttu-id="994a2-2127">Element <see cref="T:System.Collections.Generic.IEnumerable`1" /> zawierający określoną liczbę elementów od początku sekwencji wejściowej.</span><span class="sxs-lookup"><span data-stu-id="994a2-2127">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the specified number of elements from the start of the input sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-2128">Ta metoda jest implementowana za pomocą odroczonego wykonania.</span><span class="sxs-lookup"><span data-stu-id="994a2-2128">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="994a2-2129">Bezpośrednio zwracana wartość jest obiektem, który przechowuje wszystkie informacje wymagane do wykonania akcji.</span><span class="sxs-lookup"><span data-stu-id="994a2-2129">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="994a2-2130">Zapytanie reprezentowane przez tę metodę nie jest wykonywane `GetEnumerator` do momentu wyliczenia obiektu przez wywołanie jego metody bezpośrednio lub przy użyciu `foreach` w wizualizacji C# lub `For Each` w Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="994a2-2130">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="994a2-2131"><xref:System.Linq.Enumerable.Take%2A>wylicza i generuje elementy do momentu `count` , gdy elementy zostały uzyskane lub `source` nie zawiera żadnych elementów. `source`</span><span class="sxs-lookup"><span data-stu-id="994a2-2131"><xref:System.Linq.Enumerable.Take%2A> enumerates `source` and yields elements until `count` elements have been yielded or `source` contains no more elements.</span></span> <span data-ttu-id="994a2-2132">Jeśli `count` przekracza liczbę elementów w `source`, zwracane są wszystkie elementy elementu `source` .</span><span class="sxs-lookup"><span data-stu-id="994a2-2132">If `count` exceeds the number of elements in `source`, all elements of `source` are returned.</span></span>  
  
 <span data-ttu-id="994a2-2133">Jeśli `count` jest mniejsza lub równa zero, `source` nie jest wyliczane i zwracany jest pusty <xref:System.Collections.Generic.IEnumerable%601> .</span><span class="sxs-lookup"><span data-stu-id="994a2-2133">If `count` is less than or equal to zero, `source` is not enumerated and an empty <xref:System.Collections.Generic.IEnumerable%601> is returned.</span></span>  
  
 <span data-ttu-id="994a2-2134">Metody <xref:System.Linq.Enumerable.Take%2A> i<xref:System.Linq.Enumerable.Skip%2A> są uzupełnieniem funkcjonalnym.</span><span class="sxs-lookup"><span data-stu-id="994a2-2134">The <xref:System.Linq.Enumerable.Take%2A> and <xref:System.Linq.Enumerable.Skip%2A> methods are functional complements.</span></span> <span data-ttu-id="994a2-2135">Podaną sekwencją `coll` i liczbę `n`całkowitą łączą wyniki `coll.Take(n)` i `coll.Skip(n)` dają tę samą sekwencję co `coll`.</span><span class="sxs-lookup"><span data-stu-id="994a2-2135">Given a sequence `coll` and an integer `n`, concatenating the results of `coll.Take(n)` and `coll.Skip(n)` yields the same sequence as `coll`.</span></span>  
  
 <span data-ttu-id="994a2-2136">W Visual Basic składni wyrażenia zapytania, `Take` klauzula tłumaczy na <xref:System.Linq.Enumerable.Take%2A>wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-2136">In Visual Basic query expression syntax, a `Take` clause translates to an invocation of <xref:System.Linq.Enumerable.Take%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-2137">Poniższy przykład kodu demonstruje, jak używać <xref:System.Linq.Enumerable.Take%2A> do zwracania elementów z początku sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-2137">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Take%2A> to return elements from the start of a sequence.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#99](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#99)]
 [!code-vb[System.Linq.Enumerable#99](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#99)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-2138"><paramref name="source" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-2138"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/take-clause.md"><span data-ttu-id="994a2-2139">Take — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-2139">Take Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="TakeLast&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; TakeLast&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; TakeLast&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.TakeLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TakeLast(Of TSource) (source As IEnumerable(Of TSource), count As Integer) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ TakeLast(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, int count);" />
      <MemberSignature Language="F#" Value="static member TakeLast : seq&lt;'Source&gt; * int -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.TakeLast (source, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
        <Parameter Name="count" Type="System.Int32" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netstandard-2.1" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">To be added.</typeparam>
        <param name="source">To be added.</param>
        <param name="count">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TakeWhile&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="994a2-2140">Zwraca elementy z sekwencji tak długo, jak określony warunek ma wartość true, a następnie pomija pozostałe elementy.</span><span class="sxs-lookup"><span data-stu-id="994a2-2140">Returns elements from a sequence as long as a specified condition is true, and then skips the remaining elements.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TakeWhile&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; TakeWhile&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; TakeWhile&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TakeWhile(Of TSource) (source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ TakeWhile(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member TakeWhile : seq&lt;'Source&gt; * Func&lt;'Source, bool&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.TakeWhile (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-2141">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-2141">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-2142">Sekwencja, z której mają zostać zwrócone elementy.</span><span class="sxs-lookup"><span data-stu-id="994a2-2142">A sequence to return elements from.</span></span></param>
        <param name="predicate"><span data-ttu-id="994a2-2143">Funkcja testowania każdego elementu na stanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-2143">A function to test each element for a condition.</span></span></param>
        <summary><span data-ttu-id="994a2-2144">Zwraca elementy z sekwencji tak długo, jak określony warunek ma wartość true.</span><span class="sxs-lookup"><span data-stu-id="994a2-2144">Returns elements from a sequence as long as a specified condition is true.</span></span></summary>
        <returns><span data-ttu-id="994a2-2145"><see cref="T:System.Collections.Generic.IEnumerable`1" /> Element zawierający elementy z sekwencji wejściowej, która występuje przed elementem, w którym test nie jest już przekazywany.</span><span class="sxs-lookup"><span data-stu-id="994a2-2145">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements from the input sequence that occur before the element at which the test no longer passes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-2146">Ta metoda jest implementowana za pomocą odroczonego wykonania.</span><span class="sxs-lookup"><span data-stu-id="994a2-2146">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="994a2-2147">Bezpośrednio zwracana wartość jest obiektem, który przechowuje wszystkie informacje wymagane do wykonania akcji.</span><span class="sxs-lookup"><span data-stu-id="994a2-2147">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="994a2-2148">Zapytanie reprezentowane przez tę metodę nie jest wykonywane `GetEnumerator` do momentu wyliczenia obiektu przez wywołanie jego metody bezpośrednio lub przy użyciu `foreach` w wizualizacji C# lub `For Each` w Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="994a2-2148">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="994a2-2149">Metoda sprawdza każdy `source` element przy użyciu `predicate` i daje element, jeśli wynik jest `true`. <xref:System.Linq.Enumerable.TakeWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29></span><span class="sxs-lookup"><span data-stu-id="994a2-2149">The <xref:System.Linq.Enumerable.TakeWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> method tests each element of `source` by using `predicate` and yields the element if the result is `true`.</span></span> <span data-ttu-id="994a2-2150">Wyliczenie jest zatrzymywane, gdy funkcja `false` predykatu zwraca dla elementu `source` lub gdy nie zawiera żadnych elementów.</span><span class="sxs-lookup"><span data-stu-id="994a2-2150">Enumeration stops when the predicate function returns `false` for an element or when `source` contains no more elements.</span></span>  
  
 <span data-ttu-id="994a2-2151">Metody <xref:System.Linq.Enumerable.TakeWhile%2A> i<xref:System.Linq.Enumerable.SkipWhile%2A> są uzupełnieniem funkcjonalnym.</span><span class="sxs-lookup"><span data-stu-id="994a2-2151">The <xref:System.Linq.Enumerable.TakeWhile%2A> and <xref:System.Linq.Enumerable.SkipWhile%2A> methods are functional complements.</span></span> <span data-ttu-id="994a2-2152">Uwzględniając sekwencję `coll` i czystą funkcję `p`, `coll.TakeWhile(p)` łączenie wyników i `coll.SkipWhile(p)` daje taką samą sekwencję jak `coll`.</span><span class="sxs-lookup"><span data-stu-id="994a2-2152">Given a sequence `coll` and a pure function `p`, concatenating the results of `coll.TakeWhile(p)` and `coll.SkipWhile(p)` yields the same sequence as `coll`.</span></span>  
  
 <span data-ttu-id="994a2-2153">W Visual Basic składni wyrażenia zapytania, `Take While` klauzula tłumaczy na <xref:System.Linq.Enumerable.TakeWhile%2A>wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-2153">In Visual Basic query expression syntax, a `Take While` clause translates to an invocation of <xref:System.Linq.Enumerable.TakeWhile%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-2154">Poniższy przykład kodu demonstruje, jak używać <xref:System.Linq.Enumerable.TakeWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> do zwracania elementów z początku sekwencji tak długo, jak warunek ma wartość true.</span><span class="sxs-lookup"><span data-stu-id="994a2-2154">The following code example demonstrates how to use <xref:System.Linq.Enumerable.TakeWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> to return elements from the start of a sequence as long as a condition is true.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#100](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#100)]
 [!code-vb[System.Linq.Enumerable#100](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#100)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-2155"><paramref name="source" />lub <paramref name="predicate" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-2155"><paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/take-while-clause.md"><span data-ttu-id="994a2-2156">Take While — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-2156">Take While Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="TakeWhile&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; TakeWhile&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,int,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; TakeWhile&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`3&lt;!!TSource, int32, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TakeWhile(Of TSource) (source As IEnumerable(Of TSource), predicate As Func(Of TSource, Integer, Boolean)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ TakeWhile(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, int, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member TakeWhile : seq&lt;'Source&gt; * Func&lt;'Source, int, bool&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.TakeWhile (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Int32,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-2157">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-2157">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-2158">Sekwencja, z której mają zostać zwrócone elementy.</span><span class="sxs-lookup"><span data-stu-id="994a2-2158">The sequence to return elements from.</span></span></param>
        <param name="predicate"><span data-ttu-id="994a2-2159">Funkcja do testowania każdego elementu źródłowego dla warunku; drugi parametr funkcji reprezentuje indeks elementu źródłowego.</span><span class="sxs-lookup"><span data-stu-id="994a2-2159">A function to test each source element for a condition; the second parameter of the function represents the index of the source element.</span></span></param>
        <summary><span data-ttu-id="994a2-2160">Zwraca elementy z sekwencji tak długo, jak określony warunek ma wartość true.</span><span class="sxs-lookup"><span data-stu-id="994a2-2160">Returns elements from a sequence as long as a specified condition is true.</span></span> <span data-ttu-id="994a2-2161">Indeks elementu jest używany w logice funkcji predykatu.</span><span class="sxs-lookup"><span data-stu-id="994a2-2161">The element's index is used in the logic of the predicate function.</span></span></summary>
        <returns><span data-ttu-id="994a2-2162"><see cref="T:System.Collections.Generic.IEnumerable`1" /> Zawiera elementy z sekwencji wejściowej, która występuje przed elementem, w którym test nie jest już przekazywany.</span><span class="sxs-lookup"><span data-stu-id="994a2-2162">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains elements from the input sequence that occur before the element at which the test no longer passes.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-2163">Ta metoda jest implementowana za pomocą odroczonego wykonania.</span><span class="sxs-lookup"><span data-stu-id="994a2-2163">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="994a2-2164">Bezpośrednio zwracana wartość jest obiektem, który przechowuje wszystkie informacje wymagane do wykonania akcji.</span><span class="sxs-lookup"><span data-stu-id="994a2-2164">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="994a2-2165">Zapytanie reprezentowane przez tę metodę nie jest wykonywane `GetEnumerator` do momentu wyliczenia obiektu przez wywołanie jego metody bezpośrednio lub przy użyciu `foreach` w wizualizacji C# lub `For Each` w Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="994a2-2165">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="994a2-2166">Metoda sprawdza każdy `source` element przy użyciu `predicate` i daje element, jeśli wynik jest `true`. <xref:System.Linq.Enumerable.TakeWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29></span><span class="sxs-lookup"><span data-stu-id="994a2-2166">The <xref:System.Linq.Enumerable.TakeWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29> method tests each element of `source` by using `predicate` and yields the element if the result is `true`.</span></span> <span data-ttu-id="994a2-2167">Wyliczenie jest zatrzymywane, gdy funkcja `false` predykatu zwraca dla elementu `source` lub gdy nie zawiera żadnych elementów.</span><span class="sxs-lookup"><span data-stu-id="994a2-2167">Enumeration stops when the predicate function returns `false` for an element or when `source` contains no more elements.</span></span>  
  
 <span data-ttu-id="994a2-2168">Pierwszy argument `predicate` przedstawia element do przetestowania.</span><span class="sxs-lookup"><span data-stu-id="994a2-2168">The first argument of `predicate` represents the element to test.</span></span> <span data-ttu-id="994a2-2169">Drugi argument reprezentuje indeks (liczony od zera) elementu w `source`.</span><span class="sxs-lookup"><span data-stu-id="994a2-2169">The second argument represents the zero-based index of the element within `source`.</span></span>  
  
 <span data-ttu-id="994a2-2170">Metody <xref:System.Linq.Enumerable.TakeWhile%2A> i<xref:System.Linq.Enumerable.SkipWhile%2A> są uzupełnieniem funkcjonalnym.</span><span class="sxs-lookup"><span data-stu-id="994a2-2170">The <xref:System.Linq.Enumerable.TakeWhile%2A> and <xref:System.Linq.Enumerable.SkipWhile%2A> methods are functional complements.</span></span> <span data-ttu-id="994a2-2171">Uwzględniając sekwencję `coll` i czystą funkcję `p`, `coll.TakeWhile(p)` łączenie wyników i `coll.SkipWhile(p)` daje taką samą sekwencję jak `coll`.</span><span class="sxs-lookup"><span data-stu-id="994a2-2171">Given a sequence `coll` and a pure function `p`, concatenating the results of `coll.TakeWhile(p)` and `coll.SkipWhile(p)` yields the same sequence as `coll`.</span></span>  
  
 <span data-ttu-id="994a2-2172">W Visual Basic składni wyrażenia zapytania, `Take While` klauzula tłumaczy na <xref:System.Linq.Enumerable.TakeWhile%2A>wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-2172">In Visual Basic query expression syntax, a `Take While` clause translates to an invocation of <xref:System.Linq.Enumerable.TakeWhile%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-2173">Poniższy przykład kodu demonstruje, jak używać <xref:System.Linq.Enumerable.TakeWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29> do zwracania elementów z początku sekwencji tak długo, jak warunek, który używa indeksu elementu ma wartość true.</span><span class="sxs-lookup"><span data-stu-id="994a2-2173">The following code example demonstrates how to use <xref:System.Linq.Enumerable.TakeWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29> to return elements from the start of a sequence as long as a condition that uses the element's index is true.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#101](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#101)]
 [!code-vb[System.Linq.Enumerable#101](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#101)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-2174"><paramref name="source" />lub <paramref name="predicate" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-2174"><paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/take-while-clause.md"><span data-ttu-id="994a2-2175">Take While — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-2175">Take While Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ThenBy&lt;TSource,TKey&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="994a2-2176">Wykonuje kolejne porządkowanie elementów w kolejności rosnącej.</span><span class="sxs-lookup"><span data-stu-id="994a2-2176">Performs a subsequent ordering of the elements in a sequence in ascending order.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ThenBy&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IOrderedEnumerable&lt;TSource&gt; ThenBy&lt;TSource,TKey&gt; (this System.Linq.IOrderedEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IOrderedEnumerable`1&lt;!!TSource&gt; ThenBy&lt;TSource, TKey&gt;(class System.Linq.IOrderedEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ThenBy(Of TSource, TKey) (source As IOrderedEnumerable(Of TSource), keySelector As Func(Of TSource, TKey)) As IOrderedEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IOrderedEnumerable&lt;TSource&gt; ^ ThenBy(System::Linq::IOrderedEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector);" />
      <MemberSignature Language="F#" Value="static member ThenBy : System.Linq.IOrderedEnumerable&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; -&gt; System.Linq.IOrderedEnumerable&lt;'Source&gt;" Usage="System.Linq.Enumerable.ThenBy (source, keySelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IOrderedEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IOrderedEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-2177">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-2177">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TKey"><span data-ttu-id="994a2-2178">Typ klucza zwracanego przez <paramref name="keySelector" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-2178">The type of the key returned by <paramref name="keySelector" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-2179">Element <see cref="T:System.Linq.IOrderedEnumerable`1" /> zawierający elementy do sortowania.</span><span class="sxs-lookup"><span data-stu-id="994a2-2179">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> that contains elements to sort.</span></span></param>
        <param name="keySelector"><span data-ttu-id="994a2-2180">Funkcja wyodrębniania klucza z każdego elementu.</span><span class="sxs-lookup"><span data-stu-id="994a2-2180">A function to extract a key from each element.</span></span></param>
        <summary><span data-ttu-id="994a2-2181">Wykonuje kolejne porządkowanie elementów w kolejności rosnącej według klucza.</span><span class="sxs-lookup"><span data-stu-id="994a2-2181">Performs a subsequent ordering of the elements in a sequence in ascending order according to a key.</span></span></summary>
        <returns><span data-ttu-id="994a2-2182">, <see cref="T:System.Linq.IOrderedEnumerable`1" /> Których elementy są sortowane według klucza.</span><span class="sxs-lookup"><span data-stu-id="994a2-2182">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> whose elements are sorted according to a key.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-2183">Ta metoda jest implementowana za pomocą odroczonego wykonania.</span><span class="sxs-lookup"><span data-stu-id="994a2-2183">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="994a2-2184">Bezpośrednio zwracana wartość jest obiektem, który przechowuje wszystkie informacje wymagane do wykonania akcji.</span><span class="sxs-lookup"><span data-stu-id="994a2-2184">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="994a2-2185">Zapytanie reprezentowane przez tę metodę nie jest wykonywane `GetEnumerator` do momentu wyliczenia obiektu przez wywołanie jego metody bezpośrednio lub przy użyciu `foreach` w wizualizacji C# lub `For Each` w Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="994a2-2185">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="994a2-2186">Aby zamówić sekwencję według wartości samych`x => x` elementów, określ funkcję Identity (w wizualizacji C# lub `Function(x) x` w Visual Basic) dla `keySelector`.</span><span class="sxs-lookup"><span data-stu-id="994a2-2186">To order a sequence by the values of the elements themselves, specify the identity function (`x => x` in Visual C# or `Function(x) x` in Visual Basic) for `keySelector`.</span></span>  
  
 <span data-ttu-id="994a2-2187"><xref:System.Linq.Enumerable.ThenBy%2A>i <xref:System.Linq.Enumerable.ThenByDescending%2A> są zdefiniowane do rozszerzonego typu <xref:System.Linq.IOrderedEnumerable%601>, który jest również zwracanym typem tych metod.</span><span class="sxs-lookup"><span data-stu-id="994a2-2187"><xref:System.Linq.Enumerable.ThenBy%2A> and <xref:System.Linq.Enumerable.ThenByDescending%2A> are defined to extend the type <xref:System.Linq.IOrderedEnumerable%601>, which is also the return type of these methods.</span></span> <span data-ttu-id="994a2-2188">Ten projekt umożliwia określenie wielu kryteriów sortowania przez zastosowanie dowolnej liczby <xref:System.Linq.Enumerable.ThenBy%2A> lub <xref:System.Linq.Enumerable.ThenByDescending%2A> metod.</span><span class="sxs-lookup"><span data-stu-id="994a2-2188">This design enables you to specify multiple sort criteria by applying any number of <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A> methods.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="994a2-2189">Ponieważ <xref:System.Linq.IOrderedEnumerable%601> dziedziczy z <xref:System.Collections.Generic.IEnumerable%601>, można wywołać <xref:System.Linq.Enumerable.OrderBy%2A> lub <xref:System.Linq.Enumerable.OrderByDescending%2A> w wyniku wywołania do <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A> <xref:System.Linq.Enumerable.ThenBy%2A> lub .<xref:System.Linq.Enumerable.ThenByDescending%2A></span><span class="sxs-lookup"><span data-stu-id="994a2-2189">Because <xref:System.Linq.IOrderedEnumerable%601> inherits from <xref:System.Collections.Generic.IEnumerable%601>, you can call <xref:System.Linq.Enumerable.OrderBy%2A> or <xref:System.Linq.Enumerable.OrderByDescending%2A> on the results of a call to <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A>.</span></span> <span data-ttu-id="994a2-2190">Ten sposób wprowadza nowe podstawowe ustawianie kolejności, które ignoruje ustanowiony wcześniej sposób ustawiania.</span><span class="sxs-lookup"><span data-stu-id="994a2-2190">Doing this introduces a new primary ordering that ignores the previously established ordering.</span></span>  
  
 <span data-ttu-id="994a2-2191">Ta metoda porównuje klucze przy użyciu domyślnej funkcji <xref:System.Collections.Generic.Comparer%601.Default%2A>porównującej.</span><span class="sxs-lookup"><span data-stu-id="994a2-2191">This method compares keys by using the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A>.</span></span>  
  
 <span data-ttu-id="994a2-2192">Ta metoda wykonuje stabilne sortowanie; oznacza to, że jeśli klawisze dwóch elementów są równe, kolejność elementów jest zachowywana.</span><span class="sxs-lookup"><span data-stu-id="994a2-2192">This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved.</span></span> <span data-ttu-id="994a2-2193">Z drugiej strony, niestabilne sortowanie nie pozwala zachować kolejności elementów, które mają ten sam klucz.</span><span class="sxs-lookup"><span data-stu-id="994a2-2193">In contrast, an unstable sort does not preserve the order of elements that have the same key.</span></span>  
  
 <span data-ttu-id="994a2-2194">W `orderby [first criterion], [second criterion]` składni wyrażenia zapytania, klauzula (wizualizacja C#) `Order By [first criterion], [second criterion]` lub (Visual Basic) <xref:System.Linq.Enumerable.ThenBy%2A>tłumaczy na wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-2194">In query expression syntax, an `orderby [first criterion], [second criterion]` (Visual C#) or `Order By [first criterion], [second criterion]` (Visual Basic) clause translates to an invocation of <xref:System.Linq.Enumerable.ThenBy%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-2195">Poniższy przykład kodu demonstruje, jak używać <xref:System.Linq.Enumerable.ThenBy%60%602%28System.Linq.IOrderedEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29> do wykonywania pomocniczej kolejności elementów w sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-2195">The following code example demonstrates how to use <xref:System.Linq.Enumerable.ThenBy%60%602%28System.Linq.IOrderedEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29> to perform a secondary ordering of the elements in a sequence.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#102](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#102)]
 [!code-vb[System.Linq.Enumerable#102](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#102)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-2196"><paramref name="source" />lub <paramref name="keySelector" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-2196"><paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/csharp/language-reference/keywords/orderby-clause.md"><span data-ttu-id="994a2-2197">Klauzula orderby (odwołanie w C#)</span><span class="sxs-lookup"><span data-stu-id="994a2-2197">orderby clause (C# Reference)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/order-by-clause.md"><span data-ttu-id="994a2-2198">Order By — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-2198">Order By Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ThenBy&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IOrderedEnumerable&lt;TSource&gt; ThenBy&lt;TSource,TKey&gt; (this System.Linq.IOrderedEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, System.Collections.Generic.IComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IOrderedEnumerable`1&lt;!!TSource&gt; ThenBy&lt;TSource, TKey&gt;(class System.Linq.IOrderedEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Collections.Generic.IComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ThenBy(Of TSource, TKey) (source As IOrderedEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), comparer As IComparer(Of TKey)) As IOrderedEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IOrderedEnumerable&lt;TSource&gt; ^ ThenBy(System::Linq::IOrderedEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, System::Collections::Generic::IComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member ThenBy : System.Linq.IOrderedEnumerable&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * System.Collections.Generic.IComparer&lt;'Key&gt; -&gt; System.Linq.IOrderedEnumerable&lt;'Source&gt;" Usage="System.Linq.Enumerable.ThenBy (source, keySelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IOrderedEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IOrderedEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-2199">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-2199">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TKey"><span data-ttu-id="994a2-2200">Typ klucza zwracanego przez <paramref name="keySelector" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-2200">The type of the key returned by <paramref name="keySelector" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-2201">Element <see cref="T:System.Linq.IOrderedEnumerable`1" /> zawierający elementy do sortowania.</span><span class="sxs-lookup"><span data-stu-id="994a2-2201">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> that contains elements to sort.</span></span></param>
        <param name="keySelector"><span data-ttu-id="994a2-2202">Funkcja wyodrębniania klucza z każdego elementu.</span><span class="sxs-lookup"><span data-stu-id="994a2-2202">A function to extract a key from each element.</span></span></param>
        <param name="comparer"><span data-ttu-id="994a2-2203"><see cref="T:System.Collections.Generic.IComparer`1" /> Do porównywania kluczy.</span><span class="sxs-lookup"><span data-stu-id="994a2-2203">An <see cref="T:System.Collections.Generic.IComparer`1" /> to compare keys.</span></span></param>
        <summary><span data-ttu-id="994a2-2204">Wykonuje kolejne porządkowanie elementów w sekwencji rosnącej w kolejności przy użyciu określonej funkcji porównującej.</span><span class="sxs-lookup"><span data-stu-id="994a2-2204">Performs a subsequent ordering of the elements in a sequence in ascending order by using a specified comparer.</span></span></summary>
        <returns><span data-ttu-id="994a2-2205">, <see cref="T:System.Linq.IOrderedEnumerable`1" /> Których elementy są sortowane według klucza.</span><span class="sxs-lookup"><span data-stu-id="994a2-2205">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> whose elements are sorted according to a key.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-2206">Ta metoda jest implementowana za pomocą odroczonego wykonania.</span><span class="sxs-lookup"><span data-stu-id="994a2-2206">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="994a2-2207">Bezpośrednio zwracana wartość jest obiektem, który przechowuje wszystkie informacje wymagane do wykonania akcji.</span><span class="sxs-lookup"><span data-stu-id="994a2-2207">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="994a2-2208">Zapytanie reprezentowane przez tę metodę nie jest wykonywane `GetEnumerator` do momentu wyliczenia obiektu przez wywołanie jego metody bezpośrednio lub przy użyciu `foreach` w wizualizacji C# lub `For Each` w Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="994a2-2208">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="994a2-2209">Aby zamówić sekwencję według wartości samych`x => x` elementów, określ funkcję Identity (w wizualizacji C# lub `Function(x) x` w Visual Basic) dla `keySelector`.</span><span class="sxs-lookup"><span data-stu-id="994a2-2209">To order a sequence by the values of the elements themselves, specify the identity function (`x => x` in Visual C# or `Function(x) x` in Visual Basic) for `keySelector`.</span></span>  
  
 <span data-ttu-id="994a2-2210"><xref:System.Linq.Enumerable.ThenBy%2A>i <xref:System.Linq.Enumerable.ThenByDescending%2A> są zdefiniowane do rozszerzonego typu <xref:System.Linq.IOrderedEnumerable%601>, który jest również zwracanym typem tych metod.</span><span class="sxs-lookup"><span data-stu-id="994a2-2210"><xref:System.Linq.Enumerable.ThenBy%2A> and <xref:System.Linq.Enumerable.ThenByDescending%2A> are defined to extend the type <xref:System.Linq.IOrderedEnumerable%601>, which is also the return type of these methods.</span></span> <span data-ttu-id="994a2-2211">Ten projekt umożliwia określenie wielu kryteriów sortowania przez zastosowanie dowolnej liczby <xref:System.Linq.Enumerable.ThenBy%2A> lub <xref:System.Linq.Enumerable.ThenByDescending%2A> metod.</span><span class="sxs-lookup"><span data-stu-id="994a2-2211">This design enables you to specify multiple sort criteria by applying any number of <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A> methods.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="994a2-2212">Ponieważ <xref:System.Linq.IOrderedEnumerable%601> dziedziczy z <xref:System.Collections.Generic.IEnumerable%601>, można wywołać <xref:System.Linq.Enumerable.OrderBy%2A> lub <xref:System.Linq.Enumerable.OrderByDescending%2A> w wyniku wywołania do <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A> <xref:System.Linq.Enumerable.ThenBy%2A> lub .<xref:System.Linq.Enumerable.ThenByDescending%2A></span><span class="sxs-lookup"><span data-stu-id="994a2-2212">Because <xref:System.Linq.IOrderedEnumerable%601> inherits from <xref:System.Collections.Generic.IEnumerable%601>, you can call <xref:System.Linq.Enumerable.OrderBy%2A> or <xref:System.Linq.Enumerable.OrderByDescending%2A> on the results of a call to <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A>.</span></span> <span data-ttu-id="994a2-2213">Ten sposób wprowadza nowe podstawowe ustawianie kolejności, które ignoruje ustanowiony wcześniej sposób ustawiania.</span><span class="sxs-lookup"><span data-stu-id="994a2-2213">Doing this introduces a new primary ordering that ignores the previously established ordering.</span></span>  
  
 <span data-ttu-id="994a2-2214">Jeśli `comparer` <xref:System.Collections.Generic.Comparer%601.Default%2A> jest `null`, domyślna funkcja porównująca służy do porównywania kluczy.</span><span class="sxs-lookup"><span data-stu-id="994a2-2214">If `comparer` is `null`, the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A> is used to compare keys.</span></span>  
  
 <span data-ttu-id="994a2-2215">Ta metoda wykonuje stabilne sortowanie; oznacza to, że jeśli klawisze dwóch elementów są równe, kolejność elementów jest zachowywana.</span><span class="sxs-lookup"><span data-stu-id="994a2-2215">This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved.</span></span> <span data-ttu-id="994a2-2216">Z drugiej strony, niestabilne sortowanie nie pozwala zachować kolejności elementów, które mają ten sam klucz.</span><span class="sxs-lookup"><span data-stu-id="994a2-2216">In contrast, an unstable sort does not preserve the order of elements that have the same key.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-2217"><paramref name="source" />lub <paramref name="keySelector" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-2217"><paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ThenByDescending&lt;TSource,TKey&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="994a2-2218">Wykonuje kolejne porządkowanie elementów w sekwencji w kolejności malejącej.</span><span class="sxs-lookup"><span data-stu-id="994a2-2218">Performs a subsequent ordering of the elements in a sequence in descending order.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ThenByDescending&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IOrderedEnumerable&lt;TSource&gt; ThenByDescending&lt;TSource,TKey&gt; (this System.Linq.IOrderedEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IOrderedEnumerable`1&lt;!!TSource&gt; ThenByDescending&lt;TSource, TKey&gt;(class System.Linq.IOrderedEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ThenByDescending(Of TSource, TKey) (source As IOrderedEnumerable(Of TSource), keySelector As Func(Of TSource, TKey)) As IOrderedEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IOrderedEnumerable&lt;TSource&gt; ^ ThenByDescending(System::Linq::IOrderedEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector);" />
      <MemberSignature Language="F#" Value="static member ThenByDescending : System.Linq.IOrderedEnumerable&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; -&gt; System.Linq.IOrderedEnumerable&lt;'Source&gt;" Usage="System.Linq.Enumerable.ThenByDescending (source, keySelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IOrderedEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IOrderedEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-2219">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-2219">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TKey"><span data-ttu-id="994a2-2220">Typ klucza zwracanego przez <paramref name="keySelector" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-2220">The type of the key returned by <paramref name="keySelector" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-2221">Element <see cref="T:System.Linq.IOrderedEnumerable`1" /> zawierający elementy do sortowania.</span><span class="sxs-lookup"><span data-stu-id="994a2-2221">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> that contains elements to sort.</span></span></param>
        <param name="keySelector"><span data-ttu-id="994a2-2222">Funkcja wyodrębniania klucza z każdego elementu.</span><span class="sxs-lookup"><span data-stu-id="994a2-2222">A function to extract a key from each element.</span></span></param>
        <summary><span data-ttu-id="994a2-2223">Wykonuje kolejne porządkowanie elementów w sekwencji w kolejności malejącej, zgodnie z kluczem.</span><span class="sxs-lookup"><span data-stu-id="994a2-2223">Performs a subsequent ordering of the elements in a sequence in descending order, according to a key.</span></span></summary>
        <returns><span data-ttu-id="994a2-2224">, <see cref="T:System.Linq.IOrderedEnumerable`1" /> Których elementy są sortowane w kolejności malejącej zgodnie z kluczem.</span><span class="sxs-lookup"><span data-stu-id="994a2-2224">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> whose elements are sorted in descending order according to a key.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-2225">Ta metoda jest implementowana za pomocą odroczonego wykonania.</span><span class="sxs-lookup"><span data-stu-id="994a2-2225">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="994a2-2226">Bezpośrednio zwracana wartość jest obiektem, który przechowuje wszystkie informacje wymagane do wykonania akcji.</span><span class="sxs-lookup"><span data-stu-id="994a2-2226">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="994a2-2227">Zapytanie reprezentowane przez tę metodę nie jest wykonywane `GetEnumerator` do momentu wyliczenia obiektu przez wywołanie jego metody bezpośrednio lub przy użyciu `foreach` w wizualizacji C# lub `For Each` w Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="994a2-2227">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="994a2-2228">Aby zamówić sekwencję według wartości samych`x => x` elementów, określ funkcję Identity (w wizualizacji C# lub `Function(x) x` w Visual Basic) dla `keySelector`.</span><span class="sxs-lookup"><span data-stu-id="994a2-2228">To order a sequence by the values of the elements themselves, specify the identity function (`x => x` in Visual C# or `Function(x) x` in Visual Basic) for `keySelector`.</span></span>  
  
 <span data-ttu-id="994a2-2229"><xref:System.Linq.Enumerable.ThenBy%2A>i <xref:System.Linq.Enumerable.ThenByDescending%2A> są zdefiniowane do rozszerzonego typu <xref:System.Linq.IOrderedEnumerable%601>, który jest również zwracanym typem tych metod.</span><span class="sxs-lookup"><span data-stu-id="994a2-2229"><xref:System.Linq.Enumerable.ThenBy%2A> and <xref:System.Linq.Enumerable.ThenByDescending%2A> are defined to extend the type <xref:System.Linq.IOrderedEnumerable%601>, which is also the return type of these methods.</span></span> <span data-ttu-id="994a2-2230">Ten projekt umożliwia określenie wielu kryteriów sortowania przez zastosowanie dowolnej liczby <xref:System.Linq.Enumerable.ThenBy%2A> lub <xref:System.Linq.Enumerable.ThenByDescending%2A> metod.</span><span class="sxs-lookup"><span data-stu-id="994a2-2230">This design enables you to specify multiple sort criteria by applying any number of <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A> methods.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="994a2-2231">Ponieważ <xref:System.Linq.IOrderedEnumerable%601> dziedziczy z <xref:System.Collections.Generic.IEnumerable%601>, można wywołać <xref:System.Linq.Enumerable.OrderBy%2A> lub <xref:System.Linq.Enumerable.OrderByDescending%2A> w wyniku wywołania do <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A> <xref:System.Linq.Enumerable.ThenBy%2A> lub .<xref:System.Linq.Enumerable.ThenByDescending%2A></span><span class="sxs-lookup"><span data-stu-id="994a2-2231">Because <xref:System.Linq.IOrderedEnumerable%601> inherits from <xref:System.Collections.Generic.IEnumerable%601>, you can call <xref:System.Linq.Enumerable.OrderBy%2A> or <xref:System.Linq.Enumerable.OrderByDescending%2A> on the results of a call to <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A>.</span></span> <span data-ttu-id="994a2-2232">Ten sposób wprowadza nowe podstawowe ustawianie kolejności, które ignoruje ustanowiony wcześniej sposób ustawiania.</span><span class="sxs-lookup"><span data-stu-id="994a2-2232">Doing this introduces a new primary ordering that ignores the previously established ordering.</span></span>  
  
 <span data-ttu-id="994a2-2233">Ta metoda sortowania porównuje klucze przy użyciu domyślnej funkcji <xref:System.Collections.Generic.Comparer%601.Default%2A>porównującej.</span><span class="sxs-lookup"><span data-stu-id="994a2-2233">This sorting method compares keys by using the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A>.</span></span>  
  
 <span data-ttu-id="994a2-2234">Ta metoda wykonuje stabilne sortowanie; oznacza to, że jeśli klawisze dwóch elementów są równe, kolejność elementów jest zachowywana.</span><span class="sxs-lookup"><span data-stu-id="994a2-2234">This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved.</span></span> <span data-ttu-id="994a2-2235">Z drugiej strony, niestabilne sortowanie nie pozwala zachować kolejności elementów, które mają ten sam klucz.</span><span class="sxs-lookup"><span data-stu-id="994a2-2235">In contrast, an unstable sort does not preserve the order of elements that have the same key.</span></span>  
  
 <span data-ttu-id="994a2-2236">W składni C# wyrażenia zapytania wizualnego, `orderby [first criterion], [second criterion] descending` klauzula tłumaczy na wywołanie. <xref:System.Linq.Enumerable.ThenByDescending%2A></span><span class="sxs-lookup"><span data-stu-id="994a2-2236">In Visual C# query expression syntax, an `orderby [first criterion], [second criterion] descending` clause translates to an invocation of <xref:System.Linq.Enumerable.ThenByDescending%2A>.</span></span>  
  
 <span data-ttu-id="994a2-2237">W Visual Basic składni wyrażenia zapytania, `Order By [first criterion], [second criterion] Descending` klauzula tłumaczy na <xref:System.Linq.Enumerable.ThenByDescending%2A>wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-2237">In Visual Basic query expression syntax, an `Order By [first criterion], [second criterion] Descending` clause translates to an invocation of <xref:System.Linq.Enumerable.ThenByDescending%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-2238"><paramref name="source" />lub <paramref name="keySelector" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-2238"><paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/csharp/language-reference/keywords/orderby-clause.md"><span data-ttu-id="994a2-2239">Klauzula orderby (odwołanie w C#)</span><span class="sxs-lookup"><span data-stu-id="994a2-2239">orderby clause (C# Reference)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/order-by-clause.md"><span data-ttu-id="994a2-2240">Order By — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-2240">Order By Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="ThenByDescending&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IOrderedEnumerable&lt;TSource&gt; ThenByDescending&lt;TSource,TKey&gt; (this System.Linq.IOrderedEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, System.Collections.Generic.IComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IOrderedEnumerable`1&lt;!!TSource&gt; ThenByDescending&lt;TSource, TKey&gt;(class System.Linq.IOrderedEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Collections.Generic.IComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ThenByDescending(Of TSource, TKey) (source As IOrderedEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), comparer As IComparer(Of TKey)) As IOrderedEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IOrderedEnumerable&lt;TSource&gt; ^ ThenByDescending(System::Linq::IOrderedEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, System::Collections::Generic::IComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member ThenByDescending : System.Linq.IOrderedEnumerable&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * System.Collections.Generic.IComparer&lt;'Key&gt; -&gt; System.Linq.IOrderedEnumerable&lt;'Source&gt;" Usage="System.Linq.Enumerable.ThenByDescending (source, keySelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IOrderedEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IOrderedEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-2241">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-2241">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TKey"><span data-ttu-id="994a2-2242">Typ klucza zwracanego przez <paramref name="keySelector" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-2242">The type of the key returned by <paramref name="keySelector" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-2243">Element <see cref="T:System.Linq.IOrderedEnumerable`1" /> zawierający elementy do sortowania.</span><span class="sxs-lookup"><span data-stu-id="994a2-2243">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> that contains elements to sort.</span></span></param>
        <param name="keySelector"><span data-ttu-id="994a2-2244">Funkcja wyodrębniania klucza z każdego elementu.</span><span class="sxs-lookup"><span data-stu-id="994a2-2244">A function to extract a key from each element.</span></span></param>
        <param name="comparer"><span data-ttu-id="994a2-2245"><see cref="T:System.Collections.Generic.IComparer`1" /> Do porównywania kluczy.</span><span class="sxs-lookup"><span data-stu-id="994a2-2245">An <see cref="T:System.Collections.Generic.IComparer`1" /> to compare keys.</span></span></param>
        <summary><span data-ttu-id="994a2-2246">Wykonuje kolejne porządkowanie elementów w sekwencji w kolejności malejącej przy użyciu określonej funkcji porównującej.</span><span class="sxs-lookup"><span data-stu-id="994a2-2246">Performs a subsequent ordering of the elements in a sequence in descending order by using a specified comparer.</span></span></summary>
        <returns><span data-ttu-id="994a2-2247">, <see cref="T:System.Linq.IOrderedEnumerable`1" /> Których elementy są sortowane w kolejności malejącej zgodnie z kluczem.</span><span class="sxs-lookup"><span data-stu-id="994a2-2247">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> whose elements are sorted in descending order according to a key.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-2248">Ta metoda jest implementowana za pomocą odroczonego wykonania.</span><span class="sxs-lookup"><span data-stu-id="994a2-2248">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="994a2-2249">Bezpośrednio zwracana wartość jest obiektem, który przechowuje wszystkie informacje wymagane do wykonania akcji.</span><span class="sxs-lookup"><span data-stu-id="994a2-2249">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="994a2-2250">Zapytanie reprezentowane przez tę metodę nie jest wykonywane `GetEnumerator` do momentu wyliczenia obiektu przez wywołanie jego metody bezpośrednio lub przy użyciu `foreach` w wizualizacji C# lub `For Each` w Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="994a2-2250">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="994a2-2251">Aby zamówić sekwencję według wartości samych`x => x` elementów, określ funkcję Identity (w wizualizacji C# lub `Function(x) x` w Visual Basic) dla `keySelector`.</span><span class="sxs-lookup"><span data-stu-id="994a2-2251">To order a sequence by the values of the elements themselves, specify the identity function (`x => x` in Visual C# or `Function(x) x` in Visual Basic) for `keySelector`.</span></span>  
  
 <span data-ttu-id="994a2-2252"><xref:System.Linq.Enumerable.ThenBy%2A>i <xref:System.Linq.Enumerable.ThenByDescending%2A> są zdefiniowane do rozszerzonego typu <xref:System.Linq.IOrderedEnumerable%601>, który jest również zwracanym typem tych metod.</span><span class="sxs-lookup"><span data-stu-id="994a2-2252"><xref:System.Linq.Enumerable.ThenBy%2A> and <xref:System.Linq.Enumerable.ThenByDescending%2A> are defined to extend the type <xref:System.Linq.IOrderedEnumerable%601>, which is also the return type of these methods.</span></span> <span data-ttu-id="994a2-2253">Ten projekt umożliwia określenie wielu kryteriów sortowania przez zastosowanie dowolnej liczby <xref:System.Linq.Enumerable.ThenBy%2A> lub <xref:System.Linq.Enumerable.ThenByDescending%2A> metod.</span><span class="sxs-lookup"><span data-stu-id="994a2-2253">This design enables you to specify multiple sort criteria by applying any number of <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A> methods.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="994a2-2254">Ponieważ <xref:System.Linq.IOrderedEnumerable%601> dziedziczy z <xref:System.Collections.Generic.IEnumerable%601>, można wywołać <xref:System.Linq.Enumerable.OrderBy%2A> lub <xref:System.Linq.Enumerable.OrderByDescending%2A> w wyniku wywołania do <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A> <xref:System.Linq.Enumerable.ThenBy%2A> lub .<xref:System.Linq.Enumerable.ThenByDescending%2A></span><span class="sxs-lookup"><span data-stu-id="994a2-2254">Because <xref:System.Linq.IOrderedEnumerable%601> inherits from <xref:System.Collections.Generic.IEnumerable%601>, you can call <xref:System.Linq.Enumerable.OrderBy%2A> or <xref:System.Linq.Enumerable.OrderByDescending%2A> on the results of a call to <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A>.</span></span> <span data-ttu-id="994a2-2255">Ten sposób wprowadza nowe podstawowe ustawianie kolejności, które ignoruje ustanowiony wcześniej sposób ustawiania.</span><span class="sxs-lookup"><span data-stu-id="994a2-2255">Doing this introduces a new primary ordering that ignores the previously established ordering.</span></span>  
  
 <span data-ttu-id="994a2-2256">Jeśli `comparer` <xref:System.Collections.Generic.Comparer%601.Default%2A> jest `null`, domyślna funkcja porównująca służy do porównywania kluczy.</span><span class="sxs-lookup"><span data-stu-id="994a2-2256">If `comparer` is `null`, the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A> is used to compare keys.</span></span>  
  
 <span data-ttu-id="994a2-2257">Ta metoda wykonuje stabilne sortowanie; oznacza to, że jeśli klawisze dwóch elementów są równe, kolejność elementów jest zachowywana.</span><span class="sxs-lookup"><span data-stu-id="994a2-2257">This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved.</span></span> <span data-ttu-id="994a2-2258">Z drugiej strony, niestabilne sortowanie nie pozwala zachować kolejności elementów, które mają ten sam klucz.</span><span class="sxs-lookup"><span data-stu-id="994a2-2258">In contrast, an unstable sort does not preserve the order of elements that have the same key.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-2259">Poniższy przykład kodu demonstruje, jak używać <xref:System.Linq.Enumerable.ThenByDescending%60%602%28System.Linq.IOrderedEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29> do wykonywania pomocniczej kolejności elementów w sekwencji w kolejności malejącej przy użyciu niestandardowej funkcji porównującej.</span><span class="sxs-lookup"><span data-stu-id="994a2-2259">The following code example demonstrates how to use <xref:System.Linq.Enumerable.ThenByDescending%60%602%28System.Linq.IOrderedEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29> to perform a secondary ordering of the elements in a sequence in descending order by using a custom comparer.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#103](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#103)]
 [!code-vb[System.Linq.Enumerable#103](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#103)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-2260"><paramref name="source" />lub <paramref name="keySelector" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-2260"><paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToArray&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource[] ToArray&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource[] ToArray&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToArray(Of TSource) (source As IEnumerable(Of TSource)) As TSource()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static cli::array &lt;TSource&gt; ^ ToArray(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member ToArray : seq&lt;'Source&gt; -&gt; 'Source[]" Usage="System.Linq.Enumerable.ToArray source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource[]</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-2261">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-2261">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-2262"><see cref="T:System.Collections.Generic.IEnumerable`1" /> Do utworzenia tablicy z.</span><span class="sxs-lookup"><span data-stu-id="994a2-2262">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create an array from.</span></span></param>
        <summary><span data-ttu-id="994a2-2263">Tworzy tablicę z <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-2263">Creates an array from a <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span></span></summary>
        <returns><span data-ttu-id="994a2-2264">Tablica zawierająca elementy z sekwencji wejściowej.</span><span class="sxs-lookup"><span data-stu-id="994a2-2264">An array that contains the elements from the input sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-2265"><xref:System.Linq.Enumerable.ToArray%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> Metoda wymusza natychmiastowe Obliczanie zapytania i zwraca tablicę zawierającą wyniki zapytania.</span><span class="sxs-lookup"><span data-stu-id="994a2-2265">The <xref:System.Linq.Enumerable.ToArray%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> method forces immediate query evaluation and returns an array that contains the query results.</span></span> <span data-ttu-id="994a2-2266">Możesz dołączyć tę metodę do zapytania, aby uzyskać buforowaną kopię wyników zapytania.</span><span class="sxs-lookup"><span data-stu-id="994a2-2266">You can append this method to your query in order to obtain a cached copy of the query results.</span></span>  
  
 <span data-ttu-id="994a2-2267"><xref:System.Linq.Enumerable.ToList%2A>ma podobne zachowanie, <xref:System.Collections.Generic.List%601> ale zwraca zamiast tablicy.</span><span class="sxs-lookup"><span data-stu-id="994a2-2267"><xref:System.Linq.Enumerable.ToList%2A> has similar behavior but returns a <xref:System.Collections.Generic.List%601> instead of an array.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-2268">Poniższy przykład kodu demonstruje, jak użyć <xref:System.Linq.Enumerable.ToArray%2A> , aby wymusić natychmiastowe Obliczanie zapytania i zwrócić tablicę wyników.</span><span class="sxs-lookup"><span data-stu-id="994a2-2268">The following code example demonstrates how to use <xref:System.Linq.Enumerable.ToArray%2A> to force immediate query evaluation and return an array of results.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#104](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#104)]
 [!code-vb[System.Linq.Enumerable#104](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#104)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-2269"><paramref name="source" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-2269"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToDictionary&lt;TSource,TKey&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="994a2-2270"><see cref="T:System.Collections.Generic.Dictionary`2" /> Tworzy<see cref="T:System.Collections.Generic.IEnumerable`1" />z.</span><span class="sxs-lookup"><span data-stu-id="994a2-2270">Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToDictionary&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.Dictionary&lt;TKey,TSource&gt; ToDictionary&lt;TSource,TKey&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.Dictionary`2&lt;!!TKey, !!TSource&gt; ToDictionary&lt;TSource, TKey&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToDictionary(Of TSource, TKey) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey)) As Dictionary(Of TKey, TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::Dictionary&lt;TKey, TSource&gt; ^ ToDictionary(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector);" />
      <MemberSignature Language="F#" Value="static member ToDictionary : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; -&gt; System.Collections.Generic.Dictionary&lt;'Key, 'Source&gt;" Usage="System.Linq.Enumerable.ToDictionary (source, keySelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.Dictionary&lt;TKey,TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-2271">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-2271">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TKey"><span data-ttu-id="994a2-2272">Typ klucza zwracanego przez <paramref name="keySelector" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-2272">The type of the key returned by <paramref name="keySelector" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-2273">W celu utworzenia elementu <see cref="T:System.Collections.Generic.Dictionary`2" />z. <see cref="T:System.Collections.Generic.IEnumerable`1" /></span><span class="sxs-lookup"><span data-stu-id="994a2-2273">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Collections.Generic.Dictionary`2" /> from.</span></span></param>
        <param name="keySelector"><span data-ttu-id="994a2-2274">Funkcja wyodrębniania klucza z każdego elementu.</span><span class="sxs-lookup"><span data-stu-id="994a2-2274">A function to extract a key from each element.</span></span></param>
        <summary><span data-ttu-id="994a2-2275">Tworzy element <see cref="T:System.Collections.Generic.Dictionary`2" /> a <see cref="T:System.Collections.Generic.IEnumerable`1" /> od zgodnie z określoną funkcją selektora kluczy.</span><span class="sxs-lookup"><span data-stu-id="994a2-2275">Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to a specified key selector function.</span></span></summary>
        <returns><span data-ttu-id="994a2-2276"><see cref="T:System.Collections.Generic.Dictionary`2" /> Zawierający klucze i wartości.</span><span class="sxs-lookup"><span data-stu-id="994a2-2276">A <see cref="T:System.Collections.Generic.Dictionary`2" /> that contains keys and values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-2277">Metoda używa domyślnej funkcji porównującej <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> równość do porównywania kluczy. <xref:System.Linq.Enumerable.ToDictionary%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29></span><span class="sxs-lookup"><span data-stu-id="994a2-2277">The <xref:System.Linq.Enumerable.ToDictionary%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29> method uses the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> to compare keys.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-2278">Poniższy przykład kodu demonstruje, jak używać <xref:System.Linq.Enumerable.ToDictionary%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29> do <xref:System.Collections.Generic.Dictionary%602> tworzenia przy użyciu selektora kluczy.</span><span class="sxs-lookup"><span data-stu-id="994a2-2278">The following code example demonstrates how to use <xref:System.Linq.Enumerable.ToDictionary%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29> to create a <xref:System.Collections.Generic.Dictionary%602> by using a key selector.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#105](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#105)]
 [!code-vb[System.Linq.Enumerable#105](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#105)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-2279"><paramref name="source" />lub <paramref name="keySelector" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-2279"><paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="994a2-2280">—lub—</span><span class="sxs-lookup"><span data-stu-id="994a2-2280">-or-</span></span> 
 <span data-ttu-id="994a2-2281"><paramref name="keySelector" />tworzy klucz, który jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-2281"><paramref name="keySelector" /> produces a key that is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="994a2-2282"><paramref name="keySelector" />tworzy zduplikowane klucze dla dwóch elementów.</span><span class="sxs-lookup"><span data-stu-id="994a2-2282"><paramref name="keySelector" /> produces duplicate keys for two elements.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToDictionary&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.Dictionary&lt;TKey,TSource&gt; ToDictionary&lt;TSource,TKey&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.Dictionary`2&lt;!!TKey, !!TSource&gt; ToDictionary&lt;TSource, TKey&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToDictionary(Of TSource, TKey) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), comparer As IEqualityComparer(Of TKey)) As Dictionary(Of TKey, TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::Dictionary&lt;TKey, TSource&gt; ^ ToDictionary(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member ToDictionary : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; System.Collections.Generic.Dictionary&lt;'Key, 'Source&gt;" Usage="System.Linq.Enumerable.ToDictionary (source, keySelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.Dictionary&lt;TKey,TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-2283">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-2283">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TKey"><span data-ttu-id="994a2-2284">Typ kluczy zwracanych przez <paramref name="keySelector" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-2284">The type of the keys returned by <paramref name="keySelector" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-2285">W celu utworzenia elementu <see cref="T:System.Collections.Generic.Dictionary`2" />z. <see cref="T:System.Collections.Generic.IEnumerable`1" /></span><span class="sxs-lookup"><span data-stu-id="994a2-2285">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Collections.Generic.Dictionary`2" /> from.</span></span></param>
        <param name="keySelector"><span data-ttu-id="994a2-2286">Funkcja wyodrębniania klucza z każdego elementu.</span><span class="sxs-lookup"><span data-stu-id="994a2-2286">A function to extract a key from each element.</span></span></param>
        <param name="comparer"><span data-ttu-id="994a2-2287"><see cref="T:System.Collections.Generic.IEqualityComparer`1" /> Do porównywania kluczy.</span><span class="sxs-lookup"><span data-stu-id="994a2-2287">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</span></span></param>
        <summary><span data-ttu-id="994a2-2288">Tworzy element <see cref="T:System.Collections.Generic.Dictionary`2" /> a na <see cref="T:System.Collections.Generic.IEnumerable`1" /> podstawie zgodnie z określoną funkcją selektora klucza i elementem porównującym klucz.</span><span class="sxs-lookup"><span data-stu-id="994a2-2288">Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to a specified key selector function and key comparer.</span></span></summary>
        <returns><span data-ttu-id="994a2-2289"><see cref="T:System.Collections.Generic.Dictionary`2" /> Zawierający klucze i wartości.</span><span class="sxs-lookup"><span data-stu-id="994a2-2289">A <see cref="T:System.Collections.Generic.Dictionary`2" /> that contains keys and values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-2290">Jeśli `comparer` <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> jest `null`, domyślną funkcję porównującą równość używa się do porównywania kluczy.</span><span class="sxs-lookup"><span data-stu-id="994a2-2290">If `comparer` is `null`, the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> is used to compare keys.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-2291"><paramref name="source" />lub <paramref name="keySelector" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-2291"><paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="994a2-2292">—lub—</span><span class="sxs-lookup"><span data-stu-id="994a2-2292">-or-</span></span> 
 <span data-ttu-id="994a2-2293"><paramref name="keySelector" />tworzy klucz, który jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-2293"><paramref name="keySelector" /> produces a key that is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="994a2-2294"><paramref name="keySelector" />tworzy zduplikowane klucze dla dwóch elementów.</span><span class="sxs-lookup"><span data-stu-id="994a2-2294"><paramref name="keySelector" /> produces duplicate keys for two elements.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToDictionary&lt;TSource,TKey,TElement&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.Dictionary&lt;TKey,TElement&gt; ToDictionary&lt;TSource,TKey,TElement&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TSource,TElement&gt; elementSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.Dictionary`2&lt;!!TKey, !!TElement&gt; ToDictionary&lt;TSource, TKey, TElement&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Func`2&lt;!!TSource, !!TElement&gt; elementSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToDictionary(Of TSource, TKey, TElement) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement)) As Dictionary(Of TKey, TElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey, typename TElement&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::Dictionary&lt;TKey, TElement&gt; ^ ToDictionary(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, Func&lt;TSource, TElement&gt; ^ elementSelector);" />
      <MemberSignature Language="F#" Value="static member ToDictionary : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * Func&lt;'Source, 'Element&gt; -&gt; System.Collections.Generic.Dictionary&lt;'Key, 'Element&gt;" Usage="System.Linq.Enumerable.ToDictionary (source, keySelector, elementSelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.Dictionary&lt;TKey,TElement&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TElement" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="elementSelector" Type="System.Func&lt;TSource,TElement&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-2295">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-2295">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TKey"><span data-ttu-id="994a2-2296">Typ klucza zwracanego przez <paramref name="keySelector" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-2296">The type of the key returned by <paramref name="keySelector" />.</span></span></typeparam>
        <typeparam name="TElement"><span data-ttu-id="994a2-2297">Typ wartości zwracanej przez <paramref name="elementSelector" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-2297">The type of the value returned by <paramref name="elementSelector" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-2298">W celu utworzenia elementu <see cref="T:System.Collections.Generic.Dictionary`2" />z. <see cref="T:System.Collections.Generic.IEnumerable`1" /></span><span class="sxs-lookup"><span data-stu-id="994a2-2298">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Collections.Generic.Dictionary`2" /> from.</span></span></param>
        <param name="keySelector"><span data-ttu-id="994a2-2299">Funkcja wyodrębniania klucza z każdego elementu.</span><span class="sxs-lookup"><span data-stu-id="994a2-2299">A function to extract a key from each element.</span></span></param>
        <param name="elementSelector"><span data-ttu-id="994a2-2300">Funkcja transformacji do uzyskiwania wartości wyniku elementu z każdego z elementu.</span><span class="sxs-lookup"><span data-stu-id="994a2-2300">A transform function to produce a result element value from each element.</span></span></param>
        <summary><span data-ttu-id="994a2-2301"><see cref="T:System.Collections.Generic.Dictionary`2" /> Tworzy<see cref="T:System.Collections.Generic.IEnumerable`1" /> z elementu zgodnie z określonym selektorem kluczy i funkcjami selektora elementów.</span><span class="sxs-lookup"><span data-stu-id="994a2-2301">Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to specified key selector and element selector functions.</span></span></summary>
        <returns><span data-ttu-id="994a2-2302">A <see cref="T:System.Collections.Generic.Dictionary`2" /> , który zawiera wartości typu <paramref name="TElement" /> wybrane z sekwencji wejściowej.</span><span class="sxs-lookup"><span data-stu-id="994a2-2302">A <see cref="T:System.Collections.Generic.Dictionary`2" /> that contains values of type <paramref name="TElement" /> selected from the input sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-2303">Metoda używa domyślnej funkcji porównującej <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> równość do porównywania kluczy. <xref:System.Linq.Enumerable.ToDictionary%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29></span><span class="sxs-lookup"><span data-stu-id="994a2-2303">The <xref:System.Linq.Enumerable.ToDictionary%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29> method uses the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> to compare keys.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-2304"><paramref name="source" />or <paramref name="keySelector" /> lub <paramref name="elementSelector" /> is .<see langword="null" /></span><span class="sxs-lookup"><span data-stu-id="994a2-2304"><paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="994a2-2305">—lub—</span><span class="sxs-lookup"><span data-stu-id="994a2-2305">-or-</span></span> 
 <span data-ttu-id="994a2-2306"><paramref name="keySelector" />tworzy klucz, który jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-2306"><paramref name="keySelector" /> produces a key that is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="994a2-2307"><paramref name="keySelector" />tworzy zduplikowane klucze dla dwóch elementów.</span><span class="sxs-lookup"><span data-stu-id="994a2-2307"><paramref name="keySelector" /> produces duplicate keys for two elements.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToDictionary&lt;TSource,TKey,TElement&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.Dictionary&lt;TKey,TElement&gt; ToDictionary&lt;TSource,TKey,TElement&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TSource,TElement&gt; elementSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.Dictionary`2&lt;!!TKey, !!TElement&gt; ToDictionary&lt;TSource, TKey, TElement&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Func`2&lt;!!TSource, !!TElement&gt; elementSelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToDictionary(Of TSource, TKey, TElement) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement), comparer As IEqualityComparer(Of TKey)) As Dictionary(Of TKey, TElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey, typename TElement&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::Dictionary&lt;TKey, TElement&gt; ^ ToDictionary(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, Func&lt;TSource, TElement&gt; ^ elementSelector, System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member ToDictionary : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * Func&lt;'Source, 'Element&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; System.Collections.Generic.Dictionary&lt;'Key, 'Element&gt;" Usage="System.Linq.Enumerable.ToDictionary (source, keySelector, elementSelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.Dictionary&lt;TKey,TElement&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TElement" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="elementSelector" Type="System.Func&lt;TSource,TElement&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-2308">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-2308">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TKey"><span data-ttu-id="994a2-2309">Typ klucza zwracanego przez <paramref name="keySelector" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-2309">The type of the key returned by <paramref name="keySelector" />.</span></span></typeparam>
        <typeparam name="TElement"><span data-ttu-id="994a2-2310">Typ wartości zwracanej przez <paramref name="elementSelector" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-2310">The type of the value returned by <paramref name="elementSelector" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-2311">W celu utworzenia elementu <see cref="T:System.Collections.Generic.Dictionary`2" />z. <see cref="T:System.Collections.Generic.IEnumerable`1" /></span><span class="sxs-lookup"><span data-stu-id="994a2-2311">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Collections.Generic.Dictionary`2" /> from.</span></span></param>
        <param name="keySelector"><span data-ttu-id="994a2-2312">Funkcja wyodrębniania klucza z każdego elementu.</span><span class="sxs-lookup"><span data-stu-id="994a2-2312">A function to extract a key from each element.</span></span></param>
        <param name="elementSelector"><span data-ttu-id="994a2-2313">Funkcja transformacji do uzyskiwania wartości wyniku elementu z każdego z elementu.</span><span class="sxs-lookup"><span data-stu-id="994a2-2313">A transform function to produce a result element value from each element.</span></span></param>
        <param name="comparer"><span data-ttu-id="994a2-2314"><see cref="T:System.Collections.Generic.IEqualityComparer`1" /> Do porównywania kluczy.</span><span class="sxs-lookup"><span data-stu-id="994a2-2314">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</span></span></param>
        <summary><span data-ttu-id="994a2-2315">Tworzy element <see cref="T:System.Collections.Generic.Dictionary`2" /> a <see cref="T:System.Collections.Generic.IEnumerable`1" /> od zgodnie z określoną funkcją selektora kluczy, modułem porównującym i funkcją selektora elementów.</span><span class="sxs-lookup"><span data-stu-id="994a2-2315">Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to a specified key selector function, a comparer, and an element selector function.</span></span></summary>
        <returns><span data-ttu-id="994a2-2316">A <see cref="T:System.Collections.Generic.Dictionary`2" /> , który zawiera wartości typu <paramref name="TElement" /> wybrane z sekwencji wejściowej.</span><span class="sxs-lookup"><span data-stu-id="994a2-2316">A <see cref="T:System.Collections.Generic.Dictionary`2" /> that contains values of type <paramref name="TElement" /> selected from the input sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-2317">Jeśli `comparer` <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> jest `null`, domyślną funkcję porównującą równość używa się do porównywania kluczy.</span><span class="sxs-lookup"><span data-stu-id="994a2-2317">If `comparer` is `null`, the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> is used to compare keys.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-2318"><paramref name="source" />or <paramref name="keySelector" /> lub <paramref name="elementSelector" /> is .<see langword="null" /></span><span class="sxs-lookup"><span data-stu-id="994a2-2318"><paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> is <see langword="null" />.</span></span>  
  
<span data-ttu-id="994a2-2319">—lub—</span><span class="sxs-lookup"><span data-stu-id="994a2-2319">-or-</span></span> 
 <span data-ttu-id="994a2-2320"><paramref name="keySelector" />tworzy klucz, który jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-2320"><paramref name="keySelector" /> produces a key that is <see langword="null" />.</span></span></exception>
        <exception cref="T:System.ArgumentException"><span data-ttu-id="994a2-2321"><paramref name="keySelector" />tworzy zduplikowane klucze dla dwóch elementów.</span><span class="sxs-lookup"><span data-stu-id="994a2-2321"><paramref name="keySelector" /> produces duplicate keys for two elements.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToHashSet&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.HashSet&lt;TSource&gt; ToHashSet&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.HashSet`1&lt;!!TSource&gt; ToHashSet&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToHashSet(Of TSource) (source As IEnumerable(Of TSource)) As HashSet(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::HashSet&lt;TSource&gt; ^ ToHashSet(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member ToHashSet : seq&lt;'Source&gt; -&gt; System.Collections.Generic.HashSet&lt;'Source&gt;" Usage="System.Linq.Enumerable.ToHashSet source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.HashSet&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.7.2;netframework-4.8;netstandard-2.1" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-2322">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-2322">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-2323">W celu utworzenia elementu <see cref="T:System.Collections.Generic.HashSet`1" />z. <see cref="T:System.Collections.Generic.IEnumerable`1" /></span><span class="sxs-lookup"><span data-stu-id="994a2-2323">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Collections.Generic.HashSet`1" /> from.</span></span></param>
        <summary><span data-ttu-id="994a2-2324"><see cref="T:System.Collections.Generic.HashSet`1" /> Tworzy<see cref="T:System.Collections.Generic.IEnumerable`1" />z.</span><span class="sxs-lookup"><span data-stu-id="994a2-2324">Creates a <see cref="T:System.Collections.Generic.HashSet`1" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span></span></summary>
        <returns><span data-ttu-id="994a2-2325">A <see cref="T:System.Collections.Generic.HashSet`1" /> , który zawiera wartości typu TSource wybrane z sekwencji wejściowej.</span><span class="sxs-lookup"><span data-stu-id="994a2-2325">A <see cref="T:System.Collections.Generic.HashSet`1" /> that contains values of type TSource selected from the input sequence.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToHashSet&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.HashSet&lt;TSource&gt; ToHashSet&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, System.Collections.Generic.IEqualityComparer&lt;TSource&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.HashSet`1&lt;!!TSource&gt; ToHashSet&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Collections.Generic.IEqualityComparer`1&lt;!!TSource&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToHashSet(Of TSource) (source As IEnumerable(Of TSource), comparer As IEqualityComparer(Of TSource)) As HashSet(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::HashSet&lt;TSource&gt; ^ ToHashSet(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, System::Collections::Generic::IEqualityComparer&lt;TSource&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member ToHashSet : seq&lt;'Source&gt; * System.Collections.Generic.IEqualityComparer&lt;'Source&gt; -&gt; System.Collections.Generic.HashSet&lt;'Source&gt;" Usage="System.Linq.Enumerable.ToHashSet (source, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.HashSet&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" Index="0" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.7.2;netframework-4.8;netstandard-2.1" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TSource&gt;" Index="1" FrameworkAlternate="netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.7.2;netframework-4.8;netstandard-2.1" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-2326">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-2326">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-2327">W celu utworzenia elementu <see cref="T:System.Collections.Generic.HashSet`1" />z. <see cref="T:System.Collections.Generic.IEnumerable`1" /></span><span class="sxs-lookup"><span data-stu-id="994a2-2327">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Collections.Generic.HashSet`1" /> from.</span></span></param>
        <param name="comparer"><span data-ttu-id="994a2-2328"><see cref="T:System.Collections.Generic.IEqualityComparer`1" /> Do porównywania kluczy.</span><span class="sxs-lookup"><span data-stu-id="994a2-2328">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</span></span></param>
        <summary><span data-ttu-id="994a2-2329"><see cref="T:System.Collections.Generic.HashSet`1" /> Tworzy z<see cref="T:System.Collections.Generic.IEnumerable`1" /> przy użyciu<paramref name="comparer" /> do porównywania kluczy</span><span class="sxs-lookup"><span data-stu-id="994a2-2329">Creates a <see cref="T:System.Collections.Generic.HashSet`1" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> using the <paramref name="comparer" /> to compare keys</span></span></summary>
        <returns><span data-ttu-id="994a2-2330">A <see cref="T:System.Collections.Generic.HashSet`1" /> , który zawiera wartości typu <paramref name="TSource" /> wybrane z sekwencji wejściowej.</span><span class="sxs-lookup"><span data-stu-id="994a2-2330">A <see cref="T:System.Collections.Generic.HashSet`1" /> that contains values of type <paramref name="TSource" /> selected from the input sequence.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToList&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.List&lt;TSource&gt; ToList&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.List`1&lt;!!TSource&gt; ToList&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToList(Of TSource) (source As IEnumerable(Of TSource)) As List(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::List&lt;TSource&gt; ^ ToList(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member ToList : seq&lt;'Source&gt; -&gt; System.Collections.Generic.List&lt;'Source&gt;" Usage="System.Linq.Enumerable.ToList source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.List&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-2331">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-2331">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-2332">W celu utworzenia elementu <see cref="T:System.Collections.Generic.List`1" />z. <see cref="T:System.Collections.Generic.IEnumerable`1" /></span><span class="sxs-lookup"><span data-stu-id="994a2-2332">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Collections.Generic.List`1" /> from.</span></span></param>
        <summary><span data-ttu-id="994a2-2333"><see cref="T:System.Collections.Generic.List`1" /> Tworzy<see cref="T:System.Collections.Generic.IEnumerable`1" />z.</span><span class="sxs-lookup"><span data-stu-id="994a2-2333">Creates a <see cref="T:System.Collections.Generic.List`1" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span></span></summary>
        <returns><span data-ttu-id="994a2-2334">A <see cref="T:System.Collections.Generic.List`1" /> , który zawiera elementy z sekwencji wejściowej.</span><span class="sxs-lookup"><span data-stu-id="994a2-2334">A <see cref="T:System.Collections.Generic.List`1" /> that contains elements from the input sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-2335">Metoda wymusza natychmiastowe Obliczanie zapytania i <xref:System.Collections.Generic.List%601> zwraca wartość, która zawiera wyniki zapytania. <xref:System.Linq.Enumerable.ToList%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29></span><span class="sxs-lookup"><span data-stu-id="994a2-2335">The <xref:System.Linq.Enumerable.ToList%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> method forces immediate query evaluation and returns a <xref:System.Collections.Generic.List%601> that contains the query results.</span></span> <span data-ttu-id="994a2-2336">Możesz dołączyć tę metodę do zapytania, aby uzyskać buforowaną kopię wyników zapytania.</span><span class="sxs-lookup"><span data-stu-id="994a2-2336">You can append this method to your query in order to obtain a cached copy of the query results.</span></span>  
  
 <span data-ttu-id="994a2-2337"><xref:System.Linq.Enumerable.ToArray%2A>ma podobne zachowanie, ale zwraca tablicę zamiast <xref:System.Collections.Generic.List%601>.</span><span class="sxs-lookup"><span data-stu-id="994a2-2337"><xref:System.Linq.Enumerable.ToArray%2A> has similar behavior but returns an array instead of a <xref:System.Collections.Generic.List%601>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-2338">Poniższy przykład kodu demonstruje, jak użyć <xref:System.Linq.Enumerable.ToList%2A> , aby wymusić natychmiastowe Obliczanie zapytania i zwrócić element <xref:System.Collections.Generic.List%601> , który zawiera wyniki zapytania.</span><span class="sxs-lookup"><span data-stu-id="994a2-2338">The following code example demonstrates how to use <xref:System.Linq.Enumerable.ToList%2A> to force immediate query evaluation and return a <xref:System.Collections.Generic.List%601> that contains the query results.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#106](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#106)]
 [!code-vb[System.Linq.Enumerable#106](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#106)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-2339"><paramref name="source" />jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-2339"><paramref name="source" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToLookup&lt;TSource,TKey&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="994a2-2340">Tworzy ogólny <see cref="T:System.Linq.Lookup`2" /> <see cref="T:System.Collections.Generic.IEnumerable`1" />z.</span><span class="sxs-lookup"><span data-stu-id="994a2-2340">Creates a generic <see cref="T:System.Linq.Lookup`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToLookup&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.ILookup&lt;TKey,TSource&gt; ToLookup&lt;TSource,TKey&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.ILookup`2&lt;!!TKey, !!TSource&gt; ToLookup&lt;TSource, TKey&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToLookup(Of TSource, TKey) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey)) As ILookup(Of TKey, TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::ILookup&lt;TKey, TSource&gt; ^ ToLookup(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector);" />
      <MemberSignature Language="F#" Value="static member ToLookup : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; -&gt; System.Linq.ILookup&lt;'Key, 'Source&gt;" Usage="System.Linq.Enumerable.ToLookup (source, keySelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.ILookup&lt;TKey,TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-2341">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-2341">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TKey"><span data-ttu-id="994a2-2342">Typ klucza zwracanego przez <paramref name="keySelector" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-2342">The type of the key returned by <paramref name="keySelector" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-2343">W celu utworzenia elementu <see cref="T:System.Linq.Lookup`2" />z. <see cref="T:System.Collections.Generic.IEnumerable`1" /></span><span class="sxs-lookup"><span data-stu-id="994a2-2343">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Linq.Lookup`2" /> from.</span></span></param>
        <param name="keySelector"><span data-ttu-id="994a2-2344">Funkcja wyodrębniania klucza z każdego elementu.</span><span class="sxs-lookup"><span data-stu-id="994a2-2344">A function to extract a key from each element.</span></span></param>
        <summary><span data-ttu-id="994a2-2345">Tworzy element <see cref="T:System.Linq.Lookup`2" /> a <see cref="T:System.Collections.Generic.IEnumerable`1" /> od zgodnie z określoną funkcją selektora kluczy.</span><span class="sxs-lookup"><span data-stu-id="994a2-2345">Creates a <see cref="T:System.Linq.Lookup`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to a specified key selector function.</span></span></summary>
        <returns><span data-ttu-id="994a2-2346"><see cref="T:System.Linq.Lookup`2" /> Zawierający klucze i wartości.</span><span class="sxs-lookup"><span data-stu-id="994a2-2346">A <see cref="T:System.Linq.Lookup`2" /> that contains keys and values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-2347"><xref:System.Linq.Enumerable.ToLookup%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29> Metoda<xref:System.Linq.Lookup%602>zwraca, czyli słownik jeden do wielu, który mapuje klucze na kolekcje wartości.</span><span class="sxs-lookup"><span data-stu-id="994a2-2347">The <xref:System.Linq.Enumerable.ToLookup%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29> method returns a <xref:System.Linq.Lookup%602>, a one-to-many dictionary that maps keys to collections of values.</span></span> <span data-ttu-id="994a2-2348">Różni się od elementu <xref:System.Collections.Generic.Dictionary%602>, który wykonuje mapowanie jeden do jednego kluczy do pojedynczych wartości. <xref:System.Linq.Lookup%602></span><span class="sxs-lookup"><span data-stu-id="994a2-2348">A <xref:System.Linq.Lookup%602> differs from a <xref:System.Collections.Generic.Dictionary%602>, which performs a one-to-one mapping of keys to single values.</span></span>  
  
 <span data-ttu-id="994a2-2349">Domyślna funkcja porównująca <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> równość jest używana do porównywania kluczy.</span><span class="sxs-lookup"><span data-stu-id="994a2-2349">The default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> is used to compare keys.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-2350"><paramref name="source" />lub <paramref name="keySelector" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-2350"><paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToLookup&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.ILookup&lt;TKey,TSource&gt; ToLookup&lt;TSource,TKey&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.ILookup`2&lt;!!TKey, !!TSource&gt; ToLookup&lt;TSource, TKey&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToLookup(Of TSource, TKey) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), comparer As IEqualityComparer(Of TKey)) As ILookup(Of TKey, TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::ILookup&lt;TKey, TSource&gt; ^ ToLookup(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member ToLookup : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; System.Linq.ILookup&lt;'Key, 'Source&gt;" Usage="System.Linq.Enumerable.ToLookup (source, keySelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.ILookup&lt;TKey,TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-2351">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-2351">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TKey"><span data-ttu-id="994a2-2352">Typ klucza zwracanego przez <paramref name="keySelector" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-2352">The type of the key returned by <paramref name="keySelector" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-2353">W celu utworzenia elementu <see cref="T:System.Linq.Lookup`2" />z. <see cref="T:System.Collections.Generic.IEnumerable`1" /></span><span class="sxs-lookup"><span data-stu-id="994a2-2353">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Linq.Lookup`2" /> from.</span></span></param>
        <param name="keySelector"><span data-ttu-id="994a2-2354">Funkcja wyodrębniania klucza z każdego elementu.</span><span class="sxs-lookup"><span data-stu-id="994a2-2354">A function to extract a key from each element.</span></span></param>
        <param name="comparer"><span data-ttu-id="994a2-2355"><see cref="T:System.Collections.Generic.IEqualityComparer`1" /> Do porównywania kluczy.</span><span class="sxs-lookup"><span data-stu-id="994a2-2355">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</span></span></param>
        <summary><span data-ttu-id="994a2-2356">Tworzy element <see cref="T:System.Linq.Lookup`2" /> a na <see cref="T:System.Collections.Generic.IEnumerable`1" /> podstawie zgodnie z określoną funkcją selektora klucza i elementem porównującym klucz.</span><span class="sxs-lookup"><span data-stu-id="994a2-2356">Creates a <see cref="T:System.Linq.Lookup`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to a specified key selector function and key comparer.</span></span></summary>
        <returns><span data-ttu-id="994a2-2357"><see cref="T:System.Linq.Lookup`2" /> Zawierający klucze i wartości.</span><span class="sxs-lookup"><span data-stu-id="994a2-2357">A <see cref="T:System.Linq.Lookup`2" /> that contains keys and values.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-2358"><xref:System.Linq.Enumerable.ToLookup%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> Metoda<xref:System.Linq.Lookup%602>zwraca, czyli słownik jeden do wielu, który mapuje klucze na kolekcje wartości.</span><span class="sxs-lookup"><span data-stu-id="994a2-2358">The <xref:System.Linq.Enumerable.ToLookup%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> method returns a <xref:System.Linq.Lookup%602>, a one-to-many dictionary that maps keys to collections of values.</span></span> <span data-ttu-id="994a2-2359">A <xref:System.Linq.Lookup%602> jest różna <xref:System.Collections.Generic.Dictionary%602>do, który wykonuje mapowanie jeden do jednego kluczy do pojedynczych wartości.</span><span class="sxs-lookup"><span data-stu-id="994a2-2359">A <xref:System.Linq.Lookup%602> is different to a <xref:System.Collections.Generic.Dictionary%602>, which performs a one-to-one mapping of keys to single values.</span></span>  
  
 <span data-ttu-id="994a2-2360">Jeśli `comparer` <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> jest `null`, domyślną funkcję porównującą równość używa się do porównywania kluczy.</span><span class="sxs-lookup"><span data-stu-id="994a2-2360">If `comparer` is `null`, the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> is used to compare keys.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-2361"><paramref name="source" />lub <paramref name="keySelector" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-2361"><paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToLookup&lt;TSource,TKey,TElement&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.ILookup&lt;TKey,TElement&gt; ToLookup&lt;TSource,TKey,TElement&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TSource,TElement&gt; elementSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.ILookup`2&lt;!!TKey, !!TElement&gt; ToLookup&lt;TSource, TKey, TElement&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Func`2&lt;!!TSource, !!TElement&gt; elementSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToLookup(Of TSource, TKey, TElement) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement)) As ILookup(Of TKey, TElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey, typename TElement&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::ILookup&lt;TKey, TElement&gt; ^ ToLookup(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, Func&lt;TSource, TElement&gt; ^ elementSelector);" />
      <MemberSignature Language="F#" Value="static member ToLookup : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * Func&lt;'Source, 'Element&gt; -&gt; System.Linq.ILookup&lt;'Key, 'Element&gt;" Usage="System.Linq.Enumerable.ToLookup (source, keySelector, elementSelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.ILookup&lt;TKey,TElement&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TElement" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="elementSelector" Type="System.Func&lt;TSource,TElement&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-2362">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-2362">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TKey"><span data-ttu-id="994a2-2363">Typ klucza zwracanego przez <paramref name="keySelector" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-2363">The type of the key returned by <paramref name="keySelector" />.</span></span></typeparam>
        <typeparam name="TElement"><span data-ttu-id="994a2-2364">Typ wartości zwracanej przez <paramref name="elementSelector" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-2364">The type of the value returned by <paramref name="elementSelector" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-2365">W celu utworzenia elementu <see cref="T:System.Linq.Lookup`2" />z. <see cref="T:System.Collections.Generic.IEnumerable`1" /></span><span class="sxs-lookup"><span data-stu-id="994a2-2365">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Linq.Lookup`2" /> from.</span></span></param>
        <param name="keySelector"><span data-ttu-id="994a2-2366">Funkcja wyodrębniania klucza z każdego elementu.</span><span class="sxs-lookup"><span data-stu-id="994a2-2366">A function to extract a key from each element.</span></span></param>
        <param name="elementSelector"><span data-ttu-id="994a2-2367">Funkcja transformacji do uzyskiwania wartości wyniku elementu z każdego z elementu.</span><span class="sxs-lookup"><span data-stu-id="994a2-2367">A transform function to produce a result element value from each element.</span></span></param>
        <summary><span data-ttu-id="994a2-2368"><see cref="T:System.Linq.Lookup`2" /> Tworzy<see cref="T:System.Collections.Generic.IEnumerable`1" /> z elementu zgodnie z określonym selektorem kluczy i funkcjami selektora elementów.</span><span class="sxs-lookup"><span data-stu-id="994a2-2368">Creates a <see cref="T:System.Linq.Lookup`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to specified key selector and element selector functions.</span></span></summary>
        <returns><span data-ttu-id="994a2-2369">A <see cref="T:System.Linq.Lookup`2" /> , który zawiera wartości typu <paramref name="TElement" /> wybrane z sekwencji wejściowej.</span><span class="sxs-lookup"><span data-stu-id="994a2-2369">A <see cref="T:System.Linq.Lookup`2" /> that contains values of type <paramref name="TElement" /> selected from the input sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-2370"><xref:System.Linq.Enumerable.ToLookup%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29> Metoda<xref:System.Linq.Lookup%602>zwraca, czyli słownik jeden do wielu, który mapuje klucze na kolekcje wartości.</span><span class="sxs-lookup"><span data-stu-id="994a2-2370">The <xref:System.Linq.Enumerable.ToLookup%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29> method returns a <xref:System.Linq.Lookup%602>, a one-to-many dictionary that maps keys to collections of values.</span></span> <span data-ttu-id="994a2-2371">Różni się od elementu <xref:System.Collections.Generic.Dictionary%602>, który wykonuje mapowanie jeden do jednego kluczy do pojedynczych wartości. <xref:System.Linq.Lookup%602></span><span class="sxs-lookup"><span data-stu-id="994a2-2371">A <xref:System.Linq.Lookup%602> differs from a <xref:System.Collections.Generic.Dictionary%602>, which performs a one-to-one mapping of keys to single values.</span></span>  
  
 <span data-ttu-id="994a2-2372">Domyślna funkcja porównująca <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> równość jest używana do porównywania kluczy.</span><span class="sxs-lookup"><span data-stu-id="994a2-2372">The default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> is used to compare keys.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-2373">Poniższy przykład kodu demonstruje, jak używać <xref:System.Linq.Enumerable.ToLookup%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29> do <xref:System.Linq.Lookup%602> tworzenia przy użyciu funkcji selektora kluczy i funkcji selektora elementów.</span><span class="sxs-lookup"><span data-stu-id="994a2-2373">The following code example demonstrates how to use <xref:System.Linq.Enumerable.ToLookup%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29> to create a <xref:System.Linq.Lookup%602> by using a key selector function and an element selector function.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#107](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#107)]
 [!code-vb[System.Linq.Enumerable#107](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#107)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-2374"><paramref name="source" />or <paramref name="keySelector" /> lub <paramref name="elementSelector" /> is .<see langword="null" /></span><span class="sxs-lookup"><span data-stu-id="994a2-2374"><paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="ToLookup&lt;TSource,TKey,TElement&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.ILookup&lt;TKey,TElement&gt; ToLookup&lt;TSource,TKey,TElement&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TSource,TElement&gt; elementSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.ILookup`2&lt;!!TKey, !!TElement&gt; ToLookup&lt;TSource, TKey, TElement&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Func`2&lt;!!TSource, !!TElement&gt; elementSelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToLookup(Of TSource, TKey, TElement) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement), comparer As IEqualityComparer(Of TKey)) As ILookup(Of TKey, TElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey, typename TElement&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::ILookup&lt;TKey, TElement&gt; ^ ToLookup(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, Func&lt;TSource, TElement&gt; ^ elementSelector, System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member ToLookup : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * Func&lt;'Source, 'Element&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; System.Linq.ILookup&lt;'Key, 'Element&gt;" Usage="System.Linq.Enumerable.ToLookup (source, keySelector, elementSelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.ILookup&lt;TKey,TElement&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TElement" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="elementSelector" Type="System.Func&lt;TSource,TElement&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-2375">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-2375">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <typeparam name="TKey"><span data-ttu-id="994a2-2376">Typ klucza zwracanego przez <paramref name="keySelector" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-2376">The type of the key returned by <paramref name="keySelector" />.</span></span></typeparam>
        <typeparam name="TElement"><span data-ttu-id="994a2-2377">Typ wartości zwracanej przez <paramref name="elementSelector" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-2377">The type of the value returned by <paramref name="elementSelector" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-2378">W celu utworzenia elementu <see cref="T:System.Linq.Lookup`2" />z. <see cref="T:System.Collections.Generic.IEnumerable`1" /></span><span class="sxs-lookup"><span data-stu-id="994a2-2378">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Linq.Lookup`2" /> from.</span></span></param>
        <param name="keySelector"><span data-ttu-id="994a2-2379">Funkcja wyodrębniania klucza z każdego elementu.</span><span class="sxs-lookup"><span data-stu-id="994a2-2379">A function to extract a key from each element.</span></span></param>
        <param name="elementSelector"><span data-ttu-id="994a2-2380">Funkcja transformacji do uzyskiwania wartości wyniku elementu z każdego z elementu.</span><span class="sxs-lookup"><span data-stu-id="994a2-2380">A transform function to produce a result element value from each element.</span></span></param>
        <param name="comparer"><span data-ttu-id="994a2-2381"><see cref="T:System.Collections.Generic.IEqualityComparer`1" /> Do porównywania kluczy.</span><span class="sxs-lookup"><span data-stu-id="994a2-2381">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</span></span></param>
        <summary><span data-ttu-id="994a2-2382">Tworzy element <see cref="T:System.Linq.Lookup`2" /> a <see cref="T:System.Collections.Generic.IEnumerable`1" /> od zgodnie z określoną funkcją selektora kluczy, funkcją porównującą i elementem selektora elementów.</span><span class="sxs-lookup"><span data-stu-id="994a2-2382">Creates a <see cref="T:System.Linq.Lookup`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to a specified key selector function, a comparer and an element selector function.</span></span></summary>
        <returns><span data-ttu-id="994a2-2383">A <see cref="T:System.Linq.Lookup`2" /> , który zawiera wartości typu <paramref name="TElement" /> wybrane z sekwencji wejściowej.</span><span class="sxs-lookup"><span data-stu-id="994a2-2383">A <see cref="T:System.Linq.Lookup`2" /> that contains values of type <paramref name="TElement" /> selected from the input sequence.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-2384"><xref:System.Linq.Enumerable.ToLookup%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> Metoda<xref:System.Linq.Lookup%602>zwraca, czyli słownik jeden do wielu, który mapuje klucze na kolekcje wartości.</span><span class="sxs-lookup"><span data-stu-id="994a2-2384">The <xref:System.Linq.Enumerable.ToLookup%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> method returns a <xref:System.Linq.Lookup%602>, a one-to-many dictionary that maps keys to collections of values.</span></span> <span data-ttu-id="994a2-2385">Różni się od elementu <xref:System.Collections.Generic.Dictionary%602>, który wykonuje mapowanie jeden do jednego kluczy do pojedynczych wartości. <xref:System.Linq.Lookup%602></span><span class="sxs-lookup"><span data-stu-id="994a2-2385">A <xref:System.Linq.Lookup%602> differs from a <xref:System.Collections.Generic.Dictionary%602>, which performs a one-to-one mapping of keys to single values.</span></span>  
  
 <span data-ttu-id="994a2-2386">Jeśli `comparer` <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> jest `null`, domyślną funkcję porównującą równość używa się do porównywania kluczy.</span><span class="sxs-lookup"><span data-stu-id="994a2-2386">If `comparer` is `null`, the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> is used to compare keys.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-2387"><paramref name="source" />or <paramref name="keySelector" /> lub <paramref name="elementSelector" /> is .<see langword="null" /></span><span class="sxs-lookup"><span data-stu-id="994a2-2387"><paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Union&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="994a2-2388">Tworzy Unię zestawu dwóch sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-2388">Produces the set union of two sequences.</span></span></summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  

[!INCLUDE[interactive-note](~/includes/csharp-interactive-note-some.md)]

]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Union&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Union&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; first, System.Collections.Generic.IEnumerable&lt;TSource&gt; second);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Union&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; first, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; second) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Union(Of TSource) (first As IEnumerable(Of TSource), second As IEnumerable(Of TSource)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ Union(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ first, System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ second);" />
      <MemberSignature Language="F#" Value="static member Union : seq&lt;'Source&gt; * seq&lt;'Source&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.Union (first, second)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="first" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="second" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-2389">Typ elementów sekwencji wejściowych.</span><span class="sxs-lookup"><span data-stu-id="994a2-2389">The type of the elements of the input sequences.</span></span></typeparam>
        <param name="first"><span data-ttu-id="994a2-2390">, <see cref="T:System.Collections.Generic.IEnumerable`1" /> Których odrębne elementy tworzą pierwszy zestaw dla Unii.</span><span class="sxs-lookup"><span data-stu-id="994a2-2390">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose distinct elements form the first set for the union.</span></span></param>
        <param name="second"><span data-ttu-id="994a2-2391">, <see cref="T:System.Collections.Generic.IEnumerable`1" /> Których różne elementy tworzą drugi zestaw dla Unii.</span><span class="sxs-lookup"><span data-stu-id="994a2-2391">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose distinct elements form the second set for the union.</span></span></param>
        <summary><span data-ttu-id="994a2-2392">Tworzy Unię zestawu dwóch sekwencji przy użyciu domyślnej funkcji porównującej równość.</span><span class="sxs-lookup"><span data-stu-id="994a2-2392">Produces the set union of two sequences by using the default equality comparer.</span></span></summary>
        <returns><span data-ttu-id="994a2-2393"><see cref="T:System.Collections.Generic.IEnumerable`1" /> Zawiera elementy z obu sekwencji wejściowych, z wyjątkiem duplikatów.</span><span class="sxs-lookup"><span data-stu-id="994a2-2393">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements from both input sequences, excluding duplicates.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-2394">Ta metoda jest implementowana za pomocą odroczonego wykonania.</span><span class="sxs-lookup"><span data-stu-id="994a2-2394">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="994a2-2395">Bezpośrednio zwracana wartość jest obiektem, który przechowuje wszystkie informacje wymagane do wykonania akcji.</span><span class="sxs-lookup"><span data-stu-id="994a2-2395">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="994a2-2396">Zapytanie reprezentowane przez tę metodę nie jest wykonywane `GetEnumerator` do momentu wyliczenia obiektu przez wywołanie jego metody bezpośrednio lub przy użyciu `foreach` w wizualizacji C# lub `For Each` w Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="994a2-2396">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="994a2-2397">Ta metoda wyklucza duplikaty z zestawu zwracanego.</span><span class="sxs-lookup"><span data-stu-id="994a2-2397">This method excludes duplicates from the return set.</span></span> <span data-ttu-id="994a2-2398">Jest to inne zachowanie <xref:System.Linq.Enumerable.Concat%2A> metody, która zwraca wszystkie elementy w sekwencjach wejściowych, w tym duplikaty.</span><span class="sxs-lookup"><span data-stu-id="994a2-2398">This is different behavior to the <xref:System.Linq.Enumerable.Concat%2A> method, which returns all the elements in the input sequences including duplicates.</span></span>  
  
 <span data-ttu-id="994a2-2399">Domyślna funkcja porównująca <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>równość jest używana do porównywania wartości typów, które <xref:System.Collections.Generic.IEqualityComparer%601> implementują interfejs ogólny.</span><span class="sxs-lookup"><span data-stu-id="994a2-2399">The default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare values of the types that implement the <xref:System.Collections.Generic.IEqualityComparer%601> generic interface.</span></span> <span data-ttu-id="994a2-2400">Aby porównać niestandardowy typ danych, należy zaimplementować ten interfejs i udostępnić własne <xref:System.Object.GetHashCode%2A> <xref:System.Object.Equals%2A> metody dla typu.</span><span class="sxs-lookup"><span data-stu-id="994a2-2400">To compare a custom data type, you need to implement this interface and provide your own <xref:System.Object.GetHashCode%2A> and <xref:System.Object.Equals%2A> methods for the type.</span></span>  
  
 <span data-ttu-id="994a2-2401">Gdy obiekt zwracany przez tę metodę jest wyliczany, `Union` `first` wylicza i `second` w tej kolejności i daje każdy element, który nie został jeszcze osiągnięty.</span><span class="sxs-lookup"><span data-stu-id="994a2-2401">When the object returned by this method is enumerated, `Union` enumerates `first` and `second` in that order and yields each element that has not already been yielded.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-2402">Poniższy przykład kodu demonstruje, jak użyć `Union<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)` , aby uzyskać złożenie dwóch sekwencji liczb całkowitych.</span><span class="sxs-lookup"><span data-stu-id="994a2-2402">The following code example demonstrates how to use `Union<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)` to obtain the union of two sequences of integers.</span></span>  
  
 [!code-csharp-interactive[System.Linq.Enumerable#109](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#109)]
 [!code-vb[System.Linq.Enumerable#109](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#109)]  
  
 <span data-ttu-id="994a2-2403">Jeśli chcesz porównać sekwencje obiektów z niestandardowym typem danych, musisz zaimplementować <xref:System.IEquatable%601> interfejs generyczny w klasie pomocnika.</span><span class="sxs-lookup"><span data-stu-id="994a2-2403">If you want to compare sequences of objects of some custom data type, you have to implement the <xref:System.IEquatable%601> generic interface in a helper class.</span></span> <span data-ttu-id="994a2-2404">Poniższy przykład kodu pokazuje, jak zaimplementować ten interfejs w niestandardowym typie danych oraz zastąpień <xref:System.Object.GetHashCode%2A> i <xref:System.Object.Equals%2A> metodach.</span><span class="sxs-lookup"><span data-stu-id="994a2-2404">The following code example shows how to implement this interface in a custom data type and override <xref:System.Object.GetHashCode%2A> and <xref:System.Object.Equals%2A> methods.</span></span>
  
 [!code-csharp[CSLINQEncapsulatedComparer#9](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/CS/EncapsulatedComparer.cs#9)]  
 [!code-vb[CSLINQEncapsulatedComparer#9](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/VB/EncapsulatedComparer.vb#9)]  

 <span data-ttu-id="994a2-2405">Po zaimplementowaniu tego interfejsu można użyć sekwencji `ProductA` obiektów `Union<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)` w metodzie, jak pokazano w następującym przykładzie:</span><span class="sxs-lookup"><span data-stu-id="994a2-2405">After you implement this interface, you can use sequences of `ProductA` objects in the `Union<TSource>(IEnumerable<TSource>, IEnumerable<TSource>)` method, as shown in the following example:</span></span>  
  
 [!code-csharp[CSLINQEncapsulatedComparer#10](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/CS/EncapsulatedComparer.cs#10)]
 [!code-vb[CSLINQEncapsulatedComparer#10](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/VB/EncapsulatedComparer.vb#10)]

[!code-csharp[CSLINQEncapsulatedComparer#4](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/CS/EncapsulatedComparer.cs#4)]
[!code-vb[CSLINQEncapsulatedComparer#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/VB/EncapsulatedComparer.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-2406"><paramref name="first" />lub <paramref name="second" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-2406"><paramref name="first" /> or <paramref name="second" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Union&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Union&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; first, System.Collections.Generic.IEnumerable&lt;TSource&gt; second, System.Collections.Generic.IEqualityComparer&lt;TSource&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Union&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; first, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; second, class System.Collections.Generic.IEqualityComparer`1&lt;!!TSource&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Union(Of TSource) (first As IEnumerable(Of TSource), second As IEnumerable(Of TSource), comparer As IEqualityComparer(Of TSource)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ Union(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ first, System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ second, System::Collections::Generic::IEqualityComparer&lt;TSource&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member Union : seq&lt;'Source&gt; * seq&lt;'Source&gt; * System.Collections.Generic.IEqualityComparer&lt;'Source&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.Union (first, second, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="first" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="second" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-2407">Typ elementów sekwencji wejściowych.</span><span class="sxs-lookup"><span data-stu-id="994a2-2407">The type of the elements of the input sequences.</span></span></typeparam>
        <param name="first"><span data-ttu-id="994a2-2408">, <see cref="T:System.Collections.Generic.IEnumerable`1" /> Których odrębne elementy tworzą pierwszy zestaw dla Unii.</span><span class="sxs-lookup"><span data-stu-id="994a2-2408">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose distinct elements form the first set for the union.</span></span></param>
        <param name="second"><span data-ttu-id="994a2-2409">, <see cref="T:System.Collections.Generic.IEnumerable`1" /> Których różne elementy tworzą drugi zestaw dla Unii.</span><span class="sxs-lookup"><span data-stu-id="994a2-2409">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose distinct elements form the second set for the union.</span></span></param>
        <param name="comparer"><span data-ttu-id="994a2-2410"><see cref="T:System.Collections.Generic.IEqualityComparer`1" /> Do porównywania wartości.</span><span class="sxs-lookup"><span data-stu-id="994a2-2410">The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</span></span></param>
        <summary><span data-ttu-id="994a2-2411">Tworzy Unię zestawu dwóch sekwencji przy użyciu określonego <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-2411">Produces the set union of two sequences by using a specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</span></span></summary>
        <returns><span data-ttu-id="994a2-2412"><see cref="T:System.Collections.Generic.IEnumerable`1" /> Zawiera elementy z obu sekwencji wejściowych, z wyjątkiem duplikatów.</span><span class="sxs-lookup"><span data-stu-id="994a2-2412">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements from both input sequences, excluding duplicates.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-2413">Ta metoda jest implementowana za pomocą odroczonego wykonania.</span><span class="sxs-lookup"><span data-stu-id="994a2-2413">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="994a2-2414">Bezpośrednio zwracana wartość jest obiektem, który przechowuje wszystkie informacje wymagane do wykonania akcji.</span><span class="sxs-lookup"><span data-stu-id="994a2-2414">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="994a2-2415">Zapytanie reprezentowane przez tę metodę nie jest wykonywane `GetEnumerator` do momentu wyliczenia obiektu przez wywołanie jego metody bezpośrednio lub przy użyciu `foreach` w wizualizacji C# lub `For Each` w Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="994a2-2415">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="994a2-2416">Jeśli `comparer` <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>jest `null`, domyślna funkcja porównująca równość jest używana do porównywania wartości.</span><span class="sxs-lookup"><span data-stu-id="994a2-2416">If `comparer` is `null`, the default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare values.</span></span>  
  
 <span data-ttu-id="994a2-2417">Gdy obiekt zwracany przez tę metodę jest wyliczany, <xref:System.Linq.Enumerable.Union%2A> `first` wylicza i `second` w tej kolejności i daje każdy element, który nie został jeszcze osiągnięty.</span><span class="sxs-lookup"><span data-stu-id="994a2-2417">When the object returned by this method is enumerated, <xref:System.Linq.Enumerable.Union%2A> enumerates `first` and `second` in that order and yields each element that has not already been yielded.</span></span>  
  
 <span data-ttu-id="994a2-2418">Metoda różni się od metody <xref:System.Linq.Enumerable.Union%2A> , ponieważ <xref:System.Linq.Enumerable.Concat%2A> Metoda zwraca wszystkie elementy w sekwencjach wejściowych, w tym duplikaty, podczas <xref:System.Linq.Enumerable.Union%2A> gdy zwraca tylko unikatowe wartości. <xref:System.Linq.Enumerable.Concat%2A></span><span class="sxs-lookup"><span data-stu-id="994a2-2418">The <xref:System.Linq.Enumerable.Concat%2A> method differs from the <xref:System.Linq.Enumerable.Union%2A> method because the <xref:System.Linq.Enumerable.Concat%2A> method returns all the elements in the input sequences including duplicates, whereas <xref:System.Linq.Enumerable.Union%2A> returns only unique values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-2419">Poniższy przykład pokazuje, jak zaimplementować funkcję porównującą równość, która może zostać użyta <xref:System.Linq.Enumerable.Union%2A> w metodzie.</span><span class="sxs-lookup"><span data-stu-id="994a2-2419">The following example shows how to implement an equality comparer that can be used in the <xref:System.Linq.Enumerable.Union%2A> method.</span></span>  
  
 [!code-csharp[CSLINQCustomComparer#1](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQCustomComparer/CS/CustomComparer.cs#1)]
 [!code-vb[CSLINQCustomComparer#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQCustomComparer/VB/CustomComparer.vb#1)]  
  
 <span data-ttu-id="994a2-2420">Po zaimplementowaniu tej <xref:System.Linq.Enumerable.Union%2A> metody porównującej można użyć sekwencji `Product` obiektów w metodzie, jak pokazano w następującym przykładzie:</span><span class="sxs-lookup"><span data-stu-id="994a2-2420">After you implement this comparer, you can use sequences of `Product` objects in the <xref:System.Linq.Enumerable.Union%2A> method, as shown in the following example:</span></span>  
  
 [!code-csharp[CSLINQCustomComparer#2](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQCustomComparer/CS/CustomComparer.cs#2)]
 [!code-vb[CSLINQCustomComparer#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQCustomComparer/VB/CustomComparer.vb#2)]  
[!code-csharp[CSLINQCustomComparer#4](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQCustomComparer/CS/CustomComparer.cs#4)]
[!code-vb[CSLINQCustomComparer#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQCustomComparer/VB/CustomComparer.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-2421"><paramref name="first" />lub <paramref name="second" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-2421"><paramref name="first" /> or <paramref name="second" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Where&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary><span data-ttu-id="994a2-2422">Filtruje sekwencję wartości na podstawie predykatu.</span><span class="sxs-lookup"><span data-stu-id="994a2-2422">Filters a sequence of values based on a predicate.</span></span></summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Where&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Where&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Where&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Where(Of TSource) (source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ Where(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member Where : seq&lt;'Source&gt; * Func&lt;'Source, bool&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.Where (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-2423">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-2423">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-2424"><see cref="T:System.Collections.Generic.IEnumerable`1" /> Do filtrowania.</span><span class="sxs-lookup"><span data-stu-id="994a2-2424">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to filter.</span></span></param>
        <param name="predicate"><span data-ttu-id="994a2-2425">Funkcja testowania każdego elementu na stanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-2425">A function to test each element for a condition.</span></span></param>
        <summary><span data-ttu-id="994a2-2426">Filtruje sekwencję wartości na podstawie predykatu.</span><span class="sxs-lookup"><span data-stu-id="994a2-2426">Filters a sequence of values based on a predicate.</span></span></summary>
        <returns><span data-ttu-id="994a2-2427"><see cref="T:System.Collections.Generic.IEnumerable`1" /> Zawiera elementy z sekwencji wejściowej, które spełniają warunek.</span><span class="sxs-lookup"><span data-stu-id="994a2-2427">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains elements from the input sequence that satisfy the condition.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-2428">Ta metoda jest implementowana za pomocą odroczonego wykonania.</span><span class="sxs-lookup"><span data-stu-id="994a2-2428">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="994a2-2429">Bezpośrednio zwracana wartość jest obiektem, który przechowuje wszystkie informacje wymagane do wykonania akcji.</span><span class="sxs-lookup"><span data-stu-id="994a2-2429">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="994a2-2430">Zapytanie reprezentowane przez tę metodę nie jest wykonywane `GetEnumerator` do momentu wyliczenia obiektu przez wywołanie jego metody bezpośrednio lub przy użyciu `foreach` w wizualizacji C# lub `For Each` w Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="994a2-2430">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="994a2-2431">W `where` składni wyrażenia zapytania, klauzula (wizualizacja C#) `Where` lub (Visual Basic) <xref:System.Linq.Enumerable.Where%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29>tłumaczy na wywołanie.</span><span class="sxs-lookup"><span data-stu-id="994a2-2431">In query expression syntax, a `where` (Visual C#) or `Where` (Visual Basic) clause translates to an invocation of <xref:System.Linq.Enumerable.Where%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-2432">Poniższy przykład kodu demonstruje, jak używać <xref:System.Linq.Enumerable.Where%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> do filtrowania sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-2432">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Where%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> to filter a sequence.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#110](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#110)]
 [!code-vb[System.Linq.Enumerable#110](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#110)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-2433"><paramref name="source" />lub <paramref name="predicate" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-2433"><paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span></span></exception>
        <related type="Article" href="~/docs/csharp/language-reference/keywords/where-clause.md"><span data-ttu-id="994a2-2434">Klauzula where (odwołanie w C#)</span><span class="sxs-lookup"><span data-stu-id="994a2-2434">where clause (C# Reference)</span></span></related>
        <related type="Article" href="~/docs/visual-basic/language-reference/queries/where-clause.md"><span data-ttu-id="994a2-2435">Where — Klauzula (Visual Basic)</span><span class="sxs-lookup"><span data-stu-id="994a2-2435">Where Clause (Visual Basic)</span></span></related>
      </Docs>
    </Member>
    <Member MemberName="Where&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Where&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,int,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Where&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`3&lt;!!TSource, int32, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Where(Of TSource) (source As IEnumerable(Of TSource), predicate As Func(Of TSource, Integer, Boolean)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ Where(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, int, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member Where : seq&lt;'Source&gt; * Func&lt;'Source, int, bool&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.Where (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Int32,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource"><span data-ttu-id="994a2-2436">Typ elementów <paramref name="source" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-2436">The type of the elements of <paramref name="source" />.</span></span></typeparam>
        <param name="source"><span data-ttu-id="994a2-2437"><see cref="T:System.Collections.Generic.IEnumerable`1" /> Do filtrowania.</span><span class="sxs-lookup"><span data-stu-id="994a2-2437">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to filter.</span></span></param>
        <param name="predicate"><span data-ttu-id="994a2-2438">Funkcja do testowania każdego elementu źródłowego dla warunku; drugi parametr funkcji reprezentuje indeks elementu źródłowego.</span><span class="sxs-lookup"><span data-stu-id="994a2-2438">A function to test each source element for a condition; the second parameter of the function represents the index of the source element.</span></span></param>
        <summary><span data-ttu-id="994a2-2439">Filtruje sekwencję wartości na podstawie predykatu.</span><span class="sxs-lookup"><span data-stu-id="994a2-2439">Filters a sequence of values based on a predicate.</span></span> <span data-ttu-id="994a2-2440">Indeks każdego elementu jest używany w logice funkcji predykatu.</span><span class="sxs-lookup"><span data-stu-id="994a2-2440">Each element's index is used in the logic of the predicate function.</span></span></summary>
        <returns><span data-ttu-id="994a2-2441"><see cref="T:System.Collections.Generic.IEnumerable`1" /> Zawiera elementy z sekwencji wejściowej, które spełniają warunek.</span><span class="sxs-lookup"><span data-stu-id="994a2-2441">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains elements from the input sequence that satisfy the condition.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-2442">Ta metoda jest implementowana za pomocą odroczonego wykonania.</span><span class="sxs-lookup"><span data-stu-id="994a2-2442">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="994a2-2443">Bezpośrednio zwracana wartość jest obiektem, który przechowuje wszystkie informacje wymagane do wykonania akcji.</span><span class="sxs-lookup"><span data-stu-id="994a2-2443">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="994a2-2444">Zapytanie reprezentowane przez tę metodę nie jest wykonywane `GetEnumerator` do momentu wyliczenia obiektu przez wywołanie jego metody bezpośrednio lub przy użyciu `foreach` w wizualizacji C# lub `For Each` w Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="994a2-2444">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="994a2-2445">Pierwszy argument `predicate` przedstawia element do przetestowania.</span><span class="sxs-lookup"><span data-stu-id="994a2-2445">The first argument of `predicate` represents the element to test.</span></span> <span data-ttu-id="994a2-2446">Drugi argument reprezentuje indeks (liczony od zera) elementu w `source`.</span><span class="sxs-lookup"><span data-stu-id="994a2-2446">The second argument represents the zero-based index of the element within `source`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-2447">Poniższy przykład kodu demonstruje, jak używać <xref:System.Linq.Enumerable.Where%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29> do filtrowania sekwencji na podstawie predykatu, który obejmuje indeks każdego elementu.</span><span class="sxs-lookup"><span data-stu-id="994a2-2447">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Where%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29> to filter a sequence based on a predicate that involves the index of each element.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#111](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#111)]
 [!code-vb[System.Linq.Enumerable#111](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#111)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-2448"><paramref name="source" />lub <paramref name="predicate" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-2448"><paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
    <Member MemberName="Zip&lt;TFirst,TSecond&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;ValueTuple&lt;TFirst,TSecond&gt;&gt; Zip&lt;TFirst,TSecond&gt; (this System.Collections.Generic.IEnumerable&lt;TFirst&gt; first, System.Collections.Generic.IEnumerable&lt;TSecond&gt; second);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;valuetype System.ValueTuple`2&lt;!!TFirst, !!TSecond&gt;&gt; Zip&lt;TFirst, TSecond&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TFirst&gt; first, class System.Collections.Generic.IEnumerable`1&lt;!!TSecond&gt; second) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Zip``2(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Zip(Of TFirst, TSecond) (first As IEnumerable(Of TFirst), second As IEnumerable(Of TSecond)) As IEnumerable(Of ValueTuple(Of TFirst, TSecond))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TFirst, typename TSecond&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;ValueTuple&lt;TFirst, TSecond&gt;&gt; ^ Zip(System::Collections::Generic::IEnumerable&lt;TFirst&gt; ^ first, System::Collections::Generic::IEnumerable&lt;TSecond&gt; ^ second);" />
      <MemberSignature Language="F#" Value="static member Zip : seq&lt;'First&gt; * seq&lt;'Second&gt; -&gt; seq&lt;ValueTuple&lt;'First, 'Second&gt;&gt;" Usage="System.Linq.Enumerable.Zip (first, second)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.ValueTuple&lt;TFirst,TSecond&gt;&gt;</ReturnType>
        <Attributes>
          <Attribute FrameworkAlternate="netcore-3.0">
            <AttributeName>System.Runtime.CompilerServices.TupleElementNames(new System.String[] { "First", "Second" })</AttributeName>
          </Attribute>
        </Attributes>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TFirst" />
        <TypeParameter Name="TSecond" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="first" Type="System.Collections.Generic.IEnumerable&lt;TFirst&gt;" RefType="this" Index="0" FrameworkAlternate="netcore-3.0" />
        <Parameter Name="second" Type="System.Collections.Generic.IEnumerable&lt;TSecond&gt;" Index="1" FrameworkAlternate="netcore-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="TFirst"><span data-ttu-id="994a2-2449">Typ elementów pierwszej sekwencji wejściowej.</span><span class="sxs-lookup"><span data-stu-id="994a2-2449">The type of the elements of the first input sequence.</span></span></typeparam>
        <typeparam name="TSecond"><span data-ttu-id="994a2-2450">Typ elementów drugiej sekwencji wejściowej.</span><span class="sxs-lookup"><span data-stu-id="994a2-2450">The type of the elements of the second input sequence.</span></span></typeparam>
        <param name="first"><span data-ttu-id="994a2-2451">Pierwsza sekwencja do scalenia.</span><span class="sxs-lookup"><span data-stu-id="994a2-2451">The first sequence to merge.</span></span></param>
        <param name="second"><span data-ttu-id="994a2-2452">Druga sekwencja do scalenia.</span><span class="sxs-lookup"><span data-stu-id="994a2-2452">The second sequence to merge.</span></span></param>
        <summary><span data-ttu-id="994a2-2453">Tworzy sekwencję krotek z elementami z dwóch określonych sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-2453">Produces a sequence of tuples with elements from the two specified sequences.</span></span></summary>
        <returns><span data-ttu-id="994a2-2454">Sekwencja krotek z elementami pobranymi z pierwszej i drugiej sekwencji w tej kolejności.</span><span class="sxs-lookup"><span data-stu-id="994a2-2454">A sequence of tuples with elements taken from the first and second sequences, in that order.</span></span></returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="Zip&lt;TFirst,TSecond,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; Zip&lt;TFirst,TSecond,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TFirst&gt; first, System.Collections.Generic.IEnumerable&lt;TSecond&gt; second, Func&lt;TFirst,TSecond,TResult&gt; resultSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; Zip&lt;TFirst, TSecond, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TFirst&gt; first, class System.Collections.Generic.IEnumerable`1&lt;!!TSecond&gt; second, class System.Func`3&lt;!!TFirst, !!TSecond, !!TResult&gt; resultSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Zip(Of TFirst, TSecond, TResult) (first As IEnumerable(Of TFirst), second As IEnumerable(Of TSecond), resultSelector As Func(Of TFirst, TSecond, TResult)) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TFirst, typename TSecond, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ Zip(System::Collections::Generic::IEnumerable&lt;TFirst&gt; ^ first, System::Collections::Generic::IEnumerable&lt;TSecond&gt; ^ second, Func&lt;TFirst, TSecond, TResult&gt; ^ resultSelector);" />
      <MemberSignature Language="F#" Value="static member Zip : seq&lt;'First&gt; * seq&lt;'Second&gt; * Func&lt;'First, 'Second, 'Result&gt; -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.Zip (first, second, resultSelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
        <AssemblyVersion>2.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TFirst" />
        <TypeParameter Name="TSecond" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="first" Type="System.Collections.Generic.IEnumerable&lt;TFirst&gt;" RefType="this" Index="0" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="second" Type="System.Collections.Generic.IEnumerable&lt;TSecond&gt;" Index="1" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
        <Parameter Name="resultSelector" Type="System.Func&lt;TFirst,TSecond,TResult&gt;" Index="2" FrameworkAlternate="dotnet-uwp-10.0;netcore-1.0;netcore-1.1;netcore-2.0;netcore-2.1;netcore-2.2;netcore-3.0;netframework-4.0;netframework-4.5;netframework-4.5.1;netframework-4.5.2;netframework-4.6;netframework-4.6.1;netframework-4.6.2;netframework-4.7;netframework-4.7.1;netframework-4.7.2;netframework-4.8;netstandard-1.0;netstandard-1.1;netstandard-1.2;netstandard-1.3;netstandard-1.4;netstandard-1.6;netstandard-2.0;netstandard-2.1;xamarinandroid-7.1;xamarinios-10.8;xamarinmac-3.0" />
      </Parameters>
      <Docs>
        <typeparam name="TFirst"><span data-ttu-id="994a2-2455">Typ elementów pierwszej sekwencji wejściowej.</span><span class="sxs-lookup"><span data-stu-id="994a2-2455">The type of the elements of the first input sequence.</span></span></typeparam>
        <typeparam name="TSecond"><span data-ttu-id="994a2-2456">Typ elementów drugiej sekwencji wejściowej.</span><span class="sxs-lookup"><span data-stu-id="994a2-2456">The type of the elements of the second input sequence.</span></span></typeparam>
        <typeparam name="TResult"><span data-ttu-id="994a2-2457">Typ elementów sekwencji wyników.</span><span class="sxs-lookup"><span data-stu-id="994a2-2457">The type of the elements of the result sequence.</span></span></typeparam>
        <param name="first"><span data-ttu-id="994a2-2458">Pierwsza sekwencja do scalenia.</span><span class="sxs-lookup"><span data-stu-id="994a2-2458">The first sequence to merge.</span></span></param>
        <param name="second"><span data-ttu-id="994a2-2459">Druga sekwencja do scalenia.</span><span class="sxs-lookup"><span data-stu-id="994a2-2459">The second sequence to merge.</span></span></param>
        <param name="resultSelector"><span data-ttu-id="994a2-2460">Funkcja, która określa, jak scalić elementy z dwóch sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-2460">A function that specifies how to merge the elements from the two sequences.</span></span></param>
        <summary><span data-ttu-id="994a2-2461">Stosuje określoną funkcję do odpowiednich elementów dwóch sekwencji, generując sekwencję wyników.</span><span class="sxs-lookup"><span data-stu-id="994a2-2461">Applies a specified function to the corresponding elements of two sequences, producing a sequence of the results.</span></span></summary>
        <returns><span data-ttu-id="994a2-2462"><see cref="T:System.Collections.Generic.IEnumerable`1" /> Zawiera scalone elementy dwóch sekwencji wejściowych.</span><span class="sxs-lookup"><span data-stu-id="994a2-2462">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains merged elements of two input sequences.</span></span></returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="994a2-2463">Ta metoda jest implementowana za pomocą odroczonego wykonania.</span><span class="sxs-lookup"><span data-stu-id="994a2-2463">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="994a2-2464">Bezpośrednio zwracana wartość jest obiektem, który przechowuje wszystkie informacje wymagane do wykonania akcji.</span><span class="sxs-lookup"><span data-stu-id="994a2-2464">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="994a2-2465">Zapytanie reprezentowane przez tę metodę nie jest wykonywane `GetEnumerator` do momentu wyliczenia obiektu przez wywołanie jego metody bezpośrednio lub przy użyciu `foreach` w wizualizacji C# lub `For Each` w Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="994a2-2465">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="994a2-2466">Metoda Scala każdy element pierwszej sekwencji z elementem, który ma ten sam indeks w drugiej sekwencji.</span><span class="sxs-lookup"><span data-stu-id="994a2-2466">The method merges each element of the first sequence with an element that has the same index in the second sequence.</span></span> <span data-ttu-id="994a2-2467">Jeśli sekwencje nie mają takiej samej liczby elementów, metoda scala sekwencje do momentu osiągnięcia końca jednego z nich.</span><span class="sxs-lookup"><span data-stu-id="994a2-2467">If the sequences do not have the same number of elements, the method merges sequences until it reaches the end of one of them.</span></span> <span data-ttu-id="994a2-2468">Na przykład jeśli jedna sekwencja ma trzy elementy, a drugi ma cztery, sekwencja wyników będzie zawierać tylko trzy elementy.</span><span class="sxs-lookup"><span data-stu-id="994a2-2468">For example, if one sequence has three elements and the other one has four, the result sequence will have only three elements.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="994a2-2469">Poniższy przykład kodu demonstruje, <xref:System.Linq.Enumerable.Zip%2A> jak za pomocą metody scalić dwie sekwencje.</span><span class="sxs-lookup"><span data-stu-id="994a2-2469">The following code example demonstrates how to use the <xref:System.Linq.Enumerable.Zip%2A> method to merge two sequences.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#200](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#200)]
 [!code-vb[System.Linq.Enumerable#200](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#200)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><span data-ttu-id="994a2-2470"><paramref name="first" />lub <paramref name="second" /> jest <see langword="null" />.</span><span class="sxs-lookup"><span data-stu-id="994a2-2470"><paramref name="first" /> or <paramref name="second" /> is <see langword="null" />.</span></span></exception>
      </Docs>
    </Member>
  </Members>
</Type>