<Type Name="Enumerable" FullName="System.Linq.Enumerable">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="7a3de6f112ceeca9164631f03f1f84455a634d52" />
    <Meta Name="ms.sourcegitcommit" Value="16d2d159872fd213cae4b8f371d7ae9c8b027c89" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="11/17/2018" />
    <Meta Name="ms.locfileid" Value="51925423" />
  </Metadata>
  <TypeSignature Language="C#" Value="public static class Enumerable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract sealed beforefieldinit Enumerable extends System.Object" />
  <TypeSignature Language="DocId" Value="T:System.Linq.Enumerable" />
  <TypeSignature Language="VB.NET" Value="Public Module Enumerable" />
  <TypeSignature Language="C++ CLI" Value="public ref class Enumerable abstract sealed" />
  <TypeSignature Language="F#" Value="type Enumerable = class" />
  <AssemblyInfo>
    <AssemblyName>System.Linq</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
      <span data-ttu-id="e3165-101">Zawiera zestaw <see langword="static" /> (<see langword="Shared" /> w języku Visual Basic) metody do tworzenia zapytań o obiekty, które implementują <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span>
      <span class="sxs-lookup">
        <span data-stu-id="e3165-101">Provides a set of <see langword="static" /> (<see langword="Shared" /> in Visual Basic) methods for querying objects that implement <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-102">Metody tej klasy dostarczać implementację standardowych operatorów zapytań dla kwerendy danych źródła, które implementują <xref:System.Collections.Generic.IEnumerable%601>.</span><span class="sxs-lookup"><span data-stu-id="e3165-102">The methods in this class provide an implementation of the standard query operators for querying data sources that implement <xref:System.Collections.Generic.IEnumerable%601>.</span></span> <span data-ttu-id="e3165-103">Standardowe operatory zapytań są metodami ogólnego przeznaczenia, które należy wykonać [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] wzorca i umożliwiają express operacji przechodzenia, filtru i projekcji danych we wszystkich. Języka programowania opartego na sieci.</span><span class="sxs-lookup"><span data-stu-id="e3165-103">The standard query operators are general purpose methods that follow the [!INCLUDE[vbteclinq](~/includes/vbteclinq-md.md)] pattern and enable you to express traversal, filter, and projection operations over data in any .NET-based programming language.</span></span>  
  
 <span data-ttu-id="e3165-104">Większość metod w tej klasie są zdefiniowane jako metody rozszerzenia, które rozszerzają <xref:System.Collections.Generic.IEnumerable%601>.</span><span class="sxs-lookup"><span data-stu-id="e3165-104">The majority of the methods in this class are defined as extension methods that extend <xref:System.Collections.Generic.IEnumerable%601>.</span></span> <span data-ttu-id="e3165-105">Oznacza to, może być wywoływana takich jak metoda wystąpienia dla dowolnego obiektu, który implementuje <xref:System.Collections.Generic.IEnumerable%601>.</span><span class="sxs-lookup"><span data-stu-id="e3165-105">This means they can be called like an instance method on any object that implements <xref:System.Collections.Generic.IEnumerable%601>.</span></span>  
  
 <span data-ttu-id="e3165-106">Metody, które są używane w zapytaniu, które zwraca sekwencję wartości nie korzystają z danych docelowego, dopóki obiekt zapytania jest zostanie wyliczonly.</span><span class="sxs-lookup"><span data-stu-id="e3165-106">Methods that are used in a query that returns a sequence of values do not consume the target data until the query object is enumerated.</span></span> <span data-ttu-id="e3165-107">Jest to nazywane odroczonego wykonania.</span><span class="sxs-lookup"><span data-stu-id="e3165-107">This is known as deferred execution.</span></span> <span data-ttu-id="e3165-108">Metody, które są używane w zapytaniu, która zwraca wartość pojedynczych wykonywania i natychmiast korzystają z danych docelowych.</span><span class="sxs-lookup"><span data-stu-id="e3165-108">Methods that are used in a query that returns a singleton value execute and consume the target data immediately.</span></span>  
  
 ]]></format>
    </remarks>
    <related type="Article" href="https://msdn.microsoft.com/library/24cda21e-8af8-4632-b519-c404a839b9b2">
      <span data-ttu-id="e3165-109">Standardowe operatory zapytań — Omówienie</span>
      <span class="sxs-lookup">
        <span data-stu-id="e3165-109">Standard Query Operators Overview</span>
      </span>
    </related>
    <related type="Article" href="https://msdn.microsoft.com/library/175ce3ff-9bbf-4e64-8421-faeb81a0bb51">
      <span data-ttu-id="e3165-110">Metody rozszerzeń (Przewodnik programowania w języku C#)</span>
      <span class="sxs-lookup">
        <span data-stu-id="e3165-110">Extension Methods (C# Programming Guide)</span>
      </span>
    </related>
    <related type="Article" href="https://msdn.microsoft.com/library/b8020aae-374d-46a9-bcb7-8cc2390b93b6">
      <span data-ttu-id="e3165-111">Metody rozszerzeń (Visual Basic)</span>
      <span class="sxs-lookup">
        <span data-stu-id="e3165-111">Extension Methods (Visual Basic)</span>
      </span>
    </related>
  </Docs>
  <Members>
    <Member MemberName="Aggregate&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource Aggregate&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TSource,TSource&gt; func);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource Aggregate&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`3&lt;!!TSource, !!TSource, !!TSource&gt; func) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Aggregate``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``0,``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Aggregate(Of TSource) (source As IEnumerable(Of TSource), func As Func(Of TSource, TSource, TSource)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource Aggregate(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TSource, TSource&gt; ^ func);" />
      <MemberSignature Language="F#" Value="static member Aggregate : seq&lt;'Source&gt; * Func&lt;'Source, 'Source, 'Source&gt; -&gt; 'Source" Usage="System.Linq.Enumerable.Aggregate (source, func)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="func" Type="System.Func&lt;TSource,TSource,TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-112">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-112">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-113">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Do agregacji over.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-113">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to aggregate over.</span>
          </span>
        </param>
        <param name="func">
          <span data-ttu-id="e3165-114">Funkcję akumulatora po do wywołania dla każdego elementu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-114">An accumulator function to be invoked on each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-115">Stosuje funkcję akumulatora po sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-115">Applies an accumulator function over a sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-116">Wartość akumulatora końcowej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-116">The final accumulator value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-117"><xref:System.Linq.Enumerable.Aggregate%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%29> Metoda pozwala w prosty sposób wykonują obliczenie za pośrednictwem je sekvence hodnot.</span><span class="sxs-lookup"><span data-stu-id="e3165-117">The <xref:System.Linq.Enumerable.Aggregate%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%29> method makes it simple to perform a calculation over a sequence of values.</span></span> <span data-ttu-id="e3165-118">Ta metoda działa przez wywołanie metody `func` jeden raz dla każdego elementu w `source` z wyjątkiem pierwszej.</span><span class="sxs-lookup"><span data-stu-id="e3165-118">This method works by calling `func` one time for each element in `source` except the first one.</span></span> <span data-ttu-id="e3165-119">Każdorazowo `func` jest wywoływana, <xref:System.Linq.Enumerable.Aggregate%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%29> przekazuje zarówno element z sekwencji i zagregowane wartości (jako pierwszy argument `func`).</span><span class="sxs-lookup"><span data-stu-id="e3165-119">Each time `func` is called, <xref:System.Linq.Enumerable.Aggregate%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%29> passes both the element from the sequence and an aggregated value (as the first argument to `func`).</span></span> <span data-ttu-id="e3165-120">Pierwszy element `source` jest używana jako początkowa zagregowanej wartości.</span><span class="sxs-lookup"><span data-stu-id="e3165-120">The first element of `source` is used as the initial aggregate value.</span></span> <span data-ttu-id="e3165-121">Wynik `func` zastępuje poprzednią wartość zagregowaną.</span><span class="sxs-lookup"><span data-stu-id="e3165-121">The result of `func` replaces the previous aggregated value.</span></span> <span data-ttu-id="e3165-122"><xref:System.Linq.Enumerable.Aggregate%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%29> Zwraca wynik końcowy `func`.</span><span class="sxs-lookup"><span data-stu-id="e3165-122"><xref:System.Linq.Enumerable.Aggregate%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%600%2C%60%600%7D%29> returns the final result of `func`.</span></span>  
  
 <span data-ttu-id="e3165-123">To przeciążenie <xref:System.Linq.Enumerable.Aggregate%2A> metoda nie jest odpowiednia dla wszystkich przypadków, ponieważ używa ona pierwszy element `source` jako początkowej zagregowanej wartości.</span><span class="sxs-lookup"><span data-stu-id="e3165-123">This overload of the <xref:System.Linq.Enumerable.Aggregate%2A> method isn't suitable for all cases because it uses the first element of `source` as the initial aggregate value.</span></span> <span data-ttu-id="e3165-124">Należy wybrać innego przeciążenia metody, jeśli wartość zwracaną powinna zawierać tylko elementy `source` spełniające określony warunek.</span><span class="sxs-lookup"><span data-stu-id="e3165-124">You should choose another overload if the return value should include only the elements of `source` that meet a certain condition.</span></span> <span data-ttu-id="e3165-125">Na przykład tego przeciążenia nie jest niezawodne, jeśli chcesz obliczyć sumę liczb parzystych w `source`.</span><span class="sxs-lookup"><span data-stu-id="e3165-125">For example, this overload isn't reliable if you want to calculate the sum of the even numbers in `source`.</span></span> <span data-ttu-id="e3165-126">Wynik będzie nieprawidłowa, jeśli pierwszy element jest nieparzysta zamiast nawet.</span><span class="sxs-lookup"><span data-stu-id="e3165-126">The result will be incorrect if the first element is odd instead of even.</span></span>  
  
 <span data-ttu-id="e3165-127">Aby uprościć typowych operacji agregacji, standardowych operatorów zapytań także metodę liczba ogólnego przeznaczenia <xref:System.Linq.Enumerable.Count%2A>i cztery metody agregacji liczbowe, a mianowicie <xref:System.Linq.Enumerable.Min%2A>, <xref:System.Linq.Enumerable.Max%2A>, <xref:System.Linq.Enumerable.Sum%2A>, i <xref:System.Linq.Enumerable.Average%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-127">To simplify common aggregation operations, the standard query operators also include a general purpose count method, <xref:System.Linq.Enumerable.Count%2A>, and four numeric aggregation methods, namely <xref:System.Linq.Enumerable.Min%2A>, <xref:System.Linq.Enumerable.Max%2A>, <xref:System.Linq.Enumerable.Sum%2A>, and <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-128">Poniższy przykład kodu pokazuje, jak odwrócić kolejność słów w ciągu przy użyciu <xref:System.Linq.Enumerable.Aggregate%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-128">The following code example demonstrates how to reverse the order of words in a string by using <xref:System.Linq.Enumerable.Aggregate%2A>.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#1](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#1)]
 [!code-vb[System.Linq.Enumerable#1](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#1)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-129">
            <paramref name="source" /> lub <paramref name="func" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-129">
              <paramref name="source" /> or <paramref name="func" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e3165-130">
            <paramref name="source" /> nie zawiera żadnych elementów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-130">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Aggregate&lt;TSource,TAccumulate&gt;">
      <MemberSignature Language="C#" Value="public static TAccumulate Aggregate&lt;TSource,TAccumulate&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, TAccumulate seed, Func&lt;TAccumulate,TSource,TAccumulate&gt; func);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TAccumulate Aggregate&lt;TSource, TAccumulate&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, !!TAccumulate seed, class System.Func`3&lt;!!TAccumulate, !!TSource, !!TAccumulate&gt; func) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Aggregate``2(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Aggregate(Of TSource, TAccumulate) (source As IEnumerable(Of TSource), seed As TAccumulate, func As Func(Of TAccumulate, TSource, TAccumulate)) As TAccumulate" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TAccumulate&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TAccumulate Aggregate(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, TAccumulate seed, Func&lt;TAccumulate, TSource, TAccumulate&gt; ^ func);" />
      <MemberSignature Language="F#" Value="static member Aggregate : seq&lt;'Source&gt; * 'Accumulate * Func&lt;'Accumulate, 'Source, 'Accumulate&gt; -&gt; 'Accumulate" Usage="System.Linq.Enumerable.Aggregate (source, seed, func)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TAccumulate</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TAccumulate" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="seed" Type="TAccumulate" />
        <Parameter Name="func" Type="System.Func&lt;TAccumulate,TSource,TAccumulate&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-131">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-131">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <typeparam name="TAccumulate">
          <span data-ttu-id="e3165-132">Typ wartości akumulatora.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-132">The type of the accumulator value.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-133">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Do agregacji over.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-133">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to aggregate over.</span>
          </span>
        </param>
        <param name="seed">
          <span data-ttu-id="e3165-134">Wartość akumulatora początkowe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-134">The initial accumulator value.</span>
          </span>
        </param>
        <param name="func">
          <span data-ttu-id="e3165-135">Funkcję akumulatora po do wywołania dla każdego elementu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-135">An accumulator function to be invoked on each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-136">Stosuje funkcję akumulatora po sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-136">Applies an accumulator function over a sequence.</span>
          </span>
          <span data-ttu-id="e3165-137">Wartość inicjatora określona jest używana jako wartość akumulatora początkowe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-137">The specified seed value is used as the initial accumulator value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-138">Wartość akumulatora końcowej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-138">The final accumulator value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-139"><xref:System.Linq.Enumerable.Aggregate%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%29> Metoda pozwala w prosty sposób wykonują obliczenie za pośrednictwem je sekvence hodnot.</span><span class="sxs-lookup"><span data-stu-id="e3165-139">The <xref:System.Linq.Enumerable.Aggregate%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%29> method makes it simple to perform a calculation over a sequence of values.</span></span> <span data-ttu-id="e3165-140">Ta metoda działa przez wywołanie metody `func` jeden raz dla każdego elementu w `source`.</span><span class="sxs-lookup"><span data-stu-id="e3165-140">This method works by calling `func` one time for each element in `source`.</span></span> <span data-ttu-id="e3165-141">Każdorazowo `func` jest wywoływana, <xref:System.Linq.Enumerable.Aggregate%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%29> przekazuje zarówno element z sekwencji i zagregowane wartości (jako pierwszy argument `func`).</span><span class="sxs-lookup"><span data-stu-id="e3165-141">Each time `func` is called, <xref:System.Linq.Enumerable.Aggregate%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%29> passes both the element from the sequence and an aggregated value (as the first argument to `func`).</span></span> <span data-ttu-id="e3165-142">Wartość `seed` parametr jest używany jako początkowa zagregowanej wartości.</span><span class="sxs-lookup"><span data-stu-id="e3165-142">The value of the `seed` parameter is used as the initial aggregate value.</span></span> <span data-ttu-id="e3165-143">Wynik `func` zastępuje poprzednią wartość zagregowaną.</span><span class="sxs-lookup"><span data-stu-id="e3165-143">The result of `func` replaces the previous aggregated value.</span></span> <span data-ttu-id="e3165-144"><xref:System.Linq.Enumerable.Aggregate%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%29> Zwraca wynik końcowy `func`.</span><span class="sxs-lookup"><span data-stu-id="e3165-144"><xref:System.Linq.Enumerable.Aggregate%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%29> returns the final result of `func`.</span></span>  
  
 <span data-ttu-id="e3165-145">Aby uprościć typowych operacji agregacji, standardowych operatorów zapytań także metodę liczba ogólnego przeznaczenia <xref:System.Linq.Enumerable.Count%2A>i cztery metody agregacji liczbowe, a mianowicie <xref:System.Linq.Enumerable.Min%2A>, <xref:System.Linq.Enumerable.Max%2A>, <xref:System.Linq.Enumerable.Sum%2A>, i <xref:System.Linq.Enumerable.Average%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-145">To simplify common aggregation operations, the standard query operators also include a general purpose count method, <xref:System.Linq.Enumerable.Count%2A>, and four numeric aggregation methods, namely <xref:System.Linq.Enumerable.Min%2A>, <xref:System.Linq.Enumerable.Max%2A>, <xref:System.Linq.Enumerable.Sum%2A>, and <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-146">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Aggregate%2A> Aby zastosować funkcję akumulatora po i za pomocą wartości początkowej.</span><span class="sxs-lookup"><span data-stu-id="e3165-146">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Aggregate%2A> to apply an accumulator function and use a seed value.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#2](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#2)]
 [!code-vb[System.Linq.Enumerable#2](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#2)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-147">
            <paramref name="source" /> lub <paramref name="func" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-147">
              <paramref name="source" /> or <paramref name="func" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Aggregate&lt;TSource,TAccumulate,TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Aggregate&lt;TSource,TAccumulate,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, TAccumulate seed, Func&lt;TAccumulate,TSource,TAccumulate&gt; func, Func&lt;TAccumulate,TResult&gt; resultSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Aggregate&lt;TSource, TAccumulate, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, !!TAccumulate seed, class System.Func`3&lt;!!TAccumulate, !!TSource, !!TAccumulate&gt; func, class System.Func`2&lt;!!TAccumulate, !!TResult&gt; resultSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Aggregate``3(System.Collections.Generic.IEnumerable{``0},``1,System.Func{``1,``0,``1},System.Func{``1,``2})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Aggregate(Of TSource, TAccumulate, TResult) (source As IEnumerable(Of TSource), seed As TAccumulate, func As Func(Of TAccumulate, TSource, TAccumulate), resultSelector As Func(Of TAccumulate, TResult)) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TAccumulate, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TResult Aggregate(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, TAccumulate seed, Func&lt;TAccumulate, TSource, TAccumulate&gt; ^ func, Func&lt;TAccumulate, TResult&gt; ^ resultSelector);" />
      <MemberSignature Language="F#" Value="static member Aggregate : seq&lt;'Source&gt; * 'Accumulate * Func&lt;'Accumulate, 'Source, 'Accumulate&gt; * Func&lt;'Accumulate, 'Result&gt; -&gt; 'Result" Usage="System.Linq.Enumerable.Aggregate (source, seed, func, resultSelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TAccumulate" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="seed" Type="TAccumulate" />
        <Parameter Name="func" Type="System.Func&lt;TAccumulate,TSource,TAccumulate&gt;" />
        <Parameter Name="resultSelector" Type="System.Func&lt;TAccumulate,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-148">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-148">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <typeparam name="TAccumulate">
          <span data-ttu-id="e3165-149">Typ wartości akumulatora.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-149">The type of the accumulator value.</span>
          </span>
        </typeparam>
        <typeparam name="TResult">
          <span data-ttu-id="e3165-150">Typ wartości wynikowej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-150">The type of the resulting value.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-151">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Do agregacji over.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-151">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to aggregate over.</span>
          </span>
        </param>
        <param name="seed">
          <span data-ttu-id="e3165-152">Wartość akumulatora początkowe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-152">The initial accumulator value.</span>
          </span>
        </param>
        <param name="func">
          <span data-ttu-id="e3165-153">Funkcję akumulatora po do wywołania dla każdego elementu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-153">An accumulator function to be invoked on each element.</span>
          </span>
        </param>
        <param name="resultSelector">
          <span data-ttu-id="e3165-154">Funkcja do przekształcania wartości końcowej akumulatora po wartości wyniku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-154">A function to transform the final accumulator value into the result value.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-155">Stosuje funkcję akumulatora po sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-155">Applies an accumulator function over a sequence.</span>
          </span>
          <span data-ttu-id="e3165-156">Wartość inicjatora określona jest używana jako wartość akumulatora początkowe i określona funkcja jest używany do wybierania wartości wyniku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-156">The specified seed value is used as the initial accumulator value, and the specified function is used to select the result value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-157">Wartość po przekształceniu akumulatora końcowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-157">The transformed final accumulator value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-158"><xref:System.Linq.Enumerable.Aggregate%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%29> Metoda pozwala w prosty sposób wykonują obliczenie za pośrednictwem je sekvence hodnot.</span><span class="sxs-lookup"><span data-stu-id="e3165-158">The <xref:System.Linq.Enumerable.Aggregate%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%29> method makes it simple to perform a calculation over a sequence of values.</span></span> <span data-ttu-id="e3165-159">Ta metoda działa przez wywołanie metody `func` jeden raz dla każdego elementu w `source`.</span><span class="sxs-lookup"><span data-stu-id="e3165-159">This method works by calling `func` one time for each element in `source`.</span></span> <span data-ttu-id="e3165-160">Każdorazowo `func` jest wywoływana, <xref:System.Linq.Enumerable.Aggregate%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%29> przekazuje zarówno element z sekwencji i zagregowane wartości (jako pierwszy argument `func`).</span><span class="sxs-lookup"><span data-stu-id="e3165-160">Each time `func` is called, <xref:System.Linq.Enumerable.Aggregate%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%29> passes both the element from the sequence and an aggregated value (as the first argument to `func`).</span></span> <span data-ttu-id="e3165-161">Wartość `seed` parametr jest używany jako początkowa zagregowanej wartości.</span><span class="sxs-lookup"><span data-stu-id="e3165-161">The value of the `seed` parameter is used as the initial aggregate value.</span></span> <span data-ttu-id="e3165-162">Wynik `func` zastępuje poprzednią wartość zagregowaną.</span><span class="sxs-lookup"><span data-stu-id="e3165-162">The result of `func` replaces the previous aggregated value.</span></span> <span data-ttu-id="e3165-163">Wynik końcowy `func` jest przekazywany do `resultSelector` można uzyskać wynik końcowy <xref:System.Linq.Enumerable.Aggregate%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%29>.</span><span class="sxs-lookup"><span data-stu-id="e3165-163">The final result of `func` is passed to `resultSelector` to obtain the final result of <xref:System.Linq.Enumerable.Aggregate%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%601%2CSystem.Func%7B%60%601%2C%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%29>.</span></span>  
  
 <span data-ttu-id="e3165-164">Aby uprościć typowych operacji agregacji, standardowych operatorów zapytań także metodę liczba ogólnego przeznaczenia <xref:System.Linq.Enumerable.Count%2A>i cztery metody agregacji liczbowe, a mianowicie <xref:System.Linq.Enumerable.Min%2A>, <xref:System.Linq.Enumerable.Max%2A>, <xref:System.Linq.Enumerable.Sum%2A>, i <xref:System.Linq.Enumerable.Average%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-164">To simplify common aggregation operations, the standard query operators also include a general purpose count method, <xref:System.Linq.Enumerable.Count%2A>, and four numeric aggregation methods, namely <xref:System.Linq.Enumerable.Min%2A>, <xref:System.Linq.Enumerable.Max%2A>, <xref:System.Linq.Enumerable.Sum%2A>, and <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-165">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Aggregate%2A> stosować funkcję akumulatora po i selektor wynik.</span><span class="sxs-lookup"><span data-stu-id="e3165-165">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Aggregate%2A> to apply an accumulator function and a result selector.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#3](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#3)]
 [!code-vb[System.Linq.Enumerable#3](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-166">
            <paramref name="source" /> lub <paramref name="func" /> lub <paramref name="resultSelector" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-166">
              <paramref name="source" /> or <paramref name="func" /> or <paramref name="resultSelector" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="All&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static bool All&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool All&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.All``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function All(Of TSource) (source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool All(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member All : seq&lt;'Source&gt; * Func&lt;'Source, bool&gt; -&gt; bool" Usage="System.Linq.Enumerable.All (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-167">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-167">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-168">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Zawiera elementy do predykatu do zastosowania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-168">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements to apply the predicate to.</span>
          </span>
        </param>
        <param name="predicate">
          <span data-ttu-id="e3165-169">Funkcja testowania każdego elementu na stanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-169">A function to test each element for a condition.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-170">Określa, czy wszystkie elementy w sekwencji spełniają warunek.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-170">Determines whether all elements of a sequence satisfy a condition.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-171">
            <see langword="true" /> Jeśli wszystkie elementy sekwencji źródłowej przejdzie test w określony predykat lub sekwencji jest pusta. w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-171">
              <see langword="true" /> if every element of the source sequence passes the test in the specified predicate, or if the sequence is empty; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="e3165-172">Ta metoda nie zwraca elementów kolekcji.</span><span class="sxs-lookup"><span data-stu-id="e3165-172">This method does not return all the elements of a collection.</span></span> <span data-ttu-id="e3165-173">Zamiast tego Określa, czy wszystkie elementy kolekcji spełniają warunek.</span><span class="sxs-lookup"><span data-stu-id="e3165-173">Instead, it determines whether all the elements of a collection satisfy a condition.</span></span>  
  
 <span data-ttu-id="e3165-174">Wyliczanie `source` zostanie zatrzymana, tak szybko, jak można ustalić wyniku.</span><span class="sxs-lookup"><span data-stu-id="e3165-174">The enumeration of `source` is stopped as soon as the result can be determined.</span></span>  
  
 <span data-ttu-id="e3165-175">W składni wyrażeń zapytania języka Visual Basic `Aggregate Into All()` klauzuli przekłada się na wywołanie <xref:System.Linq.Enumerable.All%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-175">In Visual Basic query expression syntax, an `Aggregate Into All()` clause translates to an invocation of <xref:System.Linq.Enumerable.All%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-176">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.All%2A> do określenia, czy wszystkie elementy w sekwencji spełniają warunek.</span><span class="sxs-lookup"><span data-stu-id="e3165-176">The following code example demonstrates how to use <xref:System.Linq.Enumerable.All%2A> to determine whether all the elements in a sequence satisfy a condition.</span></span> <span data-ttu-id="e3165-177">Zmienna `allStartWithB` ma wartość true, jeśli wszystkie nazwy pet rozpoczynać się od "B" lub `pets` tablica jest pusta.</span><span class="sxs-lookup"><span data-stu-id="e3165-177">Variable `allStartWithB` is true if all the pet names start with "B" or if the `pets` array is empty.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#4](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#4)]
 [!code-vb[System.Linq.Enumerable#4](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#4)]  
  
 <span data-ttu-id="e3165-178">Wartość logiczna, która <xref:System.Linq.Enumerable.All%2A> metoda zwróci wartość jest zazwyczaj używany w predykacie `where` — klauzula (`Where` klauzuli w języku Visual Basic) lub bezpośrednie wywołanie <xref:System.Linq.Enumerable.Where%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="e3165-178">The Boolean value that the <xref:System.Linq.Enumerable.All%2A> method returns is typically used in the predicate of a `where` clause (`Where` clause in Visual Basic) or a direct call to the <xref:System.Linq.Enumerable.Where%2A> method.</span></span> <span data-ttu-id="e3165-179">W poniższym przykładzie pokazano użycie tego `All` metody.</span><span class="sxs-lookup"><span data-stu-id="e3165-179">The following example demonstrates this use of the `All` method.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#129](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#129)]
 [!code-vb[System.Linq.Enumerable#129](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#129)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-180">
            <paramref name="source" /> lub <paramref name="predicate" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-180">
              <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="e3165-181">Aggregate — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-181">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Any&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e3165-182">Określa, czy jakiegokolwiek elementu w sekwencji istnieje, czy spełnia warunek.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-182">Determines whether any element of a sequence exists or satisfies a condition.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Any&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static bool Any&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Any&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Any(Of TSource) (source As IEnumerable(Of TSource)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool Any(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Any : seq&lt;'Source&gt; -&gt; bool" Usage="System.Linq.Enumerable.Any source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-183">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-183">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-184">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Pod kątem emptiness.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-184">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to check for emptiness.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-185">Określa, czy sekwencja zawiera żadnych elementów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-185">Determines whether a sequence contains any elements.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-186">
            <see langword="true" /> Jeśli sekwencja źródłowa zawiera wszystkie elementy; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-186">
              <see langword="true" /> if the source sequence contains any elements; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="e3165-187">Ta metoda nie zwraca dowolny jeden element w kolekcji.</span><span class="sxs-lookup"><span data-stu-id="e3165-187">This method does not return any one element of a collection.</span></span> <span data-ttu-id="e3165-188">Zamiast tego Określa, czy kolekcja zawiera żadnych elementów.</span><span class="sxs-lookup"><span data-stu-id="e3165-188">Instead, it determines whether the collection contains any elements.</span></span>  
  
 <span data-ttu-id="e3165-189">Wyliczanie `source` zostanie zatrzymana, tak szybko, jak można ustalić wyniku.</span><span class="sxs-lookup"><span data-stu-id="e3165-189">The enumeration of `source` is stopped as soon as the result can be determined.</span></span>  
  
 <span data-ttu-id="e3165-190">W składni wyrażeń zapytania języka Visual Basic `Aggregate Into Any()` klauzuli przekłada się na wywołanie <xref:System.Linq.Enumerable.Any%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-190">In Visual Basic query expression syntax, an `Aggregate Into Any()` clause translates to an invocation of <xref:System.Linq.Enumerable.Any%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-191">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Any%2A> do określenia, czy sekwencja zawiera żadnych elementów.</span><span class="sxs-lookup"><span data-stu-id="e3165-191">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Any%2A> to determine whether a sequence contains any elements.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#5](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#5)]
 [!code-vb[System.Linq.Enumerable#5](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#5)]  
  
 <span data-ttu-id="e3165-192">Wartość logiczna, która <xref:System.Linq.Enumerable.Any%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> metoda zwróci wartość jest zazwyczaj używany w predykacie `where` — klauzula (`Where` klauzuli w języku Visual Basic) lub bezpośrednie wywołanie <xref:System.Linq.Enumerable.Where%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> metody.</span><span class="sxs-lookup"><span data-stu-id="e3165-192">The Boolean value that the <xref:System.Linq.Enumerable.Any%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> method returns is typically used in the predicate of a `where` clause (`Where` clause in Visual Basic) or a direct call to the <xref:System.Linq.Enumerable.Where%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> method.</span></span> <span data-ttu-id="e3165-193">W poniższym przykładzie pokazano użycie tego `Any` metody.</span><span class="sxs-lookup"><span data-stu-id="e3165-193">The following example demonstrates this use of the `Any` method.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#130](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#130)]
 [!code-vb[System.Linq.Enumerable#130](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#130)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-194">
            <paramref name="source" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-194">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="e3165-195">Aggregate — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-195">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Any&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static bool Any&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Any&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Any``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Any(Of TSource) (source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool Any(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member Any : seq&lt;'Source&gt; * Func&lt;'Source, bool&gt; -&gt; bool" Usage="System.Linq.Enumerable.Any (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-196">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-196">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-197">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Do stosowania predykatu, do której elementy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-197">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to apply the predicate to.</span>
          </span>
        </param>
        <param name="predicate">
          <span data-ttu-id="e3165-198">Funkcja testowania każdego elementu na stanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-198">A function to test each element for a condition.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-199">Określa, czy jakiegokolwiek elementu w sekwencji spełniają warunek.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-199">Determines whether any element of a sequence satisfies a condition.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-200">
            <see langword="true" /> Jeśli dowolne elementy w sekwencji źródłowej Przekaż test określony predykat; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-200">
              <see langword="true" /> if any elements in the source sequence pass the test in the specified predicate; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="e3165-201">Ta metoda nie zwraca dowolny jeden element w kolekcji.</span><span class="sxs-lookup"><span data-stu-id="e3165-201">This method does not return any one element of a collection.</span></span> <span data-ttu-id="e3165-202">Zamiast tego Określa, czy wszystkie elementy kolekcji spełniają warunek.</span><span class="sxs-lookup"><span data-stu-id="e3165-202">Instead, it determines whether any elements of a collection satisfy a condition.</span></span>  
  
 <span data-ttu-id="e3165-203">Wyliczanie `source` zostanie zatrzymana, tak szybko, jak można ustalić wyniku.</span><span class="sxs-lookup"><span data-stu-id="e3165-203">The enumeration of `source` is stopped as soon as the result can be determined.</span></span>  
  
 <span data-ttu-id="e3165-204">W składni wyrażeń zapytania języka Visual Basic `Aggregate Into Any()` klauzuli przekłada się na wywołanie <xref:System.Linq.Enumerable.Any%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-204">In Visual Basic query expression syntax, an `Aggregate Into Any()` clause translates to an invocation of <xref:System.Linq.Enumerable.Any%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-205">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Any%2A> do określenia, czy dowolnego elementu w sekwencji spełniają warunek.</span><span class="sxs-lookup"><span data-stu-id="e3165-205">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Any%2A> to determine whether any element in a sequence satisfies a condition.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#6](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#6)]
 [!code-vb[System.Linq.Enumerable#6](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-206">
            <paramref name="source" /> lub <paramref name="predicate" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-206">
              <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="e3165-207">Aggregate — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-207">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Append&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Append&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, TSource element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Append&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, !!TSource element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Append``1(System.Collections.Generic.IEnumerable{``0},``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Append(Of TSource) (source As IEnumerable(Of TSource), element As TSource) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ Append(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, TSource element);" />
      <MemberSignature Language="F#" Value="static member Append : seq&lt;'Source&gt; * 'Source -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.Append (source, element)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netstandard-2.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="element" Type="TSource" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-208">Typ elementów <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-208">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-209">Sekwencja wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-209">A sequence of values.</span>
          </span>
        </param>
        <param name="element">
          <span data-ttu-id="e3165-210">Wartość do dołączenia do <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-210">The value to append to <paramref name="source" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-211">Dołącza wartość do końca sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-211">Appends a value to the end of the sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-212">Nową sekwencję, która kończy się <paramref name="element" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-212">A new sequence that ends with <paramref name="element" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="e3165-213">Ta metoda nie powoduje modyfikacji elementów kolekcji.</span><span class="sxs-lookup"><span data-stu-id="e3165-213">This method does not modify the elements of the collection.</span></span> <span data-ttu-id="e3165-214">Zamiast tego tworzy kopię kolekcji za pomocą nowego elementu.</span><span class="sxs-lookup"><span data-stu-id="e3165-214">Instead, it creates a copy of the collection with the new element.</span></span>
  
## Examples  
 <span data-ttu-id="e3165-215">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Append%2A> można dołączyć wartość do końca sekwencji.</span><span class="sxs-lookup"><span data-stu-id="e3165-215">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Append%2A> to append a value to the end of the sequence.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#201](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#201)]
 [!code-vb[System.Linq.Enumerable#201](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#201)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-216">
            <paramref name="source" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-216">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="AsEnumerable&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; AsEnumerable&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; AsEnumerable&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.AsEnumerable``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function AsEnumerable(Of TSource) (source As IEnumerable(Of TSource)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ AsEnumerable(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member AsEnumerable : seq&lt;'Source&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.AsEnumerable source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-217">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-217">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-218">Sekwencja na typ jako <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-218">The sequence to type as <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-219">Zwraca dane wejściowe wpisanych w formie <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-219">Returns the input typed as <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-220">Sekwencji wejściowych wpisanych w formie <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-220">The input sequence typed as <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-221"><xref:System.Linq.Enumerable.AsEnumerable%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> Metoda nie ma wpływu innych niż zmiany typu kompilacji `source` z typu, który implementuje <xref:System.Collections.Generic.IEnumerable%601> do <xref:System.Collections.Generic.IEnumerable%601> sam.</span><span class="sxs-lookup"><span data-stu-id="e3165-221">The <xref:System.Linq.Enumerable.AsEnumerable%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> method has no effect other than to change the compile-time type of `source` from a type that implements <xref:System.Collections.Generic.IEnumerable%601> to <xref:System.Collections.Generic.IEnumerable%601> itself.</span></span>  
  
 <span data-ttu-id="e3165-222"><xref:System.Linq.Enumerable.AsEnumerable%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> można wybrać między implementacjami zapytania, gdy sekwencja implementuje <xref:System.Collections.Generic.IEnumerable%601> , ale również ma inny zestaw dostępnych metod publicznych zapytania.</span><span class="sxs-lookup"><span data-stu-id="e3165-222"><xref:System.Linq.Enumerable.AsEnumerable%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> can be used to choose between query implementations when a sequence implements <xref:System.Collections.Generic.IEnumerable%601> but also has a different set of public query methods available.</span></span> <span data-ttu-id="e3165-223">Na przykład, biorąc klasy ogólnej `Table` implementującej <xref:System.Collections.Generic.IEnumerable%601> i ma swoje własne metody, na przykład `Where`, `Select`, i `SelectMany`, wywołanie `Where` powodowałoby wywołanie pliku wykonywalnego publicznie `Where` metoda `Table`.</span><span class="sxs-lookup"><span data-stu-id="e3165-223">For example, given a generic class `Table` that implements <xref:System.Collections.Generic.IEnumerable%601> and has its own methods such as `Where`, `Select`, and `SelectMany`, a call to `Where` would invoke the public `Where` method of `Table`.</span></span> <span data-ttu-id="e3165-224">A `Table` typ, który reprezentuje tabelę bazy danych może mieć `Where` metodę, która przyjmuje argument predykatu, jako drzewo wyrażenia i konwertuje drzewa do bazy danych SQL w zakresie wykonywania zdalnego.</span><span class="sxs-lookup"><span data-stu-id="e3165-224">A `Table` type that represents a database table could have a `Where` method that takes the predicate argument as an expression tree and converts the tree to SQL for remote execution.</span></span> <span data-ttu-id="e3165-225">Jeśli zdalne wykonywanie kodu jest niepożądany, na przykład ponieważ predykat wywołuje metodę lokalnego <xref:System.Linq.Enumerable.AsEnumerable%2A> metoda może służyć do ukrywania niestandardowych metod i zamiast tego Udostępnij standardowych operatorów zapytań.</span><span class="sxs-lookup"><span data-stu-id="e3165-225">If remote execution is not desired, for example because the predicate invokes a local method, the <xref:System.Linq.Enumerable.AsEnumerable%2A> method can be used to hide the custom methods and instead make the standard query operators available.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-226">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.AsEnumerable%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> ukryć typu użytkownika niestandardowego `Where` metody, gdy wymagane jest wykonanie operator standardowego zapytania.</span><span class="sxs-lookup"><span data-stu-id="e3165-226">The following code example demonstrates how to use <xref:System.Linq.Enumerable.AsEnumerable%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to hide a type's custom `Where` method when the standard query operator implementation is desired.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#108](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#108)]
 [!code-vb[System.Linq.Enumerable#108](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#108)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Average">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e3165-227">Oblicza średnią sekwencję wartości liczbowych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-227">Computes the average of a sequence of numeric values.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Average">
      <MemberSignature Language="C#" Value="public static decimal Average (this System.Collections.Generic.IEnumerable&lt;decimal&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Average(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Decimal&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Decimal})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average (source As IEnumerable(Of Decimal)) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Decimal Average(System::Collections::Generic::IEnumerable&lt;System::Decimal&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;decimal&gt; -&gt; decimal" Usage="System.Linq.Enumerable.Average source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Decimal&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="e3165-228">Sekwencja <see cref="T:System.Decimal" /> wartości do obliczenia średniej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-228">A sequence of <see cref="T:System.Decimal" /> values to calculate the average of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-229">Oblicza średnią sekwencji <see cref="T:System.Decimal" /> wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-229">Computes the average of a sequence of <see cref="T:System.Decimal" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-230">Średnia sekwencji wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-230">The average of the sequence of values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-231">W składni wyrażeń zapytania języka Visual Basic `Aggregate Into Average()` klauzuli przekłada się na wywołanie <xref:System.Linq.Enumerable.Average%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-231">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-232">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29> do obliczenia średniej je sekvence hodnot.</span><span class="sxs-lookup"><span data-stu-id="e3165-232">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29> to calculate the average of a sequence of values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#8)]
 [!code-vb[System.Linq.Enumerable#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-233">
            <paramref name="source" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-233">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e3165-234">
            <paramref name="source" /> nie zawiera żadnych elementów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-234">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="e3165-235">Aggregate — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-235">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Average">
      <MemberSignature Language="C#" Value="public static double Average (this System.Collections.Generic.IEnumerable&lt;double&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Average(class System.Collections.Generic.IEnumerable`1&lt;float64&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Double})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average (source As IEnumerable(Of Double)) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static double Average(System::Collections::Generic::IEnumerable&lt;double&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;double&gt; -&gt; double" Usage="System.Linq.Enumerable.Average source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Double&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="e3165-236">Sekwencja <see cref="T:System.Double" /> wartości do obliczenia średniej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-236">A sequence of <see cref="T:System.Double" /> values to calculate the average of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-237">Oblicza średnią sekwencji <see cref="T:System.Double" /> wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-237">Computes the average of a sequence of <see cref="T:System.Double" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-238">Średnia sekwencji wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-238">The average of the sequence of values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-239">Jeśli suma liczby elementów jest zbyt duży, aby przedstawić jako <xref:System.Double>, ta metoda zwraca wartość dodatnia lub ujemna nieskończoność.</span><span class="sxs-lookup"><span data-stu-id="e3165-239">If the sum of the elements is too large to represent as a <xref:System.Double>, this method returns positive or negative infinity.</span></span>  
  
 <span data-ttu-id="e3165-240">W składni wyrażeń zapytania języka Visual Basic `Aggregate Into Average()` klauzuli przekłada się na wywołanie <xref:System.Linq.Enumerable.Average%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-240">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-241">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29> do obliczenia średniej.</span><span class="sxs-lookup"><span data-stu-id="e3165-241">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29> to calculate an average.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#8)]
 [!code-vb[System.Linq.Enumerable#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-242">
            <paramref name="source" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-242">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e3165-243">
            <paramref name="source" /> nie zawiera żadnych elementów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-243">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="e3165-244">Aggregate — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-244">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Average">
      <MemberSignature Language="C#" Value="public static double Average (this System.Collections.Generic.IEnumerable&lt;int&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Average(class System.Collections.Generic.IEnumerable`1&lt;int32&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average (source As IEnumerable(Of Integer)) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static double Average(System::Collections::Generic::IEnumerable&lt;int&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;int&gt; -&gt; double" Usage="System.Linq.Enumerable.Average source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Int32&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="e3165-245">Sekwencja <see cref="T:System.Int32" /> wartości do obliczenia średniej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-245">A sequence of <see cref="T:System.Int32" /> values to calculate the average of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-246">Oblicza średnią sekwencji <see cref="T:System.Int32" /> wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-246">Computes the average of a sequence of <see cref="T:System.Int32" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-247">Średnia sekwencji wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-247">The average of the sequence of values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-248">W składni wyrażeń zapytania języka Visual Basic `Aggregate Into Average()` klauzuli przekłada się na wywołanie <xref:System.Linq.Enumerable.Average%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-248">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-249">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29> do obliczenia średniej.</span><span class="sxs-lookup"><span data-stu-id="e3165-249">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29> to calculate an average.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#8)]
 [!code-vb[System.Linq.Enumerable#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-250">
            <paramref name="source" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-250">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e3165-251">
            <paramref name="source" /> nie zawiera żadnych elementów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-251">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="e3165-252">Aggregate — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-252">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Average">
      <MemberSignature Language="C#" Value="public static double Average (this System.Collections.Generic.IEnumerable&lt;long&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Average(class System.Collections.Generic.IEnumerable`1&lt;int64&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Int64})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average (source As IEnumerable(Of Long)) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static double Average(System::Collections::Generic::IEnumerable&lt;long&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;int64&gt; -&gt; double" Usage="System.Linq.Enumerable.Average source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Int64&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="e3165-253">Sekwencja <see cref="T:System.Int64" /> wartości do obliczenia średniej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-253">A sequence of <see cref="T:System.Int64" /> values to calculate the average of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-254">Oblicza średnią sekwencji <see cref="T:System.Int64" /> wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-254">Computes the average of a sequence of <see cref="T:System.Int64" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-255">Średnia sekwencji wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-255">The average of the sequence of values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-256">W składni wyrażeń zapytania języka Visual Basic `Aggregate Into Average()` klauzuli przekłada się na wywołanie <xref:System.Linq.Enumerable.Average%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-256">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-257">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29> do obliczenia średniej.</span><span class="sxs-lookup"><span data-stu-id="e3165-257">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29> to calculate an average.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#8)]
 [!code-vb[System.Linq.Enumerable#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-258">
            <paramref name="source" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-258">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e3165-259">
            <paramref name="source" /> nie zawiera żadnych elementów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-259">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="e3165-260">Aggregate — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-260">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Average">
      <MemberSignature Language="C#" Value="public static Nullable&lt;decimal&gt; Average (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;decimal&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype System.Decimal&gt; Average(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average (source As IEnumerable(Of Nullable(Of Decimal))) As Nullable(Of Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;System::Decimal&gt; Average(System::Collections::Generic::IEnumerable&lt;Nullable&lt;System::Decimal&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;Nullable&lt;decimal&gt;&gt; -&gt; Nullable&lt;decimal&gt;" Usage="System.Linq.Enumerable.Average source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Decimal&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="e3165-261">Sekwencja nullable <see cref="T:System.Decimal" /> wartości do obliczenia średniej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-261">A sequence of nullable <see cref="T:System.Decimal" /> values to calculate the average of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-262">Oblicza średnią sekwencji dopuszczającego wartość null <see cref="T:System.Decimal" /> wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-262">Computes the average of a sequence of nullable <see cref="T:System.Decimal" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-263">Średnia sekwencja wartości lub <see langword="null" /> Jeśli sekwencja źródłowa jest pusta lub zawiera tylko wartości, które są <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-263">The average of the sequence of values, or <see langword="null" /> if the source sequence is empty or contains only values that are <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-264">W składni wyrażeń zapytania języka Visual Basic `Aggregate Into Average()` klauzuli przekłada się na wywołanie <xref:System.Linq.Enumerable.Average%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-264">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-265">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> do obliczenia średniej.</span><span class="sxs-lookup"><span data-stu-id="e3165-265">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> to calculate an average.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#12)]
 [!code-vb[System.Linq.Enumerable#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-266">
            <paramref name="source" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-266">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="e3165-267">Suma elementów w sekwencji jest większa niż <see cref="F:System.Decimal.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-267">The sum of the elements in the sequence is larger than <see cref="F:System.Decimal.MaxValue" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="e3165-268">Aggregate — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-268">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Average">
      <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Average (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;double&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Average(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;float64&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average (source As IEnumerable(Of Nullable(Of Double))) As Nullable(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;double&gt; Average(System::Collections::Generic::IEnumerable&lt;Nullable&lt;double&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;Nullable&lt;double&gt;&gt; -&gt; Nullable&lt;double&gt;" Usage="System.Linq.Enumerable.Average source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Double&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="e3165-269">Sekwencja nullable <see cref="T:System.Double" /> wartości do obliczenia średniej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-269">A sequence of nullable <see cref="T:System.Double" /> values to calculate the average of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-270">Oblicza średnią sekwencji dopuszczającego wartość null <see cref="T:System.Double" /> wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-270">Computes the average of a sequence of nullable <see cref="T:System.Double" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-271">Średnia sekwencja wartości lub <see langword="null" /> Jeśli sekwencja źródłowa jest pusta lub zawiera tylko wartości, które są <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-271">The average of the sequence of values, or <see langword="null" /> if the source sequence is empty or contains only values that are <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-272">Jeśli suma liczby elementów jest zbyt duży, aby przedstawić jako <xref:System.Double>, ta metoda zwraca wartość dodatnia lub ujemna nieskończoność.</span><span class="sxs-lookup"><span data-stu-id="e3165-272">If the sum of the elements is too large to represent as a <xref:System.Double>, this method returns positive or negative infinity.</span></span>  
  
 <span data-ttu-id="e3165-273">W składni wyrażeń zapytania języka Visual Basic `Aggregate Into Average()` klauzuli przekłada się na wywołanie <xref:System.Linq.Enumerable.Average%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-273">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-274">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> do obliczenia średniej.</span><span class="sxs-lookup"><span data-stu-id="e3165-274">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> to calculate an average.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#12)]
 [!code-vb[System.Linq.Enumerable#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-275">
            <paramref name="source" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-275">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="e3165-276">Aggregate — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-276">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Average">
      <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Average (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;int&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Average(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;int32&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average (source As IEnumerable(Of Nullable(Of Integer))) As Nullable(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;double&gt; Average(System::Collections::Generic::IEnumerable&lt;Nullable&lt;int&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;Nullable&lt;int&gt;&gt; -&gt; Nullable&lt;double&gt;" Usage="System.Linq.Enumerable.Average source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Int32&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="e3165-277">Sekwencja nullable <see cref="T:System.Int32" /> wartości do obliczenia średniej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-277">A sequence of nullable <see cref="T:System.Int32" /> values to calculate the average of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-278">Oblicza średnią sekwencji dopuszczającego wartość null <see cref="T:System.Int32" /> wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-278">Computes the average of a sequence of nullable <see cref="T:System.Int32" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-279">Średnia sekwencja wartości lub <see langword="null" /> Jeśli sekwencja źródłowa jest pusta lub zawiera tylko wartości, które są <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-279">The average of the sequence of values, or <see langword="null" /> if the source sequence is empty or contains only values that are <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-280">W składni wyrażeń zapytania języka Visual Basic `Aggregate Into Average()` klauzuli przekłada się na wywołanie <xref:System.Linq.Enumerable.Average%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-280">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-281">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> do obliczenia średniej.</span><span class="sxs-lookup"><span data-stu-id="e3165-281">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> to calculate an average.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#12)]
 [!code-vb[System.Linq.Enumerable#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-282">
            <paramref name="source" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-282">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="e3165-283">Suma elementów w sekwencji jest większa niż <see cref="F:System.Int64.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-283">The sum of the elements in the sequence is larger than <see cref="F:System.Int64.MaxValue" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="e3165-284">Aggregate — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-284">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Average">
      <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Average (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;long&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Average(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;int64&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average (source As IEnumerable(Of Nullable(Of Long))) As Nullable(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;double&gt; Average(System::Collections::Generic::IEnumerable&lt;Nullable&lt;long&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;Nullable&lt;int64&gt;&gt; -&gt; Nullable&lt;double&gt;" Usage="System.Linq.Enumerable.Average source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Int64&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="e3165-285">Sekwencja nullable <see cref="T:System.Int64" /> wartości do obliczenia średniej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-285">A sequence of nullable <see cref="T:System.Int64" /> values to calculate the average of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-286">Oblicza średnią sekwencji dopuszczającego wartość null <see cref="T:System.Int64" /> wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-286">Computes the average of a sequence of nullable <see cref="T:System.Int64" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-287">Średnia sekwencja wartości lub <see langword="null" /> Jeśli sekwencja źródłowa jest pusta lub zawiera tylko wartości, które są <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-287">The average of the sequence of values, or <see langword="null" /> if the source sequence is empty or contains only values that are <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-288">W składni wyrażeń zapytania języka Visual Basic `Aggregate Into Average()` klauzuli przekłada się na wywołanie <xref:System.Linq.Enumerable.Average%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-288">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-289">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> do obliczenia średniej.</span><span class="sxs-lookup"><span data-stu-id="e3165-289">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> to calculate an average.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#12)]
 [!code-vb[System.Linq.Enumerable#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-290">
            <paramref name="source" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-290">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="e3165-291">Suma elementów w sekwencji jest większa niż <see cref="F:System.Int64.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-291">The sum of the elements in the sequence is larger than <see cref="F:System.Int64.MaxValue" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="e3165-292">Aggregate — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-292">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Average">
      <MemberSignature Language="C#" Value="public static Nullable&lt;float&gt; Average (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;float&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float32&gt; Average(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;float32&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average (source As IEnumerable(Of Nullable(Of Single))) As Nullable(Of Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;float&gt; Average(System::Collections::Generic::IEnumerable&lt;Nullable&lt;float&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;Nullable&lt;single&gt;&gt; -&gt; Nullable&lt;single&gt;" Usage="System.Linq.Enumerable.Average source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Single&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="e3165-293">Sekwencja nullable <see cref="T:System.Single" /> wartości do obliczenia średniej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-293">A sequence of nullable <see cref="T:System.Single" /> values to calculate the average of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-294">Oblicza średnią sekwencji dopuszczającego wartość null <see cref="T:System.Single" /> wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-294">Computes the average of a sequence of nullable <see cref="T:System.Single" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-295">Średnia sekwencja wartości lub <see langword="null" /> Jeśli sekwencja źródłowa jest pusta lub zawiera tylko wartości, które są <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-295">The average of the sequence of values, or <see langword="null" /> if the source sequence is empty or contains only values that are <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-296">W składni wyrażeń zapytania języka Visual Basic `Aggregate Into Average()` klauzuli przekłada się na wywołanie <xref:System.Linq.Enumerable.Average%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-296">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-297">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> do obliczenia średniej.</span><span class="sxs-lookup"><span data-stu-id="e3165-297">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> to calculate an average.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#12](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#12)]
 [!code-vb[System.Linq.Enumerable#12](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#12)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-298">
            <paramref name="source" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-298">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="e3165-299">Aggregate — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-299">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Average">
      <MemberSignature Language="C#" Value="public static float Average (this System.Collections.Generic.IEnumerable&lt;float&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Average(class System.Collections.Generic.IEnumerable`1&lt;float32&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average(System.Collections.Generic.IEnumerable{System.Single})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average (source As IEnumerable(Of Single)) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static float Average(System::Collections::Generic::IEnumerable&lt;float&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;single&gt; -&gt; single" Usage="System.Linq.Enumerable.Average source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Single&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="e3165-300">Sekwencja <see cref="T:System.Single" /> wartości do obliczenia średniej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-300">A sequence of <see cref="T:System.Single" /> values to calculate the average of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-301">Oblicza średnią sekwencji <see cref="T:System.Single" /> wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-301">Computes the average of a sequence of <see cref="T:System.Single" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-302">Średnia sekwencji wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-302">The average of the sequence of values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-303">W składni wyrażeń zapytania języka Visual Basic `Aggregate Into Average()` klauzuli przekłada się na wywołanie <xref:System.Linq.Enumerable.Average%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-303">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-304">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29> do obliczenia średniej.</span><span class="sxs-lookup"><span data-stu-id="e3165-304">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29> to calculate an average.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#8](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#8)]
 [!code-vb[System.Linq.Enumerable#8](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-305">
            <paramref name="source" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-305">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e3165-306">
            <paramref name="source" /> nie zawiera żadnych elementów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-306">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="e3165-307">Aggregate — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-307">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Average&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static decimal Average&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,decimal&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Average&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Decimal&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Decimal)) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Decimal Average(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, System::Decimal&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;'Source&gt; * Func&lt;'Source, decimal&gt; -&gt; decimal" Usage="System.Linq.Enumerable.Average (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Decimal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-308">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-308">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-309">Sekwencja wartości, które są używane do obliczania średniej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-309">A sequence of values that are used to calculate an average.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="e3165-310">Funkcja transformacji do zastosowania do każdego elementu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-310">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-311">Oblicza średnią sekwencji <see cref="T:System.Decimal" /> wartości, które są uzyskiwane za pomocą funkcji przekształcenia na każdym elemencie sekwencji wejściowych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-311">Computes the average of a sequence of <see cref="T:System.Decimal" /> values that are obtained by invoking a transform function on each element of the input sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-312">Średnia sekwencji wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-312">The average of the sequence of values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-313">W składni wyrażeń zapytania języka Visual Basic `Aggregate Into Average()` klauzuli przekłada się na wywołanie <xref:System.Linq.Enumerable.Average%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-313">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-314">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29> do obliczenia średniej.</span><span class="sxs-lookup"><span data-stu-id="e3165-314">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29> to calculate an average.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#16)]
 [!code-vb[System.Linq.Enumerable#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-315">
            <paramref name="source" /> lub <paramref name="selector" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-315">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e3165-316">
            <paramref name="source" /> nie zawiera żadnych elementów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-316">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="e3165-317">Suma elementów w sekwencji jest większa niż <see cref="F:System.Decimal.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-317">The sum of the elements in the sequence is larger than <see cref="F:System.Decimal.MaxValue" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="e3165-318">Aggregate — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-318">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Average&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static double Average&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,double&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Average&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, float64&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Double)) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static double Average(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, double&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;'Source&gt; * Func&lt;'Source, double&gt; -&gt; double" Usage="System.Linq.Enumerable.Average (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Double&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-319">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-319">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-320">Sekwencja wartości do obliczenia średniej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-320">A sequence of values to calculate the average of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="e3165-321">Funkcja transformacji do zastosowania do każdego elementu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-321">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-322">Oblicza średnią sekwencji <see cref="T:System.Double" /> wartości, które są uzyskiwane za pomocą funkcji przekształcenia na każdym elemencie sekwencji wejściowych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-322">Computes the average of a sequence of <see cref="T:System.Double" /> values that are obtained by invoking a transform function on each element of the input sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-323">Średnia sekwencji wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-323">The average of the sequence of values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-324">W składni wyrażeń zapytania języka Visual Basic `Aggregate Into Average()` klauzuli przekłada się na wywołanie <xref:System.Linq.Enumerable.Average%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-324">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-325">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29> do obliczenia średniej.</span><span class="sxs-lookup"><span data-stu-id="e3165-325">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29> to calculate an average.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#16)]
 [!code-vb[System.Linq.Enumerable#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-326">
            <paramref name="source" /> lub <paramref name="selector" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-326">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e3165-327">
            <paramref name="source" /> nie zawiera żadnych elementów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-327">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="e3165-328">Aggregate — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-328">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Average&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static double Average&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,int&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Average&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, int32&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Integer)) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static double Average(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, int&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;'Source&gt; * Func&lt;'Source, int&gt; -&gt; double" Usage="System.Linq.Enumerable.Average (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Int32&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-329">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-329">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-330">Sekwencja wartości do obliczenia średniej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-330">A sequence of values to calculate the average of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="e3165-331">Funkcja transformacji do zastosowania do każdego elementu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-331">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-332">Oblicza średnią sekwencji <see cref="T:System.Int32" /> wartości, które są uzyskiwane za pomocą funkcji przekształcenia na każdym elemencie sekwencji wejściowych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-332">Computes the average of a sequence of <see cref="T:System.Int32" /> values that are obtained by invoking a transform function on each element of the input sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-333">Średnia sekwencji wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-333">The average of the sequence of values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-334">W składni wyrażeń zapytania języka Visual Basic `Aggregate Into Average()` klauzuli przekłada się na wywołanie <xref:System.Linq.Enumerable.Average%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-334">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-335">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> do obliczenia średniej.</span><span class="sxs-lookup"><span data-stu-id="e3165-335">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to calculate an average.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#18)]
 [!code-vb[System.Linq.Enumerable#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-336">
            <paramref name="source" /> lub <paramref name="selector" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-336">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e3165-337">
            <paramref name="source" /> nie zawiera żadnych elementów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-337">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="e3165-338">Suma elementów w sekwencji jest większa niż <see cref="F:System.Int64.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-338">The sum of the elements in the sequence is larger than <see cref="F:System.Int64.MaxValue" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="e3165-339">Aggregate — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-339">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Average&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static double Average&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,long&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Average&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, int64&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Long)) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static double Average(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, long&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;'Source&gt; * Func&lt;'Source, int64&gt; -&gt; double" Usage="System.Linq.Enumerable.Average (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Int64&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-340">Typ elementów źródła.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-340">The type of the elements of source.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-341">Sekwencja wartości do obliczenia średniej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-341">A sequence of values to calculate the average of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="e3165-342">Funkcja transformacji do zastosowania do każdego elementu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-342">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-343">Oblicza średnią sekwencji <see cref="T:System.Int64" /> wartości, które są uzyskiwane za pomocą funkcji przekształcenia na każdym elemencie sekwencji wejściowych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-343">Computes the average of a sequence of <see cref="T:System.Int64" /> values that are obtained by invoking a transform function on each element of the input sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-344">Średnia sekwencji wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-344">The average of the sequence of values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-345">W składni wyrażeń zapytania języka Visual Basic `Aggregate Into Average()` klauzuli przekłada się na wywołanie <xref:System.Linq.Enumerable.Average%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-345">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-346">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29> do obliczenia średniej.</span><span class="sxs-lookup"><span data-stu-id="e3165-346">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29> to calculate an average.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#16)]
 [!code-vb[System.Linq.Enumerable#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-347">
            <paramref name="source" /> lub <paramref name="selector" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-347">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e3165-348">
            <paramref name="source" /> nie zawiera żadnych elementów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-348">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="e3165-349">Suma elementów w sekwencji jest większa niż <see cref="F:System.Int64.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-349">The sum of the elements in the sequence is larger than <see cref="F:System.Int64.MaxValue" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="e3165-350">Aggregate — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-350">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Average&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;decimal&gt; Average&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;decimal&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype System.Decimal&gt; Average&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Decimal))) As Nullable(Of Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;System::Decimal&gt; Average(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;System::Decimal&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;decimal&gt;&gt; -&gt; Nullable&lt;decimal&gt;" Usage="System.Linq.Enumerable.Average (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Decimal&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-351">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-351">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-352">Sekwencja wartości do obliczenia średniej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-352">A sequence of values to calculate the average of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="e3165-353">Funkcja transformacji do zastosowania do każdego elementu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-353">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-354">Oblicza średnią sekwencji dopuszczającego wartość null <see cref="T:System.Decimal" /> wartości, które są uzyskiwane za pomocą funkcji przekształcenia na każdym elemencie sekwencji wejściowych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-354">Computes the average of a sequence of nullable <see cref="T:System.Decimal" /> values that are obtained by invoking a transform function on each element of the input sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-355">Średnia sekwencja wartości lub <see langword="null" /> Jeśli sekwencja źródłowa jest pusta lub zawiera tylko wartości, które są <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-355">The average of the sequence of values, or <see langword="null" /> if the source sequence is empty or contains only values that are <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-356">W składni wyrażeń zapytania języka Visual Basic `Aggregate Into Average()` klauzuli przekłada się na wywołanie <xref:System.Linq.Enumerable.Average%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-356">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-357">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29> do obliczenia średniej.</span><span class="sxs-lookup"><span data-stu-id="e3165-357">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29> to calculate an average.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#16)]
 [!code-vb[System.Linq.Enumerable#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-358">
            <paramref name="source" /> lub <paramref name="selector" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-358">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="e3165-359">Suma elementów w sekwencji jest większa niż <see cref="F:System.Decimal.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-359">The sum of the elements in the sequence is larger than <see cref="F:System.Decimal.MaxValue" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="e3165-360">Aggregate — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-360">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Average&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Average&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;double&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Average&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;float64&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Double))) As Nullable(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;double&gt; Average(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;double&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;double&gt;&gt; -&gt; Nullable&lt;double&gt;" Usage="System.Linq.Enumerable.Average (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Double&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-361">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-361">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-362">Sekwencja wartości do obliczenia średniej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-362">A sequence of values to calculate the average of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="e3165-363">Funkcja transformacji do zastosowania do każdego elementu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-363">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-364">Oblicza średnią sekwencji dopuszczającego wartość null <see cref="T:System.Double" /> wartości, które są uzyskiwane za pomocą funkcji przekształcenia na każdym elemencie sekwencji wejściowych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-364">Computes the average of a sequence of nullable <see cref="T:System.Double" /> values that are obtained by invoking a transform function on each element of the input sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-365">Średnia sekwencja wartości lub <see langword="null" /> Jeśli sekwencja źródłowa jest pusta lub zawiera tylko wartości, które są <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-365">The average of the sequence of values, or <see langword="null" /> if the source sequence is empty or contains only values that are <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-366">W składni wyrażeń zapytania języka Visual Basic `Aggregate Into Average()` klauzuli przekłada się na wywołanie <xref:System.Linq.Enumerable.Average%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-366">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-367">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29> do obliczenia średniej.</span><span class="sxs-lookup"><span data-stu-id="e3165-367">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29> to calculate an average.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#16)]
 [!code-vb[System.Linq.Enumerable#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#16)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-368">
            <paramref name="source" /> lub <paramref name="selector" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-368">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="e3165-369">Aggregate — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-369">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Average&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Average&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;int&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Average&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;int32&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Integer))) As Nullable(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;double&gt; Average(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;int&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;int&gt;&gt; -&gt; Nullable&lt;double&gt;" Usage="System.Linq.Enumerable.Average (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Int32&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-370">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-370">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-371">Sekwencja wartości do obliczenia średniej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-371">A sequence of values to calculate the average of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="e3165-372">Funkcja transformacji do zastosowania do każdego elementu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-372">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-373">Oblicza średnią sekwencji dopuszczającego wartość null <see cref="T:System.Int32" /> wartości, które są uzyskiwane za pomocą funkcji przekształcenia na każdym elemencie sekwencji wejściowych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-373">Computes the average of a sequence of nullable <see cref="T:System.Int32" /> values that are obtained by invoking a transform function on each element of the input sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-374">Średnia sekwencja wartości lub <see langword="null" /> Jeśli sekwencja źródłowa jest pusta lub zawiera tylko wartości, które są <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-374">The average of the sequence of values, or <see langword="null" /> if the source sequence is empty or contains only values that are <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-375">W składni wyrażeń zapytania języka Visual Basic `Aggregate Into Average()` klauzuli przekłada się na wywołanie <xref:System.Linq.Enumerable.Average%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-375">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-376">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> do obliczenia średniej.</span><span class="sxs-lookup"><span data-stu-id="e3165-376">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to calculate an average.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#18)]
 [!code-vb[System.Linq.Enumerable#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-377">
            <paramref name="source" /> lub <paramref name="selector" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-377">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="e3165-378">Suma elementów w sekwencji jest większa niż <see cref="F:System.Int64.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-378">The sum of the elements in the sequence is larger than <see cref="F:System.Int64.MaxValue" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="e3165-379">Aggregate — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-379">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Average&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Average&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;long&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Average&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;int64&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Long))) As Nullable(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;double&gt; Average(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;long&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;int64&gt;&gt; -&gt; Nullable&lt;double&gt;" Usage="System.Linq.Enumerable.Average (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Int64&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-380">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-380">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-381">Sekwencja wartości do obliczenia średniej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-381">A sequence of values to calculate the average of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="e3165-382">Funkcja transformacji do zastosowania do każdego elementu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-382">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-383">Oblicza średnią sekwencji dopuszczającego wartość null <see cref="T:System.Int64" /> wartości, które są uzyskiwane za pomocą funkcji przekształcenia na każdym elemencie sekwencji wejściowych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-383">Computes the average of a sequence of nullable <see cref="T:System.Int64" /> values that are obtained by invoking a transform function on each element of the input sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-384">Średnia sekwencja wartości lub <see langword="null" /> Jeśli sekwencja źródłowa jest pusta lub zawiera tylko wartości, które są <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-384">The average of the sequence of values, or <see langword="null" /> if the source sequence is empty or contains only values that are <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-385">W składni wyrażeń zapytania języka Visual Basic `Aggregate Into Average()` klauzuli przekłada się na wywołanie <xref:System.Linq.Enumerable.Average%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-385">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-386">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29> do obliczenia średniej.</span><span class="sxs-lookup"><span data-stu-id="e3165-386">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29> to calculate an average.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#16](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#16)]
 [!code-vb[System.Linq.Enumerable#16](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#16)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="e3165-387">Aggregate — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-387">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Average&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;float&gt; Average&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;float&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float32&gt; Average&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;float32&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Single))) As Nullable(Of Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;float&gt; Average(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;float&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;single&gt;&gt; -&gt; Nullable&lt;single&gt;" Usage="System.Linq.Enumerable.Average (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Single&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-388">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-388">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-389">Sekwencja wartości do obliczenia średniej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-389">A sequence of values to calculate the average of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="e3165-390">Funkcja transformacji do zastosowania do każdego elementu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-390">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-391">Oblicza średnią sekwencji dopuszczającego wartość null <see cref="T:System.Single" /> wartości, które są uzyskiwane za pomocą funkcji przekształcenia na każdym elemencie sekwencji wejściowych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-391">Computes the average of a sequence of nullable <see cref="T:System.Single" /> values that are obtained by invoking a transform function on each element of the input sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-392">Średnia sekwencja wartości lub <see langword="null" /> Jeśli sekwencja źródłowa jest pusta lub zawiera tylko wartości, które są <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-392">The average of the sequence of values, or <see langword="null" /> if the source sequence is empty or contains only values that are <see langword="null" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-393">W składni wyrażeń zapytania języka Visual Basic `Aggregate Into Average()` klauzuli przekłada się na wywołanie <xref:System.Linq.Enumerable.Average%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-393">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-394">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> do obliczenia średniej.</span><span class="sxs-lookup"><span data-stu-id="e3165-394">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to calculate an average.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#18)]
 [!code-vb[System.Linq.Enumerable#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-395">
            <paramref name="source" /> lub <paramref name="selector" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-395">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="e3165-396">Aggregate — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-396">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Average&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static float Average&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,float&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Average&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, float32&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Average``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Average(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Single)) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static float Average(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, float&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Average : seq&lt;'Source&gt; * Func&lt;'Source, single&gt; -&gt; single" Usage="System.Linq.Enumerable.Average (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Single&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-397">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-397">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-398">Sekwencja wartości do obliczenia średniej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-398">A sequence of values to calculate the average of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="e3165-399">Funkcja transformacji do zastosowania do każdego elementu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-399">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-400">Oblicza średnią sekwencji <see cref="T:System.Single" /> wartości, które są uzyskiwane za pomocą funkcji przekształcenia na każdym elemencie sekwencji wejściowych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-400">Computes the average of a sequence of <see cref="T:System.Single" /> values that are obtained by invoking a transform function on each element of the input sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-401">Średnia sekwencji wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-401">The average of the sequence of values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-402">W składni wyrażeń zapytania języka Visual Basic `Aggregate Into Average()` klauzuli przekłada się na wywołanie <xref:System.Linq.Enumerable.Average%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-402">In Visual Basic query expression syntax, an `Aggregate Into Average()` clause translates to an invocation of <xref:System.Linq.Enumerable.Average%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-403">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> do obliczenia średniej.</span><span class="sxs-lookup"><span data-stu-id="e3165-403">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Average%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to calculate an average.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#18](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#18)]
 [!code-vb[System.Linq.Enumerable#18](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#18)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-404">
            <paramref name="source" /> lub <paramref name="selector" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-404">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e3165-405">
            <paramref name="source" /> nie zawiera żadnych elementów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-405">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="e3165-406">Aggregate — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-406">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Cast&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; Cast&lt;TResult&gt; (this System.Collections.IEnumerable source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; Cast&lt;TResult&gt;(class System.Collections.IEnumerable source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Cast``1(System.Collections.IEnumerable)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Cast(Of TResult) (source As IEnumerable) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ Cast(System::Collections::IEnumerable ^ source);" />
      <MemberSignature Language="F#" Value="static member Cast : System.Collections.IEnumerable -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.Cast source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.IEnumerable" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="e3165-407">Typ rzutowania elementy <c>źródła</c> do.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-407">The type to cast the elements of <c>source</c> to.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-408">
            <see cref="T:System.Collections.IEnumerable" /> Zawiera elementy, można rzutować na typ <c>TResult</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-408">The <see cref="T:System.Collections.IEnumerable" /> that contains the elements to be cast to type <c>TResult</c>.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-409">Rzutuje elementy <see cref="T:System.Collections.IEnumerable" /> do określonego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-409">Casts the elements of an <see cref="T:System.Collections.IEnumerable" /> to the specified type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-410">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Zawierający każdego elementu w sekwencji źródłowej rzutowanie do określonego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-410">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains each element of the source sequence cast to the specified type.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-411">Ta metoda jest implementowana za pomocą odroczonego wykonania.</span><span class="sxs-lookup"><span data-stu-id="e3165-411">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="e3165-412">Bezpośrednio zwracana wartość jest obiektem, który przechowuje wszystkie informacje wymagane do wykonania akcji.</span><span class="sxs-lookup"><span data-stu-id="e3165-412">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="e3165-413">Zapytanie, reprezentowane przez tę metodę nie jest wykonywana do czasu, przez wywołanie obiekt jest zostanie wyliczonly jego `GetEnumerator` metoda bezpośrednio lub za pomocą `foreach` w języku Visual C# lub `For Each` w języku Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="e3165-413">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="e3165-414"><xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29> Metoda umożliwia standardowych operatorów zapytań do wywołania w kolekcjach nieogólnego, podając informacje o typie niezbędne.</span><span class="sxs-lookup"><span data-stu-id="e3165-414">The <xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29> method enables the standard query operators to be invoked on non-generic collections by supplying the necessary type information.</span></span> <span data-ttu-id="e3165-415">Na przykład <xref:System.Collections.ArrayList> nie implementuje <xref:System.Collections.Generic.IEnumerable%601>, ale przez wywołanie metody <xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29> na <xref:System.Collections.ArrayList> obiektu standardowych operatorów zapytań mogą następnie służyć do kwerendy sekwencji.</span><span class="sxs-lookup"><span data-stu-id="e3165-415">For example, <xref:System.Collections.ArrayList> does not implement <xref:System.Collections.Generic.IEnumerable%601>, but by calling <xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29> on the <xref:System.Collections.ArrayList> object, the standard query operators can then be used to query the sequence.</span></span>  
  
 <span data-ttu-id="e3165-416">Jeśli element nie można przekonwertować na typ `TResult`, ta metoda wyrzuca <xref:System.InvalidCastException>.</span><span class="sxs-lookup"><span data-stu-id="e3165-416">If an element cannot be converted to type `TResult`, this method throws a <xref:System.InvalidCastException>.</span></span>

 <span data-ttu-id="e3165-417">Sekwencja źródłowa dla tej metody jest <xref:System.Collections.IEnumerable>, co oznacza, że elementy mają kompilacji typu statycznego `object`.</span><span class="sxs-lookup"><span data-stu-id="e3165-417">The source sequence for this method is <xref:System.Collections.IEnumerable>, which means the elements have the compile-time static type of `object`.</span></span> <span data-ttu-id="e3165-418">Tylko konwersje typów, które są wykonywane przez tę metodę są konwersje odwołań i konwersji unboxing.</span><span class="sxs-lookup"><span data-stu-id="e3165-418">The only type conversions that are performed by this method are reference conversions and unboxing conversions.</span></span> <span data-ttu-id="e3165-419">Typ środowiska uruchomieniowego elementów w kolekcji musi być zgodny typ docelowy lub w przypadku typów wartości, typ środowiska uruchomieniowego elementów musi być wynikiem opakowywanie konwersji na typ docelowy.</span><span class="sxs-lookup"><span data-stu-id="e3165-419">The runtime type of the elements in the collection must match the target type, or in the case of value types, the runtime type of elements must be the result of a boxing conversion of the target type.</span></span> <span data-ttu-id="e3165-420">Inne typy konwersji, takich jak między różne typy liczbowe, nie są dozwolone.</span><span class="sxs-lookup"><span data-stu-id="e3165-420">Other conversion types, such as those between different numeric types, are not allowed.</span></span> 
 
 <span data-ttu-id="e3165-421">Aby uzyskać tylko te elementy, które mogą być konwertowane na typ `TResult`, użyj <xref:System.Linq.Enumerable.OfType%2A> zamiast metody <xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29>.</span><span class="sxs-lookup"><span data-stu-id="e3165-421">To obtain only those elements that can be converted to type `TResult`, use the <xref:System.Linq.Enumerable.OfType%2A> method instead of <xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29>.</span></span>  
  
 <span data-ttu-id="e3165-422">W wyrażeniu zapytania Zmienna iteracji jawnie wpisanych przekłada się na wywołanie <xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29>.</span><span class="sxs-lookup"><span data-stu-id="e3165-422">In a query expression, an explicitly typed iteration variable translates to an invocation of <xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29>.</span></span> <span data-ttu-id="e3165-423">Ten przykład przedstawia składnię dla zakresu jawnie wpisanych zmiennych.</span><span class="sxs-lookup"><span data-stu-id="e3165-423">This example shows the syntax for an explicitly typed range variable.</span></span>  
  
```csharp  
from int i in objects  
```  
  
```vb  
From i As Integer In objects  
```  

<span data-ttu-id="e3165-424">Użyj `select` klauzuli kwerendy do wykonania innych typów konwersji, takich jak niejawnych konwersji liczbowych.</span><span class="sxs-lookup"><span data-stu-id="e3165-424">Use the `select` clause of a query to perform other conversion types, like the implicit numeric conversions.</span></span> <span data-ttu-id="e3165-425">W poniższym przykładzie użyto obu `Cast` metody i `select` instrukcję w celu konwersji sekwencji liczb całkowitych spakowany sekwencję wartości podwójnej precyzji.</span><span class="sxs-lookup"><span data-stu-id="e3165-425">The following example uses both the `Cast` method and a `select` statement to convert a sequence of boxed integers to a sequence of doubles.</span></span>

```csharp
IEnumerable sequence = Enumerable.Range(0, 10);
var doubles = from int item in sequence
                select (double)item;
``` 

```vb
Dim sequence As IEnumerable = Enumerable.Range(0, 10)
Dim doubles = From item As Integer In sequence
                Select CType(item, Double)
```

## Examples  
 <span data-ttu-id="e3165-426">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29> umożliwia użycie standardowych operatorów zapytań w <xref:System.Collections.ArrayList>.</span><span class="sxs-lookup"><span data-stu-id="e3165-426">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29> to enable the use of the standard query operators on an <xref:System.Collections.ArrayList>.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#19](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#19)]
 [!code-vb[System.Linq.Enumerable#19](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#19)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-427">
            <paramref name="source" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-427">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidCastException">
          <span data-ttu-id="e3165-428">Nie można rzutować elementu w sekwencji na typ <paramref name="TResult" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-428">An element in the sequence cannot be cast to type <paramref name="TResult" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1aefd18c-1314-47f8-99ec-9bcefb09e699">
          <span data-ttu-id="e3165-429">Klauzula From (odwołanie w C#)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-429">from clause (C# Reference)</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/83e3665e-68a0-4540-a3a3-3d777a0f95d5">
          <span data-ttu-id="e3165-430">From — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-430">From Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Concat&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Concat&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; first, System.Collections.Generic.IEnumerable&lt;TSource&gt; second);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Concat&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; first, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; second) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Concat``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Concat(Of TSource) (first As IEnumerable(Of TSource), second As IEnumerable(Of TSource)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ Concat(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ first, System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ second);" />
      <MemberSignature Language="F#" Value="static member Concat : seq&lt;'Source&gt; * seq&lt;'Source&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.Concat (first, second)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="first" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="second" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-431">Typ elementów sekwencji wejściowych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-431">The type of the elements of the input sequences.</span>
          </span>
        </typeparam>
        <param name="first">
          <span data-ttu-id="e3165-432">Pierwsza sekwencja do łączenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-432">The first sequence to concatenate.</span>
          </span>
        </param>
        <param name="second">
          <span data-ttu-id="e3165-433">Sekwencja do łączenia się do pierwszej sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-433">The sequence to concatenate to the first sequence.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-434">Łączy dwie sekwencje.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-434">Concatenates two sequences.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-435">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Zawierającą połączone elementy dwóch sekwencji wejściowych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-435">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the concatenated elements of the two input sequences.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-436">Ta metoda jest implementowana za pomocą odroczonego wykonania.</span><span class="sxs-lookup"><span data-stu-id="e3165-436">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="e3165-437">Bezpośrednio zwracana wartość jest obiektem, który przechowuje wszystkie informacje wymagane do wykonania akcji.</span><span class="sxs-lookup"><span data-stu-id="e3165-437">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="e3165-438">Zapytanie, reprezentowane przez tę metodę nie jest wykonywana do czasu, przez wywołanie obiekt jest zostanie wyliczonly jego `GetEnumerator` metoda bezpośrednio lub za pomocą `foreach` w języku Visual C# lub `For Each` w języku Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="e3165-438">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="e3165-439"><xref:System.Linq.Enumerable.Concat%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> Metoda różni się od <xref:System.Linq.Enumerable.Union%2A> metody ponieważ <xref:System.Linq.Enumerable.Concat%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> metoda zwraca wszystkie elementy z oryginalnej sekwencji wejściowych.</span><span class="sxs-lookup"><span data-stu-id="e3165-439">The <xref:System.Linq.Enumerable.Concat%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> method differs from the <xref:System.Linq.Enumerable.Union%2A> method because the <xref:System.Linq.Enumerable.Concat%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> method returns all the original elements in the input sequences.</span></span> <span data-ttu-id="e3165-440"><xref:System.Linq.Enumerable.Union%2A> Metoda zwraca tylko unikatowych elementów.</span><span class="sxs-lookup"><span data-stu-id="e3165-440">The <xref:System.Linq.Enumerable.Union%2A> method returns only unique elements.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-441">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Concat%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> do łączenia dwóch sekwencji.</span><span class="sxs-lookup"><span data-stu-id="e3165-441">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Concat%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> to concatenate two sequences.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#20](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#20)]
 [!code-vb[System.Linq.Enumerable#20](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#20)]  
  
 <span data-ttu-id="e3165-442">Alternatywny sposób łączenia dwóch sekwencji jest konstruuje kolekcję, na przykład tablicy, sekwencji, a następnie zastosować <xref:System.Linq.Enumerable.SelectMany%2A> metody i przekazanie do niej funkcji Selektor tożsamości.</span><span class="sxs-lookup"><span data-stu-id="e3165-442">An alternative way of concatenating two sequences is to construct a collection, for example an array, of sequences and then apply the <xref:System.Linq.Enumerable.SelectMany%2A> method, passing it the identity selector function.</span></span> <span data-ttu-id="e3165-443">W poniższym przykładzie pokazano użycie tego <xref:System.Linq.Enumerable.SelectMany%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-443">The following example demonstrates this use of <xref:System.Linq.Enumerable.SelectMany%2A>.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#112](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#112)]
 [!code-vb[System.Linq.Enumerable#112](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#112)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-444">
            <paramref name="first" /> lub <paramref name="second" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-444">
              <paramref name="first" /> or <paramref name="second" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Contains&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e3165-445">Określa, czy sekwencja zawiera określony element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-445">Determines whether a sequence contains a specified element.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Contains&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static bool Contains&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, TSource value);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Contains&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, !!TSource value) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Contains(Of TSource) (source As IEnumerable(Of TSource), value As TSource) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool Contains(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, TSource value);" />
      <MemberSignature Language="F#" Value="static member Contains : seq&lt;'Source&gt; * 'Source -&gt; bool" Usage="System.Linq.Enumerable.Contains (source, value)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="value" Type="TSource" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-446">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-446">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-447">Sekwencja, w której chcesz zlokalizować wartość.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-447">A sequence in which to locate a value.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="e3165-448">Wartość do zlokalizowania w sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-448">The value to locate in the sequence.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-449">Określa, czy sekwencja zawiera określony element przy użyciu domyślny moduł porównujący równość.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-449">Determines whether a sequence contains a specified element by using the default equality comparer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-450">
            <see langword="true" /> Jeśli sekwencja źródłowa zawiera element, który ma określoną wartość, a w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-450">
              <see langword="true" /> if the source sequence contains an element that has the specified value; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-451">Jeśli typ `source` implementuje <xref:System.Collections.Generic.ICollection%601>, `Contains` wywoływana jest metoda w tej implementacji w celu uzyskania wyniku.</span><span class="sxs-lookup"><span data-stu-id="e3165-451">If the type of `source` implements <xref:System.Collections.Generic.ICollection%601>, the `Contains` method in that implementation is invoked to obtain the result.</span></span> <span data-ttu-id="e3165-452">W przeciwnym razie ta metoda określa, czy `source` zawiera określony element.</span><span class="sxs-lookup"><span data-stu-id="e3165-452">Otherwise, this method determines whether `source` contains the specified element.</span></span>  
  
 <span data-ttu-id="e3165-453">Wyliczenie zostanie zakończony, gdy tylko zostanie znaleziony pasujący element.</span><span class="sxs-lookup"><span data-stu-id="e3165-453">Enumeration is terminated as soon as a matching element is found.</span></span>  
  
 <span data-ttu-id="e3165-454">Elementy są porównywane z podaną wartością za pomocą domyślny moduł porównujący równość, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-454">Elements are compared to the specified value by using the default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-455">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Contains%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> do określenia, czy tablica zawiera określony element.</span><span class="sxs-lookup"><span data-stu-id="e3165-455">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Contains%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> to determine whether an array contains a specific element.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#21](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#21)]
 [!code-vb[System.Linq.Enumerable#21](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#21)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-456">
            <paramref name="source" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-456">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Contains&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static bool Contains&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, TSource value, System.Collections.Generic.IEqualityComparer&lt;TSource&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool Contains&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, !!TSource value, class System.Collections.Generic.IEqualityComparer`1&lt;!!TSource&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Contains``1(System.Collections.Generic.IEnumerable{``0},``0,System.Collections.Generic.IEqualityComparer{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Contains(Of TSource) (source As IEnumerable(Of TSource), value As TSource, comparer As IEqualityComparer(Of TSource)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool Contains(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, TSource value, System::Collections::Generic::IEqualityComparer&lt;TSource&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member Contains : seq&lt;'Source&gt; * 'Source * System.Collections.Generic.IEqualityComparer&lt;'Source&gt; -&gt; bool" Usage="System.Linq.Enumerable.Contains (source, value, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="value" Type="TSource" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-457">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-457">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-458">Sekwencja, w której chcesz zlokalizować wartość.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-458">A sequence in which to locate a value.</span>
          </span>
        </param>
        <param name="value">
          <span data-ttu-id="e3165-459">Wartość do zlokalizowania w sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-459">The value to locate in the sequence.</span>
          </span>
        </param>
        <param name="comparer">
          <span data-ttu-id="e3165-460">Moduł porównujący równość do porównywania wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-460">An equality comparer to compare values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-461">Określa, czy sekwencja zawiera określony element przy użyciu określonego <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-461">Determines whether a sequence contains a specified element by using a specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-462">
            <see langword="true" /> Jeśli sekwencja źródłowa zawiera element, który ma określoną wartość, a w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-462">
              <see langword="true" /> if the source sequence contains an element that has the specified value; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-463">Wyliczenie zostanie zakończony, gdy tylko zostanie znaleziony pasujący element.</span><span class="sxs-lookup"><span data-stu-id="e3165-463">Enumeration is terminated as soon as a matching element is found.</span></span>  
  
 <span data-ttu-id="e3165-464">Jeśli `comparer` jest `null`, domyślny moduł porównujący równość, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, służy do porównywania elementów na określoną wartość.</span><span class="sxs-lookup"><span data-stu-id="e3165-464">If `comparer` is `null`, the default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare elements to the specified value.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-465">Poniższy przykład pokazuje, jak zaimplementować moduł porównujący równość mogą być używane w <xref:System.Linq.Enumerable.Contains%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="e3165-465">The following example shows how to implement an equality comparer that can be used in the <xref:System.Linq.Enumerable.Contains%2A> method.</span></span>  
  
 [!code-csharp[CSLINQCustomComparer#1](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQCustomComparer/CS/CustomComparer.cs#1)]
 [!code-vb[CSLINQCustomComparer#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQCustomComparer/VB/CustomComparer.vb#1)]  
  
 <span data-ttu-id="e3165-466">Po zaimplementowaniu tej porównania można użyć sekwencji `Product` obiekty w <xref:System.Linq.Enumerable.Contains%2A> metodzie, jak pokazano w poniższym przykładzie.</span><span class="sxs-lookup"><span data-stu-id="e3165-466">After you implement this comparer, you can use a sequence of `Product` objects in the <xref:System.Linq.Enumerable.Contains%2A> method, as shown in the following example.</span></span>  
  
 [!code-csharp[CSLINQCustomComparer#6](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQCustomComparer/CS/CustomComparer.cs#6)]
 [!code-vb[CSLINQCustomComparer#6](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQCustomComparer/VB/CustomComparer.vb#6)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-467">
            <paramref name="source" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-467">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Count&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e3165-468">Zwraca liczbę elementów w sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-468">Returns the number of elements in a sequence.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Count&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static int Count&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Count&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Count(Of TSource) (source As IEnumerable(Of TSource)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int Count(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Count : seq&lt;'Source&gt; -&gt; int" Usage="System.Linq.Enumerable.Count source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-469">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-469">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-470">Sekwencji, który zawiera elementy do zliczenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-470">A sequence that contains elements to be counted.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-471">Zwraca liczbę elementów w sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-471">Returns the number of elements in a sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-472">Liczba elementów w sekwencji wejściowych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-472">The number of elements in the input sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-473">Jeśli typ `source` implementuje <xref:System.Collections.Generic.ICollection%601>, tę implementację zostaje użyty do uzyskania łącznej liczby elementów.</span><span class="sxs-lookup"><span data-stu-id="e3165-473">If the type of `source` implements <xref:System.Collections.Generic.ICollection%601>, that implementation is used to obtain the count of elements.</span></span> <span data-ttu-id="e3165-474">W przeciwnym razie ta metoda określa liczbę.</span><span class="sxs-lookup"><span data-stu-id="e3165-474">Otherwise, this method determines the count.</span></span>  
  
 <span data-ttu-id="e3165-475">Użyj <xref:System.Linq.Enumerable.LongCount%2A> metody, gdy oczekiwane i chcesz dać wynik, który ma być większa niż <xref:System.Int32.MaxValue>.</span><span class="sxs-lookup"><span data-stu-id="e3165-475">Use the <xref:System.Linq.Enumerable.LongCount%2A> method when you expect and want to allow the result to be greater than <xref:System.Int32.MaxValue>.</span></span>  
  
 <span data-ttu-id="e3165-476">W składni wyrażeń zapytania języka Visual Basic `Aggregate Into Count()` klauzuli przekłada się na wywołanie <xref:System.Linq.Enumerable.Count%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-476">In Visual Basic query expression syntax, an `Aggregate Into Count()` clause translates to an invocation of <xref:System.Linq.Enumerable.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-477">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Count%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> zliczania elementów w tablicy.</span><span class="sxs-lookup"><span data-stu-id="e3165-477">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Count%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to count the elements in an array.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#22](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#22)]
 [!code-vb[System.Linq.Enumerable#22](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#22)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-478">
            <paramref name="source" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-478">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="e3165-479">Liczba elementów w <paramref name="source" /> jest większy niż <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-479">The number of elements in <paramref name="source" /> is larger than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="e3165-480">Aggregate — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-480">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Count&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static int Count&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Count&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Count``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Count(Of TSource) (source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int Count(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member Count : seq&lt;'Source&gt; * Func&lt;'Source, bool&gt; -&gt; int" Usage="System.Linq.Enumerable.Count (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-481">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-481">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-482">Sekwencja zawiera elementy do ich przetestowanie i uwzględniane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-482">A sequence that contains elements to be tested and counted.</span>
          </span>
        </param>
        <param name="predicate">
          <span data-ttu-id="e3165-483">Funkcja testowania każdego elementu na stanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-483">A function to test each element for a condition.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-484">Zwraca liczbę reprezentującą liczbę elementów w określonej sekwencji spełniają warunek.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-484">Returns a number that represents how many elements in the specified sequence satisfy a condition.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-485">Liczba, która przedstawia, jak wiele elementów w sekwencji spełniają warunek w funkcji predykatu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-485">A number that represents how many elements in the sequence satisfy the condition in the predicate function.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-486">Jeśli typ `source` implementuje <xref:System.Collections.Generic.ICollection%601>, tę implementację zostaje użyty do uzyskania łącznej liczby elementów.</span><span class="sxs-lookup"><span data-stu-id="e3165-486">If the type of `source` implements <xref:System.Collections.Generic.ICollection%601>, that implementation is used to obtain the count of elements.</span></span> <span data-ttu-id="e3165-487">W przeciwnym razie ta metoda określa liczbę.</span><span class="sxs-lookup"><span data-stu-id="e3165-487">Otherwise, this method determines the count.</span></span>  
  
 <span data-ttu-id="e3165-488">Należy używać <xref:System.Linq.Enumerable.LongCount%2A> metody, gdy oczekiwane i chcesz dać wynik, który ma być większa niż <xref:System.Int32.MaxValue>.</span><span class="sxs-lookup"><span data-stu-id="e3165-488">You should use the <xref:System.Linq.Enumerable.LongCount%2A> method when you expect and want to allow the result to be greater than <xref:System.Int32.MaxValue>.</span></span>  
  
 <span data-ttu-id="e3165-489">W składni wyrażeń zapytania języka Visual Basic `Aggregate Into Count()` klauzuli przekłada się na wywołanie <xref:System.Linq.Enumerable.Count%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-489">In Visual Basic query expression syntax, an `Aggregate Into Count()` clause translates to an invocation of <xref:System.Linq.Enumerable.Count%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-490">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Count%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> zliczania elementów w tablicy, które spełniają warunek.</span><span class="sxs-lookup"><span data-stu-id="e3165-490">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Count%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> to count the elements in an array that satisfy a condition.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#23](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#23)]
 [!code-vb[System.Linq.Enumerable#23](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#23)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-491">
            <paramref name="source" /> lub <paramref name="predicate" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-491">
              <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="e3165-492">Liczba elementów w <paramref name="source" /> jest większy niż <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-492">The number of elements in <paramref name="source" /> is larger than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="e3165-493">Aggregate — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-493">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="DefaultIfEmpty&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e3165-494">Zwraca elementy <see cref="T:System.Collections.Generic.IEnumerable`1" />, lub domyślny zwracającej zbierania singleton, jeśli sekwencja jest pusta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-494">Returns the elements of an <see cref="T:System.Collections.Generic.IEnumerable`1" />, or a default valued singleton collection if the sequence is empty.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="DefaultIfEmpty&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; DefaultIfEmpty&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; DefaultIfEmpty&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DefaultIfEmpty(Of TSource) (source As IEnumerable(Of TSource)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ DefaultIfEmpty(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member DefaultIfEmpty : seq&lt;'Source&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.DefaultIfEmpty source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-495">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-495">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-496">Sekwencja do zwrócenia wartości domyślnej, jeśli jest on pusty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-496">The sequence to return a default value for if it is empty.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-497">Zwraca elementy w określonej sekwencji lub wartość domyślną parametru typu w zbierania singleton, jeśli sekwencja jest pusty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-497">Returns the elements of the specified sequence or the type parameter's default value in a singleton collection if the sequence is empty.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-498">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Obiekt, który zawiera wartość domyślną dla <paramref name="TSource" /> wpisz Jeśli <paramref name="source" /> jest pusty; w przeciwnym razie <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-498">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> object that contains the default value for the <paramref name="TSource" /> type if <paramref name="source" /> is empty; otherwise, <paramref name="source" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-499">Ta metoda jest implementowana za pomocą odroczonego wykonania.</span><span class="sxs-lookup"><span data-stu-id="e3165-499">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="e3165-500">Bezpośrednio zwracana wartość jest obiektem, który przechowuje wszystkie informacje wymagane do wykonania akcji.</span><span class="sxs-lookup"><span data-stu-id="e3165-500">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="e3165-501">Zapytanie, reprezentowane przez tę metodę nie jest wykonywana do czasu, przez wywołanie obiekt jest zostanie wyliczonly jego `GetEnumerator` metoda bezpośrednio lub za pomocą `foreach` w języku Visual C# lub `For Each` w języku Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="e3165-501">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="e3165-502">Wartością domyślną dla odwołania i typów zerowalnych jest `null`.</span><span class="sxs-lookup"><span data-stu-id="e3165-502">The default value for reference and nullable types is `null`.</span></span>  
  
 <span data-ttu-id="e3165-503">Ta metoda może służyć do tworzenia lewe sprzężenie zewnętrzne w połączeniu z <xref:System.Linq.Enumerable.GroupJoin%2A>) metody.</span><span class="sxs-lookup"><span data-stu-id="e3165-503">This method can be used to produce a left outer join when it is combined with the <xref:System.Linq.Enumerable.GroupJoin%2A>) method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-504">Poniższe przykłady kodu przedstawiają sposoby użycia <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> podać wartość domyślna w przypadku, gdy sekwencja źródłowa jest pusta.</span><span class="sxs-lookup"><span data-stu-id="e3165-504">The following code examples demonstrate how to use <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to provide a default value in case the source sequence is empty.</span></span>  
  
 <span data-ttu-id="e3165-505">W tym przykładzie użyto niepustej sekwencji.</span><span class="sxs-lookup"><span data-stu-id="e3165-505">This example uses a non-empty sequence.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#24](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#24)]
 [!code-vb[System.Linq.Enumerable#24](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#24)]  
  
 <span data-ttu-id="e3165-506">W tym przykładzie użyto pustą sekwencją.</span><span class="sxs-lookup"><span data-stu-id="e3165-506">This example uses an empty sequence.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#25](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#25)]
 [!code-vb[System.Linq.Enumerable#25](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#25)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-507">
            <paramref name="source" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-507">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107">
          <span data-ttu-id="e3165-508">Łączenie</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-508">Joining</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="DefaultIfEmpty&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; DefaultIfEmpty&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, TSource defaultValue);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; DefaultIfEmpty&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, !!TSource defaultValue) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.DefaultIfEmpty``1(System.Collections.Generic.IEnumerable{``0},``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function DefaultIfEmpty(Of TSource) (source As IEnumerable(Of TSource), defaultValue As TSource) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ DefaultIfEmpty(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, TSource defaultValue);" />
      <MemberSignature Language="F#" Value="static member DefaultIfEmpty : seq&lt;'Source&gt; * 'Source -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.DefaultIfEmpty (source, defaultValue)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="defaultValue" Type="TSource" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-509">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-509">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-510">Sekwencja zwracana wartość określona dla, gdy jest on pusty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-510">The sequence to return the specified value for if it is empty.</span>
          </span>
        </param>
        <param name="defaultValue">
          <span data-ttu-id="e3165-511">Wartość zwracana, jeśli sekwencja jest pusty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-511">The value to return if the sequence is empty.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-512">Zwraca elementy w określonej sekwencji lub określoną wartość w zbierania singleton, jeśli sekwencja jest pusty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-512">Returns the elements of the specified sequence or the specified value in a singleton collection if the sequence is empty.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-513">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Zawierający <paramref name="defaultValue" /> Jeśli <paramref name="source" /> jest pusty; w przeciwnym razie <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-513">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains <paramref name="defaultValue" /> if <paramref name="source" /> is empty; otherwise, <paramref name="source" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-514">Ta metoda jest implementowana za pomocą odroczonego wykonania.</span><span class="sxs-lookup"><span data-stu-id="e3165-514">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="e3165-515">Bezpośrednio zwracana wartość jest obiektem, który przechowuje wszystkie informacje wymagane do wykonania akcji.</span><span class="sxs-lookup"><span data-stu-id="e3165-515">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="e3165-516">Zapytanie, reprezentowane przez tę metodę nie jest wykonywana do czasu, przez wywołanie obiekt jest zostanie wyliczonly jego `GetEnumerator` metoda bezpośrednio lub za pomocą `foreach` w języku Visual C# lub `For Each` w języku Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="e3165-516">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="e3165-517">Ta metoda może służyć do tworzenia lewe sprzężenie zewnętrzne w połączeniu z <xref:System.Linq.Enumerable.GroupJoin%2A>) metody.</span><span class="sxs-lookup"><span data-stu-id="e3165-517">This method can be used to produce a left outer join when it is combined with the <xref:System.Linq.Enumerable.GroupJoin%2A>) method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-518">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> metodę i określić wartości domyślnej.</span><span class="sxs-lookup"><span data-stu-id="e3165-518">The following code example demonstrates how to use the <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> method and specify a default value.</span></span> <span data-ttu-id="e3165-519">Pierwszej sekwencji nie jest pusty, a drugiej sekwencji jest pusty.</span><span class="sxs-lookup"><span data-stu-id="e3165-519">The first sequence is not empty and the second sequence is empty.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#26](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#26)]
 [!code-vb[System.Linq.Enumerable#26](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#26)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107">
          <span data-ttu-id="e3165-520">Łączenie</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-520">Joining</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Distinct&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e3165-521">Zwraca odrębne elementy z sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-521">Returns distinct elements from a sequence.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-522">Sekwencja wynik to nieuporządkowane.</span><span class="sxs-lookup"><span data-stu-id="e3165-522">The result sequence is unordered.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Distinct&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Distinct&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Distinct&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Distinct(Of TSource) (source As IEnumerable(Of TSource)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ Distinct(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Distinct : seq&lt;'Source&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.Distinct source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-523">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-523">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-524">Sekwencja, aby usunąć zduplikowane elementy z.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-524">The sequence to remove duplicate elements from.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-525">Zwraca odrębne elementy z sekwencji za pomocą domyślny moduł porównujący równość do porównywania wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-525">Returns distinct elements from a sequence by using the default equality comparer to compare values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-526">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Zawierający odrębne elementy z sekwencji źródłowej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-526">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains distinct elements from the source sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-527">Ta metoda jest implementowana za pomocą odroczonego wykonania.</span><span class="sxs-lookup"><span data-stu-id="e3165-527">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="e3165-528">Bezpośrednio zwracana wartość jest obiektem, który przechowuje wszystkie informacje wymagane do wykonania akcji.</span><span class="sxs-lookup"><span data-stu-id="e3165-528">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="e3165-529">Zapytanie, reprezentowane przez tę metodę nie jest wykonywana do czasu, przez wywołanie obiekt jest zostanie wyliczonly jego `GetEnumerator` metoda bezpośrednio lub za pomocą `foreach` w języku Visual C# lub `For Each` w języku Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="e3165-529">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="e3165-530"><xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> Metoda zwraca nieuporządkowaną sekwencji, która nie zawiera zduplikowane wartości.</span><span class="sxs-lookup"><span data-stu-id="e3165-530">The <xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> method returns an unordered sequence that contains no duplicate values.</span></span> <span data-ttu-id="e3165-531">Używa ona domyślny moduł porównujący równość, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, aby porównać wartości.</span><span class="sxs-lookup"><span data-stu-id="e3165-531">It uses the default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, to compare values.</span></span>  
  
 <span data-ttu-id="e3165-532">W składni wyrażeń zapytania języka Visual Basic `Distinct` klauzuli przekłada się na wywołanie <xref:System.Linq.Enumerable.Distinct%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-532">In Visual Basic query expression syntax, a `Distinct` clause translates to an invocation of <xref:System.Linq.Enumerable.Distinct%2A>.</span></span>  
  
 <span data-ttu-id="e3165-533">Domyślny moduł porównujący równość, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, służy do porównywania wartości typów implementujących <xref:System.IEquatable%601> interfejs generyczny.</span><span class="sxs-lookup"><span data-stu-id="e3165-533">The default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare values of the types that implement the <xref:System.IEquatable%601> generic interface.</span></span> <span data-ttu-id="e3165-534">Aby porównać niestandardowy typ danych, należy zaimplementować niniejszy interfejs i podać własne <xref:System.Object.GetHashCode%2A> i <xref:System.Object.Equals%2A> metod dla typu.</span><span class="sxs-lookup"><span data-stu-id="e3165-534">To compare a custom data type, you need to implement this interface and provide your own <xref:System.Object.GetHashCode%2A> and <xref:System.Object.Equals%2A> methods for the type.</span></span>  
  
 <span data-ttu-id="e3165-535">Aby uzyskać przykład, który używa <xref:System.Collections.Generic.IEqualityComparer%601> do definiowania niestandardowej funkcji porównującej, zobacz <xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29>.</span><span class="sxs-lookup"><span data-stu-id="e3165-535">For an example that uses <xref:System.Collections.Generic.IEqualityComparer%601> to define a custom comparer, see <xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-536">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> do zwrócenia odrębnych elementach z sekwencją liczb całkowitych.</span><span class="sxs-lookup"><span data-stu-id="e3165-536">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to return distinct elements from a sequence of integers.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#27](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#27)]
 [!code-vb[System.Linq.Enumerable#27](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#27)]  
  
 <span data-ttu-id="e3165-537">Jeśli chcesz przywrócić odrębnych elementach z sekwencji obiektów określonego typu danych niestandardowych, należy zaimplementować <xref:System.IEquatable%601> ogólny interfejs w klasie.</span><span class="sxs-lookup"><span data-stu-id="e3165-537">If you want to return distinct elements from sequences of objects of some custom data type, you have to implement the <xref:System.IEquatable%601> generic interface in the class.</span></span> <span data-ttu-id="e3165-538">Poniższy przykład kodu pokazuje sposób implementacji niniejszego interfejsu do niestandardowego typu danych i zapewniają <xref:System.Object.GetHashCode%2A> i <xref:System.Object.Equals%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="e3165-538">The following code example shows how to implement this interface in a custom data type and provide <xref:System.Object.GetHashCode%2A> and <xref:System.Object.Equals%2A> methods.</span></span>  
  
 [!code-csharp[CSLINQEncapsulatedComparer#1](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/CS/EncapsulatedComparer.cs#1)]
 [!code-vb[CSLINQEncapsulatedComparer#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/VB/EncapsulatedComparer.vb#1)]  
  
 <span data-ttu-id="e3165-539">Po zaimplementowaniu ten interfejs może skorzystać z sekwencji `Product` obiekty w <xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> metodzie, jak pokazano w poniższym przykładzie.</span><span class="sxs-lookup"><span data-stu-id="e3165-539">After you implement this interface, you can use a sequence of `Product` objects in the <xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> method, as shown in the following example.</span></span>  
  
 [!code-csharp[CSLINQEncapsulatedComparer#5](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/CS/EncapsulatedComparer.cs#5)]
 [!code-vb[CSLINQEncapsulatedComparer#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/VB/EncapsulatedComparer.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-540">
            <paramref name="source" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-540">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/86f42614-0d8f-4ffc-b888-ce8a37a8d36a">
          <span data-ttu-id="e3165-541">Distinct — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-541">Distinct Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Distinct&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Distinct&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, System.Collections.Generic.IEqualityComparer&lt;TSource&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Distinct&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Collections.Generic.IEqualityComparer`1&lt;!!TSource&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Distinct``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Distinct(Of TSource) (source As IEnumerable(Of TSource), comparer As IEqualityComparer(Of TSource)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ Distinct(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, System::Collections::Generic::IEqualityComparer&lt;TSource&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member Distinct : seq&lt;'Source&gt; * System.Collections.Generic.IEqualityComparer&lt;'Source&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.Distinct (source, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-542">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-542">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-543">Sekwencja, aby usunąć zduplikowane elementy z.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-543">The sequence to remove duplicate elements from.</span>
          </span>
        </param>
        <param name="comparer">
          <span data-ttu-id="e3165-544">
            <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> Do porównywania wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-544">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-545">Zwraca odrębne elementy z sekwencji przy użyciu określonego <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> do porównywania wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-545">Returns distinct elements from a sequence by using a specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-546">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Zawierający odrębne elementy z sekwencji źródłowej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-546">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains distinct elements from the source sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-547">Ta metoda jest implementowana za pomocą odroczonego wykonania.</span><span class="sxs-lookup"><span data-stu-id="e3165-547">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="e3165-548">Bezpośrednio zwracana wartość jest obiektem, który przechowuje wszystkie informacje wymagane do wykonania akcji.</span><span class="sxs-lookup"><span data-stu-id="e3165-548">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="e3165-549">Zapytanie, reprezentowane przez tę metodę nie jest wykonywana do czasu, przez wywołanie obiekt jest zostanie wyliczonly jego `GetEnumerator` metoda bezpośrednio lub za pomocą `foreach` w języku Visual C# lub `For Each` w języku Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="e3165-549">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="e3165-550"><xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> Metoda zwraca nieuporządkowaną sekwencji, która nie zawiera zduplikowane wartości.</span><span class="sxs-lookup"><span data-stu-id="e3165-550">The <xref:System.Linq.Enumerable.Distinct%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> method returns an unordered sequence that contains no duplicate values.</span></span> <span data-ttu-id="e3165-551">Jeśli `comparer` jest `null`, domyślny moduł porównujący równość, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, służy do porównywania wartości.</span><span class="sxs-lookup"><span data-stu-id="e3165-551">If `comparer` is `null`, the default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-552">Poniższy przykład pokazuje, jak zaimplementować moduł porównujący równość mogą być używane w <xref:System.Linq.Enumerable.Distinct%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="e3165-552">The following example shows how to implement an equality comparer that can be used in the <xref:System.Linq.Enumerable.Distinct%2A> method.</span></span>  
  
 [!code-csharp[CSLINQCustomComparer#1](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQCustomComparer/CS/CustomComparer.cs#1)]
 [!code-vb[CSLINQCustomComparer#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQCustomComparer/VB/CustomComparer.vb#1)]  
  
 <span data-ttu-id="e3165-553">Po zaimplementowaniu tej porównania można użyć sekwencji `Product` obiekty w <xref:System.Linq.Enumerable.Distinct%2A> metodzie, jak pokazano w poniższym przykładzie.</span><span class="sxs-lookup"><span data-stu-id="e3165-553">After you implement this comparer, you can use a sequence of `Product` objects in the <xref:System.Linq.Enumerable.Distinct%2A> method, as shown in the following example.</span></span>  
  
 [!code-csharp[CSLINQCustomComparer#5](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQCustomComparer/CS/CustomComparer.cs#5)]
 [!code-vb[CSLINQCustomComparer#5](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQCustomComparer/VB/CustomComparer.vb#5)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-554">
            <paramref name="source" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-554">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ElementAt&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource ElementAt&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource ElementAt&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ElementAt``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ElementAt(Of TSource) (source As IEnumerable(Of TSource), index As Integer) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource ElementAt(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, int index);" />
      <MemberSignature Language="F#" Value="static member ElementAt : seq&lt;'Source&gt; * int -&gt; 'Source" Usage="System.Linq.Enumerable.ElementAt (source, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-555">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-555">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-556">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Do zwrotu elementu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-556">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return an element from.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="e3165-557">Liczony od zera indeks elementu do pobrania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-557">The zero-based index of the element to retrieve.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-558">Zwraca element z określonym indeksem w sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-558">Returns the element at a specified index in a sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-559">Element w określonej pozycji w sekwencji źródłowej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-559">The element at the specified position in the source sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-560">Jeśli typ `source` implementuje <xref:System.Collections.Generic.IList%601>, tę implementację służy do uzyskiwania element pod określonym indeksem.</span><span class="sxs-lookup"><span data-stu-id="e3165-560">If the type of `source` implements <xref:System.Collections.Generic.IList%601>, that implementation is used to obtain the element at the specified index.</span></span> <span data-ttu-id="e3165-561">W przeciwnym razie ta metoda pobiera określony element.</span><span class="sxs-lookup"><span data-stu-id="e3165-561">Otherwise, this method obtains the specified element.</span></span>  
  
 <span data-ttu-id="e3165-562">Ta metoda zgłasza wyjątek, jeśli `index` znajduje się poza zakresem.</span><span class="sxs-lookup"><span data-stu-id="e3165-562">This method throws an exception if `index` is out of range.</span></span> <span data-ttu-id="e3165-563">Aby zamiast tego należy zwrócić wartość domyślną, gdy określony indeks jest poza zakresem, użyj <xref:System.Linq.Enumerable.ElementAtOrDefault%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="e3165-563">To instead return a default value when the specified index is out of range, use the <xref:System.Linq.Enumerable.ElementAtOrDefault%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-564">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.ElementAt%2A> do zwrotu elementu na określonej pozycji.</span><span class="sxs-lookup"><span data-stu-id="e3165-564">The following code example demonstrates how to use <xref:System.Linq.Enumerable.ElementAt%2A> to return an element at a specific position.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#28](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#28)]
 [!code-vb[System.Linq.Enumerable#28](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#28)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-565">
            <paramref name="source" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-565">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="e3165-566">
            <paramref name="index" /> jest mniejsza niż 0 lub większa niż lub równa liczbie elementów w <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-566">
              <paramref name="index" /> is less than 0 or greater than or equal to the number of elements in <paramref name="source" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ElementAtOrDefault&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource ElementAtOrDefault&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, int index);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource ElementAtOrDefault&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, int32 index) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ElementAtOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ElementAtOrDefault(Of TSource) (source As IEnumerable(Of TSource), index As Integer) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource ElementAtOrDefault(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, int index);" />
      <MemberSignature Language="F#" Value="static member ElementAtOrDefault : seq&lt;'Source&gt; * int -&gt; 'Source" Usage="System.Linq.Enumerable.ElementAtOrDefault (source, index)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="index" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-567">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-567">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-568">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Do zwrotu elementu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-568">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return an element from.</span>
          </span>
        </param>
        <param name="index">
          <span data-ttu-id="e3165-569">Liczony od zera indeks elementu do pobrania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-569">The zero-based index of the element to retrieve.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-570">Zwraca element pod określonym indeksem w sekwencji lub wartość domyślną, jeśli indeks jest poza zakresem.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-570">Returns the element at a specified index in a sequence or a default value if the index is out of range.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-571">
            <see langword="default" />(<paramref name="TSource" />) Jeśli indeks jest poza granicami sekwencji źródłowej; w przeciwnym razie element w określonej pozycji w sekwencji źródłowej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-571">
              <see langword="default" />(<paramref name="TSource" />) if the index is outside the bounds of the source sequence; otherwise, the element at the specified position in the source sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-572">Jeśli typ `source` implementuje <xref:System.Collections.Generic.IList%601>, tę implementację służy do uzyskiwania element pod określonym indeksem.</span><span class="sxs-lookup"><span data-stu-id="e3165-572">If the type of `source` implements <xref:System.Collections.Generic.IList%601>, that implementation is used to obtain the element at the specified index.</span></span> <span data-ttu-id="e3165-573">W przeciwnym razie ta metoda pobiera określony element.</span><span class="sxs-lookup"><span data-stu-id="e3165-573">Otherwise, this method obtains the specified element.</span></span>  
  
 <span data-ttu-id="e3165-574">Wartością domyślną dla odwołania i typów zerowalnych jest `null`.</span><span class="sxs-lookup"><span data-stu-id="e3165-574">The default value for reference and nullable types is `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-575">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.ElementAtOrDefault%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-575">The following code example demonstrates how to use <xref:System.Linq.Enumerable.ElementAtOrDefault%2A>.</span></span> <span data-ttu-id="e3165-576">W tym przykładzie użyto indeksu, który znajduje się poza granicami tablicy.</span><span class="sxs-lookup"><span data-stu-id="e3165-576">This example uses an index that is outside the bounds of the array.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#29](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#29)]
 [!code-vb[System.Linq.Enumerable#29](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#29)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-577">
            <paramref name="source" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-577">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Empty&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; Empty&lt;TResult&gt; ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; Empty&lt;TResult&gt;() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Empty``1" />
      <MemberSignature Language="VB.NET" Value="Public Function Empty(Of TResult) () As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ Empty();" />
      <MemberSignature Language="F#" Value="static member Empty : unit -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.Empty " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters />
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="e3165-578">Typ do przypisania do parametru typu ogólnego zwrócone <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-578">The type to assign to the type parameter of the returned generic <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span>
          </span>
        </typeparam>
        <summary>
          <span data-ttu-id="e3165-579">Zwraca pustą <see cref="T:System.Collections.Generic.IEnumerable`1" /> zawierający argumentu określonego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-579">Returns an empty <see cref="T:System.Collections.Generic.IEnumerable`1" /> that has the specified type argument.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-580">Pusta <see cref="T:System.Collections.Generic.IEnumerable`1" /> którego argument typu jest <paramref name="TResult" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-580">An empty <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose type argument is <paramref name="TResult" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-581"><xref:System.Linq.Enumerable.Empty%60%601> Metoda buforuje pustą sekwencją typu `TResult`.</span><span class="sxs-lookup"><span data-stu-id="e3165-581">The <xref:System.Linq.Enumerable.Empty%60%601> method caches an empty sequence of type `TResult`.</span></span> <span data-ttu-id="e3165-582">Gdy obiekt, zwracana jest zostanie wyliczonly, daje żadnych elementów.</span><span class="sxs-lookup"><span data-stu-id="e3165-582">When the object it returns is enumerated, it yields no elements.</span></span>  
  
 <span data-ttu-id="e3165-583">W niektórych przypadkach ta metoda jest przydatne w przypadku przekazywania pustą sekwencją do metody zdefiniowanej przez użytkownika zajmuje <xref:System.Collections.Generic.IEnumerable%601>.</span><span class="sxs-lookup"><span data-stu-id="e3165-583">In some cases, this method is useful for passing an empty sequence to a user-defined method that takes an <xref:System.Collections.Generic.IEnumerable%601>.</span></span> <span data-ttu-id="e3165-584">Może również służyć do generowania elementu neutralnej dla metod, takich jak <xref:System.Linq.Enumerable.Union%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-584">It can also be used to generate a neutral element for methods such as <xref:System.Linq.Enumerable.Union%2A>.</span></span> <span data-ttu-id="e3165-585">Przykładem użycia tego w sekcji przykład <xref:System.Linq.Enumerable.Empty%60%601>.</span><span class="sxs-lookup"><span data-stu-id="e3165-585">See the Example section for an example of this use of <xref:System.Linq.Enumerable.Empty%60%601>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-586">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Empty%60%601> do generowania pustego <xref:System.Collections.Generic.IEnumerable%601>.</span><span class="sxs-lookup"><span data-stu-id="e3165-586">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Empty%60%601> to generate an empty <xref:System.Collections.Generic.IEnumerable%601>.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#30](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#30)]
 [!code-vb[System.Linq.Enumerable#30](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#30)]  
  
 <span data-ttu-id="e3165-587">Poniższy przykład kodu demonstruje możliwości stosowania <xref:System.Linq.Enumerable.Empty%60%601> metody.</span><span class="sxs-lookup"><span data-stu-id="e3165-587">The following code example demonstrates a possible application of the <xref:System.Linq.Enumerable.Empty%60%601> method.</span></span> <span data-ttu-id="e3165-588"><xref:System.Linq.Enumerable.Aggregate%2A> Metoda jest stosowana do kolekcji tablic ciągów.</span><span class="sxs-lookup"><span data-stu-id="e3165-588">The <xref:System.Linq.Enumerable.Aggregate%2A> method is applied to a collection of string arrays.</span></span> <span data-ttu-id="e3165-589">Elementy w kolekcji tablic są dodawane do wynikowy <xref:System.Collections.Generic.IEnumerable%601> tylko wtedy, gdy ta tablica zawiera cztery lub więcej elementów.</span><span class="sxs-lookup"><span data-stu-id="e3165-589">The elements of each array in the collection are added to the resulting <xref:System.Collections.Generic.IEnumerable%601> only if that array contains four or more elements.</span></span> <span data-ttu-id="e3165-590"><xref:System.Linq.Enumerable.Empty%2A> Służy do generowania wartości początkowej dla <xref:System.Linq.Enumerable.Aggregate%2A> ponieważ jeśli żadna macierz w kolekcji zawiera co najmniej cztery elementy, zwracany jest tylko pustą sekwencją.</span><span class="sxs-lookup"><span data-stu-id="e3165-590"><xref:System.Linq.Enumerable.Empty%2A> is used to generate the seed value for <xref:System.Linq.Enumerable.Aggregate%2A> because if no array in the collection has four or more elements, only the empty sequence is returned.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#31](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#31)]
 [!code-vb[System.Linq.Enumerable#31](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#31)]  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="Except&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e3165-591">Tworzy różnicy dwóch sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-591">Produces the set difference of two sequences.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Except&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Except&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; first, System.Collections.Generic.IEnumerable&lt;TSource&gt; second);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Except&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; first, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; second) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Except(Of TSource) (first As IEnumerable(Of TSource), second As IEnumerable(Of TSource)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ Except(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ first, System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ second);" />
      <MemberSignature Language="F#" Value="static member Except : seq&lt;'Source&gt; * seq&lt;'Source&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.Except (first, second)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="first" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="second" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-592">Typ elementów sekwencji wejściowych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-592">The type of the elements of the input sequences.</span>
          </span>
        </typeparam>
        <param name="first">
          <span data-ttu-id="e3165-593">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Której elementy, które nie znajdują się również w <c>drugi</c> zostaną zwrócone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-593">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements that are not also in <c>second</c> will be returned.</span>
          </span>
        </param>
        <param name="second">
          <span data-ttu-id="e3165-594">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Którego elementy, które również wystąpić w pierwszej kolejności spowoduje, że te elementy były usuwane z zwracanej sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-594">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements that also occur in the first sequence will cause those elements to be removed from the returned sequence.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-595">Tworzy różnicy dwóch sekwencji za pomocą domyślny moduł porównujący równość do porównywania wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-595">Produces the set difference of two sequences by using the default equality comparer to compare values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-596">Sekwencja, który zawiera zestawu różnic elementy dwóch sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-596">A sequence that contains the set difference of the elements of two sequences.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-597">Ta metoda jest implementowana za pomocą odroczonego wykonania.</span><span class="sxs-lookup"><span data-stu-id="e3165-597">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="e3165-598">Bezpośrednio zwracana wartość jest obiektem, który przechowuje wszystkie informacje wymagane do wykonania akcji.</span><span class="sxs-lookup"><span data-stu-id="e3165-598">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="e3165-599">Zapytanie, reprezentowane przez tę metodę nie jest wykonywana do czasu, przez wywołanie obiekt jest zostanie wyliczonly jego `GetEnumerator` metoda bezpośrednio lub za pomocą `foreach` w języku Visual C# lub `For Each` w języku Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="e3165-599">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="e3165-600">Różnicy dwóch zestawów jest zdefiniowany jako elementy członkowskie pierwszy zestaw, które nie pojawiają się w drugim zbiorze.</span><span class="sxs-lookup"><span data-stu-id="e3165-600">The set difference of two sets is defined as the members of the first set that do not appear in the second set.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e3165-601">Ta metoda zwraca te elementy w `first` , nie występują na liście `second`.</span><span class="sxs-lookup"><span data-stu-id="e3165-601">This method returns those elements in `first` that do not appear in `second`.</span></span> <span data-ttu-id="e3165-602">Nie zwraca również te elementy w `second` , nie występują na liście `first`.</span><span class="sxs-lookup"><span data-stu-id="e3165-602">It does not also return those elements in `second` that do not appear in `first`.</span></span>  
  
 <span data-ttu-id="e3165-603">Domyślny moduł porównujący równość, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, służy do porównywania wartości typów implementujących <xref:System.Collections.Generic.IEqualityComparer%601> interfejs generyczny.</span><span class="sxs-lookup"><span data-stu-id="e3165-603">The default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare values of the types that implement the <xref:System.Collections.Generic.IEqualityComparer%601> generic interface.</span></span> <span data-ttu-id="e3165-604">Aby porównać niestandardowy typ danych, należy zaimplementować niniejszy interfejs i podać własne <xref:System.Object.GetHashCode%2A> i <xref:System.Object.Equals%2A> metod dla typu.</span><span class="sxs-lookup"><span data-stu-id="e3165-604">To compare a custom data type, you need to implement this interface and provide your own <xref:System.Object.GetHashCode%2A> and <xref:System.Object.Equals%2A> methods for the type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-605">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Except%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> metodę, aby porównać dwie sekwencje liczb i zwracają elementy, które są wyświetlane tylko w pierwszej sekwencji.</span><span class="sxs-lookup"><span data-stu-id="e3165-605">The following code example demonstrates how to use the <xref:System.Linq.Enumerable.Except%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> method to compare two sequences of numbers and return elements that appear only in the first sequence.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#34](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#34)]
 [!code-vb[System.Linq.Enumerable#34](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#34)]  
  
 <span data-ttu-id="e3165-606">Jeśli chcesz porównać sekwencji obiektów określonego typu danych niestandardowych, należy zaimplementować <xref:System.Collections.Generic.IEqualityComparer%601> ogólny interfejs w helperclass.</span><span class="sxs-lookup"><span data-stu-id="e3165-606">If you want to compare sequences of objects of some custom data type, you have to implement the <xref:System.Collections.Generic.IEqualityComparer%601> generic interface in a helperclass.</span></span> <span data-ttu-id="e3165-607">Poniższy przykład kodu pokazuje sposób implementacji niniejszego interfejsu do niestandardowego typu danych i zapewniają <xref:System.Object.GetHashCode%2A> i <xref:System.Object.Equals%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="e3165-607">The following code example shows how to implement this interface in a custom data type and provide <xref:System.Object.GetHashCode%2A> and <xref:System.Object.Equals%2A> methods.</span></span>  
  
 [!code-csharp[CSLINQEncapsulatedComparer#9](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/CS/EncapsulatedComparer.cs#9)]  
  
 <span data-ttu-id="e3165-608">Po zaimplementowaniu ten interfejs, można użyć sekwencji `ProductA` obiekty w <xref:System.Linq.Enumerable.Except%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> metodzie, jak pokazano w poniższym przykładzie.</span><span class="sxs-lookup"><span data-stu-id="e3165-608">After you implement this interface, you can use sequences of `ProductA` objects in the <xref:System.Linq.Enumerable.Except%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> method, as shown in the following example.</span></span>  
  
 [!code-csharp[CSLINQEncapsulatedComparer#7](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/CS/EncapsulatedComparer.cs#7)]
 [!code-vb[CSLINQEncapsulatedComparer#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/VB/EncapsulatedComparer.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-609">
            <paramref name="first" /> lub <paramref name="second" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-609">
              <paramref name="first" /> or <paramref name="second" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Except&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Except&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; first, System.Collections.Generic.IEnumerable&lt;TSource&gt; second, System.Collections.Generic.IEqualityComparer&lt;TSource&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Except&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; first, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; second, class System.Collections.Generic.IEqualityComparer`1&lt;!!TSource&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Except``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Except(Of TSource) (first As IEnumerable(Of TSource), second As IEnumerable(Of TSource), comparer As IEqualityComparer(Of TSource)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ Except(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ first, System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ second, System::Collections::Generic::IEqualityComparer&lt;TSource&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member Except : seq&lt;'Source&gt; * seq&lt;'Source&gt; * System.Collections.Generic.IEqualityComparer&lt;'Source&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.Except (first, second, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="first" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="second" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-610">Typ elementów sekwencji wejściowych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-610">The type of the elements of the input sequences.</span>
          </span>
        </typeparam>
        <param name="first">
          <span data-ttu-id="e3165-611">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Której elementy, które nie znajdują się również w <c>drugi</c> zostaną zwrócone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-611">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements that are not also in <c>second</c> will be returned.</span>
          </span>
        </param>
        <param name="second">
          <span data-ttu-id="e3165-612">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Którego elementy, które również wystąpić w pierwszej kolejności spowoduje, że te elementy były usuwane z zwracanej sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-612">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements that also occur in the first sequence will cause those elements to be removed from the returned sequence.</span>
          </span>
        </param>
        <param name="comparer">
          <span data-ttu-id="e3165-613">
            <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> Do porównywania wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-613">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-614">Tworzy różnicy dwóch sekwencji przy użyciu określonego <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> do porównywania wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-614">Produces the set difference of two sequences by using the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-615">Sekwencja, który zawiera zestawu różnic elementy dwóch sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-615">A sequence that contains the set difference of the elements of two sequences.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-616">Jeśli `comparer` jest `null`, domyślny moduł porównujący równość, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, służy do porównywania wartości.</span><span class="sxs-lookup"><span data-stu-id="e3165-616">If `comparer` is `null`, the default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-617">Poniższy przykład pokazuje, jak zaimplementować moduł porównujący równość mogą być używane w <xref:System.Linq.Enumerable.Except%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="e3165-617">The following example shows how to implement an equality comparer that can be used in the <xref:System.Linq.Enumerable.Except%2A> method.</span></span>  
  
 [!code-csharp[CSLINQCustomComparer#1](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQCustomComparer/CS/CustomComparer.cs#1)]
 [!code-vb[CSLINQCustomComparer#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQCustomComparer/VB/CustomComparer.vb#1)]  
  
 <span data-ttu-id="e3165-618">Po zaimplementowaniu tej porównania można użyć sekwencji `Product` obiekty w <xref:System.Linq.Enumerable.Except%2A> metodzie, jak pokazano w poniższym przykładzie.</span><span class="sxs-lookup"><span data-stu-id="e3165-618">After you implement this comparer, you can use sequences of `Product` objects in the <xref:System.Linq.Enumerable.Except%2A> method, as shown in the following example.</span></span>  
  
 [!code-csharp[CSLINQCustomComparer#7](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQCustomComparer/CS/CustomComparer.cs#7)]
 [!code-vb[CSLINQCustomComparer#7](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQCustomComparer/VB/CustomComparer.vb#7)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-619">
            <paramref name="first" /> lub <paramref name="second" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-619">
              <paramref name="first" /> or <paramref name="second" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="First&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e3165-620">Zwraca pierwszy element w sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-620">Returns the first element of a sequence.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="First&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource First&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource First&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function First(Of TSource) (source As IEnumerable(Of TSource)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource First(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member First : seq&lt;'Source&gt; -&gt; 'Source" Usage="System.Linq.Enumerable.First source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-621">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-621">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-622">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Do zwrócenia pierwszego elementu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-622">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return the first element of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-623">Zwraca pierwszy element w sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-623">Returns the first element of a sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-624">Pierwszy element w określonej sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-624">The first element in the specified sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-625"><xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> Metoda zgłasza wyjątek, jeśli `source` nie zawiera żadnych elementów.</span><span class="sxs-lookup"><span data-stu-id="e3165-625">The <xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> method throws an exception if `source` contains no elements.</span></span> <span data-ttu-id="e3165-626">Aby zamiast tego należy przywrócić wartość domyślną, jeśli sekwencja źródłowa jest pusta, należy użyć <xref:System.Linq.Enumerable.FirstOrDefault%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="e3165-626">To instead return a default value when the source sequence is empty, use the <xref:System.Linq.Enumerable.FirstOrDefault%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-627">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> do zwrócenia pierwszego elementu w tablicy.</span><span class="sxs-lookup"><span data-stu-id="e3165-627">The following code example demonstrates how to use <xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to return the first element of an array.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#35](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#35)]
 [!code-vb[System.Linq.Enumerable#35](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#35)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-628">
            <paramref name="source" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-628">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e3165-629">Sekwencja źródłowa jest pusta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-629">The source sequence is empty.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="First&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource First&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource First&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.First``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function First(Of TSource) (source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource First(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member First : seq&lt;'Source&gt; * Func&lt;'Source, bool&gt; -&gt; 'Source" Usage="System.Linq.Enumerable.First (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-630">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-630">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-631">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Do zwrotu elementu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-631">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return an element from.</span>
          </span>
        </param>
        <param name="predicate">
          <span data-ttu-id="e3165-632">Funkcja testowania każdego elementu na stanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-632">A function to test each element for a condition.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-633">Zwraca pierwszy element w sekwencji, który spełnia określony warunek.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-633">Returns the first element in a sequence that satisfies a specified condition.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-634">Pierwszy element w sekwencji, do której przejdzie test w określonej funkcji predykatu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-634">The first element in the sequence that passes the test in the specified predicate function.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-635"><xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> Metoda zgłasza wyjątek, jeśli nie znaleziono w `source`.</span><span class="sxs-lookup"><span data-stu-id="e3165-635">The <xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> method throws an exception if no matching element is found in `source`.</span></span> <span data-ttu-id="e3165-636">Zamiast tego należy zwrócić wartość domyślną, gdy zostanie znaleziony żaden element dopasowania, <xref:System.Linq.Enumerable.FirstOrDefault%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="e3165-636">To instead return a default value when no matching element is found, use the <xref:System.Linq.Enumerable.FirstOrDefault%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-637">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> do zwrócenia pierwszego elementu w tablicy, która spełnia warunek.</span><span class="sxs-lookup"><span data-stu-id="e3165-637">The following code example demonstrates how to use <xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> to return the first element of an array that satisfies a condition.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#36](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#36)]
 [!code-vb[System.Linq.Enumerable#36](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#36)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-638">
            <paramref name="source" /> lub <paramref name="predicate" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-638">
              <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e3165-639">Element nie spełnia warunku w <paramref name="predicate" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-639">No element satisfies the condition in <paramref name="predicate" />.</span>
          </span>
          <span data-ttu-id="e3165-640">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-640">-or-</span>
          </span>
          <span data-ttu-id="e3165-641">Sekwencja źródłowa jest pusta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-641">The source sequence is empty.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="FirstOrDefault&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e3165-642">Zwraca pierwszy element sekwencji lub wartość domyślną, jeśli zostanie znaleziony żaden element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-642">Returns the first element of a sequence, or a default value if no element is found.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="FirstOrDefault&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource FirstOrDefault&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource FirstOrDefault&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FirstOrDefault(Of TSource) (source As IEnumerable(Of TSource)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource FirstOrDefault(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member FirstOrDefault : seq&lt;'Source&gt; -&gt; 'Source" Usage="System.Linq.Enumerable.FirstOrDefault source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-643">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-643">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-644">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Do zwrócenia pierwszego elementu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-644">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return the first element of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-645">Zwraca pierwszy element sekwencji lub wartość domyślną, jeśli sekwencja nie zawiera żadnych elementów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-645">Returns the first element of a sequence, or a default value if the sequence contains no elements.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-646">
            <see langword="default" />(<paramref name="TSource" />) Jeśli <paramref name="source" /> jest pusty; w przeciwnym razie pierwszy element w <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-646">
              <see langword="default" />(<paramref name="TSource" />) if <paramref name="source" /> is empty; otherwise, the first element in <paramref name="source" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-647">Wartością domyślną dla odwołania i typów zerowalnych jest `null`.</span><span class="sxs-lookup"><span data-stu-id="e3165-647">The default value for reference and nullable types is `null`.</span></span>  
  
 <span data-ttu-id="e3165-648"><xref:System.Linq.Enumerable.FirstOrDefault%2A> Metody nie umożliwiają określenie wartości domyślnej.</span><span class="sxs-lookup"><span data-stu-id="e3165-648">The <xref:System.Linq.Enumerable.FirstOrDefault%2A> method does not provide a way to specify a default value.</span></span> <span data-ttu-id="e3165-649">Jeśli chcesz określić inne niż wartości domyślnej `default(TSource)`, użyj <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> metoda zgodnie z opisem w sekcji przykład.</span><span class="sxs-lookup"><span data-stu-id="e3165-649">If you want to specify a default value other than `default(TSource)`, use the <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> method as described in the Example section.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-650">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.FirstOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> na pustą tablicę.</span><span class="sxs-lookup"><span data-stu-id="e3165-650">The following code example demonstrates how to use <xref:System.Linq.Enumerable.FirstOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> on an empty array.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#37](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#37)]
 [!code-vb[System.Linq.Enumerable#37](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#37)]  
  
 <span data-ttu-id="e3165-651">Czasami wartość `default(TSource)` nie jest wartością domyślną, którego chcesz użyć, jeśli kolekcja zawiera żadnych elementów.</span><span class="sxs-lookup"><span data-stu-id="e3165-651">Sometimes the value of `default(TSource)` is not the default value that you want to use if the collection contains no elements.</span></span> <span data-ttu-id="e3165-652">Zamiast sprawdzania wyników dla wartości domyślnej niepożądane, a następnie zmieniając go, jeśli to konieczne, możesz użyć <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> metodę, aby określić wartość domyślną, którą chcesz użyć, jeśli kolekcja jest pusta.</span><span class="sxs-lookup"><span data-stu-id="e3165-652">Instead of checking the result for the unwanted default value and then changing it if necessary, you can use the <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> method to specify the default value that you want to use if the collection is empty.</span></span> <span data-ttu-id="e3165-653">Następnie wywołaj <xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> można uzyskać pierwszego elementu.</span><span class="sxs-lookup"><span data-stu-id="e3165-653">Then, call <xref:System.Linq.Enumerable.First%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to obtain the first element.</span></span> <span data-ttu-id="e3165-654">Poniższy przykład kodu korzysta z obu tych technik uzyskanie domyślną wartość 1, jeśli kolekcja miesięcy liczbowych jest pusta.</span><span class="sxs-lookup"><span data-stu-id="e3165-654">The following code example uses both techniques to obtain a default value of 1 if a collection of numeric months is empty.</span></span> <span data-ttu-id="e3165-655">Całkowitą wartość domyślna to 0, co odpowiada miesiącu, wartość domyślna musi zostać określony jako 1 zamiast tego.</span><span class="sxs-lookup"><span data-stu-id="e3165-655">Because the default value for an integer is 0, which does not correspond to any month, the default value must be specified as 1 instead.</span></span> <span data-ttu-id="e3165-656">Pierwszy zmiennej wynikowej są sprawdzane pod kątem wartość domyślną niepożądane, po zakończeniu zapytania podczas wykonywania.</span><span class="sxs-lookup"><span data-stu-id="e3165-656">The first result variable is checked for the unwanted default value after the query has finished executing.</span></span> <span data-ttu-id="e3165-657">Druga zmienna wyniku uzyskuje się za pomocą <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> można określić wartość domyślną 1.</span><span class="sxs-lookup"><span data-stu-id="e3165-657">The second result variable is obtained by using <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> to specify a default value of 1.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#126](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#126)]
 [!code-vb[System.Linq.Enumerable#126](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#126)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-658">
            <paramref name="source" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-658">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="FirstOrDefault&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource FirstOrDefault&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource FirstOrDefault&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.FirstOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function FirstOrDefault(Of TSource) (source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource FirstOrDefault(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member FirstOrDefault : seq&lt;'Source&gt; * Func&lt;'Source, bool&gt; -&gt; 'Source" Usage="System.Linq.Enumerable.FirstOrDefault (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-659">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-659">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-660">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Do zwrotu elementu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-660">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return an element from.</span>
          </span>
        </param>
        <param name="predicate">
          <span data-ttu-id="e3165-661">Funkcja testowania każdego elementu na stanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-661">A function to test each element for a condition.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-662">Zwraca pierwszy element w sekwencji, która spełnia warunek, lub wartość domyślną, jeśli taki element nie zostanie znaleziony.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-662">Returns the first element of the sequence that satisfies a condition or a default value if no such element is found.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-663">
            <see langword="default" />(<paramref name="TSource" />) Jeśli <paramref name="source" /> są puste lub jeśli element nie przekazuje testu określonego przez <paramref name="predicate" />; w przeciwnym razie pierwszy element w <paramref name="source" /> , który przekazuje testu określonego przez <paramref name="predicate" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-663">
              <see langword="default" />(<paramref name="TSource" />) if <paramref name="source" /> is empty or if no element passes the test specified by <paramref name="predicate" />; otherwise, the first element in <paramref name="source" /> that passes the test specified by <paramref name="predicate" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-664">Wartością domyślną dla odwołania i typów zerowalnych jest `null`.</span><span class="sxs-lookup"><span data-stu-id="e3165-664">The default value for reference and nullable types is `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-665">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.FirstOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> , przekazując w predykacie.</span><span class="sxs-lookup"><span data-stu-id="e3165-665">The following code example demonstrates how to use <xref:System.Linq.Enumerable.FirstOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> by passing in a predicate.</span></span> <span data-ttu-id="e3165-666">W drugim wywołaniu do metody nie ma żadnego elementu w tablicy, który spełnia warunek.</span><span class="sxs-lookup"><span data-stu-id="e3165-666">In the second call to the method, there is no element in the array that satisfies the condition.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#38](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#38)]
 [!code-vb[System.Linq.Enumerable#38](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#38)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-667">
            <paramref name="source" /> lub <paramref name="predicate" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-667">
              <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="GroupBy&lt;TSource,TKey&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e3165-668">Grupuje elementy sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-668">Groups the elements of a sequence.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GroupBy&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;System.Linq.IGrouping&lt;TKey,TSource&gt;&gt; GroupBy&lt;TSource,TKey&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.IGrouping`2&lt;!!TKey, !!TSource&gt;&gt; GroupBy&lt;TSource, TKey&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GroupBy(Of TSource, TKey) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey)) As IEnumerable(Of IGrouping(Of TKey, TSource))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;System::Linq::IGrouping&lt;TKey, TSource&gt; ^&gt; ^ GroupBy(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector);" />
      <MemberSignature Language="F#" Value="static member GroupBy : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; -&gt; seq&lt;System.Linq.IGrouping&lt;'Key, 'Source&gt;&gt;" Usage="System.Linq.Enumerable.GroupBy (source, keySelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Linq.IGrouping&lt;TKey,TSource&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-669">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-669">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <typeparam name="TKey">
          <span data-ttu-id="e3165-670">Rodzaj klucza zwracany przez <c>keySelector</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-670">The type of the key returned by <c>keySelector</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-671">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Której elementy należy pogrupować.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-671">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to group.</span>
          </span>
        </param>
        <param name="keySelector">
          <span data-ttu-id="e3165-672">Funkcja wyodrębniania klucza do każdego elementu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-672">A function to extract the key for each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-673">Grupuje elementy sekwencji zgodnie z funkcją określonego selektora kluczy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-673">Groups the elements of a sequence according to a specified key selector function.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-674">
            <c>IEnumerable&lt;IGrouping&lt;TKey, TSource&gt; &gt;</c> w języku C# lub <c>IEnumerable (Of IGrouping (Of TKey, TSource))</c> w Visual Basic gdzie każdy <see cref="T:System.Linq.IGrouping`2" /> obiektu zawiera sekwencję obiektów, jak i klucz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-674">An <c>IEnumerable&lt;IGrouping&lt;TKey, TSource&gt;&gt;</c> in C# or <c>IEnumerable(Of IGrouping(Of TKey, TSource))</c> in Visual Basic where each <see cref="T:System.Linq.IGrouping`2" /> object contains a sequence of objects and a key.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-675">Ta metoda jest implementowana za pomocą odroczonego wykonania.</span><span class="sxs-lookup"><span data-stu-id="e3165-675">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="e3165-676">Bezpośrednio zwracana wartość jest obiektem, który przechowuje wszystkie informacje wymagane do wykonania akcji.</span><span class="sxs-lookup"><span data-stu-id="e3165-676">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="e3165-677">Zapytanie, reprezentowane przez tę metodę nie jest wykonywana do czasu, przez wywołanie obiekt jest zostanie wyliczonly jego `GetEnumerator` metoda bezpośrednio lub za pomocą `foreach` w języku Visual C# lub `For Each` w języku Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="e3165-677">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e3165-678">Przykłady `GroupBy`, zobacz następujące tematy.</span><span class="sxs-lookup"><span data-stu-id="e3165-678">For examples of `GroupBy`, see the following topics.</span></span>  
>   
>  -   <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29>  
> -   <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%29>  
> -   <xref:System.Linq.Enumerable.GroupBy%60%604%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%29>  
  
 <span data-ttu-id="e3165-679"><xref:System.Linq.Enumerable.GroupBy%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29> Metoda zwraca kolekcję <xref:System.Linq.IGrouping%602> obiektów, po jednym dla każdego klucza distinct, który wystąpił.</span><span class="sxs-lookup"><span data-stu-id="e3165-679">The <xref:System.Linq.Enumerable.GroupBy%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29> method returns a collection of <xref:System.Linq.IGrouping%602> objects, one for each distinct key that was encountered.</span></span> <span data-ttu-id="e3165-680"><xref:System.Linq.IGrouping%602> Jest <xref:System.Collections.Generic.IEnumerable%601> która także ma klucz skojarzony ze swoimi elementami.</span><span class="sxs-lookup"><span data-stu-id="e3165-680">An <xref:System.Linq.IGrouping%602> is an <xref:System.Collections.Generic.IEnumerable%601> that also has a key associated with its elements.</span></span>  
  
 <span data-ttu-id="e3165-681"><xref:System.Linq.IGrouping%602> Obiekty są uzyskane na podstawie kolejności elementów w `source` który wytworzył pierwszy klucz <xref:System.Linq.IGrouping%602>.</span><span class="sxs-lookup"><span data-stu-id="e3165-681">The <xref:System.Linq.IGrouping%602> objects are yielded in an order based on the order of the elements in `source` that produced the first key of each <xref:System.Linq.IGrouping%602>.</span></span> <span data-ttu-id="e3165-682">Elementy w metodzie grupowania są uzyskane w kolejności, pojawiają się na `source`.</span><span class="sxs-lookup"><span data-stu-id="e3165-682">Elements in a grouping are yielded in the order they appear in `source`.</span></span>  
  
 <span data-ttu-id="e3165-683">Domyślny moduł porównujący równość <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> służy do porównywania kluczy.</span><span class="sxs-lookup"><span data-stu-id="e3165-683">The default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> is used to compare keys.</span></span>  
  
 <span data-ttu-id="e3165-684">W składni wyrażeń zapytania `group by` (Visual C#) lub `Group By Into` — klauzula (Visual Basic) przekłada się na wywołanie <xref:System.Linq.Enumerable.GroupBy%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-684">In query expression syntax, a `group by` (Visual C#) or `Group By Into` (Visual Basic) clause translates to an invocation of <xref:System.Linq.Enumerable.GroupBy%2A>.</span></span> <span data-ttu-id="e3165-685">Aby uzyskać więcej informacji i przykłady użycia, zobacz [group — klauzula](~/docs/csharp/language-reference/keywords/group-clause.md) i [grupy przez klauzulę](~/docs/visual-basic/language-reference/queries/group-by-clause.md).</span><span class="sxs-lookup"><span data-stu-id="e3165-685">For more information and usage examples, see [group clause](~/docs/csharp/language-reference/keywords/group-clause.md) and [Group By Clause](~/docs/visual-basic/language-reference/queries/group-by-clause.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-686">
            <paramref name="source" /> lub <paramref name="keySelector" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-686">
              <paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/c817242e-b12c-4baa-a57e-73ee138f34d1">
          <span data-ttu-id="e3165-687">group — Klauzula (odwołanie w C#)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-687">group clause (C# Reference)</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/b1b5dcea-6654-473b-a2db-01f7e4c265d7">
          <span data-ttu-id="e3165-688">Group By — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-688">Group By Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="GroupBy&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;System.Linq.IGrouping&lt;TKey,TSource&gt;&gt; GroupBy&lt;TSource,TKey&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.IGrouping`2&lt;!!TKey, !!TSource&gt;&gt; GroupBy&lt;TSource, TKey&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.GroupBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GroupBy(Of TSource, TKey) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), comparer As IEqualityComparer(Of TKey)) As IEnumerable(Of IGrouping(Of TKey, TSource))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;System::Linq::IGrouping&lt;TKey, TSource&gt; ^&gt; ^ GroupBy(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member GroupBy : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; seq&lt;System.Linq.IGrouping&lt;'Key, 'Source&gt;&gt;" Usage="System.Linq.Enumerable.GroupBy (source, keySelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Linq.IGrouping&lt;TKey,TSource&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-689">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-689">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <typeparam name="TKey">
          <span data-ttu-id="e3165-690">Rodzaj klucza zwracany przez <c>keySelector</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-690">The type of the key returned by <c>keySelector</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-691">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Której elementy należy pogrupować.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-691">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to group.</span>
          </span>
        </param>
        <param name="keySelector">
          <span data-ttu-id="e3165-692">Funkcja wyodrębniania klucza do każdego elementu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-692">A function to extract the key for each element.</span>
          </span>
        </param>
        <param name="comparer">
          <span data-ttu-id="e3165-693">
            <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> Do porównywania kluczy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-693">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-694">Grupuje elementy sekwencji zgodnie z funkcją określonego selektora kluczy i porównuje klucze za pomocą określona funkcja porównująca.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-694">Groups the elements of a sequence according to a specified key selector function and compares the keys by using a specified comparer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-695">
            <c>IEnumerable&lt;IGrouping&lt;TKey, TSource&gt; &gt;</c> w języku C# lub <c>IEnumerable (Of IGrouping (Of TKey, TSource))</c> w Visual Basic gdzie każdy <see cref="T:System.Linq.IGrouping`2" /> obiekt zawiera zbiór obiektów, jak i klucz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-695">An <c>IEnumerable&lt;IGrouping&lt;TKey, TSource&gt;&gt;</c> in C# or <c>IEnumerable(Of IGrouping(Of TKey, TSource))</c> in Visual Basic where each <see cref="T:System.Linq.IGrouping`2" /> object contains a collection of objects and a key.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-696">Ta metoda jest implementowana za pomocą odroczonego wykonania.</span><span class="sxs-lookup"><span data-stu-id="e3165-696">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="e3165-697">Bezpośrednio zwracana wartość jest obiektem, który przechowuje wszystkie informacje wymagane do wykonania akcji.</span><span class="sxs-lookup"><span data-stu-id="e3165-697">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="e3165-698">Zapytanie, reprezentowane przez tę metodę nie jest wykonywana do czasu, przez wywołanie obiekt jest zostanie wyliczonly jego `GetEnumerator` metoda bezpośrednio lub za pomocą `foreach` w języku Visual C# lub `For Each` w języku Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="e3165-698">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e3165-699">Przykłady `GroupBy`, zobacz następujące tematy.</span><span class="sxs-lookup"><span data-stu-id="e3165-699">For examples of `GroupBy`, see the following topics.</span></span>  
>   
>  -   <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29>  
> -   <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%29>  
> -   <xref:System.Linq.Enumerable.GroupBy%60%604%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%29>  
  
 <span data-ttu-id="e3165-700"><xref:System.Linq.Enumerable.GroupBy%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> Metoda zwraca kolekcję <xref:System.Linq.IGrouping%602> obiektów, po jednym dla każdego klucza distinct, który wystąpił.</span><span class="sxs-lookup"><span data-stu-id="e3165-700">The <xref:System.Linq.Enumerable.GroupBy%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> method returns a collection of <xref:System.Linq.IGrouping%602> objects, one for each distinct key that was encountered.</span></span> <span data-ttu-id="e3165-701"><xref:System.Linq.IGrouping%602> Jest <xref:System.Collections.Generic.IEnumerable%601> która także ma klucz skojarzony ze swoimi elementami.</span><span class="sxs-lookup"><span data-stu-id="e3165-701">An <xref:System.Linq.IGrouping%602> is an <xref:System.Collections.Generic.IEnumerable%601> that also has a key associated with its elements.</span></span>  
  
 <span data-ttu-id="e3165-702"><xref:System.Linq.IGrouping%602> Obiekty są uzyskane na podstawie kolejności elementów w `source` który wytworzył pierwszy klucz <xref:System.Linq.IGrouping%602>.</span><span class="sxs-lookup"><span data-stu-id="e3165-702">The <xref:System.Linq.IGrouping%602> objects are yielded in an order based on the order of the elements in `source` that produced the first key of each <xref:System.Linq.IGrouping%602>.</span></span> <span data-ttu-id="e3165-703">Elementy w metodzie grupowania są uzyskane w kolejności, pojawiają się na `source`.</span><span class="sxs-lookup"><span data-stu-id="e3165-703">Elements in a grouping are yielded in the order they appear in `source`.</span></span>  
  
 <span data-ttu-id="e3165-704">Jeśli `comparer` jest `null`, domyślny moduł porównujący równość <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> służy do porównywania kluczy.</span><span class="sxs-lookup"><span data-stu-id="e3165-704">If `comparer` is `null`, the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> is used to compare keys.</span></span>  
  
 <span data-ttu-id="e3165-705">Jeśli dwa klucze są traktowane jako równe zgodnie z opisem w `comparer`, pierwszy klucz został wybrany jako klucz dla tej grupy.</span><span class="sxs-lookup"><span data-stu-id="e3165-705">If two keys are considered equal according to `comparer`, the first key is chosen as the key for that grouping.</span></span>  
  
 <span data-ttu-id="e3165-706">W składni wyrażeń zapytania `group by` (Visual C#) lub `Group By Into` — klauzula (Visual Basic) przekłada się na wywołanie <xref:System.Linq.Enumerable.GroupBy%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-706">In query expression syntax, a `group by` (Visual C#) or `Group By Into` (Visual Basic) clause translates to an invocation of <xref:System.Linq.Enumerable.GroupBy%2A>.</span></span> <span data-ttu-id="e3165-707">Aby uzyskać więcej informacji i przykłady użycia, zobacz [group — klauzula](~/docs/csharp/language-reference/keywords/group-clause.md) i [grupy przez klauzulę](~/docs/visual-basic/language-reference/queries/group-by-clause.md).</span><span class="sxs-lookup"><span data-stu-id="e3165-707">For more information and usage examples, see [group clause](~/docs/csharp/language-reference/keywords/group-clause.md) and [Group By Clause](~/docs/visual-basic/language-reference/queries/group-by-clause.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-708">
            <paramref name="source" /> lub <paramref name="keySelector" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-708">
              <paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/c817242e-b12c-4baa-a57e-73ee138f34d1">
          <span data-ttu-id="e3165-709">group — Klauzula (odwołanie w C#)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-709">group clause (C# Reference)</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/b1b5dcea-6654-473b-a2db-01f7e4c265d7">
          <span data-ttu-id="e3165-710">Group By — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-710">Group By Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="GroupBy&lt;TSource,TKey,TElement&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;System.Linq.IGrouping&lt;TKey,TElement&gt;&gt; GroupBy&lt;TSource,TKey,TElement&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TSource,TElement&gt; elementSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.IGrouping`2&lt;!!TKey, !!TElement&gt;&gt; GroupBy&lt;TSource, TKey, TElement&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Func`2&lt;!!TSource, !!TElement&gt; elementSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GroupBy(Of TSource, TKey, TElement) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement)) As IEnumerable(Of IGrouping(Of TKey, TElement))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey, typename TElement&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;System::Linq::IGrouping&lt;TKey, TElement&gt; ^&gt; ^ GroupBy(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, Func&lt;TSource, TElement&gt; ^ elementSelector);" />
      <MemberSignature Language="F#" Value="static member GroupBy : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * Func&lt;'Source, 'Element&gt; -&gt; seq&lt;System.Linq.IGrouping&lt;'Key, 'Element&gt;&gt;" Usage="System.Linq.Enumerable.GroupBy (source, keySelector, elementSelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Linq.IGrouping&lt;TKey,TElement&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TElement" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="elementSelector" Type="System.Func&lt;TSource,TElement&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-711">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-711">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <typeparam name="TKey">
          <span data-ttu-id="e3165-712">Rodzaj klucza zwracany przez <c>keySelector</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-712">The type of the key returned by <c>keySelector</c>.</span>
          </span>
        </typeparam>
        <typeparam name="TElement">
          <span data-ttu-id="e3165-713">Typ elementów w <see cref="T:System.Linq.IGrouping`2" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-713">The type of the elements in the <see cref="T:System.Linq.IGrouping`2" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-714">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Której elementy należy pogrupować.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-714">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to group.</span>
          </span>
        </param>
        <param name="keySelector">
          <span data-ttu-id="e3165-715">Funkcja wyodrębniania klucza do każdego elementu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-715">A function to extract the key for each element.</span>
          </span>
        </param>
        <param name="elementSelector">
          <span data-ttu-id="e3165-716">Funkcja mapy każdego elementu źródłowego do elementu w <see cref="T:System.Linq.IGrouping`2" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-716">A function to map each source element to an element in the <see cref="T:System.Linq.IGrouping`2" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-717">Grupuje elementy sekwencji zgodnie z projektów elementów dla każdej grupy przy użyciu określonej funkcji i funkcji określonej selektora kluczy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-717">Groups the elements of a sequence according to a specified key selector function and projects the elements for each group by using a specified function.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-718">
            <c>IEnumerable&lt;IGrouping&lt;TKey, TElement&gt; &gt;</c> w języku C# lub <c>IEnumerable (Of IGrouping (Of TKey, TElement))</c> w Visual Basic gdzie każdy <see cref="T:System.Linq.IGrouping`2" /> obiekt zawiera zbiór obiektów typu <paramref name="TElement" /> i klucz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-718">An <c>IEnumerable&lt;IGrouping&lt;TKey, TElement&gt;&gt;</c> in C# or <c>IEnumerable(Of IGrouping(Of TKey, TElement))</c> in Visual Basic where each <see cref="T:System.Linq.IGrouping`2" /> object contains a collection of objects of type <paramref name="TElement" /> and a key.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-719">Ta metoda jest implementowana za pomocą odroczonego wykonania.</span><span class="sxs-lookup"><span data-stu-id="e3165-719">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="e3165-720">Bezpośrednio zwracana wartość jest obiektem, który przechowuje wszystkie informacje wymagane do wykonania akcji.</span><span class="sxs-lookup"><span data-stu-id="e3165-720">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="e3165-721">Zapytanie, reprezentowane przez tę metodę nie jest wykonywana do czasu, przez wywołanie obiekt jest zostanie wyliczonly jego `GetEnumerator` metoda bezpośrednio lub za pomocą `foreach` w języku Visual C# lub `For Each` w języku Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="e3165-721">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="e3165-722"><xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29> Metoda zwraca kolekcję <xref:System.Linq.IGrouping%602> obiektów, po jednym dla każdego klucza distinct, który wystąpił.</span><span class="sxs-lookup"><span data-stu-id="e3165-722">The <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29> method returns a collection of <xref:System.Linq.IGrouping%602> objects, one for each distinct key that was encountered.</span></span> <span data-ttu-id="e3165-723"><xref:System.Linq.IGrouping%602> Jest <xref:System.Collections.Generic.IEnumerable%601> która także ma klucz skojarzony ze swoimi elementami.</span><span class="sxs-lookup"><span data-stu-id="e3165-723">An <xref:System.Linq.IGrouping%602> is an <xref:System.Collections.Generic.IEnumerable%601> that also has a key associated with its elements.</span></span>  
  
 <span data-ttu-id="e3165-724"><xref:System.Linq.IGrouping%602> Obiekty są uzyskane na podstawie kolejności elementów w `source` który wytworzył pierwszy klucz <xref:System.Linq.IGrouping%602>.</span><span class="sxs-lookup"><span data-stu-id="e3165-724">The <xref:System.Linq.IGrouping%602> objects are yielded in an order based on the order of the elements in `source` that produced the first key of each <xref:System.Linq.IGrouping%602>.</span></span> <span data-ttu-id="e3165-725">Elementy w metodzie grupowania są uzyskane w kolejności elementów, które je wygenerowały są wyświetlane w `source`.</span><span class="sxs-lookup"><span data-stu-id="e3165-725">Elements in a grouping are yielded in the order that the elements that produced them appear in `source`.</span></span>  
  
 <span data-ttu-id="e3165-726">Domyślny moduł porównujący równość <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> służy do porównywania kluczy.</span><span class="sxs-lookup"><span data-stu-id="e3165-726">The default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> is used to compare keys.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-727">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29> do grupowania elementów w sekwencji.</span><span class="sxs-lookup"><span data-stu-id="e3165-727">The following code example demonstrates how to use <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29> to group the elements of a sequence.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#39](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#39)]
 [!code-vb[System.Linq.Enumerable#39](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#39)]  
  
 <span data-ttu-id="e3165-728">W składni wyrażeń zapytania `group by` (Visual C#) lub `Group By Into` — klauzula (Visual Basic) przekłada się na wywołanie <xref:System.Linq.Enumerable.GroupBy%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-728">In query expression syntax, a `group by` (Visual C#) or `Group By Into` (Visual Basic) clause translates to an invocation of <xref:System.Linq.Enumerable.GroupBy%2A>.</span></span> <span data-ttu-id="e3165-729">Tłumaczenie wyrażenia zapytania w poniższym przykładzie jest odpowiednikiem zapytania w powyższym przykładzie.</span><span class="sxs-lookup"><span data-stu-id="e3165-729">The translation of the query expression in the following example is equivalent to the query in the example above.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#122](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#122)]
 [!code-vb[System.Linq.Enumerable#122](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#122)]  
  
> [!NOTE]
>  <span data-ttu-id="e3165-730">W wyrażeniu zapytania języka Visual C# lub Visual Basic wyrażeń wyboru elementów i klucz występują w odwrotnej kolejności niż kolejność od ich pozycji argumentów w wywołaniu <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29> metody.</span><span class="sxs-lookup"><span data-stu-id="e3165-730">In a Visual C# or Visual Basic query expression, the element and key selection expressions occur in the reverse order from their argument positions in a call to the <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29> method.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-731">
            <paramref name="source" /> lub <paramref name="keySelector" /> lub <paramref name="elementSelector" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-731">
              <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/c817242e-b12c-4baa-a57e-73ee138f34d1">
          <span data-ttu-id="e3165-732">group — Klauzula (odwołanie w C#)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-732">group clause (C# Reference)</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/b1b5dcea-6654-473b-a2db-01f7e4c265d7">
          <span data-ttu-id="e3165-733">Group By — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-733">Group By Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="GroupBy&lt;TSource,TKey,TElement&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;System.Linq.IGrouping&lt;TKey,TElement&gt;&gt; GroupBy&lt;TSource,TKey,TElement&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TSource,TElement&gt; elementSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;class System.Linq.IGrouping`2&lt;!!TKey, !!TElement&gt;&gt; GroupBy&lt;TSource, TKey, TElement&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Func`2&lt;!!TSource, !!TElement&gt; elementSelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GroupBy(Of TSource, TKey, TElement) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement), comparer As IEqualityComparer(Of TKey)) As IEnumerable(Of IGrouping(Of TKey, TElement))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey, typename TElement&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;System::Linq::IGrouping&lt;TKey, TElement&gt; ^&gt; ^ GroupBy(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, Func&lt;TSource, TElement&gt; ^ elementSelector, System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member GroupBy : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * Func&lt;'Source, 'Element&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; seq&lt;System.Linq.IGrouping&lt;'Key, 'Element&gt;&gt;" Usage="System.Linq.Enumerable.GroupBy (source, keySelector, elementSelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Linq.IGrouping&lt;TKey,TElement&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TElement" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="elementSelector" Type="System.Func&lt;TSource,TElement&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-734">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-734">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <typeparam name="TKey">
          <span data-ttu-id="e3165-735">Rodzaj klucza zwracany przez <c>keySelector</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-735">The type of the key returned by <c>keySelector</c>.</span>
          </span>
        </typeparam>
        <typeparam name="TElement">
          <span data-ttu-id="e3165-736">Typ elementów w <see cref="T:System.Linq.IGrouping`2" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-736">The type of the elements in the <see cref="T:System.Linq.IGrouping`2" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-737">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Której elementy należy pogrupować.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-737">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to group.</span>
          </span>
        </param>
        <param name="keySelector">
          <span data-ttu-id="e3165-738">Funkcja wyodrębniania klucza do każdego elementu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-738">A function to extract the key for each element.</span>
          </span>
        </param>
        <param name="elementSelector">
          <span data-ttu-id="e3165-739">Funkcja mapy każdego elementu źródłowego do elementu w <see cref="T:System.Linq.IGrouping`2" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-739">A function to map each source element to an element in an <see cref="T:System.Linq.IGrouping`2" />.</span>
          </span>
        </param>
        <param name="comparer">
          <span data-ttu-id="e3165-740">
            <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> Do porównywania kluczy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-740">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-741">Grupuje elementy sekwencji zgodnie z funkcją selektora kluczy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-741">Groups the elements of a sequence according to a key selector function.</span>
          </span>
          <span data-ttu-id="e3165-742">Klucze są porównywane za pomocą modułu porównującego i elementów każdej grupy są pokazane przy użyciu określonej funkcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-742">The keys are compared by using a comparer and each group's elements are projected by using a specified function.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-743">
            <c>IEnumerable&lt;IGrouping&lt;TKey, TElement&gt; &gt;</c> w języku C# lub <c>IEnumerable (Of IGrouping (Of TKey, TElement))</c> w Visual Basic gdzie każdy <see cref="T:System.Linq.IGrouping`2" /> obiekt zawiera zbiór obiektów typu <paramref name="TElement" /> i klucz.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-743">An <c>IEnumerable&lt;IGrouping&lt;TKey, TElement&gt;&gt;</c> in C# or <c>IEnumerable(Of IGrouping(Of TKey, TElement))</c> in Visual Basic where each <see cref="T:System.Linq.IGrouping`2" /> object contains a collection of objects of type <paramref name="TElement" /> and a key.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-744">Ta metoda jest implementowana za pomocą odroczonego wykonania.</span><span class="sxs-lookup"><span data-stu-id="e3165-744">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="e3165-745">Bezpośrednio zwracana wartość jest obiektem, który przechowuje wszystkie informacje wymagane do wykonania akcji.</span><span class="sxs-lookup"><span data-stu-id="e3165-745">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="e3165-746">Zapytanie, reprezentowane przez tę metodę nie jest wykonywana do czasu, przez wywołanie obiekt jest zostanie wyliczonly jego `GetEnumerator` metoda bezpośrednio lub za pomocą `foreach` w języku Visual C# lub `For Each` w języku Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="e3165-746">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e3165-747">Przykłady `GroupBy`, zobacz następujące tematy.</span><span class="sxs-lookup"><span data-stu-id="e3165-747">For examples of `GroupBy`, see the following topics.</span></span>  
>   
>  -   <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29>  
> -   <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%29>  
> -   <xref:System.Linq.Enumerable.GroupBy%60%604%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%29>  
  
 <span data-ttu-id="e3165-748"><xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> Metoda zwraca kolekcję <xref:System.Linq.IGrouping%602> obiektów, po jednym dla każdego klucza distinct, który wystąpił.</span><span class="sxs-lookup"><span data-stu-id="e3165-748">The <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> method returns a collection of <xref:System.Linq.IGrouping%602> objects, one for each distinct key that was encountered.</span></span> <span data-ttu-id="e3165-749"><xref:System.Linq.IGrouping%602> Jest <xref:System.Collections.Generic.IEnumerable%601> która także ma klucz skojarzony ze swoimi elementami.</span><span class="sxs-lookup"><span data-stu-id="e3165-749">An <xref:System.Linq.IGrouping%602> is an <xref:System.Collections.Generic.IEnumerable%601> that also has a key associated with its elements.</span></span>  
  
 <span data-ttu-id="e3165-750"><xref:System.Linq.IGrouping%602> Obiekty są uzyskane na podstawie kolejności elementów w `source` który wytworzył pierwszy klucz <xref:System.Linq.IGrouping%602>.</span><span class="sxs-lookup"><span data-stu-id="e3165-750">The <xref:System.Linq.IGrouping%602> objects are yielded in an order based on the order of the elements in `source` that produced the first key of each <xref:System.Linq.IGrouping%602>.</span></span> <span data-ttu-id="e3165-751">Elementy w metodzie grupowania są uzyskane w kolejności elementów, które je wygenerowały są wyświetlane w `source`.</span><span class="sxs-lookup"><span data-stu-id="e3165-751">Elements in a grouping are yielded in the order that the elements that produced them appear in `source`.</span></span>  
  
 <span data-ttu-id="e3165-752">Jeśli `comparer` jest `null`, domyślny moduł porównujący równość <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> służy do porównywania kluczy.</span><span class="sxs-lookup"><span data-stu-id="e3165-752">If `comparer` is `null`, the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> is used to compare keys.</span></span>  
  
 <span data-ttu-id="e3165-753">Jeśli dwa klucze są traktowane jako równe zgodnie z opisem w `comparer`, pierwszy klucz został wybrany jako klucz dla tej grupy.</span><span class="sxs-lookup"><span data-stu-id="e3165-753">If two keys are considered equal according to `comparer`, the first key is chosen as the key for that grouping.</span></span>  
  
 <span data-ttu-id="e3165-754">W składni wyrażeń zapytania `group by` (Visual C#) lub `Group By Into` — klauzula (Visual Basic) przekłada się na wywołanie <xref:System.Linq.Enumerable.GroupBy%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-754">In query expression syntax, a `group by` (Visual C#) or `Group By Into` (Visual Basic) clause translates to an invocation of <xref:System.Linq.Enumerable.GroupBy%2A>.</span></span> <span data-ttu-id="e3165-755">Aby uzyskać więcej informacji i przykłady użycia, zobacz [group — klauzula](~/docs/csharp/language-reference/keywords/group-clause.md) i [grupy przez klauzulę](~/docs/visual-basic/language-reference/queries/group-by-clause.md).</span><span class="sxs-lookup"><span data-stu-id="e3165-755">For more information and usage examples, see [group clause](~/docs/csharp/language-reference/keywords/group-clause.md) and [Group By Clause](~/docs/visual-basic/language-reference/queries/group-by-clause.md).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-756">
            <paramref name="source" /> lub <paramref name="keySelector" /> lub <paramref name="elementSelector" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-756">
              <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/c817242e-b12c-4baa-a57e-73ee138f34d1">
          <span data-ttu-id="e3165-757">group — Klauzula (odwołanie w C#)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-757">group clause (C# Reference)</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/b1b5dcea-6654-473b-a2db-01f7e4c265d7">
          <span data-ttu-id="e3165-758">Group By — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-758">Group By Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="GroupBy&lt;TSource,TKey,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; GroupBy&lt;TSource,TKey,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TSource&gt;,TResult&gt; resultSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; GroupBy&lt;TSource, TKey, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Func`3&lt;!!TKey, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt;, !!TResult&gt; resultSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GroupBy(Of TSource, TKey, TResult) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), resultSelector As Func(Of TKey, IEnumerable(Of TSource), TResult)) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ GroupBy(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, Func&lt;TKey, System::Collections::Generic::IEnumerable&lt;TSource&gt; ^, TResult&gt; ^ resultSelector);" />
      <MemberSignature Language="F#" Value="static member GroupBy : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * Func&lt;'Key, seq&lt;'Source&gt;, 'Result&gt; -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.GroupBy (source, keySelector, resultSelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="resultSelector" Type="System.Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TSource&gt;,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-759">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-759">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <typeparam name="TKey">
          <span data-ttu-id="e3165-760">Rodzaj klucza zwracany przez <c>keySelector</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-760">The type of the key returned by <c>keySelector</c>.</span>
          </span>
        </typeparam>
        <typeparam name="TResult">
          <span data-ttu-id="e3165-761">Typ wartości wyników zwróconych przez <c>resultSelector</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-761">The type of the result value returned by <c>resultSelector</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-762">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Której elementy należy pogrupować.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-762">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to group.</span>
          </span>
        </param>
        <param name="keySelector">
          <span data-ttu-id="e3165-763">Funkcja wyodrębniania klucza do każdego elementu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-763">A function to extract the key for each element.</span>
          </span>
        </param>
        <param name="resultSelector">
          <span data-ttu-id="e3165-764">Funkcja tworzenia wartości wyniku z każdej grupy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-764">A function to create a result value from each group.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-765">Grupuje elementy sekwencji zgodnie z określoną kluczową funkcją wyboru i tworzy wartość wyniku z każdej grupy i klucza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-765">Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-766">Kolekcja elementów typu <paramref name="TResult" /> gdzie każdy element przedstawia projekcję nad grupą i jego kluczem.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-766">A collection of elements of type <paramref name="TResult" /> where each element represents a projection over a group and its key.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-767">W składni wyrażeń zapytania `group by` (Visual C#) lub `Group By Into` — klauzula (Visual Basic) przekłada się na wywołanie <xref:System.Linq.Enumerable.GroupBy%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-767">In query expression syntax, a `group by` (Visual C#) or `Group By Into` (Visual Basic) clause translates to an invocation of <xref:System.Linq.Enumerable.GroupBy%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-768">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%29> Grupuj elementy sekwencji do projektu kolejności wyników typu `TResult`.</span><span class="sxs-lookup"><span data-stu-id="e3165-768">The following code example demonstrates how to use <xref:System.Linq.Enumerable.GroupBy%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%602%7D%29> to group the elements of a sequence and project a sequence of results of type `TResult`.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#15](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#15)]
 [!code-vb[System.Linq.Enumerable#15](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#15)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/c817242e-b12c-4baa-a57e-73ee138f34d1">
          <span data-ttu-id="e3165-769">group — Klauzula (odwołanie w C#)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-769">group clause (C# Reference)</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/b1b5dcea-6654-473b-a2db-01f7e4c265d7">
          <span data-ttu-id="e3165-770">Group By — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-770">Group By Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="GroupBy&lt;TSource,TKey,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; GroupBy&lt;TSource,TKey,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TSource&gt;,TResult&gt; resultSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; GroupBy&lt;TSource, TKey, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Func`3&lt;!!TKey, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt;, !!TResult&gt; resultSelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.GroupBy``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``1,System.Collections.Generic.IEnumerable{``0},``2},System.Collections.Generic.IEqualityComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GroupBy(Of TSource, TKey, TResult) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), resultSelector As Func(Of TKey, IEnumerable(Of TSource), TResult), comparer As IEqualityComparer(Of TKey)) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ GroupBy(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, Func&lt;TKey, System::Collections::Generic::IEnumerable&lt;TSource&gt; ^, TResult&gt; ^ resultSelector, System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member GroupBy : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * Func&lt;'Key, seq&lt;'Source&gt;, 'Result&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.GroupBy (source, keySelector, resultSelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="resultSelector" Type="System.Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TSource&gt;,TResult&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-771">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-771">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <typeparam name="TKey">
          <span data-ttu-id="e3165-772">Rodzaj klucza zwracany przez <c>keySelector</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-772">The type of the key returned by <c>keySelector</c>.</span>
          </span>
        </typeparam>
        <typeparam name="TResult">
          <span data-ttu-id="e3165-773">Typ wartości wyników zwróconych przez <c>resultSelector</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-773">The type of the result value returned by <c>resultSelector</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-774">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Której elementy należy pogrupować.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-774">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to group.</span>
          </span>
        </param>
        <param name="keySelector">
          <span data-ttu-id="e3165-775">Funkcja wyodrębniania klucza do każdego elementu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-775">A function to extract the key for each element.</span>
          </span>
        </param>
        <param name="resultSelector">
          <span data-ttu-id="e3165-776">Funkcja tworzenia wartości wyniku z każdej grupy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-776">A function to create a result value from each group.</span>
          </span>
        </param>
        <param name="comparer">
          <span data-ttu-id="e3165-777">
            <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> Do porównywania kluczy przy użyciu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-777">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys with.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-778">Grupuje elementy sekwencji zgodnie z określoną kluczową funkcją wyboru i tworzy wartość wyniku z każdej grupy i klucza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-778">Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.</span>
          </span>
          <span data-ttu-id="e3165-779">Klucze są porównywane za pomocą określona funkcja porównująca.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-779">The keys are compared by using a specified comparer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-780">Kolekcja elementów typu <paramref name="TResult" /> gdzie każdy element przedstawia projekcję nad grupą i jego kluczem.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-780">A collection of elements of type <paramref name="TResult" /> where each element represents a projection over a group and its key.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/c817242e-b12c-4baa-a57e-73ee138f34d1">
          <span data-ttu-id="e3165-781">group — Klauzula (odwołanie w C#)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-781">group clause (C# Reference)</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/b1b5dcea-6654-473b-a2db-01f7e4c265d7">
          <span data-ttu-id="e3165-782">Group By — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-782">Group By Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="GroupBy&lt;TSource,TKey,TElement,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; GroupBy&lt;TSource,TKey,TElement,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TSource,TElement&gt; elementSelector, Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TElement&gt;,TResult&gt; resultSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; GroupBy&lt;TSource, TKey, TElement, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Func`2&lt;!!TSource, !!TElement&gt; elementSelector, class System.Func`3&lt;!!TKey, class System.Collections.Generic.IEnumerable`1&lt;!!TElement&gt;, !!TResult&gt; resultSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GroupBy(Of TSource, TKey, TElement, TResult) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement), resultSelector As Func(Of TKey, IEnumerable(Of TElement), TResult)) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey, typename TElement, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ GroupBy(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, Func&lt;TSource, TElement&gt; ^ elementSelector, Func&lt;TKey, System::Collections::Generic::IEnumerable&lt;TElement&gt; ^, TResult&gt; ^ resultSelector);" />
      <MemberSignature Language="F#" Value="static member GroupBy : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * Func&lt;'Source, 'Element&gt; * Func&lt;'Key, seq&lt;'Element&gt;, 'Result&gt; -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.GroupBy (source, keySelector, elementSelector, resultSelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TElement" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="elementSelector" Type="System.Func&lt;TSource,TElement&gt;" />
        <Parameter Name="resultSelector" Type="System.Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TElement&gt;,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-783">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-783">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <typeparam name="TKey">
          <span data-ttu-id="e3165-784">Rodzaj klucza zwracany przez <c>keySelector</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-784">The type of the key returned by <c>keySelector</c>.</span>
          </span>
        </typeparam>
        <typeparam name="TElement">
          <span data-ttu-id="e3165-785">Typ elementów w każdej <see cref="T:System.Linq.IGrouping`2" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-785">The type of the elements in each <see cref="T:System.Linq.IGrouping`2" />.</span>
          </span>
        </typeparam>
        <typeparam name="TResult">
          <span data-ttu-id="e3165-786">Typ wartości wyników zwróconych przez <c>resultSelector</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-786">The type of the result value returned by <c>resultSelector</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-787">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Której elementy należy pogrupować.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-787">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to group.</span>
          </span>
        </param>
        <param name="keySelector">
          <span data-ttu-id="e3165-788">Funkcja wyodrębniania klucza do każdego elementu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-788">A function to extract the key for each element.</span>
          </span>
        </param>
        <param name="elementSelector">
          <span data-ttu-id="e3165-789">Funkcja mapy każdego elementu źródłowego do elementu w <see cref="T:System.Linq.IGrouping`2" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-789">A function to map each source element to an element in an <see cref="T:System.Linq.IGrouping`2" />.</span>
          </span>
        </param>
        <param name="resultSelector">
          <span data-ttu-id="e3165-790">Funkcja tworzenia wartości wyniku z każdej grupy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-790">A function to create a result value from each group.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-791">Grupuje elementy sekwencji zgodnie z określoną kluczową funkcją wyboru i tworzy wartość wyniku z każdej grupy i klucza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-791">Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.</span>
          </span>
          <span data-ttu-id="e3165-792">Elementów każdej grupy są pokazane przy użyciu określonej funkcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-792">The elements of each group are projected by using a specified function.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-793">Kolekcja elementów typu <paramref name="TResult" /> gdzie każdy element przedstawia projekcję nad grupą i jego kluczem.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-793">A collection of elements of type <paramref name="TResult" /> where each element represents a projection over a group and its key.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-794">W składni wyrażeń zapytania `group by` (Visual C#) lub `Group By Into` — klauzula (Visual Basic) przekłada się na wywołanie <xref:System.Linq.Enumerable.GroupBy%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-794">In query expression syntax, a `group by` (Visual C#) or `Group By Into` (Visual Basic) clause translates to an invocation of <xref:System.Linq.Enumerable.GroupBy%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-795">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.GroupBy%60%604%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%29> do grupowania przewidywany elementy sekwencji i następnie projektu kolejności wyników typu `TResult`.</span><span class="sxs-lookup"><span data-stu-id="e3165-795">The following code example demonstrates how to use <xref:System.Linq.Enumerable.GroupBy%60%604%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Func%7B%60%601%2CSystem.Collections.Generic.IEnumerable%7B%60%602%7D%2C%60%603%7D%29> to group the projected elements of a sequence and then project a sequence of results of type `TResult`.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#125](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#125)]
 [!code-vb[System.Linq.Enumerable#125](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#125)]  
  
 ]]></format>
        </remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/c817242e-b12c-4baa-a57e-73ee138f34d1">
          <span data-ttu-id="e3165-796">group — Klauzula (odwołanie w C#)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-796">group clause (C# Reference)</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/b1b5dcea-6654-473b-a2db-01f7e4c265d7">
          <span data-ttu-id="e3165-797">Group By — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-797">Group By Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="GroupBy&lt;TSource,TKey,TElement,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; GroupBy&lt;TSource,TKey,TElement,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TSource,TElement&gt; elementSelector, Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TElement&gt;,TResult&gt; resultSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; GroupBy&lt;TSource, TKey, TElement, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Func`2&lt;!!TSource, !!TElement&gt; elementSelector, class System.Func`3&lt;!!TKey, class System.Collections.Generic.IEnumerable`1&lt;!!TElement&gt;, !!TResult&gt; resultSelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.GroupBy``4(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Func{``1,System.Collections.Generic.IEnumerable{``2},``3},System.Collections.Generic.IEqualityComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GroupBy(Of TSource, TKey, TElement, TResult) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement), resultSelector As Func(Of TKey, IEnumerable(Of TElement), TResult), comparer As IEqualityComparer(Of TKey)) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey, typename TElement, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ GroupBy(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, Func&lt;TSource, TElement&gt; ^ elementSelector, Func&lt;TKey, System::Collections::Generic::IEnumerable&lt;TElement&gt; ^, TResult&gt; ^ resultSelector, System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member GroupBy : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * Func&lt;'Source, 'Element&gt; * Func&lt;'Key, seq&lt;'Element&gt;, 'Result&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.GroupBy (source, keySelector, elementSelector, resultSelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TElement" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="elementSelector" Type="System.Func&lt;TSource,TElement&gt;" />
        <Parameter Name="resultSelector" Type="System.Func&lt;TKey,System.Collections.Generic.IEnumerable&lt;TElement&gt;,TResult&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-798">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-798">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <typeparam name="TKey">
          <span data-ttu-id="e3165-799">Rodzaj klucza zwracany przez <c>keySelector</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-799">The type of the key returned by <c>keySelector</c>.</span>
          </span>
        </typeparam>
        <typeparam name="TElement">
          <span data-ttu-id="e3165-800">Typ elementów w każdej <see cref="T:System.Linq.IGrouping`2" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-800">The type of the elements in each <see cref="T:System.Linq.IGrouping`2" />.</span>
          </span>
        </typeparam>
        <typeparam name="TResult">
          <span data-ttu-id="e3165-801">Typ wartości wyników zwróconych przez <c>resultSelector</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-801">The type of the result value returned by <c>resultSelector</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-802">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Której elementy należy pogrupować.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-802">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements to group.</span>
          </span>
        </param>
        <param name="keySelector">
          <span data-ttu-id="e3165-803">Funkcja wyodrębniania klucza do każdego elementu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-803">A function to extract the key for each element.</span>
          </span>
        </param>
        <param name="elementSelector">
          <span data-ttu-id="e3165-804">Funkcja mapy każdego elementu źródłowego do elementu w <see cref="T:System.Linq.IGrouping`2" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-804">A function to map each source element to an element in an <see cref="T:System.Linq.IGrouping`2" />.</span>
          </span>
        </param>
        <param name="resultSelector">
          <span data-ttu-id="e3165-805">Funkcja tworzenia wartości wyniku z każdej grupy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-805">A function to create a result value from each group.</span>
          </span>
        </param>
        <param name="comparer">
          <span data-ttu-id="e3165-806">
            <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> Do porównywania kluczy przy użyciu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-806">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys with.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-807">Grupuje elementy sekwencji zgodnie z określoną kluczową funkcją wyboru i tworzy wartość wyniku z każdej grupy i klucza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-807">Groups the elements of a sequence according to a specified key selector function and creates a result value from each group and its key.</span>
          </span>
          <span data-ttu-id="e3165-808">Wartości klucza są porównywane za pomocą określona funkcja porównująca i elementów każdej grupy są pokazane przy użyciu określonej funkcji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-808">Key values are compared by using a specified comparer, and the elements of each group are projected by using a specified function.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-809">Kolekcja elementów typu <paramref name="TResult" /> gdzie każdy element przedstawia projekcję nad grupą i jego kluczem.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-809">A collection of elements of type <paramref name="TResult" /> where each element represents a projection over a group and its key.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
        <related type="Article" href="https://msdn.microsoft.com/library/c817242e-b12c-4baa-a57e-73ee138f34d1">
          <span data-ttu-id="e3165-810">group — Klauzula (odwołanie w C#)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-810">group clause (C# Reference)</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/b1b5dcea-6654-473b-a2db-01f7e4c265d7">
          <span data-ttu-id="e3165-811">Group By — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-811">Group By Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="GroupJoin&lt;TOuter,TInner,TKey,TResult&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e3165-812">Koreluje elementy dwóch sekwencji, w oparciu o równości kluczy, a następnie grupuje wyniki.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-812">Correlates the elements of two sequences based on key equality, and groups the results.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="GroupJoin&lt;TOuter,TInner,TKey,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; GroupJoin&lt;TOuter,TInner,TKey,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TOuter&gt; outer, System.Collections.Generic.IEnumerable&lt;TInner&gt; inner, Func&lt;TOuter,TKey&gt; outerKeySelector, Func&lt;TInner,TKey&gt; innerKeySelector, Func&lt;TOuter,System.Collections.Generic.IEnumerable&lt;TInner&gt;,TResult&gt; resultSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; GroupJoin&lt;TOuter, TInner, TKey, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TOuter&gt; outer, class System.Collections.Generic.IEnumerable`1&lt;!!TInner&gt; inner, class System.Func`2&lt;!!TOuter, !!TKey&gt; outerKeySelector, class System.Func`2&lt;!!TInner, !!TKey&gt; innerKeySelector, class System.Func`3&lt;!!TOuter, class System.Collections.Generic.IEnumerable`1&lt;!!TInner&gt;, !!TResult&gt; resultSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GroupJoin(Of TOuter, TInner, TKey, TResult) (outer As IEnumerable(Of TOuter), inner As IEnumerable(Of TInner), outerKeySelector As Func(Of TOuter, TKey), innerKeySelector As Func(Of TInner, TKey), resultSelector As Func(Of TOuter, IEnumerable(Of TInner), TResult)) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOuter, typename TInner, typename TKey, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ GroupJoin(System::Collections::Generic::IEnumerable&lt;TOuter&gt; ^ outer, System::Collections::Generic::IEnumerable&lt;TInner&gt; ^ inner, Func&lt;TOuter, TKey&gt; ^ outerKeySelector, Func&lt;TInner, TKey&gt; ^ innerKeySelector, Func&lt;TOuter, System::Collections::Generic::IEnumerable&lt;TInner&gt; ^, TResult&gt; ^ resultSelector);" />
      <MemberSignature Language="F#" Value="static member GroupJoin : seq&lt;'Outer&gt; * seq&lt;'Inner&gt; * Func&lt;'Outer, 'Key&gt; * Func&lt;'Inner, 'Key&gt; * Func&lt;'Outer, seq&lt;'Inner&gt;, 'Result&gt; -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.GroupJoin (outer, inner, outerKeySelector, innerKeySelector, resultSelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOuter" />
        <TypeParameter Name="TInner" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="outer" Type="System.Collections.Generic.IEnumerable&lt;TOuter&gt;" RefType="this" />
        <Parameter Name="inner" Type="System.Collections.Generic.IEnumerable&lt;TInner&gt;" />
        <Parameter Name="outerKeySelector" Type="System.Func&lt;TOuter,TKey&gt;" />
        <Parameter Name="innerKeySelector" Type="System.Func&lt;TInner,TKey&gt;" />
        <Parameter Name="resultSelector" Type="System.Func&lt;TOuter,System.Collections.Generic.IEnumerable&lt;TInner&gt;,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TOuter">
          <span data-ttu-id="e3165-813">Typ elementów pierwszej sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-813">The type of the elements of the first sequence.</span>
          </span>
        </typeparam>
        <typeparam name="TInner">
          <span data-ttu-id="e3165-814">Typ elementów drugiej sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-814">The type of the elements of the second sequence.</span>
          </span>
        </typeparam>
        <typeparam name="TKey">
          <span data-ttu-id="e3165-815">Typ kluczy zwracanych przez funkcje przełącznika kluczowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-815">The type of the keys returned by the key selector functions.</span>
          </span>
        </typeparam>
        <typeparam name="TResult">
          <span data-ttu-id="e3165-816">Typ elementów wyniku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-816">The type of the result elements.</span>
          </span>
        </typeparam>
        <param name="outer">
          <span data-ttu-id="e3165-817">Pierwsza sekwencja do przyłączenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-817">The first sequence to join.</span>
          </span>
        </param>
        <param name="inner">
          <span data-ttu-id="e3165-818">Sekwencja do przyłączenia do pierwszej sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-818">The sequence to join to the first sequence.</span>
          </span>
        </param>
        <param name="outerKeySelector">
          <span data-ttu-id="e3165-819">Funkcja wyodrębniania klucza łączenia z każdego elementu pierwszej sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-819">A function to extract the join key from each element of the first sequence.</span>
          </span>
        </param>
        <param name="innerKeySelector">
          <span data-ttu-id="e3165-820">Funkcja wyodrębniania klucza łączenia z każdego elementu drugiej sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-820">A function to extract the join key from each element of the second sequence.</span>
          </span>
        </param>
        <param name="resultSelector">
          <span data-ttu-id="e3165-821">Funkcja tworzenia elementu wynik z elementu pierwszej sekwencji i zbiorem pasujące elementy z drugiej sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-821">A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-822">Koreluje elementy dwóch sekwencji, w oparciu o równość kluczy, a następnie grupuje wyniki.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-822">Correlates the elements of two sequences based on equality of keys and groups the results.</span>
          </span>
          <span data-ttu-id="e3165-823">Domyślny moduł porównujący równość służy do porównywania kluczy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-823">The default equality comparer is used to compare keys.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-824">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Zawiera elementy typu <paramref name="TResult" /> , są pobierane, wykonując sprzężenie pogrupowanych w dwóch sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-824">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains elements of type <paramref name="TResult" /> that are obtained by performing a grouped join on two sequences.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-825">Ta metoda jest implementowana za pomocą odroczonego wykonania.</span><span class="sxs-lookup"><span data-stu-id="e3165-825">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="e3165-826">Bezpośrednio zwracana wartość jest obiektem, który przechowuje wszystkie informacje wymagane do wykonania akcji.</span><span class="sxs-lookup"><span data-stu-id="e3165-826">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="e3165-827">Zapytanie, reprezentowane przez tę metodę nie jest wykonywana do czasu, przez wywołanie obiekt jest zostanie wyliczonly jego `GetEnumerator` metoda bezpośrednio lub za pomocą `foreach` w języku Visual C# lub `For Each` w języku Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="e3165-827">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="e3165-828">Domyślny moduł porównujący równość, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, służy do wyznaczania wartości skrótu i porównywania kluczy.</span><span class="sxs-lookup"><span data-stu-id="e3165-828">The default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to hash and compare keys.</span></span>  
  
 <span data-ttu-id="e3165-829"><xref:System.Linq.Enumerable.GroupJoin%2A> generuje hierarchiczne wyniki, w których elementy z `outer` są skojarzone z kolekcjami zgodnych elementów z `inner`.</span><span class="sxs-lookup"><span data-stu-id="e3165-829"><xref:System.Linq.Enumerable.GroupJoin%2A> produces hierarchical results, which means that elements from `outer` are paired with collections of matching elements from `inner`.</span></span> <span data-ttu-id="e3165-830">`GroupJoin` Umożliwia zastosowanie wyniki na cały zestaw dopasowań dla każdego elementu `outer`.</span><span class="sxs-lookup"><span data-stu-id="e3165-830">`GroupJoin` enables you to base your results on a whole set of matches for each element of `outer`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e3165-831">Jeśli nie ma elementów skorelowane w `inner` dla danego elementu `outer`, sekwencja dopasowań dla tego elementu jest pusta, ale wciąż będą wyświetlane w wynikach.</span><span class="sxs-lookup"><span data-stu-id="e3165-831">If there are no correlated elements in `inner` for a given element of `outer`, the sequence of matches for that element will be empty but will still appear in the results.</span></span>  
  
 <span data-ttu-id="e3165-832">`resultSelector` Funkcja jest wywoływana tylko raz dla każdego `outer` element wraz z kolekcją wszystkich `inner` elementy, które odpowiadają `outer` elementu.</span><span class="sxs-lookup"><span data-stu-id="e3165-832">The `resultSelector` function is called only one time for each `outer` element together with a collection of all the `inner` elements that match the `outer` element.</span></span> <span data-ttu-id="e3165-833">To różni się od <xref:System.Linq.Enumerable.Join%2A> metody, w którym funkcja selektor wynik jest wywoływana pary, które zawierają jeden element z `outer` i jednego elementu z `inner`.</span><span class="sxs-lookup"><span data-stu-id="e3165-833">This differs from the <xref:System.Linq.Enumerable.Join%2A> method, in which the result selector function is invoked on pairs that contain one element from `outer` and one element from `inner`.</span></span>  
  
 <span data-ttu-id="e3165-834">`GroupJoin` zachowuje kolejność elementów `outer`i dla każdego elementu `outer`, kolejność elementów zgodnych z `inner`.</span><span class="sxs-lookup"><span data-stu-id="e3165-834">`GroupJoin` preserves the order of the elements of `outer`, and for each element of `outer`, the order of the matching elements from `inner`.</span></span>  
  
 <span data-ttu-id="e3165-835"><xref:System.Linq.Enumerable.GroupJoin%2A> nie ma bezpośredniego odpowiednika w warunkach tradycyjnych relacyjnych baz danych.</span><span class="sxs-lookup"><span data-stu-id="e3165-835"><xref:System.Linq.Enumerable.GroupJoin%2A> has no direct equivalent in traditional relational database terms.</span></span> <span data-ttu-id="e3165-836">Jednak ta metoda implementuje nadzbiorem sprzężenia wewnętrzne lewych sprzężeń zewnętrznych.</span><span class="sxs-lookup"><span data-stu-id="e3165-836">However, this method does implement a superset of inner joins and left outer joins.</span></span> <span data-ttu-id="e3165-837">Oba te operacje mogą być napisane pod kątem pogrupowanych sprzężenia.</span><span class="sxs-lookup"><span data-stu-id="e3165-837">Both of these operations can be written in terms of a grouped join.</span></span> <span data-ttu-id="e3165-838">Zobacz [operacje połączone](https://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107).</span><span class="sxs-lookup"><span data-stu-id="e3165-838">See [Join Operations](https://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107).</span></span>  
  
 <span data-ttu-id="e3165-839">W składni wyrażeń zapytania `join … into` (Visual C#) lub `Group Join` — klauzula (Visual Basic) przekłada się na wywołanie <xref:System.Linq.Enumerable.GroupJoin%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-839">In query expression syntax, a `join … into` (Visual C#) or `Group Join` (Visual Basic) clause translates to an invocation of <xref:System.Linq.Enumerable.GroupJoin%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-840">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.GroupJoin%60%604%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2C%60%603%7D%29> do wykonania sprzężenia zgrupowane w dwóch sekwencji.</span><span class="sxs-lookup"><span data-stu-id="e3165-840">The following code example demonstrates how to use <xref:System.Linq.Enumerable.GroupJoin%60%604%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2C%60%603%7D%29> to perform a grouped join on two sequences.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#40](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#40)]
 [!code-vb[System.Linq.Enumerable#40](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#40)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-841">
            <paramref name="outer" /> lub <paramref name="inner" /> lub <paramref name="outerKeySelector" /> lub <paramref name="innerKeySelector" /> lub <paramref name="resultSelector" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-841">
              <paramref name="outer" /> or <paramref name="inner" /> or <paramref name="outerKeySelector" /> or <paramref name="innerKeySelector" /> or <paramref name="resultSelector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107">
          <span data-ttu-id="e3165-842">Operacje połączone</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-842">Join Operations</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/76e9df84-092c-41a6-9537-c3f1cbd7f0fb">
          <span data-ttu-id="e3165-843">Klauzula join (odwołanie w C#)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-843">join clause (C# Reference)</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/37dbf79c-7b5c-421b-bbb7-dadfd2b92a1c">
          <span data-ttu-id="e3165-844">Group Join — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-844">Group Join Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="GroupJoin&lt;TOuter,TInner,TKey,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; GroupJoin&lt;TOuter,TInner,TKey,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TOuter&gt; outer, System.Collections.Generic.IEnumerable&lt;TInner&gt; inner, Func&lt;TOuter,TKey&gt; outerKeySelector, Func&lt;TInner,TKey&gt; innerKeySelector, Func&lt;TOuter,System.Collections.Generic.IEnumerable&lt;TInner&gt;,TResult&gt; resultSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; GroupJoin&lt;TOuter, TInner, TKey, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TOuter&gt; outer, class System.Collections.Generic.IEnumerable`1&lt;!!TInner&gt; inner, class System.Func`2&lt;!!TOuter, !!TKey&gt; outerKeySelector, class System.Func`2&lt;!!TInner, !!TKey&gt; innerKeySelector, class System.Func`3&lt;!!TOuter, class System.Collections.Generic.IEnumerable`1&lt;!!TInner&gt;, !!TResult&gt; resultSelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.GroupJoin``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,System.Collections.Generic.IEnumerable{``1},``3},System.Collections.Generic.IEqualityComparer{``2})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function GroupJoin(Of TOuter, TInner, TKey, TResult) (outer As IEnumerable(Of TOuter), inner As IEnumerable(Of TInner), outerKeySelector As Func(Of TOuter, TKey), innerKeySelector As Func(Of TInner, TKey), resultSelector As Func(Of TOuter, IEnumerable(Of TInner), TResult), comparer As IEqualityComparer(Of TKey)) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOuter, typename TInner, typename TKey, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ GroupJoin(System::Collections::Generic::IEnumerable&lt;TOuter&gt; ^ outer, System::Collections::Generic::IEnumerable&lt;TInner&gt; ^ inner, Func&lt;TOuter, TKey&gt; ^ outerKeySelector, Func&lt;TInner, TKey&gt; ^ innerKeySelector, Func&lt;TOuter, System::Collections::Generic::IEnumerable&lt;TInner&gt; ^, TResult&gt; ^ resultSelector, System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member GroupJoin : seq&lt;'Outer&gt; * seq&lt;'Inner&gt; * Func&lt;'Outer, 'Key&gt; * Func&lt;'Inner, 'Key&gt; * Func&lt;'Outer, seq&lt;'Inner&gt;, 'Result&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.GroupJoin (outer, inner, outerKeySelector, innerKeySelector, resultSelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOuter" />
        <TypeParameter Name="TInner" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="outer" Type="System.Collections.Generic.IEnumerable&lt;TOuter&gt;" RefType="this" />
        <Parameter Name="inner" Type="System.Collections.Generic.IEnumerable&lt;TInner&gt;" />
        <Parameter Name="outerKeySelector" Type="System.Func&lt;TOuter,TKey&gt;" />
        <Parameter Name="innerKeySelector" Type="System.Func&lt;TInner,TKey&gt;" />
        <Parameter Name="resultSelector" Type="System.Func&lt;TOuter,System.Collections.Generic.IEnumerable&lt;TInner&gt;,TResult&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TOuter">
          <span data-ttu-id="e3165-845">Typ elementów pierwszej sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-845">The type of the elements of the first sequence.</span>
          </span>
        </typeparam>
        <typeparam name="TInner">
          <span data-ttu-id="e3165-846">Typ elementów drugiej sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-846">The type of the elements of the second sequence.</span>
          </span>
        </typeparam>
        <typeparam name="TKey">
          <span data-ttu-id="e3165-847">Typ kluczy zwracanych przez funkcje przełącznika kluczowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-847">The type of the keys returned by the key selector functions.</span>
          </span>
        </typeparam>
        <typeparam name="TResult">
          <span data-ttu-id="e3165-848">Typ elementów wyniku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-848">The type of the result elements.</span>
          </span>
        </typeparam>
        <param name="outer">
          <span data-ttu-id="e3165-849">Pierwsza sekwencja do przyłączenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-849">The first sequence to join.</span>
          </span>
        </param>
        <param name="inner">
          <span data-ttu-id="e3165-850">Sekwencja do przyłączenia do pierwszej sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-850">The sequence to join to the first sequence.</span>
          </span>
        </param>
        <param name="outerKeySelector">
          <span data-ttu-id="e3165-851">Funkcja wyodrębniania klucza łączenia z każdego elementu pierwszej sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-851">A function to extract the join key from each element of the first sequence.</span>
          </span>
        </param>
        <param name="innerKeySelector">
          <span data-ttu-id="e3165-852">Funkcja wyodrębniania klucza łączenia z każdego elementu drugiej sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-852">A function to extract the join key from each element of the second sequence.</span>
          </span>
        </param>
        <param name="resultSelector">
          <span data-ttu-id="e3165-853">Funkcja tworzenia elementu wynik z elementu pierwszej sekwencji i zbiorem pasujące elementy z drugiej sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-853">A function to create a result element from an element from the first sequence and a collection of matching elements from the second sequence.</span>
          </span>
        </param>
        <param name="comparer">
          <span data-ttu-id="e3165-854">
            <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> Wyznaczania wartości skrótu do porównywania kluczy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-854">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to hash and compare keys.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-855">Koreluje elementy dwóch sekwencji, w oparciu o równości kluczy, a następnie grupuje wyniki.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-855">Correlates the elements of two sequences based on key equality and groups the results.</span>
          </span>
          <span data-ttu-id="e3165-856">Określonego <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> służy do porównywania kluczy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-856">A specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> is used to compare keys.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-857">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Zawiera elementy typu <paramref name="TResult" /> , są pobierane, wykonując sprzężenie pogrupowanych w dwóch sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-857">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains elements of type <paramref name="TResult" /> that are obtained by performing a grouped join on two sequences.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-858">Ta metoda jest implementowana za pomocą odroczonego wykonania.</span><span class="sxs-lookup"><span data-stu-id="e3165-858">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="e3165-859">Bezpośrednio zwracana wartość jest obiektem, który przechowuje wszystkie informacje wymagane do wykonania akcji.</span><span class="sxs-lookup"><span data-stu-id="e3165-859">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="e3165-860">Zapytanie, reprezentowane przez tę metodę nie jest wykonywana do czasu, przez wywołanie obiekt jest zostanie wyliczonly jego `GetEnumerator` metoda bezpośrednio lub za pomocą `foreach` w języku Visual C# lub `For Each` w języku Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="e3165-860">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="e3165-861">Jeśli `comparer` jest `null`, domyślny moduł porównujący równość, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, służy do wyznaczania wartości skrótu i porównywania kluczy.</span><span class="sxs-lookup"><span data-stu-id="e3165-861">If `comparer` is `null`, the default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to hash and compare keys.</span></span>  
  
 <span data-ttu-id="e3165-862"><xref:System.Linq.Enumerable.GroupJoin%2A> generuje hierarchiczne wyniki, w których elementy z `outer` są skojarzone z kolekcjami zgodnych elementów z `inner`.</span><span class="sxs-lookup"><span data-stu-id="e3165-862"><xref:System.Linq.Enumerable.GroupJoin%2A> produces hierarchical results, which means that elements from `outer` are paired with collections of matching elements from `inner`.</span></span> <span data-ttu-id="e3165-863">`GroupJoin` Umożliwia zastosowanie wyniki na cały zestaw dopasowań dla każdego elementu `outer`.</span><span class="sxs-lookup"><span data-stu-id="e3165-863">`GroupJoin` enables you to base your results on a whole set of matches for each element of `outer`.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e3165-864">Jeśli nie ma elementów skorelowane w `inner` dla danego elementu `outer`, sekwencja dopasowań dla tego elementu jest pusta, ale wciąż będą wyświetlane w wynikach.</span><span class="sxs-lookup"><span data-stu-id="e3165-864">If there are no correlated elements in `inner` for a given element of `outer`, the sequence of matches for that element will be empty but will still appear in the results.</span></span>  
  
 <span data-ttu-id="e3165-865">`resultSelector` Funkcja jest wywoływana tylko raz dla każdego `outer` element wraz z kolekcją wszystkich `inner` elementy, które odpowiadają `outer` elementu.</span><span class="sxs-lookup"><span data-stu-id="e3165-865">The `resultSelector` function is called only one time for each `outer` element together with a collection of all the `inner` elements that match the `outer` element.</span></span> <span data-ttu-id="e3165-866">To różni się od <xref:System.Linq.Enumerable.Join%2A> metoda jest wywoływana funkcja selektor wyników, na pary, które zawierają jeden element z `outer` i jednego elementu z `inner`.</span><span class="sxs-lookup"><span data-stu-id="e3165-866">This differs from the <xref:System.Linq.Enumerable.Join%2A> method in which the result selector function is invoked on pairs that contain one element from `outer` and one element from `inner`.</span></span>  
  
 <span data-ttu-id="e3165-867">`GroupJoin` zachowuje kolejność elementów `outer`i dla każdego elementu `outer`, kolejność elementów zgodnych z `inner`.</span><span class="sxs-lookup"><span data-stu-id="e3165-867">`GroupJoin` preserves the order of the elements of `outer`, and for each element of `outer`, the order of the matching elements from `inner`.</span></span>  
  
 <span data-ttu-id="e3165-868"><xref:System.Linq.Enumerable.GroupJoin%2A> nie ma bezpośredniego odpowiednika w warunkach tradycyjnych relacyjnych baz danych.</span><span class="sxs-lookup"><span data-stu-id="e3165-868"><xref:System.Linq.Enumerable.GroupJoin%2A> has no direct equivalent in traditional relational database terms.</span></span> <span data-ttu-id="e3165-869">Jednak ta metoda implementuje nadzbiorem sprzężenia wewnętrzne lewych sprzężeń zewnętrznych.</span><span class="sxs-lookup"><span data-stu-id="e3165-869">However, this method does implement a superset of inner joins and left outer joins.</span></span> <span data-ttu-id="e3165-870">Oba te operacje mogą być napisane pod kątem pogrupowanych sprzężenia.</span><span class="sxs-lookup"><span data-stu-id="e3165-870">Both of these operations can be written in terms of a grouped join.</span></span> <span data-ttu-id="e3165-871">Zobacz [operacje połączone](https://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107).</span><span class="sxs-lookup"><span data-stu-id="e3165-871">See [Join Operations](https://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-872">
            <paramref name="outer" /> lub <paramref name="inner" /> lub <paramref name="outerKeySelector" /> lub <paramref name="innerKeySelector" /> lub <paramref name="resultSelector" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-872">
              <paramref name="outer" /> or <paramref name="inner" /> or <paramref name="outerKeySelector" /> or <paramref name="innerKeySelector" /> or <paramref name="resultSelector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107">
          <span data-ttu-id="e3165-873">Wykonywanie operacji łączenia</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-873">Performing Join Operations</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Intersect&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e3165-874">Tworzy zestawu części wspólnych dwóch sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-874">Produces the set intersection of two sequences.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Intersect&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Intersect&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; first, System.Collections.Generic.IEnumerable&lt;TSource&gt; second);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Intersect&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; first, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; second) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Intersect(Of TSource) (first As IEnumerable(Of TSource), second As IEnumerable(Of TSource)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ Intersect(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ first, System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ second);" />
      <MemberSignature Language="F#" Value="static member Intersect : seq&lt;'Source&gt; * seq&lt;'Source&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.Intersect (first, second)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="first" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="second" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-875">Typ elementów sekwencji wejściowych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-875">The type of the elements of the input sequences.</span>
          </span>
        </typeparam>
        <param name="first">
          <span data-ttu-id="e3165-876">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Którego różne elementy, które są również wyświetlane w <c>drugi</c> zostaną zwrócone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-876">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose distinct elements that also appear in <c>second</c> will be returned.</span>
          </span>
        </param>
        <param name="second">
          <span data-ttu-id="e3165-877">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Którego różne elementy, które są również wyświetlane w pierwszej kolejności zostaną zwrócone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-877">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose distinct elements that also appear in the first sequence will be returned.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-878">Tworzy zestawu części wspólnych dwóch sekwencji za pomocą domyślny moduł porównujący równość do porównywania wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-878">Produces the set intersection of two sequences by using the default equality comparer to compare values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-879">Sekwencja, który zawiera elementy, które tworzą zestawu części wspólnych dwóch sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-879">A sequence that contains the elements that form the set intersection of two sequences.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-880">Ta metoda jest implementowana za pomocą odroczonego wykonania.</span><span class="sxs-lookup"><span data-stu-id="e3165-880">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="e3165-881">Bezpośrednio zwracana wartość jest obiektem, który przechowuje wszystkie informacje wymagane do wykonania akcji.</span><span class="sxs-lookup"><span data-stu-id="e3165-881">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="e3165-882">Zapytanie, reprezentowane przez tę metodę nie jest wykonywana do czasu, przez wywołanie obiekt jest zostanie wyliczonly jego `GetEnumerator` metoda bezpośrednio lub za pomocą `foreach` w języku Visual C# lub `For Each` w języku Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="e3165-882">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="e3165-883">Część wspólną dwóch zestawów, A i B jest definiowany jako zestaw, który zawiera wszystkie elementy, a, który jest również dostępna w B, ale nie inne elementy.</span><span class="sxs-lookup"><span data-stu-id="e3165-883">The intersection of two sets A and B is defined as the set that contains all the elements of A that also appear in B, but no other elements.</span></span>  
  
 <span data-ttu-id="e3165-884">Gdy obiekt zwracany przez tę metodę jest zostanie wyliczonly, <xref:System.Linq.Enumerable.Intersect%2A> daje różne elementy, które pojawiają się w obu sekwencji w kolejności, w jakiej występują w `first`.</span><span class="sxs-lookup"><span data-stu-id="e3165-884">When the object returned by this method is enumerated, <xref:System.Linq.Enumerable.Intersect%2A> yields distinct elements occurring in both sequences in the order in which they appear in `first`.</span></span>  
  
 <span data-ttu-id="e3165-885">Domyślny moduł porównujący równość, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, służy do porównywania wartości typów implementujących <xref:System.Collections.Generic.IEqualityComparer%601> interfejs generyczny.</span><span class="sxs-lookup"><span data-stu-id="e3165-885">The default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare values of the types that implement the <xref:System.Collections.Generic.IEqualityComparer%601> generic interface.</span></span> <span data-ttu-id="e3165-886">Aby porównać niestandardowy typ danych, należy zaimplementować niniejszy interfejs i podać własne <xref:System.Object.GetHashCode%2A> i <xref:System.Object.Equals%2A> metod dla typu.</span><span class="sxs-lookup"><span data-stu-id="e3165-886">To compare a custom data type, you need to implement this interface and provide your own <xref:System.Object.GetHashCode%2A> and <xref:System.Object.Equals%2A> methods for the type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-887">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Intersect%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> zwracanych elementów, które pojawiają się na każdej dwóch sekwencji liczb całkowitych.</span><span class="sxs-lookup"><span data-stu-id="e3165-887">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Intersect%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> to return the elements that appear in each of two sequences of integers.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#41](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#41)]
 [!code-vb[System.Linq.Enumerable#41](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#41)]  
  
 <span data-ttu-id="e3165-888">Jeśli chcesz porównać sekwencji obiektów niestandardowego typu danych, musisz zaimplementować <xref:System.Collections.Generic.IEqualityComparer%601> ogólny interfejs w klasie pomocy.</span><span class="sxs-lookup"><span data-stu-id="e3165-888">If you want to compare sequences of objects of a custom data type, you have to implement the <xref:System.Collections.Generic.IEqualityComparer%601> generic interface in a helper class.</span></span> <span data-ttu-id="e3165-889">Poniższy przykład kodu pokazuje sposób implementacji niniejszego interfejsu do niestandardowego typu danych i zapewniają <xref:System.Object.GetHashCode%2A> i <xref:System.Object.Equals%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="e3165-889">The following code example shows how to implement this interface in a custom data type and provide <xref:System.Object.GetHashCode%2A> and <xref:System.Object.Equals%2A> methods.</span></span>  
  
 [!code-csharp[CSLINQEncapsulatedComparer#9](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/CS/EncapsulatedComparer.cs#9)]  
  
 <span data-ttu-id="e3165-890">Po zaimplementowaniu ten interfejs, można użyć sekwencji `ProductA` obiekty w <xref:System.Linq.Enumerable.Intersect%2A> metodzie, jak pokazano w poniższym przykładzie.</span><span class="sxs-lookup"><span data-stu-id="e3165-890">After you implement this interface, you can use sequences of `ProductA` objects in the <xref:System.Linq.Enumerable.Intersect%2A> method, as shown in the following example.</span></span>  
  
 [!code-csharp[CSLINQEncapsulatedComparer#10](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/CS/EncapsulatedComparer.cs#10)]  
[!code-csharp[CSLINQEncapsulatedComparer#3](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/CS/EncapsulatedComparer.cs#3)]
[!code-vb[CSLINQEncapsulatedComparer#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/VB/EncapsulatedComparer.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-891">
            <paramref name="first" /> lub <paramref name="second" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-891">
              <paramref name="first" /> or <paramref name="second" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Intersect&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Intersect&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; first, System.Collections.Generic.IEnumerable&lt;TSource&gt; second, System.Collections.Generic.IEqualityComparer&lt;TSource&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Intersect&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; first, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; second, class System.Collections.Generic.IEqualityComparer`1&lt;!!TSource&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Intersect``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Intersect(Of TSource) (first As IEnumerable(Of TSource), second As IEnumerable(Of TSource), comparer As IEqualityComparer(Of TSource)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ Intersect(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ first, System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ second, System::Collections::Generic::IEqualityComparer&lt;TSource&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member Intersect : seq&lt;'Source&gt; * seq&lt;'Source&gt; * System.Collections.Generic.IEqualityComparer&lt;'Source&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.Intersect (first, second, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="first" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="second" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-892">Typ elementów sekwencji wejściowych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-892">The type of the elements of the input sequences.</span>
          </span>
        </typeparam>
        <param name="first">
          <span data-ttu-id="e3165-893">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Którego różne elementy, które są również wyświetlane w <c>drugi</c> zostaną zwrócone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-893">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose distinct elements that also appear in <c>second</c> will be returned.</span>
          </span>
        </param>
        <param name="second">
          <span data-ttu-id="e3165-894">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Którego różne elementy, które są również wyświetlane w pierwszej kolejności zostaną zwrócone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-894">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose distinct elements that also appear in the first sequence will be returned.</span>
          </span>
        </param>
        <param name="comparer">
          <span data-ttu-id="e3165-895">
            <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> Do porównywania wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-895">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-896">Tworzy zestawu części wspólnych dwóch sekwencji przy użyciu określonego <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> do porównywania wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-896">Produces the set intersection of two sequences by using the specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-897">Sekwencja, który zawiera elementy, które tworzą zestawu części wspólnych dwóch sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-897">A sequence that contains the elements that form the set intersection of two sequences.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-898">Ta metoda jest implementowana za pomocą odroczonego wykonania.</span><span class="sxs-lookup"><span data-stu-id="e3165-898">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="e3165-899">Bezpośrednio zwracana wartość jest obiektem, który przechowuje wszystkie informacje wymagane do wykonania akcji.</span><span class="sxs-lookup"><span data-stu-id="e3165-899">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="e3165-900">Zapytanie, reprezentowane przez tę metodę nie jest wykonywana do czasu, przez wywołanie obiekt jest zostanie wyliczonly jego `GetEnumerator` metoda bezpośrednio lub za pomocą `foreach` w języku Visual C# lub `For Each` w języku Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="e3165-900">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="e3165-901">Część wspólną dwóch zestawów, A i B jest definiowany jako zestaw, który zawiera wszystkie elementy, a, który jest również dostępna w B, ale nie inne elementy.</span><span class="sxs-lookup"><span data-stu-id="e3165-901">The intersection of two sets A and B is defined as the set that contains all the elements of A that also appear in B, but no other elements.</span></span>  
  
 <span data-ttu-id="e3165-902">Gdy obiekt zwracany przez tę metodę jest zostanie wyliczonly, <xref:System.Linq.Enumerable.Intersect%2A> daje różne elementy, które pojawiają się w obu sekwencji w kolejności, w jakiej występują w `first`.</span><span class="sxs-lookup"><span data-stu-id="e3165-902">When the object returned by this method is enumerated, <xref:System.Linq.Enumerable.Intersect%2A> yields distinct elements occurring in both sequences in the order in which they appear in `first`.</span></span>  
  
 <span data-ttu-id="e3165-903">Jeśli `comparer` jest `null`, domyślny moduł porównujący równość, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, służy do porównywania wartości.</span><span class="sxs-lookup"><span data-stu-id="e3165-903">If `comparer` is `null`, the default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-904">Poniższy przykład pokazuje, jak zaimplementować moduł porównujący równość mogą być używane w <xref:System.Linq.Enumerable.Intersect%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="e3165-904">The following example shows how to implement an equality comparer that can be used in the <xref:System.Linq.Enumerable.Intersect%2A> method.</span></span>  
  
 [!code-csharp[CSLINQCustomComparer#1](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQCustomComparer/CS/CustomComparer.cs#1)]
 [!code-vb[CSLINQCustomComparer#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQCustomComparer/VB/CustomComparer.vb#1)]  
  
 <span data-ttu-id="e3165-905">Po zaimplementowaniu tej porównania można użyć sekwencji `Product` obiekty w <xref:System.Linq.Enumerable.Intersect%2A> metodzie, jak pokazano w poniższym przykładzie.</span><span class="sxs-lookup"><span data-stu-id="e3165-905">After you implement this comparer, you can use sequences of `Product` objects in the <xref:System.Linq.Enumerable.Intersect%2A> method, as shown in the following example.</span></span>  
  
 [!code-csharp[CSLINQCustomComparer#2](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQCustomComparer/CS/CustomComparer.cs#2)]
 [!code-vb[CSLINQCustomComparer#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQCustomComparer/VB/CustomComparer.vb#2)]  
[!code-csharp[CSLINQCustomComparer#3](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQCustomComparer/CS/CustomComparer.cs#3)]
[!code-vb[CSLINQCustomComparer#3](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQCustomComparer/VB/CustomComparer.vb#3)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-906">
            <paramref name="first" /> lub <paramref name="second" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-906">
              <paramref name="first" /> or <paramref name="second" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Join&lt;TOuter,TInner,TKey,TResult&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e3165-907">Koreluje elementy dwóch sekwencji na podstawie kluczy dopasowania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-907">Correlates the elements of two sequences based on matching keys.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Join&lt;TOuter,TInner,TKey,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; Join&lt;TOuter,TInner,TKey,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TOuter&gt; outer, System.Collections.Generic.IEnumerable&lt;TInner&gt; inner, Func&lt;TOuter,TKey&gt; outerKeySelector, Func&lt;TInner,TKey&gt; innerKeySelector, Func&lt;TOuter,TInner,TResult&gt; resultSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; Join&lt;TOuter, TInner, TKey, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TOuter&gt; outer, class System.Collections.Generic.IEnumerable`1&lt;!!TInner&gt; inner, class System.Func`2&lt;!!TOuter, !!TKey&gt; outerKeySelector, class System.Func`2&lt;!!TInner, !!TKey&gt; innerKeySelector, class System.Func`3&lt;!!TOuter, !!TInner, !!TResult&gt; resultSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Join(Of TOuter, TInner, TKey, TResult) (outer As IEnumerable(Of TOuter), inner As IEnumerable(Of TInner), outerKeySelector As Func(Of TOuter, TKey), innerKeySelector As Func(Of TInner, TKey), resultSelector As Func(Of TOuter, TInner, TResult)) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOuter, typename TInner, typename TKey, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ Join(System::Collections::Generic::IEnumerable&lt;TOuter&gt; ^ outer, System::Collections::Generic::IEnumerable&lt;TInner&gt; ^ inner, Func&lt;TOuter, TKey&gt; ^ outerKeySelector, Func&lt;TInner, TKey&gt; ^ innerKeySelector, Func&lt;TOuter, TInner, TResult&gt; ^ resultSelector);" />
      <MemberSignature Language="F#" Value="static member Join : seq&lt;'Outer&gt; * seq&lt;'Inner&gt; * Func&lt;'Outer, 'Key&gt; * Func&lt;'Inner, 'Key&gt; * Func&lt;'Outer, 'Inner, 'Result&gt; -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.Join (outer, inner, outerKeySelector, innerKeySelector, resultSelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOuter" />
        <TypeParameter Name="TInner" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="outer" Type="System.Collections.Generic.IEnumerable&lt;TOuter&gt;" RefType="this" />
        <Parameter Name="inner" Type="System.Collections.Generic.IEnumerable&lt;TInner&gt;" />
        <Parameter Name="outerKeySelector" Type="System.Func&lt;TOuter,TKey&gt;" />
        <Parameter Name="innerKeySelector" Type="System.Func&lt;TInner,TKey&gt;" />
        <Parameter Name="resultSelector" Type="System.Func&lt;TOuter,TInner,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TOuter">
          <span data-ttu-id="e3165-908">Typ elementów pierwszej sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-908">The type of the elements of the first sequence.</span>
          </span>
        </typeparam>
        <typeparam name="TInner">
          <span data-ttu-id="e3165-909">Typ elementów drugiej sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-909">The type of the elements of the second sequence.</span>
          </span>
        </typeparam>
        <typeparam name="TKey">
          <span data-ttu-id="e3165-910">Typ kluczy zwracanych przez funkcje przełącznika kluczowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-910">The type of the keys returned by the key selector functions.</span>
          </span>
        </typeparam>
        <typeparam name="TResult">
          <span data-ttu-id="e3165-911">Typ elementów wyniku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-911">The type of the result elements.</span>
          </span>
        </typeparam>
        <param name="outer">
          <span data-ttu-id="e3165-912">Pierwsza sekwencja do przyłączenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-912">The first sequence to join.</span>
          </span>
        </param>
        <param name="inner">
          <span data-ttu-id="e3165-913">Sekwencja do przyłączenia do pierwszej sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-913">The sequence to join to the first sequence.</span>
          </span>
        </param>
        <param name="outerKeySelector">
          <span data-ttu-id="e3165-914">Funkcja wyodrębniania klucza łączenia z każdego elementu pierwszej sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-914">A function to extract the join key from each element of the first sequence.</span>
          </span>
        </param>
        <param name="innerKeySelector">
          <span data-ttu-id="e3165-915">Funkcja wyodrębniania klucza łączenia z każdego elementu drugiej sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-915">A function to extract the join key from each element of the second sequence.</span>
          </span>
        </param>
        <param name="resultSelector">
          <span data-ttu-id="e3165-916">Funkcja tworzenia elementu wynik z dwóch zgodnych elementów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-916">A function to create a result element from two matching elements.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-917">Koreluje elementy dwóch sekwencji na podstawie kluczy dopasowania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-917">Correlates the elements of two sequences based on matching keys.</span>
          </span>
          <span data-ttu-id="e3165-918">Domyślny moduł porównujący równość służy do porównywania kluczy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-918">The default equality comparer is used to compare keys.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-919">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Zawierający elementy typu <paramref name="TResult" /> , są pobierane, wykonując sprzężenie wewnętrzne na dwóch sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-919">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that has elements of type <paramref name="TResult" /> that are obtained by performing an inner join on two sequences.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-920">Ta metoda jest implementowana za pomocą odroczonego wykonania.</span><span class="sxs-lookup"><span data-stu-id="e3165-920">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="e3165-921">Bezpośrednio zwracana wartość jest obiektem, który przechowuje wszystkie informacje wymagane do wykonania akcji.</span><span class="sxs-lookup"><span data-stu-id="e3165-921">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="e3165-922">Zapytanie, reprezentowane przez tę metodę nie jest wykonywana do czasu, przez wywołanie obiekt jest zostanie wyliczonly jego `GetEnumerator` metoda bezpośrednio lub za pomocą `foreach` w języku Visual C# lub `For Each` w języku Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="e3165-922">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="e3165-923">Domyślny moduł porównujący równość, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, służy do wyznaczania wartości skrótu i porównywania kluczy.</span><span class="sxs-lookup"><span data-stu-id="e3165-923">The default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to hash and compare keys.</span></span>  
  
 <span data-ttu-id="e3165-924">Sprzężenia odnosi się do operacji korelacji elementy z dwóch źródeł danych na podstawie klucza wspólnego.</span><span class="sxs-lookup"><span data-stu-id="e3165-924">A join refers to the operation of correlating the elements of two sources of information based on a common key.</span></span> <span data-ttu-id="e3165-925"><xref:System.Linq.Enumerable.Join%2A> łączy dwa źródeł informacji i kluczy, według których są pasujące ze sobą w jednego wywołania metody.</span><span class="sxs-lookup"><span data-stu-id="e3165-925"><xref:System.Linq.Enumerable.Join%2A> brings the two information sources and the keys by which they are matched together in one method call.</span></span> <span data-ttu-id="e3165-926">To różni się od stosowania `SelectMany`, co wymaga więcej niż jedno wywołanie metody do wykonania tej samej operacji.</span><span class="sxs-lookup"><span data-stu-id="e3165-926">This differs from the use of `SelectMany`, which requires more than one method call to perform the same operation.</span></span>  
  
 <span data-ttu-id="e3165-927"><xref:System.Linq.Enumerable.Join%2A> zachowuje kolejność elementów `outer`i dla każdego z tych elementów, kolejność elementów zgodnych z `inner`.</span><span class="sxs-lookup"><span data-stu-id="e3165-927"><xref:System.Linq.Enumerable.Join%2A> preserves the order of the elements of `outer`, and for each of these elements, the order of the matching elements of `inner`.</span></span>  
  
 <span data-ttu-id="e3165-928">W składni wyrażeń zapytania `join` (Visual C#) lub `Join` — klauzula (Visual Basic) przekłada się na wywołanie <xref:System.Linq.Enumerable.Join%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-928">In query expression syntax, a `join` (Visual C#) or `Join` (Visual Basic) clause translates to an invocation of <xref:System.Linq.Enumerable.Join%2A>.</span></span>  
  
 <span data-ttu-id="e3165-929">W warunkach relacyjnej bazy danych <xref:System.Linq.Enumerable.Join%2A> metoda implementuje sprzężenie wewnętrzne.</span><span class="sxs-lookup"><span data-stu-id="e3165-929">In relational database terms, the <xref:System.Linq.Enumerable.Join%2A> method implements an inner equijoin.</span></span> <span data-ttu-id="e3165-930">"Wewnętrzny" oznacza, że tylko te elementy, które mają pasujących w innych kolejności są uwzględniane w wynikach.</span><span class="sxs-lookup"><span data-stu-id="e3165-930">'Inner' means that only elements that have a match in the other sequence are included in the results.</span></span> <span data-ttu-id="e3165-931">"Equijoin" jest elementem sprzężenia w którym klucze są porównywane pod kątem równości.</span><span class="sxs-lookup"><span data-stu-id="e3165-931">An 'equijoin' is a join in which the keys are compared for equality.</span></span> <span data-ttu-id="e3165-932">Lewe sprzężenie zewnętrzne operacja ma nie dedykowanych standardowego operatora zapytania, ale może przeprowadzić za pomocą <xref:System.Linq.Enumerable.GroupJoin%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="e3165-932">A left outer join operation has no dedicated standard query operator, but can be performed by using the <xref:System.Linq.Enumerable.GroupJoin%2A> method.</span></span> <span data-ttu-id="e3165-933">Zobacz [operacje połączone](https://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107).</span><span class="sxs-lookup"><span data-stu-id="e3165-933">See [Join Operations](https://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107).</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-934">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Join%60%604%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%603%7D%29> przeprowadzić sprzężenie wewnętrzne dwóch sekwencji na podstawie klucza wspólnego.</span><span class="sxs-lookup"><span data-stu-id="e3165-934">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Join%60%604%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Func%7B%60%601%2C%60%602%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%603%7D%29> to perform an inner join of two sequences based on a common key.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#42](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#42)]
 [!code-vb[System.Linq.Enumerable#42](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#42)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-935">
            <paramref name="outer" /> lub <paramref name="inner" /> lub <paramref name="outerKeySelector" /> lub <paramref name="innerKeySelector" /> lub <paramref name="resultSelector" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-935">
              <paramref name="outer" /> or <paramref name="inner" /> or <paramref name="outerKeySelector" /> or <paramref name="innerKeySelector" /> or <paramref name="resultSelector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107">
          <span data-ttu-id="e3165-936">Łączenie</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-936">Joining</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/76e9df84-092c-41a6-9537-c3f1cbd7f0fb">
          <span data-ttu-id="e3165-937">Klauzula join (odwołanie w C#)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-937">join clause (C# Reference)</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/6dd37936-b27c-4e00-98ad-154b23f4de64">
          <span data-ttu-id="e3165-938">Join — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-938">Join Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Join&lt;TOuter,TInner,TKey,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; Join&lt;TOuter,TInner,TKey,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TOuter&gt; outer, System.Collections.Generic.IEnumerable&lt;TInner&gt; inner, Func&lt;TOuter,TKey&gt; outerKeySelector, Func&lt;TInner,TKey&gt; innerKeySelector, Func&lt;TOuter,TInner,TResult&gt; resultSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; Join&lt;TOuter, TInner, TKey, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TOuter&gt; outer, class System.Collections.Generic.IEnumerable`1&lt;!!TInner&gt; inner, class System.Func`2&lt;!!TOuter, !!TKey&gt; outerKeySelector, class System.Func`2&lt;!!TInner, !!TKey&gt; innerKeySelector, class System.Func`3&lt;!!TOuter, !!TInner, !!TResult&gt; resultSelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Join``4(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``2},System.Func{``1,``2},System.Func{``0,``1,``3},System.Collections.Generic.IEqualityComparer{``2})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Join(Of TOuter, TInner, TKey, TResult) (outer As IEnumerable(Of TOuter), inner As IEnumerable(Of TInner), outerKeySelector As Func(Of TOuter, TKey), innerKeySelector As Func(Of TInner, TKey), resultSelector As Func(Of TOuter, TInner, TResult), comparer As IEqualityComparer(Of TKey)) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TOuter, typename TInner, typename TKey, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ Join(System::Collections::Generic::IEnumerable&lt;TOuter&gt; ^ outer, System::Collections::Generic::IEnumerable&lt;TInner&gt; ^ inner, Func&lt;TOuter, TKey&gt; ^ outerKeySelector, Func&lt;TInner, TKey&gt; ^ innerKeySelector, Func&lt;TOuter, TInner, TResult&gt; ^ resultSelector, System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member Join : seq&lt;'Outer&gt; * seq&lt;'Inner&gt; * Func&lt;'Outer, 'Key&gt; * Func&lt;'Inner, 'Key&gt; * Func&lt;'Outer, 'Inner, 'Result&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.Join (outer, inner, outerKeySelector, innerKeySelector, resultSelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TOuter" />
        <TypeParameter Name="TInner" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="outer" Type="System.Collections.Generic.IEnumerable&lt;TOuter&gt;" RefType="this" />
        <Parameter Name="inner" Type="System.Collections.Generic.IEnumerable&lt;TInner&gt;" />
        <Parameter Name="outerKeySelector" Type="System.Func&lt;TOuter,TKey&gt;" />
        <Parameter Name="innerKeySelector" Type="System.Func&lt;TInner,TKey&gt;" />
        <Parameter Name="resultSelector" Type="System.Func&lt;TOuter,TInner,TResult&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TOuter">
          <span data-ttu-id="e3165-939">Typ elementów pierwszej sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-939">The type of the elements of the first sequence.</span>
          </span>
        </typeparam>
        <typeparam name="TInner">
          <span data-ttu-id="e3165-940">Typ elementów drugiej sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-940">The type of the elements of the second sequence.</span>
          </span>
        </typeparam>
        <typeparam name="TKey">
          <span data-ttu-id="e3165-941">Typ kluczy zwracanych przez funkcje przełącznika kluczowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-941">The type of the keys returned by the key selector functions.</span>
          </span>
        </typeparam>
        <typeparam name="TResult">
          <span data-ttu-id="e3165-942">Typ elementów wyniku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-942">The type of the result elements.</span>
          </span>
        </typeparam>
        <param name="outer">
          <span data-ttu-id="e3165-943">Pierwsza sekwencja do przyłączenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-943">The first sequence to join.</span>
          </span>
        </param>
        <param name="inner">
          <span data-ttu-id="e3165-944">Sekwencja do przyłączenia do pierwszej sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-944">The sequence to join to the first sequence.</span>
          </span>
        </param>
        <param name="outerKeySelector">
          <span data-ttu-id="e3165-945">Funkcja wyodrębniania klucza łączenia z każdego elementu pierwszej sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-945">A function to extract the join key from each element of the first sequence.</span>
          </span>
        </param>
        <param name="innerKeySelector">
          <span data-ttu-id="e3165-946">Funkcja wyodrębniania klucza łączenia z każdego elementu drugiej sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-946">A function to extract the join key from each element of the second sequence.</span>
          </span>
        </param>
        <param name="resultSelector">
          <span data-ttu-id="e3165-947">Funkcja tworzenia elementu wynik z dwóch zgodnych elementów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-947">A function to create a result element from two matching elements.</span>
          </span>
        </param>
        <param name="comparer">
          <span data-ttu-id="e3165-948">
            <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> Wyznaczania wartości skrótu do porównywania kluczy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-948">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to hash and compare keys.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-949">Koreluje elementy dwóch sekwencji na podstawie kluczy dopasowania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-949">Correlates the elements of two sequences based on matching keys.</span>
          </span>
          <span data-ttu-id="e3165-950">Określonego <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> służy do porównywania kluczy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-950">A specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> is used to compare keys.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-951">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Zawierający elementy typu <paramref name="TResult" /> , są pobierane, wykonując sprzężenie wewnętrzne na dwóch sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-951">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that has elements of type <paramref name="TResult" /> that are obtained by performing an inner join on two sequences.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-952">Ta metoda jest implementowana za pomocą odroczonego wykonania.</span><span class="sxs-lookup"><span data-stu-id="e3165-952">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="e3165-953">Bezpośrednio zwracana wartość jest obiektem, który przechowuje wszystkie informacje wymagane do wykonania akcji.</span><span class="sxs-lookup"><span data-stu-id="e3165-953">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="e3165-954">Zapytanie, reprezentowane przez tę metodę nie jest wykonywana do czasu, przez wywołanie obiekt jest zostanie wyliczonly jego `GetEnumerator` metoda bezpośrednio lub za pomocą `foreach` w języku Visual C# lub `For Each` w języku Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="e3165-954">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="e3165-955">Jeśli `comparer` jest `null`, domyślny moduł porównujący równość, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, służy do wyznaczania wartości skrótu i porównywania kluczy.</span><span class="sxs-lookup"><span data-stu-id="e3165-955">If `comparer` is `null`, the default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to hash and compare keys.</span></span>  
  
 <span data-ttu-id="e3165-956">Sprzężenia odnosi się do operacji korelacji elementy z dwóch źródeł danych na podstawie klucza wspólnego.</span><span class="sxs-lookup"><span data-stu-id="e3165-956">A join refers to the operation of correlating the elements of two sources of information based on a common key.</span></span> <span data-ttu-id="e3165-957"><xref:System.Linq.Enumerable.Join%2A> łączy dwa źródeł informacji i kluczy, według których są pasujące ze sobą w jednego wywołania metody.</span><span class="sxs-lookup"><span data-stu-id="e3165-957"><xref:System.Linq.Enumerable.Join%2A> brings the two information sources and the keys by which they are matched together in one method call.</span></span> <span data-ttu-id="e3165-958">To różni się od stosowania `SelectMany`, co wymaga więcej niż jedno wywołanie metody do wykonania tej samej operacji.</span><span class="sxs-lookup"><span data-stu-id="e3165-958">This differs from the use of `SelectMany`, which requires more than one method call to perform the same operation.</span></span>  
  
 <span data-ttu-id="e3165-959"><xref:System.Linq.Enumerable.Join%2A> zachowuje kolejność elementów `outer`i dla każdego z tych elementów, kolejność elementów zgodnych z `inner`.</span><span class="sxs-lookup"><span data-stu-id="e3165-959"><xref:System.Linq.Enumerable.Join%2A> preserves the order of the elements of `outer`, and for each of these elements, the order of the matching elements of `inner`.</span></span>  
  
 <span data-ttu-id="e3165-960">W warunkach relacyjnej bazy danych <xref:System.Linq.Enumerable.Join%2A> metoda implementuje sprzężenie wewnętrzne.</span><span class="sxs-lookup"><span data-stu-id="e3165-960">In relational database terms, the <xref:System.Linq.Enumerable.Join%2A> method implements an inner equijoin.</span></span> <span data-ttu-id="e3165-961">"Wewnętrzny" oznacza, że tylko te elementy, które mają pasujących w innych kolejności są uwzględniane w wynikach.</span><span class="sxs-lookup"><span data-stu-id="e3165-961">'Inner' means that only elements that have a match in the other sequence are included in the results.</span></span> <span data-ttu-id="e3165-962">"Equijoin" jest elementem sprzężenia w którym klucze są porównywane pod kątem równości.</span><span class="sxs-lookup"><span data-stu-id="e3165-962">An 'equijoin' is a join in which the keys are compared for equality.</span></span> <span data-ttu-id="e3165-963">Lewe sprzężenie zewnętrzne operacja ma nie dedykowanych standardowego operatora zapytania, ale może przeprowadzić za pomocą <xref:System.Linq.Enumerable.GroupJoin%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="e3165-963">A left outer join operation has no dedicated standard query operator, but can be performed by using the <xref:System.Linq.Enumerable.GroupJoin%2A> method.</span></span> <span data-ttu-id="e3165-964">Zobacz [operacje połączone](https://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107).</span><span class="sxs-lookup"><span data-stu-id="e3165-964">See [Join Operations](https://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107).</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-965">
            <paramref name="outer" /> lub <paramref name="inner" /> lub <paramref name="outerKeySelector" /> lub <paramref name="innerKeySelector" /> lub <paramref name="resultSelector" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-965">
              <paramref name="outer" /> or <paramref name="inner" /> or <paramref name="outerKeySelector" /> or <paramref name="innerKeySelector" /> or <paramref name="resultSelector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/442d176d-028c-4beb-8d22-407d4ef89107">
          <span data-ttu-id="e3165-966">Łączenie</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-966">Joining</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Last&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e3165-967">Zwraca ostatni element sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-967">Returns the last element of a sequence.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Last&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource Last&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource Last&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Last(Of TSource) (source As IEnumerable(Of TSource)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource Last(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Last : seq&lt;'Source&gt; -&gt; 'Source" Usage="System.Linq.Enumerable.Last source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-968">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-968">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-969">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Do ostatniego elementu do zwrócenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-969">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return the last element of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-970">Zwraca ostatni element sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-970">Returns the last element of a sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-971">Wartość na ostatniej pozycji w sekwencji źródłowej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-971">The value at the last position in the source sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-972"><xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> Metoda zgłasza wyjątek, jeśli `source` nie zawiera żadnych elementów.</span><span class="sxs-lookup"><span data-stu-id="e3165-972">The <xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> method throws an exception if `source` contains no elements.</span></span> <span data-ttu-id="e3165-973">Aby zamiast tego należy przywrócić wartość domyślną, jeśli sekwencja źródłowa jest pusta, należy użyć <xref:System.Linq.Enumerable.LastOrDefault%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="e3165-973">To instead return a default value when the source sequence is empty, use the <xref:System.Linq.Enumerable.LastOrDefault%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-974">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> do ostatniego elementu w tablicy do zwrócenia.</span><span class="sxs-lookup"><span data-stu-id="e3165-974">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to return the last element of an array.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#43](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#43)]
 [!code-vb[System.Linq.Enumerable#43](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#43)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-975">
            <paramref name="source" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-975">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e3165-976">Sekwencja źródłowa jest pusta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-976">The source sequence is empty.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Last&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource Last&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource Last&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Last``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Last(Of TSource) (source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource Last(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member Last : seq&lt;'Source&gt; * Func&lt;'Source, bool&gt; -&gt; 'Source" Usage="System.Linq.Enumerable.Last (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-977">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-977">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-978">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Do zwrotu elementu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-978">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return an element from.</span>
          </span>
        </param>
        <param name="predicate">
          <span data-ttu-id="e3165-979">Funkcja testowania każdego elementu na stanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-979">A function to test each element for a condition.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-980">Zwraca ostatni element sekwencji która spełnia określony warunek.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-980">Returns the last element of a sequence that satisfies a specified condition.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-981">Ostatniego elementu w sekwencji, do której przejdzie test w określonej funkcji predykatu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-981">The last element in the sequence that passes the test in the specified predicate function.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-982"><xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> Metoda zgłasza wyjątek, jeśli nie znaleziono w `source`.</span><span class="sxs-lookup"><span data-stu-id="e3165-982">The <xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> method throws an exception if no matching element is found in `source`.</span></span> <span data-ttu-id="e3165-983">Zamiast tego należy zwrócić wartość domyślną, gdy zostanie znaleziony żaden element dopasowania, <xref:System.Linq.Enumerable.LastOrDefault%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="e3165-983">To instead return a default value when no matching element is found, use the <xref:System.Linq.Enumerable.LastOrDefault%2A> method.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-984">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> do zwrócenia ostatniego elementu w tablicy, która spełnia warunek.</span><span class="sxs-lookup"><span data-stu-id="e3165-984">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> to return the last element of an array that satisfies a condition.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#44](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#44)]
 [!code-vb[System.Linq.Enumerable#44](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#44)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-985">
            <paramref name="source" /> lub <paramref name="predicate" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-985">
              <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e3165-986">Element nie spełnia warunku w <paramref name="predicate" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-986">No element satisfies the condition in <paramref name="predicate" />.</span>
          </span>
          <span data-ttu-id="e3165-987">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-987">-or-</span>
          </span>
          <span data-ttu-id="e3165-988">Sekwencja źródłowa jest pusta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-988">The source sequence is empty.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="LastOrDefault&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e3165-989">Zwraca ostatni element sekwencji lub wartość domyślną, jeśli zostanie znaleziony żaden element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-989">Returns the last element of a sequence, or a default value if no element is found.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LastOrDefault&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource LastOrDefault&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource LastOrDefault&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LastOrDefault(Of TSource) (source As IEnumerable(Of TSource)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource LastOrDefault(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member LastOrDefault : seq&lt;'Source&gt; -&gt; 'Source" Usage="System.Linq.Enumerable.LastOrDefault source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-990">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-990">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-991">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Do ostatniego elementu do zwrócenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-991">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return the last element of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-992">Zwraca ostatni element sekwencji lub wartość domyślną, jeśli sekwencja nie zawiera żadnych elementów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-992">Returns the last element of a sequence, or a default value if the sequence contains no elements.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-993">
            <see langword="default" />(<paramref name="TSource" />) Jeśli sekwencja źródłowa jest pusta; w przeciwnym razie po ostatnim elemencie w <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-993">
              <see langword="default" />(<paramref name="TSource" />) if the source sequence is empty; otherwise, the last element in the <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-994">Wartością domyślną dla odwołania i typów zerowalnych jest `null`.</span><span class="sxs-lookup"><span data-stu-id="e3165-994">The default value for reference and nullable types is `null`.</span></span>  
  
 <span data-ttu-id="e3165-995"><xref:System.Linq.Enumerable.LastOrDefault%2A> Metody nie umożliwiają określenie wartości domyślnej.</span><span class="sxs-lookup"><span data-stu-id="e3165-995">The <xref:System.Linq.Enumerable.LastOrDefault%2A> method does not provide a way to specify a default value.</span></span> <span data-ttu-id="e3165-996">Jeśli chcesz określić inne niż wartości domyślnej `default(TSource)`, użyj <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> metoda zgodnie z opisem w sekcji przykład.</span><span class="sxs-lookup"><span data-stu-id="e3165-996">If you want to specify a default value other than `default(TSource)`, use the <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> method as described in the Example section.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-997">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.LastOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> na pustą tablicę.</span><span class="sxs-lookup"><span data-stu-id="e3165-997">The following code example demonstrates how to use <xref:System.Linq.Enumerable.LastOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> on an empty array.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#45](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#45)]
 [!code-vb[System.Linq.Enumerable#45](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#45)]  
  
 <span data-ttu-id="e3165-998">Czasami wartość `default(TSource)` nie jest wartością domyślną, którego chcesz użyć, jeśli kolekcja zawiera żadnych elementów.</span><span class="sxs-lookup"><span data-stu-id="e3165-998">Sometimes the value of `default(TSource)` is not the default value that you want to use if the collection contains no elements.</span></span> <span data-ttu-id="e3165-999">Zamiast sprawdzania wyników dla wartości domyślnej niepożądane, a następnie zmieniając go, jeśli to konieczne, możesz użyć <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> metodę, aby określić wartość domyślną, którą chcesz użyć, jeśli kolekcja jest pusta.</span><span class="sxs-lookup"><span data-stu-id="e3165-999">Instead of checking the result for the unwanted default value and then changing it if necessary, you can use the <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> method to specify the default value that you want to use if the collection is empty.</span></span> <span data-ttu-id="e3165-1000">Następnie wywołaj <xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> można uzyskać po ostatnim elemencie.</span><span class="sxs-lookup"><span data-stu-id="e3165-1000">Then, call <xref:System.Linq.Enumerable.Last%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to obtain the last element.</span></span> <span data-ttu-id="e3165-1001">W poniższym przykładzie kodu użyto obu tych technik uzyskanie domyślną wartość 1, jeśli kolekcja liczbowych dni miesiąca jest pusta.</span><span class="sxs-lookup"><span data-stu-id="e3165-1001">The following code example uses both techniques to obtain a default value of 1 if a collection of numeric days of the month is empty.</span></span> <span data-ttu-id="e3165-1002">Całkowitą wartość domyślna to 0, co nie odpowiada każdego dnia, miesiąca, wartość domyślna musi zostać określony jako 1 zamiast tego.</span><span class="sxs-lookup"><span data-stu-id="e3165-1002">Because the default value for an integer is 0, which does not correspond to any day of the month, the default value must be specified as 1 instead.</span></span> <span data-ttu-id="e3165-1003">Pierwszy zmiennej wynikowej są sprawdzane pod kątem wartość domyślną niepożądane, po zakończeniu zapytania podczas wykonywania.</span><span class="sxs-lookup"><span data-stu-id="e3165-1003">The first result variable is checked for the unwanted default value after the query has finished executing.</span></span> <span data-ttu-id="e3165-1004">Druga zmienna wyniku uzyskuje się za pomocą <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> można określić wartość domyślną 1.</span><span class="sxs-lookup"><span data-stu-id="e3165-1004">The second result variable is obtained by using <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> to specify a default value of 1.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#127](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#127)]
 [!code-vb[System.Linq.Enumerable#127](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#127)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-1005">
            <paramref name="source" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1005">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="LastOrDefault&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource LastOrDefault&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource LastOrDefault&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.LastOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LastOrDefault(Of TSource) (source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource LastOrDefault(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member LastOrDefault : seq&lt;'Source&gt; * Func&lt;'Source, bool&gt; -&gt; 'Source" Usage="System.Linq.Enumerable.LastOrDefault (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-1006">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1006">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-1007">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Do zwrotu elementu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1007">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return an element from.</span>
          </span>
        </param>
        <param name="predicate">
          <span data-ttu-id="e3165-1008">Funkcja testowania każdego elementu na stanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1008">A function to test each element for a condition.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-1009">Zwraca ostatni element sekwencji która spełnia warunek, lub wartość domyślną, jeśli taki element nie zostanie znaleziony.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1009">Returns the last element of a sequence that satisfies a condition or a default value if no such element is found.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-1010">
            <see langword="default" />(<paramref name="TSource" />) Jeśli sekwencji jest pusta lub jeśli żadne elementy przeszedł test w funkcji predykatu; w przeciwnym razie po ostatnim elemencie, który przekazuje testu w funkcji predykatu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1010">
              <see langword="default" />(<paramref name="TSource" />) if the sequence is empty or if no elements pass the test in the predicate function; otherwise, the last element that passes the test in the predicate function.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-1011">Wartością domyślną dla odwołania i typów zerowalnych jest `null`.</span><span class="sxs-lookup"><span data-stu-id="e3165-1011">The default value for reference and nullable types is `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-1012">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.LastOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> , przekazując w predykacie.</span><span class="sxs-lookup"><span data-stu-id="e3165-1012">The following code example demonstrates how to use <xref:System.Linq.Enumerable.LastOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> by passing in a predicate.</span></span> <span data-ttu-id="e3165-1013">W drugim wywołaniu do metody nie ma żadnego elementu w sekwencji, który spełnia warunek.</span><span class="sxs-lookup"><span data-stu-id="e3165-1013">In the second call to the method, there is no element in the sequence that satisfies the condition.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#46](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#46)]
 [!code-vb[System.Linq.Enumerable#46](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#46)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-1014">
            <paramref name="source" /> lub <paramref name="predicate" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1014">
              <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="LongCount&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e3165-1015">Zwraca <see cref="T:System.Int64" /> reprezentujący liczbę elementów w sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1015">Returns an <see cref="T:System.Int64" /> that represents the number of elements in a sequence.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="LongCount&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static long LongCount&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 LongCount&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LongCount(Of TSource) (source As IEnumerable(Of TSource)) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static long LongCount(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member LongCount : seq&lt;'Source&gt; -&gt; int64" Usage="System.Linq.Enumerable.LongCount source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-1016">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1016">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-1017">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Zawiera elementy do zliczenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1017">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements to be counted.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-1018">Zwraca <see cref="T:System.Int64" /> reprezentujący całkowitą liczbę elementów w sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1018">Returns an <see cref="T:System.Int64" /> that represents the total number of elements in a sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-1019">Liczba elementów w sekwencji źródłowej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1019">The number of elements in the source sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-1020">Użyj tej metody, zamiast <xref:System.Linq.Enumerable.Count%2A> jeśli oczekujesz, że wynik, który ma być większa niż <xref:System.Int32.MaxValue>.</span><span class="sxs-lookup"><span data-stu-id="e3165-1020">Use this method rather than <xref:System.Linq.Enumerable.Count%2A> when you expect the result to be greater than <xref:System.Int32.MaxValue>.</span></span>  
  
 <span data-ttu-id="e3165-1021">W składni wyrażeń zapytania języka Visual Basic `Aggregate Into LongCount()` klauzuli przekłada się na wywołanie <xref:System.Linq.Enumerable.LongCount%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-1021">In Visual Basic query expression syntax, an `Aggregate Into LongCount()` clause translates to an invocation of <xref:System.Linq.Enumerable.LongCount%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-1022">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.LongCount%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> zliczania elementów w tablicy.</span><span class="sxs-lookup"><span data-stu-id="e3165-1022">The following code example demonstrates how to use <xref:System.Linq.Enumerable.LongCount%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to count the elements in an array.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#47](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#47)]
 [!code-vb[System.Linq.Enumerable#47](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#47)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-1023">
            <paramref name="source" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1023">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="e3165-1024">Liczba elementów przekracza <see cref="F:System.Int64.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1024">The number of elements exceeds <see cref="F:System.Int64.MaxValue" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="e3165-1025">Aggregate — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1025">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="LongCount&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static long LongCount&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 LongCount&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.LongCount``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function LongCount(Of TSource) (source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static long LongCount(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member LongCount : seq&lt;'Source&gt; * Func&lt;'Source, bool&gt; -&gt; int64" Usage="System.Linq.Enumerable.LongCount (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-1026">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1026">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-1027">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Zawiera elementy do zliczenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1027">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements to be counted.</span>
          </span>
        </param>
        <param name="predicate">
          <span data-ttu-id="e3165-1028">Funkcja testowania każdego elementu na stanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1028">A function to test each element for a condition.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-1029">Zwraca <see cref="T:System.Int64" /> reprezentujący liczbę elementów w sekwencji spełniają warunek.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1029">Returns an <see cref="T:System.Int64" /> that represents how many elements in a sequence satisfy a condition.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-1030">Liczba, która przedstawia, jak wiele elementów w sekwencji spełniają warunek w funkcji predykatu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1030">A number that represents how many elements in the sequence satisfy the condition in the predicate function.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-1031">Użyj tej metody, zamiast <xref:System.Linq.Enumerable.Count%2A> jeśli oczekujesz, że wynik, który ma być większa niż <xref:System.Int32.MaxValue>.</span><span class="sxs-lookup"><span data-stu-id="e3165-1031">Use this method rather than <xref:System.Linq.Enumerable.Count%2A> when you expect the result to be greater than <xref:System.Int32.MaxValue>.</span></span>  
  
 <span data-ttu-id="e3165-1032">W składni wyrażeń zapytania języka Visual Basic `Aggregate Into LongCount()` klauzuli przekłada się na wywołanie <xref:System.Linq.Enumerable.LongCount%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-1032">In Visual Basic query expression syntax, an `Aggregate Into LongCount()` clause translates to an invocation of <xref:System.Linq.Enumerable.LongCount%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-1033">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.LongCount%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> zliczania elementów w tablicy, które spełniają warunek.</span><span class="sxs-lookup"><span data-stu-id="e3165-1033">The following code example demonstrates how to use <xref:System.Linq.Enumerable.LongCount%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> to count the elements in an array that satisfy a condition.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#48](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#48)]
 [!code-vb[System.Linq.Enumerable#48](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#48)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-1034">
            <paramref name="source" /> lub <paramref name="predicate" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1034">
              <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="e3165-1035">Liczba zgodnych elementów przekracza <see cref="F:System.Int64.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1035">The number of matching elements exceeds <see cref="F:System.Int64.MaxValue" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="e3165-1036">Aggregate — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1036">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Max">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e3165-1037">Zwraca maksymalną wartość w sekwencji wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1037">Returns the maximum value in a sequence of values.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static decimal Max (this System.Collections.Generic.IEnumerable&lt;decimal&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Max(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Decimal&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Decimal})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max (source As IEnumerable(Of Decimal)) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Decimal Max(System::Collections::Generic::IEnumerable&lt;System::Decimal&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;decimal&gt; -&gt; decimal" Usage="System.Linq.Enumerable.Max source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Decimal&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="e3165-1038">Sekwencja <see cref="T:System.Decimal" /> wartości do określenia maksymalnej wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1038">A sequence of <see cref="T:System.Decimal" /> values to determine the maximum value of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-1039">Zwraca maksymalną wartość w sekwencji <see cref="T:System.Decimal" /> wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1039">Returns the maximum value in a sequence of <see cref="T:System.Decimal" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-1040">Maksymalna wartość w sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1040">The maximum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-1041"><xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Decimal%7D%29> Metoda używa <xref:System.Decimal> implementacji <xref:System.IComparable%601> do porównywania wartości.</span><span class="sxs-lookup"><span data-stu-id="e3165-1041">The <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Decimal%7D%29> method uses the <xref:System.Decimal> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="e3165-1042">W składni wyrażeń zapytania języka Visual Basic `Aggregate Into Max()` klauzuli przekłada się na wywołanie <xref:System.Linq.Enumerable.Max%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-1042">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-1043">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29> można określić maksymalną wartość w sekwencji.</span><span class="sxs-lookup"><span data-stu-id="e3165-1043">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29> to determine the maximum value in a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#52](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#52)]
 [!code-vb[System.Linq.Enumerable#52](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-1044">
            <paramref name="source" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1044">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e3165-1045">
            <paramref name="source" /> nie zawiera żadnych elementów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1045">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="e3165-1046">Aggregate — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1046">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static double Max (this System.Collections.Generic.IEnumerable&lt;double&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Max(class System.Collections.Generic.IEnumerable`1&lt;float64&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Double})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max (source As IEnumerable(Of Double)) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static double Max(System::Collections::Generic::IEnumerable&lt;double&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;double&gt; -&gt; double" Usage="System.Linq.Enumerable.Max source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Double&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="e3165-1047">Sekwencja <see cref="T:System.Double" /> wartości do określenia maksymalnej wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1047">A sequence of <see cref="T:System.Double" /> values to determine the maximum value of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-1048">Zwraca maksymalną wartość w sekwencji <see cref="T:System.Double" /> wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1048">Returns the maximum value in a sequence of <see cref="T:System.Double" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-1049">Maksymalna wartość w sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1049">The maximum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-1050"><xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29> Metoda używa <xref:System.Double> implementacji <xref:System.IComparable%601> do porównywania wartości.</span><span class="sxs-lookup"><span data-stu-id="e3165-1050">The <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29> method uses the <xref:System.Double> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="e3165-1051">W składni wyrażeń zapytania języka Visual Basic `Aggregate Into Max()` klauzuli przekłada się na wywołanie <xref:System.Linq.Enumerable.Max%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-1051">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-1052">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29> można określić maksymalną wartość w sekwencji.</span><span class="sxs-lookup"><span data-stu-id="e3165-1052">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29> to determine the maximum value in a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#52](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#52)]
 [!code-vb[System.Linq.Enumerable#52](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-1053">
            <paramref name="source" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1053">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e3165-1054">
            <paramref name="source" /> nie zawiera żadnych elementów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1054">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="e3165-1055">Aggregate — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1055">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static int Max (this System.Collections.Generic.IEnumerable&lt;int&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Max(class System.Collections.Generic.IEnumerable`1&lt;int32&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max (source As IEnumerable(Of Integer)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int Max(System::Collections::Generic::IEnumerable&lt;int&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;int&gt; -&gt; int" Usage="System.Linq.Enumerable.Max source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Int32&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="e3165-1056">Sekwencja <see cref="T:System.Int32" /> wartości do określenia maksymalnej wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1056">A sequence of <see cref="T:System.Int32" /> values to determine the maximum value of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-1057">Zwraca maksymalną wartość w sekwencji <see cref="T:System.Int32" /> wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1057">Returns the maximum value in a sequence of <see cref="T:System.Int32" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-1058">Maksymalna wartość w sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1058">The maximum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-1059"><xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29> Metoda używa <xref:System.Int32> implementacji <xref:System.IComparable%601> do porównywania wartości.</span><span class="sxs-lookup"><span data-stu-id="e3165-1059">The <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29> method uses the <xref:System.Int32> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="e3165-1060">W składni wyrażeń zapytania języka Visual Basic `Aggregate Into Max()` klauzuli przekłada się na wywołanie <xref:System.Linq.Enumerable.Max%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-1060">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-1061">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29> można określić maksymalną wartość w sekwencji.</span><span class="sxs-lookup"><span data-stu-id="e3165-1061">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29> to determine the maximum value in a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#52](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#52)]
 [!code-vb[System.Linq.Enumerable#52](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-1062">
            <paramref name="source" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1062">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e3165-1063">
            <paramref name="source" /> nie zawiera żadnych elementów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1063">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="e3165-1064">Aggregate — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1064">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static long Max (this System.Collections.Generic.IEnumerable&lt;long&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Max(class System.Collections.Generic.IEnumerable`1&lt;int64&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Int64})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max (source As IEnumerable(Of Long)) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static long Max(System::Collections::Generic::IEnumerable&lt;long&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;int64&gt; -&gt; int64" Usage="System.Linq.Enumerable.Max source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Int64&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="e3165-1065">Sekwencja <see cref="T:System.Int64" /> wartości do określenia maksymalnej wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1065">A sequence of <see cref="T:System.Int64" /> values to determine the maximum value of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-1066">Zwraca maksymalną wartość w sekwencji <see cref="T:System.Int64" /> wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1066">Returns the maximum value in a sequence of <see cref="T:System.Int64" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-1067">Maksymalna wartość w sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1067">The maximum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-1068"><xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29> Metoda używa <xref:System.Int64> implementacji <xref:System.IComparable%601> do porównywania wartości.</span><span class="sxs-lookup"><span data-stu-id="e3165-1068">The <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29> method uses the <xref:System.Int64> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="e3165-1069">W składni wyrażeń zapytania języka Visual Basic `Aggregate Into Max()` klauzuli przekłada się na wywołanie <xref:System.Linq.Enumerable.Max%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-1069">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-1070">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29> można określić maksymalną wartość w sekwencji.</span><span class="sxs-lookup"><span data-stu-id="e3165-1070">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29> to determine the maximum value in a sequence.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#52](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#52)]
 [!code-vb[System.Linq.Enumerable#52](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-1071">
            <paramref name="source" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1071">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e3165-1072">
            <paramref name="source" /> nie zawiera żadnych elementów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1072">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="e3165-1073">Aggregate — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1073">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static Nullable&lt;decimal&gt; Max (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;decimal&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype System.Decimal&gt; Max(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max (source As IEnumerable(Of Nullable(Of Decimal))) As Nullable(Of Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;System::Decimal&gt; Max(System::Collections::Generic::IEnumerable&lt;Nullable&lt;System::Decimal&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;Nullable&lt;decimal&gt;&gt; -&gt; Nullable&lt;decimal&gt;" Usage="System.Linq.Enumerable.Max source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Decimal&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="e3165-1074">Sekwencja nullable <see cref="T:System.Decimal" /> wartości do określenia maksymalnej wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1074">A sequence of nullable <see cref="T:System.Decimal" /> values to determine the maximum value of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-1075">Zwraca maksymalną wartość w sekwencji nullable <see cref="T:System.Decimal" /> wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1075">Returns the maximum value in a sequence of nullable <see cref="T:System.Decimal" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-1076">Wartości typu <c>Nullable&lt;dziesiętna&gt;</c> w języku C# lub <c>Nullable (z dziesiętna)</c> w języku Visual Basic, który odpowiada maksymalną wartość w sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1076">A value of type <c>Nullable&lt;Decimal&gt;</c> in C# or <c>Nullable(Of Decimal)</c> in Visual Basic that corresponds to the maximum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-1077"><xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29> Metoda używa <xref:System.Decimal> implementacji <xref:System.IComparable%601> do porównywania wartości.</span><span class="sxs-lookup"><span data-stu-id="e3165-1077">The <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29> method uses the <xref:System.Decimal> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="e3165-1078">Jeśli sekwencja źródłowa jest pusta lub zawiera tylko wartości, które są `null`, ta funkcja zwraca `null`.</span><span class="sxs-lookup"><span data-stu-id="e3165-1078">If the source sequence is empty or contains only values that are `null`, this function returns `null`.</span></span>  
  
 <span data-ttu-id="e3165-1079">W składni wyrażeń zapytania języka Visual Basic `Aggregate Into Max()` klauzuli przekłada się na wywołanie <xref:System.Linq.Enumerable.Max%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-1079">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-1080">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> można określić maksymalną wartość w sekwencji.</span><span class="sxs-lookup"><span data-stu-id="e3165-1080">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> to determine the maximum value in a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#54](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#54)]
 [!code-vb[System.Linq.Enumerable#54](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-1081">
            <paramref name="source" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1081">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="e3165-1082">Aggregate — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1082">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Max (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;double&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Max(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;float64&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max (source As IEnumerable(Of Nullable(Of Double))) As Nullable(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;double&gt; Max(System::Collections::Generic::IEnumerable&lt;Nullable&lt;double&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;Nullable&lt;double&gt;&gt; -&gt; Nullable&lt;double&gt;" Usage="System.Linq.Enumerable.Max source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Double&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="e3165-1083">Sekwencja nullable <see cref="T:System.Double" /> wartości do określenia maksymalnej wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1083">A sequence of nullable <see cref="T:System.Double" /> values to determine the maximum value of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-1084">Zwraca maksymalną wartość w sekwencji nullable <see cref="T:System.Double" /> wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1084">Returns the maximum value in a sequence of nullable <see cref="T:System.Double" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-1085">Wartości typu <c>Nullable&lt;Double&gt;</c> w języku C# lub <c>Nullable (z Double)</c> w języku Visual Basic, który odpowiada maksymalną wartość w sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1085">A value of type <c>Nullable&lt;Double&gt;</c> in C# or <c>Nullable(Of Double)</c> in Visual Basic that corresponds to the maximum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-1086"><xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> Metoda używa <xref:System.Double> implementacji <xref:System.IComparable%601> do porównywania wartości.</span><span class="sxs-lookup"><span data-stu-id="e3165-1086">The <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> method uses the <xref:System.Double> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="e3165-1087">Jeśli sekwencja źródłowa jest pusta lub zawiera tylko wartości, które są `null`, ta funkcja zwraca `null`.</span><span class="sxs-lookup"><span data-stu-id="e3165-1087">If the source sequence is empty or contains only values that are `null`, this function returns `null`.</span></span>  
  
 <span data-ttu-id="e3165-1088">W składni wyrażeń zapytania języka Visual Basic `Aggregate Into Max()` klauzuli przekłada się na wywołanie <xref:System.Linq.Enumerable.Max%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-1088">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-1089">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> można określić maksymalną wartość w sekwencji.</span><span class="sxs-lookup"><span data-stu-id="e3165-1089">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> to determine the maximum value in a sequence.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#54](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#54)]
 [!code-vb[System.Linq.Enumerable#54](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-1090">
            <paramref name="source" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1090">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="e3165-1091">Aggregate — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1091">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static Nullable&lt;int&gt; Max (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;int&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int32&gt; Max(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;int32&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max (source As IEnumerable(Of Nullable(Of Integer))) As Nullable(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;int&gt; Max(System::Collections::Generic::IEnumerable&lt;Nullable&lt;int&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;Nullable&lt;int&gt;&gt; -&gt; Nullable&lt;int&gt;" Usage="System.Linq.Enumerable.Max source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Int32&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="e3165-1092">Sekwencja nullable <see cref="T:System.Int32" /> wartości do określenia maksymalnej wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1092">A sequence of nullable <see cref="T:System.Int32" /> values to determine the maximum value of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-1093">Zwraca maksymalną wartość w sekwencji nullable <see cref="T:System.Int32" /> wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1093">Returns the maximum value in a sequence of nullable <see cref="T:System.Int32" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-1094">Wartości typu <c>Nullable&lt;Int32&gt;</c> w języku C# lub <c>Nullable (typu Int32)</c> w języku Visual Basic, który odpowiada maksymalną wartość w sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1094">A value of type <c>Nullable&lt;Int32&gt;</c> in C# or <c>Nullable(Of Int32)</c> in Visual Basic that corresponds to the maximum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-1095"><xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> Metoda używa <xref:System.Int32> implementacji <xref:System.IComparable%601> do porównywania wartości.</span><span class="sxs-lookup"><span data-stu-id="e3165-1095">The <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> method uses the <xref:System.Int32> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="e3165-1096">Jeśli sekwencja źródłowa jest pusta lub zawiera tylko wartości, które są `null`, ta funkcja zwraca `null`.</span><span class="sxs-lookup"><span data-stu-id="e3165-1096">If the source sequence is empty or contains only values that are `null`, this function returns `null`.</span></span>  
  
 <span data-ttu-id="e3165-1097">W składni wyrażeń zapytania języka Visual Basic `Aggregate Into Max()` klauzuli przekłada się na wywołanie <xref:System.Linq.Enumerable.Max%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-1097">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-1098">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> można określić maksymalną wartość w sekwencji.</span><span class="sxs-lookup"><span data-stu-id="e3165-1098">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> to determine the maximum value in a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#54](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#54)]
 [!code-vb[System.Linq.Enumerable#54](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-1099">
            <paramref name="source" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1099">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="e3165-1100">Aggregate — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1100">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static Nullable&lt;long&gt; Max (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;long&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int64&gt; Max(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;int64&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max (source As IEnumerable(Of Nullable(Of Long))) As Nullable(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;long&gt; Max(System::Collections::Generic::IEnumerable&lt;Nullable&lt;long&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;Nullable&lt;int64&gt;&gt; -&gt; Nullable&lt;int64&gt;" Usage="System.Linq.Enumerable.Max source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Int64&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="e3165-1101">Sekwencja nullable <see cref="T:System.Int64" /> wartości do określenia maksymalnej wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1101">A sequence of nullable <see cref="T:System.Int64" /> values to determine the maximum value of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-1102">Zwraca maksymalną wartość w sekwencji nullable <see cref="T:System.Int64" /> wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1102">Returns the maximum value in a sequence of nullable <see cref="T:System.Int64" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-1103">Wartości typu <c>Nullable&lt;Int64&gt;</c> w języku C# lub <c>Nullable (z Int64)</c> w języku Visual Basic, który odpowiada maksymalną wartość w sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1103">A value of type <c>Nullable&lt;Int64&gt;</c> in C# or <c>Nullable(Of Int64)</c> in Visual Basic that corresponds to the maximum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-1104"><xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> Metoda używa <xref:System.Int64> implementacji <xref:System.IComparable%601> do porównywania wartości.</span><span class="sxs-lookup"><span data-stu-id="e3165-1104">The <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> method uses the <xref:System.Int64> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="e3165-1105">Jeśli sekwencja źródłowa jest pusta lub zawiera tylko wartości, które są `null`, ta funkcja zwraca `null`.</span><span class="sxs-lookup"><span data-stu-id="e3165-1105">If the source sequence is empty or contains only values that are `null`, this function returns `null`.</span></span>  
  
 <span data-ttu-id="e3165-1106">W składni wyrażeń zapytania języka Visual Basic `Aggregate Into Max()` klauzuli przekłada się na wywołanie <xref:System.Linq.Enumerable.Max%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-1106">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-1107">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> można określić maksymalną wartość w sekwencji.</span><span class="sxs-lookup"><span data-stu-id="e3165-1107">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> to determine the maximum value in a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#54](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#54)]
 [!code-vb[System.Linq.Enumerable#54](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-1108">
            <paramref name="source" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1108">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="e3165-1109">Aggregate — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1109">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static Nullable&lt;float&gt; Max (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;float&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float32&gt; Max(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;float32&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max (source As IEnumerable(Of Nullable(Of Single))) As Nullable(Of Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;float&gt; Max(System::Collections::Generic::IEnumerable&lt;Nullable&lt;float&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;Nullable&lt;single&gt;&gt; -&gt; Nullable&lt;single&gt;" Usage="System.Linq.Enumerable.Max source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Single&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="e3165-1110">Sekwencja nullable <see cref="T:System.Single" /> wartości do określenia maksymalnej wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1110">A sequence of nullable <see cref="T:System.Single" /> values to determine the maximum value of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-1111">Zwraca maksymalną wartość w sekwencji nullable <see cref="T:System.Single" /> wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1111">Returns the maximum value in a sequence of nullable <see cref="T:System.Single" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-1112">Wartości typu <c>Nullable&lt;pojedynczego&gt;</c> w języku C# lub <c>Nullable (z pojedynczą)</c> w języku Visual Basic, który odpowiada maksymalną wartość w sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1112">A value of type <c>Nullable&lt;Single&gt;</c> in C# or <c>Nullable(Of Single)</c> in Visual Basic that corresponds to the maximum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-1113"><xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> Metoda używa <xref:System.Single> implementacji <xref:System.IComparable%601> do porównywania wartości.</span><span class="sxs-lookup"><span data-stu-id="e3165-1113">The <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> method uses the <xref:System.Single> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="e3165-1114">Jeśli sekwencja źródłowa jest pusta lub zawiera tylko wartości, które są `null`, ta funkcja zwraca `null`.</span><span class="sxs-lookup"><span data-stu-id="e3165-1114">If the source sequence is empty or contains only values that are `null`, this function returns `null`.</span></span>  
  
 <span data-ttu-id="e3165-1115">W składni wyrażeń zapytania języka Visual Basic `Aggregate Into Max()` klauzuli przekłada się na wywołanie <xref:System.Linq.Enumerable.Max%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-1115">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-1116">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> można określić maksymalną wartość w sekwencji.</span><span class="sxs-lookup"><span data-stu-id="e3165-1116">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> to determine the maximum value in a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#54](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#54)]
 [!code-vb[System.Linq.Enumerable#54](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#54)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-1117">
            <paramref name="source" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1117">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="e3165-1118">Aggregate — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1118">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Max">
      <MemberSignature Language="C#" Value="public static float Max (this System.Collections.Generic.IEnumerable&lt;float&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Max(class System.Collections.Generic.IEnumerable`1&lt;float32&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max(System.Collections.Generic.IEnumerable{System.Single})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max (source As IEnumerable(Of Single)) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static float Max(System::Collections::Generic::IEnumerable&lt;float&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;single&gt; -&gt; single" Usage="System.Linq.Enumerable.Max source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Single&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="e3165-1119">Sekwencja <see cref="T:System.Single" /> wartości do określenia maksymalnej wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1119">A sequence of <see cref="T:System.Single" /> values to determine the maximum value of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-1120">Zwraca maksymalną wartość w sekwencji <see cref="T:System.Single" /> wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1120">Returns the maximum value in a sequence of <see cref="T:System.Single" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-1121">Maksymalna wartość w sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1121">The maximum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-1122"><xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29> Metoda używa <xref:System.Single> implementacji <xref:System.IComparable%601> do porównywania wartości.</span><span class="sxs-lookup"><span data-stu-id="e3165-1122">The <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29> method uses the <xref:System.Single> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="e3165-1123">W składni wyrażeń zapytania języka Visual Basic `Aggregate Into Max()` klauzuli przekłada się na wywołanie <xref:System.Linq.Enumerable.Max%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-1123">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-1124">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29> można określić maksymalną wartość w sekwencji.</span><span class="sxs-lookup"><span data-stu-id="e3165-1124">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29> to determine the maximum value in a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#52](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#52)]
 [!code-vb[System.Linq.Enumerable#52](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#52)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-1125">
            <paramref name="source" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1125">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e3165-1126">
            <paramref name="source" /> nie zawiera żadnych elementów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1126">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="e3165-1127">Aggregate — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1127">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Max&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource Max&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource Max&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max(Of TSource) (source As IEnumerable(Of TSource)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource Max(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;'Source&gt; -&gt; 'Source" Usage="System.Linq.Enumerable.Max source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-1128">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1128">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-1129">Kolejność wartości do określenia wartości maksymalnej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1129">A sequence of values to determine the maximum value of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-1130">Zwraca maksymalną wartość w sekwencji ogólnego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1130">Returns the maximum value in a generic sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-1131">Maksymalna wartość w sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1131">The maximum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-1132">Jeśli typ `TSource` implementuje <xref:System.IComparable%601>, <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> metoda wykorzystuje tę implementację, aby porównać wartości.</span><span class="sxs-lookup"><span data-stu-id="e3165-1132">If type `TSource` implements <xref:System.IComparable%601>, the <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> method uses that implementation to compare values.</span></span> <span data-ttu-id="e3165-1133">W przeciwnym razie, jeśli typ `TSource` implementuje <xref:System.IComparable>, że wykonanie służy do porównywania wartości.</span><span class="sxs-lookup"><span data-stu-id="e3165-1133">Otherwise, if type `TSource` implements <xref:System.IComparable>, that implementation is used to compare values.</span></span>  
  
 <span data-ttu-id="e3165-1134">Jeśli `TSource` jest typem odwołania, a sekwencja źródłowa jest pusta lub zawiera tylko wartości, które są `null`, Metoda ta zwraca `null`.</span><span class="sxs-lookup"><span data-stu-id="e3165-1134">If `TSource` is a reference type and the source sequence is empty or contains only values that are `null`, this method returns `null`.</span></span>  
  
 <span data-ttu-id="e3165-1135">W składni wyrażeń zapytania języka Visual Basic `Aggregate Into Max()` klauzuli przekłada się na wywołanie <xref:System.Linq.Enumerable.Max%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-1135">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-1136">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> można określić maksymalną wartość w sekwencji <xref:System.IComparable%601> obiektów.</span><span class="sxs-lookup"><span data-stu-id="e3165-1136">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to determine the maximum value in a sequence of <xref:System.IComparable%601> objects.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#57](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#57)]
 [!code-vb[System.Linq.Enumerable#57](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#57)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-1137">
            <paramref name="source" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1137">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="e3165-1138">Aggregate — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1138">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Max&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static decimal Max&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,decimal&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Max&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Decimal&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Decimal)) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Decimal Max(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, System::Decimal&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;'Source&gt; * Func&lt;'Source, decimal&gt; -&gt; decimal" Usage="System.Linq.Enumerable.Max (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Decimal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-1139">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1139">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-1140">Kolejność wartości do określenia wartości maksymalnej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1140">A sequence of values to determine the maximum value of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="e3165-1141">Funkcja transformacji do zastosowania do każdego elementu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1141">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-1142">Wywołuje funkcję przekształcenia dla każdego elementu w sekwencji i zwraca wartość maksymalną <see cref="T:System.Decimal" /> wartość.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1142">Invokes a transform function on each element of a sequence and returns the maximum <see cref="T:System.Decimal" /> value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-1143">Maksymalna wartość w sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1143">The maximum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-1144"><xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Decimal%7D%29> Metoda używa <xref:System.Decimal> implementacji <xref:System.IComparable%601> do porównywania wartości.</span><span class="sxs-lookup"><span data-stu-id="e3165-1144">The <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Decimal%7D%29> method uses the <xref:System.Decimal> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="e3165-1145">Tej metody można zastosować do je sekvence hodnot dowolnego, jeśli podasz funkcji, `selector`, które projekty członkowie `source` do typu liczbowego specjalnie <xref:System.Decimal>.</span><span class="sxs-lookup"><span data-stu-id="e3165-1145">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Decimal>.</span></span>  
  
 <span data-ttu-id="e3165-1146">W składni wyrażeń zapytania języka Visual Basic `Aggregate Into Max()` klauzuli przekłada się na wywołanie <xref:System.Linq.Enumerable.Max%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-1146">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-1147">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> można określić maksymalną wartość w sekwencji przewidywanych wartości.</span><span class="sxs-lookup"><span data-stu-id="e3165-1147">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the maximum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#58](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#58)]
 [!code-vb[System.Linq.Enumerable#58](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#58)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-1148">
            <paramref name="source" /> lub <paramref name="selector" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1148">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e3165-1149">
            <paramref name="source" /> nie zawiera żadnych elementów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1149">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="e3165-1150">Aggregate — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1150">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Max&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static double Max&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,double&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Max&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, float64&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Double)) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static double Max(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, double&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;'Source&gt; * Func&lt;'Source, double&gt; -&gt; double" Usage="System.Linq.Enumerable.Max (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Double&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-1151">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1151">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-1152">Kolejność wartości do określenia wartości maksymalnej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1152">A sequence of values to determine the maximum value of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="e3165-1153">Funkcja transformacji do zastosowania do każdego elementu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1153">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-1154">Wywołuje funkcję przekształcenia dla każdego elementu w sekwencji i zwraca wartość maksymalną <see cref="T:System.Double" /> wartość.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1154">Invokes a transform function on each element of a sequence and returns the maximum <see cref="T:System.Double" /> value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-1155">Maksymalna wartość w sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1155">The maximum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-1156"><xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> Metoda używa <xref:System.Double> implementacji <xref:System.IComparable%601> do porównywania wartości.</span><span class="sxs-lookup"><span data-stu-id="e3165-1156">The <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> method uses the <xref:System.Double> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="e3165-1157">Tej metody można zastosować do je sekvence hodnot dowolnego, jeśli podasz funkcji, `selector`, które projekty członkowie `source` do typu liczbowego specjalnie <xref:System.Double>.</span><span class="sxs-lookup"><span data-stu-id="e3165-1157">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Double>.</span></span>  
  
 <span data-ttu-id="e3165-1158">W składni wyrażeń zapytania języka Visual Basic `Aggregate Into Max()` klauzuli przekłada się na wywołanie <xref:System.Linq.Enumerable.Max%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-1158">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-1159">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> można określić maksymalną wartość w sekwencji przewidywanych wartości.</span><span class="sxs-lookup"><span data-stu-id="e3165-1159">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the maximum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#58](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#58)]
 [!code-vb[System.Linq.Enumerable#58](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#58)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-1160">
            <paramref name="source" /> lub <paramref name="selector" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1160">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e3165-1161">
            <paramref name="source" /> nie zawiera żadnych elementów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1161">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="e3165-1162">Aggregate — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1162">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Max&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static int Max&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,int&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Max&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, int32&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Integer)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int Max(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, int&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;'Source&gt; * Func&lt;'Source, int&gt; -&gt; int" Usage="System.Linq.Enumerable.Max (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Int32&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-1163">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1163">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-1164">Kolejność wartości do określenia wartości maksymalnej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1164">A sequence of values to determine the maximum value of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="e3165-1165">Funkcja transformacji do zastosowania do każdego elementu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1165">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-1166">Wywołuje funkcję przekształcenia dla każdego elementu w sekwencji i zwraca wartość maksymalną <see cref="T:System.Int32" /> wartość.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1166">Invokes a transform function on each element of a sequence and returns the maximum <see cref="T:System.Int32" /> value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-1167">Maksymalna wartość w sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1167">The maximum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-1168"><xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> Metoda używa <xref:System.Int32> implementacji <xref:System.IComparable%601> do porównywania wartości.</span><span class="sxs-lookup"><span data-stu-id="e3165-1168">The <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> method uses the <xref:System.Int32> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="e3165-1169">Tej metody można zastosować do je sekvence hodnot dowolnego, jeśli podasz funkcji, `selector`, które projekty członkowie `source` do typu liczbowego specjalnie <xref:System.Int32>.</span><span class="sxs-lookup"><span data-stu-id="e3165-1169">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Int32>.</span></span>  
  
 <span data-ttu-id="e3165-1170">W składni wyrażeń zapytania języka Visual Basic `Aggregate Into Max()` klauzuli przekłada się na wywołanie <xref:System.Linq.Enumerable.Max%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-1170">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-1171">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> można określić maksymalną wartość w sekwencji przewidywanych wartości.</span><span class="sxs-lookup"><span data-stu-id="e3165-1171">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the maximum value in a sequence of projected values.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#58](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#58)]
 [!code-vb[System.Linq.Enumerable#58](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#58)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-1172">
            <paramref name="source" /> lub <paramref name="selector" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1172">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e3165-1173">
            <paramref name="source" /> nie zawiera żadnych elementów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1173">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="e3165-1174">Aggregate — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1174">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Max&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static long Max&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,long&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Max&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, int64&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Long)) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static long Max(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, long&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;'Source&gt; * Func&lt;'Source, int64&gt; -&gt; int64" Usage="System.Linq.Enumerable.Max (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Int64&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-1175">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1175">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-1176">Kolejność wartości do określenia wartości maksymalnej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1176">A sequence of values to determine the maximum value of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="e3165-1177">Funkcja transformacji do zastosowania do każdego elementu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1177">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-1178">Wywołuje funkcję przekształcenia dla każdego elementu w sekwencji i zwraca wartość maksymalną <see cref="T:System.Int64" /> wartość.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1178">Invokes a transform function on each element of a sequence and returns the maximum <see cref="T:System.Int64" /> value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-1179">Maksymalna wartość w sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1179">The maximum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-1180"><xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29> Metoda używa <xref:System.Int64> implementacji <xref:System.IComparable%601> do porównywania wartości.</span><span class="sxs-lookup"><span data-stu-id="e3165-1180">The <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29> method uses the <xref:System.Int64> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="e3165-1181">Tej metody można zastosować do je sekvence hodnot dowolnego, jeśli podasz funkcji, `selector`, które projekty członkowie `source` do typu liczbowego specjalnie <xref:System.Int64>.</span><span class="sxs-lookup"><span data-stu-id="e3165-1181">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Int64>.</span></span>  
  
 <span data-ttu-id="e3165-1182">W składni wyrażeń zapytania języka Visual Basic `Aggregate Into Max()` klauzuli przekłada się na wywołanie <xref:System.Linq.Enumerable.Max%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-1182">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-1183">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> można określić maksymalną wartość w sekwencji przewidywanych wartości.</span><span class="sxs-lookup"><span data-stu-id="e3165-1183">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the maximum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#58](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#58)]
 [!code-vb[System.Linq.Enumerable#58](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#58)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-1184">
            <paramref name="source" /> lub <paramref name="selector" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1184">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e3165-1185">
            <paramref name="source" /> nie zawiera żadnych elementów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1185">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="e3165-1186">Aggregate — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1186">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Max&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;decimal&gt; Max&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;decimal&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype System.Decimal&gt; Max&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Decimal))) As Nullable(Of Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;System::Decimal&gt; Max(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;System::Decimal&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;decimal&gt;&gt; -&gt; Nullable&lt;decimal&gt;" Usage="System.Linq.Enumerable.Max (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Decimal&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-1187">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1187">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-1188">Kolejność wartości do określenia wartości maksymalnej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1188">A sequence of values to determine the maximum value of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="e3165-1189">Funkcja transformacji do zastosowania do każdego elementu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1189">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-1190">Wywołuje funkcję przekształcenia dla każdego elementu w sekwencji i zwraca maksymalną wartość null <see cref="T:System.Decimal" /> wartość.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1190">Invokes a transform function on each element of a sequence and returns the maximum nullable <see cref="T:System.Decimal" /> value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-1191">Wartość typu <c>Nullable&lt;dziesiętna&gt;</c> w języku C# lub <c>Nullable (z dziesiętna)</c> w języku Visual Basic, który odpowiada maksymalną wartość w sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1191">The value of type <c>Nullable&lt;Decimal&gt;</c> in C# or <c>Nullable(Of Decimal)</c> in Visual Basic that corresponds to the maximum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-1192"><xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%29> Metoda używa <xref:System.Decimal> implementacji <xref:System.IComparable%601> do porównywania wartości.</span><span class="sxs-lookup"><span data-stu-id="e3165-1192">The <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%29> method uses the <xref:System.Decimal> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="e3165-1193">Tej metody można zastosować do je sekvence hodnot dowolnego, jeśli podasz funkcji, `selector`, które projekty członkowie `source` do typu liczbowego specjalnie `Nullable<Decimal>` w języku C# lub `Nullable(Of Decimal)` w języku Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="e3165-1193">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Decimal>` in C# or `Nullable(Of Decimal)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="e3165-1194">W składni wyrażeń zapytania języka Visual Basic `Aggregate Into Max()` klauzuli przekłada się na wywołanie <xref:System.Linq.Enumerable.Max%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-1194">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-1195">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> można określić maksymalną wartość w sekwencji przewidywanych wartości.</span><span class="sxs-lookup"><span data-stu-id="e3165-1195">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the maximum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#58](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#58)]
 [!code-vb[System.Linq.Enumerable#58](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#58)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-1196">
            <paramref name="source" /> lub <paramref name="selector" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1196">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="e3165-1197">Aggregate — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1197">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Max&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Max&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;double&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Max&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;float64&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Double))) As Nullable(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;double&gt; Max(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;double&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;double&gt;&gt; -&gt; Nullable&lt;double&gt;" Usage="System.Linq.Enumerable.Max (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Double&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-1198">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1198">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-1199">Kolejność wartości do określenia wartości maksymalnej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1199">A sequence of values to determine the maximum value of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="e3165-1200">Funkcja transformacji do zastosowania do każdego elementu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1200">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-1201">Wywołuje funkcję przekształcenia dla każdego elementu w sekwencji i zwraca maksymalną wartość null <see cref="T:System.Double" /> wartość.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1201">Invokes a transform function on each element of a sequence and returns the maximum nullable <see cref="T:System.Double" /> value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-1202">Wartość typu <c>Nullable&lt;Double&gt;</c> w języku C# lub <c>Nullable (z Double)</c> w języku Visual Basic, który odpowiada maksymalną wartość w sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1202">The value of type <c>Nullable&lt;Double&gt;</c> in C# or <c>Nullable(Of Double)</c> in Visual Basic that corresponds to the maximum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-1203"><xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%29> Metoda używa <xref:System.Double> implementacji <xref:System.IComparable%601> do porównywania wartości.</span><span class="sxs-lookup"><span data-stu-id="e3165-1203">The <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%29> method uses the <xref:System.Double> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="e3165-1204">Tej metody można zastosować do je sekvence hodnot dowolnego, jeśli podasz funkcji, `selector`, które projekty członkowie `source` do typu liczbowego specjalnie `Nullable<Double>` w języku C# lub `Nullable(Of Double)` w języku Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="e3165-1204">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Double>` in C# or `Nullable(Of Double)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="e3165-1205">W składni wyrażeń zapytania języka Visual Basic `Aggregate Into Max()` klauzuli przekłada się na wywołanie <xref:System.Linq.Enumerable.Max%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-1205">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-1206">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> można określić maksymalną wartość w sekwencji przewidywanych wartości.</span><span class="sxs-lookup"><span data-stu-id="e3165-1206">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the maximum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#58](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#58)]
 [!code-vb[System.Linq.Enumerable#58](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#58)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-1207">
            <paramref name="source" /> lub <paramref name="selector" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1207">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="e3165-1208">Aggregate — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1208">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Max&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;int&gt; Max&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;int&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int32&gt; Max&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;int32&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Integer))) As Nullable(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;int&gt; Max(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;int&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;int&gt;&gt; -&gt; Nullable&lt;int&gt;" Usage="System.Linq.Enumerable.Max (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Int32&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-1209">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1209">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-1210">Kolejność wartości do określenia wartości maksymalnej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1210">A sequence of values to determine the maximum value of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="e3165-1211">Funkcja transformacji do zastosowania do każdego elementu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1211">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-1212">Wywołuje funkcję przekształcenia dla każdego elementu w sekwencji i zwraca maksymalną wartość null <see cref="T:System.Int32" /> wartość.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1212">Invokes a transform function on each element of a sequence and returns the maximum nullable <see cref="T:System.Int32" /> value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-1213">Wartość typu <c>Nullable&lt;Int32&gt;</c> w języku C# lub <c>Nullable (typu Int32)</c> w języku Visual Basic, który odpowiada maksymalną wartość w sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1213">The value of type <c>Nullable&lt;Int32&gt;</c> in C# or <c>Nullable(Of Int32)</c> in Visual Basic that corresponds to the maximum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-1214"><xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%29> Metoda używa <xref:System.Int32> implementacji <xref:System.IComparable%601> do porównywania wartości.</span><span class="sxs-lookup"><span data-stu-id="e3165-1214">The <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%29> method uses the <xref:System.Int32> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="e3165-1215">Tej metody można zastosować do je sekvence hodnot dowolnego, jeśli podasz funkcji, `selector`, które projekty członkowie `source` do typu liczbowego specjalnie `Nullable<Int32>` w języku C# lub `Nullable(Of Int32)` w języku Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="e3165-1215">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Int32>` in C# or `Nullable(Of Int32)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="e3165-1216">W składni wyrażeń zapytania języka Visual Basic `Aggregate Into Max()` klauzuli przekłada się na wywołanie <xref:System.Linq.Enumerable.Max%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-1216">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-1217">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> można określić maksymalną wartość w sekwencji przewidywanych wartości.</span><span class="sxs-lookup"><span data-stu-id="e3165-1217">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the maximum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#58](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#58)]
 [!code-vb[System.Linq.Enumerable#58](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#58)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-1218">
            <paramref name="source" /> lub <paramref name="selector" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1218">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="e3165-1219">Aggregate — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1219">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Max&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;long&gt; Max&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;long&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int64&gt; Max&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;int64&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Long))) As Nullable(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;long&gt; Max(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;long&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;int64&gt;&gt; -&gt; Nullable&lt;int64&gt;" Usage="System.Linq.Enumerable.Max (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Int64&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-1220">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1220">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-1221">Kolejność wartości do określenia wartości maksymalnej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1221">A sequence of values to determine the maximum value of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="e3165-1222">Funkcja transformacji do zastosowania do każdego elementu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1222">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-1223">Wywołuje funkcję przekształcenia dla każdego elementu w sekwencji i zwraca maksymalną wartość null <see cref="T:System.Int64" /> wartość.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1223">Invokes a transform function on each element of a sequence and returns the maximum nullable <see cref="T:System.Int64" /> value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-1224">Wartość typu <c>Nullable&lt;Int64&gt;</c> w języku C# lub <c>Nullable (z Int64)</c> w języku Visual Basic, który odpowiada maksymalną wartość w sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1224">The value of type <c>Nullable&lt;Int64&gt;</c> in C# or <c>Nullable(Of Int64)</c> in Visual Basic that corresponds to the maximum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-1225"><xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%29> Metoda używa <xref:System.Int64> implementacji <xref:System.IComparable%601> do porównywania wartości.</span><span class="sxs-lookup"><span data-stu-id="e3165-1225">The <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%29> method uses the <xref:System.Int64> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="e3165-1226">Tej metody można zastosować do je sekvence hodnot dowolnego, jeśli podasz funkcji, `selector`, które projekty członkowie `source` do typu liczbowego specjalnie `Nullable<Int64>` w języku C# lub `Nullable(Of Int64)` w języku Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="e3165-1226">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Int64>` in C# or `Nullable(Of Int64)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="e3165-1227">W składni wyrażeń zapytania języka Visual Basic `Aggregate Into Max()` klauzuli przekłada się na wywołanie <xref:System.Linq.Enumerable.Max%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-1227">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-1228">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> można określić maksymalną wartość w sekwencji przewidywanych wartości.</span><span class="sxs-lookup"><span data-stu-id="e3165-1228">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the maximum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#58](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#58)]
 [!code-vb[System.Linq.Enumerable#58](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#58)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-1229">
            <paramref name="source" /> lub <paramref name="selector" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1229">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="e3165-1230">Aggregate — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1230">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Max&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;float&gt; Max&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;float&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float32&gt; Max&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;float32&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Single))) As Nullable(Of Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;float&gt; Max(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;float&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;single&gt;&gt; -&gt; Nullable&lt;single&gt;" Usage="System.Linq.Enumerable.Max (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Single&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-1231">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1231">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-1232">Kolejność wartości do określenia wartości maksymalnej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1232">A sequence of values to determine the maximum value of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="e3165-1233">Funkcja transformacji do zastosowania do każdego elementu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1233">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-1234">Wywołuje funkcję przekształcenia dla każdego elementu w sekwencji i zwraca maksymalną wartość null <see cref="T:System.Single" /> wartość.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1234">Invokes a transform function on each element of a sequence and returns the maximum nullable <see cref="T:System.Single" /> value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-1235">Wartość typu <c>Nullable&lt;pojedynczego&gt;</c> w języku C# lub <c>Nullable (z pojedynczą)</c> w języku Visual Basic, który odpowiada maksymalną wartość w sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1235">The value of type <c>Nullable&lt;Single&gt;</c> in C# or <c>Nullable(Of Single)</c> in Visual Basic that corresponds to the maximum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-1236"><xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%29> Metoda używa <xref:System.Single> implementacji <xref:System.IComparable%601> do porównywania wartości.</span><span class="sxs-lookup"><span data-stu-id="e3165-1236">The <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%29> method uses the <xref:System.Single> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="e3165-1237">Tej metody można zastosować do je sekvence hodnot dowolnego, jeśli podasz funkcji, `selector`, które projekty członkowie `source` do typu liczbowego specjalnie `Nullable<Single>` w języku C# lub `Nullable(Of Single)` w języku Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="e3165-1237">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Single>` in C# or `Nullable(Of Single)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="e3165-1238">W składni wyrażeń zapytania języka Visual Basic `Aggregate Into Max()` klauzuli przekłada się na wywołanie <xref:System.Linq.Enumerable.Max%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-1238">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-1239">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> można określić maksymalną wartość w sekwencji przewidywanych wartości.</span><span class="sxs-lookup"><span data-stu-id="e3165-1239">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the maximum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#58](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#58)]
 [!code-vb[System.Linq.Enumerable#58](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#58)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-1240">
            <paramref name="source" /> lub <paramref name="selector" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1240">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="e3165-1241">Aggregate — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1241">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Max&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static float Max&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,float&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Max&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, float32&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Single)) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static float Max(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, float&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;'Source&gt; * Func&lt;'Source, single&gt; -&gt; single" Usage="System.Linq.Enumerable.Max (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Single&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-1242">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1242">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-1243">Kolejność wartości do określenia wartości maksymalnej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1243">A sequence of values to determine the maximum value of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="e3165-1244">Funkcja transformacji do zastosowania do każdego elementu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1244">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-1245">Wywołuje funkcję przekształcenia dla każdego elementu w sekwencji i zwraca wartość maksymalną <see cref="T:System.Single" /> wartość.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1245">Invokes a transform function on each element of a sequence and returns the maximum <see cref="T:System.Single" /> value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-1246">Maksymalna wartość w sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1246">The maximum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-1247"><xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Single%7D%29> Metoda używa <xref:System.Single> implementacji <xref:System.IComparable%601> do porównywania wartości.</span><span class="sxs-lookup"><span data-stu-id="e3165-1247">The <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Single%7D%29> method uses the <xref:System.Single> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="e3165-1248">Tej metody można zastosować do je sekvence hodnot dowolnego, jeśli podasz funkcji, `selector`, które projekty członkowie `source` do typu liczbowego specjalnie <xref:System.Single>.</span><span class="sxs-lookup"><span data-stu-id="e3165-1248">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Single>.</span></span>  
  
 <span data-ttu-id="e3165-1249">W składni wyrażeń zapytania języka Visual Basic `Aggregate Into Max()` klauzuli przekłada się na wywołanie <xref:System.Linq.Enumerable.Max%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-1249">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-1250">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> można określić maksymalną wartość w sekwencji przewidywanych wartości.</span><span class="sxs-lookup"><span data-stu-id="e3165-1250">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the maximum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#58](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#58)]
 [!code-vb[System.Linq.Enumerable#58](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#58)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-1251">
            <paramref name="source" /> lub <paramref name="selector" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1251">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e3165-1252">
            <paramref name="source" /> nie zawiera żadnych elementów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1252">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="e3165-1253">Aggregate — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1253">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Max&lt;TSource,TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Max&lt;TSource,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TResult&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Max&lt;TSource, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TResult&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Max``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Max(Of TSource, TResult) (source As IEnumerable(Of TSource), selector As Func(Of TSource, TResult)) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TResult Max(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TResult&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Max : seq&lt;'Source&gt; * Func&lt;'Source, 'Result&gt; -&gt; 'Result" Usage="System.Linq.Enumerable.Max (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-1254">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1254">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <typeparam name="TResult">
          <span data-ttu-id="e3165-1255">Typ wartości zwracanej przez <c>selektor</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1255">The type of the value returned by <c>selector</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-1256">Kolejność wartości do określenia wartości maksymalnej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1256">A sequence of values to determine the maximum value of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="e3165-1257">Funkcja transformacji do zastosowania do każdego elementu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1257">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-1258">Wywołuje funkcję przekształcenia dla każdego elementu w sekwencji ogólny i zwraca maksymalną wartość wynikową.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1258">Invokes a transform function on each element of a generic sequence and returns the maximum resulting value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-1259">Maksymalna wartość w sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1259">The maximum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-1260">Jeśli typ `TResult` implementuje <xref:System.IComparable%601>, Metoda ta wykorzystuje tę implementację, aby porównać wartości.</span><span class="sxs-lookup"><span data-stu-id="e3165-1260">If type `TResult` implements <xref:System.IComparable%601>, this method uses that implementation to compare values.</span></span> <span data-ttu-id="e3165-1261">W przeciwnym razie, jeśli typ `TResult` implementuje <xref:System.IComparable>, że wykonanie służy do porównywania wartości.</span><span class="sxs-lookup"><span data-stu-id="e3165-1261">Otherwise, if type `TResult` implements <xref:System.IComparable>, that implementation is used to compare values.</span></span>  
  
 <span data-ttu-id="e3165-1262">W składni wyrażeń zapytania języka Visual Basic `Aggregate Into Max()` klauzuli przekłada się na wywołanie <xref:System.Linq.Enumerable.Max%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-1262">In Visual Basic query expression syntax, an `Aggregate Into Max()` clause translates to an invocation of <xref:System.Linq.Enumerable.Max%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-1263">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> można określić maksymalną wartość w sekwencji przewidywanych wartości.</span><span class="sxs-lookup"><span data-stu-id="e3165-1263">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Max%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the maximum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#58](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#58)]
 [!code-vb[System.Linq.Enumerable#58](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#58)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-1264">
            <paramref name="source" /> lub <paramref name="selector" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1264">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="e3165-1265">Aggregate — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1265">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Min">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e3165-1266">Zwraca minimalną wartość w sekwencji wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1266">Returns the minimum value in a sequence of values.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static decimal Min (this System.Collections.Generic.IEnumerable&lt;decimal&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Min(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Decimal&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Decimal})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min (source As IEnumerable(Of Decimal)) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Decimal Min(System::Collections::Generic::IEnumerable&lt;System::Decimal&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;decimal&gt; -&gt; decimal" Usage="System.Linq.Enumerable.Min source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Decimal&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="e3165-1267">Sekwencja <see cref="T:System.Decimal" /> wartości do określenia minimalnej wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1267">A sequence of <see cref="T:System.Decimal" /> values to determine the minimum value of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-1268">Zwraca minimalną wartość w sekwencji <see cref="T:System.Decimal" /> wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1268">Returns the minimum value in a sequence of <see cref="T:System.Decimal" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-1269">Minimalna wartość w sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1269">The minimum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-1270"><xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Decimal%7D%29> Metoda używa <xref:System.Decimal> implementacji <xref:System.IComparable%601> do porównywania wartości.</span><span class="sxs-lookup"><span data-stu-id="e3165-1270">The <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Decimal%7D%29> method uses the <xref:System.Decimal> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="e3165-1271">W składni wyrażeń zapytania języka Visual Basic `Aggregate Into Min()` klauzuli przekłada się na wywołanie <xref:System.Linq.Enumerable.Min%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-1271">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-1272">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29> można określić minimalną wartość w sekwencji.</span><span class="sxs-lookup"><span data-stu-id="e3165-1272">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29> to determine the minimum value in a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#60](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#60)]
 [!code-vb[System.Linq.Enumerable#60](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#60)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-1273">
            <paramref name="source" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1273">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e3165-1274">
            <paramref name="source" /> nie zawiera żadnych elementów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1274">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="e3165-1275">Aggregate — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1275">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static double Min (this System.Collections.Generic.IEnumerable&lt;double&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Min(class System.Collections.Generic.IEnumerable`1&lt;float64&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Double})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min (source As IEnumerable(Of Double)) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static double Min(System::Collections::Generic::IEnumerable&lt;double&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;double&gt; -&gt; double" Usage="System.Linq.Enumerable.Min source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Double&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="e3165-1276">Sekwencja <see cref="T:System.Double" /> wartości do określenia minimalnej wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1276">A sequence of <see cref="T:System.Double" /> values to determine the minimum value of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-1277">Zwraca minimalną wartość w sekwencji <see cref="T:System.Double" /> wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1277">Returns the minimum value in a sequence of <see cref="T:System.Double" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-1278">Minimalna wartość w sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1278">The minimum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-1279"><xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29> Metoda używa <xref:System.Double> implementacji <xref:System.IComparable%601> do porównywania wartości.</span><span class="sxs-lookup"><span data-stu-id="e3165-1279">The <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29> method uses the <xref:System.Double> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="e3165-1280">W składni wyrażeń zapytania języka Visual Basic `Aggregate Into Min()` klauzuli przekłada się na wywołanie <xref:System.Linq.Enumerable.Min%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-1280">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-1281">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29> można określić minimalną wartość w sekwencji.</span><span class="sxs-lookup"><span data-stu-id="e3165-1281">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29> to determine the minimum value in a sequence.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#60](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#60)]
 [!code-vb[System.Linq.Enumerable#60](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#60)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-1282">
            <paramref name="source" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1282">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e3165-1283">
            <paramref name="source" /> nie zawiera żadnych elementów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1283">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="e3165-1284">Aggregate — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1284">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static int Min (this System.Collections.Generic.IEnumerable&lt;int&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Min(class System.Collections.Generic.IEnumerable`1&lt;int32&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min (source As IEnumerable(Of Integer)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int Min(System::Collections::Generic::IEnumerable&lt;int&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;int&gt; -&gt; int" Usage="System.Linq.Enumerable.Min source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Int32&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="e3165-1285">Sekwencja <see cref="T:System.Int32" /> wartości do określenia minimalnej wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1285">A sequence of <see cref="T:System.Int32" /> values to determine the minimum value of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-1286">Zwraca minimalną wartość w sekwencji <see cref="T:System.Int32" /> wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1286">Returns the minimum value in a sequence of <see cref="T:System.Int32" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-1287">Minimalna wartość w sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1287">The minimum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-1288"><xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29> Metoda używa <xref:System.Int32> implementacji <xref:System.IComparable%601> do porównywania wartości.</span><span class="sxs-lookup"><span data-stu-id="e3165-1288">The <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Int32%7D%29> method uses the <xref:System.Int32> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="e3165-1289">W składni wyrażeń zapytania języka Visual Basic `Aggregate Into Min()` klauzuli przekłada się na wywołanie <xref:System.Linq.Enumerable.Min%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-1289">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-1290">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29> można określić minimalną wartość w sekwencji.</span><span class="sxs-lookup"><span data-stu-id="e3165-1290">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29> to determine the minimum value in a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#60](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#60)]
 [!code-vb[System.Linq.Enumerable#60](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#60)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-1291">
            <paramref name="source" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1291">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e3165-1292">
            <paramref name="source" /> nie zawiera żadnych elementów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1292">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="e3165-1293">Aggregate — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1293">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static long Min (this System.Collections.Generic.IEnumerable&lt;long&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Min(class System.Collections.Generic.IEnumerable`1&lt;int64&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Int64})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min (source As IEnumerable(Of Long)) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static long Min(System::Collections::Generic::IEnumerable&lt;long&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;int64&gt; -&gt; int64" Usage="System.Linq.Enumerable.Min source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Int64&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="e3165-1294">Sekwencja <see cref="T:System.Int64" /> wartości do określenia minimalnej wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1294">A sequence of <see cref="T:System.Int64" /> values to determine the minimum value of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-1295">Zwraca minimalną wartość w sekwencji <see cref="T:System.Int64" /> wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1295">Returns the minimum value in a sequence of <see cref="T:System.Int64" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-1296">Minimalna wartość w sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1296">The minimum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-1297"><xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29> Metoda używa <xref:System.Int64> implementacji <xref:System.IComparable%601> do porównywania wartości.</span><span class="sxs-lookup"><span data-stu-id="e3165-1297">The <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Int64%7D%29> method uses the <xref:System.Int64> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="e3165-1298">W składni wyrażeń zapytania języka Visual Basic `Aggregate Into Min()` klauzuli przekłada się na wywołanie <xref:System.Linq.Enumerable.Min%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-1298">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-1299">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29> można określić minimalną wartość w sekwencji.</span><span class="sxs-lookup"><span data-stu-id="e3165-1299">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29> to determine the minimum value in a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#60](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#60)]
 [!code-vb[System.Linq.Enumerable#60](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#60)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-1300">
            <paramref name="source" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1300">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e3165-1301">
            <paramref name="source" /> nie zawiera żadnych elementów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1301">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="e3165-1302">Aggregate — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1302">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static Nullable&lt;decimal&gt; Min (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;decimal&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype System.Decimal&gt; Min(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min (source As IEnumerable(Of Nullable(Of Decimal))) As Nullable(Of Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;System::Decimal&gt; Min(System::Collections::Generic::IEnumerable&lt;Nullable&lt;System::Decimal&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;Nullable&lt;decimal&gt;&gt; -&gt; Nullable&lt;decimal&gt;" Usage="System.Linq.Enumerable.Min source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Decimal&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="e3165-1303">Sekwencja nullable <see cref="T:System.Decimal" /> wartości do określenia minimalnej wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1303">A sequence of nullable <see cref="T:System.Decimal" /> values to determine the minimum value of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-1304">Zwraca minimalną wartość w sekwencji nullable <see cref="T:System.Decimal" /> wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1304">Returns the minimum value in a sequence of nullable <see cref="T:System.Decimal" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-1305">Wartości typu <c>Nullable&lt;dziesiętna&gt;</c> w języku C# lub <c>Nullable (z dziesiętna)</c> w języku Visual Basic, który odpowiada na minimalną wartość w sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1305">A value of type <c>Nullable&lt;Decimal&gt;</c> in C# or <c>Nullable(Of Decimal)</c> in Visual Basic that corresponds to the minimum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-1306"><xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29> Metoda używa <xref:System.Decimal> implementacji <xref:System.IComparable%601> do porównywania wartości.</span><span class="sxs-lookup"><span data-stu-id="e3165-1306">The <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Decimal%7D%7D%29> method uses the <xref:System.Decimal> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="e3165-1307">Jeśli sekwencja źródłowa jest pusta lub zawiera tylko wartości, które są `null`, ta funkcja zwraca `null`.</span><span class="sxs-lookup"><span data-stu-id="e3165-1307">If the source sequence is empty or contains only values that are `null`, this function returns `null`.</span></span>  
  
 <span data-ttu-id="e3165-1308">W składni wyrażeń zapytania języka Visual Basic `Aggregate Into Min()` klauzuli przekłada się na wywołanie <xref:System.Linq.Enumerable.Min%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-1308">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-1309">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> można określić minimalną wartość w sekwencji.</span><span class="sxs-lookup"><span data-stu-id="e3165-1309">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> to determine the minimum value in a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#63](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#63)]
 [!code-vb[System.Linq.Enumerable#63](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#63)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-1310">
            <paramref name="source" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1310">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="e3165-1311">Aggregate — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1311">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Min (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;double&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Min(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;float64&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min (source As IEnumerable(Of Nullable(Of Double))) As Nullable(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;double&gt; Min(System::Collections::Generic::IEnumerable&lt;Nullable&lt;double&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;Nullable&lt;double&gt;&gt; -&gt; Nullable&lt;double&gt;" Usage="System.Linq.Enumerable.Min source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Double&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="e3165-1312">Sekwencja nullable <see cref="T:System.Double" /> wartości do określenia minimalnej wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1312">A sequence of nullable <see cref="T:System.Double" /> values to determine the minimum value of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-1313">Zwraca minimalną wartość w sekwencji nullable <see cref="T:System.Double" /> wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1313">Returns the minimum value in a sequence of nullable <see cref="T:System.Double" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-1314">Wartości typu <c>Nullable&lt;Double&gt;</c> w języku C# lub <c>Nullable (z Double)</c> w języku Visual Basic, który odpowiada na minimalną wartość w sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1314">A value of type <c>Nullable&lt;Double&gt;</c> in C# or <c>Nullable(Of Double)</c> in Visual Basic that corresponds to the minimum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-1315"><xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> Metoda używa <xref:System.Double> implementacji <xref:System.IComparable%601> do porównywania wartości.</span><span class="sxs-lookup"><span data-stu-id="e3165-1315">The <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Double%7D%7D%29> method uses the <xref:System.Double> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="e3165-1316">Jeśli sekwencja źródłowa jest pusta lub zawiera tylko wartości, które są `null`, ta funkcja zwraca `null`.</span><span class="sxs-lookup"><span data-stu-id="e3165-1316">If the source sequence is empty or contains only values that are `null`, this function returns `null`.</span></span>  
  
 <span data-ttu-id="e3165-1317">W składni wyrażeń zapytania języka Visual Basic `Aggregate Into Min()` klauzuli przekłada się na wywołanie <xref:System.Linq.Enumerable.Min%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-1317">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-1318">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> można określić minimalną wartość w sekwencji.</span><span class="sxs-lookup"><span data-stu-id="e3165-1318">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> to determine the minimum value in a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#63](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#63)]
 [!code-vb[System.Linq.Enumerable#63](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#63)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-1319">
            <paramref name="source" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1319">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="e3165-1320">Aggregate — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1320">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static Nullable&lt;int&gt; Min (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;int&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int32&gt; Min(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;int32&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min (source As IEnumerable(Of Nullable(Of Integer))) As Nullable(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;int&gt; Min(System::Collections::Generic::IEnumerable&lt;Nullable&lt;int&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;Nullable&lt;int&gt;&gt; -&gt; Nullable&lt;int&gt;" Usage="System.Linq.Enumerable.Min source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Int32&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="e3165-1321">Sekwencja nullable <see cref="T:System.Int32" /> wartości do określenia minimalnej wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1321">A sequence of nullable <see cref="T:System.Int32" /> values to determine the minimum value of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-1322">Zwraca minimalną wartość w sekwencji nullable <see cref="T:System.Int32" /> wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1322">Returns the minimum value in a sequence of nullable <see cref="T:System.Int32" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-1323">Wartości typu <c>Nullable&lt;Int32&gt;</c> w języku C# lub <c>Nullable (typu Int32)</c> w języku Visual Basic, który odpowiada na minimalną wartość w sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1323">A value of type <c>Nullable&lt;Int32&gt;</c> in C# or <c>Nullable(Of Int32)</c> in Visual Basic that corresponds to the minimum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-1324"><xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> Metoda używa <xref:System.Int32> implementacji <xref:System.IComparable%601> do porównywania wartości.</span><span class="sxs-lookup"><span data-stu-id="e3165-1324">The <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> method uses the <xref:System.Int32> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="e3165-1325">Jeśli sekwencja źródłowa jest pusta lub zawiera tylko wartości, które są `null`, ta funkcja zwraca `null`.</span><span class="sxs-lookup"><span data-stu-id="e3165-1325">If the source sequence is empty or contains only values that are `null`, this function returns `null`.</span></span>  
  
 <span data-ttu-id="e3165-1326">W składni wyrażeń zapytania języka Visual Basic `Aggregate Into Min()` klauzuli przekłada się na wywołanie <xref:System.Linq.Enumerable.Min%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-1326">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-1327">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> można określić minimalną wartość w sekwencji.</span><span class="sxs-lookup"><span data-stu-id="e3165-1327">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> to determine the minimum value in a sequence.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#63](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#63)]
 [!code-vb[System.Linq.Enumerable#63](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#63)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-1328">
            <paramref name="source" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1328">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="e3165-1329">Aggregate — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1329">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static Nullable&lt;long&gt; Min (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;long&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int64&gt; Min(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;int64&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min (source As IEnumerable(Of Nullable(Of Long))) As Nullable(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;long&gt; Min(System::Collections::Generic::IEnumerable&lt;Nullable&lt;long&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;Nullable&lt;int64&gt;&gt; -&gt; Nullable&lt;int64&gt;" Usage="System.Linq.Enumerable.Min source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Int64&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="e3165-1330">Sekwencja nullable <see cref="T:System.Int64" /> wartości do określenia minimalnej wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1330">A sequence of nullable <see cref="T:System.Int64" /> values to determine the minimum value of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-1331">Zwraca minimalną wartość w sekwencji nullable <see cref="T:System.Int64" /> wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1331">Returns the minimum value in a sequence of nullable <see cref="T:System.Int64" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-1332">Wartości typu <c>Nullable&lt;Int64&gt;</c> w języku C# lub <c>Nullable (z Int64)</c> w języku Visual Basic, który odpowiada na minimalną wartość w sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1332">A value of type <c>Nullable&lt;Int64&gt;</c> in C# or <c>Nullable(Of Int64)</c> in Visual Basic that corresponds to the minimum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-1333"><xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> Metoda używa <xref:System.Int64> implementacji <xref:System.IComparable%601> do porównywania wartości.</span><span class="sxs-lookup"><span data-stu-id="e3165-1333">The <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int64%7D%7D%29> method uses the <xref:System.Int64> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="e3165-1334">Jeśli sekwencja źródłowa jest pusta lub zawiera tylko wartości, które są `null`, ta funkcja zwraca `null`.</span><span class="sxs-lookup"><span data-stu-id="e3165-1334">If the source sequence is empty or contains only values that are `null`, this function returns `null`.</span></span>  
  
 <span data-ttu-id="e3165-1335">W składni wyrażeń zapytania języka Visual Basic `Aggregate Into Min()` klauzuli przekłada się na wywołanie <xref:System.Linq.Enumerable.Min%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-1335">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-1336">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> można określić minimalną wartość w sekwencji.</span><span class="sxs-lookup"><span data-stu-id="e3165-1336">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> to determine the minimum value in a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#63](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#63)]
 [!code-vb[System.Linq.Enumerable#63](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#63)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-1337">
            <paramref name="source" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1337">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="e3165-1338">Aggregate — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1338">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static Nullable&lt;float&gt; Min (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;float&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float32&gt; Min(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;float32&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min (source As IEnumerable(Of Nullable(Of Single))) As Nullable(Of Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;float&gt; Min(System::Collections::Generic::IEnumerable&lt;Nullable&lt;float&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;Nullable&lt;single&gt;&gt; -&gt; Nullable&lt;single&gt;" Usage="System.Linq.Enumerable.Min source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Single&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="e3165-1339">Sekwencja nullable <see cref="T:System.Single" /> wartości do określenia minimalnej wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1339">A sequence of nullable <see cref="T:System.Single" /> values to determine the minimum value of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-1340">Zwraca minimalną wartość w sekwencji nullable <see cref="T:System.Single" /> wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1340">Returns the minimum value in a sequence of nullable <see cref="T:System.Single" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-1341">Wartości typu <c>Nullable&lt;pojedynczego&gt;</c> w języku C# lub <c>Nullable (z pojedynczą)</c> w języku Visual Basic, który odpowiada na minimalną wartość w sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1341">A value of type <c>Nullable&lt;Single&gt;</c> in C# or <c>Nullable(Of Single)</c> in Visual Basic that corresponds to the minimum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-1342"><xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> Metoda używa <xref:System.Single> implementacji <xref:System.IComparable%601> do porównywania wartości.</span><span class="sxs-lookup"><span data-stu-id="e3165-1342">The <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> method uses the <xref:System.Single> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="e3165-1343">Jeśli sekwencja źródłowa jest pusta lub zawiera tylko wartości, które są `null`, ta funkcja zwraca `null`.</span><span class="sxs-lookup"><span data-stu-id="e3165-1343">If the source sequence is empty or contains only values that are `null`, this function returns `null`.</span></span>  
  
 <span data-ttu-id="e3165-1344">W składni wyrażeń zapytania języka Visual Basic `Aggregate Into Min()` klauzuli przekłada się na wywołanie <xref:System.Linq.Enumerable.Min%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-1344">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-1345">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> można określić minimalną wartość w sekwencji.</span><span class="sxs-lookup"><span data-stu-id="e3165-1345">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Int32%7D%7D%29> to determine the minimum value in a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#63](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#63)]
 [!code-vb[System.Linq.Enumerable#63](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#63)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-1346">
            <paramref name="source" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1346">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="e3165-1347">Aggregate — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1347">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Min">
      <MemberSignature Language="C#" Value="public static float Min (this System.Collections.Generic.IEnumerable&lt;float&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Min(class System.Collections.Generic.IEnumerable`1&lt;float32&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min(System.Collections.Generic.IEnumerable{System.Single})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min (source As IEnumerable(Of Single)) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static float Min(System::Collections::Generic::IEnumerable&lt;float&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;single&gt; -&gt; single" Usage="System.Linq.Enumerable.Min source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Single&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="e3165-1348">Sekwencja <see cref="T:System.Single" /> wartości do określenia minimalnej wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1348">A sequence of <see cref="T:System.Single" /> values to determine the minimum value of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-1349">Zwraca minimalną wartość w sekwencji <see cref="T:System.Single" /> wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1349">Returns the minimum value in a sequence of <see cref="T:System.Single" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-1350">Minimalna wartość w sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1350">The minimum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-1351"><xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29> Metoda używa <xref:System.Single> implementacji <xref:System.IComparable%601> do porównywania wartości.</span><span class="sxs-lookup"><span data-stu-id="e3165-1351">The <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29> method uses the <xref:System.Single> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="e3165-1352">W składni wyrażeń zapytania języka Visual Basic `Aggregate Into Min()` klauzuli przekłada się na wywołanie <xref:System.Linq.Enumerable.Min%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-1352">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-1353">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29> można określić minimalną wartość w sekwencji.</span><span class="sxs-lookup"><span data-stu-id="e3165-1353">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%28System.Collections.Generic.IEnumerable%7BSystem.Double%7D%29> to determine the minimum value in a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#60](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#60)]
 [!code-vb[System.Linq.Enumerable#60](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#60)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-1354">
            <paramref name="source" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1354">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e3165-1355">
            <paramref name="source" /> nie zawiera żadnych elementów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1355">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="e3165-1356">Aggregate — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1356">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Min&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource Min&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource Min&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min(Of TSource) (source As IEnumerable(Of TSource)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource Min(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;'Source&gt; -&gt; 'Source" Usage="System.Linq.Enumerable.Min source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-1357">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1357">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-1358">Kolejność wartości do określenia wartości minimalnej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1358">A sequence of values to determine the minimum value of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-1359">Zwraca minimalną wartość w sekwencji ogólnego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1359">Returns the minimum value in a generic sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-1360">Minimalna wartość w sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1360">The minimum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-1361">Jeśli typ `TSource` implementuje <xref:System.IComparable%601>, Metoda ta wykorzystuje tę implementację, aby porównać wartości.</span><span class="sxs-lookup"><span data-stu-id="e3165-1361">If type `TSource` implements <xref:System.IComparable%601>, this method uses that implementation to compare values.</span></span> <span data-ttu-id="e3165-1362">W przeciwnym razie, jeśli typ `TSource` implementuje <xref:System.IComparable>, że wykonanie służy do porównywania wartości.</span><span class="sxs-lookup"><span data-stu-id="e3165-1362">Otherwise, if type `TSource` implements <xref:System.IComparable>, that implementation is used to compare values.</span></span>  
  
 <span data-ttu-id="e3165-1363">Jeśli `TSource` jest typem odwołania, a sekwencja źródłowa jest pusta lub zawiera tylko wartości, które są `null`, ta funkcja zwraca `null`.</span><span class="sxs-lookup"><span data-stu-id="e3165-1363">If `TSource` is a reference type and the source sequence is empty or contains only values that are `null`, this function returns `null`.</span></span>  
  
 <span data-ttu-id="e3165-1364">W składni wyrażeń zapytania języka Visual Basic `Aggregate Into Min()` klauzuli przekłada się na wywołanie <xref:System.Linq.Enumerable.Min%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-1364">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-1365">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> można określić minimalną wartość w sekwencji <xref:System.IComparable%601> obiektów.</span><span class="sxs-lookup"><span data-stu-id="e3165-1365">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to determine the minimum value in a sequence of <xref:System.IComparable%601> objects.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#67](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#67)]
 [!code-vb[System.Linq.Enumerable#67](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#67)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-1366">
            <paramref name="source" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1366">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="e3165-1367">Aggregate — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1367">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Min&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static decimal Min&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,decimal&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Min&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Decimal&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Decimal)) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Decimal Min(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, System::Decimal&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;'Source&gt; * Func&lt;'Source, decimal&gt; -&gt; decimal" Usage="System.Linq.Enumerable.Min (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Decimal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-1368">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1368">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-1369">Kolejność wartości do określenia wartości minimalnej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1369">A sequence of values to determine the minimum value of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="e3165-1370">Funkcja transformacji do zastosowania do każdego elementu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1370">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-1371">Wywołuje funkcję przekształcenia dla każdego elementu w sekwencji i zwraca wartość minimalną <see cref="T:System.Decimal" /> wartość.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1371">Invokes a transform function on each element of a sequence and returns the minimum <see cref="T:System.Decimal" /> value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-1372">Minimalna wartość w sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1372">The minimum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-1373"><xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Decimal%7D%29> Metoda używa <xref:System.Decimal> implementacji <xref:System.IComparable%601> do porównywania wartości.</span><span class="sxs-lookup"><span data-stu-id="e3165-1373">The <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Decimal%7D%29> method uses the <xref:System.Decimal> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="e3165-1374">Tej metody można zastosować do je sekvence hodnot dowolnego, jeśli podasz funkcji, `selector`, które projekty członkowie `source` do typu liczbowego specjalnie <xref:System.Decimal>.</span><span class="sxs-lookup"><span data-stu-id="e3165-1374">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Decimal>.</span></span>  
  
 <span data-ttu-id="e3165-1375">W składni wyrażeń zapytania języka Visual Basic `Aggregate Into Min()` klauzuli przekłada się na wywołanie <xref:System.Linq.Enumerable.Min%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-1375">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-1376">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> Aby określić minimalną wartość w sekwencji przewidywanych wartości.</span><span class="sxs-lookup"><span data-stu-id="e3165-1376">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the minimum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#68](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#68)]
 [!code-vb[System.Linq.Enumerable#68](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#68)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-1377">
            <paramref name="source" /> lub <paramref name="selector" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1377">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e3165-1378">
            <paramref name="source" /> nie zawiera żadnych elementów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1378">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="e3165-1379">Aggregate — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1379">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Min&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static double Min&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,double&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Min&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, float64&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Double)) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static double Min(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, double&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;'Source&gt; * Func&lt;'Source, double&gt; -&gt; double" Usage="System.Linq.Enumerable.Min (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Double&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-1380">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1380">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-1381">Kolejność wartości do określenia wartości minimalnej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1381">A sequence of values to determine the minimum value of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="e3165-1382">Funkcja transformacji do zastosowania do każdego elementu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1382">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-1383">Wywołuje funkcję przekształcenia dla każdego elementu w sekwencji i zwraca wartość minimalną <see cref="T:System.Double" /> wartość.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1383">Invokes a transform function on each element of a sequence and returns the minimum <see cref="T:System.Double" /> value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-1384">Minimalna wartość w sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1384">The minimum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-1385"><xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> Metoda używa <xref:System.Double> implementacji <xref:System.IComparable%601> do porównywania wartości.</span><span class="sxs-lookup"><span data-stu-id="e3165-1385">The <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> method uses the <xref:System.Double> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="e3165-1386">Tej metody można zastosować do je sekvence hodnot dowolnego, jeśli podasz funkcji, `selector`, które projekty członkowie `source` do typu liczbowego specjalnie <xref:System.Double>.</span><span class="sxs-lookup"><span data-stu-id="e3165-1386">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Double>.</span></span>  
  
 <span data-ttu-id="e3165-1387">W składni wyrażeń zapytania języka Visual Basic `Aggregate Into Min()` klauzuli przekłada się na wywołanie <xref:System.Linq.Enumerable.Min%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-1387">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-1388">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> Aby określić minimalną wartość w sekwencji przewidywanych wartości.</span><span class="sxs-lookup"><span data-stu-id="e3165-1388">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the minimum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#68](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#68)]
 [!code-vb[System.Linq.Enumerable#68](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#68)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-1389">
            <paramref name="source" /> lub <paramref name="selector" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1389">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e3165-1390">
            <paramref name="source" /> nie zawiera żadnych elementów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1390">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="e3165-1391">Aggregate — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1391">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Min&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static int Min&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,int&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Min&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, int32&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Integer)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int Min(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, int&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;'Source&gt; * Func&lt;'Source, int&gt; -&gt; int" Usage="System.Linq.Enumerable.Min (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Int32&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-1392">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1392">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-1393">Kolejność wartości do określenia wartości minimalnej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1393">A sequence of values to determine the minimum value of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="e3165-1394">Funkcja transformacji do zastosowania do każdego elementu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1394">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-1395">Wywołuje funkcję przekształcenia dla każdego elementu w sekwencji i zwraca wartość minimalną <see cref="T:System.Int32" /> wartość.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1395">Invokes a transform function on each element of a sequence and returns the minimum <see cref="T:System.Int32" /> value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-1396">Minimalna wartość w sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1396">The minimum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-1397"><xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> Metoda używa <xref:System.Int32> implementacji <xref:System.IComparable%601> do porównywania wartości.</span><span class="sxs-lookup"><span data-stu-id="e3165-1397">The <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> method uses the <xref:System.Int32> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="e3165-1398">Tej metody można zastosować do je sekvence hodnot dowolnego, jeśli podasz funkcji, `selector`, które projekty członkowie `source` do typu liczbowego specjalnie <xref:System.Int32>.</span><span class="sxs-lookup"><span data-stu-id="e3165-1398">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Int32>.</span></span>  
  
 <span data-ttu-id="e3165-1399">W składni wyrażeń zapytania języka Visual Basic `Aggregate Into Min()` klauzuli przekłada się na wywołanie <xref:System.Linq.Enumerable.Min%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-1399">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-1400">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> Aby określić minimalną wartość w sekwencji przewidywanych wartości.</span><span class="sxs-lookup"><span data-stu-id="e3165-1400">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the minimum value in a sequence of projected values.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#68](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#68)]
 [!code-vb[System.Linq.Enumerable#68](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#68)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-1401">
            <paramref name="source" /> lub <paramref name="selector" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1401">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e3165-1402">
            <paramref name="source" /> nie zawiera żadnych elementów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1402">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="e3165-1403">Aggregate — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1403">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Min&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static long Min&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,long&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Min&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, int64&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Long)) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static long Min(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, long&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;'Source&gt; * Func&lt;'Source, int64&gt; -&gt; int64" Usage="System.Linq.Enumerable.Min (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Int64&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-1404">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1404">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-1405">Kolejność wartości do określenia wartości minimalnej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1405">A sequence of values to determine the minimum value of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="e3165-1406">Funkcja transformacji do zastosowania do każdego elementu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1406">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-1407">Wywołuje funkcję przekształcenia dla każdego elementu w sekwencji i zwraca wartość minimalną <see cref="T:System.Int64" /> wartość.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1407">Invokes a transform function on each element of a sequence and returns the minimum <see cref="T:System.Int64" /> value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-1408">Minimalna wartość w sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1408">The minimum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-1409"><xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29> Metoda używa <xref:System.Int64> implementacji <xref:System.IComparable%601> do porównywania wartości.</span><span class="sxs-lookup"><span data-stu-id="e3165-1409">The <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int64%7D%29> method uses the <xref:System.Int64> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="e3165-1410">Tej metody można zastosować do je sekvence hodnot dowolnego, jeśli podasz funkcji, `selector`, które projekty członkowie `source` do typu liczbowego specjalnie <xref:System.Int64>.</span><span class="sxs-lookup"><span data-stu-id="e3165-1410">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Int64>.</span></span>  
  
 <span data-ttu-id="e3165-1411">W składni wyrażeń zapytania języka Visual Basic `Aggregate Into Min()` klauzuli przekłada się na wywołanie <xref:System.Linq.Enumerable.Min%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-1411">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-1412">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> Aby określić minimalną wartość w sekwencji przewidywanych wartości.</span><span class="sxs-lookup"><span data-stu-id="e3165-1412">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the minimum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#68](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#68)]
 [!code-vb[System.Linq.Enumerable#68](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#68)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-1413">
            <paramref name="source" /> lub <paramref name="selector" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1413">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e3165-1414">
            <paramref name="source" /> nie zawiera żadnych elementów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1414">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="e3165-1415">Aggregate — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1415">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Min&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;decimal&gt; Min&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;decimal&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype System.Decimal&gt; Min&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Decimal))) As Nullable(Of Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;System::Decimal&gt; Min(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;System::Decimal&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;decimal&gt;&gt; -&gt; Nullable&lt;decimal&gt;" Usage="System.Linq.Enumerable.Min (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Decimal&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-1416">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1416">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-1417">Kolejność wartości do określenia wartości minimalnej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1417">A sequence of values to determine the minimum value of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="e3165-1418">Funkcja transformacji do zastosowania do każdego elementu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1418">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-1419">Wywołuje funkcję przekształcenia dla każdego elementu w sekwencji i zwraca wartość minimalną wartość null <see cref="T:System.Decimal" /> wartość.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1419">Invokes a transform function on each element of a sequence and returns the minimum nullable <see cref="T:System.Decimal" /> value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-1420">Wartość typu <c>Nullable&lt;dziesiętna&gt;</c> w języku C# lub <c>Nullable (z dziesiętna)</c> w języku Visual Basic, który odpowiada na minimalną wartość w sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1420">The value of type <c>Nullable&lt;Decimal&gt;</c> in C# or <c>Nullable(Of Decimal)</c> in Visual Basic that corresponds to the minimum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-1421"><xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%29> Metoda używa <xref:System.Decimal> implementacji <xref:System.IComparable%601> do porównywania wartości.</span><span class="sxs-lookup"><span data-stu-id="e3165-1421">The <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Decimal%7D%7D%29> method uses the <xref:System.Decimal> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="e3165-1422">Tej metody można zastosować do je sekvence hodnot dowolnego, jeśli podasz funkcji, `selector`, które projekty członkowie `source` do typu liczbowego specjalnie `Nullable<Decimal>` w języku C# lub `Nullable(Of Decimal)` w języku Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="e3165-1422">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Decimal>` in C# or `Nullable(Of Decimal)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="e3165-1423">W składni wyrażeń zapytania języka Visual Basic `Aggregate Into Min()` klauzuli przekłada się na wywołanie <xref:System.Linq.Enumerable.Min%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-1423">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-1424">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> Aby określić minimalną wartość w sekwencji przewidywanych wartości.</span><span class="sxs-lookup"><span data-stu-id="e3165-1424">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the minimum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#68](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#68)]
 [!code-vb[System.Linq.Enumerable#68](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#68)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-1425">
            <paramref name="source" /> lub <paramref name="selector" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1425">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="e3165-1426">Aggregate — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1426">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Min&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Min&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;double&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Min&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;float64&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Double))) As Nullable(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;double&gt; Min(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;double&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;double&gt;&gt; -&gt; Nullable&lt;double&gt;" Usage="System.Linq.Enumerable.Min (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Double&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-1427">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1427">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-1428">Kolejność wartości do określenia wartości minimalnej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1428">A sequence of values to determine the minimum value of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="e3165-1429">Funkcja transformacji do zastosowania do każdego elementu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1429">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-1430">Wywołuje funkcję przekształcenia dla każdego elementu w sekwencji i zwraca wartość minimalną wartość null <see cref="T:System.Double" /> wartość.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1430">Invokes a transform function on each element of a sequence and returns the minimum nullable <see cref="T:System.Double" /> value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-1431">Wartość typu <c>Nullable&lt;Double&gt;</c> w języku C# lub <c>Nullable (z Double)</c> w języku Visual Basic, który odpowiada na minimalną wartość w sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1431">The value of type <c>Nullable&lt;Double&gt;</c> in C# or <c>Nullable(Of Double)</c> in Visual Basic that corresponds to the minimum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-1432"><xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%29> Metoda używa <xref:System.Double> implementacji <xref:System.IComparable%601> do porównywania wartości.</span><span class="sxs-lookup"><span data-stu-id="e3165-1432">The <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Double%7D%7D%29> method uses the <xref:System.Double> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="e3165-1433">Tej metody można zastosować do je sekvence hodnot dowolnego, jeśli podasz funkcji, `selector`, które projekty członkowie `source` do typu liczbowego specjalnie `Nullable<Double>` w języku C# lub `Nullable(Of Double)` w języku Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="e3165-1433">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Double>` in C# or `Nullable(Of Double)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="e3165-1434">W składni wyrażeń zapytania języka Visual Basic `Aggregate Into Min()` klauzuli przekłada się na wywołanie <xref:System.Linq.Enumerable.Min%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-1434">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-1435">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> Aby określić minimalną wartość w sekwencji przewidywanych wartości.</span><span class="sxs-lookup"><span data-stu-id="e3165-1435">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the minimum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#68](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#68)]
 [!code-vb[System.Linq.Enumerable#68](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#68)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-1436">
            <paramref name="source" /> lub <paramref name="selector" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1436">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="e3165-1437">Aggregate — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1437">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Min&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;int&gt; Min&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;int&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int32&gt; Min&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;int32&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Integer))) As Nullable(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;int&gt; Min(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;int&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;int&gt;&gt; -&gt; Nullable&lt;int&gt;" Usage="System.Linq.Enumerable.Min (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Int32&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-1438">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1438">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-1439">Kolejność wartości do określenia wartości minimalnej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1439">A sequence of values to determine the minimum value of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="e3165-1440">Funkcja transformacji do zastosowania do każdego elementu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1440">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-1441">Wywołuje funkcję przekształcenia dla każdego elementu w sekwencji i zwraca wartość minimalną wartość null <see cref="T:System.Int32" /> wartość.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1441">Invokes a transform function on each element of a sequence and returns the minimum nullable <see cref="T:System.Int32" /> value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-1442">Wartość typu <c>Nullable&lt;Int32&gt;</c> w języku C# lub <c>Nullable (typu Int32)</c> w języku Visual Basic, który odpowiada na minimalną wartość w sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1442">The value of type <c>Nullable&lt;Int32&gt;</c> in C# or <c>Nullable(Of Int32)</c> in Visual Basic that corresponds to the minimum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-1443"><xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%29> Metoda używa <xref:System.Int32> implementacji <xref:System.IComparable%601> do porównywania wartości.</span><span class="sxs-lookup"><span data-stu-id="e3165-1443">The <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int32%7D%7D%29> method uses the <xref:System.Int32> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="e3165-1444">Tej metody można zastosować do je sekvence hodnot dowolnego Jeśli podasz funkcję `selector`, specjalnie do typu liczbowego, który projekty elementy członkowskie źródła `Nullable<Int32>` w języku C# lub `Nullable(Of Int32)` w języku Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="e3165-1444">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of source into a numeric type, specifically `Nullable<Int32>` in C# or `Nullable(Of Int32)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="e3165-1445">W składni wyrażeń zapytania języka Visual Basic `Aggregate Into Min()` klauzuli przekłada się na wywołanie <xref:System.Linq.Enumerable.Min%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-1445">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-1446">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> Aby określić minimalną wartość w sekwencji przewidywanych wartości.</span><span class="sxs-lookup"><span data-stu-id="e3165-1446">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the minimum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#68](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#68)]
 [!code-vb[System.Linq.Enumerable#68](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#68)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-1447">
            <paramref name="source" /> lub <paramref name="selector" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1447">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="e3165-1448">Aggregate — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1448">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Min&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;long&gt; Min&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;long&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int64&gt; Min&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;int64&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Long))) As Nullable(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;long&gt; Min(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;long&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;int64&gt;&gt; -&gt; Nullable&lt;int64&gt;" Usage="System.Linq.Enumerable.Min (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Int64&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-1449">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1449">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-1450">Kolejność wartości do określenia wartości minimalnej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1450">A sequence of values to determine the minimum value of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="e3165-1451">Funkcja transformacji do zastosowania do każdego elementu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1451">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-1452">Wywołuje funkcję przekształcenia dla każdego elementu w sekwencji i zwraca wartość minimalną wartość null <see cref="T:System.Int64" /> wartość.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1452">Invokes a transform function on each element of a sequence and returns the minimum nullable <see cref="T:System.Int64" /> value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-1453">Wartość typu <c>Nullable&lt;Int64&gt;</c> w języku C# lub <c>Nullable (z Int64)</c> w języku Visual Basic, który odpowiada na minimalną wartość w sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1453">The value of type <c>Nullable&lt;Int64&gt;</c> in C# or <c>Nullable(Of Int64)</c> in Visual Basic that corresponds to the minimum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-1454"><xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%29> Metoda używa <xref:System.Int64> implementacji <xref:System.IComparable%601> do porównywania wartości.</span><span class="sxs-lookup"><span data-stu-id="e3165-1454">The <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Int64%7D%7D%29> method uses the <xref:System.Int64> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="e3165-1455">Tej metody można zastosować do je sekvence hodnot dowolnego, jeśli podasz funkcji, `selector`, które projekty członkowie `source` do typu liczbowego specjalnie `Nullable<Int64>` w języku C# lub `Nullable(Of Int64)` w języku Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="e3165-1455">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Int64>` in C# or `Nullable(Of Int64)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="e3165-1456">W składni wyrażeń zapytania języka Visual Basic `Aggregate Into Min()` klauzuli przekłada się na wywołanie <xref:System.Linq.Enumerable.Min%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-1456">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-1457">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> Aby określić minimalną wartość w sekwencji przewidywanych wartości.</span><span class="sxs-lookup"><span data-stu-id="e3165-1457">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the minimum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#68](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#68)]
 [!code-vb[System.Linq.Enumerable#68](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#68)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-1458">
            <paramref name="source" /> lub <paramref name="selector" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1458">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="e3165-1459">Aggregate — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1459">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Min&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;float&gt; Min&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;float&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float32&gt; Min&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;float32&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Single))) As Nullable(Of Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;float&gt; Min(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;float&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;single&gt;&gt; -&gt; Nullable&lt;single&gt;" Usage="System.Linq.Enumerable.Min (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Single&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-1460">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1460">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-1461">Kolejność wartości do określenia wartości minimalnej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1461">A sequence of values to determine the minimum value of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="e3165-1462">Funkcja transformacji do zastosowania do każdego elementu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1462">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-1463">Wywołuje funkcję przekształcenia dla każdego elementu w sekwencji i zwraca wartość minimalną wartość null <see cref="T:System.Single" /> wartość.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1463">Invokes a transform function on each element of a sequence and returns the minimum nullable <see cref="T:System.Single" /> value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-1464">Wartość typu <c>Nullable&lt;pojedynczego&gt;</c> w języku C# lub <c>Nullable (z pojedynczą)</c> w języku Visual Basic, który odpowiada na minimalną wartość w sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1464">The value of type <c>Nullable&lt;Single&gt;</c> in C# or <c>Nullable(Of Single)</c> in Visual Basic that corresponds to the minimum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-1465"><xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%29> Metoda używa <xref:System.Single> implementacji <xref:System.IComparable%601> do porównywania wartości.</span><span class="sxs-lookup"><span data-stu-id="e3165-1465">The <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Nullable%7BSystem.Single%7D%7D%29> method uses the <xref:System.Single> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="e3165-1466">Tej metody można zastosować do je sekvence hodnot dowolnego, jeśli podasz funkcji, `selector`, które projekty członkowie `source` do typu liczbowego specjalnie `Nullable<Single>` w języku C# lub `Nullable(Of Single)` w języku Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="e3165-1466">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Single>` in C# or `Nullable(Of Single)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="e3165-1467">W składni wyrażeń zapytania języka Visual Basic `Aggregate Into Min()` klauzuli przekłada się na wywołanie <xref:System.Linq.Enumerable.Min%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-1467">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-1468">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> Aby określić minimalną wartość w sekwencji przewidywanych wartości.</span><span class="sxs-lookup"><span data-stu-id="e3165-1468">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the minimum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#68](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#68)]
 [!code-vb[System.Linq.Enumerable#68](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#68)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-1469">
            <paramref name="source" /> lub <paramref name="selector" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1469">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="e3165-1470">Aggregate — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1470">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Min&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static float Min&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,float&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Min&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, float32&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Single)) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static float Min(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, float&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;'Source&gt; * Func&lt;'Source, single&gt; -&gt; single" Usage="System.Linq.Enumerable.Min (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Single&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-1471">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1471">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-1472">Kolejność wartości do określenia wartości minimalnej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1472">A sequence of values to determine the minimum value of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="e3165-1473">Funkcja transformacji do zastosowania do każdego elementu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1473">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-1474">Wywołuje funkcję przekształcenia dla każdego elementu w sekwencji i zwraca wartość minimalną <see cref="T:System.Single" /> wartość.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1474">Invokes a transform function on each element of a sequence and returns the minimum <see cref="T:System.Single" /> value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-1475">Minimalna wartość w sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1475">The minimum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-1476"><xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Single%7D%29> Metoda używa <xref:System.Single> implementacji <xref:System.IComparable%601> do porównywania wartości.</span><span class="sxs-lookup"><span data-stu-id="e3165-1476">The <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Single%7D%29> method uses the <xref:System.Single> implementation of <xref:System.IComparable%601> to compare values.</span></span>  
  
 <span data-ttu-id="e3165-1477">Tej metody można zastosować do je sekvence hodnot dowolnego, jeśli podasz funkcji, `selector`, które projekty członkowie `source` do typu liczbowego specjalnie <xref:System.Single>.</span><span class="sxs-lookup"><span data-stu-id="e3165-1477">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Single>.</span></span>  
  
 <span data-ttu-id="e3165-1478">W składni wyrażeń zapytania języka Visual Basic `Aggregate Into Min()` klauzuli przekłada się na wywołanie <xref:System.Linq.Enumerable.Min%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-1478">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-1479">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> Aby określić minimalną wartość w sekwencji przewidywanych wartości.</span><span class="sxs-lookup"><span data-stu-id="e3165-1479">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the minimum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#68](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#68)]
 [!code-vb[System.Linq.Enumerable#68](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#68)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-1480">
            <paramref name="source" /> lub <paramref name="selector" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1480">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e3165-1481">
            <paramref name="source" /> nie zawiera żadnych elementów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1481">
              <paramref name="source" /> contains no elements.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="e3165-1482">Aggregate — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1482">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Min&lt;TSource,TResult&gt;">
      <MemberSignature Language="C#" Value="public static TResult Min&lt;TSource,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TResult&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TResult Min&lt;TSource, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TResult&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Min``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Min(Of TSource, TResult) (source As IEnumerable(Of TSource), selector As Func(Of TSource, TResult)) As TResult" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TResult Min(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TResult&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Min : seq&lt;'Source&gt; * Func&lt;'Source, 'Result&gt; -&gt; 'Result" Usage="System.Linq.Enumerable.Min (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TResult</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-1483">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1483">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <typeparam name="TResult">
          <span data-ttu-id="e3165-1484">Typ wartości zwracanej przez <c>selektor</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1484">The type of the value returned by <c>selector</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-1485">Kolejność wartości do określenia wartości minimalnej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1485">A sequence of values to determine the minimum value of.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="e3165-1486">Funkcja transformacji do zastosowania do każdego elementu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1486">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-1487">Wywołuje funkcję przekształcenia dla każdego elementu w sekwencji ogólny i zwraca minimalną wartość wynikową.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1487">Invokes a transform function on each element of a generic sequence and returns the minimum resulting value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-1488">Minimalna wartość w sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1488">The minimum value in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-1489">Jeśli typ `TResult` implementuje <xref:System.IComparable%601>, Metoda ta wykorzystuje tę implementację, aby porównać wartości.</span><span class="sxs-lookup"><span data-stu-id="e3165-1489">If type `TResult` implements <xref:System.IComparable%601>, this method uses that implementation to compare values.</span></span> <span data-ttu-id="e3165-1490">W przeciwnym razie, jeśli typ `TResult` implementuje <xref:System.IComparable>, że wykonanie służy do porównywania wartości.</span><span class="sxs-lookup"><span data-stu-id="e3165-1490">Otherwise, if type `TResult` implements <xref:System.IComparable>, that implementation is used to compare values.</span></span>  
  
 <span data-ttu-id="e3165-1491">W składni wyrażeń zapytania języka Visual Basic `Aggregate Into Min()` klauzuli przekłada się na wywołanie <xref:System.Linq.Enumerable.Min%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-1491">In Visual Basic query expression syntax, an `Aggregate Into Min()` clause translates to an invocation of <xref:System.Linq.Enumerable.Min%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-1492">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> Aby określić minimalną wartość w sekwencji przewidywanych wartości.</span><span class="sxs-lookup"><span data-stu-id="e3165-1492">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Min%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%7D%29> to determine the minimum value in a sequence of projected values.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#68](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#68)]
 [!code-vb[System.Linq.Enumerable#68](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#68)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-1493">
            <paramref name="source" /> lub <paramref name="selector" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1493">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="e3165-1494">Aggregate — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1494">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="OfType&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; OfType&lt;TResult&gt; (this System.Collections.IEnumerable source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; OfType&lt;TResult&gt;(class System.Collections.IEnumerable source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.OfType``1(System.Collections.IEnumerable)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function OfType(Of TResult) (source As IEnumerable) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ OfType(System::Collections::IEnumerable ^ source);" />
      <MemberSignature Language="F#" Value="static member OfType : System.Collections.IEnumerable -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.OfType source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.IEnumerable" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="e3165-1495">Typ do filtrowania elementów sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1495">The type to filter the elements of the sequence on.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-1496">
            <see cref="T:System.Collections.IEnumerable" /> Której elementy do filtrowania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1496">The <see cref="T:System.Collections.IEnumerable" /> whose elements to filter.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-1497">Filtruje elementy <see cref="T:System.Collections.IEnumerable" /> na podstawie określonego typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1497">Filters the elements of an <see cref="T:System.Collections.IEnumerable" /> based on a specified type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-1498">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Zawierający elementy z sekwencji wejściowych typu <paramref name="TResult" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1498">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains elements from the input sequence of type <paramref name="TResult" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-1499">Ta metoda jest implementowana za pomocą odroczonego wykonania.</span><span class="sxs-lookup"><span data-stu-id="e3165-1499">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="e3165-1500">Bezpośrednio zwracana wartość jest obiektem, który przechowuje wszystkie informacje wymagane do wykonania akcji.</span><span class="sxs-lookup"><span data-stu-id="e3165-1500">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="e3165-1501">Zapytanie, reprezentowane przez tę metodę nie jest wykonywana do czasu, przez wywołanie obiekt jest zostanie wyliczonly jego `GetEnumerator` metoda bezpośrednio lub za pomocą `foreach` w języku Visual C# lub `For Each` w języku Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="e3165-1501">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="e3165-1502"><xref:System.Linq.Enumerable.OfType%60%601%28System.Collections.IEnumerable%29> Metoda zwraca tylko te elementy w `source` mogą być rzutowane na typ `TResult`.</span><span class="sxs-lookup"><span data-stu-id="e3165-1502">The <xref:System.Linq.Enumerable.OfType%60%601%28System.Collections.IEnumerable%29> method returns only those elements in `source` that can be cast to type `TResult`.</span></span> <span data-ttu-id="e3165-1503">Zamiast tego uzyskania wyjątek, jeśli element nie można rzutować na typ `TResult`, użyj <xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29>.</span><span class="sxs-lookup"><span data-stu-id="e3165-1503">To instead receive an exception if an element cannot be cast to type `TResult`, use <xref:System.Linq.Enumerable.Cast%60%601%28System.Collections.IEnumerable%29>.</span></span>  
  
 <span data-ttu-id="e3165-1504">Ta metoda jest jednym z kilku metod standardowych operatorów zapytań, które mogą być stosowane do kolekcji, która ma typ bez parametrów, takich jak <xref:System.Collections.ArrayList>.</span><span class="sxs-lookup"><span data-stu-id="e3165-1504">This method is one of the few standard query operator methods that can be applied to a collection that has a non-parameterized type, such as an <xref:System.Collections.ArrayList>.</span></span> <span data-ttu-id="e3165-1505">Jest to spowodowane <xref:System.Linq.Enumerable.OfType%2A> rozszerza typ <xref:System.Collections.IEnumerable>.</span><span class="sxs-lookup"><span data-stu-id="e3165-1505">This is because <xref:System.Linq.Enumerable.OfType%2A> extends the type <xref:System.Collections.IEnumerable>.</span></span> <span data-ttu-id="e3165-1506"><xref:System.Linq.Enumerable.OfType%2A> Nie można zastosować tylko do kolekcji, które są oparte na sparametryzowane <xref:System.Collections.Generic.IEnumerable%601> typu, ale kolekcje, które są oparte na zdefiniowanych <xref:System.Collections.IEnumerable> również wpisać.</span><span class="sxs-lookup"><span data-stu-id="e3165-1506"><xref:System.Linq.Enumerable.OfType%2A> cannot only be applied to collections that are based on the parameterized <xref:System.Collections.Generic.IEnumerable%601> type, but collections that are based on the non-parameterized <xref:System.Collections.IEnumerable> type also.</span></span>  
  
 <span data-ttu-id="e3165-1507">Stosując <xref:System.Linq.Enumerable.OfType%2A> do kolekcji, która implementuje <xref:System.Collections.IEnumerable>, zyskasz możliwość zapytanie do kolekcji przy użyciu standardowych operatorów zapytań.</span><span class="sxs-lookup"><span data-stu-id="e3165-1507">By applying <xref:System.Linq.Enumerable.OfType%2A> to a collection that implements <xref:System.Collections.IEnumerable>, you gain the ability to query the collection by using the standard query operators.</span></span> <span data-ttu-id="e3165-1508">Na przykład określić argument typu <xref:System.Object> do <xref:System.Linq.Enumerable.OfType%2A> zwróci obiekt typu `IEnumerable<Object>` w języku C# lub `IEnumerable(Of Object)` w języku Visual Basic, do którego można zastosować standardowych operatorów zapytań.</span><span class="sxs-lookup"><span data-stu-id="e3165-1508">For example, specifying a type argument of <xref:System.Object> to <xref:System.Linq.Enumerable.OfType%2A> would return an object of type `IEnumerable<Object>` in C# or `IEnumerable(Of Object)` in Visual Basic, to which the standard query operators can be applied.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-1509">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.OfType%2A> do filtrowania elementów <xref:System.Collections.IEnumerable>.</span><span class="sxs-lookup"><span data-stu-id="e3165-1509">The following code example demonstrates how to use <xref:System.Linq.Enumerable.OfType%2A> to filter the elements of an <xref:System.Collections.IEnumerable>.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#69](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#69)]
 [!code-vb[System.Linq.Enumerable#69](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#69)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-1510">
            <paramref name="source" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1510">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="OrderBy&lt;TSource,TKey&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e3165-1511">Sortuje elementy sekwencji w kolejności rosnącej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1511">Sorts the elements of a sequence in ascending order.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OrderBy&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IOrderedEnumerable&lt;TSource&gt; OrderBy&lt;TSource,TKey&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IOrderedEnumerable`1&lt;!!TSource&gt; OrderBy&lt;TSource, TKey&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function OrderBy(Of TSource, TKey) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey)) As IOrderedEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IOrderedEnumerable&lt;TSource&gt; ^ OrderBy(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector);" />
      <MemberSignature Language="F#" Value="static member OrderBy : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; -&gt; System.Linq.IOrderedEnumerable&lt;'Source&gt;" Usage="System.Linq.Enumerable.OrderBy (source, keySelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IOrderedEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-1512">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1512">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <typeparam name="TKey">
          <span data-ttu-id="e3165-1513">Rodzaj klucza zwracany przez <c>keySelector</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1513">The type of the key returned by <c>keySelector</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-1514">Sekwencja wartości do ustawienia w kolejności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1514">A sequence of values to order.</span>
          </span>
        </param>
        <param name="keySelector">
          <span data-ttu-id="e3165-1515">Funkcja wyodrębniania klucza z elementu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1515">A function to extract a key from an element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-1516">Sortuje elementy sekwencji rosnąco, zgodnie z kluczem.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1516">Sorts the elements of a sequence in ascending order according to a key.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-1517">
            <see cref="T:System.Linq.IOrderedEnumerable`1" /> Której elementy są sortowane według klucza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1517">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> whose elements are sorted according to a key.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-1518">Ta metoda jest implementowana za pomocą odroczonego wykonania.</span><span class="sxs-lookup"><span data-stu-id="e3165-1518">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="e3165-1519">Bezpośrednio zwracana wartość jest obiektem, który przechowuje wszystkie informacje wymagane do wykonania akcji.</span><span class="sxs-lookup"><span data-stu-id="e3165-1519">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="e3165-1520">Zapytanie, reprezentowane przez tę metodę nie jest wykonywana do czasu, przez wywołanie obiekt jest zostanie wyliczonly jego `GetEnumerator` metoda bezpośrednio lub za pomocą `foreach` w języku Visual C# lub `For Each` w języku Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="e3165-1520">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="e3165-1521">Sekwencję w kolejności według wartości samych elementów, należy określić funkcję tożsamości (`x => x` w języku Visual C# lub `Function(x) x` w języku Visual Basic) dla `keySelector`.</span><span class="sxs-lookup"><span data-stu-id="e3165-1521">To order a sequence by the values of the elements themselves, specify the identity function (`x => x` in Visual C# or `Function(x) x` in Visual Basic) for `keySelector`.</span></span>  
  
 <span data-ttu-id="e3165-1522">Dwie metody zostały zdefiniowane w celu rozszerzenia typu <xref:System.Linq.IOrderedEnumerable%601>, który jest typem zwracanym tej metody.</span><span class="sxs-lookup"><span data-stu-id="e3165-1522">Two methods are defined to extend the type <xref:System.Linq.IOrderedEnumerable%601>, which is the return type of this method.</span></span> <span data-ttu-id="e3165-1523">Te dwie metody, a mianowicie `ThenBy` i `ThenByDescending`, pozwalają na określenie dodatkowych kryteriów sortowania do sortowania sekwencji.</span><span class="sxs-lookup"><span data-stu-id="e3165-1523">These two methods, namely `ThenBy` and `ThenByDescending`, enable you to specify additional sort criteria to sort a sequence.</span></span> <span data-ttu-id="e3165-1524">`ThenBy` i `ThenByDescending` również zwracać <xref:System.Linq.IOrderedEnumerable%601>, co oznacza dowolną liczbę kolejnych wywołań `ThenBy` lub `ThenByDescending` jest możliwe.</span><span class="sxs-lookup"><span data-stu-id="e3165-1524">`ThenBy` and `ThenByDescending` also return an <xref:System.Linq.IOrderedEnumerable%601>, which means any number of consecutive calls to `ThenBy` or `ThenByDescending` can be made.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e3165-1525">Ponieważ <xref:System.Linq.IOrderedEnumerable%601> dziedziczy <xref:System.Collections.Generic.IEnumerable%601>, można wywołać <xref:System.Linq.Enumerable.OrderBy%2A> lub <xref:System.Linq.Enumerable.OrderByDescending%2A> na wynikach wywołania <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> lub <xref:System.Linq.Enumerable.ThenByDescending%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-1525">Because <xref:System.Linq.IOrderedEnumerable%601> inherits from <xref:System.Collections.Generic.IEnumerable%601>, you can call <xref:System.Linq.Enumerable.OrderBy%2A> or <xref:System.Linq.Enumerable.OrderByDescending%2A> on the results of a call to <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A>.</span></span> <span data-ttu-id="e3165-1526">Ten sposób wprowadza nowe podstawowe ustawianie kolejności, które ignoruje ustanowiony wcześniej sposób ustawiania.</span><span class="sxs-lookup"><span data-stu-id="e3165-1526">Doing this introduces a new primary ordering that ignores the previously established ordering.</span></span>  
  
 <span data-ttu-id="e3165-1527">Ta metoda porównuje klucze przy użyciu domyślny moduł porównujący <xref:System.Collections.Generic.Comparer%601.Default%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-1527">This method compares keys by using the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A>.</span></span>  
  
 <span data-ttu-id="e3165-1528">Ta metoda wykonuje stabilne sortowanie; oznacza to, że jeśli klawisze dwóch elementów są równe, kolejność elementów jest zachowywana.</span><span class="sxs-lookup"><span data-stu-id="e3165-1528">This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved.</span></span> <span data-ttu-id="e3165-1529">Z drugiej strony, niestabilne sortowanie nie pozwala zachować kolejności elementów, które mają ten sam klucz.</span><span class="sxs-lookup"><span data-stu-id="e3165-1529">In contrast, an unstable sort does not preserve the order of elements that have the same key.</span></span>  
  
 <span data-ttu-id="e3165-1530">W składni wyrażeń zapytania `orderby` (Visual C#) lub `Order By` — klauzula (Visual Basic) przekłada się na wywołanie <xref:System.Linq.Enumerable.OrderBy%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-1530">In query expression syntax, an `orderby` (Visual C#) or `Order By` (Visual Basic) clause translates to an invocation of <xref:System.Linq.Enumerable.OrderBy%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-1531">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.OrderBy%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29> elementy sekwencji sortowania.</span><span class="sxs-lookup"><span data-stu-id="e3165-1531">The following code example demonstrates how to use <xref:System.Linq.Enumerable.OrderBy%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29> to sort the elements of a sequence.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#70](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#70)]
 [!code-vb[System.Linq.Enumerable#70](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#70)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-1532">
            <paramref name="source" /> lub <paramref name="keySelector" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1532">
              <paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
        <altmember cref="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
        <related type="Article" href="https://msdn.microsoft.com/library/21f87f48-d69d-4e95-9a52-6fec47b37e1f">
          <span data-ttu-id="e3165-1533">Klauzula orderby (odwołanie w C#)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1533">orderby clause (C# Reference)</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/fa911282-6b81-44c7-acfa-46b5bb93df75">
          <span data-ttu-id="e3165-1534">Order By — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1534">Order By Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="OrderBy&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IOrderedEnumerable&lt;TSource&gt; OrderBy&lt;TSource,TKey&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, System.Collections.Generic.IComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IOrderedEnumerable`1&lt;!!TSource&gt; OrderBy&lt;TSource, TKey&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Collections.Generic.IComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function OrderBy(Of TSource, TKey) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), comparer As IComparer(Of TKey)) As IOrderedEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IOrderedEnumerable&lt;TSource&gt; ^ OrderBy(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, System::Collections::Generic::IComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member OrderBy : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * System.Collections.Generic.IComparer&lt;'Key&gt; -&gt; System.Linq.IOrderedEnumerable&lt;'Source&gt;" Usage="System.Linq.Enumerable.OrderBy (source, keySelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IOrderedEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-1535">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1535">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <typeparam name="TKey">
          <span data-ttu-id="e3165-1536">Rodzaj klucza zwracany przez <c>keySelector</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1536">The type of the key returned by <c>keySelector</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-1537">Sekwencja wartości do ustawienia w kolejności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1537">A sequence of values to order.</span>
          </span>
        </param>
        <param name="keySelector">
          <span data-ttu-id="e3165-1538">Funkcja wyodrębniania klucza z elementu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1538">A function to extract a key from an element.</span>
          </span>
        </param>
        <param name="comparer">
          <span data-ttu-id="e3165-1539">
            <see cref="T:System.Collections.Generic.IComparer`1" /> Do porównywania kluczy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1539">An <see cref="T:System.Collections.Generic.IComparer`1" /> to compare keys.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-1540">Sortuje elementy sekwencji w kolejności rosnącej przy użyciu określona funkcja porównująca.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1540">Sorts the elements of a sequence in ascending order by using a specified comparer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-1541">
            <see cref="T:System.Linq.IOrderedEnumerable`1" /> Której elementy są sortowane według klucza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1541">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> whose elements are sorted according to a key.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-1542">Ta metoda jest implementowana za pomocą odroczonego wykonania.</span><span class="sxs-lookup"><span data-stu-id="e3165-1542">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="e3165-1543">Bezpośrednio zwracana wartość jest obiektem, który przechowuje wszystkie informacje wymagane do wykonania akcji.</span><span class="sxs-lookup"><span data-stu-id="e3165-1543">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="e3165-1544">Zapytanie, reprezentowane przez tę metodę nie jest wykonywana do czasu, przez wywołanie obiekt jest zostanie wyliczonly jego `GetEnumerator` metoda bezpośrednio lub za pomocą `foreach` w języku Visual C# lub `For Each` w języku Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="e3165-1544">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="e3165-1545">Sekwencję w kolejności według wartości samych elementów, należy określić funkcję tożsamości (`x => x` w języku Visual C# lub `Function(x) x` w języku Visual Basic) dla `keySelector`.</span><span class="sxs-lookup"><span data-stu-id="e3165-1545">To order a sequence by the values of the elements themselves, specify the identity function (`x => x` in Visual C# or `Function(x) x` in Visual Basic) for `keySelector`.</span></span>  
  
 <span data-ttu-id="e3165-1546">Dwie metody zostały zdefiniowane w celu rozszerzenia typu <xref:System.Linq.IOrderedEnumerable%601>, który jest typem zwracanym tej metody.</span><span class="sxs-lookup"><span data-stu-id="e3165-1546">Two methods are defined to extend the type <xref:System.Linq.IOrderedEnumerable%601>, which is the return type of this method.</span></span> <span data-ttu-id="e3165-1547">Te dwie metody, a mianowicie `ThenBy` i `ThenByDescending`, pozwalają na określenie dodatkowych kryteriów sortowania do sortowania sekwencji.</span><span class="sxs-lookup"><span data-stu-id="e3165-1547">These two methods, namely `ThenBy` and `ThenByDescending`, enable you to specify additional sort criteria to sort a sequence.</span></span> <span data-ttu-id="e3165-1548">`ThenBy` i `ThenByDescending` również zwracać <xref:System.Linq.IOrderedEnumerable%601>, co oznacza dowolną liczbę kolejnych wywołań `ThenBy` lub `ThenByDescending` jest możliwe.</span><span class="sxs-lookup"><span data-stu-id="e3165-1548">`ThenBy` and `ThenByDescending` also return an <xref:System.Linq.IOrderedEnumerable%601>, which means any number of consecutive calls to `ThenBy` or `ThenByDescending` can be made.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e3165-1549">Ponieważ <xref:System.Linq.IOrderedEnumerable%601> dziedziczy <xref:System.Collections.Generic.IEnumerable%601>, można wywołać <xref:System.Linq.Enumerable.OrderBy%2A> lub <xref:System.Linq.Enumerable.OrderByDescending%2A> na wynikach wywołania <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> lub <xref:System.Linq.Enumerable.ThenByDescending%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-1549">Because <xref:System.Linq.IOrderedEnumerable%601> inherits from <xref:System.Collections.Generic.IEnumerable%601>, you can call <xref:System.Linq.Enumerable.OrderBy%2A> or <xref:System.Linq.Enumerable.OrderByDescending%2A> on the results of a call to <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A>.</span></span> <span data-ttu-id="e3165-1550">Ten sposób wprowadza nowe podstawowe ustawianie kolejności, które ignoruje ustanowiony wcześniej sposób ustawiania.</span><span class="sxs-lookup"><span data-stu-id="e3165-1550">Doing this introduces a new primary ordering that ignores the previously established ordering.</span></span>  
  
 <span data-ttu-id="e3165-1551">Jeśli `comparer` jest `null`, domyślny moduł porównujący <xref:System.Collections.Generic.Comparer%601.Default%2A> służy do porównywania kluczy.</span><span class="sxs-lookup"><span data-stu-id="e3165-1551">If `comparer` is `null`, the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A> is used to compare keys.</span></span>  
  
 <span data-ttu-id="e3165-1552">Ta metoda wykonuje stabilne sortowanie; oznacza to, że jeśli klawisze dwóch elementów są równe, kolejność elementów jest zachowywana.</span><span class="sxs-lookup"><span data-stu-id="e3165-1552">This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved.</span></span> <span data-ttu-id="e3165-1553">Z drugiej strony, niestabilne sortowanie nie pozwala zachować kolejności elementów, które mają ten sam klucz.</span><span class="sxs-lookup"><span data-stu-id="e3165-1553">In contrast, an unstable sort does not preserve the order of elements that have the same key.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-1554">
            <paramref name="source" /> lub <paramref name="keySelector" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1554">
              <paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
        <altmember cref="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
      </Docs>
    </Member>
    <MemberGroup MemberName="OrderByDescending&lt;TSource,TKey&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e3165-1555">Sortuje elementy sekwencji w kolejności malejącej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1555">Sorts the elements of a sequence in descending order.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="OrderByDescending&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IOrderedEnumerable&lt;TSource&gt; OrderByDescending&lt;TSource,TKey&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IOrderedEnumerable`1&lt;!!TSource&gt; OrderByDescending&lt;TSource, TKey&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function OrderByDescending(Of TSource, TKey) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey)) As IOrderedEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IOrderedEnumerable&lt;TSource&gt; ^ OrderByDescending(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector);" />
      <MemberSignature Language="F#" Value="static member OrderByDescending : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; -&gt; System.Linq.IOrderedEnumerable&lt;'Source&gt;" Usage="System.Linq.Enumerable.OrderByDescending (source, keySelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IOrderedEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-1556">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1556">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <typeparam name="TKey">
          <span data-ttu-id="e3165-1557">Rodzaj klucza zwracany przez <c>keySelector</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1557">The type of the key returned by <c>keySelector</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-1558">Sekwencja wartości do ustawienia w kolejności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1558">A sequence of values to order.</span>
          </span>
        </param>
        <param name="keySelector">
          <span data-ttu-id="e3165-1559">Funkcja wyodrębniania klucza z elementu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1559">A function to extract a key from an element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-1560">Sortuje elementy sekwencji w porządku malejącym zgodnie z kluczem.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1560">Sorts the elements of a sequence in descending order according to a key.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-1561">
            <see cref="T:System.Linq.IOrderedEnumerable`1" /> Której elementy są sortowane w porządku malejącym zgodnie z kluczem.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1561">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> whose elements are sorted in descending order according to a key.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-1562">Ta metoda jest implementowana za pomocą odroczonego wykonania.</span><span class="sxs-lookup"><span data-stu-id="e3165-1562">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="e3165-1563">Bezpośrednio zwracana wartość jest obiektem, który przechowuje wszystkie informacje wymagane do wykonania akcji.</span><span class="sxs-lookup"><span data-stu-id="e3165-1563">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="e3165-1564">Zapytanie, reprezentowane przez tę metodę nie jest wykonywana do czasu, przez wywołanie obiekt jest zostanie wyliczonly jego `GetEnumerator` metoda bezpośrednio lub za pomocą `foreach` w języku Visual C# lub `For Each` w języku Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="e3165-1564">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="e3165-1565">Sekwencję w kolejności według wartości samych elementów, należy określić funkcję tożsamości (`x => x` w języku Visual C# lub `Function(x) x` w języku Visual Basic) dla `keySelector`.</span><span class="sxs-lookup"><span data-stu-id="e3165-1565">To order a sequence by the values of the elements themselves, specify the identity function (`x => x` in Visual C# or `Function(x) x` in Visual Basic) for `keySelector`.</span></span>  
  
 <span data-ttu-id="e3165-1566">Aby uzyskać przykład tej metody, zobacz <xref:System.Linq.Enumerable.OrderByDescending%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29>.</span><span class="sxs-lookup"><span data-stu-id="e3165-1566">For an example of this method, see <xref:System.Linq.Enumerable.OrderByDescending%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29>.</span></span>  
  
 <span data-ttu-id="e3165-1567">Dwie metody zostały zdefiniowane w celu rozszerzenia typu <xref:System.Linq.IOrderedEnumerable%601>, który jest typem zwracanym tej metody.</span><span class="sxs-lookup"><span data-stu-id="e3165-1567">Two methods are defined to extend the type <xref:System.Linq.IOrderedEnumerable%601>, which is the return type of this method.</span></span> <span data-ttu-id="e3165-1568">Te dwie metody, a mianowicie `ThenBy` i `ThenByDescending`, pozwalają na określenie dodatkowych kryteriów sortowania do sortowania sekwencji.</span><span class="sxs-lookup"><span data-stu-id="e3165-1568">These two methods, namely `ThenBy` and `ThenByDescending`, enable you to specify additional sort criteria to sort a sequence.</span></span> <span data-ttu-id="e3165-1569">`ThenBy` i `ThenByDescending` również zwracać <xref:System.Linq.IOrderedEnumerable%601>, co oznacza dowolną liczbę kolejnych wywołań `ThenBy` lub `ThenByDescending` jest możliwe.</span><span class="sxs-lookup"><span data-stu-id="e3165-1569">`ThenBy` and `ThenByDescending` also return an <xref:System.Linq.IOrderedEnumerable%601>, which means any number of consecutive calls to `ThenBy` or `ThenByDescending` can be made.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e3165-1570">Ponieważ <xref:System.Linq.IOrderedEnumerable%601> dziedziczy <xref:System.Collections.Generic.IEnumerable%601>, można wywołać <xref:System.Linq.Enumerable.OrderBy%2A> lub <xref:System.Linq.Enumerable.OrderByDescending%2A> na wynikach wywołania <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> lub <xref:System.Linq.Enumerable.ThenByDescending%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-1570">Because <xref:System.Linq.IOrderedEnumerable%601> inherits from <xref:System.Collections.Generic.IEnumerable%601>, you can call <xref:System.Linq.Enumerable.OrderBy%2A> or <xref:System.Linq.Enumerable.OrderByDescending%2A> on the results of a call to <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A>.</span></span> <span data-ttu-id="e3165-1571">Ten sposób wprowadza nowe podstawowe ustawianie kolejności, które ignoruje ustanowiony wcześniej sposób ustawiania.</span><span class="sxs-lookup"><span data-stu-id="e3165-1571">Doing this introduces a new primary ordering that ignores the previously established ordering.</span></span>  
  
 <span data-ttu-id="e3165-1572">Ta metoda porównuje klucze przy użyciu domyślny moduł porównujący <xref:System.Collections.Generic.Comparer%601.Default%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-1572">This method compares keys by using the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A>.</span></span>  
  
 <span data-ttu-id="e3165-1573">Ta metoda wykonuje stabilne sortowanie; oznacza to, że jeśli klawisze dwóch elementów są równe, kolejność elementów jest zachowywana.</span><span class="sxs-lookup"><span data-stu-id="e3165-1573">This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved.</span></span> <span data-ttu-id="e3165-1574">Z drugiej strony, niestabilne sortowanie nie pozwala zachować kolejności elementów, które mają ten sam klucz.</span><span class="sxs-lookup"><span data-stu-id="e3165-1574">In contrast, an unstable sort does not preserve the order of elements that have the same key.</span></span>  
  
 <span data-ttu-id="e3165-1575">W składni wyrażeń zapytania `orderby descending` (Visual C#) lub `Order By Descending` — klauzula (Visual Basic) przekłada się na wywołanie <xref:System.Linq.Enumerable.OrderByDescending%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-1575">In query expression syntax, an `orderby descending` (Visual C#) or `Order By Descending` (Visual Basic) clause translates to an invocation of <xref:System.Linq.Enumerable.OrderByDescending%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-1576">
            <paramref name="source" /> lub <paramref name="keySelector" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1576">
              <paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
        <altmember cref="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
        <related type="Article" href="https://msdn.microsoft.com/library/21f87f48-d69d-4e95-9a52-6fec47b37e1f">
          <span data-ttu-id="e3165-1577">Klauzula orderby (odwołanie w C#)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1577">orderby clause (C# Reference)</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/fa911282-6b81-44c7-acfa-46b5bb93df75">
          <span data-ttu-id="e3165-1578">Order By — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1578">Order By Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="OrderByDescending&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IOrderedEnumerable&lt;TSource&gt; OrderByDescending&lt;TSource,TKey&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, System.Collections.Generic.IComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IOrderedEnumerable`1&lt;!!TSource&gt; OrderByDescending&lt;TSource, TKey&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Collections.Generic.IComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.OrderByDescending``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function OrderByDescending(Of TSource, TKey) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), comparer As IComparer(Of TKey)) As IOrderedEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IOrderedEnumerable&lt;TSource&gt; ^ OrderByDescending(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, System::Collections::Generic::IComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member OrderByDescending : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * System.Collections.Generic.IComparer&lt;'Key&gt; -&gt; System.Linq.IOrderedEnumerable&lt;'Source&gt;" Usage="System.Linq.Enumerable.OrderByDescending (source, keySelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IOrderedEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-1579">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1579">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <typeparam name="TKey">
          <span data-ttu-id="e3165-1580">Rodzaj klucza zwracany przez <c>keySelector</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1580">The type of the key returned by <c>keySelector</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-1581">Sekwencja wartości do ustawienia w kolejności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1581">A sequence of values to order.</span>
          </span>
        </param>
        <param name="keySelector">
          <span data-ttu-id="e3165-1582">Funkcja wyodrębniania klucza z elementu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1582">A function to extract a key from an element.</span>
          </span>
        </param>
        <param name="comparer">
          <span data-ttu-id="e3165-1583">
            <see cref="T:System.Collections.Generic.IComparer`1" /> Do porównywania kluczy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1583">An <see cref="T:System.Collections.Generic.IComparer`1" /> to compare keys.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-1584">Sortuje elementy sekwencji w kolejności malejącej, używając określona funkcja porównująca.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1584">Sorts the elements of a sequence in descending order by using a specified comparer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-1585">
            <see cref="T:System.Linq.IOrderedEnumerable`1" /> Której elementy są sortowane w porządku malejącym zgodnie z kluczem.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1585">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> whose elements are sorted in descending order according to a key.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-1586">Ta metoda jest implementowana za pomocą odroczonego wykonania.</span><span class="sxs-lookup"><span data-stu-id="e3165-1586">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="e3165-1587">Bezpośrednio zwracana wartość jest obiektem, który przechowuje wszystkie informacje wymagane do wykonania akcji.</span><span class="sxs-lookup"><span data-stu-id="e3165-1587">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="e3165-1588">Zapytanie, reprezentowane przez tę metodę nie jest wykonywana do czasu, przez wywołanie obiekt jest zostanie wyliczonly jego `GetEnumerator` metoda bezpośrednio lub za pomocą `foreach` w języku Visual C# lub `For Each` w języku Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="e3165-1588">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="e3165-1589">Sekwencję w kolejności według wartości samych elementów, należy określić funkcję tożsamości (`x => x` w języku Visual C# lub `Function(x) x` w języku Visual Basic) dla `keySelector`.</span><span class="sxs-lookup"><span data-stu-id="e3165-1589">To order a sequence by the values of the elements themselves, specify the identity function (`x => x` in Visual C# or `Function(x) x` in Visual Basic) for `keySelector`.</span></span>  
  
 <span data-ttu-id="e3165-1590">Dwie metody zostały zdefiniowane w celu rozszerzenia typu <xref:System.Linq.IOrderedEnumerable%601>, który jest typem zwracanym tej metody.</span><span class="sxs-lookup"><span data-stu-id="e3165-1590">Two methods are defined to extend the type <xref:System.Linq.IOrderedEnumerable%601>, which is the return type of this method.</span></span> <span data-ttu-id="e3165-1591">Te dwie metody, a mianowicie `ThenBy` i `ThenByDescending`, pozwalają na określenie dodatkowych kryteriów sortowania do sortowania sekwencji.</span><span class="sxs-lookup"><span data-stu-id="e3165-1591">These two methods, namely `ThenBy` and `ThenByDescending`, enable you to specify additional sort criteria to sort a sequence.</span></span> <span data-ttu-id="e3165-1592">`ThenBy` i `ThenByDescending` również zwracać <xref:System.Linq.IOrderedEnumerable%601>, co oznacza dowolną liczbę kolejnych wywołań `ThenBy` lub `ThenByDescending` jest możliwe.</span><span class="sxs-lookup"><span data-stu-id="e3165-1592">`ThenBy` and `ThenByDescending` also return an <xref:System.Linq.IOrderedEnumerable%601>, which means any number of consecutive calls to `ThenBy` or `ThenByDescending` can be made.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e3165-1593">Ponieważ <xref:System.Linq.IOrderedEnumerable%601> dziedziczy <xref:System.Collections.Generic.IEnumerable%601>, można wywołać <xref:System.Linq.Enumerable.OrderBy%2A> lub <xref:System.Linq.Enumerable.OrderByDescending%2A> na wynikach wywołania <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> lub <xref:System.Linq.Enumerable.ThenByDescending%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-1593">Because <xref:System.Linq.IOrderedEnumerable%601> inherits from <xref:System.Collections.Generic.IEnumerable%601>, you can call <xref:System.Linq.Enumerable.OrderBy%2A> or <xref:System.Linq.Enumerable.OrderByDescending%2A> on the results of a call to <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A>.</span></span> <span data-ttu-id="e3165-1594">Ten sposób wprowadza nowe podstawowe ustawianie kolejności, które ignoruje ustanowiony wcześniej sposób ustawiania.</span><span class="sxs-lookup"><span data-stu-id="e3165-1594">Doing this introduces a new primary ordering that ignores the previously established ordering.</span></span>  
  
 <span data-ttu-id="e3165-1595">Jeśli `comparer` jest `null`, domyślny moduł porównujący <xref:System.Collections.Generic.Comparer%601.Default%2A> służy do porównywania kluczy.</span><span class="sxs-lookup"><span data-stu-id="e3165-1595">If `comparer` is `null`, the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A> is used to compare keys.</span></span>  
  
 <span data-ttu-id="e3165-1596">Ta metoda wykonuje stabilne sortowanie; oznacza to, że jeśli klawisze dwóch elementów są równe, kolejność elementów jest zachowywana.</span><span class="sxs-lookup"><span data-stu-id="e3165-1596">This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved.</span></span> <span data-ttu-id="e3165-1597">Z drugiej strony, niestabilne sortowanie nie pozwala zachować kolejności elementów, które mają ten sam klucz.</span><span class="sxs-lookup"><span data-stu-id="e3165-1597">In contrast, an unstable sort does not preserve the order of elements that have the same key.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-1598">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.OrderByDescending%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29> sortować elementy sekwencję w kolejności malejącej, używając funkcji przekształcenia i niestandardowego modułu porównującego.</span><span class="sxs-lookup"><span data-stu-id="e3165-1598">The following code example demonstrates how to use <xref:System.Linq.Enumerable.OrderByDescending%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29> to sort the elements of a sequence in descending order by using a transform function and a custom comparer.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#71](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#71)]
 [!code-vb[System.Linq.Enumerable#71](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#71)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-1599">
            <paramref name="source" /> lub <paramref name="keySelector" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1599">
              <paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <altmember cref="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
        <altmember cref="M:System.Linq.Enumerable.OrderBy``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
      </Docs>
    </Member>
    <Member MemberName="Prepend&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Prepend&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, TSource element);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Prepend&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, !!TSource element) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Prepend``1(System.Collections.Generic.IEnumerable{``0},``0)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Prepend(Of TSource) (source As IEnumerable(Of TSource), element As TSource) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ Prepend(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, TSource element);" />
      <MemberSignature Language="F#" Value="static member Prepend : seq&lt;'Source&gt; * 'Source -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.Prepend (source, element)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netstandard-2.0">
          <AttributeName>System.ComponentModel.EditorBrowsable(System.ComponentModel.EditorBrowsableState.Never)</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="element" Type="TSource" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-1600">Typ elementów <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1600">The type of the elements of <paramref name="source" />.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-1601">Sekwencja wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1601">A sequence of values.</span>
          </span>
        </param>
        <param name="element">
          <span data-ttu-id="e3165-1602">Wartość być dołączana do <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1602">The value to prepend to <paramref name="source" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-1603">Dodaje wartość do początku sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1603">Adds a value to the beginning of the sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-1604">Nową sekwencję, który zaczyna się od <paramref name="element" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1604">A new sequence that begins with <paramref name="element" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[    
          
## Remarks  
  
> [!NOTE]
>  <span data-ttu-id="e3165-1605">Ta metoda nie powoduje modyfikacji elementów kolekcji.</span><span class="sxs-lookup"><span data-stu-id="e3165-1605">This method does not modify the elements of the collection.</span></span> <span data-ttu-id="e3165-1606">Zamiast tego tworzy kopię kolekcji za pomocą nowego elementu.</span><span class="sxs-lookup"><span data-stu-id="e3165-1606">Instead, it creates a copy of the collection with the new element.</span></span>
  
## Examples  
 <span data-ttu-id="e3165-1607">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Prepend%2A> być dołączana wartość na początku sekwencji.</span><span class="sxs-lookup"><span data-stu-id="e3165-1607">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Prepend%2A> to prepend a value to the beginning of the sequence.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#202](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#202)]
 [!code-vb[System.Linq.Enumerable#202](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#202)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-1608">
            <paramref name="source" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1608">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Range">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;int&gt; Range (int start, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;int32&gt; Range(int32 start, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Range(System.Int32,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Range (start As Integer, count As Integer) As IEnumerable(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; static System::Collections::Generic::IEnumerable&lt;int&gt; ^ Range(int start, int count);" />
      <MemberSignature Language="F#" Value="static member Range : int * int -&gt; seq&lt;int&gt;" Usage="System.Linq.Enumerable.Range (start, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="start" Type="System.Int32" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <param name="start">
          <span data-ttu-id="e3165-1609">Wartość pierwsza liczba całkowita w sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1609">The value of the first integer in the sequence.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="e3165-1610">Liczba kolejnych liczb całkowitych do wygenerowania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1610">The number of sequential integers to generate.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-1611">Generuje sekwencję liczb całkowitych w określonym zakresie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1611">Generates a sequence of integral numbers within a specified range.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-1612">
            <c>IEnumerable&lt;Int32&gt;</c> w języku C# lub <c>IEnumerable (Of Int32)</c> w języku Visual Basic, który zawiera szeroką gamę kolejnych liczb całkowitych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1612">An <c>IEnumerable&lt;Int32&gt;</c> in C# or <c>IEnumerable(Of Int32)</c> in Visual Basic that contains a range of sequential integral numbers.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-1613">Ta metoda jest implementowana za pomocą odroczonego wykonania.</span><span class="sxs-lookup"><span data-stu-id="e3165-1613">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="e3165-1614">Bezpośrednio zwracana wartość jest obiektem, który przechowuje wszystkie informacje wymagane do wykonania akcji.</span><span class="sxs-lookup"><span data-stu-id="e3165-1614">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="e3165-1615">Zapytanie, reprezentowane przez tę metodę nie jest wykonywana do czasu, przez wywołanie obiekt jest zostanie wyliczonly jego `GetEnumerator` metoda bezpośrednio lub za pomocą `foreach` w języku Visual C# lub `For Each` w języku Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="e3165-1615">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-1616">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Range%2A> wygenerować je sekvence hodnot.</span><span class="sxs-lookup"><span data-stu-id="e3165-1616">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Range%2A> to generate a sequence of values.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#72](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#72)]
 [!code-vb[System.Linq.Enumerable#72](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#72)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="e3165-1617">
            <paramref name="count" /> jest mniejsza niż 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1617">
              <paramref name="count" /> is less than 0.</span>
          </span>
          <span data-ttu-id="e3165-1618">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1618">-or-</span>
          </span>
          <span data-ttu-id="e3165-1619">
            <paramref name="start" /> + <paramref name="count" /> -1 jest większy niż <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1619">
              <paramref name="start" /> + <paramref name="count" /> -1 is larger than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Repeat&lt;TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; Repeat&lt;TResult&gt; (TResult element, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; Repeat&lt;TResult&gt;(!!TResult element, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Repeat``1(``0,System.Int32)" />
      <MemberSignature Language="VB.NET" Value="Public Function Repeat(Of TResult) (element As TResult, count As Integer) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TResult&gt;&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ Repeat(TResult element, int count);" />
      <MemberSignature Language="F#" Value="static member Repeat : 'Result * int -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.Repeat (element, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="element" Type="TResult" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TResult">
          <span data-ttu-id="e3165-1620">Typ wartości, należy powtórzyć w sekwencji wynik.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1620">The type of the value to be repeated in the result sequence.</span>
          </span>
        </typeparam>
        <param name="element">
          <span data-ttu-id="e3165-1621">Wartość do powtarzania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1621">The value to be repeated.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="e3165-1622">Liczba powtórzeń wartość w sekwencji wygenerowane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1622">The number of times to repeat the value in the generated sequence.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-1623">Generuje sekwencję która zawiera jedną wartość powtórzony.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1623">Generates a sequence that contains one repeated value.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-1624">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Zawierający dopuszczalnych wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1624">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains a repeated value.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-1625">Ta metoda jest implementowana za pomocą odroczonego wykonania.</span><span class="sxs-lookup"><span data-stu-id="e3165-1625">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="e3165-1626">Bezpośrednio zwracana wartość jest obiektem, który przechowuje wszystkie informacje wymagane do wykonania akcji.</span><span class="sxs-lookup"><span data-stu-id="e3165-1626">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="e3165-1627">Zapytanie, reprezentowane przez tę metodę nie jest wykonywana do czasu, przez wywołanie obiekt jest zostanie wyliczonly jego `GetEnumerator` metoda bezpośrednio lub za pomocą `foreach` w języku Visual C# lub `For Each` w języku Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="e3165-1627">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-1628">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Repeat%2A> do generowania sekwencji dopuszczalnych wartości.</span><span class="sxs-lookup"><span data-stu-id="e3165-1628">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Repeat%2A> to generate a sequence of a repeated value.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#73](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#73)]
 [!code-vb[System.Linq.Enumerable#73](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#73)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentOutOfRangeException">
          <span data-ttu-id="e3165-1629">
            <paramref name="count" /> jest mniejsza niż 0.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1629">
              <paramref name="count" /> is less than 0.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Reverse&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Reverse&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Reverse&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Reverse``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Reverse(Of TSource) (source As IEnumerable(Of TSource)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ Reverse(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Reverse : seq&lt;'Source&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.Reverse source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-1630">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1630">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-1631">Sekwencja wartości do odwrotnego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1631">A sequence of values to reverse.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-1632">Odwraca kolejność elementów w sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1632">Inverts the order of the elements in a sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-1633">Sekwencja, w której elementy odpowiadają identyfikatorom sekwencji wejściowych w odwrotnej kolejności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1633">A sequence whose elements correspond to those of the input sequence in reverse order.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-1634">Ta metoda jest implementowana za pomocą odroczonego wykonania.</span><span class="sxs-lookup"><span data-stu-id="e3165-1634">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="e3165-1635">Bezpośrednio zwracana wartość jest obiektem, który przechowuje wszystkie informacje wymagane do wykonania akcji.</span><span class="sxs-lookup"><span data-stu-id="e3165-1635">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="e3165-1636">Zapytanie, reprezentowane przez tę metodę nie jest wykonywana do czasu, przez wywołanie obiekt jest zostanie wyliczonly jego `GetEnumerator` metoda bezpośrednio lub za pomocą `foreach` w języku Visual C# lub `For Each` w języku Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="e3165-1636">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="e3165-1637">W odróżnieniu od <xref:System.Linq.Enumerable.OrderBy%2A>, ta metoda sortowania nie należy wziąć pod uwagę same wartości rzeczywiste przy ustalaniu kolejności.</span><span class="sxs-lookup"><span data-stu-id="e3165-1637">Unlike <xref:System.Linq.Enumerable.OrderBy%2A>, this sorting method does not consider the actual values themselves in determining the order.</span></span> <span data-ttu-id="e3165-1638">Przeciwnie po prostu zwraca elementy w odwrotnej kolejności, z którego są tworzone przez bazowe źródło.</span><span class="sxs-lookup"><span data-stu-id="e3165-1638">Rather, it just returns the elements in the reverse order from which they are produced by the underlying source.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-1639">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Reverse%2A> Aby odwrócić kolejność elementów w tablicy.</span><span class="sxs-lookup"><span data-stu-id="e3165-1639">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Reverse%2A> to reverse the order of elements in an array.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#74](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#74)]
 [!code-vb[System.Linq.Enumerable#74](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#74)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-1640">
            <paramref name="source" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1640">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Select&lt;TSource,TResult&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e3165-1641">Projektów każdy element obiektu sekwencji do nowego formularza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1641">Projects each element of a sequence into a new form.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Select&lt;TSource,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; Select&lt;TSource,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,int,TResult&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; Select&lt;TSource, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`3&lt;!!TSource, int32, !!TResult&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Select(Of TSource, TResult) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Integer, TResult)) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ Select(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, int, TResult&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Select : seq&lt;'Source&gt; * Func&lt;'Source, int, 'Result&gt; -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.Select (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Int32,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-1642">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1642">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <typeparam name="TResult">
          <span data-ttu-id="e3165-1643">Typ wartości zwracanej przez <c>selektor</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1643">The type of the value returned by <c>selector</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-1644">Sekwencja wartości do wywołania funkcji przekształcenia na.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1644">A sequence of values to invoke a transform function on.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="e3165-1645">Funkcja transformacji do zastosowania do każdego elementu źródłowego; drugi parametr funkcji reprezentuje indeks elementu źródłowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1645">A transform function to apply to each source element; the second parameter of the function represents the index of the source element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-1646">Projektów każdy element obiektu sekwencji do nowego formularza przez dołączenie indeks elementu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1646">Projects each element of a sequence into a new form by incorporating the element's index.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-1647">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Której elementy są wynikiem wywołania funkcji przekształcenia na każdym elemencie <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1647">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements are the result of invoking the transform function on each element of <paramref name="source" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-1648">Ta metoda jest implementowana za pomocą odroczonego wykonania.</span><span class="sxs-lookup"><span data-stu-id="e3165-1648">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="e3165-1649">Bezpośrednio zwracana wartość jest obiektem, który przechowuje wszystkie informacje wymagane do wykonania akcji.</span><span class="sxs-lookup"><span data-stu-id="e3165-1649">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="e3165-1650">Zapytanie, reprezentowane przez tę metodę nie jest wykonywana do czasu, przez wywołanie obiekt jest zostanie wyliczonly jego `GetEnumerator` metoda bezpośrednio lub za pomocą `foreach` w języku Visual C# lub `For Each` w języku Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="e3165-1650">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="e3165-1651">Pierwszy argument `selector` reprezentuje element do przetworzenia.</span><span class="sxs-lookup"><span data-stu-id="e3165-1651">The first argument to `selector` represents the element to process.</span></span> <span data-ttu-id="e3165-1652">Drugi argument `selector` reprezentuje liczony od zera indeks elementu w sekwencji źródłowej.</span><span class="sxs-lookup"><span data-stu-id="e3165-1652">The second argument to `selector` represents the zero-based index of that element in the source sequence.</span></span> <span data-ttu-id="e3165-1653">Może to być przydatne, jeśli elementy są w kolejności znane, i chcesz zrobić coś z elementu pod określonym indeksem, na przykład.</span><span class="sxs-lookup"><span data-stu-id="e3165-1653">This can be useful if the elements are in a known order and you want to do something with an element at a particular index, for example.</span></span> <span data-ttu-id="e3165-1654">Można również go przydatne, jeśli mają zostać pobrane z indeksu elementów w co najmniej jeden.</span><span class="sxs-lookup"><span data-stu-id="e3165-1654">It can also be useful if you want to retrieve the index of one or more elements.</span></span>  
  
 <span data-ttu-id="e3165-1655">Ta metoda projekcji wymaga funkcji przekształcenia `selector`, aby utworzyć pojedynczą wartość dla każdej wartości w sekwencji źródłowej `source`.</span><span class="sxs-lookup"><span data-stu-id="e3165-1655">This projection method requires the transform function, `selector`, to produce one value for each value in the source sequence, `source`.</span></span> <span data-ttu-id="e3165-1656">Jeśli `selector` zwraca wartość, która sama jest kolekcją, jest konsument przechodzenia podciągów ręcznie.</span><span class="sxs-lookup"><span data-stu-id="e3165-1656">If `selector` returns a value that is itself a collection, it is up to the consumer to traverse the subsequences manually.</span></span> <span data-ttu-id="e3165-1657">W takiej sytuacji może być lepszym rozwiązaniem dla zapytania do zwrócenia pojedynczego połączonych sekwencji wartości.</span><span class="sxs-lookup"><span data-stu-id="e3165-1657">In such a situation, it might be better for your query to return a single coalesced sequence of values.</span></span> <span data-ttu-id="e3165-1658">Aby to osiągnąć, należy użyć <xref:System.Linq.Enumerable.SelectMany%2A> zamiast metody <xref:System.Linq.Enumerable.Select%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-1658">To achieve this, use the <xref:System.Linq.Enumerable.SelectMany%2A> method instead of <xref:System.Linq.Enumerable.Select%2A>.</span></span> <span data-ttu-id="e3165-1659">Mimo że `SelectMany` działa podobnie jak `Select`, różni się w tym funkcję przekształcenia zwraca kolekcję, która jest rozszerzany przy `SelectMany` przed zwróceniem.</span><span class="sxs-lookup"><span data-stu-id="e3165-1659">Although `SelectMany` works similarly to `Select`, it differs in that the transform function returns a collection that is then expanded by `SelectMany` before it is returned.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-1660">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Select%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2C%60%601%7D%29> do projektu za pośrednictwem sekwencja wartości, a następnie użyć indeksu każdego elementu.</span><span class="sxs-lookup"><span data-stu-id="e3165-1660">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Select%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2C%60%601%7D%29> to project over a sequence of values and use the index of each element.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#76](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#76)]
 [!code-vb[System.Linq.Enumerable#76](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#76)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-1661">
            <paramref name="source" /> lub <paramref name="selector" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1661">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Select&lt;TSource,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; Select&lt;TSource,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TResult&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; Select&lt;TSource, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TResult&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Select``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Select(Of TSource, TResult) (source As IEnumerable(Of TSource), selector As Func(Of TSource, TResult)) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ Select(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TResult&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Select : seq&lt;'Source&gt; * Func&lt;'Source, 'Result&gt; -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.Select (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-1662">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1662">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <typeparam name="TResult">
          <span data-ttu-id="e3165-1663">Typ wartości zwracanej przez <c>selektor</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1663">The type of the value returned by <c>selector</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-1664">Sekwencja wartości do wywołania funkcji przekształcenia na.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1664">A sequence of values to invoke a transform function on.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="e3165-1665">Funkcja transformacji do zastosowania do każdego elementu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1665">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-1666">Projektów każdy element obiektu sekwencji do nowego formularza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1666">Projects each element of a sequence into a new form.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-1667">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Której elementy są wynikiem wywołania funkcji przekształcenia na każdym elemencie <paramref name="source" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1667">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements are the result of invoking the transform function on each element of <paramref name="source" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-1668">Ta metoda jest implementowana za pomocą odroczonego wykonania.</span><span class="sxs-lookup"><span data-stu-id="e3165-1668">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="e3165-1669">Bezpośrednio zwracana wartość jest obiektem, który przechowuje wszystkie informacje wymagane do wykonania akcji.</span><span class="sxs-lookup"><span data-stu-id="e3165-1669">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="e3165-1670">Zapytanie, reprezentowane przez tę metodę nie jest wykonywana do czasu, przez wywołanie obiekt jest zostanie wyliczonly jego `GetEnumerator` metoda bezpośrednio lub za pomocą `foreach` w języku Visual C# lub `For Each` w języku Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="e3165-1670">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="e3165-1671">Ta metoda projekcji wymaga funkcji przekształcenia `selector`, aby utworzyć pojedynczą wartość dla każdej wartości w sekwencji źródłowej `source`.</span><span class="sxs-lookup"><span data-stu-id="e3165-1671">This projection method requires the transform function, `selector`, to produce one value for each value in the source sequence, `source`.</span></span> <span data-ttu-id="e3165-1672">Jeśli `selector` zwraca wartość, która sama jest kolekcją, jest konsument przechodzenia podciągów ręcznie.</span><span class="sxs-lookup"><span data-stu-id="e3165-1672">If `selector` returns a value that is itself a collection, it is up to the consumer to traverse the subsequences manually.</span></span> <span data-ttu-id="e3165-1673">W takiej sytuacji może być lepszym rozwiązaniem dla zapytania do zwrócenia pojedynczego połączonych sekwencji wartości.</span><span class="sxs-lookup"><span data-stu-id="e3165-1673">In such a situation, it might be better for your query to return a single coalesced sequence of values.</span></span> <span data-ttu-id="e3165-1674">Aby to osiągnąć, należy użyć <xref:System.Linq.Enumerable.SelectMany%2A> zamiast metody <xref:System.Linq.Enumerable.Select%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-1674">To achieve this, use the <xref:System.Linq.Enumerable.SelectMany%2A> method instead of <xref:System.Linq.Enumerable.Select%2A>.</span></span> <span data-ttu-id="e3165-1675">Mimo że `SelectMany` działa podobnie jak `Select`, różni się w tym funkcję przekształcenia zwraca kolekcję, która jest rozszerzany przy `SelectMany` przed zwróceniem.</span><span class="sxs-lookup"><span data-stu-id="e3165-1675">Although `SelectMany` works similarly to `Select`, it differs in that the transform function returns a collection that is then expanded by `SelectMany` before it is returned.</span></span>  
  
 <span data-ttu-id="e3165-1676">W składni wyrażeń zapytania `select` (Visual C#) lub `Select` — klauzula (Visual Basic) przekłada się na wywołanie <xref:System.Linq.Enumerable.Select%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-1676">In query expression syntax, a `select` (Visual C#) or `Select` (Visual Basic) clause translates to an invocation of <xref:System.Linq.Enumerable.Select%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-1677">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Select%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29> do projektu za pośrednictwem je sekvence hodnot.</span><span class="sxs-lookup"><span data-stu-id="e3165-1677">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Select%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29> to project over a sequence of values.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#75](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#75)]
 [!code-vb[System.Linq.Enumerable#75](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#75)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-1678">
            <paramref name="source" /> lub <paramref name="selector" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1678">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/df01e266-5781-4aaa-80c4-67cf28ea093f">
          <span data-ttu-id="e3165-1679">select — Klauzula (odwołanie w C#)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1679">select clause (C# Reference)</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/27a3f61c-5960-4692-9b91-4d0c4b6178fe">
          <span data-ttu-id="e3165-1680">Select — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1680">Select Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="SelectMany&lt;TSource,TResult&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e3165-1681">Projektów każdy element sekwencji w celu <see cref="T:System.Collections.Generic.IEnumerable`1" /> i spłaszcza wynikowy sekwencje na jednej sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1681">Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1" /> and flattens the resulting sequences into one sequence.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SelectMany&lt;TSource,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; SelectMany&lt;TSource,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,System.Collections.Generic.IEnumerable&lt;TResult&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; SelectMany&lt;TSource, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SelectMany(Of TSource, TResult) (source As IEnumerable(Of TSource), selector As Func(Of TSource, IEnumerable(Of TResult))) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ SelectMany(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, System::Collections::Generic::IEnumerable&lt;TResult&gt; ^&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member SelectMany : seq&lt;'Source&gt; * Func&lt;'Source, seq&lt;'Result&gt;&gt; -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.SelectMany (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Collections.Generic.IEnumerable&lt;TResult&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-1682">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1682">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <typeparam name="TResult">
          <span data-ttu-id="e3165-1683">Typ elementów sekwencji zwrócony przez <c>selektor</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1683">The type of the elements of the sequence returned by <c>selector</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-1684">Sekwencja wartości do projektu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1684">A sequence of values to project.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="e3165-1685">Funkcja transformacji do zastosowania do każdego elementu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1685">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-1686">Projektów każdy element sekwencji w celu <see cref="T:System.Collections.Generic.IEnumerable`1" /> i spłaszcza wynikowy sekwencje na jednej sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1686">Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1" /> and flattens the resulting sequences into one sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-1687">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Której elementy są wynikiem wywołania funkcji przekształcenia jeden do wielu, dla każdego elementu w sekwencji wejściowych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1687">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements are the result of invoking the one-to-many transform function on each element of the input sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-1688">Ta metoda jest implementowana za pomocą odroczonego wykonania.</span><span class="sxs-lookup"><span data-stu-id="e3165-1688">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="e3165-1689">Bezpośrednio zwracana wartość jest obiektem, który przechowuje wszystkie informacje wymagane do wykonania akcji.</span><span class="sxs-lookup"><span data-stu-id="e3165-1689">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="e3165-1690">Zapytanie, reprezentowane przez tę metodę nie jest wykonywana do czasu, przez wywołanie obiekt jest zostanie wyliczonly jego `GetEnumerator` metoda bezpośrednio lub za pomocą `foreach` w języku Visual C# lub `For Each` w języku Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="e3165-1690">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="e3165-1691"><xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> Metoda wylicza sekwencji wejściowych, funkcja transformacji do mapowania każdego elementu na <xref:System.Collections.Generic.IEnumerable%601>, a następnie wylicza i daje elementów w każdej z tych <xref:System.Collections.Generic.IEnumerable%601> obiektu.</span><span class="sxs-lookup"><span data-stu-id="e3165-1691">The <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> method enumerates the input sequence, uses a transform function to map each element to an <xref:System.Collections.Generic.IEnumerable%601>, and then enumerates and yields the elements of each such <xref:System.Collections.Generic.IEnumerable%601> object.</span></span> <span data-ttu-id="e3165-1692">Oznacza to, że dla każdego elementu `source`, `selector` jest wywoływany i zostanie zwrócony je sekvence hodnot.</span><span class="sxs-lookup"><span data-stu-id="e3165-1692">That is, for each element of `source`, `selector` is invoked and a sequence of values is returned.</span></span> <span data-ttu-id="e3165-1693"><xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> następnie spłaszcza tej dwuwymiarową kolekcji kolekcji do jednowymiarowego obiektu <xref:System.Collections.Generic.IEnumerable%601> i zwraca go.</span><span class="sxs-lookup"><span data-stu-id="e3165-1693"><xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> then flattens this two-dimensional collection of collections into a one-dimensional <xref:System.Collections.Generic.IEnumerable%601> and returns it.</span></span> <span data-ttu-id="e3165-1694">Na przykład, jeśli zapytanie używa <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> uzyskać zamówienia (typu `Order`) dla każdego klienta w bazie danych, wynik jest typu `IEnumerable<Order>` w języku C# lub `IEnumerable(Of Order)` w języku Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="e3165-1694">For example, if a query uses <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> to obtain the orders (of type `Order`) for each customer in a database, the result is of type `IEnumerable<Order>` in C# or `IEnumerable(Of Order)` in Visual Basic.</span></span> <span data-ttu-id="e3165-1695">Jeśli zamiast tego używa zapytania <xref:System.Linq.Enumerable.Select%2A> uzyskiwania zamówienia, w kolekcji z kolekcji zamówień nie jest połączona, a wynik jest typu `IEnumerable<List<Order>>` w języku C# lub `IEnumerable(Of List(Of Order))` w języku Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="e3165-1695">If instead the query uses <xref:System.Linq.Enumerable.Select%2A> to obtain the orders, the collection of collections of orders is not combined and the result is of type `IEnumerable<List<Order>>` in C# or `IEnumerable(Of List(Of Order))` in Visual Basic.</span></span>  
  
 <span data-ttu-id="e3165-1696">W składni wyrażeń zapytania każdy `from` — klauzula (Visual C#) lub `From` — klauzula (Visual Basic), po początkowej, jeden przekłada się na wywołanie <xref:System.Linq.Enumerable.SelectMany%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-1696">In query expression syntax, each `from` clause (Visual C#) or `From` clause (Visual Basic) after the initial one translates to an invocation of <xref:System.Linq.Enumerable.SelectMany%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-1697">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> przeprowadzić projekcji jeden do wielu za pośrednictwem tablicy.</span><span class="sxs-lookup"><span data-stu-id="e3165-1697">The following code example demonstrates how to use <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> to perform a one-to-many projection over an array.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#77](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#77)]
 [!code-vb[System.Linq.Enumerable#77](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#77)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-1698">
            <paramref name="source" /> lub <paramref name="selector" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1698">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1aefd18c-1314-47f8-99ec-9bcefb09e699">
          <span data-ttu-id="e3165-1699">Klauzula From (odwołanie w C#)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1699">from clause (C# Reference)</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/83e3665e-68a0-4540-a3a3-3d777a0f95d5">
          <span data-ttu-id="e3165-1700">From — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1700">From Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="SelectMany&lt;TSource,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; SelectMany&lt;TSource,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,int,System.Collections.Generic.IEnumerable&lt;TResult&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; SelectMany&lt;TSource, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`3&lt;!!TSource, int32, class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.SelectMany``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SelectMany(Of TSource, TResult) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Integer, IEnumerable(Of TResult))) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ SelectMany(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, int, System::Collections::Generic::IEnumerable&lt;TResult&gt; ^&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member SelectMany : seq&lt;'Source&gt; * Func&lt;'Source, int, seq&lt;'Result&gt;&gt; -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.SelectMany (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Int32,System.Collections.Generic.IEnumerable&lt;TResult&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-1701">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1701">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <typeparam name="TResult">
          <span data-ttu-id="e3165-1702">Typ elementów sekwencji zwrócony przez <c>selektor</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1702">The type of the elements of the sequence returned by <c>selector</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-1703">Sekwencja wartości do projektu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1703">A sequence of values to project.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="e3165-1704">Funkcja transformacji do zastosowania do każdego elementu źródłowego; drugi parametr funkcji reprezentuje indeks elementu źródłowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1704">A transform function to apply to each source element; the second parameter of the function represents the index of the source element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-1705">Projektów każdy element sekwencji w celu <see cref="T:System.Collections.Generic.IEnumerable`1" />i spłaszcza wynikowy sekwencje na jednej sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1705">Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1" />, and flattens the resulting sequences into one sequence.</span>
          </span>
          <span data-ttu-id="e3165-1706">Indeks każdego elementu źródłowego jest używana w formularzu przewidywany tego elementu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1706">The index of each source element is used in the projected form of that element.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-1707">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Której elementy są wynikiem wywołania funkcji przekształcenia jeden do wielu, dla każdego elementu w sekwencji wejściowych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1707">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements are the result of invoking the one-to-many transform function on each element of an input sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-1708">Ta metoda jest implementowana za pomocą odroczonego wykonania.</span><span class="sxs-lookup"><span data-stu-id="e3165-1708">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="e3165-1709">Bezpośrednio zwracana wartość jest obiektem, który przechowuje wszystkie informacje wymagane do wykonania akcji.</span><span class="sxs-lookup"><span data-stu-id="e3165-1709">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="e3165-1710">Zapytanie, reprezentowane przez tę metodę nie jest wykonywana do czasu, przez wywołanie obiekt jest zostanie wyliczonly jego `GetEnumerator` metoda bezpośrednio lub za pomocą `foreach` w języku Visual C# lub `For Each` w języku Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="e3165-1710">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="e3165-1711"><xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> Metoda wylicza sekwencji wejściowych, funkcja transformacji do mapowania każdego elementu na <xref:System.Collections.Generic.IEnumerable%601>, a następnie wylicza i daje elementów w każdej z tych <xref:System.Collections.Generic.IEnumerable%601> obiektu.</span><span class="sxs-lookup"><span data-stu-id="e3165-1711">The <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> method enumerates the input sequence, uses a transform function to map each element to an <xref:System.Collections.Generic.IEnumerable%601>, and then enumerates and yields the elements of each such <xref:System.Collections.Generic.IEnumerable%601> object.</span></span> <span data-ttu-id="e3165-1712">Oznacza to, że dla każdego elementu `source`, `selector` jest wywoływany i zostanie zwrócony je sekvence hodnot.</span><span class="sxs-lookup"><span data-stu-id="e3165-1712">That is, for each element of `source`, `selector` is invoked and a sequence of values is returned.</span></span> <span data-ttu-id="e3165-1713"><xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> następnie spłaszcza tej dwuwymiarową kolekcji kolekcji do jednowymiarowego obiektu <xref:System.Collections.Generic.IEnumerable%601> i zwraca go.</span><span class="sxs-lookup"><span data-stu-id="e3165-1713"><xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> then flattens this two-dimensional collection of collections into a one-dimensional <xref:System.Collections.Generic.IEnumerable%601> and returns it.</span></span> <span data-ttu-id="e3165-1714">Na przykład, jeśli zapytanie używa <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> uzyskać zamówienia (typu `Order`) dla każdego klienta w bazie danych, wynik jest typu `IEnumerable<Order>` w języku C# lub `IEnumerable(Of Order)` w języku Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="e3165-1714">For example, if a query uses <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> to obtain the orders (of type `Order`) for each customer in a database, the result is of type `IEnumerable<Order>` in C# or `IEnumerable(Of Order)` in Visual Basic.</span></span> <span data-ttu-id="e3165-1715">Jeśli zamiast tego używa zapytania <xref:System.Linq.Enumerable.Select%2A> uzyskiwania zamówienia, w kolekcji z kolekcji zamówień nie jest połączona, a wynik jest typu `IEnumerable<List<Order>>` w języku C# lub `IEnumerable(Of List(Of Order))` w języku Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="e3165-1715">If instead the query uses <xref:System.Linq.Enumerable.Select%2A> to obtain the orders, the collection of collections of orders is not combined and the result is of type `IEnumerable<List<Order>>` in C# or `IEnumerable(Of List(Of Order))` in Visual Basic.</span></span>  
  
 <span data-ttu-id="e3165-1716">Pierwszy argument `selector` reprezentuje element do przetworzenia.</span><span class="sxs-lookup"><span data-stu-id="e3165-1716">The first argument to `selector` represents the element to process.</span></span> <span data-ttu-id="e3165-1717">Drugi argument `selector` reprezentuje liczony od zera indeks elementu w sekwencji źródłowej.</span><span class="sxs-lookup"><span data-stu-id="e3165-1717">The second argument to `selector` represents the zero-based index of that element in the source sequence.</span></span> <span data-ttu-id="e3165-1718">Może to być przydatne, jeśli elementy są w kolejności znane, i chcesz zrobić coś z elementu pod określonym indeksem, na przykład.</span><span class="sxs-lookup"><span data-stu-id="e3165-1718">This can be useful if the elements are in a known order and you want to do something with an element at a particular index, for example.</span></span> <span data-ttu-id="e3165-1719">Można również go przydatne, jeśli mają zostać pobrane z indeksu elementów w co najmniej jeden.</span><span class="sxs-lookup"><span data-stu-id="e3165-1719">It can also be useful if you want to retrieve the index of one or more elements.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-1720">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> wykonywania projekcji jeden do wielu za pośrednictwem tablicy i użyć indeksu każdego elementu zewnętrznego.</span><span class="sxs-lookup"><span data-stu-id="e3165-1720">The following code example demonstrates how to use <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> to perform a one-to-many projection over an array and use the index of each outer element.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#78](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#78)]
 [!code-vb[System.Linq.Enumerable#78](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#78)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-1721">
            <paramref name="source" /> lub <paramref name="selector" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1721">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SelectMany&lt;TSource,TCollection,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; SelectMany&lt;TSource,TCollection,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,System.Collections.Generic.IEnumerable&lt;TCollection&gt;&gt; collectionSelector, Func&lt;TSource,TCollection,TResult&gt; resultSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; SelectMany&lt;TSource, TCollection, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, class System.Collections.Generic.IEnumerable`1&lt;!!TCollection&gt;&gt; collectionSelector, class System.Func`3&lt;!!TSource, !!TCollection, !!TResult&gt; resultSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SelectMany(Of TSource, TCollection, TResult) (source As IEnumerable(Of TSource), collectionSelector As Func(Of TSource, IEnumerable(Of TCollection)), resultSelector As Func(Of TSource, TCollection, TResult)) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TCollection, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ SelectMany(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, System::Collections::Generic::IEnumerable&lt;TCollection&gt; ^&gt; ^ collectionSelector, Func&lt;TSource, TCollection, TResult&gt; ^ resultSelector);" />
      <MemberSignature Language="F#" Value="static member SelectMany : seq&lt;'Source&gt; * Func&lt;'Source, seq&lt;'Collection&gt;&gt; * Func&lt;'Source, 'Collection, 'Result&gt; -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.SelectMany (source, collectionSelector, resultSelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TCollection" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="collectionSelector" Type="System.Func&lt;TSource,System.Collections.Generic.IEnumerable&lt;TCollection&gt;&gt;" />
        <Parameter Name="resultSelector" Type="System.Func&lt;TSource,TCollection,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-1722">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1722">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <typeparam name="TCollection">
          <span data-ttu-id="e3165-1723">Typ elementów pośrednich zebrane przez <c>collectionSelector</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1723">The type of the intermediate elements collected by <c>collectionSelector</c>.</span>
          </span>
        </typeparam>
        <typeparam name="TResult">
          <span data-ttu-id="e3165-1724">Typ elementów sekwencji wynikowe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1724">The type of the elements of the resulting sequence.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-1725">Sekwencja wartości do projektu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1725">A sequence of values to project.</span>
          </span>
        </param>
        <param name="collectionSelector">
          <span data-ttu-id="e3165-1726">Funkcja transformacji do zastosowania do każdego elementu obiektu sekwencji wejściowych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1726">A transform function to apply to each element of the input sequence.</span>
          </span>
        </param>
        <param name="resultSelector">
          <span data-ttu-id="e3165-1727">Funkcja transformacji do zastosowania do każdego elementu pośrednich sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1727">A transform function to apply to each element of the intermediate sequence.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-1728">Projektów każdy element sekwencji w celu <see cref="T:System.Collections.Generic.IEnumerable`1" />spłaszcza wynikowy sekwencje na jednej sekwencji i wywołuje funkcję selektor wyników dla każdego elementu w nim.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1728">Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1" />, flattens the resulting sequences into one sequence, and invokes a result selector function on each element therein.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-1729">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Której elementy są wynikiem wywołania funkcji przekształcenia jeden do wielu <paramref name="collectionSelector" /> na każdym elemencie <paramref name="source" /> i mapowanie każdego z tych elementów w sekwencji i ich odpowiedniego elementu źródłowego do elementu wynik.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1729">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements are the result of invoking the one-to-many transform function <paramref name="collectionSelector" /> on each element of <paramref name="source" /> and then mapping each of those sequence elements and their corresponding source element to a result element.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-1730">Ta metoda jest implementowana za pomocą odroczonego wykonania.</span><span class="sxs-lookup"><span data-stu-id="e3165-1730">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="e3165-1731">Bezpośrednio zwracana wartość jest obiektem, który przechowuje wszystkie informacje wymagane do wykonania akcji.</span><span class="sxs-lookup"><span data-stu-id="e3165-1731">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="e3165-1732">Zapytanie, reprezentowane przez tę metodę nie jest wykonywana do czasu, przez wywołanie obiekt jest zostanie wyliczonly jego `GetEnumerator` metoda bezpośrednio lub za pomocą `foreach` w języku Visual C# lub `For Each` w języku Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="e3165-1732">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="e3165-1733"><xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29> Metoda jest przydatna, gdy trzeba zachować elementy `source` w zakresie logiki zapytania, która występuje po wywołaniu <xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29>.</span><span class="sxs-lookup"><span data-stu-id="e3165-1733">The <xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29> method is useful when you have to keep the elements of `source` in scope for query logic that occurs after the call to <xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29>.</span></span> <span data-ttu-id="e3165-1734">W sekcji przykład przykładowy kod.</span><span class="sxs-lookup"><span data-stu-id="e3165-1734">See the Example section for a code example.</span></span> <span data-ttu-id="e3165-1735">Jeśli istnieje relacja dwukierunkowego między obiektami typu `TSource` i obiekty typu `TCollection`, to znaczy, jeśli obiekt typu `TCollection` udostępnia właściwości, aby pobrać `TSource` obiektu, który go, nie jest to konieczne przeciążenia <xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29>.</span><span class="sxs-lookup"><span data-stu-id="e3165-1735">If there is a bidirectional relationship between objects of type `TSource` and objects of type `TCollection`, that is, if an object of type `TCollection` provides a property to retrieve the `TSource` object that produced it, you do not need this overload of <xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29>.</span></span> <span data-ttu-id="e3165-1736">Zamiast tego można użyć <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> i przejdź z powrotem do `TSource` obiektu za pomocą `TCollection` obiektu.</span><span class="sxs-lookup"><span data-stu-id="e3165-1736">Instead, you can use <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> and navigate back to the `TSource` object through the `TCollection` object.</span></span>  
  
 <span data-ttu-id="e3165-1737">W składni wyrażeń zapytania każdy `from` — klauzula (Visual C#) lub `From` — klauzula (Visual Basic), po początkowej, jeden przekłada się na wywołanie <xref:System.Linq.Enumerable.SelectMany%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-1737">In query expression syntax, each `from` clause (Visual C#) or `From` clause (Visual Basic) after the initial one translates to an invocation of <xref:System.Linq.Enumerable.SelectMany%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-1738">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29> wykonywania projekcji jeden do wielu za pośrednictwem tablicy i użyj funkcji selektor wynik zapewnienie każdego odpowiedni element z sekwencji źródłowej w zakresie ostatnim wywołaniem do `Select`.</span><span class="sxs-lookup"><span data-stu-id="e3165-1738">The following code example demonstrates how to use <xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29> to perform a one-to-many projection over an array and use a result selector function to keep each corresponding element from the source sequence in scope for the final call to `Select`.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#124](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#124)]
 [!code-vb[System.Linq.Enumerable#124](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#124)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-1739">
            <paramref name="source" /> lub <paramref name="collectionSelector" /> lub <paramref name="resultSelector" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1739">
              <paramref name="source" /> or <paramref name="collectionSelector" /> or <paramref name="resultSelector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1aefd18c-1314-47f8-99ec-9bcefb09e699">
          <span data-ttu-id="e3165-1740">Klauzula From (odwołanie w C#)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1740">from clause (C# Reference)</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/83e3665e-68a0-4540-a3a3-3d777a0f95d5">
          <span data-ttu-id="e3165-1741">From — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1741">From Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="SelectMany&lt;TSource,TCollection,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; SelectMany&lt;TSource,TCollection,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,int,System.Collections.Generic.IEnumerable&lt;TCollection&gt;&gt; collectionSelector, Func&lt;TSource,TCollection,TResult&gt; resultSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; SelectMany&lt;TSource, TCollection, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`3&lt;!!TSource, int32, class System.Collections.Generic.IEnumerable`1&lt;!!TCollection&gt;&gt; collectionSelector, class System.Func`3&lt;!!TSource, !!TCollection, !!TResult&gt; resultSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.SelectMany``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Collections.Generic.IEnumerable{``1}},System.Func{``0,``1,``2})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SelectMany(Of TSource, TCollection, TResult) (source As IEnumerable(Of TSource), collectionSelector As Func(Of TSource, Integer, IEnumerable(Of TCollection)), resultSelector As Func(Of TSource, TCollection, TResult)) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TCollection, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ SelectMany(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, int, System::Collections::Generic::IEnumerable&lt;TCollection&gt; ^&gt; ^ collectionSelector, Func&lt;TSource, TCollection, TResult&gt; ^ resultSelector);" />
      <MemberSignature Language="F#" Value="static member SelectMany : seq&lt;'Source&gt; * Func&lt;'Source, int, seq&lt;'Collection&gt;&gt; * Func&lt;'Source, 'Collection, 'Result&gt; -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.SelectMany (source, collectionSelector, resultSelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TCollection" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="collectionSelector" Type="System.Func&lt;TSource,System.Int32,System.Collections.Generic.IEnumerable&lt;TCollection&gt;&gt;" />
        <Parameter Name="resultSelector" Type="System.Func&lt;TSource,TCollection,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-1742">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1742">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <typeparam name="TCollection">
          <span data-ttu-id="e3165-1743">Typ elementów pośrednich zebrane przez <c>collectionSelector</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1743">The type of the intermediate elements collected by <c>collectionSelector</c>.</span>
          </span>
        </typeparam>
        <typeparam name="TResult">
          <span data-ttu-id="e3165-1744">Typ elementów sekwencji wynikowe.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1744">The type of the elements of the resulting sequence.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-1745">Sekwencja wartości do projektu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1745">A sequence of values to project.</span>
          </span>
        </param>
        <param name="collectionSelector">
          <span data-ttu-id="e3165-1746">Funkcja transformacji do zastosowania do każdego elementu źródłowego; drugi parametr funkcji reprezentuje indeks elementu źródłowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1746">A transform function to apply to each source element; the second parameter of the function represents the index of the source element.</span>
          </span>
        </param>
        <param name="resultSelector">
          <span data-ttu-id="e3165-1747">Funkcja transformacji do zastosowania do każdego elementu pośrednich sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1747">A transform function to apply to each element of the intermediate sequence.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-1748">Projektów każdy element sekwencji w celu <see cref="T:System.Collections.Generic.IEnumerable`1" />spłaszcza wynikowy sekwencje na jednej sekwencji i wywołuje funkcję selektor wyników dla każdego elementu w nim.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1748">Projects each element of a sequence to an <see cref="T:System.Collections.Generic.IEnumerable`1" />, flattens the resulting sequences into one sequence, and invokes a result selector function on each element therein.</span>
          </span>
          <span data-ttu-id="e3165-1749">Indeks każdego elementu źródłowego jest używana w formularzu przewidywany pośrednich tego elementu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1749">The index of each source element is used in the intermediate projected form of that element.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-1750">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Której elementy są wynikiem wywołania funkcji przekształcenia jeden do wielu <paramref name="collectionSelector" /> na każdym elemencie <paramref name="source" /> i mapowanie każdego z tych elementów w sekwencji i ich odpowiedniego elementu źródłowego do elementu wynik.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1750">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose elements are the result of invoking the one-to-many transform function <paramref name="collectionSelector" /> on each element of <paramref name="source" /> and then mapping each of those sequence elements and their corresponding source element to a result element.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-1751">Ta metoda jest implementowana za pomocą odroczonego wykonania.</span><span class="sxs-lookup"><span data-stu-id="e3165-1751">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="e3165-1752">Bezpośrednio zwracana wartość jest obiektem, który przechowuje wszystkie informacje wymagane do wykonania akcji.</span><span class="sxs-lookup"><span data-stu-id="e3165-1752">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="e3165-1753">Zapytanie, reprezentowane przez tę metodę nie jest wykonywana do czasu, przez wywołanie obiekt jest zostanie wyliczonly jego `GetEnumerator` metoda bezpośrednio lub za pomocą `foreach` w języku Visual C# lub `For Each` w języku Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="e3165-1753">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="e3165-1754"><xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29> Metoda jest przydatna, gdy trzeba zachować elementy `source` w zakresie logiki zapytania, która występuje po wywołaniu <xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29>.</span><span class="sxs-lookup"><span data-stu-id="e3165-1754">The <xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29> method is useful when you have to keep the elements of `source` in scope for query logic that occurs after the call to <xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29>.</span></span> <span data-ttu-id="e3165-1755">W sekcji przykład przykładowy kod.</span><span class="sxs-lookup"><span data-stu-id="e3165-1755">See the Example section for a code example.</span></span> <span data-ttu-id="e3165-1756">Jeśli istnieje relacja dwukierunkowego między obiektami typu `TSource` i obiekty typu `TCollection`, to znaczy, jeśli obiekt typu `TCollection` udostępnia właściwości, aby pobrać `TSource` obiektu, który go, nie jest to konieczne przeciążenia <xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29>.</span><span class="sxs-lookup"><span data-stu-id="e3165-1756">If there is a bidirectional relationship between objects of type `TSource` and objects of type `TCollection`, that is, if an object of type `TCollection` provides a property to retrieve the `TSource` object that produced it, you do not need this overload of <xref:System.Linq.Enumerable.SelectMany%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%2CSystem.Func%7B%60%600%2C%60%601%2C%60%602%7D%29>.</span></span> <span data-ttu-id="e3165-1757">Zamiast tego można użyć <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> i przejdź z powrotem do `TSource` obiektu za pomocą `TCollection` obiektu.</span><span class="sxs-lookup"><span data-stu-id="e3165-1757">Instead, you can use <xref:System.Linq.Enumerable.SelectMany%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Collections.Generic.IEnumerable%7B%60%601%7D%7D%29> and navigate back to the `TSource` object through the `TCollection` object.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-1758">
            <paramref name="source" /> lub <paramref name="collectionSelector" /> lub <paramref name="resultSelector" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1758">
              <paramref name="source" /> or <paramref name="collectionSelector" /> or <paramref name="resultSelector" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="SequenceEqual&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e3165-1759">Określa, czy dwie sekwencje mają taki sam, zgodnie z moduł porównujący równość.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1759">Determines whether two sequences are equal according to an equality comparer.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SequenceEqual&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static bool SequenceEqual&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; first, System.Collections.Generic.IEnumerable&lt;TSource&gt; second);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SequenceEqual&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; first, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; second) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SequenceEqual(Of TSource) (first As IEnumerable(Of TSource), second As IEnumerable(Of TSource)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool SequenceEqual(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ first, System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ second);" />
      <MemberSignature Language="F#" Value="static member SequenceEqual : seq&lt;'Source&gt; * seq&lt;'Source&gt; -&gt; bool" Usage="System.Linq.Enumerable.SequenceEqual (first, second)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="first" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="second" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-1760">Typ elementów sekwencji wejściowych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1760">The type of the elements of the input sequences.</span>
          </span>
        </typeparam>
        <param name="first">
          <span data-ttu-id="e3165-1761">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Do porównania z <c>drugi</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1761">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to compare to <c>second</c>.</span>
          </span>
        </param>
        <param name="second">
          <span data-ttu-id="e3165-1762">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Do porównania z pierwszej sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1762">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to compare to the first sequence.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-1763">Określa, czy dwie sekwencje są takie same, porównując elementy przy użyciu domyślny moduł porównujący równość dla ich typu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1763">Determines whether two sequences are equal by comparing the elements by using the default equality comparer for their type.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-1764">
            <see langword="true" /> w przypadku dwóch źródłowych sekwencji równej długości i odpowiadające im elementy są równe zgodnie z domyślny moduł porównujący równość ich typ; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1764">
              <see langword="true" /> if the two source sequences are of equal length and their corresponding elements are equal according to the default equality comparer for their type; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-1765"><xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> Metoda wylicza dwóch źródłowych sekwencji równolegle i porównuje odpowiednie elementy przy użyciu domyślny moduł porównujący równość dla `TSource`, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-1765">The <xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> method enumerates the two source sequences in parallel and compares corresponding elements by using the default equality comparer for `TSource`, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>.</span></span> <span data-ttu-id="e3165-1766">Domyślny moduł porównujący równość, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, służy do porównywania wartości typów implementujących <xref:System.Collections.Generic.IEqualityComparer%601> interfejs generyczny.</span><span class="sxs-lookup"><span data-stu-id="e3165-1766">The default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare values of the types that implement the <xref:System.Collections.Generic.IEqualityComparer%601> generic interface.</span></span> <span data-ttu-id="e3165-1767">Aby porównać niestandardowy typ danych, należy zaimplementować niniejszy interfejs i podać własne <xref:System.Object.GetHashCode%2A> i <xref:System.Object.Equals%2A> metod dla typu.</span><span class="sxs-lookup"><span data-stu-id="e3165-1767">To compare a custom data type, you need to implement this interface and provide your own <xref:System.Object.GetHashCode%2A> and <xref:System.Object.Equals%2A> methods for the type.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-1768">Poniższe przykłady kodu przedstawiają sposoby użycia <xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> do określenia, czy dwie sekwencje mają taki sam.</span><span class="sxs-lookup"><span data-stu-id="e3165-1768">The following code examples demonstrate how to use <xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> to determine whether two sequences are equal.</span></span> <span data-ttu-id="e3165-1769">W pierwszych dwóch przykładach Metoda określa, czy porównaniu sekwencje zawierają odwołania do tych samych obiektów.</span><span class="sxs-lookup"><span data-stu-id="e3165-1769">In the first two examples, the method determines whether the compared sequences contain references to the same objects.</span></span> <span data-ttu-id="e3165-1770">W przykładach trzecia i czwarta metoda porównuje danych rzeczywistych obiektów w ramach sekwencji.</span><span class="sxs-lookup"><span data-stu-id="e3165-1770">In the third and fourth examples, the method compares the actual data of the objects within the sequences.</span></span>  
  
 <span data-ttu-id="e3165-1771">W tym przykładzie sekwencji, które są równe.</span><span class="sxs-lookup"><span data-stu-id="e3165-1771">In this example the sequences are equal.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#32](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#32)]
 [!code-vb[System.Linq.Enumerable#32](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#32)]  
  
 <span data-ttu-id="e3165-1772">Poniższy przykład kodu porównuje dwie sekwencje, które nie są takie same.</span><span class="sxs-lookup"><span data-stu-id="e3165-1772">The following code example compares two sequences that are not equal.</span></span> <span data-ttu-id="e3165-1773">Należy pamiętać, że sekwencje zawierają identyczne dane, ale ponieważ obiekty, które zawierają różne odwołania, sekwencji, które nie są uznawane za równe.</span><span class="sxs-lookup"><span data-stu-id="e3165-1773">Note that the sequences contain identical data, but because the objects that they contain have different references, the sequences are not considered equal.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#33](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#33)]
 [!code-vb[System.Linq.Enumerable#33](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#33)]  
  
 <span data-ttu-id="e3165-1774">Jeśli chcesz porównać danych rzeczywistych obiektów w sekwencji, zamiast tylko porównywania odniesień do nich, musisz zaimplementować <xref:System.Collections.Generic.IEqualityComparer%601> ogólny interfejs w klasie.</span><span class="sxs-lookup"><span data-stu-id="e3165-1774">If you want to compare the actual data of the objects in the sequences instead of just comparing their references, you have to implement the <xref:System.Collections.Generic.IEqualityComparer%601> generic interface in your class.</span></span> <span data-ttu-id="e3165-1775">Poniższy przykład kodu pokazuje sposób implementacji niniejszego interfejsu klasy pomocnika i podaj <xref:System.Object.GetHashCode%2A> i <xref:System.Object.Equals%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="e3165-1775">The following code example shows how to implement this interface in a helper class and provide <xref:System.Object.GetHashCode%2A> and <xref:System.Object.Equals%2A> methods.</span></span>  
  
 [!code-csharp[CSLINQEncapsulatedComparer#9](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/CS/EncapsulatedComparer.cs#9)]  
  
 <span data-ttu-id="e3165-1776">Po zaimplementowaniu ten interfejs, można użyć sekwencji `ProductA` obiekty w <xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> metodzie, jak pokazano w poniższym przykładzie.</span><span class="sxs-lookup"><span data-stu-id="e3165-1776">After you implement this interface, you can use sequences of `ProductA` objects in the <xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> method, as shown in the following example.</span></span>  
  
 [!code-csharp[CSLINQEncapsulatedComparer#8](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/CS/EncapsulatedComparer.cs#8)]
 [!code-vb[CSLINQEncapsulatedComparer#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/VB/EncapsulatedComparer.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-1777">
            <paramref name="first" /> lub <paramref name="second" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1777">
              <paramref name="first" /> or <paramref name="second" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SequenceEqual&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static bool SequenceEqual&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; first, System.Collections.Generic.IEnumerable&lt;TSource&gt; second, System.Collections.Generic.IEqualityComparer&lt;TSource&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig bool SequenceEqual&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; first, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; second, class System.Collections.Generic.IEqualityComparer`1&lt;!!TSource&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.SequenceEqual``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SequenceEqual(Of TSource) (first As IEnumerable(Of TSource), second As IEnumerable(Of TSource), comparer As IEqualityComparer(Of TSource)) As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static bool SequenceEqual(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ first, System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ second, System::Collections::Generic::IEqualityComparer&lt;TSource&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member SequenceEqual : seq&lt;'Source&gt; * seq&lt;'Source&gt; * System.Collections.Generic.IEqualityComparer&lt;'Source&gt; -&gt; bool" Usage="System.Linq.Enumerable.SequenceEqual (first, second, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="first" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="second" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-1778">Typ elementów sekwencji wejściowych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1778">The type of the elements of the input sequences.</span>
          </span>
        </typeparam>
        <param name="first">
          <span data-ttu-id="e3165-1779">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Do porównania z <c>drugi</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1779">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to compare to <c>second</c>.</span>
          </span>
        </param>
        <param name="second">
          <span data-ttu-id="e3165-1780">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Do porównania z pierwszej sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1780">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to compare to the first sequence.</span>
          </span>
        </param>
        <param name="comparer">
          <span data-ttu-id="e3165-1781">
            <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> Służące do porównywania elementów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1781">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to use to compare elements.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-1782">Określa, czy dwie sekwencje mają równe przez porównanie ich elementy przy użyciu określonego <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1782">Determines whether two sequences are equal by comparing their elements by using a specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-1783">
            <see langword="true" /> Jeśli dwóch źródłowych sekwencji równej długości i ich odpowiednie elementy są porównywane według <paramref name="comparer" />; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1783">
              <see langword="true" /> if the two source sequences are of equal length and their corresponding elements compare equal according to <paramref name="comparer" />; otherwise, <see langword="false" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-1784"><xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> Metoda wylicza dwóch źródłowych sekwencji równolegle i porównuje odpowiednie elementy przy użyciu określonego <xref:System.Collections.Generic.IEqualityComparer%601>.</span><span class="sxs-lookup"><span data-stu-id="e3165-1784">The <xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> method enumerates the two source sequences in parallel and compares corresponding elements by using the specified <xref:System.Collections.Generic.IEqualityComparer%601>.</span></span> <span data-ttu-id="e3165-1785">Jeśli `comparer` jest `null`, domyślny moduł porównujący równość, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, służy do porównywania elementów.</span><span class="sxs-lookup"><span data-stu-id="e3165-1785">If `comparer` is `null`, the default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare elements.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-1786">Poniższy przykład pokazuje, jak zaimplementować moduł porównujący równość mogą być używane w <xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> metody.</span><span class="sxs-lookup"><span data-stu-id="e3165-1786">The following example shows how to implement an equality comparer that can be used in the <xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> method.</span></span>  
  
 [!code-csharp[CSLINQCustomComparer#1](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQCustomComparer/CS/CustomComparer.cs#1)]
 [!code-vb[CSLINQCustomComparer#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQCustomComparer/VB/CustomComparer.vb#1)]  
  
 <span data-ttu-id="e3165-1787">Po zaimplementowaniu tej porównania można użyć sekwencji `Product` obiekty w <xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> metodzie, jak pokazano w poniższym przykładzie.</span><span class="sxs-lookup"><span data-stu-id="e3165-1787">After you implement this comparer, you can use sequences of `Product` objects in the <xref:System.Linq.Enumerable.SequenceEqual%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%600%7D%29> method, as shown in the following example.</span></span>  
  
 [!code-csharp[CSLINQCustomComparer#8](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQCustomComparer/CS/CustomComparer.cs#8)]
 [!code-vb[CSLINQCustomComparer#8](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQCustomComparer/VB/CustomComparer.vb#8)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-1788">
            <paramref name="first" /> lub <paramref name="second" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1788">
              <paramref name="first" /> or <paramref name="second" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Single&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e3165-1789">Zwraca element jednej, określonej sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1789">Returns a single, specific element of a sequence.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Single&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource Single&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource Single&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Single(Of TSource) (source As IEnumerable(Of TSource)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource Single(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Single : seq&lt;'Source&gt; -&gt; 'Source" Usage="System.Linq.Enumerable.Single source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-1790">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1790">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-1791">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Do zwrócenia pojedynczego elementu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1791">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return the single element of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-1792">Zwraca tylko element sekwencji i zgłasza wyjątek, jeśli nie istnieje dokładnie jednego elementu w sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1792">Returns the only element of a sequence, and throws an exception if there is not exactly one element in the sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-1793">Pojedynczy element sekwencji wejściowych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1793">The single element of the input sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-1794"><xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> Metoda zgłasza wyjątek, jeśli sekwencji wejściowych jest pusta.</span><span class="sxs-lookup"><span data-stu-id="e3165-1794">The <xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> method throws an exception if the input sequence is empty.</span></span> <span data-ttu-id="e3165-1795">Aby zamiast tego zwracają `null` podczas sekwencji wejściowych jest pusta, użyj <xref:System.Linq.Enumerable.SingleOrDefault%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-1795">To instead return `null` when the input sequence is empty, use <xref:System.Linq.Enumerable.SingleOrDefault%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-1796">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> zaznacz tylko element tablicy.</span><span class="sxs-lookup"><span data-stu-id="e3165-1796">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to select the only element of an array.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#79](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#79)]
 [!code-vb[System.Linq.Enumerable#79](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#79)]  
  
 <span data-ttu-id="e3165-1797">Poniższy przykład kodu pokazuje, że <xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> zgłasza wyjątek, gdy sekwencja nie zawiera dokładnie jeden element.</span><span class="sxs-lookup"><span data-stu-id="e3165-1797">The following code example demonstrates that <xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> throws an exception when the sequence does not contain exactly one element.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#80](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#80)]
 [!code-vb[System.Linq.Enumerable#80](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#80)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-1798">
            <paramref name="source" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1798">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e3165-1799">Wejściowy sekwencja zawiera więcej niż jeden element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1799">The input sequence contains more than one element.</span>
          </span>
          <span data-ttu-id="e3165-1800">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1800">-or-</span>
          </span>
          <span data-ttu-id="e3165-1801">Sekwencji wejściowych jest pusta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1801">The input sequence is empty.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Single&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource Single&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource Single&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Single``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Single(Of TSource) (source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource Single(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member Single : seq&lt;'Source&gt; * Func&lt;'Source, bool&gt; -&gt; 'Source" Usage="System.Linq.Enumerable.Single (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-1802">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1802">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-1803">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Do zwrócenia pojedynczego elementu z.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1803">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return a single element from.</span>
          </span>
        </param>
        <param name="predicate">
          <span data-ttu-id="e3165-1804">Funkcja testowania elementu dla warunku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1804">A function to test an element for a condition.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-1805">Zwraca tylko element sekwencji która spełnia określony warunek i zgłasza wyjątek, jeśli istnieje więcej niż jeden taki element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1805">Returns the only element of a sequence that satisfies a specified condition, and throws an exception if more than one such element exists.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-1806">Pojedynczy element sekwencji wejściowych, który spełnia warunek.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1806">The single element of the input sequence that satisfies a condition.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-1807"><xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> Metoda zgłasza wyjątek, jeśli sekwencji wejściowych nie zawiera żadnych pasujący element.</span><span class="sxs-lookup"><span data-stu-id="e3165-1807">The <xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> method throws an exception if the input sequence contains no matching element.</span></span> <span data-ttu-id="e3165-1808">Aby zamiast tego zwracają `null` podczas nie pasujący element zostanie znaleziony, użyj <xref:System.Linq.Enumerable.SingleOrDefault%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-1808">To instead return `null` when no matching element is found, use <xref:System.Linq.Enumerable.SingleOrDefault%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-1809">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> zaznacz tylko element w tablicy, która spełnia warunek.</span><span class="sxs-lookup"><span data-stu-id="e3165-1809">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> to select the only element of an array that satisfies a condition.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#81](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#81)]
 [!code-vb[System.Linq.Enumerable#81](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#81)]  
  
 <span data-ttu-id="e3165-1810">Poniższy przykład kodu pokazuje, że <xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> zgłasza wyjątek, gdy sekwencja nie zawiera dokładnie jeden element, który spełnia warunek.</span><span class="sxs-lookup"><span data-stu-id="e3165-1810">The following code example demonstrates that <xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> throws an exception when the sequence does not contain exactly one element that satisfies the condition.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#82](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#82)]
 [!code-vb[System.Linq.Enumerable#82](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#82)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-1811">
            <paramref name="source" /> lub <paramref name="predicate" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1811">
              <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e3165-1812">Element nie spełnia warunku w <paramref name="predicate" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1812">No element satisfies the condition in <paramref name="predicate" />.</span>
          </span>
          <span data-ttu-id="e3165-1813">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1813">-or-</span>
          </span>
          <span data-ttu-id="e3165-1814">Więcej niż jeden element spełnia warunek w <paramref name="predicate" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1814">More than one element satisfies the condition in <paramref name="predicate" />.</span>
          </span>
          <span data-ttu-id="e3165-1815">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1815">-or-</span>
          </span>
          <span data-ttu-id="e3165-1816">Sekwencja źródłowa jest pusta.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1816">The source sequence is empty.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="SingleOrDefault&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e3165-1817">Zwraca element jednej, określonej sekwencji lub wartość domyślną, jeśli ten element nie zostanie znaleziony.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1817">Returns a single, specific element of a sequence, or a default value if that element is not found.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SingleOrDefault&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource SingleOrDefault&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource SingleOrDefault&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SingleOrDefault(Of TSource) (source As IEnumerable(Of TSource)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource SingleOrDefault(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member SingleOrDefault : seq&lt;'Source&gt; -&gt; 'Source" Usage="System.Linq.Enumerable.SingleOrDefault source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-1818">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1818">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-1819">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Do zwrócenia pojedynczego elementu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1819">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return the single element of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-1820">Zwraca tylko element sekwencji lub wartość domyślną, jeśli sekwencja jest pusta. Ta metoda zgłasza wyjątek, jeśli istnieje więcej niż jednego elementu w sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1820">Returns the only element of a sequence, or a default value if the sequence is empty; this method throws an exception if there is more than one element in the sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-1821">Pojedynczy element sekwencji wejściowych lub <see langword="default" />(<paramref name="TSource" />) Jeżeli sekwencja nie zawiera żadnych elementów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1821">The single element of the input sequence, or <see langword="default" />(<paramref name="TSource" />) if the sequence contains no elements.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-1822">Wartością domyślną dla odwołania i typów zerowalnych jest `null`.</span><span class="sxs-lookup"><span data-stu-id="e3165-1822">The default value for reference and nullable types is `null`.</span></span>  
  
 <span data-ttu-id="e3165-1823"><xref:System.Linq.Enumerable.SingleOrDefault%2A> Metody nie umożliwiają określenie wartości domyślnej.</span><span class="sxs-lookup"><span data-stu-id="e3165-1823">The <xref:System.Linq.Enumerable.SingleOrDefault%2A> method does not provide a way to specify a default value.</span></span> <span data-ttu-id="e3165-1824">Jeśli chcesz określić inne niż wartości domyślnej `default(TSource)`, użyj <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> metoda zgodnie z opisem w sekcji przykład.</span><span class="sxs-lookup"><span data-stu-id="e3165-1824">If you want to specify a default value other than `default(TSource)`, use the <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> method as described in the Example section.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-1825">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.SingleOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> zaznacz tylko element tablicy.</span><span class="sxs-lookup"><span data-stu-id="e3165-1825">The following code example demonstrates how to use <xref:System.Linq.Enumerable.SingleOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to select the only element of an array.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#83](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#83)]
 [!code-vb[System.Linq.Enumerable#83](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#83)]  
  
 <span data-ttu-id="e3165-1826">Poniższy przykład kodu pokazuje, że <xref:System.Linq.Enumerable.SingleOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> zwraca wartość domyślną, jeśli sekwencja nie zawiera dokładnie jeden element.</span><span class="sxs-lookup"><span data-stu-id="e3165-1826">The following code example demonstrates that <xref:System.Linq.Enumerable.SingleOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> returns a default value when the sequence does not contain exactly one element.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#84](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#84)]
 [!code-vb[System.Linq.Enumerable#84](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#84)]  
  
 <span data-ttu-id="e3165-1827">Czasami wartość `default(TSource)` nie jest wartością domyślną, którego chcesz użyć, jeśli kolekcja zawiera żadnych elementów.</span><span class="sxs-lookup"><span data-stu-id="e3165-1827">Sometimes the value of `default(TSource)` is not the default value that you want to use if the collection contains no elements.</span></span> <span data-ttu-id="e3165-1828">Zamiast sprawdzania wyników dla wartości domyślnej niepożądane, a następnie zmieniając go, jeśli to konieczne, możesz użyć <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> metodę, aby określić wartość domyślną, którą chcesz użyć, jeśli kolekcja jest pusta.</span><span class="sxs-lookup"><span data-stu-id="e3165-1828">Instead of checking the result for the unwanted default value and then changing it if necessary, you can use the <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> method to specify the default value that you want to use if the collection is empty.</span></span> <span data-ttu-id="e3165-1829">Następnie wywołaj <xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> można uzyskać elementu.</span><span class="sxs-lookup"><span data-stu-id="e3165-1829">Then, call <xref:System.Linq.Enumerable.Single%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> to obtain the element.</span></span> <span data-ttu-id="e3165-1830">Poniższy przykład kodu używa obu tych technik do uzyskania domyślną wartość 1, jeśli kolekcja numery stron jest pusta.</span><span class="sxs-lookup"><span data-stu-id="e3165-1830">The following code example uses both techniques to obtain a default value of 1 if a collection of page numbers is empty.</span></span> <span data-ttu-id="e3165-1831">Całkowitą wartość domyślna to 0, co nie jest zazwyczaj prawidłowy numer strony, wartość domyślna musi zostać określony jako 1 zamiast tego.</span><span class="sxs-lookup"><span data-stu-id="e3165-1831">Because the default value for an integer is 0, which is not usually a valid page number, the default value must be specified as 1 instead.</span></span> <span data-ttu-id="e3165-1832">Pierwszy zmiennej wynikowej są sprawdzane pod kątem wartość domyślną niepożądane, po zakończeniu zapytania podczas wykonywania.</span><span class="sxs-lookup"><span data-stu-id="e3165-1832">The first result variable is checked for the unwanted default value after the query has finished executing.</span></span> <span data-ttu-id="e3165-1833">Druga zmienna wyniku uzyskuje się za pomocą <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> można określić wartość domyślną 1.</span><span class="sxs-lookup"><span data-stu-id="e3165-1833">The second result variable is obtained by using <xref:System.Linq.Enumerable.DefaultIfEmpty%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2C%60%600%29> to specify a default value of 1.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#128](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#128)]
 [!code-vb[System.Linq.Enumerable#128](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#128)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-1834">
            <paramref name="source" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1834">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e3165-1835">Wejściowy sekwencja zawiera więcej niż jeden element.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1835">The input sequence contains more than one element.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="SingleOrDefault&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource SingleOrDefault&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource SingleOrDefault&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.SingleOrDefault``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SingleOrDefault(Of TSource) (source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As TSource" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static TSource SingleOrDefault(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member SingleOrDefault : seq&lt;'Source&gt; * Func&lt;'Source, bool&gt; -&gt; 'Source" Usage="System.Linq.Enumerable.SingleOrDefault (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-1836">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1836">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-1837">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Do zwrócenia pojedynczego elementu z.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1837">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return a single element from.</span>
          </span>
        </param>
        <param name="predicate">
          <span data-ttu-id="e3165-1838">Funkcja testowania elementu dla warunku.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1838">A function to test an element for a condition.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-1839">Zwraca tylko element sekwencji która spełnia określony warunek, lub wartość domyślną, jeśli taki element nie istnieje; Ta metoda zgłasza wyjątek, jeśli więcej niż jeden element spełnia warunek.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1839">Returns the only element of a sequence that satisfies a specified condition or a default value if no such element exists; this method throws an exception if more than one element satisfies the condition.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-1840">Pojedynczy element sekwencji wejściowych, który spełnia warunek, lub <see langword="default" />(<paramref name="TSource" />) Jeśli taki element nie zostanie znaleziony.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1840">The single element of the input sequence that satisfies the condition, or <see langword="default" />(<paramref name="TSource" />) if no such element is found.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-1841">Wartością domyślną dla odwołania i typów zerowalnych jest `null`.</span><span class="sxs-lookup"><span data-stu-id="e3165-1841">The default value for reference and nullable types is `null`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-1842">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.SingleOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> zaznacz tylko element w tablicy, która spełnia warunek.</span><span class="sxs-lookup"><span data-stu-id="e3165-1842">The following code example demonstrates how to use <xref:System.Linq.Enumerable.SingleOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> to select the only element of an array that satisfies a condition.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#85](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#85)]
 [!code-vb[System.Linq.Enumerable#85](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#85)]  
  
 <span data-ttu-id="e3165-1843">Poniższy przykład kodu pokazuje, że <xref:System.Linq.Enumerable.SingleOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> zwraca wartość domyślną, jeśli sekwencja nie zawiera dokładnie jeden element, który spełnia warunek.</span><span class="sxs-lookup"><span data-stu-id="e3165-1843">The following code example demonstrates that <xref:System.Linq.Enumerable.SingleOrDefault%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> returns a default value when the sequence does not contain exactly one element that satisfies the condition.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#86](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#86)]
 [!code-vb[System.Linq.Enumerable#86](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#86)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-1844">
            <paramref name="source" /> lub <paramref name="predicate" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1844">
              <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="e3165-1845">Więcej niż jeden element spełnia warunek w <paramref name="predicate" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1845">More than one element satisfies the condition in <paramref name="predicate" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Skip&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Skip&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Skip&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Skip``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Skip(Of TSource) (source As IEnumerable(Of TSource), count As Integer) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ Skip(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, int count);" />
      <MemberSignature Language="F#" Value="static member Skip : seq&lt;'Source&gt; * int -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.Skip (source, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-1846">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1846">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-1847">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Do zwrócenia elementy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1847">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return elements from.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="e3165-1848">Liczba elementów do pominięcia przed zwróceniem pozostałe elementy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1848">The number of elements to skip before returning the remaining elements.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-1849">Pomija określoną liczbę elementów w sekwencji, a następnie zwraca pozostałe elementy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1849">Bypasses a specified number of elements in a sequence and then returns the remaining elements.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-1850">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Zawiera elementy, które wystąpiły po określonym indeksem sekwencji wejściowych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1850">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements that occur after the specified index in the input sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-1851">Ta metoda jest implementowana za pomocą odroczonego wykonania.</span><span class="sxs-lookup"><span data-stu-id="e3165-1851">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="e3165-1852">Bezpośrednio zwracana wartość jest obiektem, który przechowuje wszystkie informacje wymagane do wykonania akcji.</span><span class="sxs-lookup"><span data-stu-id="e3165-1852">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="e3165-1853">Zapytanie, reprezentowane przez tę metodę nie jest wykonywana do czasu, przez wywołanie obiekt jest zostanie wyliczonly jego `GetEnumerator` metoda bezpośrednio lub za pomocą `foreach` w języku Visual C# lub `For Each` w języku Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="e3165-1853">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="e3165-1854">Jeśli `source` zawiera mniej niż `count` elementy, pusta <xref:System.Collections.Generic.IEnumerable%601> jest zwracana.</span><span class="sxs-lookup"><span data-stu-id="e3165-1854">If `source` contains fewer than `count` elements, an empty <xref:System.Collections.Generic.IEnumerable%601> is returned.</span></span> <span data-ttu-id="e3165-1855">Jeśli `count` jest mniejszy niż lub równe zero, wszystkie elementy `source` są.</span><span class="sxs-lookup"><span data-stu-id="e3165-1855">If `count` is less than or equal to zero, all elements of `source` are yielded.</span></span>  
  
 <span data-ttu-id="e3165-1856"><xref:System.Linq.Enumerable.Take%2A> i <xref:System.Linq.Enumerable.Skip%2A> metody są funkcjonalności.</span><span class="sxs-lookup"><span data-stu-id="e3165-1856">The <xref:System.Linq.Enumerable.Take%2A> and <xref:System.Linq.Enumerable.Skip%2A> methods are functional complements.</span></span> <span data-ttu-id="e3165-1857">Mając podaną sekwencję `coll` oraz integer `n`, złączenie wyników `coll.Take(n)` i `coll.Skip(n)` daje tę samą sekwencję co `coll`.</span><span class="sxs-lookup"><span data-stu-id="e3165-1857">Given a sequence `coll` and an integer `n`, concatenating the results of `coll.Take(n)` and `coll.Skip(n)` yields the same sequence as `coll`.</span></span>  
  
 <span data-ttu-id="e3165-1858">W składni wyrażeń zapytania języka Visual Basic `Skip` klauzuli przekłada się na wywołanie <xref:System.Linq.Enumerable.Skip%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-1858">In Visual Basic query expression syntax, a `Skip` clause translates to an invocation of <xref:System.Linq.Enumerable.Skip%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-1859">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Skip%2A> pominąć określoną liczbę elementów w posortowaną tablicę i zwraca wszystkie pozostałe elementy.</span><span class="sxs-lookup"><span data-stu-id="e3165-1859">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Skip%2A> to skip a specified number of elements in a sorted array and return the remaining elements.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#87](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#87)]
 [!code-vb[System.Linq.Enumerable#87](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#87)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-1860">
            <paramref name="source" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1860">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/f00eb172-3907-4c43-9745-d8546ab86234">
          <span data-ttu-id="e3165-1861">Skip — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1861">Skip Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="SkipLast&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; SkipLast&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; SkipLast&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.SkipLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SkipLast(Of TSource) (source As IEnumerable(Of TSource), count As Integer) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ SkipLast(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, int count);" />
      <MemberSignature Language="F#" Value="static member SkipLast : seq&lt;'Source&gt; * int -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.SkipLast (source, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">To be added.</typeparam>
        <param name="source">To be added.</param>
        <param name="count">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="SkipWhile&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e3165-1862">Pomija elementów w sekwencji, tak długo, jak długo określony warunek ma wartość true, a następnie zwraca pozostałe elementy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1862">Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="SkipWhile&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; SkipWhile&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; SkipWhile&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SkipWhile(Of TSource) (source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ SkipWhile(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member SkipWhile : seq&lt;'Source&gt; * Func&lt;'Source, bool&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.SkipWhile (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-1863">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1863">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-1864">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Do zwrócenia elementy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1864">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return elements from.</span>
          </span>
        </param>
        <param name="predicate">
          <span data-ttu-id="e3165-1865">Funkcja testowania każdego elementu na stanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1865">A function to test each element for a condition.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-1866">Pomija elementów w sekwencji, tak długo, jak długo określony warunek ma wartość true, a następnie zwraca pozostałe elementy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1866">Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-1867">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Zawierający elementy z sekwencji wejściowych, zaczynając od pierwszego elementu w liniowe serie, które nie zostały spełnione testu określonego przez <paramref name="predicate" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1867">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by <paramref name="predicate" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-1868"><xref:System.Linq.Enumerable.SkipWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> Metoda jest implementowana za pomocą odroczonego wykonania.</span><span class="sxs-lookup"><span data-stu-id="e3165-1868">The <xref:System.Linq.Enumerable.SkipWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> method is implemented by using deferred execution.</span></span> <span data-ttu-id="e3165-1869">Bezpośrednio zwracana wartość jest obiektem, który przechowuje wszystkie informacje wymagane do wykonania akcji.</span><span class="sxs-lookup"><span data-stu-id="e3165-1869">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="e3165-1870">Zapytanie, reprezentowane przez tę metodę nie jest wykonywana do czasu, przez wywołanie obiekt jest zostanie wyliczonly jego `GetEnumerator` metoda bezpośrednio lub za pomocą `foreach` w języku Visual C# lub `For Each` w języku Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="e3165-1870">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="e3165-1871">Ta metoda sprawdza każdy element obiektu `source` przy użyciu `predicate` i pomija element, jeśli wynik jest `true`.</span><span class="sxs-lookup"><span data-stu-id="e3165-1871">This method tests each element of `source` by using `predicate` and skips the element if the result is `true`.</span></span> <span data-ttu-id="e3165-1872">Po powrocie funkcji predykatu `false` elementu tego elementu, a wszystkie pozostałe elementy `source` są uzyskane i nie ma żadnych więcej wywołań `predicate`.</span><span class="sxs-lookup"><span data-stu-id="e3165-1872">After the predicate function returns `false` for an element, that element and the remaining elements in `source` are yielded and there are no more invocations of `predicate`.</span></span>  
  
 <span data-ttu-id="e3165-1873">Jeśli `predicate` zwraca `true` dla wszystkich elementów w sekwencji, pusta <xref:System.Collections.Generic.IEnumerable%601> jest zwracana.</span><span class="sxs-lookup"><span data-stu-id="e3165-1873">If `predicate` returns `true` for all elements in the sequence, an empty <xref:System.Collections.Generic.IEnumerable%601> is returned.</span></span>  
  
 <span data-ttu-id="e3165-1874"><xref:System.Linq.Enumerable.TakeWhile%2A> i <xref:System.Linq.Enumerable.SkipWhile%2A> metody są funkcjonalności.</span><span class="sxs-lookup"><span data-stu-id="e3165-1874">The <xref:System.Linq.Enumerable.TakeWhile%2A> and <xref:System.Linq.Enumerable.SkipWhile%2A> methods are functional complements.</span></span> <span data-ttu-id="e3165-1875">Mając podaną sekwencję `coll` i czystą funkcję `p`, złączenie wyników `coll.TakeWhile(p)` i `coll.SkipWhile(p)` daje tę samą sekwencję co `coll`.</span><span class="sxs-lookup"><span data-stu-id="e3165-1875">Given a sequence `coll` and a pure function `p`, concatenating the results of `coll.TakeWhile(p)` and `coll.SkipWhile(p)` yields the same sequence as `coll`.</span></span>  
  
 <span data-ttu-id="e3165-1876">W składni wyrażeń zapytania języka Visual Basic `Skip While` klauzuli przekłada się na wywołanie <xref:System.Linq.Enumerable.SkipWhile%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-1876">In Visual Basic query expression syntax, a `Skip While` clause translates to an invocation of <xref:System.Linq.Enumerable.SkipWhile%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-1877">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.SkipWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> do pominięcia elementy tablicy, jak długo będzie spełniony jest warunek.</span><span class="sxs-lookup"><span data-stu-id="e3165-1877">The following code example demonstrates how to use <xref:System.Linq.Enumerable.SkipWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> to skip elements of an array as long as a condition is true.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#88](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#88)]
 [!code-vb[System.Linq.Enumerable#88](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#88)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-1878">
            <paramref name="source" /> lub <paramref name="predicate" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1878">
              <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/5dee8350-7520-4f1a-b00d-590cacd572d6">
          <span data-ttu-id="e3165-1879">Skip While — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1879">Skip While Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="SkipWhile&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; SkipWhile&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,int,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; SkipWhile&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`3&lt;!!TSource, int32, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.SkipWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function SkipWhile(Of TSource) (source As IEnumerable(Of TSource), predicate As Func(Of TSource, Integer, Boolean)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ SkipWhile(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, int, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member SkipWhile : seq&lt;'Source&gt; * Func&lt;'Source, int, bool&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.SkipWhile (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Int32,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-1880">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1880">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-1881">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Do zwrócenia elementy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1881">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to return elements from.</span>
          </span>
        </param>
        <param name="predicate">
          <span data-ttu-id="e3165-1882">Funkcja testowania każdego elementu źródłowego dla warunku; drugi parametr funkcji reprezentuje indeks elementu źródłowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1882">A function to test each source element for a condition; the second parameter of the function represents the index of the source element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-1883">Pomija elementów w sekwencji, tak długo, jak długo określony warunek ma wartość true, a następnie zwraca pozostałe elementy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1883">Bypasses elements in a sequence as long as a specified condition is true and then returns the remaining elements.</span>
          </span>
          <span data-ttu-id="e3165-1884">Indeks elementu jest używany w logice funkcji predykatu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1884">The element's index is used in the logic of the predicate function.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-1885">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Zawierający elementy z sekwencji wejściowych, zaczynając od pierwszego elementu w liniowe serie, które nie zostały spełnione testu określonego przez <paramref name="predicate" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1885">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements from the input sequence starting at the first element in the linear series that does not pass the test specified by <paramref name="predicate" />.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-1886">Ta metoda jest implementowana za pomocą odroczonego wykonania.</span><span class="sxs-lookup"><span data-stu-id="e3165-1886">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="e3165-1887">Bezpośrednio zwracana wartość jest obiektem, który przechowuje wszystkie informacje wymagane do wykonania akcji.</span><span class="sxs-lookup"><span data-stu-id="e3165-1887">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="e3165-1888">Zapytanie, reprezentowane przez tę metodę nie jest wykonywana do czasu, przez wywołanie obiekt jest zostanie wyliczonly jego `GetEnumerator` metoda bezpośrednio lub za pomocą `foreach` w języku Visual C# lub `For Each` w języku Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="e3165-1888">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="e3165-1889"><xref:System.Linq.Enumerable.SkipWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29> Metoda sprawdza każdy element obiektu `source` przy użyciu `predicate` i pomija element, jeśli wynik jest `true`.</span><span class="sxs-lookup"><span data-stu-id="e3165-1889">The <xref:System.Linq.Enumerable.SkipWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29> method tests each element of `source` by using `predicate` and skips the element if the result is `true`.</span></span> <span data-ttu-id="e3165-1890">Po powrocie funkcji predykatu `false` elementu tego elementu, a wszystkie pozostałe elementy `source` są uzyskane i nie ma żadnych więcej wywołań `predicate`.</span><span class="sxs-lookup"><span data-stu-id="e3165-1890">After the predicate function returns `false` for an element, that element and the remaining elements in `source` are yielded and there are no more invocations of `predicate`.</span></span>  
  
 <span data-ttu-id="e3165-1891">Jeśli `predicate` zwraca `true` dla wszystkich elementów w sekwencji, pusta <xref:System.Collections.Generic.IEnumerable%601> jest zwracana.</span><span class="sxs-lookup"><span data-stu-id="e3165-1891">If `predicate` returns `true` for all elements in the sequence, an empty <xref:System.Collections.Generic.IEnumerable%601> is returned.</span></span>  
  
 <span data-ttu-id="e3165-1892">Pierwszy argument `predicate` reprezentuje element do przetestowania.</span><span class="sxs-lookup"><span data-stu-id="e3165-1892">The first argument of `predicate` represents the element to test.</span></span> <span data-ttu-id="e3165-1893">Drugi argument reprezentuje liczony od zera indeks elementu w obrębie `source`.</span><span class="sxs-lookup"><span data-stu-id="e3165-1893">The second argument represents the zero-based index of the element within `source`.</span></span>  
  
 <span data-ttu-id="e3165-1894"><xref:System.Linq.Enumerable.TakeWhile%2A> i <xref:System.Linq.Enumerable.SkipWhile%2A> metody są funkcjonalności.</span><span class="sxs-lookup"><span data-stu-id="e3165-1894">The <xref:System.Linq.Enumerable.TakeWhile%2A> and <xref:System.Linq.Enumerable.SkipWhile%2A> methods are functional complements.</span></span> <span data-ttu-id="e3165-1895">Mając podaną sekwencję `coll` i czystą funkcję `p`, złączenie wyników `coll.TakeWhile(p)` i `coll.SkipWhile(p)` daje tę samą sekwencję co `coll`.</span><span class="sxs-lookup"><span data-stu-id="e3165-1895">Given a sequence `coll` and a pure function `p`, concatenating the results of `coll.TakeWhile(p)` and `coll.SkipWhile(p)` yields the same sequence as `coll`.</span></span>  
  
 <span data-ttu-id="e3165-1896">W składni wyrażeń zapytania języka Visual Basic `Skip While` klauzuli przekłada się na wywołanie <xref:System.Linq.Enumerable.SkipWhile%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-1896">In Visual Basic query expression syntax, a `Skip While` clause translates to an invocation of <xref:System.Linq.Enumerable.SkipWhile%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-1897">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.SkipWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29> do pominięcia elementy tablicy, jak długo będzie spełniony jest warunek, który zależy od indeks elementu.</span><span class="sxs-lookup"><span data-stu-id="e3165-1897">The following code example demonstrates how to use <xref:System.Linq.Enumerable.SkipWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29> to skip elements of an array as long as a condition that depends on the element's index is true.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#89](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#89)]
 [!code-vb[System.Linq.Enumerable#89](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#89)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-1898">
            <paramref name="source" /> lub <paramref name="predicate" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1898">
              <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/5dee8350-7520-4f1a-b00d-590cacd572d6">
          <span data-ttu-id="e3165-1899">Skip While — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1899">Skip While Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="Sum">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e3165-1900">Oblicza sumę sekwencję wartości liczbowych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1900">Computes the sum of a sequence of numeric values.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Sum">
      <MemberSignature Language="C#" Value="public static decimal Sum (this System.Collections.Generic.IEnumerable&lt;decimal&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Sum(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Decimal&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Decimal})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum (source As IEnumerable(Of Decimal)) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Decimal Sum(System::Collections::Generic::IEnumerable&lt;System::Decimal&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;decimal&gt; -&gt; decimal" Usage="System.Linq.Enumerable.Sum source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Decimal&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="e3165-1901">Sekwencja <see cref="T:System.Decimal" /> wartości, aby obliczyć sumę.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1901">A sequence of <see cref="T:System.Decimal" /> values to calculate the sum of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-1902">Oblicza sumę sekwencji <see cref="T:System.Decimal" /> wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1902">Computes the sum of a sequence of <see cref="T:System.Decimal" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-1903">Suma wartości w sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1903">The sum of the values in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-1904"><xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Decimal%7D%29> Metoda zwraca zero, jeśli `source` nie zawiera żadnych elementów.</span><span class="sxs-lookup"><span data-stu-id="e3165-1904">The <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Decimal%7D%29> method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="e3165-1905">W składni wyrażeń zapytania języka Visual Basic `Aggregate Into Sum()` klauzuli przekłada się na wywołanie <xref:System.Linq.Enumerable.Sum%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-1905">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-1906">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29> aby zsumować wartości sekwencji.</span><span class="sxs-lookup"><span data-stu-id="e3165-1906">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29> to sum the values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#120](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#120)]
 [!code-vb[System.Linq.Enumerable#120](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#120)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-1907">
            <paramref name="source" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1907">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="e3165-1908">Suma jest większa niż <see cref="F:System.Decimal.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1908">The sum is larger than <see cref="F:System.Decimal.MaxValue" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="e3165-1909">Aggregate — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1909">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Sum">
      <MemberSignature Language="C#" Value="public static double Sum (this System.Collections.Generic.IEnumerable&lt;double&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Sum(class System.Collections.Generic.IEnumerable`1&lt;float64&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Double})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum (source As IEnumerable(Of Double)) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static double Sum(System::Collections::Generic::IEnumerable&lt;double&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;double&gt; -&gt; double" Usage="System.Linq.Enumerable.Sum source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Double&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="e3165-1910">Sekwencja <see cref="T:System.Double" /> wartości, aby obliczyć sumę.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1910">A sequence of <see cref="T:System.Double" /> values to calculate the sum of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-1911">Oblicza sumę sekwencji <see cref="T:System.Double" /> wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1911">Computes the sum of a sequence of <see cref="T:System.Double" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-1912">Suma wartości w sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1912">The sum of the values in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-1913">Ta metoda zwraca zero, jeśli `source` nie zawiera żadnych elementów.</span><span class="sxs-lookup"><span data-stu-id="e3165-1913">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="e3165-1914">W składni wyrażeń zapytania języka Visual Basic `Aggregate Into Sum()` klauzuli przekłada się na wywołanie <xref:System.Linq.Enumerable.Sum%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-1914">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-1915">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29> aby zsumować wartości sekwencji.</span><span class="sxs-lookup"><span data-stu-id="e3165-1915">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29> to sum the values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#120](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#120)]
 [!code-vb[System.Linq.Enumerable#120](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#120)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-1916">
            <paramref name="source" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1916">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="e3165-1917">Aggregate — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1917">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Sum">
      <MemberSignature Language="C#" Value="public static int Sum (this System.Collections.Generic.IEnumerable&lt;int&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Sum(class System.Collections.Generic.IEnumerable`1&lt;int32&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int32})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum (source As IEnumerable(Of Integer)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int Sum(System::Collections::Generic::IEnumerable&lt;int&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;int&gt; -&gt; int" Usage="System.Linq.Enumerable.Sum source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Int32&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="e3165-1918">Sekwencja <see cref="T:System.Int32" /> wartości, aby obliczyć sumę.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1918">A sequence of <see cref="T:System.Int32" /> values to calculate the sum of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-1919">Oblicza sumę sekwencji <see cref="T:System.Int32" /> wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1919">Computes the sum of a sequence of <see cref="T:System.Int32" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-1920">Suma wartości w sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1920">The sum of the values in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-1921">Ta metoda zwraca zero, jeśli `source` nie zawiera żadnych elementów.</span><span class="sxs-lookup"><span data-stu-id="e3165-1921">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="e3165-1922">W składni wyrażeń zapytania języka Visual Basic `Aggregate Into Sum()` klauzuli przekłada się na wywołanie <xref:System.Linq.Enumerable.Sum%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-1922">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-1923">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29> aby zsumować wartości sekwencji.</span><span class="sxs-lookup"><span data-stu-id="e3165-1923">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29> to sum the values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#120](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#120)]
 [!code-vb[System.Linq.Enumerable#120](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#120)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-1924">
            <paramref name="source" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1924">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="e3165-1925">Suma jest większa niż <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1925">The sum is larger than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="e3165-1926">Aggregate — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1926">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Sum">
      <MemberSignature Language="C#" Value="public static long Sum (this System.Collections.Generic.IEnumerable&lt;long&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Sum(class System.Collections.Generic.IEnumerable`1&lt;int64&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Int64})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum (source As IEnumerable(Of Long)) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static long Sum(System::Collections::Generic::IEnumerable&lt;long&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;int64&gt; -&gt; int64" Usage="System.Linq.Enumerable.Sum source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Int64&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="e3165-1927">Sekwencja <see cref="T:System.Int64" /> wartości, aby obliczyć sumę.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1927">A sequence of <see cref="T:System.Int64" /> values to calculate the sum of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-1928">Oblicza sumę sekwencji <see cref="T:System.Int64" /> wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1928">Computes the sum of a sequence of <see cref="T:System.Int64" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-1929">Suma wartości w sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1929">The sum of the values in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-1930">Ta metoda zwraca zero, jeśli `source` nie zawiera żadnych elementów.</span><span class="sxs-lookup"><span data-stu-id="e3165-1930">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="e3165-1931">W składni wyrażeń zapytania języka Visual Basic `Aggregate Into Sum()` klauzuli przekłada się na wywołanie <xref:System.Linq.Enumerable.Sum%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-1931">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-1932">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29> aby zsumować wartości sekwencji.</span><span class="sxs-lookup"><span data-stu-id="e3165-1932">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29> to sum the values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#120](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#120)]
 [!code-vb[System.Linq.Enumerable#120](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#120)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-1933">
            <paramref name="source" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1933">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="e3165-1934">Suma jest większa niż <see cref="F:System.Int64.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1934">The sum is larger than <see cref="F:System.Int64.MaxValue" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="e3165-1935">Aggregate — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1935">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Sum">
      <MemberSignature Language="C#" Value="public static Nullable&lt;decimal&gt; Sum (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;decimal&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype System.Decimal&gt; Sum(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Decimal}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum (source As IEnumerable(Of Nullable(Of Decimal))) As Nullable(Of Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;System::Decimal&gt; Sum(System::Collections::Generic::IEnumerable&lt;Nullable&lt;System::Decimal&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;Nullable&lt;decimal&gt;&gt; -&gt; Nullable&lt;decimal&gt;" Usage="System.Linq.Enumerable.Sum source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Decimal&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="e3165-1936">Sekwencja nullable <see cref="T:System.Decimal" /> wartości, aby obliczyć sumę.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1936">A sequence of nullable <see cref="T:System.Decimal" /> values to calculate the sum of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-1937">Oblicza sumę sekwencji nullable <see cref="T:System.Decimal" /> wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1937">Computes the sum of a sequence of nullable <see cref="T:System.Decimal" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-1938">Suma wartości w sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1938">The sum of the values in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-1939">Ta metoda zwraca zero, jeśli `source` nie zawiera żadnych elementów.</span><span class="sxs-lookup"><span data-stu-id="e3165-1939">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="e3165-1940">Nie ma wyników zawierają wartości, które są `null`.</span><span class="sxs-lookup"><span data-stu-id="e3165-1940">The result doesnot include values that are `null`.</span></span>  
  
 <span data-ttu-id="e3165-1941">W składni wyrażeń zapytania języka Visual Basic `Aggregate Into Sum()` klauzuli przekłada się na wywołanie <xref:System.Linq.Enumerable.Sum%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-1941">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-1942">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> aby zsumować wartości sekwencji.</span><span class="sxs-lookup"><span data-stu-id="e3165-1942">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> to sum the values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#121](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#121)]
 [!code-vb[System.Linq.Enumerable#121](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#121)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-1943">
            <paramref name="source" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1943">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="e3165-1944">Suma jest większa niż <see cref="F:System.Decimal.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1944">The sum is larger than <see cref="F:System.Decimal.MaxValue" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="e3165-1945">Aggregate — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1945">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Sum">
      <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Sum (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;double&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Sum(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;float64&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Double}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum (source As IEnumerable(Of Nullable(Of Double))) As Nullable(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;double&gt; Sum(System::Collections::Generic::IEnumerable&lt;Nullable&lt;double&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;Nullable&lt;double&gt;&gt; -&gt; Nullable&lt;double&gt;" Usage="System.Linq.Enumerable.Sum source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Double&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="e3165-1946">Sekwencja nullable <see cref="T:System.Double" /> wartości, aby obliczyć sumę.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1946">A sequence of nullable <see cref="T:System.Double" /> values to calculate the sum of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-1947">Oblicza sumę sekwencji nullable <see cref="T:System.Double" /> wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1947">Computes the sum of a sequence of nullable <see cref="T:System.Double" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-1948">Suma wartości w sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1948">The sum of the values in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-1949">Ta metoda zwraca zero, jeśli `source` nie zawiera żadnych elementów.</span><span class="sxs-lookup"><span data-stu-id="e3165-1949">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="e3165-1950">Wynik nie zawiera wartości, które są `null`.</span><span class="sxs-lookup"><span data-stu-id="e3165-1950">The result does not include values that are `null`.</span></span>  
  
 <span data-ttu-id="e3165-1951">W składni wyrażeń zapytania języka Visual Basic `Aggregate Into Sum()` klauzuli przekłada się na wywołanie <xref:System.Linq.Enumerable.Sum%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-1951">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-1952">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> aby zsumować wartości sekwencji.</span><span class="sxs-lookup"><span data-stu-id="e3165-1952">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> to sum the values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#121](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#121)]
 [!code-vb[System.Linq.Enumerable#121](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#121)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-1953">
            <paramref name="source" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1953">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="e3165-1954">Aggregate — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1954">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Sum">
      <MemberSignature Language="C#" Value="public static Nullable&lt;int&gt; Sum (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;int&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int32&gt; Sum(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;int32&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int32}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum (source As IEnumerable(Of Nullable(Of Integer))) As Nullable(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;int&gt; Sum(System::Collections::Generic::IEnumerable&lt;Nullable&lt;int&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;Nullable&lt;int&gt;&gt; -&gt; Nullable&lt;int&gt;" Usage="System.Linq.Enumerable.Sum source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Int32&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="e3165-1955">Sekwencja nullable <see cref="T:System.Int32" /> wartości, aby obliczyć sumę.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1955">A sequence of nullable <see cref="T:System.Int32" /> values to calculate the sum of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-1956">Oblicza sumę sekwencji nullable <see cref="T:System.Int32" /> wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1956">Computes the sum of a sequence of nullable <see cref="T:System.Int32" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-1957">Suma wartości w sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1957">The sum of the values in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-1958">Ta metoda zwraca zero, jeśli `source` nie zawiera żadnych elementów.</span><span class="sxs-lookup"><span data-stu-id="e3165-1958">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="e3165-1959">Wynik nie zawiera wartości, które są `null`.</span><span class="sxs-lookup"><span data-stu-id="e3165-1959">The result does not include values that are `null`.</span></span>  
  
 <span data-ttu-id="e3165-1960">W składni wyrażeń zapytania języka Visual Basic `Aggregate Into Sum()` klauzuli przekłada się na wywołanie <xref:System.Linq.Enumerable.Sum%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-1960">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-1961">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> aby zsumować wartości sekwencji.</span><span class="sxs-lookup"><span data-stu-id="e3165-1961">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> to sum the values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#121](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#121)]
 [!code-vb[System.Linq.Enumerable#121](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#121)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-1962">
            <paramref name="source" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1962">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="e3165-1963">Suma jest większa niż <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1963">The sum is larger than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="e3165-1964">Aggregate — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1964">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Sum">
      <MemberSignature Language="C#" Value="public static Nullable&lt;long&gt; Sum (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;long&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int64&gt; Sum(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;int64&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Int64}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum (source As IEnumerable(Of Nullable(Of Long))) As Nullable(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;long&gt; Sum(System::Collections::Generic::IEnumerable&lt;Nullable&lt;long&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;Nullable&lt;int64&gt;&gt; -&gt; Nullable&lt;int64&gt;" Usage="System.Linq.Enumerable.Sum source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Int64&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="e3165-1965">Sekwencja nullable <see cref="T:System.Int64" /> wartości, aby obliczyć sumę.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1965">A sequence of nullable <see cref="T:System.Int64" /> values to calculate the sum of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-1966">Oblicza sumę sekwencji nullable <see cref="T:System.Int64" /> wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1966">Computes the sum of a sequence of nullable <see cref="T:System.Int64" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-1967">Suma wartości w sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1967">The sum of the values in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-1968">Ta metoda zwraca zero, jeśli `source` nie zawiera żadnych elementów.</span><span class="sxs-lookup"><span data-stu-id="e3165-1968">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="e3165-1969">Wynik nie zawiera wartości, które są `null`.</span><span class="sxs-lookup"><span data-stu-id="e3165-1969">The result does not include values that are `null`.</span></span>  
  
 <span data-ttu-id="e3165-1970">W składni wyrażeń zapytania języka Visual Basic `Aggregate Into Sum()` klauzuli przekłada się na wywołanie <xref:System.Linq.Enumerable.Sum%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-1970">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-1971">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> aby zsumować wartości sekwencji.</span><span class="sxs-lookup"><span data-stu-id="e3165-1971">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> to sum the values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_elementtype](~/includes/sqo-diff-overload-example-elementtype-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#121](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#121)]
 [!code-vb[System.Linq.Enumerable#121](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#121)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-1972">
            <paramref name="source" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1972">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="e3165-1973">Suma jest większa niż <see cref="F:System.Int64.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1973">The sum is larger than <see cref="F:System.Int64.MaxValue" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="e3165-1974">Aggregate — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1974">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Sum">
      <MemberSignature Language="C#" Value="public static Nullable&lt;float&gt; Sum (this System.Collections.Generic.IEnumerable&lt;Nullable&lt;float&gt;&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float32&gt; Sum(class System.Collections.Generic.IEnumerable`1&lt;valuetype System.Nullable`1&lt;float32&gt;&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Nullable{System.Single}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum (source As IEnumerable(Of Nullable(Of Single))) As Nullable(Of Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;float&gt; Sum(System::Collections::Generic::IEnumerable&lt;Nullable&lt;float&gt;&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;Nullable&lt;single&gt;&gt; -&gt; Nullable&lt;single&gt;" Usage="System.Linq.Enumerable.Sum source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Nullable&lt;System.Single&gt;&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="e3165-1975">Sekwencja nullable <see cref="T:System.Single" /> wartości, aby obliczyć sumę.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1975">A sequence of nullable <see cref="T:System.Single" /> values to calculate the sum of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-1976">Oblicza sumę sekwencji nullable <see cref="T:System.Single" /> wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1976">Computes the sum of a sequence of nullable <see cref="T:System.Single" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-1977">Suma wartości w sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1977">The sum of the values in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-1978">Ta metoda zwraca zero, jeśli `source` nie zawiera żadnych elementów.</span><span class="sxs-lookup"><span data-stu-id="e3165-1978">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="e3165-1979">Wynik nie zawiera wartości, które są `null`.</span><span class="sxs-lookup"><span data-stu-id="e3165-1979">The result does not include values that are `null`.</span></span>  
  
 <span data-ttu-id="e3165-1980">W składni wyrażeń zapytania języka Visual Basic `Aggregate Into Sum()` klauzuli przekłada się na wywołanie <xref:System.Linq.Enumerable.Sum%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-1980">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-1981">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> aby zsumować wartości sekwencji.</span><span class="sxs-lookup"><span data-stu-id="e3165-1981">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Nullable%7BSystem.Single%7D%7D%29> to sum the values of a sequence.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#121](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#121)]
 [!code-vb[System.Linq.Enumerable#121](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#121)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-1982">
            <paramref name="source" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1982">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="e3165-1983">Aggregate — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1983">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Sum">
      <MemberSignature Language="C#" Value="public static float Sum (this System.Collections.Generic.IEnumerable&lt;float&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Sum(class System.Collections.Generic.IEnumerable`1&lt;float32&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum(System.Collections.Generic.IEnumerable{System.Single})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum (source As IEnumerable(Of Single)) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static float Sum(System::Collections::Generic::IEnumerable&lt;float&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;single&gt; -&gt; single" Usage="System.Linq.Enumerable.Sum source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;System.Single&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <param name="source">
          <span data-ttu-id="e3165-1984">Sekwencja <see cref="T:System.Single" /> wartości, aby obliczyć sumę.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1984">A sequence of <see cref="T:System.Single" /> values to calculate the sum of.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-1985">Oblicza sumę sekwencji <see cref="T:System.Single" /> wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1985">Computes the sum of a sequence of <see cref="T:System.Single" /> values.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-1986">Suma wartości w sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1986">The sum of the values in the sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-1987">Ta metoda zwraca zero, jeśli `source` nie zawiera żadnych elementów.</span><span class="sxs-lookup"><span data-stu-id="e3165-1987">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="e3165-1988">W składni wyrażeń zapytania języka Visual Basic `Aggregate Into Sum()` klauzuli przekłada się na wywołanie <xref:System.Linq.Enumerable.Sum%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-1988">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-1989">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29> aby zsumować wartości sekwencji.</span><span class="sxs-lookup"><span data-stu-id="e3165-1989">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%28System.Collections.Generic.IEnumerable%7BSystem.Single%7D%29> to sum the values of a sequence.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#120](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#120)]
 [!code-vb[System.Linq.Enumerable#120](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#120)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-1990">
            <paramref name="source" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1990">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="e3165-1991">Aggregate — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1991">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Sum&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static decimal Sum&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,decimal&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Decimal Sum&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Decimal&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Decimal})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Decimal)) As Decimal" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Decimal Sum(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, System::Decimal&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;'Source&gt; * Func&lt;'Source, decimal&gt; -&gt; decimal" Usage="System.Linq.Enumerable.Sum (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Decimal</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Decimal&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-1992">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1992">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-1993">Sekwencja wartości, które są używane do obliczania sumy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1993">A sequence of values that are used to calculate a sum.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="e3165-1994">Funkcja transformacji do zastosowania do każdego elementu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1994">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-1995">Oblicza sumę sekwencji <see cref="T:System.Decimal" /> wartości, które są uzyskiwane za pomocą funkcji przekształcenia na każdym elemencie sekwencji wejściowych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1995">Computes the sum of the sequence of <see cref="T:System.Decimal" /> values that are obtained by invoking a transform function on each element of the input sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-1996">Suma przewidywanych wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-1996">The sum of the projected values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-1997">Ta metoda zwraca zero, jeśli `source` nie zawiera żadnych elementów.</span><span class="sxs-lookup"><span data-stu-id="e3165-1997">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="e3165-1998">Tej metody można zastosować do je sekvence hodnot dowolnego, jeśli podasz funkcji, `selector`, które projekty członkowie `source` do typu liczbowego specjalnie <xref:System.Decimal>.</span><span class="sxs-lookup"><span data-stu-id="e3165-1998">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Decimal>.</span></span>  
  
 <span data-ttu-id="e3165-1999">W składni wyrażeń zapytania języka Visual Basic `Aggregate Into Sum()` klauzuli przekłada się na wywołanie <xref:System.Linq.Enumerable.Sum%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-1999">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-2000">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> aby zsumować przewidywane wartości sekwencji.</span><span class="sxs-lookup"><span data-stu-id="e3165-2000">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> to sum the projected values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#98](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#98)]
 [!code-vb[System.Linq.Enumerable#98](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#98)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-2001">
            <paramref name="source" /> lub <paramref name="selector" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2001">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="e3165-2002">Suma jest większa niż <see cref="F:System.Decimal.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2002">The sum is larger than <see cref="F:System.Decimal.MaxValue" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="e3165-2003">Aggregate — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2003">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Sum&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static double Sum&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,double&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float64 Sum&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, float64&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Double})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Double)) As Double" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static double Sum(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, double&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;'Source&gt; * Func&lt;'Source, double&gt; -&gt; double" Usage="System.Linq.Enumerable.Sum (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Double</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Double&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-2004">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2004">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-2005">Sekwencja wartości, które są używane do obliczania sumy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2005">A sequence of values that are used to calculate a sum.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="e3165-2006">Funkcja transformacji do zastosowania do każdego elementu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2006">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-2007">Oblicza sumę sekwencji <see cref="T:System.Double" /> wartości, które są uzyskiwane za pomocą funkcji przekształcenia na każdym elemencie sekwencji wejściowych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2007">Computes the sum of the sequence of <see cref="T:System.Double" /> values that are obtained by invoking a transform function on each element of the input sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-2008">Suma przewidywanych wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2008">The sum of the projected values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-2009">Ta metoda zwraca zero, jeśli `source` nie zawiera żadnych elementów.</span><span class="sxs-lookup"><span data-stu-id="e3165-2009">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="e3165-2010">Tej metody można zastosować do je sekvence hodnot dowolnego, jeśli podasz funkcji, `selector`, które projekty członkowie `source` do typu liczbowego specjalnie <xref:System.Double>.</span><span class="sxs-lookup"><span data-stu-id="e3165-2010">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Double>.</span></span>  
  
 <span data-ttu-id="e3165-2011">W składni wyrażeń zapytania języka Visual Basic `Aggregate Into Sum()` klauzuli przekłada się na wywołanie <xref:System.Linq.Enumerable.Sum%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-2011">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-2012">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> aby zsumować przewidywane wartości sekwencji.</span><span class="sxs-lookup"><span data-stu-id="e3165-2012">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> to sum the projected values of a sequence.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#98](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#98)]
 [!code-vb[System.Linq.Enumerable#98](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#98)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-2013">
            <paramref name="source" /> lub <paramref name="selector" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2013">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="e3165-2014">Aggregate — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2014">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Sum&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static int Sum&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,int&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int32 Sum&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, int32&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Integer)) As Integer" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static int Sum(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, int&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;'Source&gt; * Func&lt;'Source, int&gt; -&gt; int" Usage="System.Linq.Enumerable.Sum (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int32</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Int32&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-2015">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2015">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-2016">Sekwencja wartości, które są używane do obliczania sumy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2016">A sequence of values that are used to calculate a sum.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="e3165-2017">Funkcja transformacji do zastosowania do każdego elementu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2017">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-2018">Oblicza sumę sekwencji <see cref="T:System.Int32" /> wartości, które są uzyskiwane za pomocą funkcji przekształcenia na każdym elemencie sekwencji wejściowych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2018">Computes the sum of the sequence of <see cref="T:System.Int32" /> values that are obtained by invoking a transform function on each element of the input sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-2019">Suma przewidywanych wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2019">The sum of the projected values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-2020">Ta metoda zwraca zero, jeśli `source` nie zawiera żadnych elementów.</span><span class="sxs-lookup"><span data-stu-id="e3165-2020">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="e3165-2021">Tej metody można zastosować do je sekvence hodnot dowolnego, jeśli podasz funkcji, `selector`, które projekty członkowie `source` do typu liczbowego specjalnie <xref:System.Int32>.</span><span class="sxs-lookup"><span data-stu-id="e3165-2021">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Int32>.</span></span>  
  
 <span data-ttu-id="e3165-2022">W składni wyrażeń zapytania języka Visual Basic `Aggregate Into Sum()` klauzuli przekłada się na wywołanie <xref:System.Linq.Enumerable.Sum%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-2022">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-2023">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> aby zsumować przewidywane wartości sekwencji.</span><span class="sxs-lookup"><span data-stu-id="e3165-2023">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> to sum the projected values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#98](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#98)]
 [!code-vb[System.Linq.Enumerable#98](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#98)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-2024">
            <paramref name="source" /> lub <paramref name="selector" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2024">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="e3165-2025">Suma jest większa niż <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2025">The sum is larger than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="e3165-2026">Aggregate — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2026">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Sum&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static long Sum&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,long&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig int64 Sum&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, int64&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int64})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Long)) As Long" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static long Sum(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, long&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;'Source&gt; * Func&lt;'Source, int64&gt; -&gt; int64" Usage="System.Linq.Enumerable.Sum (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Int64</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Int64&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-2027">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2027">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-2028">Sekwencja wartości, które są używane do obliczania sumy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2028">A sequence of values that are used to calculate a sum.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="e3165-2029">Funkcja transformacji do zastosowania do każdego elementu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2029">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-2030">Oblicza sumę sekwencji <see cref="T:System.Int64" /> wartości, które są uzyskiwane za pomocą funkcji przekształcenia na każdym elemencie sekwencji wejściowych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2030">Computes the sum of the sequence of <see cref="T:System.Int64" /> values that are obtained by invoking a transform function on each element of the input sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-2031">Suma przewidywanych wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2031">The sum of the projected values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-2032">Ta metoda zwraca zero, jeśli `source` nie zawiera żadnych elementów.</span><span class="sxs-lookup"><span data-stu-id="e3165-2032">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="e3165-2033">Tej metody można zastosować do je sekvence hodnot dowolnego, jeśli podasz funkcji, `selector`, które projekty członkowie `source` do typu liczbowego specjalnie <xref:System.Int64>.</span><span class="sxs-lookup"><span data-stu-id="e3165-2033">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Int64>.</span></span>  
  
 <span data-ttu-id="e3165-2034">W składni wyrażeń zapytania języka Visual Basic `Aggregate Into Sum()` klauzuli przekłada się na wywołanie <xref:System.Linq.Enumerable.Sum%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-2034">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-2035">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> aby zsumować przewidywane wartości sekwencji.</span><span class="sxs-lookup"><span data-stu-id="e3165-2035">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> to sum the projected values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#98](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#98)]
 [!code-vb[System.Linq.Enumerable#98](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#98)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-2036">
            <paramref name="source" /> lub <paramref name="selector" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2036">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="e3165-2037">Suma jest większa niż <see cref="F:System.Int64.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2037">The sum is larger than <see cref="F:System.Int64.MaxValue" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="e3165-2038">Aggregate — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2038">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Sum&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;decimal&gt; Sum&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;decimal&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;valuetype System.Decimal&gt; Sum&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;valuetype System.Decimal&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Decimal}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Decimal))) As Nullable(Of Decimal)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;System::Decimal&gt; Sum(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;System::Decimal&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;decimal&gt;&gt; -&gt; Nullable&lt;decimal&gt;" Usage="System.Linq.Enumerable.Sum (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Decimal&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Decimal&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-2039">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2039">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-2040">Sekwencja wartości, które są używane do obliczania sumy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2040">A sequence of values that are used to calculate a sum.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="e3165-2041">Funkcja transformacji do zastosowania do każdego elementu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2041">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-2042">Oblicza sumę sekwencji nullable <see cref="T:System.Decimal" /> wartości, które są uzyskiwane za pomocą funkcji przekształcenia na każdym elemencie sekwencji wejściowych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2042">Computes the sum of the sequence of nullable <see cref="T:System.Decimal" /> values that are obtained by invoking a transform function on each element of the input sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-2043">Suma przewidywanych wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2043">The sum of the projected values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-2044">Ta metoda zwraca zero, jeśli `source` nie zawiera żadnych elementów.</span><span class="sxs-lookup"><span data-stu-id="e3165-2044">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="e3165-2045">Wynik nie uwzględnione wartości, które są `null`.</span><span class="sxs-lookup"><span data-stu-id="e3165-2045">The result does not included values that are `null`.</span></span>  
  
 <span data-ttu-id="e3165-2046">Tej metody można zastosować do je sekvence hodnot dowolnego, jeśli podasz funkcji, `selector`, które projekty członkowie `source` do typu liczbowego specjalnie `Nullable<Decimal>` w języku C# lub `Nullable(Of Decimal)` w języku Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="e3165-2046">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Decimal>` in C# or `Nullable(Of Decimal)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="e3165-2047">W składni wyrażeń zapytania języka Visual Basic `Aggregate Into Sum()` klauzuli przekłada się na wywołanie <xref:System.Linq.Enumerable.Sum%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-2047">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-2048">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> aby zsumować przewidywane wartości sekwencji.</span><span class="sxs-lookup"><span data-stu-id="e3165-2048">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> to sum the projected values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#98](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#98)]
 [!code-vb[System.Linq.Enumerable#98](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#98)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-2049">
            <paramref name="source" /> lub <paramref name="selector" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2049">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="e3165-2050">Suma jest większa niż <see cref="F:System.Decimal.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2050">The sum is larger than <see cref="F:System.Decimal.MaxValue" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="e3165-2051">Aggregate — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2051">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Sum&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;double&gt; Sum&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;double&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float64&gt; Sum&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;float64&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Double}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Double))) As Nullable(Of Double)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;double&gt; Sum(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;double&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;double&gt;&gt; -&gt; Nullable&lt;double&gt;" Usage="System.Linq.Enumerable.Sum (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Double&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Double&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-2052">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2052">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-2053">Sekwencja wartości, które są używane do obliczania sumy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2053">A sequence of values that are used to calculate a sum.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="e3165-2054">Funkcja transformacji do zastosowania do każdego elementu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2054">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-2055">Oblicza sumę sekwencji nullable <see cref="T:System.Double" /> wartości, które są uzyskiwane za pomocą funkcji przekształcenia na każdym elemencie sekwencji wejściowych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2055">Computes the sum of the sequence of nullable <see cref="T:System.Double" /> values that are obtained by invoking a transform function on each element of the input sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-2056">Suma przewidywanych wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2056">The sum of the projected values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-2057">Ta metoda zwraca zero, jeśli `source` nie zawiera żadnych elementów.</span><span class="sxs-lookup"><span data-stu-id="e3165-2057">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="e3165-2058">Wynik nie zawiera wartości, które są `null`.</span><span class="sxs-lookup"><span data-stu-id="e3165-2058">The result does not include values that are `null`.</span></span>  
  
 <span data-ttu-id="e3165-2059">Tej metody można zastosować do je sekvence hodnot dowolnego, jeśli podasz funkcji, `selector`, które projekty członkowie `source` do typu liczbowego specjalnie `Nullable<Double>` w języku C# lub `Nullable(Of Double)` w języku Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="e3165-2059">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Double>` in C# or `Nullable(Of Double)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="e3165-2060">W składni wyrażeń zapytania języka Visual Basic `Aggregate Into Sum()` klauzuli przekłada się na wywołanie <xref:System.Linq.Enumerable.Sum%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-2060">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-2061">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> aby zsumować przewidywane wartości sekwencji.</span><span class="sxs-lookup"><span data-stu-id="e3165-2061">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> to sum the projected values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#98](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#98)]
 [!code-vb[System.Linq.Enumerable#98](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#98)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-2062">
            <paramref name="source" /> lub <paramref name="selector" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2062">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="e3165-2063">Aggregate — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2063">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Sum&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;int&gt; Sum&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;int&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int32&gt; Sum&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;int32&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int32}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Integer))) As Nullable(Of Integer)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;int&gt; Sum(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;int&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;int&gt;&gt; -&gt; Nullable&lt;int&gt;" Usage="System.Linq.Enumerable.Sum (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int32&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Int32&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-2064">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2064">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-2065">Sekwencja wartości, które są używane do obliczania sumy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2065">A sequence of values that are used to calculate a sum.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="e3165-2066">Funkcja transformacji do zastosowania do każdego elementu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2066">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-2067">Oblicza sumę sekwencji nullable <see cref="T:System.Int32" /> wartości, które są uzyskiwane za pomocą funkcji przekształcenia na każdym elemencie sekwencji wejściowych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2067">Computes the sum of the sequence of nullable <see cref="T:System.Int32" /> values that are obtained by invoking a transform function on each element of the input sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-2068">Suma przewidywanych wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2068">The sum of the projected values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-2069">Ta metoda zwraca zero, jeśli `source` nie zawiera żadnych elementów.</span><span class="sxs-lookup"><span data-stu-id="e3165-2069">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="e3165-2070">Wynik nie zawiera wartości, które są `null`.</span><span class="sxs-lookup"><span data-stu-id="e3165-2070">The result does not include values that are `null`.</span></span>  
  
 <span data-ttu-id="e3165-2071">Tej metody można zastosować do je sekvence hodnot dowolnego, jeśli podasz funkcji, `selector`, które projekty członkowie `source` do typu liczbowego specjalnie `Nullable<Int32>` w języku C# lub `Nullable(Of Int32)` w języku Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="e3165-2071">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Int32>` in C# or `Nullable(Of Int32)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="e3165-2072">W składni wyrażeń zapytania języka Visual Basic `Aggregate Into Sum()` klauzuli przekłada się na wywołanie <xref:System.Linq.Enumerable.Sum%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-2072">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-2073">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> aby zsumować przewidywane wartości sekwencji.</span><span class="sxs-lookup"><span data-stu-id="e3165-2073">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> to sum the projected values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#98](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#98)]
 [!code-vb[System.Linq.Enumerable#98](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#98)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-2074">
            <paramref name="source" /> lub <paramref name="selector" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2074">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="e3165-2075">Suma jest większa niż <see cref="F:System.Int32.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2075">The sum is larger than <see cref="F:System.Int32.MaxValue" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="e3165-2076">Aggregate — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2076">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Sum&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;long&gt; Sum&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;long&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;int64&gt; Sum&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;int64&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Int64}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Long))) As Nullable(Of Long)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;long&gt; Sum(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;long&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;int64&gt;&gt; -&gt; Nullable&lt;int64&gt;" Usage="System.Linq.Enumerable.Sum (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Int64&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Int64&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-2077">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2077">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-2078">Sekwencja wartości, które są używane do obliczania sumy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2078">A sequence of values that are used to calculate a sum.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="e3165-2079">Funkcja transformacji do zastosowania do każdego elementu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2079">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-2080">Oblicza sumę sekwencji nullable <see cref="T:System.Int64" /> wartości, które są uzyskiwane za pomocą funkcji przekształcenia na każdym elemencie sekwencji wejściowych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2080">Computes the sum of the sequence of nullable <see cref="T:System.Int64" /> values that are obtained by invoking a transform function on each element of the input sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-2081">Suma przewidywanych wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2081">The sum of the projected values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-2082">Ta metoda zwraca zero, jeśli `source` nie zawiera żadnych elementów.</span><span class="sxs-lookup"><span data-stu-id="e3165-2082">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="e3165-2083">Wynik nie zawiera wartości, które są `null`.</span><span class="sxs-lookup"><span data-stu-id="e3165-2083">The result does not include values that are `null`.</span></span>  
  
 <span data-ttu-id="e3165-2084">Tej metody można zastosować do je sekvence hodnot dowolnego, jeśli podasz funkcji, `selector`, które projekty członkowie `source` do typu liczbowego specjalnie `Nullable<Int64>` w języku C# lub `Nullable(Of Int64)` w języku Visual Basic</span><span class="sxs-lookup"><span data-stu-id="e3165-2084">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Int64>` in C# or `Nullable(Of Int64)` in Visual Basic</span></span>  
  
 <span data-ttu-id="e3165-2085">W składni wyrażeń zapytania języka Visual Basic `Aggregate Into Sum()` klauzuli przekłada się na wywołanie <xref:System.Linq.Enumerable.Sum%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-2085">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-2086">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> aby zsumować przewidywane wartości sekwencji.</span><span class="sxs-lookup"><span data-stu-id="e3165-2086">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> to sum the projected values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#98](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#98)]
 [!code-vb[System.Linq.Enumerable#98](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#98)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-2087">
            <paramref name="source" /> lub <paramref name="selector" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2087">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.OverflowException">
          <span data-ttu-id="e3165-2088">Suma jest większa niż <see cref="F:System.Int64.MaxValue" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2088">The sum is larger than <see cref="F:System.Int64.MaxValue" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="e3165-2089">Aggregate — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2089">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Sum&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static Nullable&lt;float&gt; Sum&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,Nullable&lt;float&gt;&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig valuetype System.Nullable`1&lt;float32&gt; Sum&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, valuetype System.Nullable`1&lt;float32&gt;&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Nullable{System.Single}})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Nullable(Of Single))) As Nullable(Of Single)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static Nullable&lt;float&gt; Sum(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, Nullable&lt;float&gt;&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;'Source&gt; * Func&lt;'Source, Nullable&lt;single&gt;&gt; -&gt; Nullable&lt;single&gt;" Usage="System.Linq.Enumerable.Sum (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Nullable&lt;System.Single&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Nullable&lt;System.Single&gt;&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-2090">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2090">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-2091">Sekwencja wartości, które są używane do obliczania sumy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2091">A sequence of values that are used to calculate a sum.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="e3165-2092">Funkcja transformacji do zastosowania do każdego elementu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2092">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-2093">Oblicza sumę sekwencji nullable <see cref="T:System.Single" /> wartości, które są uzyskiwane za pomocą funkcji przekształcenia na każdym elemencie sekwencji wejściowych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2093">Computes the sum of the sequence of nullable <see cref="T:System.Single" /> values that are obtained by invoking a transform function on each element of the input sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-2094">Suma przewidywanych wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2094">The sum of the projected values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-2095">Ta metoda zwraca zero, jeśli `source` nie zawiera żadnych elementów.</span><span class="sxs-lookup"><span data-stu-id="e3165-2095">This method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="e3165-2096">Wynik nie zawiera wartości, które są `null`.</span><span class="sxs-lookup"><span data-stu-id="e3165-2096">The result does not include values that are `null`.</span></span>  
  
 <span data-ttu-id="e3165-2097">Tej metody można zastosować do je sekvence hodnot dowolnego, jeśli podasz funkcji, `selector`, które projekty członkowie `source` do typu liczbowego specjalnie `Nullable<Single>` w języku C# lub `Nullable(Of Single)` w języku Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="e3165-2097">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically `Nullable<Single>` in C# or `Nullable(Of Single)` in Visual Basic.</span></span>  
  
 <span data-ttu-id="e3165-2098">W składni wyrażeń zapytania języka Visual Basic `Aggregate Into Sum()` klauzuli przekłada się na wywołanie <xref:System.Linq.Enumerable.Sum%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-2098">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-2099">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> aby zsumować przewidywane wartości sekwencji.</span><span class="sxs-lookup"><span data-stu-id="e3165-2099">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> to sum the projected values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#98](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#98)]
 [!code-vb[System.Linq.Enumerable#98](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#98)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-2100">
            <paramref name="source" /> lub <paramref name="selector" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2100">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="e3165-2101">Aggregate — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2101">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Sum&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static float Sum&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,float&gt; selector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig float32 Sum&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, float32&gt; selector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Sum``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Single})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Sum(Of TSource) (source As IEnumerable(Of TSource), selector As Func(Of TSource, Single)) As Single" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static float Sum(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, float&gt; ^ selector);" />
      <MemberSignature Language="F#" Value="static member Sum : seq&lt;'Source&gt; * Func&lt;'Source, single&gt; -&gt; single" Usage="System.Linq.Enumerable.Sum (source, selector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Single</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="selector" Type="System.Func&lt;TSource,System.Single&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-2102">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2102">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-2103">Sekwencja wartości, które są używane do obliczania sumy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2103">A sequence of values that are used to calculate a sum.</span>
          </span>
        </param>
        <param name="selector">
          <span data-ttu-id="e3165-2104">Funkcja transformacji do zastosowania do każdego elementu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2104">A transform function to apply to each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-2105">Oblicza sumę sekwencji <see cref="T:System.Single" /> wartości, które są uzyskiwane za pomocą funkcji przekształcenia na każdym elemencie sekwencji wejściowych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2105">Computes the sum of the sequence of <see cref="T:System.Single" /> values that are obtained by invoking a transform function on each element of the input sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-2106">Suma przewidywanych wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2106">The sum of the projected values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-2107"><xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Single%7D%29> Metoda zwraca zero, jeśli `source` nie zawiera żadnych elementów.</span><span class="sxs-lookup"><span data-stu-id="e3165-2107">The <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Single%7D%29> method returns zero if `source` contains no elements.</span></span>  
  
 <span data-ttu-id="e3165-2108">Tej metody można zastosować do je sekvence hodnot dowolnego, jeśli podasz funkcji, `selector`, które projekty członkowie `source` do typu liczbowego specjalnie <xref:System.Single>.</span><span class="sxs-lookup"><span data-stu-id="e3165-2108">You can apply this method to a sequence of arbitrary values if you provide a function, `selector`, that projects the members of `source` into a numeric type, specifically <xref:System.Single>.</span></span>  
  
 <span data-ttu-id="e3165-2109">W składni wyrażeń zapytania języka Visual Basic `Aggregate Into Sum()` klauzuli przekłada się na wywołanie <xref:System.Linq.Enumerable.Sum%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-2109">In Visual Basic query expression syntax, an `Aggregate Into Sum()` clause translates to an invocation of <xref:System.Linq.Enumerable.Sum%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-2110">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> aby zsumować przewidywane wartości sekwencji.</span><span class="sxs-lookup"><span data-stu-id="e3165-2110">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Sum%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Double%7D%29> to sum the projected values of a sequence.</span></span>  
  
 [!INCLUDE[sqo_diff_overload_example_func](~/includes/sqo-diff-overload-example-func-md.md)]  
  
 [!code-csharp[System.Linq.Enumerable#98](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#98)]
 [!code-vb[System.Linq.Enumerable#98](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#98)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-2111">
            <paramref name="source" /> lub <paramref name="selector" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2111">
              <paramref name="source" /> or <paramref name="selector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/1315a814-5db6-4077-b34b-b141e11cc0eb">
          <span data-ttu-id="e3165-2112">Aggregate — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2112">Aggregate Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Take&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Take&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Take&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Take``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Take(Of TSource) (source As IEnumerable(Of TSource), count As Integer) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ Take(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, int count);" />
      <MemberSignature Language="F#" Value="static member Take : seq&lt;'Source&gt; * int -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.Take (source, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-2113">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2113">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-2114">Sekwencja do zwrócenia elementy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2114">The sequence to return elements from.</span>
          </span>
        </param>
        <param name="count">
          <span data-ttu-id="e3165-2115">Liczba elementów do zwrócenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2115">The number of elements to return.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-2116">Zwraca określoną liczbę elementów sąsiadujących z początku sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2116">Returns a specified number of contiguous elements from the start of a sequence.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-2117">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Zawierający określoną liczbę elementów od początku sekwencji wejściowych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2117">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the specified number of elements from the start of the input sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-2118">Ta metoda jest implementowana za pomocą odroczonego wykonania.</span><span class="sxs-lookup"><span data-stu-id="e3165-2118">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="e3165-2119">Bezpośrednio zwracana wartość jest obiektem, który przechowuje wszystkie informacje wymagane do wykonania akcji.</span><span class="sxs-lookup"><span data-stu-id="e3165-2119">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="e3165-2120">Zapytanie, reprezentowane przez tę metodę nie jest wykonywana do czasu, przez wywołanie obiekt jest zostanie wyliczonly jego `GetEnumerator` metoda bezpośrednio lub za pomocą `foreach` w języku Visual C# lub `For Each` w języku Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="e3165-2120">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="e3165-2121"><xref:System.Linq.Enumerable.Take%2A> Wylicza `source` i daje elementów do momentu `count` elementy mają zostać uzyskane lub `source` nie zawiera więcej elementów.</span><span class="sxs-lookup"><span data-stu-id="e3165-2121"><xref:System.Linq.Enumerable.Take%2A> enumerates `source` and yields elements until `count` elements have been yielded or `source` contains no more elements.</span></span> <span data-ttu-id="e3165-2122">Jeśli `count` przekracza liczbę elementów w `source`, wszystkie elementy `source` są zwracane.</span><span class="sxs-lookup"><span data-stu-id="e3165-2122">If `count` exceeds the number of elements in `source`, all elements of `source` are returned.</span></span>  
  
 <span data-ttu-id="e3165-2123">Jeśli `count` jest mniejsza niż zero, `source` nie jest wyliczany i pusty <xref:System.Collections.Generic.IEnumerable%601> jest zwracana.</span><span class="sxs-lookup"><span data-stu-id="e3165-2123">If `count` is less than or equal to zero, `source` is not enumerated and an empty <xref:System.Collections.Generic.IEnumerable%601> is returned.</span></span>  
  
 <span data-ttu-id="e3165-2124"><xref:System.Linq.Enumerable.Take%2A> i <xref:System.Linq.Enumerable.Skip%2A> metody są funkcjonalności.</span><span class="sxs-lookup"><span data-stu-id="e3165-2124">The <xref:System.Linq.Enumerable.Take%2A> and <xref:System.Linq.Enumerable.Skip%2A> methods are functional complements.</span></span> <span data-ttu-id="e3165-2125">Mając podaną sekwencję `coll` oraz integer `n`, złączenie wyników `coll.Take(n)` i `coll.Skip(n)` daje tę samą sekwencję co `coll`.</span><span class="sxs-lookup"><span data-stu-id="e3165-2125">Given a sequence `coll` and an integer `n`, concatenating the results of `coll.Take(n)` and `coll.Skip(n)` yields the same sequence as `coll`.</span></span>  
  
 <span data-ttu-id="e3165-2126">W składni wyrażeń zapytania języka Visual Basic `Take` klauzuli przekłada się na wywołanie <xref:System.Linq.Enumerable.Take%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-2126">In Visual Basic query expression syntax, a `Take` clause translates to an invocation of <xref:System.Linq.Enumerable.Take%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-2127">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Take%2A> do zwrócenia elementy od początku sekwencji.</span><span class="sxs-lookup"><span data-stu-id="e3165-2127">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Take%2A> to return elements from the start of a sequence.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#99](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#99)]
 [!code-vb[System.Linq.Enumerable#99](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#99)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-2128">
            <paramref name="source" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2128">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/77bf87b2-1476-4456-957f-fee922fbad8c">
          <span data-ttu-id="e3165-2129">Take — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2129">Take Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="TakeLast&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; TakeLast&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, int count);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; TakeLast&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, int32 count) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.TakeLast``1(System.Collections.Generic.IEnumerable{``0},System.Int32)" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TakeLast(Of TSource) (source As IEnumerable(Of TSource), count As Integer) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ TakeLast(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, int count);" />
      <MemberSignature Language="F#" Value="static member TakeLast : seq&lt;'Source&gt; * int -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.TakeLast (source, count)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="count" Type="System.Int32" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">To be added.</typeparam>
        <param name="source">To be added.</param>
        <param name="count">To be added.</param>
        <summary>To be added.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <MemberGroup MemberName="TakeWhile&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e3165-2130">Zwraca elementy z sekwencji, tak długo, jak długo określony warunek ma wartość true, a następnie pomija pozostałe elementy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2130">Returns elements from a sequence as long as a specified condition is true, and then skips the remaining elements.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="TakeWhile&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; TakeWhile&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; TakeWhile&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TakeWhile(Of TSource) (source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ TakeWhile(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member TakeWhile : seq&lt;'Source&gt; * Func&lt;'Source, bool&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.TakeWhile (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-2131">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2131">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-2132">Sekwencja do zwrócenia elementy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2132">A sequence to return elements from.</span>
          </span>
        </param>
        <param name="predicate">
          <span data-ttu-id="e3165-2133">Funkcja testowania każdego elementu na stanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2133">A function to test each element for a condition.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-2134">Zwraca elementy z sekwencji, tak długo, jak długo określony warunek ma wartość true.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2134">Returns elements from a sequence as long as a specified condition is true.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-2135">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Zawierający elementy z sekwencji wejściowych, występujących przed elementem, w którym test nie zakończy się pomyślnie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2135">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements from the input sequence that occur before the element at which the test no longer passes.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-2136">Ta metoda jest implementowana za pomocą odroczonego wykonania.</span><span class="sxs-lookup"><span data-stu-id="e3165-2136">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="e3165-2137">Bezpośrednio zwracana wartość jest obiektem, który przechowuje wszystkie informacje wymagane do wykonania akcji.</span><span class="sxs-lookup"><span data-stu-id="e3165-2137">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="e3165-2138">Zapytanie, reprezentowane przez tę metodę nie jest wykonywana do czasu, przez wywołanie obiekt jest zostanie wyliczonly jego `GetEnumerator` metoda bezpośrednio lub za pomocą `foreach` w języku Visual C# lub `For Each` w języku Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="e3165-2138">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="e3165-2139"><xref:System.Linq.Enumerable.TakeWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> Metoda sprawdza każdy element obiektu `source` przy użyciu `predicate` i zwraca element, jeśli wynik jest `true`.</span><span class="sxs-lookup"><span data-stu-id="e3165-2139">The <xref:System.Linq.Enumerable.TakeWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> method tests each element of `source` by using `predicate` and yields the element if the result is `true`.</span></span> <span data-ttu-id="e3165-2140">Wyliczenia zatrzymuje, gdy funkcja predykatu zwraca `false` elementu lub `source` nie zawiera więcej elementów.</span><span class="sxs-lookup"><span data-stu-id="e3165-2140">Enumeration stops when the predicate function returns `false` for an element or when `source` contains no more elements.</span></span>  
  
 <span data-ttu-id="e3165-2141"><xref:System.Linq.Enumerable.TakeWhile%2A> i <xref:System.Linq.Enumerable.SkipWhile%2A> metody są funkcjonalności.</span><span class="sxs-lookup"><span data-stu-id="e3165-2141">The <xref:System.Linq.Enumerable.TakeWhile%2A> and <xref:System.Linq.Enumerable.SkipWhile%2A> methods are functional complements.</span></span> <span data-ttu-id="e3165-2142">Mając podaną sekwencję `coll` i czystą funkcję `p`, złączenie wyników `coll.TakeWhile(p)` i `coll.SkipWhile(p)` daje tę samą sekwencję co `coll`.</span><span class="sxs-lookup"><span data-stu-id="e3165-2142">Given a sequence `coll` and a pure function `p`, concatenating the results of `coll.TakeWhile(p)` and `coll.SkipWhile(p)` yields the same sequence as `coll`.</span></span>  
  
 <span data-ttu-id="e3165-2143">W składni wyrażeń zapytania języka Visual Basic `Take While` klauzuli przekłada się na wywołanie <xref:System.Linq.Enumerable.TakeWhile%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-2143">In Visual Basic query expression syntax, a `Take While` clause translates to an invocation of <xref:System.Linq.Enumerable.TakeWhile%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-2144">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.TakeWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> do zwrócenia elementy od początku sekwencji, tak długo, jak warunek jest spełniony.</span><span class="sxs-lookup"><span data-stu-id="e3165-2144">The following code example demonstrates how to use <xref:System.Linq.Enumerable.TakeWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> to return elements from the start of a sequence as long as a condition is true.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#100](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#100)]
 [!code-vb[System.Linq.Enumerable#100](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#100)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-2145">
            <paramref name="source" /> lub <paramref name="predicate" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2145">
              <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/db8f9f2f-fc9f-4a6c-b0b8-1bf048147e11">
          <span data-ttu-id="e3165-2146">Take While — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2146">Take While Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="TakeWhile&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; TakeWhile&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,int,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; TakeWhile&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`3&lt;!!TSource, int32, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.TakeWhile``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function TakeWhile(Of TSource) (source As IEnumerable(Of TSource), predicate As Func(Of TSource, Integer, Boolean)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ TakeWhile(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, int, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member TakeWhile : seq&lt;'Source&gt; * Func&lt;'Source, int, bool&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.TakeWhile (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Int32,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-2147">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2147">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-2148">Sekwencja do zwrócenia elementy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2148">The sequence to return elements from.</span>
          </span>
        </param>
        <param name="predicate">
          <span data-ttu-id="e3165-2149">Funkcja testowania każdego elementu źródłowego dla warunku; drugi parametr funkcji reprezentuje indeks elementu źródłowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2149">A function to test each source element for a condition; the second parameter of the function represents the index of the source element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-2150">Zwraca elementy z sekwencji, tak długo, jak długo określony warunek ma wartość true.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2150">Returns elements from a sequence as long as a specified condition is true.</span>
          </span>
          <span data-ttu-id="e3165-2151">Indeks elementu jest używany w logice funkcji predykatu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2151">The element's index is used in the logic of the predicate function.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-2152">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Zawierający elementy z sekwencji wejściowych, występujących przed elementem, w którym test nie zakończy się pomyślnie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2152">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains elements from the input sequence that occur before the element at which the test no longer passes.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-2153">Ta metoda jest implementowana za pomocą odroczonego wykonania.</span><span class="sxs-lookup"><span data-stu-id="e3165-2153">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="e3165-2154">Bezpośrednio zwracana wartość jest obiektem, który przechowuje wszystkie informacje wymagane do wykonania akcji.</span><span class="sxs-lookup"><span data-stu-id="e3165-2154">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="e3165-2155">Zapytanie, reprezentowane przez tę metodę nie jest wykonywana do czasu, przez wywołanie obiekt jest zostanie wyliczonly jego `GetEnumerator` metoda bezpośrednio lub za pomocą `foreach` w języku Visual C# lub `For Each` w języku Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="e3165-2155">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="e3165-2156"><xref:System.Linq.Enumerable.TakeWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29> Metoda sprawdza każdy element obiektu `source` przy użyciu `predicate` i zwraca element, jeśli wynik jest `true`.</span><span class="sxs-lookup"><span data-stu-id="e3165-2156">The <xref:System.Linq.Enumerable.TakeWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29> method tests each element of `source` by using `predicate` and yields the element if the result is `true`.</span></span> <span data-ttu-id="e3165-2157">Wyliczenia zatrzymuje, gdy funkcja predykatu zwraca `false` elementu lub `source` nie zawiera więcej elementów.</span><span class="sxs-lookup"><span data-stu-id="e3165-2157">Enumeration stops when the predicate function returns `false` for an element or when `source` contains no more elements.</span></span>  
  
 <span data-ttu-id="e3165-2158">Pierwszy argument `predicate` reprezentuje element do przetestowania.</span><span class="sxs-lookup"><span data-stu-id="e3165-2158">The first argument of `predicate` represents the element to test.</span></span> <span data-ttu-id="e3165-2159">Drugi argument reprezentuje liczony od zera indeks elementu w obrębie `source`.</span><span class="sxs-lookup"><span data-stu-id="e3165-2159">The second argument represents the zero-based index of the element within `source`.</span></span>  
  
 <span data-ttu-id="e3165-2160"><xref:System.Linq.Enumerable.TakeWhile%2A> i <xref:System.Linq.Enumerable.SkipWhile%2A> metody są funkcjonalności.</span><span class="sxs-lookup"><span data-stu-id="e3165-2160">The <xref:System.Linq.Enumerable.TakeWhile%2A> and <xref:System.Linq.Enumerable.SkipWhile%2A> methods are functional complements.</span></span> <span data-ttu-id="e3165-2161">Mając podaną sekwencję `coll` i czystą funkcję `p`, złączenie wyników `coll.TakeWhile(p)` i `coll.SkipWhile(p)` daje tę samą sekwencję co `coll`.</span><span class="sxs-lookup"><span data-stu-id="e3165-2161">Given a sequence `coll` and a pure function `p`, concatenating the results of `coll.TakeWhile(p)` and `coll.SkipWhile(p)` yields the same sequence as `coll`.</span></span>  
  
 <span data-ttu-id="e3165-2162">W składni wyrażeń zapytania języka Visual Basic `Take While` klauzuli przekłada się na wywołanie <xref:System.Linq.Enumerable.TakeWhile%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-2162">In Visual Basic query expression syntax, a `Take While` clause translates to an invocation of <xref:System.Linq.Enumerable.TakeWhile%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-2163">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.TakeWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29> do zwrócenia elementy od początku sekwencji, dopóki spełniony jest warunek, który używa indeks elementu.</span><span class="sxs-lookup"><span data-stu-id="e3165-2163">The following code example demonstrates how to use <xref:System.Linq.Enumerable.TakeWhile%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29> to return elements from the start of a sequence as long as a condition that uses the element's index is true.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#101](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#101)]
 [!code-vb[System.Linq.Enumerable#101](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#101)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-2164">
            <paramref name="source" /> lub <paramref name="predicate" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2164">
              <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/db8f9f2f-fc9f-4a6c-b0b8-1bf048147e11">
          <span data-ttu-id="e3165-2165">Take While — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2165">Take While Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <MemberGroup MemberName="ThenBy&lt;TSource,TKey&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e3165-2166">Wykonuje kolejne kolejność elementów w sekwencji w kolejności rosnącej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2166">Performs a subsequent ordering of the elements in a sequence in ascending order.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ThenBy&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IOrderedEnumerable&lt;TSource&gt; ThenBy&lt;TSource,TKey&gt; (this System.Linq.IOrderedEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IOrderedEnumerable`1&lt;!!TSource&gt; ThenBy&lt;TSource, TKey&gt;(class System.Linq.IOrderedEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ThenBy(Of TSource, TKey) (source As IOrderedEnumerable(Of TSource), keySelector As Func(Of TSource, TKey)) As IOrderedEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IOrderedEnumerable&lt;TSource&gt; ^ ThenBy(System::Linq::IOrderedEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector);" />
      <MemberSignature Language="F#" Value="static member ThenBy : System.Linq.IOrderedEnumerable&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; -&gt; System.Linq.IOrderedEnumerable&lt;'Source&gt;" Usage="System.Linq.Enumerable.ThenBy (source, keySelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IOrderedEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IOrderedEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-2167">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2167">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <typeparam name="TKey">
          <span data-ttu-id="e3165-2168">Rodzaj klucza zwracany przez <c>keySelector</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2168">The type of the key returned by <c>keySelector</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-2169">
            <see cref="T:System.Linq.IOrderedEnumerable`1" /> Zawiera elementy do sortowania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2169">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> that contains elements to sort.</span>
          </span>
        </param>
        <param name="keySelector">
          <span data-ttu-id="e3165-2170">Funkcja wyodrębniania klucza z każdego elementu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2170">A function to extract a key from each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-2171">Wykonuje kolejne kolejność elementów w sekwencji rosnąco, zgodnie z kluczem.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2171">Performs a subsequent ordering of the elements in a sequence in ascending order according to a key.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-2172">
            <see cref="T:System.Linq.IOrderedEnumerable`1" /> Której elementy są sortowane według klucza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2172">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> whose elements are sorted according to a key.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-2173">Ta metoda jest implementowana za pomocą odroczonego wykonania.</span><span class="sxs-lookup"><span data-stu-id="e3165-2173">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="e3165-2174">Bezpośrednio zwracana wartość jest obiektem, który przechowuje wszystkie informacje wymagane do wykonania akcji.</span><span class="sxs-lookup"><span data-stu-id="e3165-2174">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="e3165-2175">Zapytanie, reprezentowane przez tę metodę nie jest wykonywana do czasu, przez wywołanie obiekt jest zostanie wyliczonly jego `GetEnumerator` metoda bezpośrednio lub za pomocą `foreach` w języku Visual C# lub `For Each` w języku Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="e3165-2175">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="e3165-2176">Sekwencję w kolejności według wartości samych elementów, należy określić funkcję tożsamości (`x => x` w języku Visual C# lub `Function(x) x` w języku Visual Basic) dla `keySelector`.</span><span class="sxs-lookup"><span data-stu-id="e3165-2176">To order a sequence by the values of the elements themselves, specify the identity function (`x => x` in Visual C# or `Function(x) x` in Visual Basic) for `keySelector`.</span></span>  
  
 <span data-ttu-id="e3165-2177"><xref:System.Linq.Enumerable.ThenBy%2A> i <xref:System.Linq.Enumerable.ThenByDescending%2A> są zdefiniowane w celu rozszerzenia typu <xref:System.Linq.IOrderedEnumerable%601>, który jest także typem zwracanym tych metod.</span><span class="sxs-lookup"><span data-stu-id="e3165-2177"><xref:System.Linq.Enumerable.ThenBy%2A> and <xref:System.Linq.Enumerable.ThenByDescending%2A> are defined to extend the type <xref:System.Linq.IOrderedEnumerable%601>, which is also the return type of these methods.</span></span> <span data-ttu-id="e3165-2178">Ten projekt umożliwia określenie wielu kryteriów sortowania, stosując dowolną liczbę <xref:System.Linq.Enumerable.ThenBy%2A> lub <xref:System.Linq.Enumerable.ThenByDescending%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="e3165-2178">This design enables you to specify multiple sort criteria by applying any number of <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A> methods.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e3165-2179">Ponieważ <xref:System.Linq.IOrderedEnumerable%601> dziedziczy <xref:System.Collections.Generic.IEnumerable%601>, można wywołać <xref:System.Linq.Enumerable.OrderBy%2A> lub <xref:System.Linq.Enumerable.OrderByDescending%2A> na wynikach wywołania <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> lub <xref:System.Linq.Enumerable.ThenByDescending%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-2179">Because <xref:System.Linq.IOrderedEnumerable%601> inherits from <xref:System.Collections.Generic.IEnumerable%601>, you can call <xref:System.Linq.Enumerable.OrderBy%2A> or <xref:System.Linq.Enumerable.OrderByDescending%2A> on the results of a call to <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A>.</span></span> <span data-ttu-id="e3165-2180">Ten sposób wprowadza nowe podstawowe ustawianie kolejności, które ignoruje ustanowiony wcześniej sposób ustawiania.</span><span class="sxs-lookup"><span data-stu-id="e3165-2180">Doing this introduces a new primary ordering that ignores the previously established ordering.</span></span>  
  
 <span data-ttu-id="e3165-2181">Ta metoda porównuje klucze przy użyciu domyślny moduł porównujący <xref:System.Collections.Generic.Comparer%601.Default%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-2181">This method compares keys by using the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A>.</span></span>  
  
 <span data-ttu-id="e3165-2182">Ta metoda wykonuje stabilne sortowanie; oznacza to, że jeśli klawisze dwóch elementów są równe, kolejność elementów jest zachowywana.</span><span class="sxs-lookup"><span data-stu-id="e3165-2182">This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved.</span></span> <span data-ttu-id="e3165-2183">Z drugiej strony, niestabilne sortowanie nie pozwala zachować kolejności elementów, które mają ten sam klucz.</span><span class="sxs-lookup"><span data-stu-id="e3165-2183">In contrast, an unstable sort does not preserve the order of elements that have the same key.</span></span>  
  
 <span data-ttu-id="e3165-2184">W składni wyrażeń zapytania `orderby [first criterion], [second criterion]` (Visual C#) lub `Order By [first criterion], [second criterion]` — klauzula (Visual Basic) przekłada się na wywołanie <xref:System.Linq.Enumerable.ThenBy%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-2184">In query expression syntax, an `orderby [first criterion], [second criterion]` (Visual C#) or `Order By [first criterion], [second criterion]` (Visual Basic) clause translates to an invocation of <xref:System.Linq.Enumerable.ThenBy%2A>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-2185">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.ThenBy%60%602%28System.Linq.IOrderedEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29> przeprowadzenie dodatkowej kolejność elementów w sekwencji.</span><span class="sxs-lookup"><span data-stu-id="e3165-2185">The following code example demonstrates how to use <xref:System.Linq.Enumerable.ThenBy%60%602%28System.Linq.IOrderedEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29> to perform a secondary ordering of the elements in a sequence.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#102](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#102)]
 [!code-vb[System.Linq.Enumerable#102](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#102)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-2186">
            <paramref name="source" /> lub <paramref name="keySelector" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2186">
              <paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/21f87f48-d69d-4e95-9a52-6fec47b37e1f">
          <span data-ttu-id="e3165-2187">Klauzula orderby (odwołanie w C#)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2187">orderby clause (C# Reference)</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/fa911282-6b81-44c7-acfa-46b5bb93df75">
          <span data-ttu-id="e3165-2188">Order By — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2188">Order By Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ThenBy&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IOrderedEnumerable&lt;TSource&gt; ThenBy&lt;TSource,TKey&gt; (this System.Linq.IOrderedEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, System.Collections.Generic.IComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IOrderedEnumerable`1&lt;!!TSource&gt; ThenBy&lt;TSource, TKey&gt;(class System.Linq.IOrderedEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Collections.Generic.IComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ThenBy``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ThenBy(Of TSource, TKey) (source As IOrderedEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), comparer As IComparer(Of TKey)) As IOrderedEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IOrderedEnumerable&lt;TSource&gt; ^ ThenBy(System::Linq::IOrderedEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, System::Collections::Generic::IComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member ThenBy : System.Linq.IOrderedEnumerable&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * System.Collections.Generic.IComparer&lt;'Key&gt; -&gt; System.Linq.IOrderedEnumerable&lt;'Source&gt;" Usage="System.Linq.Enumerable.ThenBy (source, keySelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IOrderedEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IOrderedEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-2189">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2189">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <typeparam name="TKey">
          <span data-ttu-id="e3165-2190">Rodzaj klucza zwracany przez <c>keySelector</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2190">The type of the key returned by <c>keySelector</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-2191">
            <see cref="T:System.Linq.IOrderedEnumerable`1" /> Zawiera elementy do sortowania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2191">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> that contains elements to sort.</span>
          </span>
        </param>
        <param name="keySelector">
          <span data-ttu-id="e3165-2192">Funkcja wyodrębniania klucza z każdego elementu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2192">A function to extract a key from each element.</span>
          </span>
        </param>
        <param name="comparer">
          <span data-ttu-id="e3165-2193">
            <see cref="T:System.Collections.Generic.IComparer`1" /> Do porównywania kluczy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2193">An <see cref="T:System.Collections.Generic.IComparer`1" /> to compare keys.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-2194">Wykonuje kolejne kolejność elementów w sekwencji w kolejności rosnącej przy użyciu określona funkcja porównująca.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2194">Performs a subsequent ordering of the elements in a sequence in ascending order by using a specified comparer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-2195">
            <see cref="T:System.Linq.IOrderedEnumerable`1" /> Której elementy są sortowane według klucza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2195">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> whose elements are sorted according to a key.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-2196">Ta metoda jest implementowana za pomocą odroczonego wykonania.</span><span class="sxs-lookup"><span data-stu-id="e3165-2196">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="e3165-2197">Bezpośrednio zwracana wartość jest obiektem, który przechowuje wszystkie informacje wymagane do wykonania akcji.</span><span class="sxs-lookup"><span data-stu-id="e3165-2197">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="e3165-2198">Zapytanie, reprezentowane przez tę metodę nie jest wykonywana do czasu, przez wywołanie obiekt jest zostanie wyliczonly jego `GetEnumerator` metoda bezpośrednio lub za pomocą `foreach` w języku Visual C# lub `For Each` w języku Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="e3165-2198">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="e3165-2199">Sekwencję w kolejności według wartości samych elementów, należy określić funkcję tożsamości (`x => x` w języku Visual C# lub `Function(x) x` w języku Visual Basic) dla `keySelector`.</span><span class="sxs-lookup"><span data-stu-id="e3165-2199">To order a sequence by the values of the elements themselves, specify the identity function (`x => x` in Visual C# or `Function(x) x` in Visual Basic) for `keySelector`.</span></span>  
  
 <span data-ttu-id="e3165-2200"><xref:System.Linq.Enumerable.ThenBy%2A> i <xref:System.Linq.Enumerable.ThenByDescending%2A> są zdefiniowane w celu rozszerzenia typu <xref:System.Linq.IOrderedEnumerable%601>, który jest także typem zwracanym tych metod.</span><span class="sxs-lookup"><span data-stu-id="e3165-2200"><xref:System.Linq.Enumerable.ThenBy%2A> and <xref:System.Linq.Enumerable.ThenByDescending%2A> are defined to extend the type <xref:System.Linq.IOrderedEnumerable%601>, which is also the return type of these methods.</span></span> <span data-ttu-id="e3165-2201">Ten projekt umożliwia określenie wielu kryteriów sortowania, stosując dowolną liczbę <xref:System.Linq.Enumerable.ThenBy%2A> lub <xref:System.Linq.Enumerable.ThenByDescending%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="e3165-2201">This design enables you to specify multiple sort criteria by applying any number of <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A> methods.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e3165-2202">Ponieważ <xref:System.Linq.IOrderedEnumerable%601> dziedziczy <xref:System.Collections.Generic.IEnumerable%601>, można wywołać <xref:System.Linq.Enumerable.OrderBy%2A> lub <xref:System.Linq.Enumerable.OrderByDescending%2A> na wynikach wywołania <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> lub <xref:System.Linq.Enumerable.ThenByDescending%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-2202">Because <xref:System.Linq.IOrderedEnumerable%601> inherits from <xref:System.Collections.Generic.IEnumerable%601>, you can call <xref:System.Linq.Enumerable.OrderBy%2A> or <xref:System.Linq.Enumerable.OrderByDescending%2A> on the results of a call to <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A>.</span></span> <span data-ttu-id="e3165-2203">Ten sposób wprowadza nowe podstawowe ustawianie kolejności, które ignoruje ustanowiony wcześniej sposób ustawiania.</span><span class="sxs-lookup"><span data-stu-id="e3165-2203">Doing this introduces a new primary ordering that ignores the previously established ordering.</span></span>  
  
 <span data-ttu-id="e3165-2204">Jeśli `comparer` jest `null`, domyślny moduł porównujący <xref:System.Collections.Generic.Comparer%601.Default%2A> służy do porównywania kluczy.</span><span class="sxs-lookup"><span data-stu-id="e3165-2204">If `comparer` is `null`, the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A> is used to compare keys.</span></span>  
  
 <span data-ttu-id="e3165-2205">Ta metoda wykonuje stabilne sortowanie; oznacza to, że jeśli klawisze dwóch elementów są równe, kolejność elementów jest zachowywana.</span><span class="sxs-lookup"><span data-stu-id="e3165-2205">This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved.</span></span> <span data-ttu-id="e3165-2206">Z drugiej strony, niestabilne sortowanie nie pozwala zachować kolejności elementów, które mają ten sam klucz.</span><span class="sxs-lookup"><span data-stu-id="e3165-2206">In contrast, an unstable sort does not preserve the order of elements that have the same key.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-2207">
            <paramref name="source" /> lub <paramref name="keySelector" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2207">
              <paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ThenByDescending&lt;TSource,TKey&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e3165-2208">Wykonuje kolejne kolejność elementów w sekwencji w kolejności malejącej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2208">Performs a subsequent ordering of the elements in a sequence in descending order.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ThenByDescending&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IOrderedEnumerable&lt;TSource&gt; ThenByDescending&lt;TSource,TKey&gt; (this System.Linq.IOrderedEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IOrderedEnumerable`1&lt;!!TSource&gt; ThenByDescending&lt;TSource, TKey&gt;(class System.Linq.IOrderedEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ThenByDescending(Of TSource, TKey) (source As IOrderedEnumerable(Of TSource), keySelector As Func(Of TSource, TKey)) As IOrderedEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IOrderedEnumerable&lt;TSource&gt; ^ ThenByDescending(System::Linq::IOrderedEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector);" />
      <MemberSignature Language="F#" Value="static member ThenByDescending : System.Linq.IOrderedEnumerable&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; -&gt; System.Linq.IOrderedEnumerable&lt;'Source&gt;" Usage="System.Linq.Enumerable.ThenByDescending (source, keySelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IOrderedEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IOrderedEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-2209">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2209">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <typeparam name="TKey">
          <span data-ttu-id="e3165-2210">Rodzaj klucza zwracany przez <c>keySelector</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2210">The type of the key returned by <c>keySelector</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-2211">
            <see cref="T:System.Linq.IOrderedEnumerable`1" /> Zawiera elementy do sortowania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2211">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> that contains elements to sort.</span>
          </span>
        </param>
        <param name="keySelector">
          <span data-ttu-id="e3165-2212">Funkcja wyodrębniania klucza z każdego elementu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2212">A function to extract a key from each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-2213">Wykonuje kolejne kolejność elementów w sekwencji w porządku malejącym zgodnie z kluczem.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2213">Performs a subsequent ordering of the elements in a sequence in descending order, according to a key.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-2214">
            <see cref="T:System.Linq.IOrderedEnumerable`1" /> Której elementy są sortowane w porządku malejącym zgodnie z kluczem.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2214">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> whose elements are sorted in descending order according to a key.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-2215">Ta metoda jest implementowana za pomocą odroczonego wykonania.</span><span class="sxs-lookup"><span data-stu-id="e3165-2215">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="e3165-2216">Bezpośrednio zwracana wartość jest obiektem, który przechowuje wszystkie informacje wymagane do wykonania akcji.</span><span class="sxs-lookup"><span data-stu-id="e3165-2216">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="e3165-2217">Zapytanie, reprezentowane przez tę metodę nie jest wykonywana do czasu, przez wywołanie obiekt jest zostanie wyliczonly jego `GetEnumerator` metoda bezpośrednio lub za pomocą `foreach` w języku Visual C# lub `For Each` w języku Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="e3165-2217">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="e3165-2218">Sekwencję w kolejności według wartości samych elementów, należy określić funkcję tożsamości (`x => x` w języku Visual C# lub `Function(x) x` w języku Visual Basic) dla `keySelector`.</span><span class="sxs-lookup"><span data-stu-id="e3165-2218">To order a sequence by the values of the elements themselves, specify the identity function (`x => x` in Visual C# or `Function(x) x` in Visual Basic) for `keySelector`.</span></span>  
  
 <span data-ttu-id="e3165-2219"><xref:System.Linq.Enumerable.ThenBy%2A> i <xref:System.Linq.Enumerable.ThenByDescending%2A> są zdefiniowane w celu rozszerzenia typu <xref:System.Linq.IOrderedEnumerable%601>, który jest także typem zwracanym tych metod.</span><span class="sxs-lookup"><span data-stu-id="e3165-2219"><xref:System.Linq.Enumerable.ThenBy%2A> and <xref:System.Linq.Enumerable.ThenByDescending%2A> are defined to extend the type <xref:System.Linq.IOrderedEnumerable%601>, which is also the return type of these methods.</span></span> <span data-ttu-id="e3165-2220">Ten projekt umożliwia określenie wielu kryteriów sortowania, stosując dowolną liczbę <xref:System.Linq.Enumerable.ThenBy%2A> lub <xref:System.Linq.Enumerable.ThenByDescending%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="e3165-2220">This design enables you to specify multiple sort criteria by applying any number of <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A> methods.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e3165-2221">Ponieważ <xref:System.Linq.IOrderedEnumerable%601> dziedziczy <xref:System.Collections.Generic.IEnumerable%601>, można wywołać <xref:System.Linq.Enumerable.OrderBy%2A> lub <xref:System.Linq.Enumerable.OrderByDescending%2A> na wynikach wywołania <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> lub <xref:System.Linq.Enumerable.ThenByDescending%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-2221">Because <xref:System.Linq.IOrderedEnumerable%601> inherits from <xref:System.Collections.Generic.IEnumerable%601>, you can call <xref:System.Linq.Enumerable.OrderBy%2A> or <xref:System.Linq.Enumerable.OrderByDescending%2A> on the results of a call to <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A>.</span></span> <span data-ttu-id="e3165-2222">Ten sposób wprowadza nowe podstawowe ustawianie kolejności, które ignoruje ustanowiony wcześniej sposób ustawiania.</span><span class="sxs-lookup"><span data-stu-id="e3165-2222">Doing this introduces a new primary ordering that ignores the previously established ordering.</span></span>  
  
 <span data-ttu-id="e3165-2223">Ta metoda sortowania porównuje klucze przy użyciu domyślny moduł porównujący <xref:System.Collections.Generic.Comparer%601.Default%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-2223">This sorting method compares keys by using the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A>.</span></span>  
  
 <span data-ttu-id="e3165-2224">Ta metoda wykonuje stabilne sortowanie; oznacza to, że jeśli klawisze dwóch elementów są równe, kolejność elementów jest zachowywana.</span><span class="sxs-lookup"><span data-stu-id="e3165-2224">This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved.</span></span> <span data-ttu-id="e3165-2225">Z drugiej strony, niestabilne sortowanie nie pozwala zachować kolejności elementów, które mają ten sam klucz.</span><span class="sxs-lookup"><span data-stu-id="e3165-2225">In contrast, an unstable sort does not preserve the order of elements that have the same key.</span></span>  
  
 <span data-ttu-id="e3165-2226">W środowisku Visual C# składni wyrażeń zapytania `orderby [first criterion], [second criterion] descending` klauzuli przekłada się na wywołanie <xref:System.Linq.Enumerable.ThenByDescending%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-2226">In Visual C# query expression syntax, an `orderby [first criterion], [second criterion] descending` clause translates to an invocation of <xref:System.Linq.Enumerable.ThenByDescending%2A>.</span></span>  
  
 <span data-ttu-id="e3165-2227">W składni wyrażeń zapytania języka Visual Basic `Order By [first criterion], [second criterion] Descending` klauzuli przekłada się na wywołanie <xref:System.Linq.Enumerable.ThenByDescending%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-2227">In Visual Basic query expression syntax, an `Order By [first criterion], [second criterion] Descending` clause translates to an invocation of <xref:System.Linq.Enumerable.ThenByDescending%2A>.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-2228">
            <paramref name="source" /> lub <paramref name="keySelector" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2228">
              <paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/21f87f48-d69d-4e95-9a52-6fec47b37e1f">
          <span data-ttu-id="e3165-2229">Klauzula orderby (odwołanie w C#)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2229">orderby clause (C# Reference)</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/fa911282-6b81-44c7-acfa-46b5bb93df75">
          <span data-ttu-id="e3165-2230">Order By — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2230">Order By Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="ThenByDescending&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.IOrderedEnumerable&lt;TSource&gt; ThenByDescending&lt;TSource,TKey&gt; (this System.Linq.IOrderedEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, System.Collections.Generic.IComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.IOrderedEnumerable`1&lt;!!TSource&gt; ThenByDescending&lt;TSource, TKey&gt;(class System.Linq.IOrderedEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Collections.Generic.IComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ThenByDescending``2(System.Linq.IOrderedEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ThenByDescending(Of TSource, TKey) (source As IOrderedEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), comparer As IComparer(Of TKey)) As IOrderedEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::IOrderedEnumerable&lt;TSource&gt; ^ ThenByDescending(System::Linq::IOrderedEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, System::Collections::Generic::IComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member ThenByDescending : System.Linq.IOrderedEnumerable&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * System.Collections.Generic.IComparer&lt;'Key&gt; -&gt; System.Linq.IOrderedEnumerable&lt;'Source&gt;" Usage="System.Linq.Enumerable.ThenByDescending (source, keySelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.IOrderedEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Linq.IOrderedEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-2231">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2231">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <typeparam name="TKey">
          <span data-ttu-id="e3165-2232">Rodzaj klucza zwracany przez <c>keySelector</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2232">The type of the key returned by <c>keySelector</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-2233">
            <see cref="T:System.Linq.IOrderedEnumerable`1" /> Zawiera elementy do sortowania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2233">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> that contains elements to sort.</span>
          </span>
        </param>
        <param name="keySelector">
          <span data-ttu-id="e3165-2234">Funkcja wyodrębniania klucza z każdego elementu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2234">A function to extract a key from each element.</span>
          </span>
        </param>
        <param name="comparer">
          <span data-ttu-id="e3165-2235">
            <see cref="T:System.Collections.Generic.IComparer`1" /> Do porównywania kluczy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2235">An <see cref="T:System.Collections.Generic.IComparer`1" /> to compare keys.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-2236">Wykonuje kolejne kolejność elementów w sekwencji w kolejności malejącej, używając określona funkcja porównująca.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2236">Performs a subsequent ordering of the elements in a sequence in descending order by using a specified comparer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-2237">
            <see cref="T:System.Linq.IOrderedEnumerable`1" /> Której elementy są sortowane w porządku malejącym zgodnie z kluczem.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2237">An <see cref="T:System.Linq.IOrderedEnumerable`1" /> whose elements are sorted in descending order according to a key.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-2238">Ta metoda jest implementowana za pomocą odroczonego wykonania.</span><span class="sxs-lookup"><span data-stu-id="e3165-2238">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="e3165-2239">Bezpośrednio zwracana wartość jest obiektem, który przechowuje wszystkie informacje wymagane do wykonania akcji.</span><span class="sxs-lookup"><span data-stu-id="e3165-2239">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="e3165-2240">Zapytanie, reprezentowane przez tę metodę nie jest wykonywana do czasu, przez wywołanie obiekt jest zostanie wyliczonly jego `GetEnumerator` metoda bezpośrednio lub za pomocą `foreach` w języku Visual C# lub `For Each` w języku Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="e3165-2240">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="e3165-2241">Sekwencję w kolejności według wartości samych elementów, należy określić funkcję tożsamości (`x => x` w języku Visual C# lub `Function(x) x` w języku Visual Basic) dla `keySelector`.</span><span class="sxs-lookup"><span data-stu-id="e3165-2241">To order a sequence by the values of the elements themselves, specify the identity function (`x => x` in Visual C# or `Function(x) x` in Visual Basic) for `keySelector`.</span></span>  
  
 <span data-ttu-id="e3165-2242"><xref:System.Linq.Enumerable.ThenBy%2A> i <xref:System.Linq.Enumerable.ThenByDescending%2A> są zdefiniowane w celu rozszerzenia typu <xref:System.Linq.IOrderedEnumerable%601>, który jest także typem zwracanym tych metod.</span><span class="sxs-lookup"><span data-stu-id="e3165-2242"><xref:System.Linq.Enumerable.ThenBy%2A> and <xref:System.Linq.Enumerable.ThenByDescending%2A> are defined to extend the type <xref:System.Linq.IOrderedEnumerable%601>, which is also the return type of these methods.</span></span> <span data-ttu-id="e3165-2243">Ten projekt umożliwia określenie wielu kryteriów sortowania, stosując dowolną liczbę <xref:System.Linq.Enumerable.ThenBy%2A> lub <xref:System.Linq.Enumerable.ThenByDescending%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="e3165-2243">This design enables you to specify multiple sort criteria by applying any number of <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A> methods.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="e3165-2244">Ponieważ <xref:System.Linq.IOrderedEnumerable%601> dziedziczy <xref:System.Collections.Generic.IEnumerable%601>, można wywołać <xref:System.Linq.Enumerable.OrderBy%2A> lub <xref:System.Linq.Enumerable.OrderByDescending%2A> na wynikach wywołania <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> lub <xref:System.Linq.Enumerable.ThenByDescending%2A>.</span><span class="sxs-lookup"><span data-stu-id="e3165-2244">Because <xref:System.Linq.IOrderedEnumerable%601> inherits from <xref:System.Collections.Generic.IEnumerable%601>, you can call <xref:System.Linq.Enumerable.OrderBy%2A> or <xref:System.Linq.Enumerable.OrderByDescending%2A> on the results of a call to <xref:System.Linq.Enumerable.OrderBy%2A>, <xref:System.Linq.Enumerable.OrderByDescending%2A>, <xref:System.Linq.Enumerable.ThenBy%2A> or <xref:System.Linq.Enumerable.ThenByDescending%2A>.</span></span> <span data-ttu-id="e3165-2245">Ten sposób wprowadza nowe podstawowe ustawianie kolejności, które ignoruje ustanowiony wcześniej sposób ustawiania.</span><span class="sxs-lookup"><span data-stu-id="e3165-2245">Doing this introduces a new primary ordering that ignores the previously established ordering.</span></span>  
  
 <span data-ttu-id="e3165-2246">Jeśli `comparer` jest `null`, domyślny moduł porównujący <xref:System.Collections.Generic.Comparer%601.Default%2A> służy do porównywania kluczy.</span><span class="sxs-lookup"><span data-stu-id="e3165-2246">If `comparer` is `null`, the default comparer <xref:System.Collections.Generic.Comparer%601.Default%2A> is used to compare keys.</span></span>  
  
 <span data-ttu-id="e3165-2247">Ta metoda wykonuje stabilne sortowanie; oznacza to, że jeśli klawisze dwóch elementów są równe, kolejność elementów jest zachowywana.</span><span class="sxs-lookup"><span data-stu-id="e3165-2247">This method performs a stable sort; that is, if the keys of two elements are equal, the order of the elements is preserved.</span></span> <span data-ttu-id="e3165-2248">Z drugiej strony, niestabilne sortowanie nie pozwala zachować kolejności elementów, które mają ten sam klucz.</span><span class="sxs-lookup"><span data-stu-id="e3165-2248">In contrast, an unstable sort does not preserve the order of elements that have the same key.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-2249">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.ThenByDescending%60%602%28System.Linq.IOrderedEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29> przeprowadzenie dodatkowej kolejność elementów w sekwencji w kolejności malejącej, korzystając z niestandardowego modułu porównującego.</span><span class="sxs-lookup"><span data-stu-id="e3165-2249">The following code example demonstrates how to use <xref:System.Linq.Enumerable.ThenByDescending%60%602%28System.Linq.IOrderedEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IComparer%7B%60%601%7D%29> to perform a secondary ordering of the elements in a sequence in descending order by using a custom comparer.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#103](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#103)]
 [!code-vb[System.Linq.Enumerable#103](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#103)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-2250">
            <paramref name="source" /> lub <paramref name="keySelector" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2250">
              <paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToArray&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static TSource[] ToArray&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig !!TSource[] ToArray&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ToArray``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToArray(Of TSource) (source As IEnumerable(Of TSource)) As TSource()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static cli::array &lt;TSource&gt; ^ ToArray(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member ToArray : seq&lt;'Source&gt; -&gt; 'Source[]" Usage="System.Linq.Enumerable.ToArray source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>TSource[]</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-2251">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2251">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-2252">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Do utworzenia tablicy z.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2252">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create an array from.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-2253">Tworzy tablicę z <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2253">Creates an array from a <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-2254">Tablica, która zawiera elementy z sekwencji wejściowych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2254">An array that contains the elements from the input sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-2255"><xref:System.Linq.Enumerable.ToArray%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> Metoda wymusza oceny zapytania bezpośredniego i zwraca tablicę zawierającą wyniki zapytania.</span><span class="sxs-lookup"><span data-stu-id="e3165-2255">The <xref:System.Linq.Enumerable.ToArray%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> method forces immediate query evaluation and returns an array that contains the query results.</span></span> <span data-ttu-id="e3165-2256">Tej metody można dodać do zapytania w celu uzyskania pamięci podręcznej kopię wyników zapytania.</span><span class="sxs-lookup"><span data-stu-id="e3165-2256">You can append this method to your query in order to obtain a cached copy of the query results.</span></span>  
  
 <span data-ttu-id="e3165-2257"><xref:System.Linq.Enumerable.ToList%2A> ma zachowanie podobne, ale zwraca <xref:System.Collections.Generic.List%601> zamiast tablicy.</span><span class="sxs-lookup"><span data-stu-id="e3165-2257"><xref:System.Linq.Enumerable.ToList%2A> has similar behavior but returns a <xref:System.Collections.Generic.List%601> instead of an array.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-2258">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.ToArray%2A> Aby wymusić oceny zapytania bezpośredniego i zwraca tablicę wyników.</span><span class="sxs-lookup"><span data-stu-id="e3165-2258">The following code example demonstrates how to use <xref:System.Linq.Enumerable.ToArray%2A> to force immediate query evaluation and return an array of results.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#104](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#104)]
 [!code-vb[System.Linq.Enumerable#104](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#104)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-2259">
            <paramref name="source" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2259">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToDictionary&lt;TSource,TKey&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e3165-2260">Tworzy <see cref="T:System.Collections.Generic.Dictionary`2" /> z <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2260">Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToDictionary&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.Dictionary&lt;TKey,TSource&gt; ToDictionary&lt;TSource,TKey&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.Dictionary`2&lt;!!TKey, !!TSource&gt; ToDictionary&lt;TSource, TKey&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToDictionary(Of TSource, TKey) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey)) As Dictionary(Of TKey, TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::Dictionary&lt;TKey, TSource&gt; ^ ToDictionary(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector);" />
      <MemberSignature Language="F#" Value="static member ToDictionary : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; -&gt; System.Collections.Generic.Dictionary&lt;'Key, 'Source&gt;" Usage="System.Linq.Enumerable.ToDictionary (source, keySelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.Dictionary&lt;TKey,TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-2261">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2261">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <typeparam name="TKey">
          <span data-ttu-id="e3165-2262">Rodzaj klucza zwracany przez <c>keySelector</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2262">The type of the key returned by <c>keySelector</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-2263">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Utworzyć <see cref="T:System.Collections.Generic.Dictionary`2" /> z.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2263">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Collections.Generic.Dictionary`2" /> from.</span>
          </span>
        </param>
        <param name="keySelector">
          <span data-ttu-id="e3165-2264">Funkcja wyodrębniania klucza z każdego elementu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2264">A function to extract a key from each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-2265">Tworzy <see cref="T:System.Collections.Generic.Dictionary`2" /> z <see cref="T:System.Collections.Generic.IEnumerable`1" /> zgodnie z funkcją określonego selektora kluczy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2265">Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to a specified key selector function.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-2266">Element <see cref="T:System.Collections.Generic.Dictionary`2" /> zawierający klucze i wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2266">A <see cref="T:System.Collections.Generic.Dictionary`2" /> that contains keys and values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-2267"><xref:System.Linq.Enumerable.ToDictionary%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29> Metoda wykorzystuje domyślny moduł porównujący równość <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> do porównywania kluczy.</span><span class="sxs-lookup"><span data-stu-id="e3165-2267">The <xref:System.Linq.Enumerable.ToDictionary%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29> method uses the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> to compare keys.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-2268">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.ToDictionary%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29> utworzyć <xref:System.Collections.Generic.Dictionary%602> za pomocą selektora kluczy.</span><span class="sxs-lookup"><span data-stu-id="e3165-2268">The following code example demonstrates how to use <xref:System.Linq.Enumerable.ToDictionary%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29> to create a <xref:System.Collections.Generic.Dictionary%602> by using a key selector.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#105](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#105)]
 [!code-vb[System.Linq.Enumerable#105](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#105)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-2269">
            <paramref name="source" /> lub <paramref name="keySelector" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2269">
              <paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="e3165-2270">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2270">-or-</span>
          </span>
          <span data-ttu-id="e3165-2271">
            <paramref name="keySelector" /> tworzy klucz, który jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2271">
              <paramref name="keySelector" /> produces a key that is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e3165-2272">
            <paramref name="keySelector" /> tworzy zduplikowane klucze dla dwóch elementów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2272">
              <paramref name="keySelector" /> produces duplicate keys for two elements.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToDictionary&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.Dictionary&lt;TKey,TSource&gt; ToDictionary&lt;TSource,TKey&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.Dictionary`2&lt;!!TKey, !!TSource&gt; ToDictionary&lt;TSource, TKey&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ToDictionary``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToDictionary(Of TSource, TKey) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), comparer As IEqualityComparer(Of TKey)) As Dictionary(Of TKey, TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::Dictionary&lt;TKey, TSource&gt; ^ ToDictionary(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member ToDictionary : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; System.Collections.Generic.Dictionary&lt;'Key, 'Source&gt;" Usage="System.Linq.Enumerable.ToDictionary (source, keySelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.Dictionary&lt;TKey,TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-2273">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2273">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <typeparam name="TKey">
          <span data-ttu-id="e3165-2274">Typ kluczy zwracanych przez <c>keySelector</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2274">The type of the keys returned by <c>keySelector</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-2275">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Utworzyć <see cref="T:System.Collections.Generic.Dictionary`2" /> z.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2275">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Collections.Generic.Dictionary`2" /> from.</span>
          </span>
        </param>
        <param name="keySelector">
          <span data-ttu-id="e3165-2276">Funkcja wyodrębniania klucza z każdego elementu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2276">A function to extract a key from each element.</span>
          </span>
        </param>
        <param name="comparer">
          <span data-ttu-id="e3165-2277">
            <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> Do porównywania kluczy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2277">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-2278">Tworzy <see cref="T:System.Collections.Generic.Dictionary`2" /> z <see cref="T:System.Collections.Generic.IEnumerable`1" /> zgodnie z określonym selektora kluczy porównania funkcji i klucza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2278">Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to a specified key selector function and key comparer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-2279">Element <see cref="T:System.Collections.Generic.Dictionary`2" /> zawierający klucze i wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2279">A <see cref="T:System.Collections.Generic.Dictionary`2" /> that contains keys and values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-2280">Jeśli `comparer` jest `null`, domyślny moduł porównujący równość <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> służy do porównywania kluczy.</span><span class="sxs-lookup"><span data-stu-id="e3165-2280">If `comparer` is `null`, the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> is used to compare keys.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-2281">
            <paramref name="source" /> lub <paramref name="keySelector" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2281">
              <paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="e3165-2282">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2282">-or-</span>
          </span>
          <span data-ttu-id="e3165-2283">
            <paramref name="keySelector" /> tworzy klucz, który jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2283">
              <paramref name="keySelector" /> produces a key that is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e3165-2284">
            <paramref name="keySelector" /> tworzy zduplikowane klucze dla dwóch elementów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2284">
              <paramref name="keySelector" /> produces duplicate keys for two elements.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToDictionary&lt;TSource,TKey,TElement&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.Dictionary&lt;TKey,TElement&gt; ToDictionary&lt;TSource,TKey,TElement&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TSource,TElement&gt; elementSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.Dictionary`2&lt;!!TKey, !!TElement&gt; ToDictionary&lt;TSource, TKey, TElement&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Func`2&lt;!!TSource, !!TElement&gt; elementSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToDictionary(Of TSource, TKey, TElement) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement)) As Dictionary(Of TKey, TElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey, typename TElement&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::Dictionary&lt;TKey, TElement&gt; ^ ToDictionary(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, Func&lt;TSource, TElement&gt; ^ elementSelector);" />
      <MemberSignature Language="F#" Value="static member ToDictionary : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * Func&lt;'Source, 'Element&gt; -&gt; System.Collections.Generic.Dictionary&lt;'Key, 'Element&gt;" Usage="System.Linq.Enumerable.ToDictionary (source, keySelector, elementSelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.Dictionary&lt;TKey,TElement&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TElement" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="elementSelector" Type="System.Func&lt;TSource,TElement&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-2285">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2285">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <typeparam name="TKey">
          <span data-ttu-id="e3165-2286">Rodzaj klucza zwracany przez <c>keySelector</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2286">The type of the key returned by <c>keySelector</c>.</span>
          </span>
        </typeparam>
        <typeparam name="TElement">
          <span data-ttu-id="e3165-2287">Typ wartości zwracanej przez <c>elementSelector</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2287">The type of the value returned by <c>elementSelector</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-2288">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Utworzyć <see cref="T:System.Collections.Generic.Dictionary`2" /> z.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2288">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Collections.Generic.Dictionary`2" /> from.</span>
          </span>
        </param>
        <param name="keySelector">
          <span data-ttu-id="e3165-2289">Funkcja wyodrębniania klucza z każdego elementu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2289">A function to extract a key from each element.</span>
          </span>
        </param>
        <param name="elementSelector">
          <span data-ttu-id="e3165-2290">Funkcja transformacji do uzyskiwania wartości wyniku elementu z każdego z elementu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2290">A transform function to produce a result element value from each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-2291">Tworzy <see cref="T:System.Collections.Generic.Dictionary`2" /> z <see cref="T:System.Collections.Generic.IEnumerable`1" /> zgodnie z określonym selektora kluczy i funkcje przełącznika kluczowego elementu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2291">Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to specified key selector and element selector functions.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-2292">A <see cref="T:System.Collections.Generic.Dictionary`2" /> zawiera wartości typu <paramref name="TElement" /> wybrana w zaufanym sekwencji wejściowych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2292">A <see cref="T:System.Collections.Generic.Dictionary`2" /> that contains values of type <paramref name="TElement" /> selected from the input sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-2293"><xref:System.Linq.Enumerable.ToDictionary%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29> Metoda wykorzystuje domyślny moduł porównujący równość <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> do porównywania kluczy.</span><span class="sxs-lookup"><span data-stu-id="e3165-2293">The <xref:System.Linq.Enumerable.ToDictionary%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29> method uses the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> to compare keys.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-2294">
            <paramref name="source" /> lub <paramref name="keySelector" /> lub <paramref name="elementSelector" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2294">
              <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="e3165-2295">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2295">-or-</span>
          </span>
          <span data-ttu-id="e3165-2296">
            <paramref name="keySelector" /> tworzy klucz, który jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2296">
              <paramref name="keySelector" /> produces a key that is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e3165-2297">
            <paramref name="keySelector" /> tworzy zduplikowane klucze dla dwóch elementów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2297">
              <paramref name="keySelector" /> produces duplicate keys for two elements.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToDictionary&lt;TSource,TKey,TElement&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.Dictionary&lt;TKey,TElement&gt; ToDictionary&lt;TSource,TKey,TElement&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TSource,TElement&gt; elementSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.Dictionary`2&lt;!!TKey, !!TElement&gt; ToDictionary&lt;TSource, TKey, TElement&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Func`2&lt;!!TSource, !!TElement&gt; elementSelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ToDictionary``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToDictionary(Of TSource, TKey, TElement) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement), comparer As IEqualityComparer(Of TKey)) As Dictionary(Of TKey, TElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey, typename TElement&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::Dictionary&lt;TKey, TElement&gt; ^ ToDictionary(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, Func&lt;TSource, TElement&gt; ^ elementSelector, System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member ToDictionary : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * Func&lt;'Source, 'Element&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; System.Collections.Generic.Dictionary&lt;'Key, 'Element&gt;" Usage="System.Linq.Enumerable.ToDictionary (source, keySelector, elementSelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.Dictionary&lt;TKey,TElement&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TElement" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="elementSelector" Type="System.Func&lt;TSource,TElement&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-2298">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2298">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <typeparam name="TKey">
          <span data-ttu-id="e3165-2299">Rodzaj klucza zwracany przez <c>keySelector</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2299">The type of the key returned by <c>keySelector</c>.</span>
          </span>
        </typeparam>
        <typeparam name="TElement">
          <span data-ttu-id="e3165-2300">Typ wartości zwracanej przez <c>elementSelector</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2300">The type of the value returned by <c>elementSelector</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-2301">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Utworzyć <see cref="T:System.Collections.Generic.Dictionary`2" /> z.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2301">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Collections.Generic.Dictionary`2" /> from.</span>
          </span>
        </param>
        <param name="keySelector">
          <span data-ttu-id="e3165-2302">Funkcja wyodrębniania klucza z każdego elementu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2302">A function to extract a key from each element.</span>
          </span>
        </param>
        <param name="elementSelector">
          <span data-ttu-id="e3165-2303">Funkcja transformacji do uzyskiwania wartości wyniku elementu z każdego z elementu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2303">A transform function to produce a result element value from each element.</span>
          </span>
        </param>
        <param name="comparer">
          <span data-ttu-id="e3165-2304">
            <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> Do porównywania kluczy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2304">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-2305">Tworzy <see cref="T:System.Collections.Generic.Dictionary`2" /> z <see cref="T:System.Collections.Generic.IEnumerable`1" /> zgodnie z funkcją określonego selektora kluczy, funkcję porównującą i funkcję selektor elementu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2305">Creates a <see cref="T:System.Collections.Generic.Dictionary`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to a specified key selector function, a comparer, and an element selector function.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-2306">A <see cref="T:System.Collections.Generic.Dictionary`2" /> zawiera wartości typu <paramref name="TElement" /> wybrana w zaufanym sekwencji wejściowych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2306">A <see cref="T:System.Collections.Generic.Dictionary`2" /> that contains values of type <paramref name="TElement" /> selected from the input sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-2307">Jeśli `comparer` jest `null`, domyślny moduł porównujący równość <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> służy do porównywania kluczy.</span><span class="sxs-lookup"><span data-stu-id="e3165-2307">If `comparer` is `null`, the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> is used to compare keys.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-2308">
            <paramref name="source" /> lub <paramref name="keySelector" /> lub <paramref name="elementSelector" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2308">
              <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> is <see langword="null" />.</span>
          </span>
          <span data-ttu-id="e3165-2309">—lub—</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2309">-or-</span>
          </span>
          <span data-ttu-id="e3165-2310">
            <paramref name="keySelector" /> tworzy klucz, który jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2310">
              <paramref name="keySelector" /> produces a key that is <see langword="null" />.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentException">
          <span data-ttu-id="e3165-2311">
            <paramref name="keySelector" /> tworzy zduplikowane klucze dla dwóch elementów.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2311">
              <paramref name="keySelector" /> produces duplicate keys for two elements.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToHashSet&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.HashSet&lt;TSource&gt; ToHashSet&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.HashSet`1&lt;!!TSource&gt; ToHashSet&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToHashSet(Of TSource) (source As IEnumerable(Of TSource)) As HashSet(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::HashSet&lt;TSource&gt; ^ ToHashSet(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member ToHashSet : seq&lt;'Source&gt; -&gt; System.Collections.Generic.HashSet&lt;'Source&gt;" Usage="System.Linq.Enumerable.ToHashSet source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.HashSet&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-2312">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2312">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-2313">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Utworzyć <see cref="T:System.Collections.Generic.HashSet`1" /> z.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2313">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Collections.Generic.HashSet`1" /> from.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-2314">Tworzy <see cref="T:System.Collections.Generic.HashSet`1" /> z <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2314">Creates a <see cref="T:System.Collections.Generic.HashSet`1" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-2315">Element <see cref="T:System.Collections.Generic.HashSet`1" /> zawiera wartości typu TSource wybrana w zaufanym sekwencji wejściowych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2315">A <see cref="T:System.Collections.Generic.HashSet`1" /> that contains values of type TSource selected from the input sequence.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToHashSet&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.HashSet&lt;TSource&gt; ToHashSet&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, System.Collections.Generic.IEqualityComparer&lt;TSource&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.HashSet`1&lt;!!TSource&gt; ToHashSet&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Collections.Generic.IEqualityComparer`1&lt;!!TSource&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ToHashSet``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToHashSet(Of TSource) (source As IEnumerable(Of TSource), comparer As IEqualityComparer(Of TSource)) As HashSet(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::HashSet&lt;TSource&gt; ^ ToHashSet(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, System::Collections::Generic::IEqualityComparer&lt;TSource&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member ToHashSet : seq&lt;'Source&gt; * System.Collections.Generic.IEqualityComparer&lt;'Source&gt; -&gt; System.Collections.Generic.HashSet&lt;'Source&gt;" Usage="System.Linq.Enumerable.ToHashSet (source, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.HashSet&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-2316">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2316">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-2317">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Utworzyć <see cref="T:System.Collections.Generic.HashSet`1" /> z.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2317">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Collections.Generic.HashSet`1" /> from.</span>
          </span>
        </param>
        <param name="comparer">
          <span data-ttu-id="e3165-2318">
            <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> Do porównywania kluczy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2318">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-2319">Tworzy <see cref="T:System.Collections.Generic.HashSet`1" /> z <see cref="T:System.Collections.Generic.IEnumerable`1" /> przy użyciu <paramref name="comparer" /> do porównywania kluczy</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2319">Creates a <see cref="T:System.Collections.Generic.HashSet`1" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> using the <paramref name="comparer" /> to compare keys</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-2320">A <see cref="T:System.Collections.Generic.HashSet`1" /> zawiera wartości typu <paramref name="TSource" /> wybrana w zaufanym sekwencji wejściowych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2320">A <see cref="T:System.Collections.Generic.HashSet`1" /> that contains values of type <paramref name="TSource" /> selected from the input sequence.</span>
          </span>
        </returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="ToList&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.List&lt;TSource&gt; ToList&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.List`1&lt;!!TSource&gt; ToList&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ToList``1(System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToList(Of TSource) (source As IEnumerable(Of TSource)) As List(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::List&lt;TSource&gt; ^ ToList(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source);" />
      <MemberSignature Language="F#" Value="static member ToList : seq&lt;'Source&gt; -&gt; System.Collections.Generic.List&lt;'Source&gt;" Usage="System.Linq.Enumerable.ToList source" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.List&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-2321">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2321">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-2322">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Utworzyć <see cref="T:System.Collections.Generic.List`1" /> z.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2322">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Collections.Generic.List`1" /> from.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-2323">Tworzy <see cref="T:System.Collections.Generic.List`1" /> z <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2323">Creates a <see cref="T:System.Collections.Generic.List`1" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-2324">Element <see cref="T:System.Collections.Generic.List`1" /> zawierający elementy z sekwencji wejściowych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2324">A <see cref="T:System.Collections.Generic.List`1" /> that contains elements from the input sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-2325"><xref:System.Linq.Enumerable.ToList%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> Metoda wymusza oceny zapytania bezpośredniego i zwraca <xref:System.Collections.Generic.List%601> zawierający wyniki zapytania.</span><span class="sxs-lookup"><span data-stu-id="e3165-2325">The <xref:System.Linq.Enumerable.ToList%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%29> method forces immediate query evaluation and returns a <xref:System.Collections.Generic.List%601> that contains the query results.</span></span> <span data-ttu-id="e3165-2326">Tej metody można dodać do zapytania w celu uzyskania pamięci podręcznej kopię wyników zapytania.</span><span class="sxs-lookup"><span data-stu-id="e3165-2326">You can append this method to your query in order to obtain a cached copy of the query results.</span></span>  
  
 <span data-ttu-id="e3165-2327"><xref:System.Linq.Enumerable.ToArray%2A> ma zachowanie podobne, ale zwraca tablicę zamiast <xref:System.Collections.Generic.List%601>.</span><span class="sxs-lookup"><span data-stu-id="e3165-2327"><xref:System.Linq.Enumerable.ToArray%2A> has similar behavior but returns an array instead of a <xref:System.Collections.Generic.List%601>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-2328">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.ToList%2A> Aby wymusić oceny zapytania bezpośredniego, a następnie zwracają <xref:System.Collections.Generic.List%601> zawierający wyniki zapytania.</span><span class="sxs-lookup"><span data-stu-id="e3165-2328">The following code example demonstrates how to use <xref:System.Linq.Enumerable.ToList%2A> to force immediate query evaluation and return a <xref:System.Collections.Generic.List%601> that contains the query results.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#106](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#106)]
 [!code-vb[System.Linq.Enumerable#106](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#106)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-2329">
            <paramref name="source" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2329">
              <paramref name="source" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="ToLookup&lt;TSource,TKey&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e3165-2330">Tworzy element ogólny <see cref="T:System.Linq.Lookup`2" /> z <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2330">Creates a generic <see cref="T:System.Linq.Lookup`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" />.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="ToLookup&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.ILookup&lt;TKey,TSource&gt; ToLookup&lt;TSource,TKey&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.ILookup`2&lt;!!TKey, !!TSource&gt; ToLookup&lt;TSource, TKey&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToLookup(Of TSource, TKey) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey)) As ILookup(Of TKey, TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::ILookup&lt;TKey, TSource&gt; ^ ToLookup(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector);" />
      <MemberSignature Language="F#" Value="static member ToLookup : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; -&gt; System.Linq.ILookup&lt;'Key, 'Source&gt;" Usage="System.Linq.Enumerable.ToLookup (source, keySelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.ILookup&lt;TKey,TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-2331">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2331">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <typeparam name="TKey">
          <span data-ttu-id="e3165-2332">Rodzaj klucza zwracany przez <c>keySelector</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2332">The type of the key returned by <c>keySelector</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-2333">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Utworzyć <see cref="T:System.Linq.Lookup`2" /> z.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2333">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Linq.Lookup`2" /> from.</span>
          </span>
        </param>
        <param name="keySelector">
          <span data-ttu-id="e3165-2334">Funkcja wyodrębniania klucza z każdego elementu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2334">A function to extract a key from each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-2335">Tworzy <see cref="T:System.Linq.Lookup`2" /> z <see cref="T:System.Collections.Generic.IEnumerable`1" /> zgodnie z funkcją określonego selektora kluczy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2335">Creates a <see cref="T:System.Linq.Lookup`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to a specified key selector function.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-2336">Element <see cref="T:System.Linq.Lookup`2" /> zawierający klucze i wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2336">A <see cref="T:System.Linq.Lookup`2" /> that contains keys and values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-2337"><xref:System.Linq.Enumerable.ToLookup%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29> Metoda zwraca <xref:System.Linq.Lookup%602>, słownika jeden do wielu, mapujący klucze do kolekcji wartości.</span><span class="sxs-lookup"><span data-stu-id="e3165-2337">The <xref:System.Linq.Enumerable.ToLookup%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%29> method returns a <xref:System.Linq.Lookup%602>, a one-to-many dictionary that maps keys to collections of values.</span></span> <span data-ttu-id="e3165-2338">A <xref:System.Linq.Lookup%602> różni się od <xref:System.Collections.Generic.Dictionary%602>, który wykonuje mapowanie jeden do jednego z kluczy do pojedynczej wartości.</span><span class="sxs-lookup"><span data-stu-id="e3165-2338">A <xref:System.Linq.Lookup%602> differs from a <xref:System.Collections.Generic.Dictionary%602>, which performs a one-to-one mapping of keys to single values.</span></span>  
  
 <span data-ttu-id="e3165-2339">Domyślny moduł porównujący równość <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> służy do porównywania kluczy.</span><span class="sxs-lookup"><span data-stu-id="e3165-2339">The default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> is used to compare keys.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-2340">
            <paramref name="source" /> lub <paramref name="keySelector" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2340">
              <paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToLookup&lt;TSource,TKey&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.ILookup&lt;TKey,TSource&gt; ToLookup&lt;TSource,TKey&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.ILookup`2&lt;!!TKey, !!TSource&gt; ToLookup&lt;TSource, TKey&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ToLookup``2(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Collections.Generic.IEqualityComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToLookup(Of TSource, TKey) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), comparer As IEqualityComparer(Of TKey)) As ILookup(Of TKey, TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::ILookup&lt;TKey, TSource&gt; ^ ToLookup(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member ToLookup : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; System.Linq.ILookup&lt;'Key, 'Source&gt;" Usage="System.Linq.Enumerable.ToLookup (source, keySelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.ILookup&lt;TKey,TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-2341">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2341">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <typeparam name="TKey">
          <span data-ttu-id="e3165-2342">Rodzaj klucza zwracany przez <c>keySelector</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2342">The type of the key returned by <c>keySelector</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-2343">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Utworzyć <see cref="T:System.Linq.Lookup`2" /> z.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2343">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Linq.Lookup`2" /> from.</span>
          </span>
        </param>
        <param name="keySelector">
          <span data-ttu-id="e3165-2344">Funkcja wyodrębniania klucza z każdego elementu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2344">A function to extract a key from each element.</span>
          </span>
        </param>
        <param name="comparer">
          <span data-ttu-id="e3165-2345">
            <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> Do porównywania kluczy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2345">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-2346">Tworzy <see cref="T:System.Linq.Lookup`2" /> z <see cref="T:System.Collections.Generic.IEnumerable`1" /> zgodnie z określonym selektora kluczy porównania funkcji i klucza.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2346">Creates a <see cref="T:System.Linq.Lookup`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to a specified key selector function and key comparer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-2347">Element <see cref="T:System.Linq.Lookup`2" /> zawierający klucze i wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2347">A <see cref="T:System.Linq.Lookup`2" /> that contains keys and values.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-2348"><xref:System.Linq.Enumerable.ToLookup%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> Metoda zwraca <xref:System.Linq.Lookup%602>, słownika jeden do wielu, mapujący klucze do kolekcji wartości.</span><span class="sxs-lookup"><span data-stu-id="e3165-2348">The <xref:System.Linq.Enumerable.ToLookup%60%602%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> method returns a <xref:System.Linq.Lookup%602>, a one-to-many dictionary that maps keys to collections of values.</span></span> <span data-ttu-id="e3165-2349">A <xref:System.Linq.Lookup%602> różni się <xref:System.Collections.Generic.Dictionary%602>, który wykonuje mapowanie jeden do jednego z kluczy do pojedynczej wartości.</span><span class="sxs-lookup"><span data-stu-id="e3165-2349">A <xref:System.Linq.Lookup%602> is different to a <xref:System.Collections.Generic.Dictionary%602>, which performs a one-to-one mapping of keys to single values.</span></span>  
  
 <span data-ttu-id="e3165-2350">Jeśli `comparer` jest `null`, domyślny moduł porównujący równość <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> służy do porównywania kluczy.</span><span class="sxs-lookup"><span data-stu-id="e3165-2350">If `comparer` is `null`, the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> is used to compare keys.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-2351">
            <paramref name="source" /> lub <paramref name="keySelector" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2351">
              <paramref name="source" /> or <paramref name="keySelector" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToLookup&lt;TSource,TKey,TElement&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.ILookup&lt;TKey,TElement&gt; ToLookup&lt;TSource,TKey,TElement&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TSource,TElement&gt; elementSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.ILookup`2&lt;!!TKey, !!TElement&gt; ToLookup&lt;TSource, TKey, TElement&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Func`2&lt;!!TSource, !!TElement&gt; elementSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToLookup(Of TSource, TKey, TElement) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement)) As ILookup(Of TKey, TElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey, typename TElement&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::ILookup&lt;TKey, TElement&gt; ^ ToLookup(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, Func&lt;TSource, TElement&gt; ^ elementSelector);" />
      <MemberSignature Language="F#" Value="static member ToLookup : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * Func&lt;'Source, 'Element&gt; -&gt; System.Linq.ILookup&lt;'Key, 'Element&gt;" Usage="System.Linq.Enumerable.ToLookup (source, keySelector, elementSelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.ILookup&lt;TKey,TElement&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TElement" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="elementSelector" Type="System.Func&lt;TSource,TElement&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-2352">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2352">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <typeparam name="TKey">
          <span data-ttu-id="e3165-2353">Rodzaj klucza zwracany przez <c>keySelector</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2353">The type of the key returned by <c>keySelector</c>.</span>
          </span>
        </typeparam>
        <typeparam name="TElement">
          <span data-ttu-id="e3165-2354">Typ wartości zwracanej przez <c>elementSelector</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2354">The type of the value returned by <c>elementSelector</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-2355">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Utworzyć <see cref="T:System.Linq.Lookup`2" /> z.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2355">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Linq.Lookup`2" /> from.</span>
          </span>
        </param>
        <param name="keySelector">
          <span data-ttu-id="e3165-2356">Funkcja wyodrębniania klucza z każdego elementu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2356">A function to extract a key from each element.</span>
          </span>
        </param>
        <param name="elementSelector">
          <span data-ttu-id="e3165-2357">Funkcja transformacji do uzyskiwania wartości wyniku elementu z każdego z elementu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2357">A transform function to produce a result element value from each element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-2358">Tworzy <see cref="T:System.Linq.Lookup`2" /> z <see cref="T:System.Collections.Generic.IEnumerable`1" /> zgodnie z określonym selektora kluczy i funkcje przełącznika kluczowego elementu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2358">Creates a <see cref="T:System.Linq.Lookup`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to specified key selector and element selector functions.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-2359">A <see cref="T:System.Linq.Lookup`2" /> zawiera wartości typu <paramref name="TElement" /> wybrana w zaufanym sekwencji wejściowych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2359">A <see cref="T:System.Linq.Lookup`2" /> that contains values of type <paramref name="TElement" /> selected from the input sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-2360"><xref:System.Linq.Enumerable.ToLookup%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29> Metoda zwraca <xref:System.Linq.Lookup%602>, słownika jeden do wielu, mapujący klucze do kolekcji wartości.</span><span class="sxs-lookup"><span data-stu-id="e3165-2360">The <xref:System.Linq.Enumerable.ToLookup%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29> method returns a <xref:System.Linq.Lookup%602>, a one-to-many dictionary that maps keys to collections of values.</span></span> <span data-ttu-id="e3165-2361">A <xref:System.Linq.Lookup%602> różni się od <xref:System.Collections.Generic.Dictionary%602>, który wykonuje mapowanie jeden do jednego z kluczy do pojedynczej wartości.</span><span class="sxs-lookup"><span data-stu-id="e3165-2361">A <xref:System.Linq.Lookup%602> differs from a <xref:System.Collections.Generic.Dictionary%602>, which performs a one-to-one mapping of keys to single values.</span></span>  
  
 <span data-ttu-id="e3165-2362">Domyślny moduł porównujący równość <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> służy do porównywania kluczy.</span><span class="sxs-lookup"><span data-stu-id="e3165-2362">The default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> is used to compare keys.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-2363">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.ToLookup%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29> utworzyć <xref:System.Linq.Lookup%602> przy użyciu funkcji selektora kluczy i funkcję selektor elementu.</span><span class="sxs-lookup"><span data-stu-id="e3165-2363">The following code example demonstrates how to use <xref:System.Linq.Enumerable.ToLookup%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%29> to create a <xref:System.Linq.Lookup%602> by using a key selector function and an element selector function.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#107](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#107)]
 [!code-vb[System.Linq.Enumerable#107](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#107)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-2364">
            <paramref name="source" /> lub <paramref name="keySelector" /> lub <paramref name="elementSelector" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2364">
              <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="ToLookup&lt;TSource,TKey,TElement&gt;">
      <MemberSignature Language="C#" Value="public static System.Linq.ILookup&lt;TKey,TElement&gt; ToLookup&lt;TSource,TKey,TElement&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,TKey&gt; keySelector, Func&lt;TSource,TElement&gt; elementSelector, System.Collections.Generic.IEqualityComparer&lt;TKey&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Linq.ILookup`2&lt;!!TKey, !!TElement&gt; ToLookup&lt;TSource, TKey, TElement&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, !!TKey&gt; keySelector, class System.Func`2&lt;!!TSource, !!TElement&gt; elementSelector, class System.Collections.Generic.IEqualityComparer`1&lt;!!TKey&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.ToLookup``3(System.Collections.Generic.IEnumerable{``0},System.Func{``0,``1},System.Func{``0,``2},System.Collections.Generic.IEqualityComparer{``1})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function ToLookup(Of TSource, TKey, TElement) (source As IEnumerable(Of TSource), keySelector As Func(Of TSource, TKey), elementSelector As Func(Of TSource, TElement), comparer As IEqualityComparer(Of TKey)) As ILookup(Of TKey, TElement)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource, typename TKey, typename TElement&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Linq::ILookup&lt;TKey, TElement&gt; ^ ToLookup(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, TKey&gt; ^ keySelector, Func&lt;TSource, TElement&gt; ^ elementSelector, System::Collections::Generic::IEqualityComparer&lt;TKey&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member ToLookup : seq&lt;'Source&gt; * Func&lt;'Source, 'Key&gt; * Func&lt;'Source, 'Element&gt; * System.Collections.Generic.IEqualityComparer&lt;'Key&gt; -&gt; System.Linq.ILookup&lt;'Key, 'Element&gt;" Usage="System.Linq.Enumerable.ToLookup (source, keySelector, elementSelector, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Linq.ILookup&lt;TKey,TElement&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
        <TypeParameter Name="TKey" />
        <TypeParameter Name="TElement" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="keySelector" Type="System.Func&lt;TSource,TKey&gt;" />
        <Parameter Name="elementSelector" Type="System.Func&lt;TSource,TElement&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TKey&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-2365">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2365">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <typeparam name="TKey">
          <span data-ttu-id="e3165-2366">Rodzaj klucza zwracany przez <c>keySelector</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2366">The type of the key returned by <c>keySelector</c>.</span>
          </span>
        </typeparam>
        <typeparam name="TElement">
          <span data-ttu-id="e3165-2367">Typ wartości zwracanej przez <c>elementSelector</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2367">The type of the value returned by <c>elementSelector</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-2368">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Utworzyć <see cref="T:System.Linq.Lookup`2" /> z.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2368">The <see cref="T:System.Collections.Generic.IEnumerable`1" /> to create a <see cref="T:System.Linq.Lookup`2" /> from.</span>
          </span>
        </param>
        <param name="keySelector">
          <span data-ttu-id="e3165-2369">Funkcja wyodrębniania klucza z każdego elementu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2369">A function to extract a key from each element.</span>
          </span>
        </param>
        <param name="elementSelector">
          <span data-ttu-id="e3165-2370">Funkcja transformacji do uzyskiwania wartości wyniku elementu z każdego z elementu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2370">A transform function to produce a result element value from each element.</span>
          </span>
        </param>
        <param name="comparer">
          <span data-ttu-id="e3165-2371">
            <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> Do porównywania kluczy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2371">An <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare keys.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-2372">Tworzy <see cref="T:System.Linq.Lookup`2" /> z <see cref="T:System.Collections.Generic.IEnumerable`1" /> zgodnie z funkcją określonego selektora kluczy, funkcję porównującą i funkcję selektor elementu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2372">Creates a <see cref="T:System.Linq.Lookup`2" /> from an <see cref="T:System.Collections.Generic.IEnumerable`1" /> according to a specified key selector function, a comparer and an element selector function.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-2373">A <see cref="T:System.Linq.Lookup`2" /> zawiera wartości typu <paramref name="TElement" /> wybrana w zaufanym sekwencji wejściowych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2373">A <see cref="T:System.Linq.Lookup`2" /> that contains values of type <paramref name="TElement" /> selected from the input sequence.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-2374"><xref:System.Linq.Enumerable.ToLookup%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> Metoda zwraca <xref:System.Linq.Lookup%602>, słownika jeden do wielu, mapujący klucze do kolekcji wartości.</span><span class="sxs-lookup"><span data-stu-id="e3165-2374">The <xref:System.Linq.Enumerable.ToLookup%60%603%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2C%60%601%7D%2CSystem.Func%7B%60%600%2C%60%602%7D%2CSystem.Collections.Generic.IEqualityComparer%7B%60%601%7D%29> method returns a <xref:System.Linq.Lookup%602>, a one-to-many dictionary that maps keys to collections of values.</span></span> <span data-ttu-id="e3165-2375">A <xref:System.Linq.Lookup%602> różni się od <xref:System.Collections.Generic.Dictionary%602>, który wykonuje mapowanie jeden do jednego z kluczy do pojedynczej wartości.</span><span class="sxs-lookup"><span data-stu-id="e3165-2375">A <xref:System.Linq.Lookup%602> differs from a <xref:System.Collections.Generic.Dictionary%602>, which performs a one-to-one mapping of keys to single values.</span></span>  
  
 <span data-ttu-id="e3165-2376">Jeśli `comparer` jest `null`, domyślny moduł porównujący równość <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> służy do porównywania kluczy.</span><span class="sxs-lookup"><span data-stu-id="e3165-2376">If `comparer` is `null`, the default equality comparer <xref:System.Collections.Generic.EqualityComparer%601.Default%2A> is used to compare keys.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-2377">
            <paramref name="source" /> lub <paramref name="keySelector" /> lub <paramref name="elementSelector" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2377">
              <paramref name="source" /> or <paramref name="keySelector" /> or <paramref name="elementSelector" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Union&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e3165-2378">Tworzy zbiorów dwóch sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2378">Produces the set union of two sequences.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Union&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Union&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; first, System.Collections.Generic.IEnumerable&lt;TSource&gt; second);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Union&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; first, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; second) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Union(Of TSource) (first As IEnumerable(Of TSource), second As IEnumerable(Of TSource)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ Union(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ first, System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ second);" />
      <MemberSignature Language="F#" Value="static member Union : seq&lt;'Source&gt; * seq&lt;'Source&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.Union (first, second)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="first" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="second" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-2379">Typ elementów sekwencji wejściowych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2379">The type of the elements of the input sequences.</span>
          </span>
        </typeparam>
        <param name="first">
          <span data-ttu-id="e3165-2380">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Której różne elementy stanowią pierwszy zestaw dla Unii.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2380">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose distinct elements form the first set for the union.</span>
          </span>
        </param>
        <param name="second">
          <span data-ttu-id="e3165-2381">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Której różne elementy tworzą drugiego zestawu dla Unii.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2381">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose distinct elements form the second set for the union.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-2382">Tworzy zbiorów dwóch sekwencji za pomocą domyślny moduł porównujący równość.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2382">Produces the set union of two sequences by using the default equality comparer.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-2383">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Zawierający elementy z obu sekwencji wejściowych, z wyłączeniem duplikaty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2383">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements from both input sequences, excluding duplicates.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-2384">Ta metoda jest implementowana za pomocą odroczonego wykonania.</span><span class="sxs-lookup"><span data-stu-id="e3165-2384">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="e3165-2385">Bezpośrednio zwracana wartość jest obiektem, który przechowuje wszystkie informacje wymagane do wykonania akcji.</span><span class="sxs-lookup"><span data-stu-id="e3165-2385">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="e3165-2386">Zapytanie, reprezentowane przez tę metodę nie jest wykonywana do czasu, przez wywołanie obiekt jest zostanie wyliczonly jego `GetEnumerator` metoda bezpośrednio lub za pomocą `foreach` w języku Visual C# lub `For Each` w języku Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="e3165-2386">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="e3165-2387">Ta metoda nie obejmuje duplikaty z zestawu zwracany.</span><span class="sxs-lookup"><span data-stu-id="e3165-2387">This method excludes duplicates from the return set.</span></span> <span data-ttu-id="e3165-2388">Jest to zachowanie różnych do <xref:System.Linq.Enumerable.Concat%2A> metody, która zwraca wszystkie elementy w sekwencji wejściowych, włącznie z duplikaty.</span><span class="sxs-lookup"><span data-stu-id="e3165-2388">This is different behavior to the <xref:System.Linq.Enumerable.Concat%2A> method, which returns all the elements in the input sequences including duplicates.</span></span>  
  
 <span data-ttu-id="e3165-2389">Domyślny moduł porównujący równość, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, służy do porównywania wartości typów implementujących <xref:System.Collections.Generic.IEqualityComparer%601> interfejs generyczny.</span><span class="sxs-lookup"><span data-stu-id="e3165-2389">The default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare values of the types that implement the <xref:System.Collections.Generic.IEqualityComparer%601> generic interface.</span></span> <span data-ttu-id="e3165-2390">Aby porównać niestandardowy typ danych, należy zaimplementować niniejszy interfejs i podać własne <xref:System.Object.GetHashCode%2A> i <xref:System.Object.Equals%2A> metod dla typu.</span><span class="sxs-lookup"><span data-stu-id="e3165-2390">To compare a custom data type, you need to implement this interface and provide your own <xref:System.Object.GetHashCode%2A> and <xref:System.Object.Equals%2A> methods for the type.</span></span>  
  
 <span data-ttu-id="e3165-2391">Gdy obiekt zwracany przez tę metodę jest zostanie wyliczonly, <xref:System.Linq.Enumerable.Union%2A> wylicza `first` i `second` w tej kolejności i każdego elementu, który nie ma już uzyskane daje.</span><span class="sxs-lookup"><span data-stu-id="e3165-2391">When the object returned by this method is enumerated, <xref:System.Linq.Enumerable.Union%2A> enumerates `first` and `second` in that order and yields each element that has not already been yielded.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-2392">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Union%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> uzyskać sumę dwóch sekwencji liczb całkowitych.</span><span class="sxs-lookup"><span data-stu-id="e3165-2392">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Union%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> to obtain the union of two sequences of integers.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#109](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#109)]
 [!code-vb[System.Linq.Enumerable#109](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#109)]  
  
 <span data-ttu-id="e3165-2393">Jeśli chcesz porównać sekwencji obiektów niestandardowego typu danych, musisz zaimplementować <xref:System.Collections.Generic.IEqualityComparer%601> ogólny interfejs w helperclass.</span><span class="sxs-lookup"><span data-stu-id="e3165-2393">If you want to compare sequences of objects of a custom data type, you have to implement the <xref:System.Collections.Generic.IEqualityComparer%601> generic interface in a helperclass.</span></span> <span data-ttu-id="e3165-2394">Poniższy przykład kodu pokazuje sposób implementacji niniejszego interfejsu do niestandardowego typu danych i zapewniają <xref:System.Object.GetHashCode%2A> i <xref:System.Object.Equals%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="e3165-2394">The following code example shows how to implement this interface in a custom data type and provide <xref:System.Object.GetHashCode%2A> and <xref:System.Object.Equals%2A> methods.</span></span>  
  
 [!code-csharp[CSLINQEncapsulatedComparer#9](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/CS/EncapsulatedComparer.cs#9)]  
  
 <span data-ttu-id="e3165-2395">Po zaimplementowaniu ten interfejs, można użyć sekwencji `ProductA` obiekty w <xref:System.Linq.Enumerable.Union%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> metodzie, jak pokazano w poniższym przykładzie.</span><span class="sxs-lookup"><span data-stu-id="e3165-2395">After you implement this interface, you can use sequences of `ProductA` objects in the <xref:System.Linq.Enumerable.Union%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Collections.Generic.IEnumerable%7B%60%600%7D%29> method, as shown in the following example.</span></span>  
  
 [!code-csharp[CSLINQEncapsulatedComparer#10](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/CS/EncapsulatedComparer.cs#10)]  
[!code-csharp[CSLINQEncapsulatedComparer#4](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/CS/EncapsulatedComparer.cs#4)]
[!code-vb[CSLINQEncapsulatedComparer#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQEncapsulatedComparer/VB/EncapsulatedComparer.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-2396">
            <paramref name="first" /> lub <paramref name="second" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2396">
              <paramref name="first" /> or <paramref name="second" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Union&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Union&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; first, System.Collections.Generic.IEnumerable&lt;TSource&gt; second, System.Collections.Generic.IEqualityComparer&lt;TSource&gt; comparer);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Union&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; first, class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; second, class System.Collections.Generic.IEqualityComparer`1&lt;!!TSource&gt; comparer) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Union``1(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEqualityComparer{``0})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Union(Of TSource) (first As IEnumerable(Of TSource), second As IEnumerable(Of TSource), comparer As IEqualityComparer(Of TSource)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ Union(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ first, System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ second, System::Collections::Generic::IEqualityComparer&lt;TSource&gt; ^ comparer);" />
      <MemberSignature Language="F#" Value="static member Union : seq&lt;'Source&gt; * seq&lt;'Source&gt; * System.Collections.Generic.IEqualityComparer&lt;'Source&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.Union (first, second, comparer)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="first" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="second" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" />
        <Parameter Name="comparer" Type="System.Collections.Generic.IEqualityComparer&lt;TSource&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-2397">Typ elementów sekwencji wejściowych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2397">The type of the elements of the input sequences.</span>
          </span>
        </typeparam>
        <param name="first">
          <span data-ttu-id="e3165-2398">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Której różne elementy stanowią pierwszy zestaw dla Unii.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2398">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose distinct elements form the first set for the union.</span>
          </span>
        </param>
        <param name="second">
          <span data-ttu-id="e3165-2399">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Której różne elementy tworzą drugiego zestawu dla Unii.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2399">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> whose distinct elements form the second set for the union.</span>
          </span>
        </param>
        <param name="comparer">
          <span data-ttu-id="e3165-2400">
            <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> Do porównywania wartości.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2400">The <see cref="T:System.Collections.Generic.IEqualityComparer`1" /> to compare values.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-2401">Tworzy zbiorów dwóch sekwencji przy użyciu określonego <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2401">Produces the set union of two sequences by using a specified <see cref="T:System.Collections.Generic.IEqualityComparer`1" />.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-2402">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Zawierający elementy z obu sekwencji wejściowych, z wyłączeniem duplikaty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2402">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains the elements from both input sequences, excluding duplicates.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-2403">Ta metoda jest implementowana za pomocą odroczonego wykonania.</span><span class="sxs-lookup"><span data-stu-id="e3165-2403">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="e3165-2404">Bezpośrednio zwracana wartość jest obiektem, który przechowuje wszystkie informacje wymagane do wykonania akcji.</span><span class="sxs-lookup"><span data-stu-id="e3165-2404">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="e3165-2405">Zapytanie, reprezentowane przez tę metodę nie jest wykonywana do czasu, przez wywołanie obiekt jest zostanie wyliczonly jego `GetEnumerator` metoda bezpośrednio lub za pomocą `foreach` w języku Visual C# lub `For Each` w języku Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="e3165-2405">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="e3165-2406">Jeśli `comparer` jest `null`, domyślny moduł porównujący równość, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, służy do porównywania wartości.</span><span class="sxs-lookup"><span data-stu-id="e3165-2406">If `comparer` is `null`, the default equality comparer, <xref:System.Collections.Generic.EqualityComparer%601.Default%2A>, is used to compare values.</span></span>  
  
 <span data-ttu-id="e3165-2407">Gdy obiekt zwracany przez tę metodę jest zostanie wyliczonly, <xref:System.Linq.Enumerable.Union%2A> wylicza `first` i `second` w tej kolejności i każdego elementu, który nie ma już uzyskane daje.</span><span class="sxs-lookup"><span data-stu-id="e3165-2407">When the object returned by this method is enumerated, <xref:System.Linq.Enumerable.Union%2A> enumerates `first` and `second` in that order and yields each element that has not already been yielded.</span></span>  
  
 <span data-ttu-id="e3165-2408"><xref:System.Linq.Enumerable.Concat%2A> Metoda różni się od <xref:System.Linq.Enumerable.Union%2A> metody ponieważ <xref:System.Linq.Enumerable.Concat%2A> metoda zwraca wszystkie elementy w sekwencji wejściowych, włącznie duplikaty, natomiast <xref:System.Linq.Enumerable.Union%2A> zwraca tylko unikatowe wartości.</span><span class="sxs-lookup"><span data-stu-id="e3165-2408">The <xref:System.Linq.Enumerable.Concat%2A> method differs from the <xref:System.Linq.Enumerable.Union%2A> method because the <xref:System.Linq.Enumerable.Concat%2A> method returns all the elements in the input sequences including duplicates, whereas <xref:System.Linq.Enumerable.Union%2A> returns only unique values.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-2409">Poniższy przykład pokazuje, jak zaimplementować moduł porównujący równość mogą być używane w <xref:System.Linq.Enumerable.Union%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="e3165-2409">The following example shows how to implement an equality comparer that can be used in the <xref:System.Linq.Enumerable.Union%2A> method.</span></span>  
  
 [!code-csharp[CSLINQCustomComparer#1](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQCustomComparer/CS/CustomComparer.cs#1)]
 [!code-vb[CSLINQCustomComparer#1](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQCustomComparer/VB/CustomComparer.vb#1)]  
  
 <span data-ttu-id="e3165-2410">Po zaimplementowaniu tej porównania można użyć sekwencji `Product` obiekty w <xref:System.Linq.Enumerable.Union%2A> metodzie, jak pokazano w poniższym przykładzie.</span><span class="sxs-lookup"><span data-stu-id="e3165-2410">After you implement this comparer, you can use sequences of `Product` objects in the <xref:System.Linq.Enumerable.Union%2A> method, as shown in the following example.</span></span>  
  
 [!code-csharp[CSLINQCustomComparer#2](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQCustomComparer/CS/CustomComparer.cs#2)]
 [!code-vb[CSLINQCustomComparer#2](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQCustomComparer/VB/CustomComparer.vb#2)]  
[!code-csharp[CSLINQCustomComparer#4](~/samples/snippets/csharp/VS_Snippets_VBCSharp/CsLINQCustomComparer/CS/CustomComparer.cs#4)]
[!code-vb[CSLINQCustomComparer#4](~/samples/snippets/visualbasic/VS_Snippets_VBCSharp/CsLINQCustomComparer/VB/CustomComparer.vb#4)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-2411">
            <paramref name="first" /> lub <paramref name="second" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2411">
              <paramref name="first" /> or <paramref name="second" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <MemberGroup MemberName="Where&lt;TSource&gt;">
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="e3165-2412">Służy do przefiltrowania kolejność wartości na podstawie predykatu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2412">Filters a sequence of values based on a predicate.</span>
          </span>
        </summary>
      </Docs>
    </MemberGroup>
    <Member MemberName="Where&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Where&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Where&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`2&lt;!!TSource, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Where(Of TSource) (source As IEnumerable(Of TSource), predicate As Func(Of TSource, Boolean)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ Where(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member Where : seq&lt;'Source&gt; * Func&lt;'Source, bool&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.Where (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-2413">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2413">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-2414">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Do filtrowania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2414">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to filter.</span>
          </span>
        </param>
        <param name="predicate">
          <span data-ttu-id="e3165-2415">Funkcja testowania każdego elementu na stanie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2415">A function to test each element for a condition.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-2416">Służy do przefiltrowania kolejność wartości na podstawie predykatu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2416">Filters a sequence of values based on a predicate.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-2417">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Zawierający elementy z sekwencji wejściowych, które spełniają warunek.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2417">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains elements from the input sequence that satisfy the condition.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-2418">Ta metoda jest implementowana za pomocą odroczonego wykonania.</span><span class="sxs-lookup"><span data-stu-id="e3165-2418">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="e3165-2419">Bezpośrednio zwracana wartość jest obiektem, który przechowuje wszystkie informacje wymagane do wykonania akcji.</span><span class="sxs-lookup"><span data-stu-id="e3165-2419">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="e3165-2420">Zapytanie, reprezentowane przez tę metodę nie jest wykonywana do czasu, przez wywołanie obiekt jest zostanie wyliczonly jego `GetEnumerator` metoda bezpośrednio lub za pomocą `foreach` w języku Visual C# lub `For Each` w języku Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="e3165-2420">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="e3165-2421">W składni wyrażeń zapytania `where` (Visual C#) lub `Where` — klauzula (Visual Basic) przekłada się na wywołanie <xref:System.Linq.Enumerable.Where%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29>.</span><span class="sxs-lookup"><span data-stu-id="e3165-2421">In query expression syntax, a `where` (Visual C#) or `Where` (Visual Basic) clause translates to an invocation of <xref:System.Linq.Enumerable.Where%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29>.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-2422">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Where%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> do filtrowania sekwencji.</span><span class="sxs-lookup"><span data-stu-id="e3165-2422">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Where%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Boolean%7D%29> to filter a sequence.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#110](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#110)]
 [!code-vb[System.Linq.Enumerable#110](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#110)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-2423">
            <paramref name="source" /> lub <paramref name="predicate" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2423">
              <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <related type="Article" href="https://msdn.microsoft.com/library/7f9bf952-7744-4f91-b676-cddb55d107c3">
          <span data-ttu-id="e3165-2424">Klauzula where (odwołanie w C#)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2424">where clause (C# Reference)</span>
          </span>
        </related>
        <related type="Article" href="https://msdn.microsoft.com/library/48b5c2c5-3181-429c-8545-894296798c89">
          <span data-ttu-id="e3165-2425">Where — Klauzula (Visual Basic)</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2425">Where Clause (Visual Basic)</span>
          </span>
        </related>
      </Docs>
    </Member>
    <Member MemberName="Where&lt;TSource&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TSource&gt; Where&lt;TSource&gt; (this System.Collections.Generic.IEnumerable&lt;TSource&gt; source, Func&lt;TSource,int,bool&gt; predicate);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; Where&lt;TSource&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TSource&gt; source, class System.Func`3&lt;!!TSource, int32, bool&gt; predicate) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Where``1(System.Collections.Generic.IEnumerable{``0},System.Func{``0,System.Int32,System.Boolean})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Where(Of TSource) (source As IEnumerable(Of TSource), predicate As Func(Of TSource, Integer, Boolean)) As IEnumerable(Of TSource)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TSource&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ Where(System::Collections::Generic::IEnumerable&lt;TSource&gt; ^ source, Func&lt;TSource, int, bool&gt; ^ predicate);" />
      <MemberSignature Language="F#" Value="static member Where : seq&lt;'Source&gt; * Func&lt;'Source, int, bool&gt; -&gt; seq&lt;'Source&gt;" Usage="System.Linq.Enumerable.Where (source, predicate)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>3.5.0.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TSource&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TSource" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="source" Type="System.Collections.Generic.IEnumerable&lt;TSource&gt;" RefType="this" />
        <Parameter Name="predicate" Type="System.Func&lt;TSource,System.Int32,System.Boolean&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TSource">
          <span data-ttu-id="e3165-2426">Typ elementów <c>źródła</c>.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2426">The type of the elements of <c>source</c>.</span>
          </span>
        </typeparam>
        <param name="source">
          <span data-ttu-id="e3165-2427">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Do filtrowania.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2427">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> to filter.</span>
          </span>
        </param>
        <param name="predicate">
          <span data-ttu-id="e3165-2428">Funkcja testowania każdego elementu źródłowego dla warunku; drugi parametr funkcji reprezentuje indeks elementu źródłowego.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2428">A function to test each source element for a condition; the second parameter of the function represents the index of the source element.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-2429">Służy do przefiltrowania kolejność wartości na podstawie predykatu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2429">Filters a sequence of values based on a predicate.</span>
          </span>
          <span data-ttu-id="e3165-2430">Indeks każdy element jest używany w logice funkcji predykatu.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2430">Each element's index is used in the logic of the predicate function.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-2431">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Zawierający elementy z sekwencji wejściowych, które spełniają warunek.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2431">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains elements from the input sequence that satisfy the condition.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-2432">Ta metoda jest implementowana za pomocą odroczonego wykonania.</span><span class="sxs-lookup"><span data-stu-id="e3165-2432">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="e3165-2433">Bezpośrednio zwracana wartość jest obiektem, który przechowuje wszystkie informacje wymagane do wykonania akcji.</span><span class="sxs-lookup"><span data-stu-id="e3165-2433">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="e3165-2434">Zapytanie, reprezentowane przez tę metodę nie jest wykonywana do czasu, przez wywołanie obiekt jest zostanie wyliczonly jego `GetEnumerator` metoda bezpośrednio lub za pomocą `foreach` w języku Visual C# lub `For Each` w języku Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="e3165-2434">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="e3165-2435">Pierwszy argument `predicate` reprezentuje element do przetestowania.</span><span class="sxs-lookup"><span data-stu-id="e3165-2435">The first argument of `predicate` represents the element to test.</span></span> <span data-ttu-id="e3165-2436">Drugi argument reprezentuje liczony od zera indeks elementu w obrębie `source`.</span><span class="sxs-lookup"><span data-stu-id="e3165-2436">The second argument represents the zero-based index of the element within `source`.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-2437">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Where%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29> do filtrowania sekwencji na podstawie predykatu, który obejmuje indeks każdego elementu.</span><span class="sxs-lookup"><span data-stu-id="e3165-2437">The following code example demonstrates how to use <xref:System.Linq.Enumerable.Where%60%601%28System.Collections.Generic.IEnumerable%7B%60%600%7D%2CSystem.Func%7B%60%600%2CSystem.Int32%2CSystem.Boolean%7D%29> to filter a sequence based on a predicate that involves the index of each element.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#111](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#111)]
 [!code-vb[System.Linq.Enumerable#111](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#111)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-2438">
            <paramref name="source" /> lub <paramref name="predicate" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2438">
              <paramref name="source" /> or <paramref name="predicate" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
    <Member MemberName="Zip&lt;TFirst,TSecond,TResult&gt;">
      <MemberSignature Language="C#" Value="public static System.Collections.Generic.IEnumerable&lt;TResult&gt; Zip&lt;TFirst,TSecond,TResult&gt; (this System.Collections.Generic.IEnumerable&lt;TFirst&gt; first, System.Collections.Generic.IEnumerable&lt;TSecond&gt; second, Func&lt;TFirst,TSecond,TResult&gt; resultSelector);" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig class System.Collections.Generic.IEnumerable`1&lt;!!TResult&gt; Zip&lt;TFirst, TSecond, TResult&gt;(class System.Collections.Generic.IEnumerable`1&lt;!!TFirst&gt; first, class System.Collections.Generic.IEnumerable`1&lt;!!TSecond&gt; second, class System.Func`3&lt;!!TFirst, !!TSecond, !!TResult&gt; resultSelector) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Linq.Enumerable.Zip``3(System.Collections.Generic.IEnumerable{``0},System.Collections.Generic.IEnumerable{``1},System.Func{``0,``1,``2})" />
      <MemberSignature Language="VB.NET" Value="&lt;Extension()&gt;&#xA;Public Function Zip(Of TFirst, TSecond, TResult) (first As IEnumerable(Of TFirst), second As IEnumerable(Of TSecond), resultSelector As Func(Of TFirst, TSecond, TResult)) As IEnumerable(Of TResult)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA;generic &lt;typename TFirst, typename TSecond, typename TResult&gt;&#xA;[System::Runtime::CompilerServices::Extension]&#xA; static System::Collections::Generic::IEnumerable&lt;TResult&gt; ^ Zip(System::Collections::Generic::IEnumerable&lt;TFirst&gt; ^ first, System::Collections::Generic::IEnumerable&lt;TSecond&gt; ^ second, Func&lt;TFirst, TSecond, TResult&gt; ^ resultSelector);" />
      <MemberSignature Language="F#" Value="static member Zip : seq&lt;'First&gt; * seq&lt;'Second&gt; * Func&lt;'First, 'Second, 'Result&gt; -&gt; seq&lt;'Result&gt;" Usage="System.Linq.Enumerable.Zip (first, second, resultSelector)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Linq</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
        <AssemblyVersion>4.1.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.0.0</AssemblyVersion>
        <AssemblyVersion>4.2.1.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>System.Core</AssemblyName>
        <AssemblyVersion>2.0.5.0</AssemblyVersion>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <AssemblyInfo>
        <AssemblyName>netstandard</AssemblyName>
        <AssemblyVersion>2.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Collections.Generic.IEnumerable&lt;TResult&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TFirst" />
        <TypeParameter Name="TSecond" />
        <TypeParameter Name="TResult" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="first" Type="System.Collections.Generic.IEnumerable&lt;TFirst&gt;" RefType="this" />
        <Parameter Name="second" Type="System.Collections.Generic.IEnumerable&lt;TSecond&gt;" />
        <Parameter Name="resultSelector" Type="System.Func&lt;TFirst,TSecond,TResult&gt;" />
      </Parameters>
      <Docs>
        <typeparam name="TFirst">
          <span data-ttu-id="e3165-2439">Typ elementów pierwszej sekwencji wejściowych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2439">The type of the elements of the first input sequence.</span>
          </span>
        </typeparam>
        <typeparam name="TSecond">
          <span data-ttu-id="e3165-2440">Typ elementów drugiej sekwencji wejściowych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2440">The type of the elements of the second input sequence.</span>
          </span>
        </typeparam>
        <typeparam name="TResult">
          <span data-ttu-id="e3165-2441">Typ elementów sekwencji wynik.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2441">The type of the elements of the result sequence.</span>
          </span>
        </typeparam>
        <param name="first">
          <span data-ttu-id="e3165-2442">Pierwsza sekwencja do scalenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2442">The first sequence to merge.</span>
          </span>
        </param>
        <param name="second">
          <span data-ttu-id="e3165-2443">Drugiej sekwencji do scalenia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2443">The second sequence to merge.</span>
          </span>
        </param>
        <param name="resultSelector">
          <span data-ttu-id="e3165-2444">Funkcja, która określa sposób scalania elementów z dwóch sekwencji.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2444">A function that specifies how to merge the elements from the two sequences.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="e3165-2445">Dotyczy określonej funkcji odpowiadające elementy dwóch sekwencji, produkcji sekwencji wyników.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2445">Applies a specified function to the corresponding elements of two sequences, producing a sequence of the results.</span>
          </span>
        </summary>
        <returns>
          <span data-ttu-id="e3165-2446">
            <see cref="T:System.Collections.Generic.IEnumerable`1" /> Zawierający scalone elementy dwóch sekwencji wejściowych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2446">An <see cref="T:System.Collections.Generic.IEnumerable`1" /> that contains merged elements of two input sequences.</span>
          </span>
        </returns>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="e3165-2447">Ta metoda jest implementowana za pomocą odroczonego wykonania.</span><span class="sxs-lookup"><span data-stu-id="e3165-2447">This method is implemented by using deferred execution.</span></span> <span data-ttu-id="e3165-2448">Bezpośrednio zwracana wartość jest obiektem, który przechowuje wszystkie informacje wymagane do wykonania akcji.</span><span class="sxs-lookup"><span data-stu-id="e3165-2448">The immediate return value is an object that stores all the information that is required to perform the action.</span></span> <span data-ttu-id="e3165-2449">Zapytanie, reprezentowane przez tę metodę nie jest wykonywana do czasu, przez wywołanie obiekt jest zostanie wyliczonly jego `GetEnumerator` metoda bezpośrednio lub za pomocą `foreach` w języku Visual C# lub `For Each` w języku Visual Basic.</span><span class="sxs-lookup"><span data-stu-id="e3165-2449">The query represented by this method is not executed until the object is enumerated either by calling its `GetEnumerator` method directly or by using `foreach` in Visual C# or `For Each` in Visual Basic.</span></span>  
  
 <span data-ttu-id="e3165-2450">Metoda scala każdego elementu pierwszej sekwencji z elementu, który ma ten sam indeks w drugiej sekwencji.</span><span class="sxs-lookup"><span data-stu-id="e3165-2450">The method merges each element of the first sequence with an element that has the same index in the second sequence.</span></span> <span data-ttu-id="e3165-2451">Jeżeli sekwencje mają taką samą liczbę elementów metody scala sekwencji, dopóki nie zostanie osiągnięty koniec jeden z nich.</span><span class="sxs-lookup"><span data-stu-id="e3165-2451">If the sequences do not have the same number of elements, the method merges sequences until it reaches the end of one of them.</span></span> <span data-ttu-id="e3165-2452">Na przykład jeśli jednej sekwencji ma trzy elementy, a druga ma cztery sekwencji wynik ma tylko trzy elementy.</span><span class="sxs-lookup"><span data-stu-id="e3165-2452">For example, if one sequence has three elements and the other one has four, the result sequence will have only three elements.</span></span>  
  
   
  
## Examples  
 <span data-ttu-id="e3165-2453">Poniższy przykład kodu demonstruje sposób używania <xref:System.Linq.Enumerable.Zip%2A> metodę, aby scalić dwóch sekwencji.</span><span class="sxs-lookup"><span data-stu-id="e3165-2453">The following code example demonstrates how to use the <xref:System.Linq.Enumerable.Zip%2A> method to merge two sequences.</span></span>  
  
 [!code-csharp[System.Linq.Enumerable#200](~/samples/snippets/csharp/VS_Snippets_CLR_System/system.Linq.Enumerable/CS/enumerable.cs#200)]
 [!code-vb[System.Linq.Enumerable#200](~/samples/snippets/visualbasic/VS_Snippets_CLR_System/system.Linq.Enumerable/VB/Enumerable.vb#200)]  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="e3165-2454">
            <paramref name="first" /> lub <paramref name="second" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="e3165-2454">
              <paramref name="first" /> or <paramref name="second" /> is <see langword="null" />.</span>
          </span>
        </exception>
      </Docs>
    </Member>
  </Members>
</Type>