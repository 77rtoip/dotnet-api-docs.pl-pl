<Type Name="IQueryable&lt;T&gt;" FullName="System.Linq.IQueryable&lt;T&gt;">
  <Metadata><Meta Name="ms.openlocfilehash" Value="94591eb679e306791135ec572f82d3e35573ab2e" /><Meta Name="ms.sourcegitcommit" Value="a3e01ec36374fac54a55add0dcc1e754e394abeb" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="03/30/2019" /><Meta Name="ms.locfileid" Value="58694475" /></Metadata><TypeSignature Language="C#" Value="public interface IQueryable&lt;out T&gt; : System.Collections.Generic.IEnumerable&lt;out T&gt;, System.Linq.IQueryable" />
  <TypeSignature Language="ILAsm" Value=".class public interface auto ansi abstract IQueryable`1&lt;+ T&gt; implements class System.Collections.Generic.IEnumerable`1&lt;!T&gt;, class System.Collections.IEnumerable, class System.Linq.IQueryable" />
  <TypeSignature Language="DocId" Value="T:System.Linq.IQueryable`1" />
  <TypeSignature Language="VB.NET" Value="Public Interface IQueryable(Of Out T)&#xA;Implements IEnumerable(Of Out T), IQueryable" />
  <TypeSignature Language="C++ CLI" Value="generic &lt;typename T&gt;&#xA;public interface class IQueryable : System::Collections::Generic::IEnumerable&lt;T&gt;, System::Linq::IQueryable" />
  <TypeSignature Language="F#" Value="type IQueryable&lt;'T&gt; = interface&#xA;    interface seq&lt;'T&gt;&#xA;    interface IQueryable&#xA;    interface IEnumerable" />
  <AssemblyInfo>
    <AssemblyName>System.Linq.Expressions</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.10.0</AssemblyVersion>
    <AssemblyVersion>4.1.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.0.0</AssemblyVersion>
    <AssemblyVersion>4.2.1.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>System.Core</AssemblyName>
    <AssemblyVersion>2.0.5.0</AssemblyVersion>
    <AssemblyVersion>3.5.0.0</AssemblyVersion>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <AssemblyInfo>
    <AssemblyName>netstandard</AssemblyName>
    <AssemblyVersion>2.0.0.0</AssemblyVersion>
    <AssemblyVersion>2.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <TypeParameters>
    <TypeParameter Name="T">
      <Constraints>
        <ParameterAttribute>Covariant</ParameterAttribute>
      </Constraints>
    </TypeParameter>
  </TypeParameters>
  <Interfaces>
    <Interface>
      <InterfaceName>System.Collections.Generic.IEnumerable&lt;T&gt;</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Collections.IEnumerable</InterfaceName>
    </Interface>
    <Interface>
      <InterfaceName>System.Linq.IQueryable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <typeparam name="T">Typ danych w źródle danych.</typeparam>
    <summary>Oferuje funkcje, aby ocenić zapytania względem źródła danych z konkretnych, w którym jest znany typ danych.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Linq.IQueryable%601> Interfejsu jest przeznaczony do wdrażania przez dostawców zapytania.  
  
 Ten interfejs dziedziczy <xref:System.Collections.Generic.IEnumerable%601> interfejsu tak, że jeśli termin reprezentuje zapytanie, mogą być wyliczane wyników tej kwerendy. Wyliczenie wymusza na drzewo wyrażenia, skojarzone z <xref:System.Linq.IQueryable%601> obiektu do wykonania. Zapytania, które nie zwracają wartości wyliczenia są wykonywane podczas <xref:System.Linq.IQueryProvider.Execute%60%601%28System.Linq.Expressions.Expression%29> metoda jest wywoływana.  
  
 Definicja "wykonania drzewa wyrażenie" jest specyficzne dla dostawcy zapytania. Na przykład może obejmować tłumaczenia drzewa wyrażeń język zapytań, odpowiednia dla źródła danych.  
  
 <xref:System.Linq.IQueryable%601> Interfejs umożliwia polimorficznych zapytań. Oznacza to ponieważ zapytania dotyczącego `IQueryable` źródło danych jest przedstawiana jako drzewo wyrażenia, mogą być wykonywane przed różnego rodzaju źródłami danych.  
  
 `static` (`Shared` w języku Visual Basic) metody zdefiniowanej w klasie <xref:System.Linq.Queryable> (z wyjątkiem <xref:System.Linq.Queryable.AsQueryable%2A>, <xref:System.Linq.Queryable.ThenBy%2A>, i <xref:System.Linq.Queryable.ThenByDescending%2A>) rozszerzyć obiektów typów, które implementują <xref:System.Linq.IQueryable%601> interfejsu.  
  
 Aby uzyskać więcej informacji na temat tworzenia własnego dostawcy LINQ, zobacz [LINQ: Konstruowania modułu dostawcy IQueryable](https://go.microsoft.com/fwlink/?LinkID=112370) na blogi MSDN.  
  
 ]]></format>
    </remarks>
    <altmember cref="T:System.Linq.Queryable" />
  </Docs>
  <Members />
</Type>