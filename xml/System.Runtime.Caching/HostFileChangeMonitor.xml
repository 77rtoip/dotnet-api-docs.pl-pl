<Type Name="HostFileChangeMonitor" FullName="System.Runtime.Caching.HostFileChangeMonitor">
  <Metadata><Meta Name="ms.openlocfilehash" Value="e8b1610a62baf3546fb78981c35d7ef99b364f66" /><Meta Name="ms.sourcegitcommit" Value="f1d16425528e237257ca3b58eb49217a514849ea" /><Meta Name="ms.translationtype" Value="MT" /><Meta Name="ms.contentlocale" Value="pl-PL" /><Meta Name="ms.lasthandoff" Value="04/24/2019" /><Meta Name="ms.locfileid" Value="64120851" /></Metadata><TypeSignature Language="C#" Value="public sealed class HostFileChangeMonitor : System.Runtime.Caching.FileChangeMonitor" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi sealed beforefieldinit HostFileChangeMonitor extends System.Runtime.Caching.FileChangeMonitor" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Caching.HostFileChangeMonitor" />
  <TypeSignature Language="VB.NET" Value="Public NotInheritable Class HostFileChangeMonitor&#xA;Inherits FileChangeMonitor" />
  <TypeSignature Language="C++ CLI" Value="public ref class HostFileChangeMonitor sealed : System::Runtime::Caching::FileChangeMonitor" />
  <TypeSignature Language="F#" Value="type HostFileChangeMonitor = class&#xA;    inherit FileChangeMonitor" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Caching</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Runtime.Caching.FileChangeMonitor</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>Monitoruje ścieżek plików i katalogów i powiadamia w pamięci podręcznej zmian monitorowanych elementów. Klasa ta nie może być dziedziczona.</summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <xref:System.Runtime.Caching.HostFileChangeMonitor> Klasa jest konkretną implementację <xref:System.Runtime.Caching.FileChangeMonitor> typu. Ta klasa jest zapieczętowany, w związku z tym nie może zostać rozszerzony. Ta klasa jest przydatna, jeśli chcesz użyć istniejącej implementacji pamięci podręcznej i monitorowanie plików i katalogów do zmiany.  
  
 Dla każdego określonego pliku lub ścieżkę do katalogu <xref:System.Runtime.Caching.HostFileChangeMonitor> klasy wyzwala powiadomienie o zmianie, jeśli wystąpi dowolne z następujących zmian:  
  
-   Nazwa pliku monitorowanych lub zmiany w katalogu.  
  
-   Określony plik lub katalog nie istniał w momencie monitor, który został utworzony, ale zostało utworzone później. Innymi słowy plik lub katalog został utworzony w zakresie monitorowanych elementów.  
  
-   Zmienić rozmiar pliku monitorowane.  
  
-   Zawartość pliku monitorowanych zmieniona lub zawartość katalogu monitorowanych zmieniony.  
  
-   Listy kontroli dostępu (ACL) dla pliku lub katalogu została zmieniona.  
  
-   Usunięto monitorowanego pliku lub katalogu.  
  
 Jeśli zbyt dużej liczby zmian dla monitorowanych pliku lub katalogu, w tym samym czasie <xref:System.Runtime.Caching.HostFileChangeMonitor> wystąpienia, mogą utracić śledzenie określonych zmian. W tym scenariuszu <xref:System.Runtime.Caching.HostFileChangeMonitor> klasy wyzwala powiadomienie o zmianie. Ten scenariusz jest prawdopodobnie wystąpią podczas <xref:System.Runtime.Caching.HostFileChangeMonitor> wystąpienia monitoruje katalog, a wiele zmianach w zakresie strukturę katalogów w krótkim czasie.  
  
 Ponieważ celem <xref:System.Runtime.Caching.HostFileChangeMonitor> klasy jest tylko do sygnalizowania, że wprowadzono zmianę między zestawu monitorowana pliki i katalogi, nie uważa się ważne, aby uzyskać szczegółowe informacje o określonej zmiany nie są przechwytywane. Celem <xref:System.Runtime.Caching.HostFileChangeMonitor> klasa jest zapewnienie powiadomienie, że stan zmienione tak, że wpis pamięci podręcznej (lub wpisy) może zostać wykluczony. Ponieważ <xref:System.Runtime.Caching.HostFileChangeMonitor> klasy nie wskazuje dokładnie co zmieniło, śledzenia zmian wewnętrznych przepełnienia jest bez znaczenia.  
  
 Jeśli użytkownik poda ścieżki do <xref:System.Runtime.Caching.HostFileChangeMonitor> ścieżki wystąpienia, katalogów i plików muszą być pełnej ścieżki do katalogu lub pliku. Ścieżki względne i symboli wieloznacznych w ścieżkach są niedozwolone.  
  
 Gdy <xref:System.Runtime.Caching.HostFileChangeMonitor> klasa jest używana w aplikacji ASP.NET, tożsamość Windows, która jest używana do uzyskiwania dostępu do monitorowanych elementów jest tożsamość aplikacji dla aplikacji ASP.NET. Innymi słowy tożsamość aplikacji będą się jedną z następujących czynności:  
  
-   Tożsamości procesu.  
  
-   Tożsamość skonfigurowanej aplikacji.  
  
-   Poświadczenie UNC, jeśli aplikacja jest uruchomiona w udziale UNC.  
  
 Gdy <xref:System.Runtime.Caching.HostFileChangeMonitor> klasa jest używana w przypadku aplikacji ASP.NET bez <xref:System.IO.FileSystemWatcher> klasa jest używana wewnętrznie w celu monitorowania plików. W rezultacie niezależnie od listy kontroli dostępu (ACL), który ma zastosowanie do monitorowanego pliku lub katalogu jest stosowany do tożsamości Windows bieżącego wątku.  
  
> [!NOTE]
>  Obiekty wywołujące muszą mieć odpowiedni poziom uprawnień zabezpieczenia dostępu kodu i musi mieć uprawnienia systemu plików NTFS do katalogów wszystkie monitorowane i ścieżki.  
  
   
  
## Examples  
 Poniższy przykład tworzy element pamięci podręcznej, która używa <xref:System.Runtime.Caching.HostFileChangeMonitor> obiektów do monitorowania stanu źródła danych (jest to plik) w systemie plików. Wpis pamięci podręcznej jest definiowana za pomocą <xref:System.Runtime.Caching.CacheItemPolicy> obiektu, aby podać szczegóły wykluczania i wygaśnięcia wpisu pamięci podręcznej.  
  
 [!code-csharp[CachingASPNetApplications#1](~/samples/snippets/csharp/VS_Snippets_WebNet/cachingaspnetapplications/cs/default.aspx.cs#1)]
 [!code-vb[CachingASPNetApplications#1](~/samples/snippets/visualbasic/VS_Snippets_WebNet/cachingaspnetapplications/vb/default.aspx.vb#1)]  
  
 ]]></format>
    </remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public HostFileChangeMonitor (System.Collections.Generic.IList&lt;string&gt; filePaths);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Collections.Generic.IList`1&lt;string&gt; filePaths) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.HostFileChangeMonitor.#ctor(System.Collections.Generic.IList{System.String})" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (filePaths As IList(Of String))" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; HostFileChangeMonitor(System::Collections::Generic::IList&lt;System::String ^&gt; ^ filePaths);" />
      <MemberSignature Language="F#" Value="new System.Runtime.Caching.HostFileChangeMonitor : System.Collections.Generic.IList&lt;string&gt; -&gt; System.Runtime.Caching.HostFileChangeMonitor" Usage="new System.Runtime.Caching.HostFileChangeMonitor filePaths" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="filePaths" Type="System.Collections.Generic.IList&lt;System.String&gt;" />
      </Parameters>
      <Docs>
        <param name="filePaths">Lista zawiera jedną lub więcej ścieżek katalogów lub ścieżki pliku do monitorowania.</param>
        <summary>Inicjuje nowe wystąpienie klasy <see cref="T:System.Runtime.Caching.HostFileChangeMonitor" /> klasy.</summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Wywołania <xref:System.Runtime.Caching.HostFileChangeMonitor.%23ctor%2A> konstruktora musi podać wartości innych niż null `filePaths` parametru. Jako minimum Konstruktor weryfikuje zbiór ścieżki, który jest przekazywany do niego, a następnie inicjuje monitorowanie tych ścieżek.  
  
> [!NOTE]
>  Konstruktor wykonuje tylko ciąg sprawdzania poprawności nazwy ścieżki. Nie nadać postać kanoniczną adresowi ścieżki lub sprawdzić, czy istnieją ścieżki.  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.ArgumentNullException"><paramref name="filePaths" /> jest <see langword="null" />.</exception>
        <exception cref="T:System.ArgumentException"><paramref name="filePaths" /> zawiera elementy, zerowego.  
  
—lub— 
Ścieżka w <paramref name="filePaths" /> listy <see langword="null" /> ani być pustym ciągiem.</exception>
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected override void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.HostFileChangeMonitor.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected Overrides Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; override void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="override this.Dispose : bool -&gt; unit" Usage="hostFileChangeMonitor.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">To be added.</param>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="FilePaths">
      <MemberSignature Language="C#" Value="public override System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt; FilePaths { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class System.Collections.ObjectModel.ReadOnlyCollection`1&lt;string&gt; FilePaths" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Caching.HostFileChangeMonitor.FilePaths" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property FilePaths As ReadOnlyCollection(Of String)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::Collections::ObjectModel::ReadOnlyCollection&lt;System::String ^&gt; ^ FilePaths { System::Collections::ObjectModel::ReadOnlyCollection&lt;System::String ^&gt; ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.FilePaths : System.Collections.ObjectModel.ReadOnlyCollection&lt;string&gt;" Usage="System.Runtime.Caching.HostFileChangeMonitor.FilePaths" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.Collections.ObjectModel.ReadOnlyCollection&lt;System.String&gt;</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera kolekcję katalogów i ścieżki plików, które zostało przekazane do <see cref="M:System.Runtime.Caching.HostFileChangeMonitor.#ctor(System.Collections.Generic.IList{System.String})" /> konstruktora.</summary>
        <value>Kolekcja ścieżek plików i katalogów.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="LastModified">
      <MemberSignature Language="C#" Value="public override DateTimeOffset LastModified { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance valuetype System.DateTimeOffset LastModified" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Caching.HostFileChangeMonitor.LastModified" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property LastModified As DateTimeOffset" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property DateTimeOffset LastModified { DateTimeOffset get(); };" />
      <MemberSignature Language="F#" Value="member this.LastModified : DateTimeOffset" Usage="System.Runtime.Caching.HostFileChangeMonitor.LastModified" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.DateTimeOffset</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera wartość tylko do odczytu, która wskazuje godzinę ostatniego zapisu monitorowanego pliku lub ścieżki.</summary>
        <value>Ostatni zapis czasu monitorowanego pliku lub ścieżki.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Jeśli monitor zmian plików jest monitorowanie wielu plików lub ścieżki, ta właściwość zwraca ostatni czas zapisu w zestawie wszystkie pliki i ścieżki.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="UniqueId">
      <MemberSignature Language="C#" Value="public override string UniqueId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UniqueId" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Caching.HostFileChangeMonitor.UniqueId" />
      <MemberSignature Language="VB.NET" Value="Public Overrides ReadOnly Property UniqueId As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual property System::String ^ UniqueId { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UniqueId : string" Usage="System.Runtime.Caching.HostFileChangeMonitor.UniqueId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Attributes>
        <Attribute FrameworkAlternate="netframework-4.0">
          <AttributeName>get: System.Runtime.TargetedPatchingOptOut("Performance critical to inline this type of method across NGen image boundaries")</AttributeName>
        </Attribute>
      </Attributes>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>Pobiera identyfikator <see cref="T:System.Runtime.Caching.HostFileChangeMonitor" /> wystąpienie, które jest na podstawie zestawu monitorowana katalogów i ścieżki plików.</summary>
        <value>Identyfikator monitora zmiany.</value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 Ciąg, który tworzy <xref:System.Runtime.Caching.HostFileChangeMonitor.UniqueId%2A> wartość właściwości jest tworzony z następujące elementy:  
  
-   Ścieżka pliku lub katalogu.  
  
-   Ostatni czas zapisu na czas UTC, mierzone jako Takty, ale reprezentowane jako ciąg szesnastkowy.  
  
-   Rozmiar pliku w postaci ciągu szesnastkowego.  
  
 Jeśli monitor zmiany plików są monitorowane wiele ścieżek, dane zwracane przez tę właściwość jest połączonych w jeden ciąg dla wszystkich monitorowanych katalogów i ścieżki plików.  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
  </Members>
</Type>