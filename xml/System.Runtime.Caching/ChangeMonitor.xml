<Type Name="ChangeMonitor" FullName="System.Runtime.Caching.ChangeMonitor">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="ef439688d7b98a238cf8640eb07e63804432a3ba" />
    <Meta Name="ms.sourcegitcommit" Value="d31dc2ede16f6f7bc64e90d9f897ff54c4e3869b" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="04/03/2018" />
    <Meta Name="ms.locfileid" Value="30564685" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class ChangeMonitor : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ChangeMonitor extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Caching.ChangeMonitor" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ChangeMonitor&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class ChangeMonitor abstract : IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Caching</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="00750-101">Udostępnia klasę podstawową dla typu pochodnego niestandardowego, który monitoruje zmiany w stanie danych, która zależy od elementu pamięci podręcznej.</span>
      <span class="sxs-lookup">
        <span data-stu-id="00750-101">Provides a base class for a derived custom type that monitors changes in the state of the data which a cache item depends on.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00750-102"><xref:System.Runtime.Caching.ChangeMonitor> Klasa jest używana jako klasa podstawowa dla klasy pochodnej monitor, które są przeznaczone do pamięci podręcznej konkretnej implementacji.</span><span class="sxs-lookup"><span data-stu-id="00750-102">The <xref:System.Runtime.Caching.ChangeMonitor> class is used as the base class for derived monitor classes that are specialized for particular cache implementations.</span></span> <span data-ttu-id="00750-103">A <xref:System.Runtime.Caching.ChangeMonitor> wystąpienia monitoruje zmiany w stanie danych, która zależy od elementu pamięci podręcznej.</span><span class="sxs-lookup"><span data-stu-id="00750-103">A <xref:System.Runtime.Caching.ChangeMonitor> instance monitors changes in the state of data which a cache item depends on.</span></span> <span data-ttu-id="00750-104">Na przykład element może być jednostki pliku lub danych, których zawartość są buforowane.</span><span class="sxs-lookup"><span data-stu-id="00750-104">For example, the item can be a file or data entity whose contents are cached.</span></span> <span data-ttu-id="00750-105">Jednostka danych lub plik jest aktualizowany, również należy zmienić wpis pamięci podręcznej skojarzone.</span><span class="sxs-lookup"><span data-stu-id="00750-105">If the file or data entity is updated, the associated cache entry must be changed also.</span></span> <span data-ttu-id="00750-106">Wspólne elementy, które mogą być monitorowane Dołącz jednostek danych (np. pola bazy danych wartości, wierszy i tabele), inny wpis pamięci podręcznej i pliki i atrybutów pliku.</span><span class="sxs-lookup"><span data-stu-id="00750-106">Common items that can be monitored include data entities (such as database fields, values, rows, or tables), another cache entry, and files and file attributes.</span></span>  
  
 <span data-ttu-id="00750-107">Zmiany w stanie zależność jest zmiany zależności.</span><span class="sxs-lookup"><span data-stu-id="00750-107">A dependency change is a change in the state of a dependency.</span></span> <span data-ttu-id="00750-108">W implementacji typowe pamięci podręcznej po <xref:System.Runtime.Caching.ChangeMonitor> wystąpienia powiadamia pamięci podręcznej, która została zmieniona zależność, wymaganych akcji, na przykład unieważnia wpisu pamięci podręcznej wstawionego wykonuje pamięci podręcznej.</span><span class="sxs-lookup"><span data-stu-id="00750-108">In a typical cache implementation, after a <xref:System.Runtime.Caching.ChangeMonitor> instance notifies the cache that a dependency has changed, the cache performs the required action, such as invalidating the inserted cache entry.</span></span>  
  
 <span data-ttu-id="00750-109">Pochodnych <xref:System.Runtime.Caching.ChangeMonitor> klasy można dostosować, aby monitorować zmiany zależności dla określonych danych do różnych magazynów.</span><span class="sxs-lookup"><span data-stu-id="00750-109">Derived <xref:System.Runtime.Caching.ChangeMonitor> classes can be customized to monitor dependency changes for specific different data stores.</span></span> <span data-ttu-id="00750-110">Na przykład są implementacje pamięć podręczna systemu plików, w pamięci fizycznej lub bazy danych.</span><span class="sxs-lookup"><span data-stu-id="00750-110">For example, there are cache implementations for a file system, physical memory, or a database.</span></span> <span data-ttu-id="00750-111"><xref:System.Runtime.Caching.ChangeMonitor> Klasa sprawdza zmiany wprowadzone poza pamięci podręcznej, a następnie powiadamia pamięci podręcznej, które nastąpiły zmiany.</span><span class="sxs-lookup"><span data-stu-id="00750-111">The <xref:System.Runtime.Caching.ChangeMonitor> class examines changes that occur outside the cache, and then alerts the cache that changes have occurred.</span></span>  
  
 <span data-ttu-id="00750-112">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] Zawiera następujące klasy, które pochodzą z <xref:System.Runtime.Caching.ChangeMonitor> klasy:</span><span class="sxs-lookup"><span data-stu-id="00750-112">The [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] includes the following classes that derive from <xref:System.Runtime.Caching.ChangeMonitor> class:</span></span>  
  
-   <xref:System.Runtime.Caching.CacheEntryChangeMonitor>  
  
-   <xref:System.Runtime.Caching.FileChangeMonitor>  
  
-   <xref:System.Runtime.Caching.HostFileChangeMonitor>  
  
-   <xref:System.Runtime.Caching.SqlChangeMonitor>  
  
 <span data-ttu-id="00750-113">Każda z tych klas współpracuje z różnymi typami zależności.</span><span class="sxs-lookup"><span data-stu-id="00750-113">Each of these classes works with different types of dependencies.</span></span> <span data-ttu-id="00750-114">Na przykład pochodnej <xref:System.Runtime.Caching.FileChangeMonitor> klasa śledzi zmiany w pamięci podręcznej danych systemu plików (pliki i foldery), która zależy od elementu pamięci podręcznej.</span><span class="sxs-lookup"><span data-stu-id="00750-114">For example, the derived <xref:System.Runtime.Caching.FileChangeMonitor> class monitors changes to a cache for file system data (files and folders) that the cache item depends on.</span></span>  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="00750-115">Ten typ jest bezpieczny wątkowo.</span>
      <span class="sxs-lookup">
        <span data-stu-id="00750-115">This type is thread safe.</span>
      </span>
    </threadsafe>
    <block subset="none" type="overrides">
      <para>
        <span data-ttu-id="00750-116">W przypadku utworzenia niestandardowego implementację buforu lub zmianę pochodnej monitorować typu, należy wykonać pewne wskazówki.</span>
        <span class="sxs-lookup">
          <span data-stu-id="00750-116">If you create a custom cache implementation or a derived change monitor type, you must follow certain guidelines.</span>
        </span>
        <span data-ttu-id="00750-117">Poniższa lista zawiera podsumowanie poniższych wskazówek.</span>
        <span class="sxs-lookup">
          <span data-stu-id="00750-117">The following list summarizes these guidelines.</span>
        </span>
        <span data-ttu-id="00750-118">Aby uzyskać więcej informacji zobacz dokumentację dla każdej metody lub właściwości.</span>
        <span class="sxs-lookup">
          <span data-stu-id="00750-118">For more information, see the documentation for individual methods or properties.</span>
        </span>  
  
-   <span data-ttu-id="00750-119">Należy ustawić konstruktora klasy pochodnej <see cref="P:System.Runtime.Caching.ChangeMonitor.UniqueId" /> właściwości, rozpoczęcie monitorowania i Wywołaj <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> metoda przed metoda zwraca.</span><span class="sxs-lookup"><span data-stu-id="00750-119">The constructor of a derived class must set the <see cref="P:System.Runtime.Caching.ChangeMonitor.UniqueId" /> property, begin monitoring, and call <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> method before the method returns.</span></span><span data-ttu-id="00750-120">Jeśli konstruktora napotka błąd podczas konstrukcje, musi mieć do usuwania zasobów konstruktora można wywołać tylko <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> przeciążenia po <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> metoda jest wywoływana, ponieważ <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> zgłosi przeciążenia <see cref="T:System.InvalidOperationException" /> wyjątek, jeśli inicjowanie nie zostało ukończone.</span><span class="sxs-lookup"><span data-stu-id="00750-120">If a constructor encounters an error during constructions and must have to dispose of resources, the constructor can only call the <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> overload after the <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> method is called because the <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> overload will throw an <see cref="T:System.InvalidOperationException" /> exception if initialization is not completed.</span></span>  
  
-   <span data-ttu-id="00750-121">W przypadku wystąpienia zmian w danych, które są monitorowane przed inicjowania ukończenia, należy wywołać konstruktora <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> metoda przed wywołaniem <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> metody.</span><span class="sxs-lookup"><span data-stu-id="00750-121">If changes occur in the data that is being monitored before initialization is complete, the constructor must call the <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> method before calling the <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> method.</span></span>  
  
-   <span data-ttu-id="00750-122">Po pochodnego <see cref="T:System.Runtime.Caching.ChangeMonitor" /> tworzenia wystąpienia typu klasy, należy wstawić monitor do niestandardowego <see cref="T:System.Runtime.Caching.ObjectCache" /> implementacji.</span><span class="sxs-lookup"><span data-stu-id="00750-122">After a derived <see cref="T:System.Runtime.Caching.ChangeMonitor" /> type is instantiated, you must insert the monitor into a custom <see cref="T:System.Runtime.Caching.ObjectCache" /> implementation.</span></span><span data-ttu-id="00750-123">Lub wywołania po zakończeniu pracy monitora zmiany <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> metody.</span><span class="sxs-lookup"><span data-stu-id="00750-123">Or if you are finished using the change monitor, call the <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> method.</span></span>  
  
-   <span data-ttu-id="00750-124">Po <see cref="T:System.Runtime.Caching.ChangeMonitor" /> wystąpienia są wstawiane do <see cref="T:System.Runtime.Caching.ObjectCache" /> implementacji <see cref="T:System.Runtime.Caching.ObjectCache" /> wystąpienia wymagają usunięciu monitor zmiany.</span><span class="sxs-lookup"><span data-stu-id="00750-124">After a <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instance is inserted into a <see cref="T:System.Runtime.Caching.ObjectCache" /> implementation, the <see cref="T:System.Runtime.Caching.ObjectCache" /> instance require that the change monitor is disposed.</span></span><span data-ttu-id="00750-125">Nawet jeśli wstawiania jest nieprawidłowy i powoduje zgłoszenie wyjątku <see cref="T:System.Runtime.Caching.ObjectCache" /> implementacji należy wywołać <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> przeciążenia.</span><span class="sxs-lookup"><span data-stu-id="00750-125">Even if the insertion is invalid and causes an exception, the <see cref="T:System.Runtime.Caching.ObjectCache" /> implementation must call the <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> overload.</span></span>  
  
-   <span data-ttu-id="00750-126">Po wstawieniu do pamięci podręcznej, monitor pochodnej zmiany <see cref="T:System.Runtime.Caching.ObjectCache" /> implementacji należy wywołać <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />, przekazując <see cref="T:System.Runtime.Caching.OnChangedCallback" /> obiektu.</span><span class="sxs-lookup"><span data-stu-id="00750-126">After a derived change monitor is inserted into a cache, the <see cref="T:System.Runtime.Caching.ObjectCache" /> implementation must call <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />, by passing a <see cref="T:System.Runtime.Caching.OnChangedCallback" /> object.</span></span><span data-ttu-id="00750-127"><see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> Metodę można wywołać tylko raz.</span><span class="sxs-lookup"><span data-stu-id="00750-127">The <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> method can be called only one time.</span></span><span data-ttu-id="00750-128">Jeśli zmiana zależności już wystąpił, <see cref="T:System.Runtime.Caching.OnChangedCallback" /> wystąpienie będzie wywoływana natychmiast po <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> jest wywoływana.</span><span class="sxs-lookup"><span data-stu-id="00750-128">If a dependency change has already occurred, the <see cref="T:System.Runtime.Caching.OnChangedCallback" /> instance will be called immediately when <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> is called.</span></span><span data-ttu-id="00750-129">W przeciwnym razie <see cref="T:System.Runtime.Caching.OnChangedCallback" /> wystąpienie zostanie wywołana tylko raz.</span><span class="sxs-lookup"><span data-stu-id="00750-129">Otherwise, the <see cref="T:System.Runtime.Caching.OnChangedCallback" /> instance will be called only one time.</span></span><span data-ttu-id="00750-130">Występuje wywołania jednorazowo, albo po <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> metoda jest wywoływana, ponieważ <see cref="T:System.Runtime.Caching.ChangeMonitor" /> wystąpienia wykryła zmianę, lub gdy <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> wywoływana jest metoda <see cref="T:System.Runtime.Caching.ChangeMonitor" />, cokolwiek nastąpi najpierw.</span><span class="sxs-lookup"><span data-stu-id="00750-130">This one time call occurs either when the <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> method is called because the <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instance detected a change, or when the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> method is called on the <see cref="T:System.Runtime.Caching.ChangeMonitor" />, whichever occurs first.</span></span>  
  
-   <span data-ttu-id="00750-131"><see cref="T:System.Runtime.Caching.OnChangedCallback" /> Wystąpienie, które są udostępniane przez <see cref="T:System.Runtime.Caching.ObjectCache" /> Usuń wpis pamięci podręcznej skojarzonych i określić powód przy użyciu implementacji <see cref="F:System.Web.Caching.CacheItemRemovedReason.DependencyChanged" /> wyliczenia.</span><span class="sxs-lookup"><span data-stu-id="00750-131">The <see cref="T:System.Runtime.Caching.OnChangedCallback" /> instance that is provided by an <see cref="T:System.Runtime.Caching.ObjectCache" /> implementation should remove the associated cache entry and specify a reason by using the <see cref="F:System.Web.Caching.CacheItemRemovedReason.DependencyChanged" /> enumeration.</span></span>  
  
-   <span data-ttu-id="00750-132">A <see cref="T:System.Runtime.Caching.ChangeMonitor" /> można wywołać wystąpienia <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> metody albo przed implementacją pamięci podręcznej została wywołana <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> metody lub po.</span><span class="sxs-lookup"><span data-stu-id="00750-132">A <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instance can call the <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> method either before a cache implementation has called <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> method or after.</span></span><span data-ttu-id="00750-133">Jeśli <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> metoda jest wywoływana przed <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> jest nazywany podstawowym <see cref="T:System.Runtime.Caching.ChangeMonitor" /> implementacji powiadomi pamięci podręcznej, które tego zdarzenia i wyzwoli wywołania zwrotnego do przekazania do <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> natychmiast po <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> jest wywoływana.</span><span class="sxs-lookup"><span data-stu-id="00750-133">If the <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> method is called before <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> is called, the base <see cref="T:System.Runtime.Caching.ChangeMonitor" /> implementation will notify the cache that this has occurred and will trigger the callback to be passed to <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> immediately when <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> is invoked.</span></span><span data-ttu-id="00750-134">Wszystkie dane są przekazywane do stanu <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> metoda jest zapisywane przez monitor zmiany i następnie przekazywane do <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> — metoda podczas <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> wywołania metody.</span><span class="sxs-lookup"><span data-stu-id="00750-134">Any state data that is passed to the <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> method is saved by the change monitor and subsequently passed to the <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> method when the <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> method is invoked.</span></span>  
  
-   <span data-ttu-id="00750-135">Monitor zmianach musi implementować <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> metody.</span><span class="sxs-lookup"><span data-stu-id="00750-135">A change monitor must implement the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> method.</span></span><span data-ttu-id="00750-136">Aby uzyskać więcej informacji, zobacz <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> dokumentacji metody.</span><span class="sxs-lookup"><span data-stu-id="00750-136">For more information, see the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> method documentation.</span></span>  
  
-   <span data-ttu-id="00750-137"><see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> Przeciążenie metody należy wywołać zlikwidować <see cref="T:System.Runtime.Caching.ChangeMonitor" /> wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="00750-137">The <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> method overload must be called to dispose of the <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instance.</span></span><span data-ttu-id="00750-138">Reguły wywoływania metody Dispose są następujące:</span><span class="sxs-lookup"><span data-stu-id="00750-138">The rules for calling Dispose are as follows:</span></span>  
  
    -   <span data-ttu-id="00750-139">Przed wstawieniem elementu do pamięci podręcznej, jest odpowiedzialny za obiekt wywołujący, aby dysponować <see cref="T:System.Runtime.Caching.ChangeMonitor" /> wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="00750-139">Before an item is inserted into the cache, it is the responsibility of caller to dispose of a <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instance.</span></span>  
  
    -   <span data-ttu-id="00750-140">Raz elementu pamięci podręcznej i <see cref="T:System.Runtime.Caching.ChangeMonitor" /> wystąpień, które są skojarzone z nim są przekazywane do pamięci podręcznej, implementujący pamięci podręcznej musi upewnij się, że który <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> metoda jest wywoływana, nawet jeśli insert nie powiedzie się.</span><span class="sxs-lookup"><span data-stu-id="00750-140">Once cache item and the <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instances that are associated with it are passed to a cache, the cache implementer must make sure that that the <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> method is called, even if the insert fails.</span></span>  
  
    -   <span data-ttu-id="00750-141">Po elementu i jego skojarzony <see cref="T:System.Runtime.Caching.ChangeMonitor" /> wystąpienia są przekazywane do pamięci podręcznej, obiekt wywołujący nie musi dysponować zależności, ponieważ podczas <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> metoda jest wywoływana, wywołanie jest traktowane jakby zależność została zmieniona.</span><span class="sxs-lookup"><span data-stu-id="00750-141">After an item and its associated <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instances are passed to a cache, the caller must not dispose the dependency because when the <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> method is called, the call is treated as if the dependency has changed.</span></span><span data-ttu-id="00750-142">W związku z tym <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> metoda jest wywoływana automatycznie.</span><span class="sxs-lookup"><span data-stu-id="00750-142">As a result, the <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> method is automatically invoked.</span></span>  
  
-   <span data-ttu-id="00750-143">Biorąc pod uwagę, te reguły <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> metoda musi zostać wywołana w jednym z następujących sposobów:</span><span class="sxs-lookup"><span data-stu-id="00750-143">Taking these rules into consideration, the <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> method must be called in one of the following ways:</span></span>  
  
    -   <span data-ttu-id="00750-144">Użytkownicy muszą wywoływać <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> przeciążenie metody, jeśli nie wstawić wystąpienia pochodne monitor zmianach do pamięci podręcznej.</span><span class="sxs-lookup"><span data-stu-id="00750-144">Users must call the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> method overload if they decide not to insert the derived change-monitor instance into a cache.</span></span>  
  
    -   <span data-ttu-id="00750-145">Jeśli implementacja próbuje wstawić wystąpienia monitora zmiany do obiektu pamięci podręcznej, ale wstawiania nie powiedzie się, implementacja pamięci podręcznej jest odpowiedzialny za wywoływanie <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> przeciążenia.</span><span class="sxs-lookup"><span data-stu-id="00750-145">If the implementation tries to insert the change-monitor instance into an object cache but the insertion fails, the cache implementation is responsible for calling the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> overload.</span></span><span data-ttu-id="00750-146">Podczas próby wstawienia powoduje zgłoszenie wyjątku, implementację buforu musi dysponować skojarzone zależności.</span><span class="sxs-lookup"><span data-stu-id="00750-146">When the insertion attempt causes an exception, the cache implementation must dispose of any associated dependencies.</span></span>  
  
    -   <span data-ttu-id="00750-147">Jeśli wpis pamięci podręcznej zostanie usunięty, implementację buforu musi również dysponować zależności.</span><span class="sxs-lookup"><span data-stu-id="00750-147">If the cache entry is removed, the cache implementation must also dispose of the dependency.</span></span>  
  
    -   <span data-ttu-id="00750-148">Wewnętrzny wykonania <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> automatycznie wywołuje metodę <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> zarejestrowany przez metodę po wywołuje wywołania zwrotnego <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />.</span><span class="sxs-lookup"><span data-stu-id="00750-148">The internal implementation of the <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> method automatically calls the <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> method after it calls a callback that is registered through <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />.</span></span><block subset="none" type="note"><para><span data-ttu-id="00750-149">To automatyczne wywołanie metody dispose podczas uruchamiania zdarzeń tylko wtedy, gdy inicjowanie <see cref="T:System.Runtime.Caching.ChangeMonitor" /> wystąpienie zostało wcześniej zakończone.</span><span class="sxs-lookup"><span data-stu-id="00750-149">This automatic call to the dispose method during the event firing only occurs if the initialization of the <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instance was previously completed.</span></span></para></block><span data-ttu-id="00750-150">Gdy monitor pochodnej zmiany Konstruktor wywołuje <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> metody, jeśli już zmieniła stan monitora zmiany (czyli stan monitorowanego już zmienione podczas konstruktora było nadal aktywne), a następnie <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> zostanie — metoda automatycznie usuwa monitor zmiany.</span><span class="sxs-lookup"><span data-stu-id="00750-150">When a derived change monitor's constructor calls the <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> method, if the state of the change monitor has already changed (that is, the state that is monitored already changed when the constructor was still active) then the <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> method will automatically dispose of the change monitor.</span></span>  
  
-   <span data-ttu-id="00750-151"><see cref="P:System.Runtime.Caching.ChangeMonitor.HasChanged" /> Właściwość jest ustawiona na <see langword="true" /> po <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> metoda jest wywoływana przez wystąpienia pochodne monitor zmianach, niezależnie od tego, czy <see cref="T:System.Runtime.Caching.OnChangedCallback" /> obiekt został ustawiony przez wywołanie do <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> metody lub nie.</span><span class="sxs-lookup"><span data-stu-id="00750-151">The <see cref="P:System.Runtime.Caching.ChangeMonitor.HasChanged" /> property is set to <see langword="true" /> after the <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> method is called by the derived change-monitor instance, regardless of whether a <see cref="T:System.Runtime.Caching.OnChangedCallback" /> object has been set by a call to the <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> method or not.</span></span></para>
    </block>
    <altmember cref="N:System.Web.Caching" />
    <altmember cref="T:System.Runtime.Caching.ObjectCache" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ChangeMonitor ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.ChangeMonitor.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ChangeMonitor();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="00750-152">Inicjuje nowe wystąpienie klasy <see cref="T:System.Runtime.Caching.ChangeMonitor" /> klasy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00750-152">Initializes a new instance of the <see cref="T:System.Runtime.Caching.ChangeMonitor" /> class.</span>
          </span>
          <span data-ttu-id="00750-153">Ten konstruktor jest wywoływana z konstruktorów w klasach pochodnych w celu zainicjowania klasy podstawowej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00750-153">This constructor is called from constructors in derived classes to initialize the base class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00750-154"><xref:System.Runtime.Caching.ChangeMonitor> Klasa ma konstruktora domyślnego.</span><span class="sxs-lookup"><span data-stu-id="00750-154">The <xref:System.Runtime.Caching.ChangeMonitor> class has a default constructor.</span></span> <span data-ttu-id="00750-155">Jednak klasy które dziedziczą z podstawowym <xref:System.Runtime.Caching.ChangeMonitor> klasy i Zdefiniuj niestandardowe monitorowanie zmian zachowania, należy wykonać inicjowania w konstruktorze.</span><span class="sxs-lookup"><span data-stu-id="00750-155">However, classes that inherit from the base <xref:System.Runtime.Caching.ChangeMonitor> class and define custom change-monitoring behavior must perform initialization in the constructor.</span></span> <span data-ttu-id="00750-156">Aby uzyskać więcej informacji zobacz Uwagi dotyczące obiektów dziedziczących sekcji.</span><span class="sxs-lookup"><span data-stu-id="00750-156">For more information, see the Notes for Inheritors section.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="00750-157">Należy ustawić konstruktora klasy pochodnej <see cref="P:System.Runtime.Caching.ChangeMonitor.UniqueId" /> właściwości, rozpoczęcie monitorowania i Wywołaj <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> klasy przed zwróceniem.</span>
            <span class="sxs-lookup">
              <span data-stu-id="00750-157">The constructor of a derived class must set the <see cref="P:System.Runtime.Caching.ChangeMonitor.UniqueId" /> property, begin monitoring, and call the <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> class before it returns.</span>
            </span>
            <span data-ttu-id="00750-158">Jeśli zmiany zależności, przed zainicjowaniem zostało zakończone (na przykład, jeśli klucz pamięci podręcznej zależna nie zostanie znaleziony w pamięci podręcznej), należy wywołać konstruktora <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> metoda przed wywołaniem <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> metody.</span>
            <span class="sxs-lookup">
              <span data-stu-id="00750-158">If a dependency changes before initialization is complete (for example, if a dependent cache key is not found in the cache), the constructor must call the <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> method before it calls the <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> method.</span>
            </span>
            <span data-ttu-id="00750-159">W takim przypadku można wywołać konstruktora <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> metody tylko po <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> metoda jest wywoływana, ponieważ <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> metoda zgłasza wyjątek, jeśli inicjowanie nie zostało ukończone.</span>
            <span class="sxs-lookup">
              <span data-stu-id="00750-159">In this case, constructor can call the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> method only after the <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> method is called, because the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> method throws an exception if initialization is not completed.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="00750-160">Zwalnia wszelkie zasoby używane przez bieżące wystąpienie klasy <see cref="T:System.Runtime.Caching.ChangeMonitor" /> klasy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00750-160">Releases all resources used by the current instance of the <see cref="T:System.Runtime.Caching.ChangeMonitor" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00750-161"><xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> Metoda jest używana do zwolnienia <xref:System.Runtime.Caching.ChangeMonitor> wystąpienia i powiązanych zasobów.</span><span class="sxs-lookup"><span data-stu-id="00750-161">The <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method is used to release the <xref:System.Runtime.Caching.ChangeMonitor> instance and related resources.</span></span> <span data-ttu-id="00750-162">Publicznego <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> metoda jest wywoływana w celu koordynowania proces usuwania zdarzenia cyklu życia klucza klas pochodnych monitor zmianach (takich jak inicjowanie) i wersji <xref:System.Runtime.Caching.ChangeMonitor> , aby wystąpienie może być bezużytecznych.</span><span class="sxs-lookup"><span data-stu-id="00750-162">The public <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method is invoked to coordinate the disposal process with key life-cycle events of derived change-monitor classes (such as initialization), and to release the <xref:System.Runtime.Caching.ChangeMonitor> instance so that the instance can be garbage collected.</span></span> <span data-ttu-id="00750-163"><xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> Metoda jest implementowana przez klasy pochodnej monitor zmianach zlikwidować ich zasoby zarządzane i niezarządzane.</span><span class="sxs-lookup"><span data-stu-id="00750-163">The <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method is implemented by derived change-monitor classes to dispose of their managed and unmanaged resources.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.ChangeMonitor.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="00750-164">Zwalnia wszystkie zasoby, które są używane przez bieżące wystąpienie klasy <see cref="T:System.Runtime.Caching.ChangeMonitor" /> klasy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00750-164">Releases all resources that are used by the current instance of the <see cref="T:System.Runtime.Caching.ChangeMonitor" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00750-165"><xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> Wywołuje metodę <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> metody klas pochodnych tylko jeden raz, jest ona wywoływana po raz pierwszy.</span><span class="sxs-lookup"><span data-stu-id="00750-165">The <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method invokes the <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method of derived classes only one time, the first time it is called.</span></span> <span data-ttu-id="00750-166">Kolejne wywołania <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> — metoda nie mają żadnego skutku.</span><span class="sxs-lookup"><span data-stu-id="00750-166">Subsequent calls to the <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method have no effect.</span></span> <span data-ttu-id="00750-167">Po wywołaniu metody <xref:System.Runtime.Caching.ChangeMonitor.IsDisposed%2A> właściwość jest ustawiona na `true`.</span><span class="sxs-lookup"><span data-stu-id="00750-167">After the method has been called, the <xref:System.Runtime.Caching.ChangeMonitor.IsDisposed%2A> property is set to `true`.</span></span>  
  
 <span data-ttu-id="00750-168"><xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> Przeciążenia musi zostać wywołana zlikwidować <xref:System.Runtime.Caching.ChangeMonitor> wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="00750-168">The <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> overload must be called to dispose of a <xref:System.Runtime.Caching.ChangeMonitor> instance.</span></span> <span data-ttu-id="00750-169">Wywołanie metody dispose zasady są następujące:</span><span class="sxs-lookup"><span data-stu-id="00750-169">The following are the rules for calling the dispose method:</span></span>  
  
-   <span data-ttu-id="00750-170">Przed wstawieniem elementu do pamięci podręcznej, jest odpowiedzialny za wywołującego zlikwidować <xref:System.Runtime.Caching.ChangeMonitor> wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="00750-170">Before an item is inserted into the cache, it is the caller's responsibility to dispose of a <xref:System.Runtime.Caching.ChangeMonitor> instance.</span></span>  
  
-   <span data-ttu-id="00750-171">Raz elementu pamięci podręcznej i <xref:System.Runtime.Caching.ChangeMonitor> wystąpień, które są skojarzone z nim są przekazywane do pamięci podręcznej, implementujący pamięci podręcznej, który należy się upewnić, że <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> jest wywoływana, nawet jeśli insert nie powiedzie się.</span><span class="sxs-lookup"><span data-stu-id="00750-171">Once cache item and the <xref:System.Runtime.Caching.ChangeMonitor> instances that are associated with it are passed to a cache, the cache implementer that must make sure that <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> is called, even if the insert fails.</span></span>  
  
-   <span data-ttu-id="00750-172">Po elementu i jego skojarzony <xref:System.Runtime.Caching.ChangeMonitor> wystąpienia są przekazywane do pamięci podręcznej, obiekt wywołujący nie musi dysponować zależności, ponieważ podczas <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> metoda jest wywoływana, wywołanie jest traktowane jakby zależność została zmieniona.</span><span class="sxs-lookup"><span data-stu-id="00750-172">After an item and its associated <xref:System.Runtime.Caching.ChangeMonitor> instances are passed to a cache, the caller must not dispose the dependency because when the <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method is called, the call is treated as if the dependency has changed.</span></span> <span data-ttu-id="00750-173">W związku z tym <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> metoda jest wywoływana automatycznie.</span><span class="sxs-lookup"><span data-stu-id="00750-173">As a result, the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method is automatically invoked.</span></span>  
  
-   <span data-ttu-id="00750-174">Biorąc pod uwagę, te reguły <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> metoda musi zostać wywołana w jednym z następujących sposobów:</span><span class="sxs-lookup"><span data-stu-id="00750-174">Taking these rules into consideration, the <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method must be called in one of the following ways:</span></span>  
  
    -   <span data-ttu-id="00750-175">Użytkownicy muszą wywoływać <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> przeciążenie metody, jeśli nie wstawić wystąpienia pochodne monitor zmianach do pamięci podręcznej.</span><span class="sxs-lookup"><span data-stu-id="00750-175">Users must call the <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method overload if they decide not to insert the derived change-monitor instance into a cache.</span></span>  
  
    -   <span data-ttu-id="00750-176">Implementacja pamięci podręcznej jest odpowiedzialny za wywoływanie <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> przeciążenia, jeśli implementacja próbuje wstawić wystąpienia monitora zmiany do obiektu pamięci podręcznej, ale wstawiania nie powiedzie się.</span><span class="sxs-lookup"><span data-stu-id="00750-176">The cache implementation is responsible for calling the <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> overload if the implementation tries to insert the change-monitor instance into an object cache but the insertion fails.</span></span> <span data-ttu-id="00750-177">Podczas próby wstawienia powoduje zgłoszenie wyjątku, implementację buforu musi dysponować skojarzone zależności.</span><span class="sxs-lookup"><span data-stu-id="00750-177">When the insertion attempt causes an exception, the cache implementation must dispose any associated dependencies.</span></span>  
  
    -   <span data-ttu-id="00750-178">Jeśli wpis pamięci podręcznej zostanie usunięty, implementację buforu musi również dysponować zależności.</span><span class="sxs-lookup"><span data-stu-id="00750-178">If the cache entry is removed, the cache implementation must also dispose the dependency.</span></span>  
  
 <span data-ttu-id="00750-179">Wewnętrzny wykonania <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> automatycznie wywołuje metodę <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> zarejestrowany przez metodę po wywołuje wywołania zwrotnego <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="00750-179">The internal implementation of the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method automatically calls the <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method after it calls a callback that is registered through the <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="00750-180">Ta automatycznego usuwania podczas uruchamiania zdarzeń tylko wtedy, gdy inicjowanie <xref:System.Runtime.Caching.ChangeMonitor> wystąpienia wcześniej zakończone.</span><span class="sxs-lookup"><span data-stu-id="00750-180">This automatic dispose during the event firing only occurs if the initialization of the <xref:System.Runtime.Caching.ChangeMonitor> instance previously completed.</span></span>  
  
 <span data-ttu-id="00750-181">Gdy monitor pochodnej zmiany Konstruktor wywołuje <xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A> metody, jeśli już zmieniła stan monitora zmiany (to znaczy, stan, który jest monitorowany już zmieniona po konstruktora było nadal aktywne) następnie <xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A> zostanie — metoda automatycznie usunąć monitora zmiany.</span><span class="sxs-lookup"><span data-stu-id="00750-181">When a derived change monitor's constructor calls the <xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A> method, if the state of the change monitor has already changed (that is, the state that is monitored has already changed when the constructor was still active) then <xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A> method will automatically dispose the change monitor.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="00750-182">Użytkownicy nie powinny wywoływać <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="00750-182">Users should not call the <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method.</span></span> <span data-ttu-id="00750-183">Nie można jednak zapobiec wywołanie metody.</span><span class="sxs-lookup"><span data-stu-id="00750-183">However, you cannot prevent users from calling the method.</span></span> <span data-ttu-id="00750-184">W związku z tym, jeśli nie, <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> wywołania metody.</span><span class="sxs-lookup"><span data-stu-id="00750-184">Therefore, if they do, the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method is invoked.</span></span> <span data-ttu-id="00750-185">W takim przypadku wpis pamięci podręcznej jest powiadamiany o tak, jakby zależność została zmieniona.</span><span class="sxs-lookup"><span data-stu-id="00750-185">In that case, the cache entry is notified as if the dependency has changed.</span></span>  
  
 <span data-ttu-id="00750-186">Aby uniemożliwić przesłanianie klas pochodnych <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> metody, metoda nie jest jawnej implementacji interfejsu.</span><span class="sxs-lookup"><span data-stu-id="00750-186">To prevent derived classes from overriding <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method, the method is not an explicit interface implementation.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="00750-187">Inicjowanie nie zostało zakończone w klasie pochodnej monitor zmianach nazywany podstawowym <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00750-187">Initialization is not complete in the derived change-monitor class that called the base <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> method.</span>
          </span>
        </exception>
        <altmember cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected abstract void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void Dispose(bool disposing);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <span data-ttu-id="00750-188">
            <see langword="true" /> Aby zwolnić zasoby zarządzane i niezarządzane, a wszelkie odwołania do <see cref="T:System.Runtime.Caching.ChangeMonitor" /> wystąpienia; <see langword="false" /> aby zwolnić tylko zasoby niezarządzane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00750-188">
              <see langword="true" /> to release managed and unmanaged resources and any references to a <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instance; <see langword="false" /> to release only unmanaged resources.</span>
          </span>
          <span data-ttu-id="00750-189">Gdy <see langword="false" /> jest przekazywany <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> metoda jest wywoływana przez <see langword="finalizer" /> wątku i zewnętrznych odwołań zarządzanych prawdopodobnie nie jest już prawidłowe, ponieważ są one już bezużytecznych.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00750-189">When <see langword="false" /> is passed, the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> method is called by a <see langword="finalizer" /> thread and any external managed references are likely no longer valid because they have already been garbage collected.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00750-190">Zwalnia wszystkie zasoby zarządzane i niezarządzane, a wszelkie odwołania do <see cref="T:System.Runtime.Caching.ChangeMonitor" /> wystąpienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00750-190">Releases all managed and unmanaged resources and any references to the <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instance.</span>
          </span>
          <span data-ttu-id="00750-191">To przeciążenie musi być implementowana przez klasy pochodnej monitor zmianach.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00750-191">This overload must be implemented by derived change-monitor classes.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00750-192">Jeśli wartość `disposing` wartość jest `true`, wszystkie zasoby zarządzane i niezarządzane są usuwane i wszelkie odwołania do tego obiektu są wydawane, aby umożliwić wystąpienia pochodne monitor zmianach bezużytecznych.</span><span class="sxs-lookup"><span data-stu-id="00750-192">When the value of `disposing` value is `true`, all managed and unmanaged resources are disposed and any references to this object are released so that the derived change-monitor instance can be garbage collected.</span></span> <span data-ttu-id="00750-193">Jest on gwarancję, że podstawowym <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> metoda wywoła realizowane <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> metody tylko jeden raz.</span><span class="sxs-lookup"><span data-stu-id="00750-193">It is guaranteed that the base <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method will invoke the implemented <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method only one time.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="00750-194">Monitor zmianach musi implementować <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> przeciążenia, aby zwolnić wszystkie zarządzane i niezarządzane zasoby po wartości <paramref name="disposing" /> jest <see langword="true" />.</span>
            <span class="sxs-lookup">
              <span data-stu-id="00750-194">A change monitor must implement the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> overload to release all managed and unmanaged resources when the value of <paramref name="disposing" /> is <see langword="true" />.</span>
            </span>
            <span data-ttu-id="00750-195">
              <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> Przeciążenie metody, która ma <paramref name="disposing" /> wartość <see langword="true" /> jest wywoływana tylko jeden raz, to znaczy, jeśli wystąpienie zostanie usunięty po raz pierwszy.</span>
            <span class="sxs-lookup">
              <span data-stu-id="00750-195">The <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> method overload that has a <paramref name="disposing" /> value of <see langword="true" /> is called only one time, namely, when the instance is disposed for the first time.</span>
            </span>
            <span data-ttu-id="00750-196">Monitor zmiany nie mogą wywoływać <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> przeciążenia bezpośrednio.</span>
            <span class="sxs-lookup">
              <span data-stu-id="00750-196">A change monitor must not call the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> overload directly.</span>
            </span>
            <span data-ttu-id="00750-197">Monitor pochodnej zmiany można wywołać publicznej bez parametrów <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> metody na podstawie <see cref="T:System.Runtime.Caching.ChangeMonitor" /> klasy.</span>
            <span class="sxs-lookup">
              <span data-stu-id="00750-197">A derived change monitor can call the public parameter-less <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> method on the base <see cref="T:System.Runtime.Caching.ChangeMonitor" /> class.</span>
            </span>
            <span data-ttu-id="00750-198">Alternatywnie monitor zmiany może implementować metodę finalizatora.</span>
            <span class="sxs-lookup">
              <span data-stu-id="00750-198">Alternatively, a change monitor can implement a finalizer method.</span>
            </span>
            <span data-ttu-id="00750-199">W takim przypadku można wywołać finalizatora <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> — metoda i przekaż go <paramref name="disposing" /> wartość <see langword="false" />.</span>
            <span class="sxs-lookup">
              <span data-stu-id="00750-199">In that case, the finalizer can invoke the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> method and pass it a <paramref name="disposing" /> value of <see langword="false" />.</span>
            </span>
            <span data-ttu-id="00750-200">Jednak jest to zazwyczaj niepotrzebne.</span>
            <span class="sxs-lookup">
              <span data-stu-id="00750-200">However, this is usually unnecessary.</span>
            </span>
            <span data-ttu-id="00750-201">Monitorowanie zmian zależności jest najczęściej wykonywane przez to usługa, która obsługuje odwołania do wystąpienia zmiany monitora.</span>
            <span class="sxs-lookup">
              <span data-stu-id="00750-201">Monitoring for dependency changes is typically performed by a service that maintains a reference to the change-monitor instance.</span>
            </span>
            <span data-ttu-id="00750-202">Odwołanie uniemożliwia wystąpienie bezużytecznych i dlatego powoduje, że metoda finalizator niepotrzebne.</span>
            <span class="sxs-lookup">
              <span data-stu-id="00750-202">The reference prevents the instance from being garbage collected, and therefore makes a finalizer method unnecessary.</span>
            </span>
            <span data-ttu-id="00750-203">Aby uniknąć przecieki pamięci po zmianie zależność <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> metoda usuwa wystąpienie Monitora zmiany (o ile nie zakończył inicjowanie).</span>
            <span class="sxs-lookup">
              <span data-stu-id="00750-203">To avoid memory leaks, when a dependency changes, the <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> method disposes the change-monitor instance (unless initialization has not finished).</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="HasChanged">
      <MemberSignature Language="C#" Value="public bool HasChanged { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasChanged" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Caching.ChangeMonitor.HasChanged" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasChanged As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasChanged { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="00750-204">Pobiera wartość, która wskazuje, że stan, który jest monitorowany przez <see cref="T:System.Runtime.Caching.ChangeMonitor" /> klasa uległa zmianie.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00750-204">Gets a value that indicates that the state that is monitored by the <see cref="T:System.Runtime.Caching.ChangeMonitor" /> class has changed.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="00750-205">
            <see langword="true" /> Jeśli stan, który jest monitorowany przez <see cref="T:System.Runtime.Caching.ChangeMonitor" /> wystąpienia został zmieniony; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00750-205">
              <see langword="true" /> if the state that is monitored by the <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instance has changed; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00750-206">Możesz sprawdzić wartość tej właściwości w pochodnym <xref:System.Runtime.Caching.ChangeMonitor> klasy, aby zobaczyć, czy zależność została zmieniona.</span><span class="sxs-lookup"><span data-stu-id="00750-206">You can check the value of this property in a derived <xref:System.Runtime.Caching.ChangeMonitor> class to see whether a dependency has changed.</span></span>  
  
 <span data-ttu-id="00750-207">Wartość jest równa `true` gdy nastąpi zmiana zależności (oznacza to, gdy <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> metoda jest wywoływana).</span><span class="sxs-lookup"><span data-stu-id="00750-207">The value is set to `true` when a dependency change occurs (that is, when the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method is called).</span></span> <span data-ttu-id="00750-208">Po <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> metoda jest wywoływana przez klasę pochodną, wartość <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> właściwość będzie `true`, niezależnie od tego, czy <xref:System.Runtime.Caching.OnChangedCallback> wystąpienia została powiadomiona, przez wywołanie do <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="00750-208">After the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method is called by the derived class, the value of the <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> property will be `true`, regardless of whether a <xref:System.Runtime.Caching.OnChangedCallback> instance has been notified by a call to the <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="00750-209">Można sprawdzić wywołań <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> właściwości, aby zobaczyć, czy zależność została zmieniona.</span><span class="sxs-lookup"><span data-stu-id="00750-209">Callers can check the <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> property to see whether a dependency has changed.</span></span> <span data-ttu-id="00750-210">Jednak w środowisku wielowątkowych prostszy i bardziej łatwy w obsłudze podejście jest do wstawiania danych do implementacji pamięci podręcznej bez sprawdzania <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> właściwości.</span><span class="sxs-lookup"><span data-stu-id="00750-210">However, in a multi-threaded environment, a simpler and more maintainable approach is to insert data into a cache implementation without checking the <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> property.</span></span> <span data-ttu-id="00750-211">Implementacje pamięci podręcznej musi sprawdzić <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> właściwości dla Ciebie i nie może wykonywać operacji insert ani operacji zestawu, jeśli zmienione zostały już co najmniej jeden skojarzone zależności.</span><span class="sxs-lookup"><span data-stu-id="00750-211">Cache implementations must check the <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> property for you and must not perform an insert or set operation if one or more associated dependencies have already changed.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />
        <altmember cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="InitializationComplete">
      <MemberSignature Language="C#" Value="protected void InitializationComplete ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void InitializationComplete() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" />
      <MemberSignature Language="VB.NET" Value="Protected Sub InitializationComplete ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void InitializationComplete();" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="00750-212">Wywoływana z konstruktora klasy pochodne wskazująca, że ten Inicjowanie zostało zakończone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00750-212">Called from the constructor of derived classes to indicate that initialization is finished.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00750-213">W przypadku zależności zmiany przed zakończeniem inicjowania w klasie pochodnej, musi wywoływać konstruktora klasy pochodnej <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="00750-213">If a dependency changes before initialization is complete in a derived class, the constructor of the derived class must invoke the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method.</span></span>  
  
 <span data-ttu-id="00750-214">Gdy <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> wywołaniu metody <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> jest automatycznie ustawiana właściwość `true` przez monitor zmiany.</span><span class="sxs-lookup"><span data-stu-id="00750-214">When the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method is invoked, the <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> property is automatically set to `true` by the change monitor.</span></span> <span data-ttu-id="00750-215">W związku z tym, gdy monitor zmianach Konstruktor wywołuje <xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A> , klasa podstawowa zostanie automatycznie wywołanie metody <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="00750-215">As a result, when the change monitor's constructor calls the <xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A> method, the base class will automatically call the <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method.</span></span> <span data-ttu-id="00750-216">Jeśli Inicjowanie zostało zakończone, <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> metody automatycznie usuwa wystąpienia pochodne monitor zmianach.</span><span class="sxs-lookup"><span data-stu-id="00750-216">If initialization is complete, the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method automatically disposes the derived change-monitor instance.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="00750-217">Konstruktor klasy pochodnej należy wywołać podstawowym <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> metoda przed zwraca konstruktora.</span>
            <span class="sxs-lookup">
              <span data-stu-id="00750-217">The constructor of a derived class must call the base <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> method before the constructor returns.</span>
            </span>
            <span data-ttu-id="00750-218">Można wywołać konstruktora klasy pochodnej <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> metody tylko po <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> zostanie wywołany, ponieważ <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> metoda zgłasza wyjątek, jeśli inicjowanie nie zostało ukończone.</span>
            <span class="sxs-lookup">
              <span data-stu-id="00750-218">The constructor of a derived class can call the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> method only after <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> is called, because the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> method throws an exception if initialization is not completed.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
    <Member MemberName="IsDisposed">
      <MemberSignature Language="C#" Value="public bool IsDisposed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDisposed" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Caching.ChangeMonitor.IsDisposed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsDisposed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDisposed { bool get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="00750-219">Pobiera wartość określającą, czy wystąpienia pochodne <see cref="T:System.Runtime.Caching.ChangeMonitor" /> klasa zostanie usunięty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00750-219">Gets a value that indicates that the derived instance of a <see cref="T:System.Runtime.Caching.ChangeMonitor" /> class is disposed.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="00750-220">
            <see langword="true" /> Jeśli wystąpienie zostanie usunięty; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00750-220">
              <see langword="true" /> if the instance is disposed; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00750-221">Właściwość jest ustawiona na `true` po podstawowym <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> wywołania metody <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> metody w klasie pochodnej można zlikwidować wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="00750-221">The property is set to `true` after the base <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method calls the <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method in a derived class to dispose of the instance.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NotifyOnChanged">
      <MemberSignature Language="C#" Value="public void NotifyOnChanged (System.Runtime.Caching.OnChangedCallback onChangedCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void NotifyOnChanged(class System.Runtime.Caching.OnChangedCallback onChangedCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void NotifyOnChanged(System::Runtime::Caching::OnChangedCallback ^ onChangedCallback);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="onChangedCallback" Type="System.Runtime.Caching.OnChangedCallback" />
      </Parameters>
      <Docs>
        <param name="onChangedCallback">
          <span data-ttu-id="00750-222">Odwołanie do metody, które jest wywoływane, gdy zmieniono zależność.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00750-222">A reference to a method that is invoked when a dependency has changed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00750-223">Wywoływane przez implementacje pamięci podręcznej zarejestrować wywołania zwrotnego i powiadomienie <see cref="T:System.Runtime.Caching.ObjectCache" /> wystąpienie za pośrednictwem <see cref="T:System.Runtime.Caching.OnChangedCallback" /> delegowanie, gdy zmieniono zależności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00750-223">Called by Cache implementers to register a callback and notify an <see cref="T:System.Runtime.Caching.ObjectCache" /> instance through the <see cref="T:System.Runtime.Caching.OnChangedCallback" /> delegate when a dependency has changed.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00750-224">Implementacje pamięci podręcznej umożliwia połączenie się monitor zmiany do tej metody.</span><span class="sxs-lookup"><span data-stu-id="00750-224">Cache implementers use this method to wire themselves up to a change monitor.</span></span> <span data-ttu-id="00750-225">W przypadku skojarzyć jedną lub więcej zmienić monitorów z elementu pamięci podręcznej, należy przekazać <xref:System.Runtime.Caching.CacheItemPolicy> wystąpienia z właściwością monitorów wypełnione zmiany do elementu pamięci podręcznej.</span><span class="sxs-lookup"><span data-stu-id="00750-225">If you associate one or more change monitors with the cache item, you pass a <xref:System.Runtime.Caching.CacheItemPolicy> instance with a populated change monitors property to the cache item.</span></span> <span data-ttu-id="00750-226">Realizator pamięci podręcznej, że obsługuje zmienić monitorów jest odpowiedzialny za Iterowanie po <xref:System.Runtime.Caching.CacheItemPolicy.ChangeMonitors%2A> właściwości i rejestrowanie <xref:System.Runtime.Caching.OnChangedCallback> obiektów delegowanych z każdym zmienić monitor znalezione.</span><span class="sxs-lookup"><span data-stu-id="00750-226">A cache implementer that supports change monitors is responsible for iterating over the <xref:System.Runtime.Caching.CacheItemPolicy.ChangeMonitors%2A> property and register the <xref:System.Runtime.Caching.OnChangedCallback> delegates with each change monitor that it finds.</span></span>  
  
 <span data-ttu-id="00750-227">Ponieważ <xref:System.Runtime.Caching.OnChangedCallback> delegata zawiera parametr opcjonalny stanu, implementacja monitor konkretnych zmiany można przekazać informacji o stanie opcjonalne.</span><span class="sxs-lookup"><span data-stu-id="00750-227">Because the <xref:System.Runtime.Caching.OnChangedCallback> delegate includes an optional state parameter, a concrete change monitor implementation can pass optional state information.</span></span> <span data-ttu-id="00750-228">Realizator pamięci podręcznej określa, czy należy podjąć jawne zależności od typu stanu monitora zmiany przekazywany jako część wywołania zwrotnego.</span><span class="sxs-lookup"><span data-stu-id="00750-228">The cache implementer determines whether an explicit dependency on the type of state that a custom change monitor passes as part of the callback can be taken.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="00750-229">Podstawowy pamięci podręcznej rozszerzeń interfejsu API nie ma wymagań dotyczących jawne zależności od typu stanu.</span><span class="sxs-lookup"><span data-stu-id="00750-229">The base cache extensibility API has no requirement for explicit dependency on the type of state.</span></span>  
  
 <span data-ttu-id="00750-230">Implementacja <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> metoda automatycznie określa, czy stan monitora już został zmieniony w czasie <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> metoda jest wywoływana.</span><span class="sxs-lookup"><span data-stu-id="00750-230">The implementation of the <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> method automatically determines whether the state of the monitor has already changed at the time <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> method is called.</span></span> <span data-ttu-id="00750-231">Jeśli <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> właściwość jest `true`, a następnie automatycznie wywołuje metodę <xref:System.Runtime.Caching.OnChangedCallback> program obsługi zdarzeń, który został zarejestrowany za pomocą <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="00750-231">If the <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> property is `true`, then the method automatically calls the <xref:System.Runtime.Caching.OnChangedCallback> event handler, that was registered, through the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method.</span></span> <span data-ttu-id="00750-232">Dzieje się tak, ponieważ jest to możliwe, że od czasu implementację buforu tworzy monitorem zmiany czasu implementację buforu pobiera monitora i wiążący sam maksymalnie, podstawowy stan monitorowanych została zmieniona.</span><span class="sxs-lookup"><span data-stu-id="00750-232">This occurs because it is possible that from the time a cache implementation creates a change monitor, to the time a cache implementation gets the monitor and wires itself up to it, the underlying monitored state has changed.</span></span> <span data-ttu-id="00750-233">Jeśli stan został już zmieniony następnie obiekt, który jest przekazywany do <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> jest metoda `null`.</span><span class="sxs-lookup"><span data-stu-id="00750-233">If the state has already changed then the object that is passed to the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method is `null`.</span></span>  
  
 <span data-ttu-id="00750-234"><xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> Metodę można wywołać tylko raz i spowoduje zgłoszenie wyjątku w kolejnych wywołaniach.</span><span class="sxs-lookup"><span data-stu-id="00750-234">The <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> method can be invoked only one time, and will throw an exception on subsequent calls.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="00750-235">Metoda wywołania zwrotnego został już wywołany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00750-235">The callback method has already been invoked.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="00750-236">
            <paramref name="onChangedCallback" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00750-236">
              <paramref name="onChangedCallback" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <para>1.  <span data-ttu-id="00750-237">Należy wywołać <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> metody, aby otrzymywać powiadomienia o zmianach zależności.</span><span class="sxs-lookup"><span data-stu-id="00750-237">You must call the <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> method to be notified of any dependency changes.</span></span><span data-ttu-id="00750-238">Jeśli zmiana zależności już wystąpił, <see cref="T:System.Runtime.Caching.OnChangedCallback" /> wystąpienie zostanie wywołana podczas <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> jest wywoływana.</span><span class="sxs-lookup"><span data-stu-id="00750-238">If a dependency change has already occurred, the <see cref="T:System.Runtime.Caching.OnChangedCallback" /> instance will be called when <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> is called.</span></span><span data-ttu-id="00750-239">W przeciwnym razie <see cref="T:System.Runtime.Caching.OnChangedCallback" /> wystąpienie zostanie wywołana jeden raz, albo gdy <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> metoda jest wywoływana lub gdy <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> metoda jest wywoływana cokolwiek nastąpi najpierw.</span><span class="sxs-lookup"><span data-stu-id="00750-239">Otherwise, the <see cref="T:System.Runtime.Caching.OnChangedCallback" /> instance will be called one time, either when the <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> method is called or when the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> method is called, whichever occurs first.</span></span><span data-ttu-id="00750-240"><see cref="T:System.Runtime.Caching.OnChangedCallback" /> Usuń wpis pamięci podręcznej i żądanie wywołującego pamięci podręcznej pozyskiwania konieczne zmiany lub aktualizacji zdarzeń wstecz do oryginalnego obiektu wywołującego pamięci podręcznej wystąpienia dostarczonej przez implementację pamięci podręcznej.</span><span class="sxs-lookup"><span data-stu-id="00750-240">The <see cref="T:System.Runtime.Caching.OnChangedCallback" /> instance provided by the cache implementation should remove the cache entry and if it is requested by the cache caller, raise the necessary change or update event back to the original cache caller.</span></span>  
  
2.  <span data-ttu-id="00750-241">Implementacji obiektu pamięci podręcznej, należy usunąć skojarzony ze zmianą zależności wpisu pamięci podręcznej.</span><span class="sxs-lookup"><span data-stu-id="00750-241">The object cache implementation must remove the cache entry that is associated with a dependency change.</span></span></para>
        </block>
        <altmember cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="OnChanged">
      <MemberSignature Language="C#" Value="protected void OnChanged (object state);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void OnChanged(object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub OnChanged (state As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void OnChanged(System::Object ^ state);" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="state">
          <span data-ttu-id="00750-242">Dane zdarzenia zmiany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00750-242">The data for the change event.</span>
          </span>
          <span data-ttu-id="00750-243">Ta wartość może być <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00750-243">This value can be <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="00750-244">Metoda wywoływana przez klasy pochodne, aby zgłosić zdarzenie, gdy zostanie zmieniona zależności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00750-244">Called by derived classes to raise the event when a dependency changes.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00750-245">Zazwyczaj <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> metoda jest wywoływana w przypadku wystąpienia zmian zależności.</span><span class="sxs-lookup"><span data-stu-id="00750-245">Typically, the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method is called when dependency changes occur.</span></span> <span data-ttu-id="00750-246"><xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> Metody również jest wywoływane, gdy wystąpienie Monitora zmiany zostanie usunięty, ale usuwania występuje tylko wtedy, gdy nie ma już wywołać metodę wywołania zwrotnego.</span><span class="sxs-lookup"><span data-stu-id="00750-246">The <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method is also invoked when a change-monitor instance is disposed but the disposal occurs only if the callback has not already been invoked.</span></span>  
  
 <span data-ttu-id="00750-247">Jeśli <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> metoda jest wywoływana przed <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> metoda jest wywoływana, dane o stanie z wywołania <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> metody są zapisywane przez implementację pamięci podręcznej.</span><span class="sxs-lookup"><span data-stu-id="00750-247">If the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method is called before the <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> method is called, the state data from the call to the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method is saved by the cache implementation.</span></span> <span data-ttu-id="00750-248">Ponadto wywołanie zwrotne do <xref:System.Runtime.Caching.OnChangedCallback> metoda jest wywoływana natychmiast po <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> wywołania metody.</span><span class="sxs-lookup"><span data-stu-id="00750-248">Also, the callback to the <xref:System.Runtime.Caching.OnChangedCallback> method is invoked immediately when the <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> method is invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" />
        <altmember cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />
        <altmember cref="P:System.Runtime.Caching.ChangeMonitor.HasChanged" />
      </Docs>
    </Member>
    <Member MemberName="UniqueId">
      <MemberSignature Language="C#" Value="public abstract string UniqueId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UniqueId" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Caching.ChangeMonitor.UniqueId" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property UniqueId As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::String ^ UniqueId { System::String ^ get(); };" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="00750-249">Pobiera wartość, która reprezentuje <see cref="T:System.Runtime.Caching.ChangeMonitor" /> wystąpienie klasy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00750-249">Gets a value that represents the <see cref="T:System.Runtime.Caching.ChangeMonitor" /> class instance.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="00750-250">Identyfikator wystąpienia zmiany monitora.</span>
          <span class="sxs-lookup">
            <span data-stu-id="00750-250">The identifier for a change-monitor instance.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="00750-251"><xref:System.Runtime.Caching.ChangeMonitor.UniqueId%2A> Wartość właściwości zazwyczaj składa się z danych dotyczących ciągu nazwy łączyć zależności który jednoznacznie identyfikatory danych, który jest monitorowany przez <xref:System.Runtime.Caching.ChangeMonitor> wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="00750-251">The <xref:System.Runtime.Caching.ChangeMonitor.UniqueId%2A> property value typically consists of dependency names combined string data that uniquely identifiers the data that is being monitored by a <xref:System.Runtime.Caching.ChangeMonitor> instance.</span></span> <span data-ttu-id="00750-252">Wartość <xref:System.Runtime.Caching.ChangeMonitor.UniqueId%2A> właściwość jest ciągiem.</span><span class="sxs-lookup"><span data-stu-id="00750-252">The value of the <xref:System.Runtime.Caching.ChangeMonitor.UniqueId%2A> property is a string.</span></span> <span data-ttu-id="00750-253">Wartość ciągu można przypisywać unikatowy identyfikator <xref:System.Runtime.Caching.ChangeMonitor> wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="00750-253">The value of the string is used to assign the unique ID of the <xref:System.Runtime.Caching.ChangeMonitor> instance.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="00750-254">Przez zastąpienie właściwości, można zdefiniować implementacją niestandardową wartość ciągu właściwości, aby można było go przypisać unikatowy identyfikator.</span>
            <span class="sxs-lookup">
              <span data-stu-id="00750-254">By overriding the property, you can define a custom implementation for the string value of the property in order to assign it a unique ID.</span>
            </span>
          </para>
        </block>
        <block subset="none" type="overrides">
          <para>
            <span data-ttu-id="00750-255">W klasach pochodnych należy ustawić wartość właściwości w konstruktorze.</span>
            <span class="sxs-lookup">
              <span data-stu-id="00750-255">In derived classes, you must set the value of the property in the constructor.</span>
            </span>
          </para>
        </block>
      </Docs>
    </Member>
  </Members>
</Type>