<Type Name="ChangeMonitor" FullName="System.Runtime.Caching.ChangeMonitor">
  <Metadata>
    <Meta Name="ms.openlocfilehash" Value="d7f673552db74d3ed1ff4f6fe8dcc10612167e5c" />
    <Meta Name="ms.sourcegitcommit" Value="434f60616a9793fa8436744549fc856e94f7a648" />
    <Meta Name="ms.translationtype" Value="MT" />
    <Meta Name="ms.contentlocale" Value="pl-PL" />
    <Meta Name="ms.lasthandoff" Value="08/24/2018" />
    <Meta Name="ms.locfileid" Value="36542116" />
  </Metadata>
  <TypeSignature Language="C#" Value="public abstract class ChangeMonitor : IDisposable" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit ChangeMonitor extends System.Object implements class System.IDisposable" />
  <TypeSignature Language="DocId" Value="T:System.Runtime.Caching.ChangeMonitor" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class ChangeMonitor&#xA;Implements IDisposable" />
  <TypeSignature Language="C++ CLI" Value="public ref class ChangeMonitor abstract : IDisposable" />
  <TypeSignature Language="F#" Value="type ChangeMonitor = class&#xA;    interface IDisposable" />
  <AssemblyInfo>
    <AssemblyName>System.Runtime.Caching</AssemblyName>
    <AssemblyVersion>4.0.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces>
    <Interface>
      <InterfaceName>System.IDisposable</InterfaceName>
    </Interface>
  </Interfaces>
  <Docs>
    <summary>
      <span data-ttu-id="49ce3-101">Udostępnia klasę bazową, aby uzyskać pochodny typ niestandardowy, który monitoruje zmiany w stanie danych, która zależy od elementu pamięci podręcznej.</span>
      <span class="sxs-lookup">
        <span data-stu-id="49ce3-101">Provides a base class for a derived custom type that monitors changes in the state of the data which a cache item depends on.</span>
      </span>
    </summary>
    <remarks>
      <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49ce3-102"><xref:System.Runtime.Caching.ChangeMonitor> Klasa jest używana jako klasa bazowa dla klas pochodnych monitor, które są przeznaczone do implementacji określonego pamięci podręcznej.</span><span class="sxs-lookup"><span data-stu-id="49ce3-102">The <xref:System.Runtime.Caching.ChangeMonitor> class is used as the base class for derived monitor classes that are specialized for particular cache implementations.</span></span> <span data-ttu-id="49ce3-103">A <xref:System.Runtime.Caching.ChangeMonitor> wystąpienia monitoruje zmiany w stanie danych, która zależy od elementu pamięci podręcznej.</span><span class="sxs-lookup"><span data-stu-id="49ce3-103">A <xref:System.Runtime.Caching.ChangeMonitor> instance monitors changes in the state of data which a cache item depends on.</span></span> <span data-ttu-id="49ce3-104">Na przykład element może być jednostką danych lub plików, których zawartość jest buforowana.</span><span class="sxs-lookup"><span data-stu-id="49ce3-104">For example, the item can be a file or data entity whose contents are cached.</span></span> <span data-ttu-id="49ce3-105">Jednostki danych lub plik zostanie zaktualizowany, również należy zmienić wpis pamięci podręcznej skojarzone.</span><span class="sxs-lookup"><span data-stu-id="49ce3-105">If the file or data entity is updated, the associated cache entry must be changed also.</span></span> <span data-ttu-id="49ce3-106">Wspólne elementy, które mogą być monitorowane obejmują jednostek danych (np. bazy danych, pola wartości, wiersze lub tabele), inny wpis pamięci podręcznej, plików i atrybutów pliku.</span><span class="sxs-lookup"><span data-stu-id="49ce3-106">Common items that can be monitored include data entities (such as database fields, values, rows, or tables), another cache entry, and files and file attributes.</span></span>  
  
 <span data-ttu-id="49ce3-107">Zmiana zależności różni się w stanie zależności.</span><span class="sxs-lookup"><span data-stu-id="49ce3-107">A dependency change is a change in the state of a dependency.</span></span> <span data-ttu-id="49ce3-108">W implementacji typowych pamięci podręcznej po <xref:System.Runtime.Caching.ChangeMonitor> wystąpienia powiadamia pamięci podręcznej, które uległy zmianie w zależności, pamięci podręcznej wykonuje niezbędne czynności, takich jak co unieważniło wpis pamięci podręcznej wstawiono.</span><span class="sxs-lookup"><span data-stu-id="49ce3-108">In a typical cache implementation, after a <xref:System.Runtime.Caching.ChangeMonitor> instance notifies the cache that a dependency has changed, the cache performs the required action, such as invalidating the inserted cache entry.</span></span>  
  
 <span data-ttu-id="49ce3-109">Pochodne <xref:System.Runtime.Caching.ChangeMonitor> klas można dostosować tak, aby monitorować zmiany zależności dla określonych różnych magazynach danych.</span><span class="sxs-lookup"><span data-stu-id="49ce3-109">Derived <xref:System.Runtime.Caching.ChangeMonitor> classes can be customized to monitor dependency changes for specific different data stores.</span></span> <span data-ttu-id="49ce3-110">Na przykład są implementacjach pamięci podręcznej systemu plików, ilości pamięci fizycznej lub bazy danych.</span><span class="sxs-lookup"><span data-stu-id="49ce3-110">For example, there are cache implementations for a file system, physical memory, or a database.</span></span> <span data-ttu-id="49ce3-111"><xref:System.Runtime.Caching.ChangeMonitor> Klasy sprawdza zmiany pojawiające się poza pamięci podręcznej, a następnie powiadamia pamięci podręcznej, które nastąpiły zmiany.</span><span class="sxs-lookup"><span data-stu-id="49ce3-111">The <xref:System.Runtime.Caching.ChangeMonitor> class examines changes that occur outside the cache, and then alerts the cache that changes have occurred.</span></span>  
  
 <span data-ttu-id="49ce3-112">[!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] Zawiera następujące klasy, które wynikają z <xref:System.Runtime.Caching.ChangeMonitor> klasy:</span><span class="sxs-lookup"><span data-stu-id="49ce3-112">The [!INCLUDE[dnprdnshort](~/includes/dnprdnshort-md.md)] includes the following classes that derive from <xref:System.Runtime.Caching.ChangeMonitor> class:</span></span>  
  
-   <xref:System.Runtime.Caching.CacheEntryChangeMonitor>  
  
-   <xref:System.Runtime.Caching.FileChangeMonitor>  
  
-   <xref:System.Runtime.Caching.HostFileChangeMonitor>  
  
-   <xref:System.Runtime.Caching.SqlChangeMonitor>  
  
 <span data-ttu-id="49ce3-113">Każda z tych klas projektów w programach różne rodzaje zależności.</span><span class="sxs-lookup"><span data-stu-id="49ce3-113">Each of these classes works with different types of dependencies.</span></span> <span data-ttu-id="49ce3-114">Na przykład pochodnej <xref:System.Runtime.Caching.FileChangeMonitor> klasa śledzi zmiany w pamięci podręcznej dla danych systemu plików (pliki i foldery), który zależy od elementu pamięci podręcznej.</span><span class="sxs-lookup"><span data-stu-id="49ce3-114">For example, the derived <xref:System.Runtime.Caching.FileChangeMonitor> class monitors changes to a cache for file system data (files and folders) that the cache item depends on.</span></span>  
  
 ]]></format>
    </remarks>
    <threadsafe>
      <span data-ttu-id="49ce3-115">Ten typ jest bezpieczny wątkowo.</span>
      <span class="sxs-lookup">
        <span data-stu-id="49ce3-115">This type is thread safe.</span>
      </span>
    </threadsafe>
    <block subset="none" type="overrides">
      <span data-ttu-id="49ce3-116">
        <para>Jeśli tworzysz niestandardową implementację buforu lub zmiana pochodnej monitorowanie typu, należy wykonać pewne wskazówki. Na poniższej liście podsumowano te wytyczne. Aby uzyskać więcej informacji zobacz dokumentację dla poszczególnych metod lub właściwości.  — Należy ustawić Konstruktor klasy pochodnej <see cref="P:System.Runtime.Caching.ChangeMonitor.UniqueId" /> właściwości rozpocząć monitorowanie, a następnie wywołaj <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> metoda przed powrotem z metody. Jeśli Konstruktor napotka błąd podczas konstrukcje i musi mieć do usuwania zasobów, Konstruktor może wywołać tylko <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> przeciążenia po <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> metoda jest wywoływana, ponieważ <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> zgłosi przeciążenia <see cref="T:System.InvalidOperationException" /> wyjątek, jeśli inicjowanie zakończy się.  — Jeśli zmianach w ukończenia dane, które jest monitorowana, zanim będzie inicjowania, należy wywołać konstruktora <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> metoda przed wywołaniem <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> metody.  -After pochodnej <see cref="T:System.Runtime.Caching.ChangeMonitor" /> tworzenia wystąpienia typu, należy wstawić monitora do niestandardowego <see cref="T:System.Runtime.Caching.ObjectCache" /> implementacji. Lub zadzwoń po zakończeniu pracy monitorowanie zmian <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> metody.  -Po <see cref="T:System.Runtime.Caching.ChangeMonitor" /> wystąpienia są wstawiane do <see cref="T:System.Runtime.Caching.ObjectCache" /> implementacji <see cref="T:System.Runtime.Caching.ObjectCache" /> wystąpienia wymagają usunięciu monitor zmiany. Nawet jeśli wstawiania jest nieprawidłowy i powoduje wyjątek <see cref="T:System.Runtime.Caching.ObjectCache" /> należy wywołać implementację <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> przeciążenia.  -Po monitor pochodnej zmiany są wstawiane do pamięci podręcznej, <see cref="T:System.Runtime.Caching.ObjectCache" /> należy wywołać implementację <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />, przekazując <see cref="T:System.Runtime.Caching.OnChangedCallback" /> obiektu. <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> Metodę można wywołać tylko jeden raz. Jeśli już wystąpiła zmiana zależności, <see cref="T:System.Runtime.Caching.OnChangedCallback" /> wystąpienie będzie wywoływana natychmiast po <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> jest wywoływana. W przeciwnym razie <see cref="T:System.Runtime.Caching.OnChangedCallback" /> wystąpienia zostanie wywołana tylko raz. Występuje wywołania to jeden raz, albo po <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> metoda jest wywoływana, ponieważ <see cref="T:System.Runtime.Caching.ChangeMonitor" /> wystąpienia Wykryto zmianę, lub gdy <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> metoda jest wywoływana w <see cref="T:System.Runtime.Caching.ChangeMonitor" />, zależnie co nastąpi wcześniej.  <see cref="T:System.Runtime.Caching.OnChangedCallback" /> Wystąpienie, które są dostarczane przez <see cref="T:System.Runtime.Caching.ObjectCache" /> implementacji należy usunąć wpis pamięci podręcznej skojarzonych i określić przyczynę przy użyciu <see cref="F:System.Web.Caching.CacheItemRemovedReason.DependencyChanged" /> wyliczenia.  -A <see cref="T:System.Runtime.Caching.ChangeMonitor" /> wystąpienia można wywołać <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> metody albo zanim została wywołana z implementacją pamięci podręcznej <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> metody lub po. Jeśli <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> metoda jest wywoływana przed <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> jest wywoływana, base <see cref="T:System.Runtime.Caching.ChangeMonitor" /> implementacji powiadomi pamięć podręczna, która przyczynę problemu i spowoduje wyzwolenie wywołania zwrotnego, które zostaną przekazane do <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> natychmiast po <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> zostanie wywołana. Wszelkie dane stanu, które są przekazywane do <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> metoda zostanie zapisany przez monitor zmiany i następnie przekazywane do <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> metody podczas <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> metoda jest wywoływana.  -Monitor zmiana musi implementować <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> metody. Aby uzyskać więcej informacji, zobacz <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> metoda dokumentacji.  <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> Przeciążenie metody musi zostać wywołana w celu usunięcia <see cref="T:System.Runtime.Caching.ChangeMonitor" /> wystąpienia. Reguły wywoływania usuwania są następujące:-przed element jest wstawiany do pamięci podręcznej, jest odpowiedzialny za obiekt wywołujący, aby usunąć <see cref="T:System.Runtime.Caching.ChangeMonitor" /> wystąpienia.  — Gdy element pamięci podręcznej i <see cref="T:System.Runtime.Caching.ChangeMonitor" /> wystąpień, które są skojarzone z nim są przekazywane do pamięci podręcznej, implementujący pamięci podręcznej musi upewnij się, że że <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> metoda jest wywoływana, nawet w przypadku awarii insert.  -After elementu i jego skojarzone <see cref="T:System.Runtime.Caching.ChangeMonitor" /> wystąpienia są przekazywane do pamięci podręcznej, obiekt wywołujący nie musi dysponować zależności, ponieważ gdy <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> metoda jest wywoływana, wywołanie jest traktowane tak, jakby zależność została zmieniona. W rezultacie <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> metoda jest wywoływana automatycznie.  -Biorąc pod uwagę, te reguły <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> metoda musi zostać wywołana w jednym z następujących sposobów:-użytkowników należy wywołać <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> przeciążenia metody, jeśli postanowią nie można wstawić wystąpienia pochodne monitor zmiany do pamięci podręcznej.  — Jeśli implementacja próbuje wstawić wystąpienie Monitora zmiany do obiektu pamięci podręcznej, ale wstawiania zakończy się niepowodzeniem, implementacja pamięci podręcznej jest odpowiedzialny za wywołanie <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> przeciążenia. Podczas próby wstawienia, powoduje wyjątek, implementacja pamięci podręcznej muszą dysponować wszelkie skojarzone zależności.  -Wpisu pamięci podręcznej zostanie usunięty, implementacja pamięci podręcznej muszą również metodę dispose zależności.  -Wewnętrzną implementację <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> automatycznie wywołuje metodę <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> metoda po wywołuje metodę wywołania zwrotnego, jest rejestrowane za pomocą <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />.  <block subset="none" type="note"><para> To automatyczne wywołanie metody dispose podczas inicjowanie zdarzeń tylko wtedy, gdy inicjalizacja <see cref="T:System.Runtime.Caching.ChangeMonitor" /> wystąpienie zostało wcześniej zakończone.  </para></block>  Gdy Konstruktor monitor zmiany pochodnej wywołuje <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> metody, jeśli już zmienił stan monitora zmiany (oznacza to, stan, który jest monitorowany już zmienione podczas konstruktora było nadal aktywne), a następnie <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> będą — metoda Automatycznie usuń Monitor zmiany.  <see cref="P:System.Runtime.Caching.ChangeMonitor.HasChanged" /> Właściwość jest ustawiona na <see langword="true" /> po <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> metoda jest wywoływana przez wystąpienia pochodne monitorowania zmian, niezależnie od tego, czy <see cref="T:System.Runtime.Caching.OnChangedCallback" /> obiektu została ustawiona przez wywołanie <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> metody lub nie.</para>
      </span>
      <span class="sxs-lookup">
        <span data-stu-id="49ce3-116">
          <para>If you create a custom cache implementation or a derived change monitor type, you must follow certain guidelines. The following list summarizes these guidelines. For more information, see the documentation for individual methods or properties.  -   The constructor of a derived class must set the <see cref="P:System.Runtime.Caching.ChangeMonitor.UniqueId" /> property, begin monitoring, and call <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> method before the method returns. If a constructor encounters an error during constructions and must have to dispose of resources, the constructor can only call the <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> overload after the <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> method is called because the <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> overload will throw an <see cref="T:System.InvalidOperationException" /> exception if initialization is not completed.  -   If changes occur in the data that is being monitored before initialization is complete, the constructor must call the <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> method before calling the <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> method.  -   After a derived <see cref="T:System.Runtime.Caching.ChangeMonitor" /> type is instantiated, you must insert the monitor into a custom <see cref="T:System.Runtime.Caching.ObjectCache" /> implementation. Or if you are finished using the change monitor, call the <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> method.  -   After a <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instance is inserted into a <see cref="T:System.Runtime.Caching.ObjectCache" /> implementation, the <see cref="T:System.Runtime.Caching.ObjectCache" /> instance require that the change monitor is disposed. Even if the insertion is invalid and causes an exception, the <see cref="T:System.Runtime.Caching.ObjectCache" /> implementation must call the <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> overload.  -   After a derived change monitor is inserted into a cache, the <see cref="T:System.Runtime.Caching.ObjectCache" /> implementation must call <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />, by passing a <see cref="T:System.Runtime.Caching.OnChangedCallback" /> object. The <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> method can be called only one time. If a dependency change has already occurred, the <see cref="T:System.Runtime.Caching.OnChangedCallback" /> instance will be called immediately when <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> is called. Otherwise, the <see cref="T:System.Runtime.Caching.OnChangedCallback" /> instance will be called only one time. This one time call occurs either when the <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> method is called because the <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instance detected a change, or when the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> method is called on the <see cref="T:System.Runtime.Caching.ChangeMonitor" />, whichever occurs first.  -   The <see cref="T:System.Runtime.Caching.OnChangedCallback" /> instance that is provided by an <see cref="T:System.Runtime.Caching.ObjectCache" /> implementation should remove the associated cache entry and specify a reason by using the <see cref="F:System.Web.Caching.CacheItemRemovedReason.DependencyChanged" /> enumeration.  -   A <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instance can call the <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> method either before a cache implementation has called <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> method or after. If the <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> method is called before <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> is called, the base <see cref="T:System.Runtime.Caching.ChangeMonitor" /> implementation will notify the cache that this has occurred and will trigger the callback to be passed to <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> immediately when <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> is invoked. Any state data that is passed to the <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> method is saved by the change monitor and subsequently passed to the <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> method when the <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> method is invoked.  -   A change monitor must implement the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> method. For more information, see the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> method documentation.  -   The <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> method overload must be called to dispose of the <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instance. The rules for calling Dispose are as follows:  -   Before an item is inserted into the cache, it is the responsibility of caller to dispose of a <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instance.  -   Once cache item and the <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instances that are associated with it are passed to a cache, the cache implementer must make sure that that the <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> method is called, even if the insert fails.  -   After an item and its associated <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instances are passed to a cache, the caller must not dispose the dependency because when the <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> method is called, the call is treated as if the dependency has changed. As a result, the <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> method is automatically invoked.  -   Taking these rules into consideration, the <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> method must be called in one of the following ways:  -   Users must call the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> method overload if they decide not to insert the derived change-monitor instance into a cache.  -   If the implementation tries to insert the change-monitor instance into an object cache but the insertion fails, the cache implementation is responsible for calling the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> overload. When the insertion attempt causes an exception, the cache implementation must dispose of any associated dependencies.  -   If the cache entry is removed, the cache implementation must also dispose of the dependency.  -   The internal implementation of the <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> method automatically calls the <see cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" /> method after it calls a callback that is registered through <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />.  <block subset="none" type="note"><para> This automatic call to the dispose method during the event firing only occurs if the initialization of the <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instance was previously completed.  </para></block>  When a derived change monitor's constructor calls the <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> method, if the state of the change monitor has already changed (that is, the state that is monitored already changed when the constructor was still active) then the <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> method will automatically dispose of the change monitor.  -   The <see cref="P:System.Runtime.Caching.ChangeMonitor.HasChanged" /> property is set to <see langword="true" /> after the <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> method is called by the derived change-monitor instance, regardless of whether a <see cref="T:System.Runtime.Caching.OnChangedCallback" /> object has been set by a call to the <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> method or not.</para>
        </span>
      </span>
    </block>
    <altmember cref="N:System.Web.Caching" />
    <altmember cref="T:System.Runtime.Caching.ObjectCache" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ChangeMonitor ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.ChangeMonitor.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; ChangeMonitor();" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="49ce3-117">Inicjuje nowe wystąpienie klasy <see cref="T:System.Runtime.Caching.ChangeMonitor" /> klasy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49ce3-117">Initializes a new instance of the <see cref="T:System.Runtime.Caching.ChangeMonitor" /> class.</span>
          </span>
          <span data-ttu-id="49ce3-118">Ten konstruktor jest wywoływana z konstruktorów w klasach pochodnych w celu inicjowania klasy bazowej.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49ce3-118">This constructor is called from constructors in derived classes to initialize the base class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49ce3-119"><xref:System.Runtime.Caching.ChangeMonitor> Klasa ma domyślnego konstruktora.</span><span class="sxs-lookup"><span data-stu-id="49ce3-119">The <xref:System.Runtime.Caching.ChangeMonitor> class has a default constructor.</span></span> <span data-ttu-id="49ce3-120">Jednak klasy, dziedziczy z podstawowego <xref:System.Runtime.Caching.ChangeMonitor> klasy i Zdefiniuj niestandardowe monitorowanie zmian zachowania, należy wykonać inicjalizacji w konstruktorze.</span><span class="sxs-lookup"><span data-stu-id="49ce3-120">However, classes that inherit from the base <xref:System.Runtime.Caching.ChangeMonitor> class and define custom change-monitoring behavior must perform initialization in the constructor.</span></span> <span data-ttu-id="49ce3-121">Aby uzyskać więcej informacji zobacz Uwagi dotyczące obiektów dziedziczących sekcji.</span><span class="sxs-lookup"><span data-stu-id="49ce3-121">For more information, see the Notes for Inheritors section.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="49ce3-122">
            <para>Należy ustawić w konstruktorze klasy pochodnej <see cref="P:System.Runtime.Caching.ChangeMonitor.UniqueId" /> właściwości rozpocząć monitorowanie, a następnie wywołaj <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> klasy przed jego zwracaniem. Jeśli zmiany zależności, przed zainicjowaniem zostało zakończone (na przykład, jeśli klucz pamięci podręcznej zależne nie zostanie znaleziony w pamięci podręcznej), należy wywołać konstruktora <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> metoda przed wywołaniem <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> metody. W takim przypadku można wywołać konstruktora <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> metody tylko po <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> metoda jest wywoływana, ponieważ <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> metoda zgłasza wyjątek, jeśli inicjowanie zakończy się.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="49ce3-122">
              <para>The constructor of a derived class must set the <see cref="P:System.Runtime.Caching.ChangeMonitor.UniqueId" /> property, begin monitoring, and call the <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> class before it returns. If a dependency changes before initialization is complete (for example, if a dependent cache key is not found in the cache), the constructor must call the <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> method before it calls the <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> method. In this case, constructor can call the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> method only after the <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> method is called, because the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> method throws an exception if initialization is not completed.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <MemberGroup MemberName="Dispose">
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Docs>
        <summary>
          <span data-ttu-id="49ce3-123">Zwalnia wszelkie zasoby używane przez bieżące wystąpienie <see cref="T:System.Runtime.Caching.ChangeMonitor" /> klasy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49ce3-123">Releases all resources used by the current instance of the <see cref="T:System.Runtime.Caching.ChangeMonitor" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49ce3-124"><xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> Metoda jest używana do wersji <xref:System.Runtime.Caching.ChangeMonitor> wystąpienia i powiązane zasoby.</span><span class="sxs-lookup"><span data-stu-id="49ce3-124">The <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method is used to release the <xref:System.Runtime.Caching.ChangeMonitor> instance and related resources.</span></span> <span data-ttu-id="49ce3-125">Publicznie <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> do koordynowania procesu usuwania ze zdarzeniami cykl życia klucza klasy pochodnej monitorowanie zmian (na przykład inicjowanie) i wersji, wywoływana jest metoda <xref:System.Runtime.Caching.ChangeMonitor> wystąpienia, tak aby wystąpienie może być bezużyteczne.</span><span class="sxs-lookup"><span data-stu-id="49ce3-125">The public <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method is invoked to coordinate the disposal process with key life-cycle events of derived change-monitor classes (such as initialization), and to release the <xref:System.Runtime.Caching.ChangeMonitor> instance so that the instance can be garbage collected.</span></span> <span data-ttu-id="49ce3-126"><xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> Metoda jest implementowana przez klasy pochodne monitor zmiany do usuwania zasobów zarządzanych i niezarządzanych.</span><span class="sxs-lookup"><span data-stu-id="49ce3-126">The <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method is implemented by derived change-monitor classes to dispose of their managed and unmanaged resources.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </MemberGroup>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="public void Dispose ();" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance void Dispose() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.ChangeMonitor.Dispose" />
      <MemberSignature Language="VB.NET" Value="Public Sub Dispose ()" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; virtual void Dispose();" />
      <MemberSignature Language="F#" Value="abstract member Dispose : unit -&gt; unit&#xA;override this.Dispose : unit -&gt; unit" Usage="changeMonitor.Dispose " />
      <MemberType>Method</MemberType>
      <Implements>
        <InterfaceMember>M:System.IDisposable.Dispose</InterfaceMember>
      </Implements>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="49ce3-127">Zwalnia wszystkie zasoby, które są używane przez bieżące wystąpienie <see cref="T:System.Runtime.Caching.ChangeMonitor" /> klasy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49ce3-127">Releases all resources that are used by the current instance of the <see cref="T:System.Runtime.Caching.ChangeMonitor" /> class.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49ce3-128"><xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> Wywołuje metodę <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> metoda w klasach pochodnych tylko jeden raz, jest wywoływana po raz pierwszy.</span><span class="sxs-lookup"><span data-stu-id="49ce3-128">The <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method invokes the <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method of derived classes only one time, the first time it is called.</span></span> <span data-ttu-id="49ce3-129">Kolejne wywołania <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> metodę nie mają wpływu.</span><span class="sxs-lookup"><span data-stu-id="49ce3-129">Subsequent calls to the <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method have no effect.</span></span> <span data-ttu-id="49ce3-130">Po wywołaniu metody <xref:System.Runtime.Caching.ChangeMonitor.IsDisposed%2A> właściwość jest ustawiona na `true`.</span><span class="sxs-lookup"><span data-stu-id="49ce3-130">After the method has been called, the <xref:System.Runtime.Caching.ChangeMonitor.IsDisposed%2A> property is set to `true`.</span></span>  
  
 <span data-ttu-id="49ce3-131"><xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> Przeciążenia musi zostać wywołana w celu usunięcia <xref:System.Runtime.Caching.ChangeMonitor> wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="49ce3-131">The <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> overload must be called to dispose of a <xref:System.Runtime.Caching.ChangeMonitor> instance.</span></span> <span data-ttu-id="49ce3-132">Dostępne są następujące reguły wywoływania metody dispose:</span><span class="sxs-lookup"><span data-stu-id="49ce3-132">The following are the rules for calling the dispose method:</span></span>  
  
-   <span data-ttu-id="49ce3-133">Zanim element jest wstawiany do pamięci podręcznej, odpowiada wywołującego do rozporządzania <xref:System.Runtime.Caching.ChangeMonitor> wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="49ce3-133">Before an item is inserted into the cache, it is the caller's responsibility to dispose of a <xref:System.Runtime.Caching.ChangeMonitor> instance.</span></span>  
  
-   <span data-ttu-id="49ce3-134">Gdy element pamięci podręcznej i <xref:System.Runtime.Caching.ChangeMonitor> wystąpień, które są skojarzone z nim są przekazywane do pamięci podręcznej, implementujący pamięci podręcznej, który musi upewnij się, że <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> jest wywoływana, nawet w przypadku awarii insert.</span><span class="sxs-lookup"><span data-stu-id="49ce3-134">Once cache item and the <xref:System.Runtime.Caching.ChangeMonitor> instances that are associated with it are passed to a cache, the cache implementer that must make sure that <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> is called, even if the insert fails.</span></span>  
  
-   <span data-ttu-id="49ce3-135">Po elementu i jego skojarzone <xref:System.Runtime.Caching.ChangeMonitor> wystąpienia są przekazywane do pamięci podręcznej, obiekt wywołujący nie musi dysponować zależności, ponieważ gdy <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> metoda jest wywoływana, wywołanie jest traktowane tak, jakby zależność została zmieniona.</span><span class="sxs-lookup"><span data-stu-id="49ce3-135">After an item and its associated <xref:System.Runtime.Caching.ChangeMonitor> instances are passed to a cache, the caller must not dispose the dependency because when the <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method is called, the call is treated as if the dependency has changed.</span></span> <span data-ttu-id="49ce3-136">W rezultacie <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> metoda jest wywoływana automatycznie.</span><span class="sxs-lookup"><span data-stu-id="49ce3-136">As a result, the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method is automatically invoked.</span></span>  
  
-   <span data-ttu-id="49ce3-137">Biorąc pod uwagę, te reguły <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> metoda musi zostać wywołana w jednym z następujących sposobów:</span><span class="sxs-lookup"><span data-stu-id="49ce3-137">Taking these rules into consideration, the <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method must be called in one of the following ways:</span></span>  
  
    -   <span data-ttu-id="49ce3-138">Użytkownicy muszą wywoływać <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> przeciążenia metody, jeśli postanowią nie można wstawić wystąpienia pochodne monitor zmiany do pamięci podręcznej.</span><span class="sxs-lookup"><span data-stu-id="49ce3-138">Users must call the <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method overload if they decide not to insert the derived change-monitor instance into a cache.</span></span>  
  
    -   <span data-ttu-id="49ce3-139">Implementacja pamięci podręcznej jest odpowiedzialny za wywołanie <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> przeciążenia, jeśli implementacja próbuje wstawić wystąpienie Monitora zmiany do obiektu pamięci podręcznej, ale wstawiania nie powiedzie się.</span><span class="sxs-lookup"><span data-stu-id="49ce3-139">The cache implementation is responsible for calling the <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> overload if the implementation tries to insert the change-monitor instance into an object cache but the insertion fails.</span></span> <span data-ttu-id="49ce3-140">Podczas próby wstawienia, powoduje wyjątek, implementacja pamięci podręcznej musi dysponować wszelkie skojarzone zależności.</span><span class="sxs-lookup"><span data-stu-id="49ce3-140">When the insertion attempt causes an exception, the cache implementation must dispose any associated dependencies.</span></span>  
  
    -   <span data-ttu-id="49ce3-141">Jeśli wpis pamięci podręcznej został usunięty, implementacja pamięci podręcznej również metodę dispose zależności.</span><span class="sxs-lookup"><span data-stu-id="49ce3-141">If the cache entry is removed, the cache implementation must also dispose the dependency.</span></span>  
  
 <span data-ttu-id="49ce3-142">Wewnętrzną implementację <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> automatycznie wywołuje metodę <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> metoda po wywołuje metodę wywołania zwrotnego, jest rejestrowane za pomocą <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="49ce3-142">The internal implementation of the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method automatically calls the <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method after it calls a callback that is registered through the <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="49ce3-143">Ta automatycznego usuwania podczas inicjowanie zdarzeń tylko wtedy, gdy inicjalizacja <xref:System.Runtime.Caching.ChangeMonitor> wystąpienia już ukończona.</span><span class="sxs-lookup"><span data-stu-id="49ce3-143">This automatic dispose during the event firing only occurs if the initialization of the <xref:System.Runtime.Caching.ChangeMonitor> instance previously completed.</span></span>  
  
 <span data-ttu-id="49ce3-144">Gdy Konstruktor monitor zmiany pochodnej wywołuje <xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A> metody, jeśli już zmienił stan monitora zmiany (oznacza to, stan, który jest monitorowany została już zmieniona podczas konstruktora było nadal aktywne) następnie <xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A> będą — metoda Automatycznie usuń monitor zmiany.</span><span class="sxs-lookup"><span data-stu-id="49ce3-144">When a derived change monitor's constructor calls the <xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A> method, if the state of the change monitor has already changed (that is, the state that is monitored has already changed when the constructor was still active) then <xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A> method will automatically dispose the change monitor.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="49ce3-145">Użytkownicy nie powinien wywoływać <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="49ce3-145">Users should not call the <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method.</span></span> <span data-ttu-id="49ce3-146">Nie można jednak zapobiec wywołanie metody.</span><span class="sxs-lookup"><span data-stu-id="49ce3-146">However, you cannot prevent users from calling the method.</span></span> <span data-ttu-id="49ce3-147">W związku z tym, jeśli nie, <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> metoda jest wywoływana.</span><span class="sxs-lookup"><span data-stu-id="49ce3-147">Therefore, if they do, the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method is invoked.</span></span> <span data-ttu-id="49ce3-148">W takim przypadku wpisu pamięci podręcznej zostanie powiadomiony, tak, jakby zależność została zmieniona.</span><span class="sxs-lookup"><span data-stu-id="49ce3-148">In that case, the cache entry is notified as if the dependency has changed.</span></span>  
  
 <span data-ttu-id="49ce3-149">Aby uniemożliwić przesłanianie klasy pochodne <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> metody, metoda nie jest jawną implementacją interfejsu.</span><span class="sxs-lookup"><span data-stu-id="49ce3-149">To prevent derived classes from overriding <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method, the method is not an explicit interface implementation.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="49ce3-150">Inicjowanie nie zostało zakończone w klasie pochodnej monitor zmiany, która o nazwie base <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> metody.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49ce3-150">Initialization is not complete in the derived change-monitor class that called the base <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> method.</span>
          </span>
        </exception>
        <altmember cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="Dispose">
      <MemberSignature Language="C#" Value="protected abstract void Dispose (bool disposing);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig newslot virtual instance void Dispose(bool disposing) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" />
      <MemberSignature Language="VB.NET" Value="Protected MustOverride Sub Dispose (disposing As Boolean)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; abstract void Dispose(bool disposing);" />
      <MemberSignature Language="F#" Value="abstract member Dispose : bool -&gt; unit" Usage="changeMonitor.Dispose disposing" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="disposing" Type="System.Boolean" />
      </Parameters>
      <Docs>
        <param name="disposing">
          <span data-ttu-id="49ce3-151">
            <see langword="true" /> Aby zwolnić zarządzane i niezarządzane zasoby i wszelkie odwołania do <see cref="T:System.Runtime.Caching.ChangeMonitor" /> wystąpienia klasy <see langword="false" /> aby zwolnić tylko niezarządzane zasoby.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49ce3-151">
              <see langword="true" /> to release managed and unmanaged resources and any references to a <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instance; <see langword="false" /> to release only unmanaged resources.</span>
          </span>
          <span data-ttu-id="49ce3-152">Gdy <see langword="false" /> jest przekazywany <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> metoda jest wywoływana przez <see langword="finalizer" /> wątku i wszystkie odwołania zewnętrzne dla zarządzanych prawdopodobnie nie jest już prawidłowy, ponieważ są one już bezużyteczne.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49ce3-152">When <see langword="false" /> is passed, the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> method is called by a <see langword="finalizer" /> thread and any external managed references are likely no longer valid because they have already been garbage collected.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49ce3-153">Zwalnia wszystkie zasoby zarządzane i niezarządzane i wszelkie odwołania do <see cref="T:System.Runtime.Caching.ChangeMonitor" /> wystąpienia.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49ce3-153">Releases all managed and unmanaged resources and any references to the <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instance.</span>
          </span>
          <span data-ttu-id="49ce3-154">To przeciążenie muszą być zaimplementowane przez klasy pochodne monitor zmiany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49ce3-154">This overload must be implemented by derived change-monitor classes.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49ce3-155">Gdy wartość `disposing` wartość `true`, zarządzane i niezarządzane zasoby są usunięte i wszelkie odwołania do tego obiektu są zwalniane, tak aby wystąpienia pochodne monitorowanie zmian może zostać usunięte.</span><span class="sxs-lookup"><span data-stu-id="49ce3-155">When the value of `disposing` value is `true`, all managed and unmanaged resources are disposed and any references to this object are released so that the derived change-monitor instance can be garbage collected.</span></span> <span data-ttu-id="49ce3-156">Ma żadnej gwarancji, że podstawowy <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> realizowane będzie wywoływać metoda <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> metody tylko jeden raz.</span><span class="sxs-lookup"><span data-stu-id="49ce3-156">It is guaranteed that the base <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method will invoke the implemented <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method only one time.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="49ce3-157">
            <para>Monitorowanie zmian musi implementować <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> przeciążenia, aby zwolnić wszystkie zasoby zarządzane i niezarządzane po wartości <paramref name="disposing" /> jest <see langword="true" />. <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> Przeciążenia metody, która ma <paramref name="disposing" /> wartość <see langword="true" /> jest wywoływana tylko raz, to znaczy, jeśli wystąpienie zostanie usunięty po raz pierwszy. Monitorowanie zmian nie mogą wywoływać <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> przeciążenia bezpośrednio. Monitorowanie zmian pochodnej może wywołać publiczny bez parametrów <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> metody na podstawie <see cref="T:System.Runtime.Caching.ChangeMonitor" /> klasy.  Alternatywnie monitor zmiany można zaimplementować metodzie finalizacji. W takim przypadku można wywołać finalizatora <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> metody i przekazać go <paramref name="disposing" /> wartość <see langword="false" />. Jednak jest zazwyczaj zbędna. Monitorowanie zależności zmiany zwykle odbywa się przez usługę, która obsługuje odwołania do wystąpienia zmiany monitora. Odwołanie zapobiega wystąpienia jako elementu bezużytecznego zbierane i w związku z tym sprawia, że metoda finalizator niepotrzebne. Aby uniknąć przecieki pamięci, gdy zmieni się zależność, <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> metoda usuwa wystąpienie zmiany monitora (o ile nie zakończył inicjowanie).</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="49ce3-157">
              <para>A change monitor must implement the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> overload to release all managed and unmanaged resources when the value of <paramref name="disposing" /> is <see langword="true" />. The <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> method overload that has a <paramref name="disposing" /> value of <see langword="true" /> is called only one time, namely, when the instance is disposed for the first time. A change monitor must not call the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> overload directly. A derived change monitor can call the public parameter-less <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> method on the base <see cref="T:System.Runtime.Caching.ChangeMonitor" /> class.  Alternatively, a change monitor can implement a finalizer method. In that case, the finalizer can invoke the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose(System.Boolean)" /> method and pass it a <paramref name="disposing" /> value of <see langword="false" />. However, this is usually unnecessary. Monitoring for dependency changes is typically performed by a service that maintains a reference to the change-monitor instance. The reference prevents the instance from being garbage collected, and therefore makes a finalizer method unnecessary. To avoid memory leaks, when a dependency changes, the <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> method disposes the change-monitor instance (unless initialization has not finished).</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="HasChanged">
      <MemberSignature Language="C#" Value="public bool HasChanged { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool HasChanged" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Caching.ChangeMonitor.HasChanged" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property HasChanged As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool HasChanged { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.HasChanged : bool" Usage="System.Runtime.Caching.ChangeMonitor.HasChanged" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49ce3-158">Pobiera wartość, która wskazuje, że stan, który jest monitorowany przez <see cref="T:System.Runtime.Caching.ChangeMonitor" /> klasy został zmieniony.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49ce3-158">Gets a value that indicates that the state that is monitored by the <see cref="T:System.Runtime.Caching.ChangeMonitor" /> class has changed.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="49ce3-159">
            <see langword="true" /> Jeśli stan, który jest monitorowany przez <see cref="T:System.Runtime.Caching.ChangeMonitor" /> wystąpienia został zmieniony; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49ce3-159">
              <see langword="true" /> if the state that is monitored by the <see cref="T:System.Runtime.Caching.ChangeMonitor" /> instance has changed; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49ce3-160">Możesz sprawdzić wartość tej właściwości w pochodnej <xref:System.Runtime.Caching.ChangeMonitor> klasy, aby zobaczyć, czy zależność uległy zmianie.</span><span class="sxs-lookup"><span data-stu-id="49ce3-160">You can check the value of this property in a derived <xref:System.Runtime.Caching.ChangeMonitor> class to see whether a dependency has changed.</span></span>  
  
 <span data-ttu-id="49ce3-161">Wartość jest równa `true` gdy wystąpi zmiana zależności (to znaczy, gdy <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> wywoływana jest metoda).</span><span class="sxs-lookup"><span data-stu-id="49ce3-161">The value is set to `true` when a dependency change occurs (that is, when the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method is called).</span></span> <span data-ttu-id="49ce3-162">Po <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> metoda jest wywoływana w klasie pochodnej, wartość <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> właściwość będzie miała `true`, niezależnie od tego, czy <xref:System.Runtime.Caching.OnChangedCallback> wystąpienia została powiadomiona, przez wywołanie <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="49ce3-162">After the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method is called by the derived class, the value of the <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> property will be `true`, regardless of whether a <xref:System.Runtime.Caching.OnChangedCallback> instance has been notified by a call to the <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> method.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="49ce3-163">Obiekty wywołujące można sprawdzić <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> właściwości, aby zobaczyć, czy zależność uległy zmianie.</span><span class="sxs-lookup"><span data-stu-id="49ce3-163">Callers can check the <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> property to see whether a dependency has changed.</span></span> <span data-ttu-id="49ce3-164">Jednak w środowisku wielowątkowych, prostsze i będzie łatwiejszy w utrzymaniu podejściem jest aby wstawić dane do implementacji pamięci podręcznej bez sprawdzania <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> właściwości.</span><span class="sxs-lookup"><span data-stu-id="49ce3-164">However, in a multi-threaded environment, a simpler and more maintainable approach is to insert data into a cache implementation without checking the <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> property.</span></span> <span data-ttu-id="49ce3-165">Należy sprawdzić implementacjach pamięci podręcznej <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> właściwości dla Ciebie i nie może wykonać polecenia wstawienia lub operacja ustawienia, jeśli co najmniej jeden skojarzone zależności już zostały zmienione.</span><span class="sxs-lookup"><span data-stu-id="49ce3-165">Cache implementations must check the <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> property for you and must not perform an insert or set operation if one or more associated dependencies have already changed.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />
        <altmember cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="InitializationComplete">
      <MemberSignature Language="C#" Value="protected void InitializationComplete ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void InitializationComplete() cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" />
      <MemberSignature Language="VB.NET" Value="Protected Sub InitializationComplete ()" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void InitializationComplete();" />
      <MemberSignature Language="F#" Value="member this.InitializationComplete : unit -&gt; unit" Usage="changeMonitor.InitializationComplete " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary>
          <span data-ttu-id="49ce3-166">Wywoływana z konstruktora klasy pochodne z informacją, że Inicjowanie zostało zakończone.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49ce3-166">Called from the constructor of derived classes to indicate that initialization is finished.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49ce3-167">Jeśli zależność zmieni się przed zakończeniem inicjowania w klasie pochodnej, należy wywołać konstruktora klasy pochodnej <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="49ce3-167">If a dependency changes before initialization is complete in a derived class, the constructor of the derived class must invoke the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method.</span></span>  
  
 <span data-ttu-id="49ce3-168">Gdy <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> metoda jest wywoływana, <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> zostaje automatycznie ustalona `true` przez monitor zmiany.</span><span class="sxs-lookup"><span data-stu-id="49ce3-168">When the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method is invoked, the <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> property is automatically set to `true` by the change monitor.</span></span> <span data-ttu-id="49ce3-169">W rezultacie, gdy monitor zmiany Konstruktor wywołuje <xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A> metody klasy bazowej będzie automatycznie wywoływać <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="49ce3-169">As a result, when the change monitor's constructor calls the <xref:System.Runtime.Caching.ChangeMonitor.InitializationComplete%2A> method, the base class will automatically call the <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method.</span></span> <span data-ttu-id="49ce3-170">Jeśli Inicjowanie zostało zakończone, <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> metoda automatycznie usuwa wystąpienie pochodnej monitor zmiany.</span><span class="sxs-lookup"><span data-stu-id="49ce3-170">If initialization is complete, the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method automatically disposes the derived change-monitor instance.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="49ce3-171">
            <para>Konstruktor klasy pochodnej musi wywołać base <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> metoda przed Konstruktor zwraca. Można wywołać konstruktora klasy pochodnej <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> metody tylko po <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> jest wywoływana, ponieważ <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> metoda zgłasza wyjątek, jeśli inicjowanie zakończy się.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="49ce3-171">
              <para>The constructor of a derived class must call the base <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> method before the constructor returns. The constructor of a derived class can call the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> method only after <see cref="M:System.Runtime.Caching.ChangeMonitor.InitializationComplete" /> is called, because the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> method throws an exception if initialization is not completed.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
    <Member MemberName="IsDisposed">
      <MemberSignature Language="C#" Value="public bool IsDisposed { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance bool IsDisposed" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Caching.ChangeMonitor.IsDisposed" />
      <MemberSignature Language="VB.NET" Value="Public ReadOnly Property IsDisposed As Boolean" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; property bool IsDisposed { bool get(); };" />
      <MemberSignature Language="F#" Value="member this.IsDisposed : bool" Usage="System.Runtime.Caching.ChangeMonitor.IsDisposed" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Boolean</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49ce3-172">Pobiera wartość, która wskazuje, że wystąpieniem pochodzącym z <see cref="T:System.Runtime.Caching.ChangeMonitor" /> klasy jest usunięty.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49ce3-172">Gets a value that indicates that the derived instance of a <see cref="T:System.Runtime.Caching.ChangeMonitor" /> class is disposed.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="49ce3-173">
            <see langword="true" /> Jeśli wystąpienie zostanie usunięty; w przeciwnym razie <see langword="false" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49ce3-173">
              <see langword="true" /> if the instance is disposed; otherwise, <see langword="false" />.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49ce3-174">Właściwość jest ustawiona na `true` po base <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> wywołania metody <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> metody w klasie pochodnej w celu usunięcia wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="49ce3-174">The property is set to `true` after the base <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method calls the <xref:System.Runtime.Caching.ChangeMonitor.Dispose%2A> method in a derived class to dispose of the instance.</span></span>  
  
 ]]></format>
        </remarks>
      </Docs>
    </Member>
    <Member MemberName="NotifyOnChanged">
      <MemberSignature Language="C#" Value="public void NotifyOnChanged (System.Runtime.Caching.OnChangedCallback onChangedCallback);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig instance void NotifyOnChanged(class System.Runtime.Caching.OnChangedCallback onChangedCallback) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; void NotifyOnChanged(System::Runtime::Caching::OnChangedCallback ^ onChangedCallback);" />
      <MemberSignature Language="F#" Value="member this.NotifyOnChanged : System.Runtime.Caching.OnChangedCallback -&gt; unit" Usage="changeMonitor.NotifyOnChanged onChangedCallback" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="onChangedCallback" Type="System.Runtime.Caching.OnChangedCallback" />
      </Parameters>
      <Docs>
        <param name="onChangedCallback">
          <span data-ttu-id="49ce3-175">Odwołanie do metody, które jest wywoływane, gdy zmieniono zależności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49ce3-175">A reference to a method that is invoked when a dependency has changed.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49ce3-176">Wywoływane przez implementacje pamięci podręcznej, aby zarejestrować wywołanie zwrotne i powiadom <see cref="T:System.Runtime.Caching.ObjectCache" /> wystąpienie za pośrednictwem <see cref="T:System.Runtime.Caching.OnChangedCallback" /> delegowanie, gdy zmieniono zależności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49ce3-176">Called by Cache implementers to register a callback and notify an <see cref="T:System.Runtime.Caching.ObjectCache" /> instance through the <see cref="T:System.Runtime.Caching.OnChangedCallback" /> delegate when a dependency has changed.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49ce3-177">Implementacje pamięci podręcznej ta metoda umożliwia połączenie się do monitorowania zmian.</span><span class="sxs-lookup"><span data-stu-id="49ce3-177">Cache implementers use this method to wire themselves up to a change monitor.</span></span> <span data-ttu-id="49ce3-178">Jeśli można skojarzyć jedno lub więcej zmian monitorów za pomocą elementu pamięci podręcznej, należy podać <xref:System.Runtime.Caching.CacheItemPolicy> wystąpień z właściwością monitorów wypełnione zmiany do elementu pamięci podręcznej.</span><span class="sxs-lookup"><span data-stu-id="49ce3-178">If you associate one or more change monitors with the cache item, you pass a <xref:System.Runtime.Caching.CacheItemPolicy> instance with a populated change monitors property to the cache item.</span></span> <span data-ttu-id="49ce3-179">Implementujący pamięci podręcznej, obsługuje monitorach zmian jest odpowiedzialny za Iterowanie <xref:System.Runtime.Caching.CacheItemPolicy.ChangeMonitors%2A> właściwości i rejestrowanie <xref:System.Runtime.Caching.OnChangedCallback> obiektów delegowanych z każdym Zmień monitor, które znajdzie.</span><span class="sxs-lookup"><span data-stu-id="49ce3-179">A cache implementer that supports change monitors is responsible for iterating over the <xref:System.Runtime.Caching.CacheItemPolicy.ChangeMonitors%2A> property and register the <xref:System.Runtime.Caching.OnChangedCallback> delegates with each change monitor that it finds.</span></span>  
  
 <span data-ttu-id="49ce3-180">Ponieważ <xref:System.Runtime.Caching.OnChangedCallback> delegat obejmuje parametr opcjonalny state, implementacja monitor konkretne zmiany można przekazać informacje o stanie opcjonalne.</span><span class="sxs-lookup"><span data-stu-id="49ce3-180">Because the <xref:System.Runtime.Caching.OnChangedCallback> delegate includes an optional state parameter, a concrete change monitor implementation can pass optional state information.</span></span> <span data-ttu-id="49ce3-181">Implementujący pamięci podręcznej określa, czy mogą być podejmowane jawne zależności od typu stanu zmiany monitora jest przekazywany jako część wywołania zwrotnego.</span><span class="sxs-lookup"><span data-stu-id="49ce3-181">The cache implementer determines whether an explicit dependency on the type of state that a custom change monitor passes as part of the callback can be taken.</span></span>  
  
> [!NOTE]
>  <span data-ttu-id="49ce3-182">Interfejs API rozszerzania podstawowej pamięci podręcznej nie ma wymagań dotyczących jawne zależności od typu stanu.</span><span class="sxs-lookup"><span data-stu-id="49ce3-182">The base cache extensibility API has no requirement for explicit dependency on the type of state.</span></span>  
  
 <span data-ttu-id="49ce3-183">Implementacja <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> metoda automatycznie określa, czy stan monitora zmienił się już w momencie <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> metoda jest wywoływana.</span><span class="sxs-lookup"><span data-stu-id="49ce3-183">The implementation of the <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> method automatically determines whether the state of the monitor has already changed at the time <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> method is called.</span></span> <span data-ttu-id="49ce3-184">Jeśli <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> właściwość jest `true`, a następnie automatycznie wywołuje metodę <xref:System.Runtime.Caching.OnChangedCallback> program obsługi zdarzeń, który został zarejestrowany za pomocą <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> metody.</span><span class="sxs-lookup"><span data-stu-id="49ce3-184">If the <xref:System.Runtime.Caching.ChangeMonitor.HasChanged%2A> property is `true`, then the method automatically calls the <xref:System.Runtime.Caching.OnChangedCallback> event handler, that was registered, through the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method.</span></span> <span data-ttu-id="49ce3-185">Dzieje się tak, ponieważ istnieje możliwość, że od czasu wykonania pamięci podręcznej tworzy monitorem zmiany do czasu wykonania pamięci podręcznej pobiera monitora i przewody się do niego podstawowy stan monitorowanych została zmieniona.</span><span class="sxs-lookup"><span data-stu-id="49ce3-185">This occurs because it is possible that from the time a cache implementation creates a change monitor, to the time a cache implementation gets the monitor and wires itself up to it, the underlying monitored state has changed.</span></span> <span data-ttu-id="49ce3-186">Jeśli stan został już zmieniony następnie obiekt, który jest przekazywany do <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> metodą jest `null`.</span><span class="sxs-lookup"><span data-stu-id="49ce3-186">If the state has already changed then the object that is passed to the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method is `null`.</span></span>  
  
 <span data-ttu-id="49ce3-187"><xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> Metoda może być wywołana tylko raz i spowoduje zgłoszenie wyjątku w kolejnych wywołaniach.</span><span class="sxs-lookup"><span data-stu-id="49ce3-187">The <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> method can be invoked only one time, and will throw an exception on subsequent calls.</span></span>  
  
 ]]></format>
        </remarks>
        <exception cref="T:System.InvalidOperationException">
          <span data-ttu-id="49ce3-188">Metoda wywołania zwrotnego zostało już wywołane.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49ce3-188">The callback method has already been invoked.</span>
          </span>
        </exception>
        <exception cref="T:System.ArgumentNullException">
          <span data-ttu-id="49ce3-189">
            <paramref name="onChangedCallback" /> jest <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49ce3-189">
              <paramref name="onChangedCallback" /> is <see langword="null" />.</span>
          </span>
        </exception>
        <block subset="none" type="overrides">
          <span data-ttu-id="49ce3-190">
            <para>1.  Należy wywołać <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> metodę, aby otrzymywać powiadomienia o wszelkich zmianach zależności. Jeśli już wystąpiła zmiana zależności, <see cref="T:System.Runtime.Caching.OnChangedCallback" /> wystąpienia zostaną wywołane podczas <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> jest wywoływana. W przeciwnym razie <see cref="T:System.Runtime.Caching.OnChangedCallback" /> wystąpienie będzie wywoływana jeden raz, gdy <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> metoda jest wywoływana lub <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> metoda jest wywoływana, zależnie co nastąpi wcześniej. <see cref="T:System.Runtime.Caching.OnChangedCallback" /> Podanego przez implementację pamięci podręcznej wystąpienia, należy usunąć wpis pamięci podręcznej i żądanie pamięci podręcznej obiektu wywołującego, pozyskiwania niezbędne zmiany lub aktualizacji zdarzeń oryginalnego obiektu wywołującego w pamięci podręcznej.  2.  Implementacja obiektu w pamięci podręcznej, należy usunąć wpis pamięci podręcznej, który jest skojarzony z Zmiana zależności.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="49ce3-190">
              <para>1.  You must call the <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> method to be notified of any dependency changes. If a dependency change has already occurred, the <see cref="T:System.Runtime.Caching.OnChangedCallback" /> instance will be called when <see cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" /> is called. Otherwise, the <see cref="T:System.Runtime.Caching.OnChangedCallback" /> instance will be called one time, either when the <see cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" /> method is called or when the <see cref="M:System.Runtime.Caching.ChangeMonitor.Dispose" /> method is called, whichever occurs first. The <see cref="T:System.Runtime.Caching.OnChangedCallback" /> instance provided by the cache implementation should remove the cache entry and if it is requested by the cache caller, raise the necessary change or update event back to the original cache caller.  2.  The object cache implementation must remove the cache entry that is associated with a dependency change.</para>
            </span>
          </span>
        </block>
        <altmember cref="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />
      </Docs>
    </Member>
    <Member MemberName="OnChanged">
      <MemberSignature Language="C#" Value="protected void OnChanged (object state);" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig instance void OnChanged(object state) cil managed" />
      <MemberSignature Language="DocId" Value="M:System.Runtime.Caching.ChangeMonitor.OnChanged(System.Object)" />
      <MemberSignature Language="VB.NET" Value="Protected Sub OnChanged (state As Object)" />
      <MemberSignature Language="C++ CLI" Value="protected:&#xA; void OnChanged(System::Object ^ state);" />
      <MemberSignature Language="F#" Value="member this.OnChanged : obj -&gt; unit" Usage="changeMonitor.OnChanged state" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Void</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="state" Type="System.Object" />
      </Parameters>
      <Docs>
        <param name="state">
          <span data-ttu-id="49ce3-191">Dane dla zdarzenia zmiany.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49ce3-191">The data for the change event.</span>
          </span>
          <span data-ttu-id="49ce3-192">Ta wartość może być <see langword="null" />.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49ce3-192">This value can be <see langword="null" />.</span>
          </span>
        </param>
        <summary>
          <span data-ttu-id="49ce3-193">Metoda wywoływana przez klasy pochodne, aby zgłosić zdarzenie, gdy ulegnie zmianie zależności.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49ce3-193">Called by derived classes to raise the event when a dependency changes.</span>
          </span>
        </summary>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49ce3-194">Zazwyczaj <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> metoda jest wywoływana, gdy wystąpią zmiany zależności.</span><span class="sxs-lookup"><span data-stu-id="49ce3-194">Typically, the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method is called when dependency changes occur.</span></span> <span data-ttu-id="49ce3-195"><xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> Metoda również jest wywoływane, gdy wystąpienie Monitora zmiany zostanie usunięty, ale usuwania występuje tylko wtedy, gdy wywołanie zwrotne, które nie zostało już wywołane.</span><span class="sxs-lookup"><span data-stu-id="49ce3-195">The <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method is also invoked when a change-monitor instance is disposed but the disposal occurs only if the callback has not already been invoked.</span></span>  
  
 <span data-ttu-id="49ce3-196">Jeśli <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> metoda jest wywoływana przed <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> metoda jest wywoływana, dane o stanie z wywołania <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> metodę jest zapisywany przez implementację pamięci podręcznej.</span><span class="sxs-lookup"><span data-stu-id="49ce3-196">If the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method is called before the <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> method is called, the state data from the call to the <xref:System.Runtime.Caching.ChangeMonitor.OnChanged%2A> method is saved by the cache implementation.</span></span> <span data-ttu-id="49ce3-197">Ponadto wywołanie zwrotne w celu <xref:System.Runtime.Caching.OnChangedCallback> metoda jest wywoływana bezpośrednio po <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> metoda jest wywoływana.</span><span class="sxs-lookup"><span data-stu-id="49ce3-197">Also, the callback to the <xref:System.Runtime.Caching.OnChangedCallback> method is invoked immediately when the <xref:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged%2A> method is invoked.</span></span>  
  
 ]]></format>
        </remarks>
        <altmember cref="Overload:System.Runtime.Caching.ChangeMonitor.Dispose" />
        <altmember cref="M:System.Runtime.Caching.ChangeMonitor.NotifyOnChanged(System.Runtime.Caching.OnChangedCallback)" />
        <altmember cref="P:System.Runtime.Caching.ChangeMonitor.HasChanged" />
      </Docs>
    </Member>
    <Member MemberName="UniqueId">
      <MemberSignature Language="C#" Value="public abstract string UniqueId { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance string UniqueId" />
      <MemberSignature Language="DocId" Value="P:System.Runtime.Caching.ChangeMonitor.UniqueId" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride ReadOnly Property UniqueId As String" />
      <MemberSignature Language="C++ CLI" Value="public:&#xA; abstract property System::String ^ UniqueId { System::String ^ get(); };" />
      <MemberSignature Language="F#" Value="member this.UniqueId : string" Usage="System.Runtime.Caching.ChangeMonitor.UniqueId" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>System.Runtime.Caching</AssemblyName>
        <AssemblyVersion>4.0.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Docs>
        <summary>
          <span data-ttu-id="49ce3-198">Pobiera wartość, która reprezentuje <see cref="T:System.Runtime.Caching.ChangeMonitor" /> wystąpienia klasy.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49ce3-198">Gets a value that represents the <see cref="T:System.Runtime.Caching.ChangeMonitor" /> class instance.</span>
          </span>
        </summary>
        <value>
          <span data-ttu-id="49ce3-199">Identyfikator wystąpienia zmiany monitora.</span>
          <span class="sxs-lookup">
            <span data-stu-id="49ce3-199">The identifier for a change-monitor instance.</span>
          </span>
        </value>
        <remarks>
          <format type="text/markdown"><![CDATA[  
  
## Remarks  
 <span data-ttu-id="49ce3-200"><xref:System.Runtime.Caching.ChangeMonitor.UniqueId%2A> Wartość właściwości zwykle składa się z dane ciągu nazwy w połączeniu zależności który jednoznacznie identyfikatory danych, który jest monitorowany przez <xref:System.Runtime.Caching.ChangeMonitor> wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="49ce3-200">The <xref:System.Runtime.Caching.ChangeMonitor.UniqueId%2A> property value typically consists of dependency names combined string data that uniquely identifiers the data that is being monitored by a <xref:System.Runtime.Caching.ChangeMonitor> instance.</span></span> <span data-ttu-id="49ce3-201">Wartość <xref:System.Runtime.Caching.ChangeMonitor.UniqueId%2A> właściwość ma postać ciągu.</span><span class="sxs-lookup"><span data-stu-id="49ce3-201">The value of the <xref:System.Runtime.Caching.ChangeMonitor.UniqueId%2A> property is a string.</span></span> <span data-ttu-id="49ce3-202">Wartość ciągu jest używana do przypisywania Unikatowy identyfikator <xref:System.Runtime.Caching.ChangeMonitor> wystąpienia.</span><span class="sxs-lookup"><span data-stu-id="49ce3-202">The value of the string is used to assign the unique ID of the <xref:System.Runtime.Caching.ChangeMonitor> instance.</span></span>  
  
 ]]></format>
        </remarks>
        <block subset="none" type="overrides">
          <span data-ttu-id="49ce3-203">
            <para>Przez zastąpienie właściwości, można zdefiniować niestandardową implementację właściwości dla wartości ciągu, aby można było przypisać mu unikatowy identyfikator.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="49ce3-203">
              <para>By overriding the property, you can define a custom implementation for the string value of the property in order to assign it a unique ID.</para>
            </span>
          </span>
        </block>
        <block subset="none" type="overrides">
          <span data-ttu-id="49ce3-204">
            <para>W klasach pochodnych należy ustawić wartość właściwości w konstruktorze.</para>
          </span>
          <span class="sxs-lookup">
            <span data-stu-id="49ce3-204">
              <para>In derived classes, you must set the value of the property in the constructor.</para>
            </span>
          </span>
        </block>
      </Docs>
    </Member>
  </Members>
</Type>