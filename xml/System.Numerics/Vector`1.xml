<?xml version="1.0" encoding="utf-8"?>
<xliff xmlns="urn:oasis:names:tc:xliff:document:1.2" xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance" version="1.2" xsi:schemaLocation="urn:oasis:names:tc:xliff:document:1.2 xliff-core-1.2-transitional.xsd">
  <file datatype="xml" original="Vector`1.xml" source-language="en-US" target-language="pl-PL">
    <header>
      <tool tool-id="mdxliff" tool-name="mdxliff" tool-version="1.0-81070f4" tool-company="Microsoft" />
      <xliffext:skl_file_name xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1e344e59-9d8e-481b-978a-09f2e01be86ce7743874a32e85e9fc3480f9d92c25c2d71ad800.skl</xliffext:skl_file_name>
      <xliffext:version xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">1.2</xliffext:version>
      <xliffext:ms.openlocfilehash xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">e7743874a32e85e9fc3480f9d92c25c2d71ad800</xliffext:ms.openlocfilehash>
      <xliffext:ms.sourcegitcommit xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">f9e3295b6cc303a611a73a84c4b27f9da792ad0d</xliffext:ms.sourcegitcommit>
      <xliffext:ms.lasthandoff xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">04/26/2018</xliffext:ms.lasthandoff>
      <xliffext:moniker_ids xmlns:xliffext="urn:microsoft:content:schema:xliffextensions">netcore-1.0,netcore-1.1,netcore-2.0,netcore-2.1,xamarinandroid-7.1,xamarinios-10.8,xamarinmac-3.0</xliffext:moniker_ids>
    </header>
    <body>
      <group id="content" extype="content">
        <trans-unit id="101" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Numerics.Vector`1">
          <source>The vector type.</source>
          <target state="translated">Typ wektora.</target>       </trans-unit>
        <trans-unit id="102" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Numerics.Vector`1">
          <source><bpt id="p1">&lt;c&gt;</bpt>T<ept id="p1">&lt;/c&gt;</ept> can be any primitive numeric type.</source>
          <target state="translated"><bpt id="p1">&lt;c&gt;</bpt>T<ept id="p1">&lt;/c&gt;</ept> może być dowolnym pierwotny typ liczbowy.</target>       </trans-unit>
        <trans-unit id="103" translate="yes" xml:space="preserve" uid="T:System.Numerics.Vector`1">
          <source>Represents a single vector of a specified numeric type that is suitable for low-level optimization of parallel algorithms.</source>
          <target state="translated">Reprezentuje pojedynczy wektor określonego typu liczbowego, który jest odpowiedni dla niskiego poziomu optymalizacji algorytmów równoległych.</target>       </trans-unit>
        <trans-unit id="104" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Numerics.Vector`1">
          <source><ph id="ph1">&lt;xref:System.Numerics.Vector%601&gt;</ph> is an immutable structure that represents a single vector of a specified numeric type.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Numerics.Vector%601&gt;</ph> jest niezmienialny strukturę, która reprezentuje pojedynczy wektor określonego typu liczbowego.</target>       </trans-unit>
        <trans-unit id="105" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Numerics.Vector`1">
          <source>The count of a <ph id="ph1">&lt;xref:System.Numerics.Vector%601&gt;</ph> instance is fixed, but its upper limit is CPU-register dependent.</source>
          <target state="translated">Liczba <ph id="ph1">&lt;xref:System.Numerics.Vector%601&gt;</ph> wystąpienie zostanie rozwiązany, ale swój górny limit jest rejestru Procesora zależnych.</target>       </trans-unit>
        <trans-unit id="106" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Numerics.Vector`1">
          <source>It is intended to be used as a building block for vectorizing large algorithms.</source>
          <target state="translated">Ma ona służyć jako bloku konstrukcyjnego vectorizing dużych algorytmów.</target>       </trans-unit>
        <trans-unit id="107" translate="yes" xml:space="preserve" extradata="MT" uid="T:System.Numerics.Vector`1">
          <source>The <ph id="ph1">&lt;xref:System.Numerics.Vector%601&gt;</ph> structure provides support for hardware acceleration.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Numerics.Vector%601&gt;</ph> Struktura zapewnia obsługę przyspieszanie sprzętowe.</target>       </trans-unit>
        <trans-unit id="108" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.#ctor(`0)">
          <source>The numeric type that defines the type of the components in the vector.</source>
          <target state="translated">Typ liczbowy, który definiuje typ elementów w wektorze.</target>       </trans-unit>
        <trans-unit id="109" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.#ctor(`0)">
          <source>Creates a vector whose components are of a specified type.</source>
          <target state="translated">Tworzy wektora, których składniki są określonego typu.</target>       </trans-unit>
        <trans-unit id="110" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Numerics.Vector`1.#ctor(`0)">
          <source><ph id="ph1">`value`</ph> can be any primitive numeric type (that is, a numeric type whose <ph id="ph2">&lt;xref:System.Type.IsPrimitive%2A?displayProperty=nameWithType&gt;</ph> property returns <ph id="ph3">`true`</ph>.</source>
          <target state="translated"><ph id="ph1">`value`</ph> mogą być dowolnego typu liczbowego pierwotnych (to znaczy liczbową wpisz, którego <ph id="ph2">&lt;xref:System.Type.IsPrimitive%2A?displayProperty=nameWithType&gt;</ph> zwraca właściwość <ph id="ph3">`true`</ph>.</target>       </trans-unit>
        <trans-unit id="111" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.#ctor(`0[])">
          <source>A numeric array.</source>
          <target state="translated">Tablica numeryczna.</target>       </trans-unit>
        <trans-unit id="112" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.#ctor(`0[])">
          <source>Creates a vector from a specified array.</source>
          <target state="translated">Tworzy wektora z określonej tablicy.</target>       </trans-unit>
        <trans-unit id="113" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Numerics.Vector`1.#ctor(`0[])">
          <source><ph id="ph1">`values`</ph> must contain at least <ph id="ph2">&lt;xref:System.Numerics.Vector%601.Count%2A&gt;</ph> elements.</source>
          <target state="translated"><ph id="ph1">`values`</ph> musi zawierać co najmniej <ph id="ph2">&lt;xref:System.Numerics.Vector%601.Count%2A&gt;</ph> elementów.</target>       </trans-unit>
        <trans-unit id="114" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.#ctor(`0[])">
          <source><ph id="ph1">&lt;paramref name="values" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="values" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="115" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.#ctor(`0[],System.Int32)">
          <source>A numeric array.</source>
          <target state="translated">Tablica numeryczna.</target>       </trans-unit>
        <trans-unit id="116" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.#ctor(`0[],System.Int32)">
          <source>The starting index position from which to create the vector.</source>
          <target state="translated">Położenie początkowe indeksu z którym ma zostać utworzony wektora.</target>       </trans-unit>
        <trans-unit id="117" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.#ctor(`0[],System.Int32)">
          <source>Creates a vector from a specified array starting at a specified index position.</source>
          <target state="translated">Tworzy wektora z określonej tablicy, zaczynając od pozycji określonego indeksu.</target>       </trans-unit>
        <trans-unit id="118" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Numerics.Vector`1.#ctor(`0[],System.Int32)">
          <source>The array must contain at least [Vector(T) Constructor (T<ph id="ph1">\&lt;</ph>xref:System.Numerics.Vector%601.Count%2A?displayProperty=nameWithType&gt; elements from the specified index.</source>
          <target state="translated">Tablica musi zawierać co najmniej [Vector(T) — Konstruktor (T<ph id="ph1">\&lt;</ph>xref:System.Numerics.Vector%601.Count%2A?displayProperty=nameWithType &gt; elementów z określonym indeksem.</target>       </trans-unit>
        <trans-unit id="119" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.#ctor(`0[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="values" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="values" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="120" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.#ctor(`0[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> jest mniejsza od zera.</target>       </trans-unit>
        <trans-unit id="121" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.#ctor(`0[],System.Int32)">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="122" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.#ctor(`0[],System.Int32)">
          <source>The length of <ph id="ph1">&lt;paramref name="values" /&gt;</ph> minus <ph id="ph2">&lt;paramref name="index" /&gt;</ph> is less than <ph id="ph3">&lt;see cref="P:System.Numerics.Vector`1.Count" /&gt;</ph>.</source>
          <target state="translated">Długość <ph id="ph1">&lt;paramref name="values" /&gt;</ph> minus <ph id="ph2">&lt;paramref name="index" /&gt;</ph> jest mniejsza niż <ph id="ph3">&lt;see cref="P:System.Numerics.Vector`1.Count" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="123" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.CopyTo(`0[])">
          <source>The array to receive a copy of the vector values.</source>
          <target state="translated">Tablicy, tak aby otrzymać kopię wartości wektora.</target>       </trans-unit>
        <trans-unit id="124" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.CopyTo(`0[])">
          <source>Copies the vector instance to a specified destination array.</source>
          <target state="translated">Kopiuje wystąpienie wektorów do określonej lokalizacji docelowej tablicy.</target>       </trans-unit>
        <trans-unit id="125" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Numerics.Vector`1.CopyTo(`0[])">
          <source>The copy operation begins at index 0 of <ph id="ph1">`destination`</ph>.</source>
          <target state="translated">Operacja kopiowania rozpoczyna się pod indeksem 0 z <ph id="ph1">`destination`</ph>.</target>       </trans-unit>
        <trans-unit id="126" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Numerics.Vector`1.CopyTo(`0[])">
          <source>The destination array must have at least <ph id="ph1">&lt;xref:System.Numerics.Vector%601.Count%2A?displayProperty=nameWithType&gt;</ph> elements.</source>
          <target state="translated">Tablica docelowa musi mieć co najmniej <ph id="ph1">&lt;xref:System.Numerics.Vector%601.Count%2A?displayProperty=nameWithType&gt;</ph> elementów.</target>       </trans-unit>
        <trans-unit id="127" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.CopyTo(`0[])">
          <source><ph id="ph1">&lt;paramref name="destination" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="destination" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="128" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.CopyTo(`0[])">
          <source>The number of elements in the current vector is greater than the number of elements available in the <ph id="ph1">&lt;paramref name="destination" /&gt;</ph> array.</source>
          <target state="translated">Liczba elementów w wektorze bieżącego jest większa niż liczba elementów jest dostępnych w <ph id="ph1">&lt;paramref name="destination" /&gt;</ph> tablicy.</target>       </trans-unit>
        <trans-unit id="129" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.CopyTo(`0[],System.Int32)">
          <source>The array to receive a copy of the vector values.</source>
          <target state="translated">Tablicy, tak aby otrzymać kopię wartości wektora.</target>       </trans-unit>
        <trans-unit id="130" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.CopyTo(`0[],System.Int32)">
          <source>The starting index in <bpt id="p1">&lt;c&gt;</bpt>destination<ept id="p1">&lt;/c&gt;</ept> at which to begin the copy operation.</source>
          <target state="translated">Indeks początkowy w <bpt id="p1">&lt;c&gt;</bpt>docelowy<ept id="p1">&lt;/c&gt;</ept> o której ma zostać rozpoczęta operacja kopiowania.</target>       </trans-unit>
        <trans-unit id="131" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.CopyTo(`0[],System.Int32)">
          <source>Copies the vector instance to a specified destination array starting at a specified index position.</source>
          <target state="translated">Kopie wystąpienia wektorów do określonej lokalizacji docelowej tablicy, zaczynając od pozycji określonego indeksu.</target>       </trans-unit>
        <trans-unit id="132" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Numerics.Vector`1.CopyTo(`0[],System.Int32)">
          <source>The copy operation begins at index <ph id="ph1">`startIndex`</ph> of <ph id="ph2">`destination`</ph>.</source>
          <target state="translated">Operacja kopiowania rozpoczyna się od indeksu <ph id="ph1">`startIndex`</ph> z <ph id="ph2">`destination`</ph>.</target>       </trans-unit>
        <trans-unit id="133" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Numerics.Vector`1.CopyTo(`0[],System.Int32)">
          <source>The destination array must have at least <ph id="ph1">`startIndex`</ph> + [CopyTo Method (T<ph id="ph2">\&lt;</ph>xref:System.Numerics.Vector%601.Count%2A&gt; – 1 elements.</source>
          <target state="translated">Tablica docelowa musi mieć co najmniej <ph id="ph1">`startIndex`</ph> + [Metoda CopyTo (T<ph id="ph2">\&lt;</ph>xref:System.Numerics.Vector%601.Count%2A &gt;-1 elementów.</target>       </trans-unit>
        <trans-unit id="134" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.CopyTo(`0[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="destination" /&gt;</ph> is <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="destination" /&gt;</ph> jest <ph id="ph2">&lt;see langword="null" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="135" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.CopyTo(`0[],System.Int32)">
          <source>The number of elements in the current instance is greater than the number of elements available from <ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> to the end of the <ph id="ph2">&lt;paramref name="destination" /&gt;</ph> array.</source>
          <target state="translated">Liczba elementów w bieżące wystąpienie jest większa niż liczba elementów dostępnej w sklepie <ph id="ph1">&lt;paramref name="startIndex" /&gt;</ph> na końcu <ph id="ph2">&lt;paramref name="destination" /&gt;</ph> tablicy.</target>       </trans-unit>
        <trans-unit id="136" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.CopyTo(`0[],System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than zero or greater than the last index in <ph id="ph2">&lt;paramref name="destination" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> jest mniejsza niż zero lub większa niż ostatni indeksu w <ph id="ph2">&lt;paramref name="destination" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="137" translate="yes" xml:space="preserve" uid="P:System.Numerics.Vector`1.Count">
          <source>Returns the number of elements stored in the vector.</source>
          <target state="translated">Zwraca liczbę elementów przechowywanych w wektora.</target>       </trans-unit>
        <trans-unit id="138" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Numerics.Vector`1.Count">
          <source>The number of elements stored in the vector.</source>
          <target state="translated">Liczba elementów przechowywanych w wektora.</target>       </trans-unit>
        <trans-unit id="139" translate="yes" xml:space="preserve" uid="P:System.Numerics.Vector`1.Count">
          <source>Access to the property getter via reflection is not supported.</source>
          <target state="translated">Dostęp do metody pobierającej właściwości za pośrednictwem odbicia nie jest obsługiwany.</target>       </trans-unit>
        <trans-unit id="140" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.Equals(System.Numerics.Vector{`0})">
          <source>The vector to compare with this instance.</source>
          <target state="translated">Wektor do porównania z tym wystąpieniem.</target>       </trans-unit>
        <trans-unit id="141" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.Equals(System.Numerics.Vector{`0})">
          <source>Returns a value that indicates whether this instance is equal to a specified vector.</source>
          <target state="translated">Zwraca wartość wskazującą, czy to wystąpienie jest równe określonej wektora.</target>       </trans-unit>
        <trans-unit id="142" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.Equals(System.Numerics.Vector{`0})">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current instance and <ph id="ph2">&lt;paramref name="other" /&gt;</ph> are equal; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Jeśli bieżące wystąpienie i <ph id="ph2">&lt;paramref name="other" /&gt;</ph> są równe; w przeciwnym razie <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="143" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Numerics.Vector`1.Equals(System.Numerics.Vector{`0})">
          <source>Two vectors are equal if they are of the same type, have the same number of values, and each value in the current instance is equal to the corresponding value in <ph id="ph1">`other`</ph>.</source>
          <target state="translated">Dwa wektory są takie same, gdy ten sam typ, mają taką samą liczbę wartości, a każda wartość w bieżące wystąpienie jest równe odpowiednie wartości w <ph id="ph1">`other`</ph>.</target>       </trans-unit>
        <trans-unit id="144" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.Equals(System.Object)">
          <source>The object to compare with this instance.</source>
          <target state="translated">Obiekt, który ma zostać porównany z tym wystąpieniem.</target>       </trans-unit>
        <trans-unit id="145" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.Equals(System.Object)">
          <source>Returns a value that indicates whether this instance is equal to a specified object.</source>
          <target state="translated">Zwraca wartość wskazującą, czy to wystąpienie jest równe podanemu obiektowi.</target>       </trans-unit>
        <trans-unit id="146" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.Equals(System.Object)">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if the current instance and <ph id="ph2">&lt;paramref name="obj" /&gt;</ph> are equal; otherwise, <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Jeśli bieżące wystąpienie i <ph id="ph2">&lt;paramref name="obj" /&gt;</ph> są równe; w przeciwnym razie <ph id="ph3">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="147" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.Equals(System.Object)">
          <source>The method returns <ph id="ph1">&lt;see langword="false" /&gt;</ph> if <ph id="ph2">&lt;paramref name="obj" /&gt;</ph> is null, or if <ph id="ph3">&lt;paramref name="obj" /&gt;</ph> is a vector of a different type than the current instance.</source>
          <target state="translated">Metoda zwraca <ph id="ph1">&lt;see langword="false" /&gt;</ph> Jeśli <ph id="ph2">&lt;paramref name="obj" /&gt;</ph> ma wartość null, lub jeśli <ph id="ph3">&lt;paramref name="obj" /&gt;</ph> jest wektorem innego typu niż bieżące wystąpienie.</target>       </trans-unit>
        <trans-unit id="148" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Numerics.Vector`1.Equals(System.Object)">
          <source>Two vectors are equal if they are of the same type, have the same number of values, and each value in the current instance is equal to the corresponding value in <ph id="ph1">`other`</ph>.</source>
          <target state="translated">Dwa wektory są takie same, gdy ten sam typ, mają taką samą liczbę wartości, a każda wartość w bieżące wystąpienie jest równe odpowiednie wartości w <ph id="ph1">`other`</ph>.</target>       </trans-unit>
        <trans-unit id="149" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.GetHashCode">
          <source>Returns the hash code for this instance.</source>
          <target state="translated">Zwraca kod skrótu dla tego wystąpienia.</target>       </trans-unit>
        <trans-unit id="150" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.GetHashCode">
          <source>The hash code.</source>
          <target state="translated">Kod skrótu.</target>       </trans-unit>
        <trans-unit id="151" translate="yes" xml:space="preserve" uid="P:System.Numerics.Vector`1.Item(System.Int32)">
          <source>The index of the element to return.</source>
          <target state="translated">Indeks elementu do zwrócenia.</target>       </trans-unit>
        <trans-unit id="152" translate="yes" xml:space="preserve" uid="P:System.Numerics.Vector`1.Item(System.Int32)">
          <source>Gets the element at a specified index.</source>
          <target state="translated">Pobiera element pod określonym indeksem.</target>       </trans-unit>
        <trans-unit id="153" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Numerics.Vector`1.Item(System.Int32)">
          <source>The element at index <ph id="ph1">&lt;paramref name="index" /&gt;</ph>.</source>
          <target state="translated">Element pod indeksem <ph id="ph1">&lt;paramref name="index" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="154" translate="yes" xml:space="preserve" uid="P:System.Numerics.Vector`1.Item(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is less than zero.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> jest mniejsza od zera.</target>       </trans-unit>
        <trans-unit id="155" translate="yes" xml:space="preserve" uid="P:System.Numerics.Vector`1.Item(System.Int32)">
          <source>-or-</source>
          <target state="translated">—lub—</target>       </trans-unit>
        <trans-unit id="156" translate="yes" xml:space="preserve" uid="P:System.Numerics.Vector`1.Item(System.Int32)">
          <source><ph id="ph1">&lt;paramref name="index" /&gt;</ph> is greater than or equal to <ph id="ph2">&lt;see cref="P:System.Numerics.Vector`1.Count" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;paramref name="index" /&gt;</ph> jest większe lub równe <ph id="ph2">&lt;see cref="P:System.Numerics.Vector`1.Count" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="157" translate="yes" xml:space="preserve" uid="P:System.Numerics.Vector`1.One">
          <source>Returns a vector containing all ones.</source>
          <target state="translated">Zwraca wektor zawierający wszystkie z nich.</target>       </trans-unit>
        <trans-unit id="158" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Numerics.Vector`1.One">
          <source>A vector containing all ones.</source>
          <target state="translated">Wektor zawierający wszystkie z nich.</target>       </trans-unit>
        <trans-unit id="159" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.op_Addition(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
          <source>The first vector to add.</source>
          <target state="translated">Pierwszy wektorów do dodania.</target>       </trans-unit>
        <trans-unit id="160" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.op_Addition(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
          <source>The second vector to add.</source>
          <target state="translated">Drugi wektorów do dodania.</target>       </trans-unit>
        <trans-unit id="161" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.op_Addition(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
          <source>Adds two vectors together.</source>
          <target state="translated">Dodaje dwa wektory.</target>       </trans-unit>
        <trans-unit id="162" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.op_Addition(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
          <source>The summed vector.</source>
          <target state="translated">Równy określonemu procentowi wektora.</target>       </trans-unit>
        <trans-unit id="163" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Numerics.Vector`1.op_Addition(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Numerics.Vector%601.op_Addition%2A&gt;</ph> method defines the addition operation for <ph id="ph2">&lt;xref:System.Numerics.Vector%601&gt;</ph> objects.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Numerics.Vector%601.op_Addition%2A&gt;</ph> Metoda definiuje operacji dodawania dla <ph id="ph2">&lt;xref:System.Numerics.Vector%601&gt;</ph> obiektów.</target>       </trans-unit>
        <trans-unit id="164" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.op_BitwiseAnd(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
          <source>The first vector.</source>
          <target state="translated">Pierwszy wektora.</target>       </trans-unit>
        <trans-unit id="165" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.op_BitwiseAnd(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
          <source>The second vector.</source>
          <target state="translated">Drugi wektora.</target>       </trans-unit>
        <trans-unit id="166" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.op_BitwiseAnd(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
          <source>Returns a new vector by performing a bitwise <ph id="ph1">&lt;see langword="And" /&gt;</ph> operation on each of the elements in two vectors.</source>
          <target state="translated">Zwraca nowy wektor, wykonując bitowej <ph id="ph1">&lt;see langword="And" /&gt;</ph> operację na poszczególnych elementów w dwóch wektorów.</target>       </trans-unit>
        <trans-unit id="167" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.op_BitwiseAnd(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
          <source>The vector that results from the bitwise <ph id="ph1">&lt;see langword="And" /&gt;</ph> of <ph id="ph2">&lt;paramref name="left" /&gt;</ph> and <ph id="ph3">&lt;paramref name="right" /&gt;</ph>.</source>
          <target state="translated">Wektora, którego wyniki z bitowego <ph id="ph1">&lt;see langword="And" /&gt;</ph> z <ph id="ph2">&lt;paramref name="left" /&gt;</ph> i <ph id="ph3">&lt;paramref name="right" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="168" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Numerics.Vector`1.op_BitwiseAnd(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Numerics.Vector%601.op_BitwiseAnd%2A&gt;</ph> method defines the bitwise <ph id="ph2">`And`</ph> operation for <ph id="ph3">&lt;xref:System.Numerics.Vector%601&gt;</ph> objects.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Numerics.Vector%601.op_BitwiseAnd%2A&gt;</ph> Metoda definiuje operatora testu koniunkcji <ph id="ph2">`And`</ph> operacji <ph id="ph3">&lt;xref:System.Numerics.Vector%601&gt;</ph> obiektów.</target>       </trans-unit>
        <trans-unit id="169" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.op_BitwiseOr(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
          <source>The first vector.</source>
          <target state="translated">Pierwszy wektora.</target>       </trans-unit>
        <trans-unit id="170" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.op_BitwiseOr(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
          <source>The second vector.</source>
          <target state="translated">Drugi wektora.</target>       </trans-unit>
        <trans-unit id="171" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.op_BitwiseOr(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
          <source>Returns a new vector by performing a bitwise <ph id="ph1">&lt;see langword="Or" /&gt;</ph> operation on each of the elements in two vectors.</source>
          <target state="translated">Zwraca nowy wektor, wykonując bitowej <ph id="ph1">&lt;see langword="Or" /&gt;</ph> operację na poszczególnych elementów w dwóch wektorów.</target>       </trans-unit>
        <trans-unit id="172" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.op_BitwiseOr(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
          <source>The vector that results from the bitwise <ph id="ph1">&lt;see langword="Or" /&gt;</ph> of the elements in <ph id="ph2">&lt;paramref name="left" /&gt;</ph> and <ph id="ph3">&lt;paramref name="right" /&gt;</ph>.</source>
          <target state="translated">Wektora, którego wyniki z bitowego <ph id="ph1">&lt;see langword="Or" /&gt;</ph> elementów w <ph id="ph2">&lt;paramref name="left" /&gt;</ph> i <ph id="ph3">&lt;paramref name="right" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="173" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Numerics.Vector`1.op_BitwiseOr(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Numerics.Vector%601.op_BitwiseOr%2A&gt;</ph> method defines the bitwise <ph id="ph2">`Or`</ph> operation for <ph id="ph3">&lt;xref:System.Numerics.Vector%601&gt;</ph> objects.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Numerics.Vector%601.op_BitwiseOr%2A&gt;</ph> Metoda definiuje operatora testu koniunkcji <ph id="ph2">`Or`</ph> operacji <ph id="ph3">&lt;xref:System.Numerics.Vector%601&gt;</ph> obiektów.</target>       </trans-unit>
        <trans-unit id="174" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.op_Division(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
          <source>The first vector.</source>
          <target state="translated">Pierwszy wektora.</target>       </trans-unit>
        <trans-unit id="175" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.op_Division(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
          <source>The second vector.</source>
          <target state="translated">Drugi wektora.</target>       </trans-unit>
        <trans-unit id="176" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.op_Division(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
          <source>Divides the first vector by the second.</source>
          <target state="translated">Dzieli pierwszym wektorze przez drugą.</target>       </trans-unit>
        <trans-unit id="177" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.op_Division(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
          <source>The vector that results from dividing <ph id="ph1">&lt;paramref name="left" /&gt;</ph> by <ph id="ph2">&lt;paramref name="right" /&gt;</ph>.</source>
          <target state="translated">Wektora, którego wynikiem dzielenia <ph id="ph1">&lt;paramref name="left" /&gt;</ph> przez <ph id="ph2">&lt;paramref name="right" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="178" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Numerics.Vector`1.op_Division(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Numerics.Vector%601.op_Division%2A&gt;</ph> method defines the division operation for <ph id="ph2">&lt;xref:System.Numerics.Vector%601&gt;</ph> objects.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Numerics.Vector%601.op_Division%2A&gt;</ph> Metoda definiuje operacji dzielenia dla <ph id="ph2">&lt;xref:System.Numerics.Vector%601&gt;</ph> obiektów.</target>       </trans-unit>
        <trans-unit id="179" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.op_Equality(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
          <source>The first vector to compare.</source>
          <target state="translated">Pierwszy wektorów do porównania.</target>       </trans-unit>
        <trans-unit id="180" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.op_Equality(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
          <source>The second vector to compare.</source>
          <target state="translated">Drugi wektorów do porównania.</target>       </trans-unit>
        <trans-unit id="181" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.op_Equality(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
          <source>Returns a value that indicates whether each pair of elements in two specified vectors are equal.</source>
          <target state="translated">Zwraca wartość wskazującą, czy każda para elementów w dwóch wektorów określonego są takie same.</target>       </trans-unit>
        <trans-unit id="182" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.op_Equality(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if <ph id="ph2">&lt;paramref name="left" /&gt;</ph> and <ph id="ph3">&lt;paramref name="right" /&gt;</ph> are equal; otherwise, <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Jeśli <ph id="ph2">&lt;paramref name="left" /&gt;</ph> i <ph id="ph3">&lt;paramref name="right" /&gt;</ph> są równe; w przeciwnym razie <ph id="ph4">&lt;see langword="false" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="183" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Numerics.Vector`1.op_Equality(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
          <source>Two vectors are equal if they are of the same type, have the same number of values, and each value in <ph id="ph1">`left`</ph> is equal to the corresponding value in <ph id="ph2">`right`</ph>.</source>
          <target state="translated">Dwa wektory są takie same, jeśli są tego samego typu, mieć taką samą liczbę wartości, a każda wartość w <ph id="ph1">`left`</ph> jest taki sam, jak odpowiednie wartości w <ph id="ph2">`right`</ph>.</target>       </trans-unit>
        <trans-unit id="184" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.op_ExclusiveOr(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
          <source>The first vector.</source>
          <target state="translated">Pierwszy wektora.</target>       </trans-unit>
        <trans-unit id="185" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.op_ExclusiveOr(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
          <source>The second vector.</source>
          <target state="translated">Drugi wektora.</target>       </trans-unit>
        <trans-unit id="186" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.op_ExclusiveOr(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
          <source>Returns a new vector by performing a bitwise <ph id="ph1">&lt;see langword="XOr" /&gt;</ph> operation on each of the elements in two vectors.</source>
          <target state="translated">Zwraca nowy wektor, wykonując bitowej <ph id="ph1">&lt;see langword="XOr" /&gt;</ph> operację na poszczególnych elementów w dwóch wektorów.</target>       </trans-unit>
        <trans-unit id="187" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.op_ExclusiveOr(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
          <source>The vector that results from the bitwise <ph id="ph1">&lt;see langword="XOr" /&gt;</ph> of the elements in <ph id="ph2">&lt;paramref name="left" /&gt;</ph> and <ph id="ph3">&lt;paramref name="right" /&gt;</ph>.</source>
          <target state="translated">Wektora, którego wyniki z bitowego <ph id="ph1">&lt;see langword="XOr" /&gt;</ph> elementów w <ph id="ph2">&lt;paramref name="left" /&gt;</ph> i <ph id="ph3">&lt;paramref name="right" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="188" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Numerics.Vector`1.op_ExclusiveOr(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Numerics.Vector%601.op_ExclusiveOr%2A&gt;</ph> method defines the bitwise <ph id="ph2">`XOr`</ph> operation for <ph id="ph3">&lt;xref:System.Numerics.Vector%601&gt;</ph> objects.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Numerics.Vector%601.op_ExclusiveOr%2A&gt;</ph> Metoda definiuje operatora testu koniunkcji <ph id="ph2">`XOr`</ph> operacji <ph id="ph3">&lt;xref:System.Numerics.Vector%601&gt;</ph> obiektów.</target>       </trans-unit>
        <trans-unit id="189" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Byte}">
          <source>The vector to reinterpret.</source>
          <target state="translated">Wektor do reinterpret.</target>       </trans-unit>
        <trans-unit id="190" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Byte}">
          <source>Reinterprets the bits of the specified vector into a vector of type <ph id="ph1">&lt;see cref="T:System.Byte" /&gt;</ph>.</source>
          <target state="translated">Reinterprets bity określony wektor do wektora typu <ph id="ph1">&lt;see cref="T:System.Byte" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="191" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Byte}">
          <source>The reinterpreted vector.</source>
          <target state="translated">Reinterpreted wektora.</target>       </trans-unit>
        <trans-unit id="192" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Byte}">
          <source>The <ph id="ph1">&lt;xref:System.Numerics.Vector%601.op_Explicit%2A&gt;</ph> operator defines a narrowing conversion; it requires a casting operator (in C#) or a conversion method (in Visual Basic).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Numerics.Vector%601.op_Explicit%2A&gt;</ph> Konwersji zawężającej definiuje operator; wymaga operatora rzutowania (w języku C#) lub metody konwersji (w języku Visual Basic).</target>       </trans-unit>
        <trans-unit id="193" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Double}">
          <source>The vector to reinterpret.</source>
          <target state="translated">Wektor do reinterpret.</target>       </trans-unit>
        <trans-unit id="194" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Double}">
          <source>Reinterprets the bits of the specified vector into a vector of type <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph>.</source>
          <target state="translated">Reinterprets bity określony wektor do wektora typu <ph id="ph1">&lt;see cref="T:System.Double" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="195" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Double}">
          <source>The reinterpreted vector.</source>
          <target state="translated">Reinterpreted wektora.</target>       </trans-unit>
        <trans-unit id="196" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Double}">
          <source>The <ph id="ph1">&lt;xref:System.Numerics.Vector%601.op_Explicit%2A&gt;</ph> operator defines a narrowing conversion; it requires a casting operator (in C#) or a conversion method (in Visual Basic).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Numerics.Vector%601.op_Explicit%2A&gt;</ph> Konwersji zawężającej definiuje operator; wymaga operatora rzutowania (w języku C#) lub metody konwersji (w języku Visual Basic).</target>       </trans-unit>
        <trans-unit id="197" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Int16}">
          <source>The vector to reinterpret.</source>
          <target state="translated">Wektor do reinterpret.</target>       </trans-unit>
        <trans-unit id="198" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Int16}">
          <source>Reinterprets the bits of the specified vector into a vector of type <ph id="ph1">&lt;see cref="T:System.Int16" /&gt;</ph>.</source>
          <target state="translated">Reinterprets bity określony wektor do wektora typu <ph id="ph1">&lt;see cref="T:System.Int16" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="199" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Int16}">
          <source>The reinterpreted vector.</source>
          <target state="translated">Reinterpreted wektora.</target>       </trans-unit>
        <trans-unit id="200" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Int16}">
          <source>The <ph id="ph1">&lt;xref:System.Numerics.Vector%601.op_Explicit%2A&gt;</ph> operator defines a narrowing conversion; it requires a casting operator (in C#) or a conversion method (in Visual Basic).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Numerics.Vector%601.op_Explicit%2A&gt;</ph> Konwersji zawężającej definiuje operator; wymaga operatora rzutowania (w języku C#) lub metody konwersji (w języku Visual Basic).</target>       </trans-unit>
        <trans-unit id="201" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Int32}">
          <source>The vector to reinterpret.</source>
          <target state="translated">Wektor do reinterpret.</target>       </trans-unit>
        <trans-unit id="202" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Int32}">
          <source>Reinterprets the bits of the specified vector into a vector of type <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph>.</source>
          <target state="translated">Reinterprets bity określony wektor do wektora typu <ph id="ph1">&lt;see cref="T:System.Int32" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="203" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Int32}">
          <source>The reinterpreted vector.</source>
          <target state="translated">Reinterpreted wektora.</target>       </trans-unit>
        <trans-unit id="204" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Int32}">
          <source>The <ph id="ph1">&lt;xref:System.Numerics.Vector%601.op_Explicit%2A&gt;</ph> operator defines a narrowing conversion; it requires a casting operator (in C#) or a conversion method (in Visual Basic).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Numerics.Vector%601.op_Explicit%2A&gt;</ph> Konwersji zawężającej definiuje operator; wymaga operatora rzutowania (w języku C#) lub metody konwersji (w języku Visual Basic).</target>       </trans-unit>
        <trans-unit id="205" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Int64}">
          <source>The vector to reinterpret.</source>
          <target state="translated">Wektor do reinterpret.</target>       </trans-unit>
        <trans-unit id="206" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Int64}">
          <source>Reinterprets the bits of the specified vector into a vector of type <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph>.</source>
          <target state="translated">Reinterprets bity określony wektor do wektora typu <ph id="ph1">&lt;see cref="T:System.Int64" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="207" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Int64}">
          <source>The reinterpreted vector.</source>
          <target state="translated">Reinterpreted wektora.</target>       </trans-unit>
        <trans-unit id="208" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Int64}">
          <source>The <ph id="ph1">&lt;xref:System.Numerics.Vector%601.op_Explicit%2A&gt;</ph> operator defines a narrowing conversion; it requires a casting operator (in C#) or a conversion method (in Visual Basic).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Numerics.Vector%601.op_Explicit%2A&gt;</ph> Konwersji zawężającej definiuje operator; wymaga operatora rzutowania (w języku C#) lub metody konwersji (w języku Visual Basic).</target>       </trans-unit>
        <trans-unit id="209" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.SByte}">
          <source>The vector to reinterpret.</source>
          <target state="translated">Wektor do reinterpret.</target>       </trans-unit>
        <trans-unit id="210" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.SByte}">
          <source>Reinterprets the bits of the specified vector into a vector of type <ph id="ph1">&lt;see cref="T:System.SByte" /&gt;</ph>.</source>
          <target state="translated">Reinterprets bity określony wektor do wektora typu <ph id="ph1">&lt;see cref="T:System.SByte" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="211" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.SByte}">
          <source>The reinterpreted vector.</source>
          <target state="translated">Reinterpreted wektora.</target>       </trans-unit>
        <trans-unit id="212" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.SByte}">
          <source>The <ph id="ph1">&lt;xref:System.Numerics.Vector%601.op_Explicit%2A&gt;</ph> operator defines a narrowing conversion; it requires a casting operator (in C#) or a conversion method (in Visual Basic).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Numerics.Vector%601.op_Explicit%2A&gt;</ph> Konwersji zawężającej definiuje operator; wymaga operatora rzutowania (w języku C#) lub metody konwersji (w języku Visual Basic).</target>       </trans-unit>
        <trans-unit id="213" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Single}">
          <source>The vector to reinterpret.</source>
          <target state="translated">Wektor do reinterpret.</target>       </trans-unit>
        <trans-unit id="214" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Single}">
          <source>Reinterprets the bits of the specified vector into a vector of type <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph>.</source>
          <target state="translated">Reinterprets bity określony wektor do wektora typu <ph id="ph1">&lt;see cref="T:System.Single" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="215" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Single}">
          <source>The reinterpreted vector.</source>
          <target state="translated">Reinterpreted wektora.</target>       </trans-unit>
        <trans-unit id="216" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.Single}">
          <source>The <ph id="ph1">&lt;xref:System.Numerics.Vector%601.op_Explicit%2A&gt;</ph> operator defines a narrowing conversion; it requires a casting operator (in C#) or a conversion method (in Visual Basic).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Numerics.Vector%601.op_Explicit%2A&gt;</ph> Konwersji zawężającej definiuje operator; wymaga operatora rzutowania (w języku C#) lub metody konwersji (w języku Visual Basic).</target>       </trans-unit>
        <trans-unit id="217" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.UInt16}">
          <source>The vector to reinterpret.</source>
          <target state="translated">Wektor do reinterpret.</target>       </trans-unit>
        <trans-unit id="218" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.UInt16}">
          <source>Reinterprets the bits of the specified vector into a vector of type <ph id="ph1">&lt;see cref="T:System.UInt16" /&gt;</ph>.</source>
          <target state="translated">Reinterprets bity określony wektor do wektora typu <ph id="ph1">&lt;see cref="T:System.UInt16" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="219" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.UInt16}">
          <source>The reinterpreted vector.</source>
          <target state="translated">Reinterpreted wektora.</target>       </trans-unit>
        <trans-unit id="220" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.UInt16}">
          <source>The <ph id="ph1">&lt;xref:System.Numerics.Vector%601.op_Explicit%2A&gt;</ph> operator defines a narrowing conversion; it requires a casting operator (in C#) or a conversion method (in Visual Basic).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Numerics.Vector%601.op_Explicit%2A&gt;</ph> Konwersji zawężającej definiuje operator; wymaga operatora rzutowania (w języku C#) lub metody konwersji (w języku Visual Basic).</target>       </trans-unit>
        <trans-unit id="221" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.UInt32}">
          <source>The vector to reinterpret.</source>
          <target state="translated">Wektor do reinterpret.</target>       </trans-unit>
        <trans-unit id="222" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.UInt32}">
          <source>Reinterprets the bits of the specified vector into a vector of type <ph id="ph1">&lt;see cref="T:System.UInt32" /&gt;</ph>.</source>
          <target state="translated">Reinterprets bity określony wektor do wektora typu <ph id="ph1">&lt;see cref="T:System.UInt32" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="223" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.UInt32}">
          <source>The reinterpreted vector.</source>
          <target state="translated">Reinterpreted wektora.</target>       </trans-unit>
        <trans-unit id="224" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.UInt32}">
          <source>The <ph id="ph1">&lt;xref:System.Numerics.Vector%601.op_Explicit%2A&gt;</ph> operator defines a narrowing conversion; it requires a casting operator (in C#) or a conversion method (in Visual Basic).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Numerics.Vector%601.op_Explicit%2A&gt;</ph> Konwersji zawężającej definiuje operator; wymaga operatora rzutowania (w języku C#) lub metody konwersji (w języku Visual Basic).</target>       </trans-unit>
        <trans-unit id="225" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.UInt64}">
          <source>The vector to reinterpret.</source>
          <target state="translated">Wektor do reinterpret.</target>       </trans-unit>
        <trans-unit id="226" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.UInt64}">
          <source>Reinterprets the bits of the specified vector into a vector of type <ph id="ph1">&lt;see cref="T:System.UInt64" /&gt;</ph>.</source>
          <target state="translated">Reinterprets bity określony wektor do wektora typu <ph id="ph1">&lt;see cref="T:System.UInt64" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="227" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.UInt64}">
          <source>The reinterpreted vector.</source>
          <target state="translated">Reinterpreted wektora.</target>       </trans-unit>
        <trans-unit id="228" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Numerics.Vector`1.op_Explicit(System.Numerics.Vector{`0})~System.Numerics.Vector{System.UInt64}">
          <source>The <ph id="ph1">&lt;xref:System.Numerics.Vector%601.op_Explicit%2A&gt;</ph> operator defines a narrowing conversion; it requires a casting operator (in C#) or a conversion method (in Visual Basic).</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Numerics.Vector%601.op_Explicit%2A&gt;</ph> Konwersji zawężającej definiuje operator; wymaga operatora rzutowania (w języku C#) lub metody konwersji (w języku Visual Basic).</target>       </trans-unit>
        <trans-unit id="229" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.op_Inequality(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
          <source>The first vector to compare.</source>
          <target state="translated">Pierwszy wektorów do porównania.</target>       </trans-unit>
        <trans-unit id="230" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.op_Inequality(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
          <source>The second vector to compare.</source>
          <target state="translated">Drugi wektorów do porównania.</target>       </trans-unit>
        <trans-unit id="231" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.op_Inequality(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
          <source>Returns a value that indicates whether any single pair of elements in the specified vectors is equal.</source>
          <target state="translated">Zwraca wartość wskazującą, czy jakiejkolwiek parze pojedynczego elementów w określonym wektory jest taki sam.</target>       </trans-unit>
        <trans-unit id="232" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.op_Inequality(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
          <source><ph id="ph1">&lt;see langword="true" /&gt;</ph> if any element pairs in left and right are equal.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="true" /&gt;</ph> Jeśli wszystkie pary element w lewo i w prawo są takie same.</target>       </trans-unit>
        <trans-unit id="233" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.op_Inequality(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
          <source><ph id="ph1">&lt;see langword="false" /&gt;</ph> if no element pairs are equal.</source>
          <target state="translated"><ph id="ph1">&lt;see langword="false" /&gt;</ph> Jeśli nie pary elementu są takie same.</target>       </trans-unit>
        <trans-unit id="234" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.op_Multiply(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
          <source>The first vector.</source>
          <target state="translated">Pierwszy wektora.</target>       </trans-unit>
        <trans-unit id="235" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.op_Multiply(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
          <source>The second vector.</source>
          <target state="translated">Drugi wektora.</target>       </trans-unit>
        <trans-unit id="236" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.op_Multiply(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
          <source>Multiplies two vectors together.</source>
          <target state="translated">Mnoży ze sobą dwa wektory.</target>       </trans-unit>
        <trans-unit id="237" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.op_Multiply(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
          <source>The product vector.</source>
          <target state="translated">Wektor produktu.</target>       </trans-unit>
        <trans-unit id="238" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Numerics.Vector`1.op_Multiply(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Numerics.Vector%601.op_Multiply%2A&gt;</ph> method defines the multiplication operation for <ph id="ph2">&lt;xref:System.Numerics.Vector%601&gt;</ph> objects.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Numerics.Vector%601.op_Multiply%2A&gt;</ph> Metoda definiuje mnożenie dla <ph id="ph2">&lt;xref:System.Numerics.Vector%601&gt;</ph> obiektów.</target>       </trans-unit>
        <trans-unit id="239" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.op_Multiply(System.Numerics.Vector{`0},`0)">
          <source>The source vector.</source>
          <target state="translated">Wektorze źródłowym.</target>       </trans-unit>
        <trans-unit id="240" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.op_Multiply(System.Numerics.Vector{`0},`0)">
          <source>A scalar value.</source>
          <target state="translated">Wartość skalarną.</target>       </trans-unit>
        <trans-unit id="241" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.op_Multiply(System.Numerics.Vector{`0},`0)">
          <source>Multiplies a vector by a specified scalar value.</source>
          <target state="translated">Mnoży wektora przez określoną wartość skalarną.</target>       </trans-unit>
        <trans-unit id="242" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.op_Multiply(System.Numerics.Vector{`0},`0)">
          <source>The scaled vector.</source>
          <target state="translated">Skalowanie wektora.</target>       </trans-unit>
        <trans-unit id="243" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Numerics.Vector`1.op_Multiply(System.Numerics.Vector{`0},`0)">
          <source>The <ph id="ph1">&lt;xref:System.Numerics.Vector%601.op_Multiply%2A&gt;</ph> method defines the multiplication operation for <ph id="ph2">&lt;xref:System.Numerics.Vector%601&gt;</ph> objects.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Numerics.Vector%601.op_Multiply%2A&gt;</ph> Metoda definiuje mnożenie dla <ph id="ph2">&lt;xref:System.Numerics.Vector%601&gt;</ph> obiektów.</target>       </trans-unit>
        <trans-unit id="244" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.op_Multiply(`0,System.Numerics.Vector{`0})">
          <source>The scalar value.</source>
          <target state="translated">Wartość skalarną.</target>       </trans-unit>
        <trans-unit id="245" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.op_Multiply(`0,System.Numerics.Vector{`0})">
          <source>The source vector.</source>
          <target state="translated">Wektorze źródłowym.</target>       </trans-unit>
        <trans-unit id="246" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.op_Multiply(`0,System.Numerics.Vector{`0})">
          <source>Multiplies a vector by the given scalar.</source>
          <target state="translated">Mnoży wektora przez dany skalarnych.</target>       </trans-unit>
        <trans-unit id="247" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.op_Multiply(`0,System.Numerics.Vector{`0})">
          <source>The scaled vector.</source>
          <target state="translated">Skalowanie wektora.</target>       </trans-unit>
        <trans-unit id="248" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Numerics.Vector`1.op_Multiply(`0,System.Numerics.Vector{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Numerics.Vector%601.op_Multiply%2A&gt;</ph> method defines the multiplication operation for <ph id="ph2">&lt;xref:System.Numerics.Vector%601&gt;</ph> objects.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Numerics.Vector%601.op_Multiply%2A&gt;</ph> Metoda definiuje mnożenie dla <ph id="ph2">&lt;xref:System.Numerics.Vector%601&gt;</ph> obiektów.</target>       </trans-unit>
        <trans-unit id="249" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.op_OnesComplement(System.Numerics.Vector{`0})">
          <source>The source vector.</source>
          <target state="translated">Wektorze źródłowym.</target>       </trans-unit>
        <trans-unit id="250" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.op_OnesComplement(System.Numerics.Vector{`0})">
          <source>Returns a new vector whose elements are obtained by taking the one's complement of a specified vector's elements.</source>
          <target state="translated">Zwraca nowy wektor, której elementy są uzyskiwane przez podejmowanie dopełnienia swoich elementów określony wektor.</target>       </trans-unit>
        <trans-unit id="251" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.op_OnesComplement(System.Numerics.Vector{`0})">
          <source>The one's complement vector.</source>
          <target state="translated">Swoich dopełnienia wektora.</target>       </trans-unit>
        <trans-unit id="252" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.op_Subtraction(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
          <source>The first vector.</source>
          <target state="translated">Pierwszy wektora.</target>       </trans-unit>
        <trans-unit id="253" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.op_Subtraction(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
          <source>The second vector.</source>
          <target state="translated">Drugi wektora.</target>       </trans-unit>
        <trans-unit id="254" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.op_Subtraction(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
          <source>Subtracts the second vector from the first.</source>
          <target state="translated">Odejmuje drugi wektora z pierwszej.</target>       </trans-unit>
        <trans-unit id="255" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.op_Subtraction(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
          <source>The vector that results from subtracting <ph id="ph1">&lt;paramref name="right" /&gt;</ph> from <ph id="ph2">&lt;paramref name="left" /&gt;</ph>.</source>
          <target state="translated">Wektora, którego wynikiem odjęcie <ph id="ph1">&lt;paramref name="right" /&gt;</ph> z <ph id="ph2">&lt;paramref name="left" /&gt;</ph>.</target>       </trans-unit>
        <trans-unit id="256" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Numerics.Vector`1.op_Subtraction(System.Numerics.Vector{`0},System.Numerics.Vector{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Numerics.Vector%601.op_Subtraction%2A&gt;</ph> method defines the subtraction operation for <ph id="ph2">&lt;xref:System.Numerics.Vector%601&gt;</ph> objects.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Numerics.Vector%601.op_Subtraction%2A&gt;</ph> Metoda definiuje operacji odejmowania <ph id="ph2">&lt;xref:System.Numerics.Vector%601&gt;</ph> obiektów.</target>       </trans-unit>
        <trans-unit id="257" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.op_UnaryNegation(System.Numerics.Vector{`0})">
          <source>The vector to negate.</source>
          <target state="translated">Wektor, aby odwrócić.</target>       </trans-unit>
        <trans-unit id="258" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.op_UnaryNegation(System.Numerics.Vector{`0})">
          <source>Negates a given vector.</source>
          <target state="translated">Negacja danego wektora.</target>       </trans-unit>
        <trans-unit id="259" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.op_UnaryNegation(System.Numerics.Vector{`0})">
          <source>The negated vector.</source>
          <target state="translated">Zanegowaną wektora.</target>       </trans-unit>
        <trans-unit id="260" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Numerics.Vector`1.op_UnaryNegation(System.Numerics.Vector{`0})">
          <source>The <ph id="ph1">&lt;xref:System.Numerics.Vector%601.op_UnaryNegation%2A&gt;</ph> method defines the unary negation operation for <ph id="ph2">&lt;xref:System.Numerics.Vector%601&gt;</ph> objects.</source>
          <target state="translated"><ph id="ph1">&lt;xref:System.Numerics.Vector%601.op_UnaryNegation%2A&gt;</ph> Metoda definiuje operacji negacji jednoargumentowy <ph id="ph2">&lt;xref:System.Numerics.Vector%601&gt;</ph> obiektów.</target>       </trans-unit>
        <trans-unit id="261" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.ToString">
          <source>Returns the string representation of this vector using default formatting.</source>
          <target state="translated">Zwraca reprezentację ciągu tego wektor przy użyciu domyślnego formatowania.</target>       </trans-unit>
        <trans-unit id="262" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.ToString">
          <source>The string representation of this vector.</source>
          <target state="translated">Reprezentacja ciągu tego wektora.</target>       </trans-unit>
        <trans-unit id="263" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Numerics.Vector`1.ToString">
          <source>This method returns a string in which each element of the vector is formatted using the "G" (general) format string and the formatting conventions of the current thread culture.</source>
          <target state="translated">Ta metoda zwraca wartość typu ciąg, w którym każdy element wektora jest sformatowany przy użyciu ciągu formatu (Ogólne) "G" i konwencje formatowanie bieżącej kultury wątku.</target>       </trans-unit>
        <trans-unit id="264" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Numerics.Vector`1.ToString">
          <source>The current culture's <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A?displayProperty=nameWithType&gt;</ph> property followed by a space is used to separate each element.</source>
          <target state="translated">Bieżąca kultura <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A?displayProperty=nameWithType&gt;</ph> następuje spacja jest używana do oddzielenia poszczególnych elementów.</target>       </trans-unit>
        <trans-unit id="265" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.ToString(System.String)">
          <source>A  or  that defines the format of individual elements.</source>
          <target state="translated">A lub definiuje format poszczególne elementy.</target>       </trans-unit>
        <trans-unit id="266" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.ToString(System.String)">
          <source>Returns the string representation of this vector using the specified format string to format individual elements.</source>
          <target state="translated">Zwraca reprezentację ciągu tego wektor przy użyciu określonego ciągu formatu do formatowania poszczególne elementy.</target>       </trans-unit>
        <trans-unit id="267" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.ToString(System.String)">
          <source>The string representation of the current instance.</source>
          <target state="translated">Reprezentacja ciągu bieżącego wystąpienia.</target>       </trans-unit>
        <trans-unit id="268" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Numerics.Vector`1.ToString(System.String)">
          <source>This method returns a string in which each element of the vector is formatted using <ph id="ph1">`format`</ph> and the current culture's formatting conventions.</source>
          <target state="translated">Ta metoda zwraca ciąg, w którym każdy element wektora jest sformatowany przy użyciu <ph id="ph1">`format`</ph> i konwencje formatowanie bieżącej kultury.</target>       </trans-unit>
        <trans-unit id="269" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Numerics.Vector`1.ToString(System.String)">
          <source>The current culture's <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A?displayProperty=nameWithType&gt;</ph> property followed by a space is used to separate each element.</source>
          <target state="translated">Bieżąca kultura <ph id="ph1">&lt;xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A?displayProperty=nameWithType&gt;</ph> następuje spacja jest używana do oddzielenia poszczególnych elementów.</target>       </trans-unit>
        <trans-unit id="270" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.ToString(System.String,System.IFormatProvider)">
          <source>A  or  that defines the format of individual elements.</source>
          <target state="translated">A lub definiuje format poszczególne elementy.</target>       </trans-unit>
        <trans-unit id="271" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.ToString(System.String,System.IFormatProvider)">
          <source>A format provider that supplies culture-specific formatting information.</source>
          <target state="translated">Dostawca formatu, który dostarcza informacje dotyczące formatowania specyficzne dla kultury.</target>       </trans-unit>
        <trans-unit id="272" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.ToString(System.String,System.IFormatProvider)">
          <source>Returns the string representation of this vector using the specified format string to format individual elements and the specified format provider to define culture-specific formatting.</source>
          <target state="translated">Zwraca reprezentację ciągu tego wektor przy użyciu określonego ciągu formatu formatowanie poszczególne elementy i dostawcy określonego formatu do definiowania formatowanie specyficzne dla kultury.</target>       </trans-unit>
        <trans-unit id="273" translate="yes" xml:space="preserve" uid="M:System.Numerics.Vector`1.ToString(System.String,System.IFormatProvider)">
          <source>The string representation of the current instance.</source>
          <target state="translated">Reprezentacja ciągu bieżącego wystąpienia.</target>       </trans-unit>
        <trans-unit id="274" translate="yes" xml:space="preserve" extradata="MT" uid="M:System.Numerics.Vector`1.ToString(System.String,System.IFormatProvider)">
          <source>This method returns a string in which each element of the vector is formatted using <ph id="ph1">`format`</ph> and <ph id="ph2">`formatProvider`</ph>, and the format provider's <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A?displayProperty=nameWithType&gt;</ph> property followed by a space is used to separate each element.</source>
          <target state="translated">Ta metoda zwraca ciąg, w którym każdy element wektora jest sformatowany przy użyciu <ph id="ph1">`format`</ph> i <ph id="ph2">`formatProvider`</ph>, a dostawca formatu <ph id="ph3">&lt;xref:System.Globalization.NumberFormatInfo.NumberGroupSeparator%2A?displayProperty=nameWithType&gt;</ph> następuje spacja jest używana do oddzielenia poszczególnych elementów.</target>       </trans-unit>
        <trans-unit id="275" translate="yes" xml:space="preserve" uid="P:System.Numerics.Vector`1.Zero">
          <source>Returns a vector containing all zeroes.</source>
          <target state="translated">Zwraca wektor zawierający same zera.</target>       </trans-unit>
        <trans-unit id="276" translate="yes" xml:space="preserve" extradata="MT" uid="P:System.Numerics.Vector`1.Zero">
          <source>A vector containing all zeroes.</source>
          <target state="translated">Wektor zawierający same zera.</target>       </trans-unit>
      </group>
    </body>
  </file>
</xliff>